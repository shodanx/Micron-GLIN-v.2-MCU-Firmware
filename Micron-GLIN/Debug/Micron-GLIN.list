
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9e0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800eb20  0800eb20  0001eb20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0e0  0800f0e0  000206bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0e0  0800f0e0  0001f0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0e8  0800f0e8  000206bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0e8  0800f0e8  0001f0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0ec  0800f0ec  0001f0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006bc  20000000  0800f0f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf4  200006bc  0800f7ac  000206bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b0  0800f7ac  000213b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024979  00000000  00000000  000206e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c32  00000000  00000000  0004505e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00049c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  0004b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199c5  00000000  00000000  0004c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019df6  00000000  00000000  00065c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008451e  00000000  00000000  0007fa13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103f31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a0  00000000  00000000  00103f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200006bc 	.word	0x200006bc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800eb08 	.word	0x0800eb08

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200006c0 	.word	0x200006c0
 800017c:	0800eb08 	.word	0x0800eb08

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_d2f>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a98:	bf24      	itt	cs
 8000a9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa2:	d90d      	bls.n	8000ac0 <__aeabi_d2f+0x30>
 8000aa4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab8:	bf08      	it	eq
 8000aba:	f020 0001 	biceq.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac4:	d121      	bne.n	8000b0a <__aeabi_d2f+0x7a>
 8000ac6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aca:	bfbc      	itt	lt
 8000acc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	4770      	bxlt	lr
 8000ad2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ada:	f1c2 0218 	rsb	r2, r2, #24
 8000ade:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aea:	bf18      	it	ne
 8000aec:	f040 0001 	orrne.w	r0, r0, #1
 8000af0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000afc:	ea40 000c 	orr.w	r0, r0, ip
 8000b00:	fa23 f302 	lsr.w	r3, r3, r2
 8000b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b08:	e7cc      	b.n	8000aa4 <__aeabi_d2f+0x14>
 8000b0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0e:	d107      	bne.n	8000b20 <__aeabi_d2f+0x90>
 8000b10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b14:	bf1e      	ittt	ne
 8000b16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1e:	4770      	bxne	lr
 8000b20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_frsub>:
 8000b30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	e002      	b.n	8000b3c <__addsf3>
 8000b36:	bf00      	nop

08000b38 <__aeabi_fsub>:
 8000b38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b3c <__addsf3>:
 8000b3c:	0042      	lsls	r2, r0, #1
 8000b3e:	bf1f      	itttt	ne
 8000b40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b44:	ea92 0f03 	teqne	r2, r3
 8000b48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b50:	d06a      	beq.n	8000c28 <__addsf3+0xec>
 8000b52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5a:	bfc1      	itttt	gt
 8000b5c:	18d2      	addgt	r2, r2, r3
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	4048      	eorgt	r0, r1
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	bfb8      	it	lt
 8000b66:	425b      	neglt	r3, r3
 8000b68:	2b19      	cmp	r3, #25
 8000b6a:	bf88      	it	hi
 8000b6c:	4770      	bxhi	lr
 8000b6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8a:	bf18      	it	ne
 8000b8c:	4249      	negne	r1, r1
 8000b8e:	ea92 0f03 	teq	r2, r3
 8000b92:	d03f      	beq.n	8000c14 <__addsf3+0xd8>
 8000b94:	f1a2 0201 	sub.w	r2, r2, #1
 8000b98:	fa41 fc03 	asr.w	ip, r1, r3
 8000b9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ba0:	f1c3 0320 	rsb	r3, r3, #32
 8000ba4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	d502      	bpl.n	8000bb4 <__addsf3+0x78>
 8000bae:	4249      	negs	r1, r1
 8000bb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb8:	d313      	bcc.n	8000be2 <__addsf3+0xa6>
 8000bba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bbe:	d306      	bcc.n	8000bce <__addsf3+0x92>
 8000bc0:	0840      	lsrs	r0, r0, #1
 8000bc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc6:	f102 0201 	add.w	r2, r2, #1
 8000bca:	2afe      	cmp	r2, #254	; 0xfe
 8000bcc:	d251      	bcs.n	8000c72 <__addsf3+0x136>
 8000bce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd6:	bf08      	it	eq
 8000bd8:	f020 0001 	biceq.w	r0, r0, #1
 8000bdc:	ea40 0003 	orr.w	r0, r0, r3
 8000be0:	4770      	bx	lr
 8000be2:	0049      	lsls	r1, r1, #1
 8000be4:	eb40 0000 	adc.w	r0, r0, r0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	bf28      	it	cs
 8000bec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf0:	d2ed      	bcs.n	8000bce <__addsf3+0x92>
 8000bf2:	fab0 fc80 	clz	ip, r0
 8000bf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c02:	bfaa      	itet	ge
 8000c04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c08:	4252      	neglt	r2, r2
 8000c0a:	4318      	orrge	r0, r3
 8000c0c:	bfbc      	itt	lt
 8000c0e:	40d0      	lsrlt	r0, r2
 8000c10:	4318      	orrlt	r0, r3
 8000c12:	4770      	bx	lr
 8000c14:	f092 0f00 	teq	r2, #0
 8000c18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c1c:	bf06      	itte	eq
 8000c1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c22:	3201      	addeq	r2, #1
 8000c24:	3b01      	subne	r3, #1
 8000c26:	e7b5      	b.n	8000b94 <__addsf3+0x58>
 8000c28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c30:	bf18      	it	ne
 8000c32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c36:	d021      	beq.n	8000c7c <__addsf3+0x140>
 8000c38:	ea92 0f03 	teq	r2, r3
 8000c3c:	d004      	beq.n	8000c48 <__addsf3+0x10c>
 8000c3e:	f092 0f00 	teq	r2, #0
 8000c42:	bf08      	it	eq
 8000c44:	4608      	moveq	r0, r1
 8000c46:	4770      	bx	lr
 8000c48:	ea90 0f01 	teq	r0, r1
 8000c4c:	bf1c      	itt	ne
 8000c4e:	2000      	movne	r0, #0
 8000c50:	4770      	bxne	lr
 8000c52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c56:	d104      	bne.n	8000c62 <__addsf3+0x126>
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	4770      	bx	lr
 8000c62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c66:	bf3c      	itt	cc
 8000c68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bxcc	lr
 8000c6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7a:	4770      	bx	lr
 8000c7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c80:	bf16      	itet	ne
 8000c82:	4608      	movne	r0, r1
 8000c84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c88:	4601      	movne	r1, r0
 8000c8a:	0242      	lsls	r2, r0, #9
 8000c8c:	bf06      	itte	eq
 8000c8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c92:	ea90 0f01 	teqeq	r0, r1
 8000c96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_ui2f>:
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e004      	b.n	8000cac <__aeabi_i2f+0x8>
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_i2f>:
 8000ca4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca8:	bf48      	it	mi
 8000caa:	4240      	negmi	r0, r0
 8000cac:	ea5f 0c00 	movs.w	ip, r0
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb8:	4601      	mov	r1, r0
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	e01c      	b.n	8000cfa <__aeabi_l2f+0x2a>

08000cc0 <__aeabi_ul2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e00a      	b.n	8000ce4 <__aeabi_l2f+0x14>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_l2f>:
 8000cd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd4:	bf08      	it	eq
 8000cd6:	4770      	bxeq	lr
 8000cd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cdc:	d502      	bpl.n	8000ce4 <__aeabi_l2f+0x14>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	ea5f 0c01 	movs.w	ip, r1
 8000ce8:	bf02      	ittt	eq
 8000cea:	4684      	moveq	ip, r0
 8000cec:	4601      	moveq	r1, r0
 8000cee:	2000      	moveq	r0, #0
 8000cf0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf4:	bf08      	it	eq
 8000cf6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfe:	fabc f28c 	clz	r2, ip
 8000d02:	3a08      	subs	r2, #8
 8000d04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d08:	db10      	blt.n	8000d2c <__aeabi_l2f+0x5c>
 8000d0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0e:	4463      	add	r3, ip
 8000d10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	f020 0001 	biceq.w	r0, r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	f102 0220 	add.w	r2, r2, #32
 8000d30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_fmul>:
 8000d4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d54:	bf1e      	ittt	ne
 8000d56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5a:	ea92 0f0c 	teqne	r2, ip
 8000d5e:	ea93 0f0c 	teqne	r3, ip
 8000d62:	d06f      	beq.n	8000e44 <__aeabi_fmul+0xf8>
 8000d64:	441a      	add	r2, r3
 8000d66:	ea80 0c01 	eor.w	ip, r0, r1
 8000d6a:	0240      	lsls	r0, r0, #9
 8000d6c:	bf18      	it	ne
 8000d6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d72:	d01e      	beq.n	8000db2 <__aeabi_fmul+0x66>
 8000d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d80:	fba0 3101 	umull	r3, r1, r0, r1
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d8c:	bf3e      	ittt	cc
 8000d8e:	0049      	lslcc	r1, r1, #1
 8000d90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d94:	005b      	lslcc	r3, r3, #1
 8000d96:	ea40 0001 	orr.w	r0, r0, r1
 8000d9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9e:	2afd      	cmp	r2, #253	; 0xfd
 8000da0:	d81d      	bhi.n	8000dde <__aeabi_fmul+0x92>
 8000da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000daa:	bf08      	it	eq
 8000dac:	f020 0001 	biceq.w	r0, r0, #1
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dba:	bf08      	it	eq
 8000dbc:	0249      	lsleq	r1, r1, #9
 8000dbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc6:	3a7f      	subs	r2, #127	; 0x7f
 8000dc8:	bfc2      	ittt	gt
 8000dca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd2:	4770      	bxgt	lr
 8000dd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	3a01      	subs	r2, #1
 8000dde:	dc5d      	bgt.n	8000e9c <__aeabi_fmul+0x150>
 8000de0:	f112 0f19 	cmn.w	r2, #25
 8000de4:	bfdc      	itt	le
 8000de6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dea:	4770      	bxle	lr
 8000dec:	f1c2 0200 	rsb	r2, r2, #0
 8000df0:	0041      	lsls	r1, r0, #1
 8000df2:	fa21 f102 	lsr.w	r1, r1, r2
 8000df6:	f1c2 0220 	rsb	r2, r2, #32
 8000dfa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e02:	f140 0000 	adc.w	r0, r0, #0
 8000e06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e0a:	bf08      	it	eq
 8000e0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e10:	4770      	bx	lr
 8000e12:	f092 0f00 	teq	r2, #0
 8000e16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0040      	lsleq	r0, r0, #1
 8000e1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e22:	3a01      	subeq	r2, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xce>
 8000e26:	ea40 000c 	orr.w	r0, r0, ip
 8000e2a:	f093 0f00 	teq	r3, #0
 8000e2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0049      	lsleq	r1, r1, #1
 8000e36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3a:	3b01      	subeq	r3, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xe6>
 8000e3e:	ea41 010c 	orr.w	r1, r1, ip
 8000e42:	e78f      	b.n	8000d64 <__aeabi_fmul+0x18>
 8000e44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e48:	ea92 0f0c 	teq	r2, ip
 8000e4c:	bf18      	it	ne
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d00a      	beq.n	8000e6a <__aeabi_fmul+0x11e>
 8000e54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e58:	bf18      	it	ne
 8000e5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5e:	d1d8      	bne.n	8000e12 <__aeabi_fmul+0xc6>
 8000e60:	ea80 0001 	eor.w	r0, r0, r1
 8000e64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e68:	4770      	bx	lr
 8000e6a:	f090 0f00 	teq	r0, #0
 8000e6e:	bf17      	itett	ne
 8000e70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e74:	4608      	moveq	r0, r1
 8000e76:	f091 0f00 	teqne	r1, #0
 8000e7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7e:	d014      	beq.n	8000eaa <__aeabi_fmul+0x15e>
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	d101      	bne.n	8000e8a <__aeabi_fmul+0x13e>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d10f      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e8a:	ea93 0f0c 	teq	r3, ip
 8000e8e:	d103      	bne.n	8000e98 <__aeabi_fmul+0x14c>
 8000e90:	024b      	lsls	r3, r1, #9
 8000e92:	bf18      	it	ne
 8000e94:	4608      	movne	r0, r1
 8000e96:	d108      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	4770      	bx	lr
 8000eaa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_fdiv>:
 8000eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ebc:	bf1e      	ittt	ne
 8000ebe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec2:	ea92 0f0c 	teqne	r2, ip
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d069      	beq.n	8000fa0 <__aeabi_fdiv+0xec>
 8000ecc:	eba2 0203 	sub.w	r2, r2, r3
 8000ed0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed4:	0249      	lsls	r1, r1, #9
 8000ed6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eda:	d037      	beq.n	8000f4c <__aeabi_fdiv+0x98>
 8000edc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eec:	428b      	cmp	r3, r1
 8000eee:	bf38      	it	cc
 8000ef0:	005b      	lslcc	r3, r3, #1
 8000ef2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000efa:	428b      	cmp	r3, r1
 8000efc:	bf24      	itt	cs
 8000efe:	1a5b      	subcs	r3, r3, r1
 8000f00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f16:	bf24      	itt	cs
 8000f18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	bf18      	it	ne
 8000f32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f36:	d1e0      	bne.n	8000efa <__aeabi_fdiv+0x46>
 8000f38:	2afd      	cmp	r2, #253	; 0xfd
 8000f3a:	f63f af50 	bhi.w	8000dde <__aeabi_fmul+0x92>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f44:	bf08      	it	eq
 8000f46:	f020 0001 	biceq.w	r0, r0, #1
 8000f4a:	4770      	bx	lr
 8000f4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f54:	327f      	adds	r2, #127	; 0x7f
 8000f56:	bfc2      	ittt	gt
 8000f58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f60:	4770      	bxgt	lr
 8000f62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	3a01      	subs	r2, #1
 8000f6c:	e737      	b.n	8000dde <__aeabi_fmul+0x92>
 8000f6e:	f092 0f00 	teq	r2, #0
 8000f72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0040      	lsleq	r0, r0, #1
 8000f7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7e:	3a01      	subeq	r2, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xc2>
 8000f82:	ea40 000c 	orr.w	r0, r0, ip
 8000f86:	f093 0f00 	teq	r3, #0
 8000f8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0049      	lsleq	r1, r1, #1
 8000f92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f96:	3b01      	subeq	r3, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xda>
 8000f9a:	ea41 010c 	orr.w	r1, r1, ip
 8000f9e:	e795      	b.n	8000ecc <__aeabi_fdiv+0x18>
 8000fa0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa4:	ea92 0f0c 	teq	r2, ip
 8000fa8:	d108      	bne.n	8000fbc <__aeabi_fdiv+0x108>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	f47f af7d 	bne.w	8000eaa <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	f47f af70 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e776      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	d104      	bne.n	8000fcc <__aeabi_fdiv+0x118>
 8000fc2:	024b      	lsls	r3, r1, #9
 8000fc4:	f43f af4c 	beq.w	8000e60 <__aeabi_fmul+0x114>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e76e      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd0:	bf18      	it	ne
 8000fd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	d1ca      	bne.n	8000f6e <__aeabi_fdiv+0xba>
 8000fd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fdc:	f47f af5c 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fe0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe4:	f47f af3c 	bne.w	8000e60 <__aeabi_fmul+0x114>
 8000fe8:	e75f      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fea:	bf00      	nop

08000fec <__gesf2>:
 8000fec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ff0:	e006      	b.n	8001000 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__lesf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	e002      	b.n	8001000 <__cmpsf2+0x4>
 8000ffa:	bf00      	nop

08000ffc <__cmpsf2>:
 8000ffc:	f04f 0c01 	mov.w	ip, #1
 8001000:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001004:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001008:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800100c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001010:	bf18      	it	ne
 8001012:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001016:	d011      	beq.n	800103c <__cmpsf2+0x40>
 8001018:	b001      	add	sp, #4
 800101a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800101e:	bf18      	it	ne
 8001020:	ea90 0f01 	teqne	r0, r1
 8001024:	bf58      	it	pl
 8001026:	ebb2 0003 	subspl.w	r0, r2, r3
 800102a:	bf88      	it	hi
 800102c:	17c8      	asrhi	r0, r1, #31
 800102e:	bf38      	it	cc
 8001030:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001034:	bf18      	it	ne
 8001036:	f040 0001 	orrne.w	r0, r0, #1
 800103a:	4770      	bx	lr
 800103c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001040:	d102      	bne.n	8001048 <__cmpsf2+0x4c>
 8001042:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001046:	d105      	bne.n	8001054 <__cmpsf2+0x58>
 8001048:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800104c:	d1e4      	bne.n	8001018 <__cmpsf2+0x1c>
 800104e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001052:	d0e1      	beq.n	8001018 <__cmpsf2+0x1c>
 8001054:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <__aeabi_cfrcmple>:
 800105c:	4684      	mov	ip, r0
 800105e:	4608      	mov	r0, r1
 8001060:	4661      	mov	r1, ip
 8001062:	e7ff      	b.n	8001064 <__aeabi_cfcmpeq>

08001064 <__aeabi_cfcmpeq>:
 8001064:	b50f      	push	{r0, r1, r2, r3, lr}
 8001066:	f7ff ffc9 	bl	8000ffc <__cmpsf2>
 800106a:	2800      	cmp	r0, #0
 800106c:	bf48      	it	mi
 800106e:	f110 0f00 	cmnmi.w	r0, #0
 8001072:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001074 <__aeabi_fcmpeq>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff fff4 	bl	8001064 <__aeabi_cfcmpeq>
 800107c:	bf0c      	ite	eq
 800107e:	2001      	moveq	r0, #1
 8001080:	2000      	movne	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmplt>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffea 	bl	8001064 <__aeabi_cfcmpeq>
 8001090:	bf34      	ite	cc
 8001092:	2001      	movcc	r0, #1
 8001094:	2000      	movcs	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmple>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffe0 	bl	8001064 <__aeabi_cfcmpeq>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpge>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffd2 	bl	800105c <__aeabi_cfrcmple>
 80010b8:	bf94      	ite	ls
 80010ba:	2001      	movls	r0, #1
 80010bc:	2000      	movhi	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmpgt>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffc8 	bl	800105c <__aeabi_cfrcmple>
 80010cc:	bf34      	ite	cc
 80010ce:	2001      	movcc	r0, #1
 80010d0:	2000      	movcs	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_f2uiz>:
 80010d8:	0042      	lsls	r2, r0, #1
 80010da:	d20e      	bcs.n	80010fa <__aeabi_f2uiz+0x22>
 80010dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e0:	d30b      	bcc.n	80010fa <__aeabi_f2uiz+0x22>
 80010e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ea:	d409      	bmi.n	8001100 <__aeabi_f2uiz+0x28>
 80010ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f4:	fa23 f002 	lsr.w	r0, r3, r2
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2uiz+0x32>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d102      	bne.n	8001110 <__aeabi_f2uiz+0x38>
 800110a:	f04f 30ff 	mov.w	r0, #4294967295
 800110e:	4770      	bx	lr
 8001110:	f04f 0000 	mov.w	r0, #0
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <__aeabi_uldivmod>:
 8001118:	b953      	cbnz	r3, 8001130 <__aeabi_uldivmod+0x18>
 800111a:	b94a      	cbnz	r2, 8001130 <__aeabi_uldivmod+0x18>
 800111c:	2900      	cmp	r1, #0
 800111e:	bf08      	it	eq
 8001120:	2800      	cmpeq	r0, #0
 8001122:	bf1c      	itt	ne
 8001124:	f04f 31ff 	movne.w	r1, #4294967295
 8001128:	f04f 30ff 	movne.w	r0, #4294967295
 800112c:	f000 b9a6 	b.w	800147c <__aeabi_idiv0>
 8001130:	f1ad 0c08 	sub.w	ip, sp, #8
 8001134:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001138:	f000 f83e 	bl	80011b8 <__udivmoddi4>
 800113c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001144:	b004      	add	sp, #16
 8001146:	4770      	bx	lr

08001148 <__aeabi_d2lz>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	460c      	mov	r4, r1
 800114c:	4605      	mov	r5, r0
 800114e:	4621      	mov	r1, r4
 8001150:	4628      	mov	r0, r5
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	f7ff fc53 	bl	8000a00 <__aeabi_dcmplt>
 800115a:	b928      	cbnz	r0, 8001168 <__aeabi_d2lz+0x20>
 800115c:	4628      	mov	r0, r5
 800115e:	4621      	mov	r1, r4
 8001160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001164:	f000 b80a 	b.w	800117c <__aeabi_d2ulz>
 8001168:	4628      	mov	r0, r5
 800116a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800116e:	f000 f805 	bl	800117c <__aeabi_d2ulz>
 8001172:	4240      	negs	r0, r0
 8001174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop

0800117c <__aeabi_d2ulz>:
 800117c:	b5d0      	push	{r4, r6, r7, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__aeabi_d2ulz+0x34>)
 8001182:	4606      	mov	r6, r0
 8001184:	460f      	mov	r7, r1
 8001186:	f7ff f9c9 	bl	800051c <__aeabi_dmul>
 800118a:	f7ff fc61 	bl	8000a50 <__aeabi_d2uiz>
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff f94a 	bl	8000428 <__aeabi_ui2d>
 8001194:	2200      	movs	r2, #0
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <__aeabi_d2ulz+0x38>)
 8001198:	f7ff f9c0 	bl	800051c <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4630      	mov	r0, r6
 80011a2:	4639      	mov	r1, r7
 80011a4:	f7ff f802 	bl	80001ac <__aeabi_dsub>
 80011a8:	f7ff fc52 	bl	8000a50 <__aeabi_d2uiz>
 80011ac:	4621      	mov	r1, r4
 80011ae:	bdd0      	pop	{r4, r6, r7, pc}
 80011b0:	3df00000 	.word	0x3df00000
 80011b4:	41f00000 	.word	0x41f00000

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	9e08      	ldr	r6, [sp, #32]
 80011be:	460d      	mov	r5, r1
 80011c0:	4604      	mov	r4, r0
 80011c2:	468e      	mov	lr, r1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f040 8083 	bne.w	80012d0 <__udivmoddi4+0x118>
 80011ca:	428a      	cmp	r2, r1
 80011cc:	4617      	mov	r7, r2
 80011ce:	d947      	bls.n	8001260 <__udivmoddi4+0xa8>
 80011d0:	fab2 f382 	clz	r3, r2
 80011d4:	b14b      	cbz	r3, 80011ea <__udivmoddi4+0x32>
 80011d6:	f1c3 0120 	rsb	r1, r3, #32
 80011da:	fa05 fe03 	lsl.w	lr, r5, r3
 80011de:	fa20 f101 	lsr.w	r1, r0, r1
 80011e2:	409f      	lsls	r7, r3
 80011e4:	ea41 0e0e 	orr.w	lr, r1, lr
 80011e8:	409c      	lsls	r4, r3
 80011ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011ee:	fbbe fcf8 	udiv	ip, lr, r8
 80011f2:	fa1f f987 	uxth.w	r9, r7
 80011f6:	fb08 e21c 	mls	r2, r8, ip, lr
 80011fa:	fb0c f009 	mul.w	r0, ip, r9
 80011fe:	0c21      	lsrs	r1, r4, #16
 8001200:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001204:	4290      	cmp	r0, r2
 8001206:	d90a      	bls.n	800121e <__udivmoddi4+0x66>
 8001208:	18ba      	adds	r2, r7, r2
 800120a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800120e:	f080 8118 	bcs.w	8001442 <__udivmoddi4+0x28a>
 8001212:	4290      	cmp	r0, r2
 8001214:	f240 8115 	bls.w	8001442 <__udivmoddi4+0x28a>
 8001218:	f1ac 0c02 	sub.w	ip, ip, #2
 800121c:	443a      	add	r2, r7
 800121e:	1a12      	subs	r2, r2, r0
 8001220:	fbb2 f0f8 	udiv	r0, r2, r8
 8001224:	fb08 2210 	mls	r2, r8, r0, r2
 8001228:	fb00 f109 	mul.w	r1, r0, r9
 800122c:	b2a4      	uxth	r4, r4
 800122e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001232:	42a1      	cmp	r1, r4
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x92>
 8001236:	193c      	adds	r4, r7, r4
 8001238:	f100 32ff 	add.w	r2, r0, #4294967295
 800123c:	f080 8103 	bcs.w	8001446 <__udivmoddi4+0x28e>
 8001240:	42a1      	cmp	r1, r4
 8001242:	f240 8100 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001246:	3802      	subs	r0, #2
 8001248:	443c      	add	r4, r7
 800124a:	1a64      	subs	r4, r4, r1
 800124c:	2100      	movs	r1, #0
 800124e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001252:	b11e      	cbz	r6, 800125c <__udivmoddi4+0xa4>
 8001254:	2200      	movs	r2, #0
 8001256:	40dc      	lsrs	r4, r3
 8001258:	e9c6 4200 	strd	r4, r2, [r6]
 800125c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001260:	b902      	cbnz	r2, 8001264 <__udivmoddi4+0xac>
 8001262:	deff      	udf	#255	; 0xff
 8001264:	fab2 f382 	clz	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d14f      	bne.n	800130c <__udivmoddi4+0x154>
 800126c:	1a8d      	subs	r5, r1, r2
 800126e:	2101      	movs	r1, #1
 8001270:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001274:	fa1f f882 	uxth.w	r8, r2
 8001278:	fbb5 fcfe 	udiv	ip, r5, lr
 800127c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001280:	fb08 f00c 	mul.w	r0, r8, ip
 8001284:	0c22      	lsrs	r2, r4, #16
 8001286:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800128a:	42a8      	cmp	r0, r5
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0xe6>
 800128e:	197d      	adds	r5, r7, r5
 8001290:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001294:	d202      	bcs.n	800129c <__udivmoddi4+0xe4>
 8001296:	42a8      	cmp	r0, r5
 8001298:	f200 80e9 	bhi.w	800146e <__udivmoddi4+0x2b6>
 800129c:	4694      	mov	ip, r2
 800129e:	1a2d      	subs	r5, r5, r0
 80012a0:	fbb5 f0fe 	udiv	r0, r5, lr
 80012a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80012a8:	fb08 f800 	mul.w	r8, r8, r0
 80012ac:	b2a4      	uxth	r4, r4
 80012ae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012b2:	45a0      	cmp	r8, r4
 80012b4:	d907      	bls.n	80012c6 <__udivmoddi4+0x10e>
 80012b6:	193c      	adds	r4, r7, r4
 80012b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80012bc:	d202      	bcs.n	80012c4 <__udivmoddi4+0x10c>
 80012be:	45a0      	cmp	r8, r4
 80012c0:	f200 80d9 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012c4:	4610      	mov	r0, r2
 80012c6:	eba4 0408 	sub.w	r4, r4, r8
 80012ca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012ce:	e7c0      	b.n	8001252 <__udivmoddi4+0x9a>
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d908      	bls.n	80012e6 <__udivmoddi4+0x12e>
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	f000 80b1 	beq.w	800143c <__udivmoddi4+0x284>
 80012da:	2100      	movs	r1, #0
 80012dc:	e9c6 0500 	strd	r0, r5, [r6]
 80012e0:	4608      	mov	r0, r1
 80012e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e6:	fab3 f183 	clz	r1, r3
 80012ea:	2900      	cmp	r1, #0
 80012ec:	d14b      	bne.n	8001386 <__udivmoddi4+0x1ce>
 80012ee:	42ab      	cmp	r3, r5
 80012f0:	d302      	bcc.n	80012f8 <__udivmoddi4+0x140>
 80012f2:	4282      	cmp	r2, r0
 80012f4:	f200 80b9 	bhi.w	800146a <__udivmoddi4+0x2b2>
 80012f8:	1a84      	subs	r4, r0, r2
 80012fa:	eb65 0303 	sbc.w	r3, r5, r3
 80012fe:	2001      	movs	r0, #1
 8001300:	469e      	mov	lr, r3
 8001302:	2e00      	cmp	r6, #0
 8001304:	d0aa      	beq.n	800125c <__udivmoddi4+0xa4>
 8001306:	e9c6 4e00 	strd	r4, lr, [r6]
 800130a:	e7a7      	b.n	800125c <__udivmoddi4+0xa4>
 800130c:	409f      	lsls	r7, r3
 800130e:	f1c3 0220 	rsb	r2, r3, #32
 8001312:	40d1      	lsrs	r1, r2
 8001314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001318:	fbb1 f0fe 	udiv	r0, r1, lr
 800131c:	fa1f f887 	uxth.w	r8, r7
 8001320:	fb0e 1110 	mls	r1, lr, r0, r1
 8001324:	fa24 f202 	lsr.w	r2, r4, r2
 8001328:	409d      	lsls	r5, r3
 800132a:	fb00 fc08 	mul.w	ip, r0, r8
 800132e:	432a      	orrs	r2, r5
 8001330:	0c15      	lsrs	r5, r2, #16
 8001332:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001336:	45ac      	cmp	ip, r5
 8001338:	fa04 f403 	lsl.w	r4, r4, r3
 800133c:	d909      	bls.n	8001352 <__udivmoddi4+0x19a>
 800133e:	197d      	adds	r5, r7, r5
 8001340:	f100 31ff 	add.w	r1, r0, #4294967295
 8001344:	f080 808f 	bcs.w	8001466 <__udivmoddi4+0x2ae>
 8001348:	45ac      	cmp	ip, r5
 800134a:	f240 808c 	bls.w	8001466 <__udivmoddi4+0x2ae>
 800134e:	3802      	subs	r0, #2
 8001350:	443d      	add	r5, r7
 8001352:	eba5 050c 	sub.w	r5, r5, ip
 8001356:	fbb5 f1fe 	udiv	r1, r5, lr
 800135a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800135e:	fb01 f908 	mul.w	r9, r1, r8
 8001362:	b295      	uxth	r5, r2
 8001364:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001368:	45a9      	cmp	r9, r5
 800136a:	d907      	bls.n	800137c <__udivmoddi4+0x1c4>
 800136c:	197d      	adds	r5, r7, r5
 800136e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001372:	d274      	bcs.n	800145e <__udivmoddi4+0x2a6>
 8001374:	45a9      	cmp	r9, r5
 8001376:	d972      	bls.n	800145e <__udivmoddi4+0x2a6>
 8001378:	3902      	subs	r1, #2
 800137a:	443d      	add	r5, r7
 800137c:	eba5 0509 	sub.w	r5, r5, r9
 8001380:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001384:	e778      	b.n	8001278 <__udivmoddi4+0xc0>
 8001386:	f1c1 0720 	rsb	r7, r1, #32
 800138a:	408b      	lsls	r3, r1
 800138c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001390:	ea4c 0c03 	orr.w	ip, ip, r3
 8001394:	fa25 f407 	lsr.w	r4, r5, r7
 8001398:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800139c:	fbb4 f9fe 	udiv	r9, r4, lr
 80013a0:	fa1f f88c 	uxth.w	r8, ip
 80013a4:	fb0e 4419 	mls	r4, lr, r9, r4
 80013a8:	fa20 f307 	lsr.w	r3, r0, r7
 80013ac:	fb09 fa08 	mul.w	sl, r9, r8
 80013b0:	408d      	lsls	r5, r1
 80013b2:	431d      	orrs	r5, r3
 80013b4:	0c2b      	lsrs	r3, r5, #16
 80013b6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013ba:	45a2      	cmp	sl, r4
 80013bc:	fa02 f201 	lsl.w	r2, r2, r1
 80013c0:	fa00 f301 	lsl.w	r3, r0, r1
 80013c4:	d909      	bls.n	80013da <__udivmoddi4+0x222>
 80013c6:	eb1c 0404 	adds.w	r4, ip, r4
 80013ca:	f109 30ff 	add.w	r0, r9, #4294967295
 80013ce:	d248      	bcs.n	8001462 <__udivmoddi4+0x2aa>
 80013d0:	45a2      	cmp	sl, r4
 80013d2:	d946      	bls.n	8001462 <__udivmoddi4+0x2aa>
 80013d4:	f1a9 0902 	sub.w	r9, r9, #2
 80013d8:	4464      	add	r4, ip
 80013da:	eba4 040a 	sub.w	r4, r4, sl
 80013de:	fbb4 f0fe 	udiv	r0, r4, lr
 80013e2:	fb0e 4410 	mls	r4, lr, r0, r4
 80013e6:	fb00 fa08 	mul.w	sl, r0, r8
 80013ea:	b2ad      	uxth	r5, r5
 80013ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013f0:	45a2      	cmp	sl, r4
 80013f2:	d908      	bls.n	8001406 <__udivmoddi4+0x24e>
 80013f4:	eb1c 0404 	adds.w	r4, ip, r4
 80013f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80013fc:	d22d      	bcs.n	800145a <__udivmoddi4+0x2a2>
 80013fe:	45a2      	cmp	sl, r4
 8001400:	d92b      	bls.n	800145a <__udivmoddi4+0x2a2>
 8001402:	3802      	subs	r0, #2
 8001404:	4464      	add	r4, ip
 8001406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800140a:	fba0 8902 	umull	r8, r9, r0, r2
 800140e:	eba4 040a 	sub.w	r4, r4, sl
 8001412:	454c      	cmp	r4, r9
 8001414:	46c6      	mov	lr, r8
 8001416:	464d      	mov	r5, r9
 8001418:	d319      	bcc.n	800144e <__udivmoddi4+0x296>
 800141a:	d016      	beq.n	800144a <__udivmoddi4+0x292>
 800141c:	b15e      	cbz	r6, 8001436 <__udivmoddi4+0x27e>
 800141e:	ebb3 020e 	subs.w	r2, r3, lr
 8001422:	eb64 0405 	sbc.w	r4, r4, r5
 8001426:	fa04 f707 	lsl.w	r7, r4, r7
 800142a:	fa22 f301 	lsr.w	r3, r2, r1
 800142e:	431f      	orrs	r7, r3
 8001430:	40cc      	lsrs	r4, r1
 8001432:	e9c6 7400 	strd	r7, r4, [r6]
 8001436:	2100      	movs	r1, #0
 8001438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800143c:	4631      	mov	r1, r6
 800143e:	4630      	mov	r0, r6
 8001440:	e70c      	b.n	800125c <__udivmoddi4+0xa4>
 8001442:	468c      	mov	ip, r1
 8001444:	e6eb      	b.n	800121e <__udivmoddi4+0x66>
 8001446:	4610      	mov	r0, r2
 8001448:	e6ff      	b.n	800124a <__udivmoddi4+0x92>
 800144a:	4543      	cmp	r3, r8
 800144c:	d2e6      	bcs.n	800141c <__udivmoddi4+0x264>
 800144e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001452:	eb69 050c 	sbc.w	r5, r9, ip
 8001456:	3801      	subs	r0, #1
 8001458:	e7e0      	b.n	800141c <__udivmoddi4+0x264>
 800145a:	4628      	mov	r0, r5
 800145c:	e7d3      	b.n	8001406 <__udivmoddi4+0x24e>
 800145e:	4611      	mov	r1, r2
 8001460:	e78c      	b.n	800137c <__udivmoddi4+0x1c4>
 8001462:	4681      	mov	r9, r0
 8001464:	e7b9      	b.n	80013da <__udivmoddi4+0x222>
 8001466:	4608      	mov	r0, r1
 8001468:	e773      	b.n	8001352 <__udivmoddi4+0x19a>
 800146a:	4608      	mov	r0, r1
 800146c:	e749      	b.n	8001302 <__udivmoddi4+0x14a>
 800146e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001472:	443d      	add	r5, r7
 8001474:	e713      	b.n	800129e <__udivmoddi4+0xe6>
 8001476:	3802      	subs	r0, #2
 8001478:	443c      	add	r4, r7
 800147a:	e724      	b.n	80012c6 <__udivmoddi4+0x10e>

0800147c <__aeabi_idiv0>:
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	889b      	ldrh	r3, [r3, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	88db      	ldrh	r3, [r3, #6]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
	if (total < 0)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b00      	cmp	r3, #0
 800149e:	da05      	bge.n	80014ac <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	891b      	ldrh	r3, [r3, #8]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

	if (total == 0)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e031      	b.n	800151c <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	88db      	ldrh	r3, [r3, #6]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	8912      	ldrh	r2, [r2, #8]
 80014c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80014c8:	fb02 f200 	mul.w	r2, r2, r0
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	461a      	mov	r2, r3
			* circ_buf->element_size);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	895b      	ldrh	r3, [r3, #10]
 80014d6:	fb03 f302 	mul.w	r3, r3, r2
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 80014da:	440b      	add	r3, r1
 80014dc:	613b      	str	r3, [r7, #16]

	if (elem)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	895b      	ldrh	r3, [r3, #10]
 80014e8:	461a      	mov	r2, r3
 80014ea:	6939      	ldr	r1, [r7, #16]
 80014ec:	68b8      	ldr	r0, [r7, #8]
 80014ee:	f00a fc3d 	bl	800bd6c <memcpy>

	if (!read_only) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d110      	bne.n	800151a <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	88db      	ldrh	r3, [r3, #6]
 80014fc:	3301      	adds	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	88db      	ldrh	r3, [r3, #6]
 8001508:	461a      	mov	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	891b      	ldrh	r3, [r3, #8]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	429a      	cmp	r2, r3
 8001512:	db02      	blt.n	800151a <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	88db      	ldrh	r3, [r3, #6]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da05      	bge.n	800154e <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	891b      	ldrh	r3, [r3, #8]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	891b      	ldrh	r3, [r3, #8]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4293      	cmp	r3, r2
 8001558:	db02      	blt.n	8001560 <__circ_gbuf_push+0x3c>
		return -1; // Full
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e02b      	b.n	80015b8 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	889b      	ldrh	r3, [r3, #4]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	8912      	ldrh	r2, [r2, #8]
 800156c:	fbb3 f0f2 	udiv	r0, r3, r2
 8001570:	fb02 f200 	mul.w	r2, r2, r0
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	b29b      	uxth	r3, r3
 8001578:	461a      	mov	r2, r3
			* circ_buf->element_size );
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	895b      	ldrh	r3, [r3, #10]
 800157e:	fb03 f302 	mul.w	r3, r3, r2
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8001582:	440b      	add	r3, r1
 8001584:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	895b      	ldrh	r3, [r3, #10]
 800158a:	461a      	mov	r2, r3
 800158c:	6839      	ldr	r1, [r7, #0]
 800158e:	68b8      	ldr	r0, [r7, #8]
 8001590:	f00a fbec 	bl	800bd6c <memcpy>
	circ_buf->push_count++;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	889b      	ldrh	r3, [r3, #4]
 8001598:	3301      	adds	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	461a      	mov	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	891b      	ldrh	r3, [r3, #8]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	429a      	cmp	r2, r3
 80015ae:	db02      	blt.n	80015b6 <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	809a      	strh	r2, [r3, #4]
	return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <DAC_Write>:
#include "dac_and_dds_func.h"

//==============================================================================================
void DAC_Write(uint32_t value)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <DAC_Write+0x64>)
 80015ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015ce:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015d8:	f023 030f 	bic.w	r3, r3, #15
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <DAC_Write+0x64>)
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <DAC_Write+0x64>)
 80015e4:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <DAC_Write+0x64>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	0c1b      	lsrs	r3, r3, #16
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <DAC_Write+0x68>)
 80015f0:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <DAC_Write+0x64>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <DAC_Write+0x68>)
 80015fa:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2110      	movs	r1, #16
 8001600:	480a      	ldr	r0, [pc, #40]	; (800162c <DAC_Write+0x6c>)
 8001602:	f002 fd00 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001606:	2302      	movs	r3, #2
 8001608:	2202      	movs	r2, #2
 800160a:	4907      	ldr	r1, [pc, #28]	; (8001628 <DAC_Write+0x68>)
 800160c:	4808      	ldr	r0, [pc, #32]	; (8001630 <DAC_Write+0x70>)
 800160e:	f004 ff65 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2110      	movs	r1, #16
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <DAC_Write+0x6c>)
 8001618:	f002 fcf5 	bl	8004006 <HAL_GPIO_WritePin>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000924 	.word	0x20000924
 8001628:	20000920 	.word	0x20000920
 800162c:	40020000 	.word	0x40020000
 8001630:	200009e4 	.word	0x200009e4

08001634 <DAC_Write_FAST>:

//==============================================================================================
void DAC_Write_FAST(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2110      	movs	r1, #16
 800163c:	4807      	ldr	r0, [pc, #28]	; (800165c <DAC_Write_FAST+0x28>)
 800163e:	f002 fce2 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001642:	2302      	movs	r3, #2
 8001644:	2202      	movs	r2, #2
 8001646:	4906      	ldr	r1, [pc, #24]	; (8001660 <DAC_Write_FAST+0x2c>)
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <DAC_Write_FAST+0x30>)
 800164a:	f004 ff47 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800164e:	2201      	movs	r2, #1
 8001650:	2110      	movs	r1, #16
 8001652:	4802      	ldr	r0, [pc, #8]	; (800165c <DAC_Write_FAST+0x28>)
 8001654:	f002 fcd7 	bl	8004006 <HAL_GPIO_WritePin>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020000 	.word	0x40020000
 8001660:	20000920 	.word	0x20000920
 8001664:	200009e4 	.word	0x200009e4

08001668 <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0

	DAC_tx_buffer=0x02000000; // Write CONFIG1
 800166c:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <DAC_SendInit+0xfc>)
 800166e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001672:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <DAC_SendInit+0x100>)
 8001676:	7a1b      	ldrb	r3, [r3, #8]
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	f003 0210 	and.w	r2, r3, #16
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <DAC_SendInit+0xfc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a37      	ldr	r2, [pc, #220]	; (8001764 <DAC_SendInit+0xfc>)
 8001686:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x0F)<<6;
 8001688:	4b37      	ldr	r3, [pc, #220]	; (8001768 <DAC_SendInit+0x100>)
 800168a:	79db      	ldrb	r3, [r3, #7]
 800168c:	019b      	lsls	r3, r3, #6
 800168e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
 8001692:	4b34      	ldr	r3, [pc, #208]	; (8001764 <DAC_SendInit+0xfc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a32      	ldr	r2, [pc, #200]	; (8001764 <DAC_SendInit+0xfc>)
 800169a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <DAC_SendInit+0x100>)
 800169e:	799b      	ldrb	r3, [r3, #6]
 80016a0:	029b      	lsls	r3, r3, #10
 80016a2:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <DAC_SendInit+0xfc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a2d      	ldr	r2, [pc, #180]	; (8001764 <DAC_SendInit+0xfc>)
 80016ae:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <DAC_SendInit+0x100>)
 80016b2:	795b      	ldrb	r3, [r3, #5]
 80016b4:	02db      	lsls	r3, r3, #11
 80016b6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <DAC_SendInit+0xfc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a28      	ldr	r2, [pc, #160]	; (8001764 <DAC_SendInit+0xfc>)
 80016c2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <DAC_SendInit+0x100>)
 80016c6:	791b      	ldrb	r3, [r3, #4]
 80016c8:	031b      	lsls	r3, r3, #12
 80016ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <DAC_SendInit+0xfc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a23      	ldr	r2, [pc, #140]	; (8001764 <DAC_SendInit+0xfc>)
 80016d6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <DAC_SendInit+0x100>)
 80016da:	78db      	ldrb	r3, [r3, #3]
 80016dc:	035b      	lsls	r3, r3, #13
 80016de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <DAC_SendInit+0xfc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <DAC_SendInit+0xfc>)
 80016ea:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <DAC_SendInit+0x100>)
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	039b      	lsls	r3, r3, #14
 80016f2:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <DAC_SendInit+0xfc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <DAC_SendInit+0xfc>)
 80016fe:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <DAC_SendInit+0x100>)
 8001702:	785b      	ldrb	r3, [r3, #1]
 8001704:	049b      	lsls	r3, r3, #18
 8001706:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <DAC_SendInit+0xfc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <DAC_SendInit+0xfc>)
 8001712:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <DAC_SendInit+0x100>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	05db      	lsls	r3, r3, #23
 800171a:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <DAC_SendInit+0xfc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <DAC_SendInit+0xfc>)
 8001726:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <DAC_SendInit+0xfc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0c1b      	lsrs	r3, r3, #16
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <DAC_SendInit+0x104>)
 8001732:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <DAC_SendInit+0xfc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <DAC_SendInit+0x104>)
 800173c:	805a      	strh	r2, [r3, #2]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2110      	movs	r1, #16
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <DAC_SendInit+0x108>)
 8001744:	f002 fc5f 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 8001748:	2305      	movs	r3, #5
 800174a:	2202      	movs	r2, #2
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <DAC_SendInit+0x104>)
 800174e:	4809      	ldr	r0, [pc, #36]	; (8001774 <DAC_SendInit+0x10c>)
 8001750:	f004 fec4 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	2110      	movs	r1, #16
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <DAC_SendInit+0x108>)
 800175a:	f002 fc54 	bl	8004006 <HAL_GPIO_WritePin>

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000924 	.word	0x20000924
 8001768:	20000914 	.word	0x20000914
 800176c:	20000920 	.word	0x20000920
 8001770:	40020000 	.word	0x40020000
 8001774:	200009e4 	.word	0x200009e4

08001778 <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b08e      	sub	sp, #56	; 0x38
 800177c:	af00      	add	r7, sp, #0
	uint32_t DAC_tx_buffer;
	uint16_t DAC_tx_tmp_buffer[2];

	uint8_t OK[]="OK\n\r";
 800177e:	4a5a      	ldr	r2, [pc, #360]	; (80018e8 <DAC_TEMP_CAL+0x170>)
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001788:	6018      	str	r0, [r3, #0]
 800178a:	3304      	adds	r3, #4
 800178c:	7019      	strb	r1, [r3, #0]
	uint8_t run_cal[]="\r\nCalibration in progress..";
 800178e:	4b57      	ldr	r3, [pc, #348]	; (80018ec <DAC_TEMP_CAL+0x174>)
 8001790:	f107 0408 	add.w	r4, r7, #8
 8001794:	461d      	mov	r5, r3
 8001796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800179e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	80bb      	strh	r3, [r7, #4]
 80017a6:	2300      	movs	r3, #0
 80017a8:	80fb      	strh	r3, [r7, #6]
 80017aa:	2300      	movs	r3, #0
 80017ac:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint8_t count_tmp=HAL_GPIO_ReadPin(COUNT_EN_GPIO_Port, COUNT_EN_Pin); // Save LDAC signal state
 80017ae:	2108      	movs	r1, #8
 80017b0:	484f      	ldr	r0, [pc, #316]	; (80018f0 <DAC_TEMP_CAL+0x178>)
 80017b2:	f002 fc11 	bl	8003fd8 <HAL_GPIO_ReadPin>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	//	DDS_prepare_to_tempcal();

	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 80017bc:	2201      	movs	r2, #1
 80017be:	2108      	movs	r1, #8
 80017c0:	484b      	ldr	r0, [pc, #300]	; (80018f0 <DAC_TEMP_CAL+0x178>)
 80017c2:	f002 fc20 	bl	8004006 <HAL_GPIO_WritePin>

	cfg.EN_TMP_CAL=1;
 80017c6:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <DAC_TEMP_CAL+0x17c>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
	DAC_SendInit();
 80017cc:	f7ff ff4c 	bl	8001668 <DAC_SendInit>
	HAL_Delay(10);
 80017d0:	200a      	movs	r0, #10
 80017d2:	f001 fdb3 	bl	800333c <HAL_Delay>

	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 80017d6:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <DAC_TEMP_CAL+0x180>)
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80017da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	b29b      	uxth	r3, r3
 80017e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80017e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

	DAC_tx_buffer=0x85000000; // read status register
 80017e8:	f04f 4305 	mov.w	r3, #2231369728	; 0x85000000
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30

	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80017ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f0:	0c1b      	lsrs	r3, r3, #16
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	803b      	strh	r3, [r7, #0]
	DAC_tx_tmp_buffer2[1]=(DAC_tx_buffer & 0x0000FFFF);
 80017f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2110      	movs	r1, #16
 8001800:	483e      	ldr	r0, [pc, #248]	; (80018fc <DAC_TEMP_CAL+0x184>)
 8001802:	f002 fc00 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001806:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800180a:	2302      	movs	r3, #2
 800180c:	2202      	movs	r2, #2
 800180e:	483c      	ldr	r0, [pc, #240]	; (8001900 <DAC_TEMP_CAL+0x188>)
 8001810:	f004 fe64 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	2110      	movs	r1, #16
 8001818:	4838      	ldr	r0, [pc, #224]	; (80018fc <DAC_TEMP_CAL+0x184>)
 800181a:	f002 fbf4 	bl	8004006 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 800181e:	200a      	movs	r0, #10
 8001820:	f001 fd8c 	bl	800333c <HAL_Delay>
	CDC_Transmit_FS(run_cal, strlen((const char *)run_cal));
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fcb3 	bl	8000194 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f009 fe77 	bl	800b52c <CDC_Transmit_FS>
	HAL_Delay(500); // Wait some time....
 800183e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001842:	f001 fd7b 	bl	800333c <HAL_Delay>

	do{ // Check complete flag
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	2110      	movs	r1, #16
 800184a:	482c      	ldr	r0, [pc, #176]	; (80018fc <DAC_TEMP_CAL+0x184>)
 800184c:	f002 fbdb 	bl	8004006 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 8001850:	4639      	mov	r1, r7
 8001852:	2302      	movs	r3, #2
 8001854:	2202      	movs	r2, #2
 8001856:	482a      	ldr	r0, [pc, #168]	; (8001900 <DAC_TEMP_CAL+0x188>)
 8001858:	f004 fe40 	bl	80064dc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	2110      	movs	r1, #16
 8001860:	4826      	ldr	r0, [pc, #152]	; (80018fc <DAC_TEMP_CAL+0x184>)
 8001862:	f002 fbd0 	bl	8004006 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2110      	movs	r1, #16
 800186a:	4824      	ldr	r0, [pc, #144]	; (80018fc <DAC_TEMP_CAL+0x184>)
 800186c:	f002 fbcb 	bl	8004006 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 2, 2);
 8001870:	1d39      	adds	r1, r7, #4
 8001872:	2302      	movs	r3, #2
 8001874:	2202      	movs	r2, #2
 8001876:	4822      	ldr	r0, [pc, #136]	; (8001900 <DAC_TEMP_CAL+0x188>)
 8001878:	f004 ff6c 	bl	8006754 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2110      	movs	r1, #16
 8001880:	481e      	ldr	r0, [pc, #120]	; (80018fc <DAC_TEMP_CAL+0x184>)
 8001882:	f002 fbc0 	bl	8004006 <HAL_GPIO_WritePin>
		ALM=(spi_receive[1] & 0x1000) >> 12;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	131b      	asrs	r3, r3, #12
 800188a:	b29b      	uxth	r3, r3
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	86fb      	strh	r3, [r7, #54]	; 0x36
		if(ALM!=1)HAL_Delay(1000);
 8001892:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001894:	2b01      	cmp	r3, #1
 8001896:	d003      	beq.n	80018a0 <DAC_TEMP_CAL+0x128>
 8001898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800189c:	f001 fd4e 	bl	800333c <HAL_Delay>
	}while(ALM!=1);
 80018a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d1cf      	bne.n	8001846 <DAC_TEMP_CAL+0xce>

	HAL_Delay(10);
 80018a6:	200a      	movs	r0, #10
 80018a8:	f001 fd48 	bl	800333c <HAL_Delay>
	CDC_Transmit_FS(OK, strlen((const char *)OK));
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fc6f 	bl	8000194 <strlen>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f009 fe33 	bl	800b52c <CDC_Transmit_FS>
	HAL_Delay(10);
 80018c6:	200a      	movs	r0, #10
 80018c8:	f001 fd38 	bl	800333c <HAL_Delay>

	DDS_Init();
 80018cc:	f000 f8d0 	bl	8001a70 <DDS_Init>
	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, count_tmp); // Back LDAC signal state
 80018d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80018d4:	461a      	mov	r2, r3
 80018d6:	2108      	movs	r1, #8
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <DAC_TEMP_CAL+0x178>)
 80018da:	f002 fb94 	bl	8004006 <HAL_GPIO_WritePin>
}
 80018de:	bf00      	nop
 80018e0:	3738      	adds	r7, #56	; 0x38
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bdb0      	pop	{r4, r5, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	0800eb20 	.word	0x0800eb20
 80018ec:	0800eb28 	.word	0x0800eb28
 80018f0:	40020400 	.word	0x40020400
 80018f4:	20000914 	.word	0x20000914
 80018f8:	04000100 	.word	0x04000100
 80018fc:	40020000 	.word	0x40020000
 8001900:	200009e4 	.word	0x200009e4

08001904 <DDS_Calculation>:

void DDS_Calculation(void)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
	float hw_limit=1000; // 1(256)kHz hardware optimized limit
 800190a:	4b4e      	ldr	r3, [pc, #312]	; (8001a44 <DDS_Calculation+0x140>)
 800190c:	60fb      	str	r3, [r7, #12]
	float dac_counts=1048576;
 800190e:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8001912:	60bb      	str	r3, [r7, #8]
	float corr_coeff;
	float dac_tmp=DAC_code;
 8001914:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <DDS_Calculation+0x144>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff f9bf 	bl	8000c9c <__aeabi_ui2f>
 800191e:	4603      	mov	r3, r0
 8001920:	607b      	str	r3, [r7, #4]

	corr_coeff=corr_coeff_1*dac_tmp*dac_tmp;
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <DDS_Calculation+0x148>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fa0f 	bl	8000d4c <__aeabi_fmul>
 800192e:	4603      	mov	r3, r0
 8001930:	4619      	mov	r1, r3
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fa0a 	bl	8000d4c <__aeabi_fmul>
 8001938:	4603      	mov	r3, r0
 800193a:	603b      	str	r3, [r7, #0]
	corr_coeff+=corr_coeff_2*dac_tmp;
 800193c:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <DDS_Calculation+0x14c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fa02 	bl	8000d4c <__aeabi_fmul>
 8001948:	4603      	mov	r3, r0
 800194a:	4619      	mov	r1, r3
 800194c:	6838      	ldr	r0, [r7, #0]
 800194e:	f7ff f8f5 	bl	8000b3c <__addsf3>
 8001952:	4603      	mov	r3, r0
 8001954:	603b      	str	r3, [r7, #0]
	corr_coeff+=corr_coeff_3;
 8001956:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <DDS_Calculation+0x150>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4619      	mov	r1, r3
 800195c:	6838      	ldr	r0, [r7, #0]
 800195e:	f7ff f8ed 	bl	8000b3c <__addsf3>
 8001962:	4603      	mov	r3, r0
 8001964:	603b      	str	r3, [r7, #0]

	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001966:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <DDS_Calculation+0x154>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a3c      	ldr	r2, [pc, #240]	; (8001a5c <DDS_Calculation+0x158>)
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fa9f 	bl	8000eb4 <__aeabi_fdiv>
 8001976:	4603      	mov	r3, r0
 8001978:	4619      	mov	r1, r3
 800197a:	68b8      	ldr	r0, [r7, #8]
 800197c:	f7ff fa9a 	bl	8000eb4 <__aeabi_fdiv>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <DDS_Calculation+0x15c>)
 8001986:	601a      	str	r2, [r3, #0]

	if(DDS_target_frequecny>hw_limit)
 8001988:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <DDS_Calculation+0x15c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff fb7a 	bl	8001088 <__aeabi_fcmplt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d02e      	beq.n	80019f8 <DDS_Calculation+0xf4>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <DDS_Calculation+0x15c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68f9      	ldr	r1, [r7, #12]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fa87 	bl	8000eb4 <__aeabi_fdiv>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fb95 	bl	80010d8 <__aeabi_f2uiz>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a2c      	ldr	r2, [pc, #176]	; (8001a64 <DDS_Calculation+0x160>)
 80019b2:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <DDS_Calculation+0x154>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a28      	ldr	r2, [pc, #160]	; (8001a5c <DDS_Calculation+0x158>)
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fa78 	bl	8000eb4 <__aeabi_fdiv>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	68b8      	ldr	r0, [r7, #8]
 80019ca:	f7ff fa73 	bl	8000eb4 <__aeabi_fdiv>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <DDS_Calculation+0x15c>)
 80019d4:	601a      	str	r2, [r3, #0]
		DDS_target_frequecny/=(float)DDS_target_multipiller;
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <DDS_Calculation+0x15c>)
 80019d8:	681c      	ldr	r4, [r3, #0]
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <DDS_Calculation+0x160>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f95c 	bl	8000c9c <__aeabi_ui2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff fa63 	bl	8000eb4 <__aeabi_fdiv>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <DDS_Calculation+0x15c>)
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e002      	b.n	80019fe <DDS_Calculation+0xfa>
	} else DDS_target_multipiller = 1;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <DDS_Calculation+0x160>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

	DDS_FTW=(((DDS_target_frequecny/corr_coeff)*256)/DDS_clock_frequecny)*(float)0xFFFFFFFF;
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <DDS_Calculation+0x15c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fa55 	bl	8000eb4 <__aeabi_fdiv>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f99b 	bl	8000d4c <__aeabi_fmul>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <DDS_Calculation+0x164>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4610      	mov	r0, r2
 8001a22:	f7ff fa47 	bl	8000eb4 <__aeabi_fdiv>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff f98d 	bl	8000d4c <__aeabi_fmul>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <DDS_Calculation+0x168>)
 8001a38:	601a      	str	r2, [r3, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd90      	pop	{r4, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	447a0000 	.word	0x447a0000
 8001a48:	200006dc 	.word	0x200006dc
 8001a4c:	2000095c 	.word	0x2000095c
 8001a50:	2000092c 	.word	0x2000092c
 8001a54:	20000928 	.word	0x20000928
 8001a58:	20000960 	.word	0x20000960
 8001a5c:	20000984 	.word	0x20000984
 8001a60:	20000934 	.word	0x20000934
 8001a64:	2000035c 	.word	0x2000035c
 8001a68:	20000358 	.word	0x20000358
 8001a6c:	200006d8 	.word	0x200006d8

08001a70 <DDS_Init>:

//==============================================================================================
void DDS_Init(void)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];
	DDS_Calculation();
 8001a76:	f7ff ff45 	bl	8001904 <DDS_Calculation>

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Control DDS (D15=1, D14=1)
 8001a7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a7e:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=1 << 12; // Enter DDS to Reset mode, RST (D12) = 1
 8001a80:	88bb      	ldrh	r3, [r7, #4]
 8001a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a90:	4861      	ldr	r0, [pc, #388]	; (8001c18 <DDS_Init+0x1a8>)
 8001a92:	f002 fab8 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001a96:	1d39      	adds	r1, r7, #4
 8001a98:	2305      	movs	r3, #5
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	485f      	ldr	r0, [pc, #380]	; (8001c1c <DDS_Init+0x1ac>)
 8001a9e:	f004 fd1d 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa8:	485b      	ldr	r0, [pc, #364]	; (8001c18 <DDS_Init+0x1a8>)
 8001aaa:	f002 faac 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001aae:	2005      	movs	r0, #5
 8001ab0:	f001 fc44 	bl	800333c <HAL_Delay>

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001ab4:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001ab8:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001aba:	88bc      	ldrh	r4, [r7, #4]
 8001abc:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <DDS_Init+0x1b0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fb09 	bl	80010d8 <__aeabi_f2uiz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	0e1b      	lsrs	r3, r3, #24
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4423      	add	r3, r4
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad8:	484f      	ldr	r0, [pc, #316]	; (8001c18 <DDS_Init+0x1a8>)
 8001ada:	f002 fa94 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ade:	1d39      	adds	r1, r7, #4
 8001ae0:	2305      	movs	r3, #5
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	484d      	ldr	r0, [pc, #308]	; (8001c1c <DDS_Init+0x1ac>)
 8001ae6:	f004 fcf9 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001aea:	2201      	movs	r2, #1
 8001aec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af0:	4849      	ldr	r0, [pc, #292]	; (8001c18 <DDS_Init+0x1a8>)
 8001af2:	f002 fa88 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001af6:	2005      	movs	r0, #5
 8001af8:	f001 fc20 	bl	800333c <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001afc:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001b00:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001b02:	88bc      	ldrh	r4, [r7, #4]
 8001b04:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <DDS_Init+0x1b0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fae5 	bl	80010d8 <__aeabi_f2uiz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	0c1b      	lsrs	r3, r3, #16
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4423      	add	r3, r4
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b24:	483c      	ldr	r0, [pc, #240]	; (8001c18 <DDS_Init+0x1a8>)
 8001b26:	f002 fa6e 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001b2a:	1d39      	adds	r1, r7, #4
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	2201      	movs	r2, #1
 8001b30:	483a      	ldr	r0, [pc, #232]	; (8001c1c <DDS_Init+0x1ac>)
 8001b32:	f004 fcd3 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3c:	4836      	ldr	r0, [pc, #216]	; (8001c18 <DDS_Init+0x1a8>)
 8001b3e:	f002 fa62 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001b42:	2005      	movs	r0, #5
 8001b44:	f001 fbfa 	bl	800333c <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001b48:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001b4c:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001b4e:	88bc      	ldrh	r4, [r7, #4]
 8001b50:	4b33      	ldr	r3, [pc, #204]	; (8001c20 <DDS_Init+0x1b0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fabf 	bl	80010d8 <__aeabi_f2uiz>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4423      	add	r3, r4
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b70:	4829      	ldr	r0, [pc, #164]	; (8001c18 <DDS_Init+0x1a8>)
 8001b72:	f002 fa48 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001b76:	1d39      	adds	r1, r7, #4
 8001b78:	2305      	movs	r3, #5
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4827      	ldr	r0, [pc, #156]	; (8001c1c <DDS_Init+0x1ac>)
 8001b7e:	f004 fcad 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001b82:	2201      	movs	r2, #1
 8001b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b88:	4823      	ldr	r0, [pc, #140]	; (8001c18 <DDS_Init+0x1a8>)
 8001b8a:	f002 fa3c 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001b8e:	2005      	movs	r0, #5
 8001b90:	f001 fbd4 	bl	800333c <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b98:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001b9a:	88bc      	ldrh	r4, [r7, #4]
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <DDS_Init+0x1b0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fa99 	bl	80010d8 <__aeabi_f2uiz>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4423      	add	r3, r4
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bba:	4817      	ldr	r0, [pc, #92]	; (8001c18 <DDS_Init+0x1a8>)
 8001bbc:	f002 fa23 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001bc0:	1d39      	adds	r1, r7, #4
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4815      	ldr	r0, [pc, #84]	; (8001c1c <DDS_Init+0x1ac>)
 8001bc8:	f004 fc88 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd2:	4811      	ldr	r0, [pc, #68]	; (8001c18 <DDS_Init+0x1a8>)
 8001bd4:	f002 fa17 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001bd8:	2005      	movs	r0, #5
 8001bda:	f001 fbaf 	bl	800333c <HAL_Delay>

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Exit DAC from Sleep+Reset mode
 8001bde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001be2:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bea:	480b      	ldr	r0, [pc, #44]	; (8001c18 <DDS_Init+0x1a8>)
 8001bec:	f002 fa0b 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001bf0:	1d39      	adds	r1, r7, #4
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4809      	ldr	r0, [pc, #36]	; (8001c1c <DDS_Init+0x1ac>)
 8001bf8:	f004 fc70 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <DDS_Init+0x1a8>)
 8001c04:	f002 f9ff 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001c08:	2005      	movs	r0, #5
 8001c0a:	f001 fb97 	bl	800333c <HAL_Delay>

}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd90      	pop	{r4, r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	2000098c 	.word	0x2000098c
 8001c20:	200006d8 	.word	0x200006d8

08001c24 <DDS_Update>:

//==============================================================================================
void DDS_Update(void)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001c2a:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001c2e:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001c30:	88bc      	ldrh	r4, [r7, #4]
 8001c32:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <DDS_Update+0x164>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fa4e 	bl	80010d8 <__aeabi_f2uiz>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	0e1b      	lsrs	r3, r3, #24
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	4423      	add	r3, r4
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c4e:	484f      	ldr	r0, [pc, #316]	; (8001d8c <DDS_Update+0x168>)
 8001c50:	f002 f9d9 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001c54:	1d39      	adds	r1, r7, #4
 8001c56:	2305      	movs	r3, #5
 8001c58:	2201      	movs	r2, #1
 8001c5a:	484d      	ldr	r0, [pc, #308]	; (8001d90 <DDS_Update+0x16c>)
 8001c5c:	f004 fc3e 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c66:	4849      	ldr	r0, [pc, #292]	; (8001d8c <DDS_Update+0x168>)
 8001c68:	f002 f9cd 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f001 fb65 	bl	800333c <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001c72:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001c76:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001c78:	88bc      	ldrh	r4, [r7, #4]
 8001c7a:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <DDS_Update+0x164>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fa2a 	bl	80010d8 <__aeabi_f2uiz>
 8001c84:	4603      	mov	r3, r0
 8001c86:	0c1b      	lsrs	r3, r3, #16
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4423      	add	r3, r4
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c9a:	483c      	ldr	r0, [pc, #240]	; (8001d8c <DDS_Update+0x168>)
 8001c9c:	f002 f9b3 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ca0:	1d39      	adds	r1, r7, #4
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	483a      	ldr	r0, [pc, #232]	; (8001d90 <DDS_Update+0x16c>)
 8001ca8:	f004 fc18 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb2:	4836      	ldr	r0, [pc, #216]	; (8001d8c <DDS_Update+0x168>)
 8001cb4:	f002 f9a7 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f001 fb3f 	bl	800333c <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001cbe:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001cc2:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001cc4:	88bc      	ldrh	r4, [r7, #4]
 8001cc6:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <DDS_Update+0x164>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fa04 	bl	80010d8 <__aeabi_f2uiz>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4423      	add	r3, r4
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce6:	4829      	ldr	r0, [pc, #164]	; (8001d8c <DDS_Update+0x168>)
 8001ce8:	f002 f98d 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001cec:	1d39      	adds	r1, r7, #4
 8001cee:	2305      	movs	r3, #5
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4827      	ldr	r0, [pc, #156]	; (8001d90 <DDS_Update+0x16c>)
 8001cf4:	f004 fbf2 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfe:	4823      	ldr	r0, [pc, #140]	; (8001d8c <DDS_Update+0x168>)
 8001d00:	f002 f981 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f001 fb19 	bl	800333c <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0e:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001d10:	88bc      	ldrh	r4, [r7, #4]
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <DDS_Update+0x164>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f9de 	bl	80010d8 <__aeabi_f2uiz>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4423      	add	r3, r4
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d30:	4816      	ldr	r0, [pc, #88]	; (8001d8c <DDS_Update+0x168>)
 8001d32:	f002 f968 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001d36:	1d39      	adds	r1, r7, #4
 8001d38:	2305      	movs	r3, #5
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4814      	ldr	r0, [pc, #80]	; (8001d90 <DDS_Update+0x16c>)
 8001d3e:	f004 fbcd 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d48:	4810      	ldr	r0, [pc, #64]	; (8001d8c <DDS_Update+0x168>)
 8001d4a:	f002 f95c 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f001 faf4 	bl	800333c <HAL_Delay>

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0x9000; // Latch to output by synchonizing data. In this case, the SELSRC bit is again set to 1 using Command Bits [1:0] for C15 and C14.
 8001d54:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001d58:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d60:	480a      	ldr	r0, [pc, #40]	; (8001d8c <DDS_Update+0x168>)
 8001d62:	f002 f950 	bl	8004006 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001d66:	1d39      	adds	r1, r7, #4
 8001d68:	2305      	movs	r3, #5
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4808      	ldr	r0, [pc, #32]	; (8001d90 <DDS_Update+0x16c>)
 8001d6e:	f004 fbb5 	bl	80064dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <DDS_Update+0x168>)
 8001d7a:	f002 f944 	bl	8004006 <HAL_GPIO_WritePin>
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd90      	pop	{r4, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200006d8 	.word	0x200006d8
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	2000098c 	.word	0x2000098c

08001d94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <MX_GPIO_Init+0x114>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <MX_GPIO_Init+0x114>)
 8001db0:	f043 0320 	orr.w	r3, r3, #32
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <MX_GPIO_Init+0x114>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	4b39      	ldr	r3, [pc, #228]	; (8001ea8 <MX_GPIO_Init+0x114>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a38      	ldr	r2, [pc, #224]	; (8001ea8 <MX_GPIO_Init+0x114>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <MX_GPIO_Init+0x114>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <MX_GPIO_Init+0x114>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a32      	ldr	r2, [pc, #200]	; (8001ea8 <MX_GPIO_Init+0x114>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	61d3      	str	r3, [r2, #28]
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <MX_GPIO_Init+0x114>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	2111      	movs	r1, #17
 8001df6:	482d      	ldr	r0, [pc, #180]	; (8001eac <MX_GPIO_Init+0x118>)
 8001df8:	f002 f905 	bl	8004006 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|COUNT_EN_Pin, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f241 0108 	movw	r1, #4104	; 0x1008
 8001e02:	482b      	ldr	r0, [pc, #172]	; (8001eb0 <MX_GPIO_Init+0x11c>)
 8001e04:	f002 f8ff 	bl	8004006 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_CLR_Pin;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e0c:	2311      	movs	r3, #17
 8001e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_CLR_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4823      	ldr	r0, [pc, #140]	; (8001eac <MX_GPIO_Init+0x118>)
 8001e20:	f001 ff5a 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e24:	2302      	movs	r3, #2
 8001e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	4619      	mov	r1, r3
 8001e36:	481d      	ldr	r0, [pc, #116]	; (8001eac <MX_GPIO_Init+0x118>)
 8001e38:	f001 ff4e 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CPU_LDAC_Pin;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CPU_LDAC_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4816      	ldr	r0, [pc, #88]	; (8001eac <MX_GPIO_Init+0x118>)
 8001e52:	f001 ff41 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8001e56:	2310      	movs	r3, #16
 8001e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480f      	ldr	r0, [pc, #60]	; (8001eac <MX_GPIO_Init+0x118>)
 8001e6e:	f001 ff33 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|COUNT_EN_Pin;
 8001e72:	f241 0308 	movw	r3, #4104	; 0x1008
 8001e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4809      	ldr	r0, [pc, #36]	; (8001eb0 <MX_GPIO_Init+0x11c>)
 8001e8c:	f001 ff24 	bl	8003cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	2008      	movs	r0, #8
 8001e96:	f001 fb4a 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e9a:	2008      	movs	r0, #8
 8001e9c:	f001 fb63 	bl	8003566 <HAL_NVIC_EnableIRQ>

}
 8001ea0:	bf00      	nop
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <USB_rx_command_buffer_push_refd>:

FunctionalState Need_update_DDS=0;
FunctionalState Ramp_dac_step_complete=0;

// #define CRICBUF_CLEAN_ON_POP
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <USB_rx_command_buffer_push_refd+0x1c>)
 8001ec0:	f7ff fb30 	bl	8001524 <__circ_gbuf_push>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000360 	.word	0x20000360

08001ed4 <USB_rx_command_buffer_pop_refd>:
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <USB_rx_command_buffer_pop_refd+0x1c>)
 8001ee2:	f7ff facd 	bl	8001480 <__circ_gbuf_pop>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000360 	.word	0x20000360

08001ef4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 8001efa:	4b65      	ldr	r3, [pc, #404]	; (8002090 <main+0x19c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 8001f00:	4b63      	ldr	r3, [pc, #396]	; (8002090 <main+0x19c>)
 8001f02:	2208      	movs	r2, #8
 8001f04:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8001f06:	4b62      	ldr	r3, [pc, #392]	; (8002090 <main+0x19c>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 8001f0c:	4b60      	ldr	r3, [pc, #384]	; (8002090 <main+0x19c>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 8001f12:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <main+0x19c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8001f18:	4b5d      	ldr	r3, [pc, #372]	; (8002090 <main+0x19c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 8001f1e:	4b5c      	ldr	r3, [pc, #368]	; (8002090 <main+0x19c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 8001f24:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <main+0x19c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 8001f2a:	4b59      	ldr	r3, [pc, #356]	; (8002090 <main+0x19c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]

	DAC_target_speed=0.001; //  V/s
 8001f30:	4b58      	ldr	r3, [pc, #352]	; (8002094 <main+0x1a0>)
 8001f32:	4a59      	ldr	r2, [pc, #356]	; (8002098 <main+0x1a4>)
 8001f34:	601a      	str	r2, [r3, #0]
	DAC_code=0x7FFFF;
 8001f36:	4b59      	ldr	r3, [pc, #356]	; (800209c <main+0x1a8>)
 8001f38:	4a59      	ldr	r2, [pc, #356]	; (80020a0 <main+0x1ac>)
 8001f3a:	601a      	str	r2, [r3, #0]
	DAC_code_direction=0;
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <main+0x1b0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f42:	f001 f98c 	bl	800325e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f46:	f000 f8c7 	bl	80020d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f4a:	f7ff ff23 	bl	8001d94 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001f4e:	f000 fe9b 	bl	8002c88 <MX_SPI1_Init>
	MX_SPI2_Init();
 8001f52:	f000 fed1 	bl	8002cf8 <MX_SPI2_Init>
	MX_USB_DEVICE_Init();
 8001f56:	f009 f9e5 	bl	800b324 <MX_USB_DEVICE_Init>
	MX_TIM3_Init();
 8001f5a:	f001 f8e7 	bl	800312c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(20); //WarmUP
 8001f5e:	2014      	movs	r0, #20
 8001f60:	f001 f9ec 	bl	800333c <HAL_Delay>
	cal_DAC_up_voltage=binary_to_float(EEPROM_read(0x00)); // Read top voltage calibration from EEPROM in uV value
 8001f64:	2000      	movs	r0, #0
 8001f66:	f000 fe45 	bl	8002bf4 <EEPROM_read>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f9d1 	bl	8002314 <binary_to_float>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <main+0x1b4>)
 8001f76:	6013      	str	r3, [r2, #0]
	cal_DAC_down_voltage=binary_to_float(EEPROM_read(0x08)); // Read top voltage calibration from EEPROM in uV value
 8001f78:	2008      	movs	r0, #8
 8001f7a:	f000 fe3b 	bl	8002bf4 <EEPROM_read>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f9c7 	bl	8002314 <binary_to_float>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4a48      	ldr	r2, [pc, #288]	; (80020ac <main+0x1b8>)
 8001f8a:	6013      	str	r3, [r2, #0]

	corr_coeff_1=binary_to_float(EEPROM_read(0x10));
 8001f8c:	2010      	movs	r0, #16
 8001f8e:	f000 fe31 	bl	8002bf4 <EEPROM_read>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f9bd 	bl	8002314 <binary_to_float>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4a44      	ldr	r2, [pc, #272]	; (80020b0 <main+0x1bc>)
 8001f9e:	6013      	str	r3, [r2, #0]
	corr_coeff_2=binary_to_float(EEPROM_read(0x18));
 8001fa0:	2018      	movs	r0, #24
 8001fa2:	f000 fe27 	bl	8002bf4 <EEPROM_read>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 f9b3 	bl	8002314 <binary_to_float>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a40      	ldr	r2, [pc, #256]	; (80020b4 <main+0x1c0>)
 8001fb2:	6013      	str	r3, [r2, #0]
	corr_coeff_3=binary_to_float(EEPROM_read(0x20));
 8001fb4:	2020      	movs	r0, #32
 8001fb6:	f000 fe1d 	bl	8002bf4 <EEPROM_read>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 f9a9 	bl	8002314 <binary_to_float>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a3c      	ldr	r2, [pc, #240]	; (80020b8 <main+0x1c4>)
 8001fc6:	6013      	str	r3, [r2, #0]

	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8001fc8:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <main+0x1b4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a37      	ldr	r2, [pc, #220]	; (80020ac <main+0x1b8>)
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fdb0 	bl	8000b38 <__aeabi_fsub>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b37      	ldr	r3, [pc, #220]	; (80020bc <main+0x1c8>)
 8001fde:	601a      	str	r2, [r3, #0]

	DDS_Init();
 8001fe0:	f7ff fd46 	bl	8001a70 <DDS_Init>
	HAL_Delay(250); //WarmUP
 8001fe4:	20fa      	movs	r0, #250	; 0xfa
 8001fe6:	f001 f9a9 	bl	800333c <HAL_Delay>
	DAC_SendInit();
 8001fea:	f7ff fb3d 	bl	8001668 <DAC_SendInit>

	DAC_Write(DAC_code); //Middle
 8001fee:	4b2b      	ldr	r3, [pc, #172]	; (800209c <main+0x1a8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fae4 	bl	80015c0 <DAC_Write>

	HAL_Delay(10);
 8001ff8:	200a      	movs	r0, #10
 8001ffa:	f001 f99f 	bl	800333c <HAL_Delay>
	CDC_Transmit_FS(clear, strlen((const char *)clear));
 8001ffe:	4830      	ldr	r0, [pc, #192]	; (80020c0 <main+0x1cc>)
 8002000:	f7fe f8c8 	bl	8000194 <strlen>
 8002004:	4603      	mov	r3, r0
 8002006:	b29b      	uxth	r3, r3
 8002008:	4619      	mov	r1, r3
 800200a:	482d      	ldr	r0, [pc, #180]	; (80020c0 <main+0x1cc>)
 800200c:	f009 fa8e 	bl	800b52c <CDC_Transmit_FS>
	HAL_Delay(10);
 8002010:	200a      	movs	r0, #10
 8002012:	f001 f993 	bl	800333c <HAL_Delay>

	HAL_TIM_Base_Start_IT(&htim3);
 8002016:	482b      	ldr	r0, [pc, #172]	; (80020c4 <main+0x1d0>)
 8002018:	f005 f8c4 	bl	80071a4 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(USB_CDC_End_Line_Received)
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <main+0x1d4>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d021      	beq.n	800206a <main+0x176>
		{
			uint8_t i=0;
 8002026:	2300      	movs	r3, #0
 8002028:	71fb      	strb	r3, [r7, #7]
			USB_CDC_End_Line_Received=0;
 800202a:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <main+0x1d4>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
			while (1) {
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	4a26      	ldr	r2, [pc, #152]	; (80020cc <main+0x1d8>)
 8002034:	4413      	add	r3, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff4c 	bl	8001ed4 <USB_rx_command_buffer_pop_refd>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <main+0x156>
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	4a21      	ldr	r2, [pc, #132]	; (80020cc <main+0x1d8>)
 8002046:	210a      	movs	r1, #10
 8002048:	54d1      	strb	r1, [r2, r3]
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <main+0x1d8>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	2b0a      	cmp	r3, #10
 8002052:	d008      	beq.n	8002066 <main+0x172>
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <main+0x1d8>)
 8002058:	5cd3      	ldrb	r3, [r2, r3]
 800205a:	2b0d      	cmp	r3, #13
 800205c:	d003      	beq.n	8002066 <main+0x172>
				i++;
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	3301      	adds	r3, #1
 8002062:	71fb      	strb	r3, [r7, #7]
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8002064:	e7e4      	b.n	8002030 <main+0x13c>
			}
			Parsing_command();
 8002066:	f000 f98f 	bl	8002388 <Parsing_command>
		}

		if(Need_update_DDS)
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <main+0x1dc>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0d4      	beq.n	800201c <main+0x128>
		{
			if(Ramp_dac_step_complete)
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <main+0x1e0>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <main+0x196>
			{
				DDS_Update();
 800207a:	f7ff fdd3 	bl	8001c24 <DDS_Update>
				Need_update_DDS=0;
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <main+0x1dc>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
				Ramp_dac_step_complete=0;
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <main+0x1e0>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
			}
			DDS_Calculation();
 800208a:	f7ff fc3b 	bl	8001904 <DDS_Calculation>
		if(USB_CDC_End_Line_Received)
 800208e:	e7c5      	b.n	800201c <main+0x128>
 8002090:	20000914 	.word	0x20000914
 8002094:	20000984 	.word	0x20000984
 8002098:	3a83126f 	.word	0x3a83126f
 800209c:	200006dc 	.word	0x200006dc
 80020a0:	0007ffff 	.word	0x0007ffff
 80020a4:	20000988 	.word	0x20000988
 80020a8:	20000958 	.word	0x20000958
 80020ac:	20000930 	.word	0x20000930
 80020b0:	2000095c 	.word	0x2000095c
 80020b4:	2000092c 	.word	0x2000092c
 80020b8:	20000928 	.word	0x20000928
 80020bc:	20000960 	.word	0x20000960
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000a3c 	.word	0x20000a3c
 80020c8:	20000983 	.word	0x20000983
 80020cc:	20000964 	.word	0x20000964
 80020d0:	200006e0 	.word	0x200006e0
 80020d4:	200006e1 	.word	0x200006e1

080020d8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b092      	sub	sp, #72	; 0x48
 80020dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	2234      	movs	r2, #52	; 0x34
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f009 fe4e 	bl	800bd88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ec:	463b      	mov	r3, r7
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
 80020f8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <SystemClock_Config+0x94>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002102:	4a1a      	ldr	r2, [pc, #104]	; (800216c <SystemClock_Config+0x94>)
 8002104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002108:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800210a:	2301      	movs	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800210e:	2301      	movs	r3, #1
 8002110:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002112:	2302      	movs	r3, #2
 8002114:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800211c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002120:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002122:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002126:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4618      	mov	r0, r3
 800212e:	f003 fbc7 	bl	80058c0 <HAL_RCC_OscConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <SystemClock_Config+0x64>
	{
		Error_Handler();
 8002138:	f000 fda0 	bl	8002c7c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800213c:	230f      	movs	r3, #15
 800213e:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002140:	2303      	movs	r3, #3
 8002142:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002150:	463b      	mov	r3, r7
 8002152:	2101      	movs	r1, #1
 8002154:	4618      	mov	r0, r3
 8002156:	f003 fee3 	bl	8005f20 <HAL_RCC_ClockConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8002160:	f000 fd8c 	bl	8002c7c <Error_Handler>
	}
}
 8002164:	bf00      	nop
 8002166:	3748      	adds	r7, #72	; 0x48
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40007000 	.word	0x40007000

08002170 <HAL_TIM_PeriodElapsedCallback>:
//==============================================================================================


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim3 )
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d102      	bne.n	8002186 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Need_update_DDS=1;
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
	}
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	20000a3c 	.word	0x20000a3c
 8002194:	200006e0 	.word	0x200006e0

08002198 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
	DAC_Write_FAST();
 80021a2:	f7ff fa47 	bl	8001634 <DAC_Write_FAST>
	Ramp_dac_step_complete=1;
 80021a6:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <HAL_GPIO_EXTI_Callback+0x128>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_2)
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	f040 8082 	bne.w	80022b8 <HAL_GPIO_EXTI_Callback+0x120>
	{
		if(DAC_code_direction)
 80021b4:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <HAL_GPIO_EXTI_Callback+0x12c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d040      	beq.n	800223e <HAL_GPIO_EXTI_Callback+0xa6>
		{
			if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_GPIO_EXTI_Callback+0x130>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 80021c4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80021c8:	4a40      	ldr	r2, [pc, #256]	; (80022cc <HAL_GPIO_EXTI_Callback+0x134>)
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d322      	bcc.n	8002216 <HAL_GPIO_EXTI_Callback+0x7e>
			{
				DAC_code+=DDS_target_multipiller;
 80021d0:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <HAL_GPIO_EXTI_Callback+0x134>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <HAL_GPIO_EXTI_Callback+0x130>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4413      	add	r3, r2
 80021da:	4a3c      	ldr	r2, [pc, #240]	; (80022cc <HAL_GPIO_EXTI_Callback+0x134>)
 80021dc:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80021de:	4b3c      	ldr	r3, [pc, #240]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x138>)
 80021e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021e4:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_GPIO_EXTI_Callback+0x134>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021f0:	f023 030f 	bic.w	r3, r3, #15
 80021f4:	4a36      	ldr	r2, [pc, #216]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x138>)
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a35      	ldr	r2, [pc, #212]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x138>)
 80021fc:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x138>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002208:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x138>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29a      	uxth	r2, r3
 8002210:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002212:	805a      	strh	r2, [r3, #2]
 8002214:	e050      	b.n	80022b8 <HAL_GPIO_EXTI_Callback+0x120>

			} else  {
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8002216:	2201      	movs	r2, #1
 8002218:	2108      	movs	r1, #8
 800221a:	482f      	ldr	r0, [pc, #188]	; (80022d8 <HAL_GPIO_EXTI_Callback+0x140>)
 800221c:	f001 fef3 	bl	8004006 <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8002220:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <HAL_GPIO_EXTI_Callback+0x144>)
 8002222:	2200      	movs	r2, #0
 8002224:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8002226:	f7ff fa1f 	bl	8001668 <DAC_SendInit>
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 800222a:	482d      	ldr	r0, [pc, #180]	; (80022e0 <HAL_GPIO_EXTI_Callback+0x148>)
 800222c:	f7fd ffb2 	bl	8000194 <strlen>
 8002230:	4603      	mov	r3, r0
 8002232:	b29b      	uxth	r3, r3
 8002234:	4619      	mov	r1, r3
 8002236:	482a      	ldr	r0, [pc, #168]	; (80022e0 <HAL_GPIO_EXTI_Callback+0x148>)
 8002238:	f009 f978 	bl	800b52c <CDC_Transmit_FS>
				return;
 800223c:	e03c      	b.n	80022b8 <HAL_GPIO_EXTI_Callback+0x120>
			}
		}
		else
		{
			if(DAC_code>=DDS_target_multipiller)
 800223e:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_GPIO_EXTI_Callback+0x134>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <HAL_GPIO_EXTI_Callback+0x130>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d322      	bcc.n	8002290 <HAL_GPIO_EXTI_Callback+0xf8>
			{
				DAC_code-=DDS_target_multipiller;
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_GPIO_EXTI_Callback+0x134>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_GPIO_EXTI_Callback+0x130>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_GPIO_EXTI_Callback+0x134>)
 8002256:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x138>)
 800225a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800225e:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <HAL_GPIO_EXTI_Callback+0x134>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800226a:	f023 030f 	bic.w	r3, r3, #15
 800226e:	4a18      	ldr	r2, [pc, #96]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x138>)
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x138>)
 8002276:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x138>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002282:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x138>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b29a      	uxth	r2, r3
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_GPIO_EXTI_Callback+0x13c>)
 800228c:	805a      	strh	r2, [r3, #2]
 800228e:	e013      	b.n	80022b8 <HAL_GPIO_EXTI_Callback+0x120>

			} else {
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8002290:	2201      	movs	r2, #1
 8002292:	2108      	movs	r1, #8
 8002294:	4810      	ldr	r0, [pc, #64]	; (80022d8 <HAL_GPIO_EXTI_Callback+0x140>)
 8002296:	f001 feb6 	bl	8004006 <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_GPIO_EXTI_Callback+0x144>)
 800229c:	2200      	movs	r2, #0
 800229e:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 80022a0:	f7ff f9e2 	bl	8001668 <DAC_SendInit>
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 80022a4:	480e      	ldr	r0, [pc, #56]	; (80022e0 <HAL_GPIO_EXTI_Callback+0x148>)
 80022a6:	f7fd ff75 	bl	8000194 <strlen>
 80022aa:	4603      	mov	r3, r0
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	480b      	ldr	r0, [pc, #44]	; (80022e0 <HAL_GPIO_EXTI_Callback+0x148>)
 80022b2:	f009 f93b 	bl	800b52c <CDC_Transmit_FS>
				return;
 80022b6:	bf00      	nop
			}
		}
	}
}
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200006e1 	.word	0x200006e1
 80022c4:	20000988 	.word	0x20000988
 80022c8:	2000035c 	.word	0x2000035c
 80022cc:	200006dc 	.word	0x200006dc
 80022d0:	20000924 	.word	0x20000924
 80022d4:	20000920 	.word	0x20000920
 80022d8:	40020400 	.word	0x40020400
 80022dc:	20000914 	.word	0x20000914
 80022e0:	20000340 	.word	0x20000340

080022e4 <Write_to_circ_buffer>:

//==============================================================================================
void Write_to_circ_buffer(uint8_t Buf)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fddf 	bl	8001eb4 <USB_rx_command_buffer_push_refd>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <Write_to_circ_buffer+0x24>
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <Write_to_circ_buffer+0x2c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	809a      	strh	r2, [r3, #4]
 8002302:	4b03      	ldr	r3, [pc, #12]	; (8002310 <Write_to_circ_buffer+0x2c>)
 8002304:	2200      	movs	r2, #0
 8002306:	80da      	strh	r2, [r3, #6]
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000360 	.word	0x20000360

08002314 <binary_to_float>:
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC push_options
#pragma GCC optimize ("O0")

float binary_to_float(uint32_t a)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	    int * p;
	    float out=0;
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]

	    p = &out;
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	60fb      	str	r3, [r7, #12]
	    (*p)=a;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	601a      	str	r2, [r3, #0]
	    return out;
 800232e:	68bb      	ldr	r3, [r7, #8]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <float_to_binary>:


uint32_t float_to_binary(float a)
{
 800233a:	b480      	push	{r7}
 800233c:	b087      	sub	sp, #28
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	    int i;
	    int * p;
	    uint32_t out=0;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]

	    p = &a;
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	60fb      	str	r3, [r7, #12]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 800234a:	231f      	movs	r3, #31
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e010      	b.n	8002372 <float_to_binary+0x38>
	    {
	    	out+=((*p) >> i & 1)<<i;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa42 f303 	asr.w	r3, r2, r3
 800235a:	f003 0201 	and.w	r2, r3, #1
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	461a      	mov	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3b01      	subs	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	daeb      	bge.n	8002350 <float_to_binary+0x16>
	    }

	    return out;
 8002378:	693b      	ldr	r3, [r7, #16]
}
 800237a:	4618      	mov	r0, r3
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	0000      	movs	r0, r0
	...

08002388 <Parsing_command>:
#pragma GCC pop_options
#pragma GCC diagnostic pop
//==============================================================================================
void Parsing_command(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b094      	sub	sp, #80	; 0x50
 800238c:	af00      	add	r7, sp, #0
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];
	float dac_resolution;

	found = strtok((char *)command_buffer," ");
 800238e:	49bd      	ldr	r1, [pc, #756]	; (8002684 <Parsing_command+0x2fc>)
 8002390:	48bd      	ldr	r0, [pc, #756]	; (8002688 <Parsing_command+0x300>)
 8002392:	f00a fb2d 	bl	800c9f0 <strtok>
 8002396:	64b8      	str	r0, [r7, #72]	; 0x48
	if(found!=NULL)
 8002398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00e      	beq.n	80023bc <Parsing_command+0x34>
	{
		strcpy(decoded_string_1,found);
 800239e:	f107 0320 	add.w	r3, r7, #32
 80023a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80023a4:	4618      	mov	r0, r3
 80023a6:	f009 fcf7 	bl	800bd98 <strcpy>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
		HAL_Delay(10);
		return;
	}

	found = strtok(NULL,"\r");
 80023aa:	49b8      	ldr	r1, [pc, #736]	; (800268c <Parsing_command+0x304>)
 80023ac:	2000      	movs	r0, #0
 80023ae:	f00a fb1f 	bl	800c9f0 <strtok>
 80023b2:	64b8      	str	r0, [r7, #72]	; 0x48
	if(found!=NULL)
 80023b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d02f      	beq.n	800241a <Parsing_command+0x92>
 80023ba:	e00f      	b.n	80023dc <Parsing_command+0x54>
		HAL_Delay(10);
 80023bc:	200a      	movs	r0, #10
 80023be:	f000 ffbd 	bl	800333c <HAL_Delay>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 80023c2:	48b3      	ldr	r0, [pc, #716]	; (8002690 <Parsing_command+0x308>)
 80023c4:	f7fd fee6 	bl	8000194 <strlen>
 80023c8:	4603      	mov	r3, r0
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4619      	mov	r1, r3
 80023ce:	48b0      	ldr	r0, [pc, #704]	; (8002690 <Parsing_command+0x308>)
 80023d0:	f009 f8ac 	bl	800b52c <CDC_Transmit_FS>
		HAL_Delay(10);
 80023d4:	200a      	movs	r0, #10
 80023d6:	f000 ffb1 	bl	800333c <HAL_Delay>
		return;
 80023da:	e3e1      	b.n	8002ba0 <Parsing_command+0x818>
	{
		strcpy(decoded_string_2,found);
 80023dc:	463b      	mov	r3, r7
 80023de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80023e0:	4618      	mov	r0, r3
 80023e2:	f009 fcd9 	bl	800bd98 <strcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 80023e6:	2300      	movs	r3, #0
 80023e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023ea:	e00d      	b.n	8002408 <Parsing_command+0x80>
 80023ec:	463a      	mov	r2, r7
 80023ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d104      	bne.n	8002402 <Parsing_command+0x7a>
 80023f8:	463a      	mov	r2, r7
 80023fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023fc:	4413      	add	r3, r2
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	3301      	adds	r3, #1
 8002406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002408:	463b      	mov	r3, r7
 800240a:	4618      	mov	r0, r3
 800240c:	f7fd fec2 	bl	8000194 <strlen>
 8002410:	4602      	mov	r2, r0
 8002412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002414:	429a      	cmp	r2, r3
 8002416:	d8e9      	bhi.n	80023ec <Parsing_command+0x64>
 8002418:	e00f      	b.n	800243a <Parsing_command+0xb2>
	}
	else
	{
		HAL_Delay(10);
 800241a:	200a      	movs	r0, #10
 800241c:	f000 ff8e 	bl	800333c <HAL_Delay>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002420:	489b      	ldr	r0, [pc, #620]	; (8002690 <Parsing_command+0x308>)
 8002422:	f7fd feb7 	bl	8000194 <strlen>
 8002426:	4603      	mov	r3, r0
 8002428:	b29b      	uxth	r3, r3
 800242a:	4619      	mov	r1, r3
 800242c:	4898      	ldr	r0, [pc, #608]	; (8002690 <Parsing_command+0x308>)
 800242e:	f009 f87d 	bl	800b52c <CDC_Transmit_FS>
		HAL_Delay(10);
 8002432:	200a      	movs	r0, #10
 8002434:	f000 ff82 	bl	800333c <HAL_Delay>
		return;
 8002438:	e3b2      	b.n	8002ba0 <Parsing_command+0x818>
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	4995      	ldr	r1, [pc, #596]	; (8002694 <Parsing_command+0x30c>)
 8002440:	4618      	mov	r0, r3
 8002442:	f7fd fe9d 	bl	8000180 <strcmp>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d157      	bne.n	80024fc <Parsing_command+0x174>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 800244c:	463b      	mov	r3, r7
 800244e:	4992      	ldr	r1, [pc, #584]	; (8002698 <Parsing_command+0x310>)
 8002450:	4618      	mov	r0, r3
 8002452:	f7fd fe95 	bl	8000180 <strcmp>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d11d      	bne.n	8002498 <Parsing_command+0x110>
			DAC_TEMP_CAL();
 800245c:	f7ff f98c 	bl	8001778 <DAC_TEMP_CAL>
			HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_RESET); // Enable LDAC signal
 8002460:	2200      	movs	r2, #0
 8002462:	2108      	movs	r1, #8
 8002464:	488d      	ldr	r0, [pc, #564]	; (800269c <Parsing_command+0x314>)
 8002466:	f001 fdce 	bl	8004006 <HAL_GPIO_WritePin>
			cfg.LDACMODE=1;
 800246a:	4b8d      	ldr	r3, [pc, #564]	; (80026a0 <Parsing_command+0x318>)
 800246c:	2201      	movs	r2, #1
 800246e:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 8002470:	f7ff f8fa 	bl	8001668 <DAC_SendInit>
			DDS_Init();
 8002474:	f7ff fafc 	bl	8001a70 <DDS_Init>
			HAL_Delay(10);
 8002478:	200a      	movs	r0, #10
 800247a:	f000 ff5f 	bl	800333c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 800247e:	4889      	ldr	r0, [pc, #548]	; (80026a4 <Parsing_command+0x31c>)
 8002480:	f7fd fe88 	bl	8000194 <strlen>
 8002484:	4603      	mov	r3, r0
 8002486:	b29b      	uxth	r3, r3
 8002488:	4619      	mov	r1, r3
 800248a:	4886      	ldr	r0, [pc, #536]	; (80026a4 <Parsing_command+0x31c>)
 800248c:	f009 f84e 	bl	800b52c <CDC_Transmit_FS>
			HAL_Delay(10);
 8002490:	200a      	movs	r0, #10
 8002492:	f000 ff53 	bl	800333c <HAL_Delay>
			return;
 8002496:	e383      	b.n	8002ba0 <Parsing_command+0x818>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP"))){
 8002498:	463b      	mov	r3, r7
 800249a:	4983      	ldr	r1, [pc, #524]	; (80026a8 <Parsing_command+0x320>)
 800249c:	4618      	mov	r0, r3
 800249e:	f7fd fe6f 	bl	8000180 <strcmp>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d119      	bne.n	80024dc <Parsing_command+0x154>
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 80024a8:	2201      	movs	r2, #1
 80024aa:	2108      	movs	r1, #8
 80024ac:	487b      	ldr	r0, [pc, #492]	; (800269c <Parsing_command+0x314>)
 80024ae:	f001 fdaa 	bl	8004006 <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 80024b2:	4b7b      	ldr	r3, [pc, #492]	; (80026a0 <Parsing_command+0x318>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 80024b8:	f7ff f8d6 	bl	8001668 <DAC_SendInit>
				HAL_Delay(10);
 80024bc:	200a      	movs	r0, #10
 80024be:	f000 ff3d 	bl	800333c <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 80024c2:	4878      	ldr	r0, [pc, #480]	; (80026a4 <Parsing_command+0x31c>)
 80024c4:	f7fd fe66 	bl	8000194 <strlen>
 80024c8:	4603      	mov	r3, r0
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4619      	mov	r1, r3
 80024ce:	4875      	ldr	r0, [pc, #468]	; (80026a4 <Parsing_command+0x31c>)
 80024d0:	f009 f82c 	bl	800b52c <CDC_Transmit_FS>
				HAL_Delay(10);
 80024d4:	200a      	movs	r0, #10
 80024d6:	f000 ff31 	bl	800333c <HAL_Delay>
				return;
 80024da:	e361      	b.n	8002ba0 <Parsing_command+0x818>
			}
			else
			{
				HAL_Delay(10);
 80024dc:	200a      	movs	r0, #10
 80024de:	f000 ff2d 	bl	800333c <HAL_Delay>
				CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 80024e2:	486b      	ldr	r0, [pc, #428]	; (8002690 <Parsing_command+0x308>)
 80024e4:	f7fd fe56 	bl	8000194 <strlen>
 80024e8:	4603      	mov	r3, r0
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	4868      	ldr	r0, [pc, #416]	; (8002690 <Parsing_command+0x308>)
 80024f0:	f009 f81c 	bl	800b52c <CDC_Transmit_FS>
				HAL_Delay(10);
 80024f4:	200a      	movs	r0, #10
 80024f6:	f000 ff21 	bl	800333c <HAL_Delay>
				return;
 80024fa:	e351      	b.n	8002ba0 <Parsing_command+0x818>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 80024fc:	f107 0320 	add.w	r3, r7, #32
 8002500:	496a      	ldr	r1, [pc, #424]	; (80026ac <Parsing_command+0x324>)
 8002502:	4618      	mov	r0, r3
 8002504:	f7fd fe3c 	bl	8000180 <strcmp>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 80e2 	bne.w	80026d4 <Parsing_command+0x34c>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 8002510:	463b      	mov	r3, r7
 8002512:	4967      	ldr	r1, [pc, #412]	; (80026b0 <Parsing_command+0x328>)
 8002514:	4618      	mov	r0, r3
 8002516:	f7fd fe33 	bl	8000180 <strcmp>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d11f      	bne.n	8002560 <Parsing_command+0x1d8>
			DAC_code=0xFFFFF;
 8002520:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <Parsing_command+0x32c>)
 8002522:	4a65      	ldr	r2, [pc, #404]	; (80026b8 <Parsing_command+0x330>)
 8002524:	601a      	str	r2, [r3, #0]
			DAC_code_direction=0;
 8002526:	4b65      	ldr	r3, [pc, #404]	; (80026bc <Parsing_command+0x334>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
			cfg.LDACMODE=0;
 800252c:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <Parsing_command+0x318>)
 800252e:	2200      	movs	r2, #0
 8002530:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 8002532:	f7ff f899 	bl	8001668 <DAC_SendInit>
			DAC_Write(DAC_code);
 8002536:	4b5f      	ldr	r3, [pc, #380]	; (80026b4 <Parsing_command+0x32c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff f840 	bl	80015c0 <DAC_Write>
			HAL_Delay(10);
 8002540:	200a      	movs	r0, #10
 8002542:	f000 fefb 	bl	800333c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002546:	4857      	ldr	r0, [pc, #348]	; (80026a4 <Parsing_command+0x31c>)
 8002548:	f7fd fe24 	bl	8000194 <strlen>
 800254c:	4603      	mov	r3, r0
 800254e:	b29b      	uxth	r3, r3
 8002550:	4619      	mov	r1, r3
 8002552:	4854      	ldr	r0, [pc, #336]	; (80026a4 <Parsing_command+0x31c>)
 8002554:	f008 ffea 	bl	800b52c <CDC_Transmit_FS>
			HAL_Delay(10);
 8002558:	200a      	movs	r0, #10
 800255a:	f000 feef 	bl	800333c <HAL_Delay>
			return;
 800255e:	e31f      	b.n	8002ba0 <Parsing_command+0x818>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8002560:	463b      	mov	r3, r7
 8002562:	4957      	ldr	r1, [pc, #348]	; (80026c0 <Parsing_command+0x338>)
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd fe0b 	bl	8000180 <strcmp>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d11f      	bne.n	80025b0 <Parsing_command+0x228>
				DAC_code=0x0;
 8002570:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <Parsing_command+0x32c>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
				DAC_code_direction=1;
 8002576:	4b51      	ldr	r3, [pc, #324]	; (80026bc <Parsing_command+0x334>)
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
				cfg.LDACMODE=0;
 800257c:	4b48      	ldr	r3, [pc, #288]	; (80026a0 <Parsing_command+0x318>)
 800257e:	2200      	movs	r2, #0
 8002580:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8002582:	f7ff f871 	bl	8001668 <DAC_SendInit>
				DAC_Write(DAC_code);
 8002586:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <Parsing_command+0x32c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f818 	bl	80015c0 <DAC_Write>
				HAL_Delay(10);
 8002590:	200a      	movs	r0, #10
 8002592:	f000 fed3 	bl	800333c <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002596:	4843      	ldr	r0, [pc, #268]	; (80026a4 <Parsing_command+0x31c>)
 8002598:	f7fd fdfc 	bl	8000194 <strlen>
 800259c:	4603      	mov	r3, r0
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4619      	mov	r1, r3
 80025a2:	4840      	ldr	r0, [pc, #256]	; (80026a4 <Parsing_command+0x31c>)
 80025a4:	f008 ffc2 	bl	800b52c <CDC_Transmit_FS>
				HAL_Delay(10);
 80025a8:	200a      	movs	r0, #10
 80025aa:	f000 fec7 	bl	800333c <HAL_Delay>
				return;
 80025ae:	e2f7      	b.n	8002ba0 <Parsing_command+0x818>
			}
			else
			{
				atof_tmp=atof(decoded_string_2);
 80025b0:	463b      	mov	r3, r7
 80025b2:	4618      	mov	r0, r3
 80025b4:	f009 fbac 	bl	800bd10 <atof>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f7fe fa66 	bl	8000a90 <__aeabi_d2f>
 80025c4:	4603      	mov	r3, r0
 80025c6:	647b      	str	r3, [r7, #68]	; 0x44
				if(atof_tmp>=cal_DAC_down_voltage && atof_tmp<=cal_DAC_up_voltage)
 80025c8:	4b3e      	ldr	r3, [pc, #248]	; (80026c4 <Parsing_command+0x33c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80025d0:	f7fe fd6e 	bl	80010b0 <__aeabi_fcmpge>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d043      	beq.n	8002662 <Parsing_command+0x2da>
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <Parsing_command+0x340>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80025e2:	f7fe fd5b 	bl	800109c <__aeabi_fcmple>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d03a      	beq.n	8002662 <Parsing_command+0x2da>
				{
					dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 80025ec:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <Parsing_command+0x340>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <Parsing_command+0x33c>)
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fa9e 	bl	8000b38 <__aeabi_fsub>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4933      	ldr	r1, [pc, #204]	; (80026cc <Parsing_command+0x344>)
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fc57 	bl	8000eb4 <__aeabi_fdiv>
 8002606:	4603      	mov	r3, r0
 8002608:	643b      	str	r3, [r7, #64]	; 0x40
					DAC_code=(uint32_t)((atof_tmp-cal_DAC_down_voltage)/dac_resolution);
 800260a:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <Parsing_command+0x33c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002612:	f7fe fa91 	bl	8000b38 <__aeabi_fsub>
 8002616:	4603      	mov	r3, r0
 8002618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fc4a 	bl	8000eb4 <__aeabi_fdiv>
 8002620:	4603      	mov	r3, r0
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fd58 	bl	80010d8 <__aeabi_f2uiz>
 8002628:	4603      	mov	r3, r0
 800262a:	4a22      	ldr	r2, [pc, #136]	; (80026b4 <Parsing_command+0x32c>)
 800262c:	6013      	str	r3, [r2, #0]

					cfg.LDACMODE=0;
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <Parsing_command+0x318>)
 8002630:	2200      	movs	r2, #0
 8002632:	709a      	strb	r2, [r3, #2]
					DAC_TEMP_CAL();
 8002634:	f7ff f8a0 	bl	8001778 <DAC_TEMP_CAL>
					DAC_Write(DAC_code);
 8002638:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <Parsing_command+0x32c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe ffbf 	bl	80015c0 <DAC_Write>

					HAL_Delay(10);
 8002642:	200a      	movs	r0, #10
 8002644:	f000 fe7a 	bl	800333c <HAL_Delay>
					CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002648:	4816      	ldr	r0, [pc, #88]	; (80026a4 <Parsing_command+0x31c>)
 800264a:	f7fd fda3 	bl	8000194 <strlen>
 800264e:	4603      	mov	r3, r0
 8002650:	b29b      	uxth	r3, r3
 8002652:	4619      	mov	r1, r3
 8002654:	4813      	ldr	r0, [pc, #76]	; (80026a4 <Parsing_command+0x31c>)
 8002656:	f008 ff69 	bl	800b52c <CDC_Transmit_FS>
					HAL_Delay(10);
 800265a:	200a      	movs	r0, #10
 800265c:	f000 fe6e 	bl	800333c <HAL_Delay>
					return;
 8002660:	e29e      	b.n	8002ba0 <Parsing_command+0x818>
				}
				else
				{
					HAL_Delay(10);
 8002662:	200a      	movs	r0, #10
 8002664:	f000 fe6a 	bl	800333c <HAL_Delay>
					CDC_Transmit_FS(Error2, strlen((const char *)Error2));  // SEND ERROR TO CDC!!!
 8002668:	4819      	ldr	r0, [pc, #100]	; (80026d0 <Parsing_command+0x348>)
 800266a:	f7fd fd93 	bl	8000194 <strlen>
 800266e:	4603      	mov	r3, r0
 8002670:	b29b      	uxth	r3, r3
 8002672:	4619      	mov	r1, r3
 8002674:	4816      	ldr	r0, [pc, #88]	; (80026d0 <Parsing_command+0x348>)
 8002676:	f008 ff59 	bl	800b52c <CDC_Transmit_FS>
					HAL_Delay(10);
 800267a:	200a      	movs	r0, #10
 800267c:	f000 fe5e 	bl	800333c <HAL_Delay>
					return;
 8002680:	e28e      	b.n	8002ba0 <Parsing_command+0x818>
 8002682:	bf00      	nop
 8002684:	0800eb44 	.word	0x0800eb44
 8002688:	20000964 	.word	0x20000964
 800268c:	0800eb48 	.word	0x0800eb48
 8002690:	20000008 	.word	0x20000008
 8002694:	0800eb4c 	.word	0x0800eb4c
 8002698:	0800eb54 	.word	0x0800eb54
 800269c:	40020400 	.word	0x40020400
 80026a0:	20000914 	.word	0x20000914
 80026a4:	200002fc 	.word	0x200002fc
 80026a8:	0800eb5c 	.word	0x0800eb5c
 80026ac:	0800eb64 	.word	0x0800eb64
 80026b0:	0800eb6c 	.word	0x0800eb6c
 80026b4:	200006dc 	.word	0x200006dc
 80026b8:	000fffff 	.word	0x000fffff
 80026bc:	20000988 	.word	0x20000988
 80026c0:	0800eb70 	.word	0x0800eb70
 80026c4:	20000930 	.word	0x20000930
 80026c8:	20000958 	.word	0x20000958
 80026cc:	497ffff0 	.word	0x497ffff0
 80026d0:	20000314 	.word	0x20000314

		}
	}

	// ==== DAC_CAL_TEMP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TEMP")))
 80026d4:	f107 0320 	add.w	r3, r7, #32
 80026d8:	4997      	ldr	r1, [pc, #604]	; (8002938 <Parsing_command+0x5b0>)
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fd50 	bl	8000180 <strcmp>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d127      	bne.n	8002736 <Parsing_command+0x3ae>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 80026e6:	463b      	mov	r3, r7
 80026e8:	4994      	ldr	r1, [pc, #592]	; (800293c <Parsing_command+0x5b4>)
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fd fd48 	bl	8000180 <strcmp>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <Parsing_command+0x38e>
			DAC_code=0x7FFFF;
 80026f6:	4b92      	ldr	r3, [pc, #584]	; (8002940 <Parsing_command+0x5b8>)
 80026f8:	4a92      	ldr	r2, [pc, #584]	; (8002944 <Parsing_command+0x5bc>)
 80026fa:	601a      	str	r2, [r3, #0]
			DAC_Write(DAC_code);
 80026fc:	4b90      	ldr	r3, [pc, #576]	; (8002940 <Parsing_command+0x5b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe ff5d 	bl	80015c0 <DAC_Write>
			DAC_TEMP_CAL();
 8002706:	f7ff f837 	bl	8001778 <DAC_TEMP_CAL>
			DAC_Write(DAC_code);
 800270a:	4b8d      	ldr	r3, [pc, #564]	; (8002940 <Parsing_command+0x5b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe ff56 	bl	80015c0 <DAC_Write>
			return;
 8002714:	e244      	b.n	8002ba0 <Parsing_command+0x818>
		}
		else
		{
			HAL_Delay(10);
 8002716:	200a      	movs	r0, #10
 8002718:	f000 fe10 	bl	800333c <HAL_Delay>
			CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!`
 800271c:	488a      	ldr	r0, [pc, #552]	; (8002948 <Parsing_command+0x5c0>)
 800271e:	f7fd fd39 	bl	8000194 <strlen>
 8002722:	4603      	mov	r3, r0
 8002724:	b29b      	uxth	r3, r3
 8002726:	4619      	mov	r1, r3
 8002728:	4887      	ldr	r0, [pc, #540]	; (8002948 <Parsing_command+0x5c0>)
 800272a:	f008 feff 	bl	800b52c <CDC_Transmit_FS>
			HAL_Delay(10);
 800272e:	200a      	movs	r0, #10
 8002730:	f000 fe04 	bl	800333c <HAL_Delay>
			return;
 8002734:	e234      	b.n	8002ba0 <Parsing_command+0x818>
		}
	}

	// ==== DAC_CAL_POLY_A command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_A")))
 8002736:	f107 0320 	add.w	r3, r7, #32
 800273a:	4984      	ldr	r1, [pc, #528]	; (800294c <Parsing_command+0x5c4>)
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fd1f 	bl	8000180 <strcmp>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d126      	bne.n	8002796 <Parsing_command+0x40e>
	{
		atof_tmp=atof(decoded_string_2);
 8002748:	463b      	mov	r3, r7
 800274a:	4618      	mov	r0, r3
 800274c:	f009 fae0 	bl	800bd10 <atof>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f7fe f99a 	bl	8000a90 <__aeabi_d2f>
 800275c:	4603      	mov	r3, r0
 800275e:	647b      	str	r3, [r7, #68]	; 0x44
		corr_coeff_1=atof_tmp;
 8002760:	4a7b      	ldr	r2, [pc, #492]	; (8002950 <Parsing_command+0x5c8>)
 8002762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002764:	6013      	str	r3, [r2, #0]
		EEPROM_write(0x10,float_to_binary(atof_tmp));
 8002766:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002768:	f7ff fde7 	bl	800233a <float_to_binary>
 800276c:	4603      	mov	r3, r0
 800276e:	4619      	mov	r1, r3
 8002770:	2010      	movs	r0, #16
 8002772:	f000 fa59 	bl	8002c28 <EEPROM_write>
		HAL_Delay(10);
 8002776:	200a      	movs	r0, #10
 8002778:	f000 fde0 	bl	800333c <HAL_Delay>
		CDC_Transmit_FS(OK, strlen((const char *)OK));
 800277c:	4875      	ldr	r0, [pc, #468]	; (8002954 <Parsing_command+0x5cc>)
 800277e:	f7fd fd09 	bl	8000194 <strlen>
 8002782:	4603      	mov	r3, r0
 8002784:	b29b      	uxth	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	4872      	ldr	r0, [pc, #456]	; (8002954 <Parsing_command+0x5cc>)
 800278a:	f008 fecf 	bl	800b52c <CDC_Transmit_FS>
		HAL_Delay(10);
 800278e:	200a      	movs	r0, #10
 8002790:	f000 fdd4 	bl	800333c <HAL_Delay>
		return;
 8002794:	e204      	b.n	8002ba0 <Parsing_command+0x818>
	}

	// ==== DAC_CAL_POLY_B command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_B")))
 8002796:	f107 0320 	add.w	r3, r7, #32
 800279a:	496f      	ldr	r1, [pc, #444]	; (8002958 <Parsing_command+0x5d0>)
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fcef 	bl	8000180 <strcmp>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d126      	bne.n	80027f6 <Parsing_command+0x46e>
	{
		atof_tmp=atof(decoded_string_2);
 80027a8:	463b      	mov	r3, r7
 80027aa:	4618      	mov	r0, r3
 80027ac:	f009 fab0 	bl	800bd10 <atof>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe f96a 	bl	8000a90 <__aeabi_d2f>
 80027bc:	4603      	mov	r3, r0
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
		corr_coeff_2=atof_tmp;
 80027c0:	4a66      	ldr	r2, [pc, #408]	; (800295c <Parsing_command+0x5d4>)
 80027c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c4:	6013      	str	r3, [r2, #0]
		EEPROM_write(0x18,float_to_binary(atof_tmp));
 80027c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027c8:	f7ff fdb7 	bl	800233a <float_to_binary>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4619      	mov	r1, r3
 80027d0:	2018      	movs	r0, #24
 80027d2:	f000 fa29 	bl	8002c28 <EEPROM_write>
		HAL_Delay(10);
 80027d6:	200a      	movs	r0, #10
 80027d8:	f000 fdb0 	bl	800333c <HAL_Delay>
		CDC_Transmit_FS(OK, strlen((const char *)OK));
 80027dc:	485d      	ldr	r0, [pc, #372]	; (8002954 <Parsing_command+0x5cc>)
 80027de:	f7fd fcd9 	bl	8000194 <strlen>
 80027e2:	4603      	mov	r3, r0
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4619      	mov	r1, r3
 80027e8:	485a      	ldr	r0, [pc, #360]	; (8002954 <Parsing_command+0x5cc>)
 80027ea:	f008 fe9f 	bl	800b52c <CDC_Transmit_FS>
		HAL_Delay(10);
 80027ee:	200a      	movs	r0, #10
 80027f0:	f000 fda4 	bl	800333c <HAL_Delay>
		return;
 80027f4:	e1d4      	b.n	8002ba0 <Parsing_command+0x818>
	}

	// ==== DAC_CAL_POLY_C command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_C")))
 80027f6:	f107 0320 	add.w	r3, r7, #32
 80027fa:	4959      	ldr	r1, [pc, #356]	; (8002960 <Parsing_command+0x5d8>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fcbf 	bl	8000180 <strcmp>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d126      	bne.n	8002856 <Parsing_command+0x4ce>
	{
		atof_tmp=atof(decoded_string_2);
 8002808:	463b      	mov	r3, r7
 800280a:	4618      	mov	r0, r3
 800280c:	f009 fa80 	bl	800bd10 <atof>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	f7fe f93a 	bl	8000a90 <__aeabi_d2f>
 800281c:	4603      	mov	r3, r0
 800281e:	647b      	str	r3, [r7, #68]	; 0x44
		corr_coeff_3=atof_tmp;
 8002820:	4a50      	ldr	r2, [pc, #320]	; (8002964 <Parsing_command+0x5dc>)
 8002822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002824:	6013      	str	r3, [r2, #0]
		EEPROM_write(0x20,float_to_binary(atof_tmp));
 8002826:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002828:	f7ff fd87 	bl	800233a <float_to_binary>
 800282c:	4603      	mov	r3, r0
 800282e:	4619      	mov	r1, r3
 8002830:	2020      	movs	r0, #32
 8002832:	f000 f9f9 	bl	8002c28 <EEPROM_write>
		HAL_Delay(10);
 8002836:	200a      	movs	r0, #10
 8002838:	f000 fd80 	bl	800333c <HAL_Delay>
		CDC_Transmit_FS(OK, strlen((const char *)OK));
 800283c:	4845      	ldr	r0, [pc, #276]	; (8002954 <Parsing_command+0x5cc>)
 800283e:	f7fd fca9 	bl	8000194 <strlen>
 8002842:	4603      	mov	r3, r0
 8002844:	b29b      	uxth	r3, r3
 8002846:	4619      	mov	r1, r3
 8002848:	4842      	ldr	r0, [pc, #264]	; (8002954 <Parsing_command+0x5cc>)
 800284a:	f008 fe6f 	bl	800b52c <CDC_Transmit_FS>
		HAL_Delay(10);
 800284e:	200a      	movs	r0, #10
 8002850:	f000 fd74 	bl	800333c <HAL_Delay>
		return;
 8002854:	e1a4      	b.n	8002ba0 <Parsing_command+0x818>
	}

	// ==== DAC_CAL_TOP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TOP")))
 8002856:	f107 0320 	add.w	r3, r7, #32
 800285a:	4943      	ldr	r1, [pc, #268]	; (8002968 <Parsing_command+0x5e0>)
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fc8f 	bl	8000180 <strcmp>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	f040 8089 	bne.w	800297c <Parsing_command+0x5f4>
	{
		atof_tmp=atof(decoded_string_2);
 800286a:	463b      	mov	r3, r7
 800286c:	4618      	mov	r0, r3
 800286e:	f009 fa4f 	bl	800bd10 <atof>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f7fe f909 	bl	8000a90 <__aeabi_d2f>
 800287e:	4603      	mov	r3, r0
 8002880:	647b      	str	r3, [r7, #68]	; 0x44
		if(atof_tmp>9.9 && atof_tmp<10.1)
 8002882:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002884:	f7fd fdf2 	bl	800046c <__aeabi_f2d>
 8002888:	a327      	add	r3, pc, #156	; (adr r3, 8002928 <Parsing_command+0x5a0>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fe f8d5 	bl	8000a3c <__aeabi_dcmpgt>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d035      	beq.n	8002904 <Parsing_command+0x57c>
 8002898:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800289a:	f7fd fde7 	bl	800046c <__aeabi_f2d>
 800289e:	a324      	add	r3, pc, #144	; (adr r3, 8002930 <Parsing_command+0x5a8>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fe f8ac 	bl	8000a00 <__aeabi_dcmplt>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02a      	beq.n	8002904 <Parsing_command+0x57c>
		{
			cal_DAC_up_voltage=atof_tmp;
 80028ae:	4a2f      	ldr	r2, [pc, #188]	; (800296c <Parsing_command+0x5e4>)
 80028b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b2:	6013      	str	r3, [r2, #0]
			EEPROM_write(0x00,float_to_binary(cal_DAC_up_voltage)); // Write top voltage calibration to EEPROM in uV value
 80028b4:	4b2d      	ldr	r3, [pc, #180]	; (800296c <Parsing_command+0x5e4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fd3e 	bl	800233a <float_to_binary>
 80028be:	4603      	mov	r3, r0
 80028c0:	4619      	mov	r1, r3
 80028c2:	2000      	movs	r0, #0
 80028c4:	f000 f9b0 	bl	8002c28 <EEPROM_write>
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 80028c8:	4b28      	ldr	r3, [pc, #160]	; (800296c <Parsing_command+0x5e4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a28      	ldr	r2, [pc, #160]	; (8002970 <Parsing_command+0x5e8>)
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe f930 	bl	8000b38 <__aeabi_fsub>
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	4b25      	ldr	r3, [pc, #148]	; (8002974 <Parsing_command+0x5ec>)
 80028de:	601a      	str	r2, [r3, #0]
			DDS_Init();
 80028e0:	f7ff f8c6 	bl	8001a70 <DDS_Init>

			HAL_Delay(10);
 80028e4:	200a      	movs	r0, #10
 80028e6:	f000 fd29 	bl	800333c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 80028ea:	481a      	ldr	r0, [pc, #104]	; (8002954 <Parsing_command+0x5cc>)
 80028ec:	f7fd fc52 	bl	8000194 <strlen>
 80028f0:	4603      	mov	r3, r0
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4619      	mov	r1, r3
 80028f6:	4817      	ldr	r0, [pc, #92]	; (8002954 <Parsing_command+0x5cc>)
 80028f8:	f008 fe18 	bl	800b52c <CDC_Transmit_FS>
			HAL_Delay(10);
 80028fc:	200a      	movs	r0, #10
 80028fe:	f000 fd1d 	bl	800333c <HAL_Delay>
			return;
 8002902:	e14d      	b.n	8002ba0 <Parsing_command+0x818>
		}
		else
		{
			HAL_Delay(10);
 8002904:	200a      	movs	r0, #10
 8002906:	f000 fd19 	bl	800333c <HAL_Delay>
			CDC_Transmit_FS(Error2, strlen((const char *)Error2));  // SEND ERROR TO CDC!!!
 800290a:	481b      	ldr	r0, [pc, #108]	; (8002978 <Parsing_command+0x5f0>)
 800290c:	f7fd fc42 	bl	8000194 <strlen>
 8002910:	4603      	mov	r3, r0
 8002912:	b29b      	uxth	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	4818      	ldr	r0, [pc, #96]	; (8002978 <Parsing_command+0x5f0>)
 8002918:	f008 fe08 	bl	800b52c <CDC_Transmit_FS>
			HAL_Delay(10);
 800291c:	200a      	movs	r0, #10
 800291e:	f000 fd0d 	bl	800333c <HAL_Delay>
			return;
 8002922:	e13d      	b.n	8002ba0 <Parsing_command+0x818>
 8002924:	f3af 8000 	nop.w
 8002928:	cccccccd 	.word	0xcccccccd
 800292c:	4023cccc 	.word	0x4023cccc
 8002930:	33333333 	.word	0x33333333
 8002934:	40243333 	.word	0x40243333
 8002938:	0800eb78 	.word	0x0800eb78
 800293c:	0800eb54 	.word	0x0800eb54
 8002940:	200006dc 	.word	0x200006dc
 8002944:	0007ffff 	.word	0x0007ffff
 8002948:	20000008 	.word	0x20000008
 800294c:	0800eb88 	.word	0x0800eb88
 8002950:	2000095c 	.word	0x2000095c
 8002954:	200002fc 	.word	0x200002fc
 8002958:	0800eb98 	.word	0x0800eb98
 800295c:	2000092c 	.word	0x2000092c
 8002960:	0800eba8 	.word	0x0800eba8
 8002964:	20000928 	.word	0x20000928
 8002968:	0800ebb8 	.word	0x0800ebb8
 800296c:	20000958 	.word	0x20000958
 8002970:	20000930 	.word	0x20000930
 8002974:	20000960 	.word	0x20000960
 8002978:	20000314 	.word	0x20000314
		}
	}


	// ==== DAC_CAL_DOWN command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_DOWN")))
 800297c:	f107 0320 	add.w	r3, r7, #32
 8002980:	498f      	ldr	r1, [pc, #572]	; (8002bc0 <Parsing_command+0x838>)
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fbfc 	bl	8000180 <strcmp>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d15c      	bne.n	8002a48 <Parsing_command+0x6c0>
	{
		atof_tmp=atof(decoded_string_2);
 800298e:	463b      	mov	r3, r7
 8002990:	4618      	mov	r0, r3
 8002992:	f009 f9bd 	bl	800bd10 <atof>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f877 	bl	8000a90 <__aeabi_d2f>
 80029a2:	4603      	mov	r3, r0
 80029a4:	647b      	str	r3, [r7, #68]	; 0x44
		if(atof_tmp>-10.1 && atof_tmp<-9.9)
 80029a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80029a8:	f7fd fd60 	bl	800046c <__aeabi_f2d>
 80029ac:	a37e      	add	r3, pc, #504	; (adr r3, 8002ba8 <Parsing_command+0x820>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fe f843 	bl	8000a3c <__aeabi_dcmpgt>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d035      	beq.n	8002a28 <Parsing_command+0x6a0>
 80029bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80029be:	f7fd fd55 	bl	800046c <__aeabi_f2d>
 80029c2:	a37b      	add	r3, pc, #492	; (adr r3, 8002bb0 <Parsing_command+0x828>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fe f81a 	bl	8000a00 <__aeabi_dcmplt>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d02a      	beq.n	8002a28 <Parsing_command+0x6a0>
		{
			cal_DAC_down_voltage=atof_tmp;
 80029d2:	4a7c      	ldr	r2, [pc, #496]	; (8002bc4 <Parsing_command+0x83c>)
 80029d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d6:	6013      	str	r3, [r2, #0]
			EEPROM_write(0x08,float_to_binary(cal_DAC_down_voltage)); // Write top voltage calibration to EEPROM in uV value
 80029d8:	4b7a      	ldr	r3, [pc, #488]	; (8002bc4 <Parsing_command+0x83c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fcac 	bl	800233a <float_to_binary>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4619      	mov	r1, r3
 80029e6:	2008      	movs	r0, #8
 80029e8:	f000 f91e 	bl	8002c28 <EEPROM_write>
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 80029ec:	4b76      	ldr	r3, [pc, #472]	; (8002bc8 <Parsing_command+0x840>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a74      	ldr	r2, [pc, #464]	; (8002bc4 <Parsing_command+0x83c>)
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe f89e 	bl	8000b38 <__aeabi_fsub>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b72      	ldr	r3, [pc, #456]	; (8002bcc <Parsing_command+0x844>)
 8002a02:	601a      	str	r2, [r3, #0]
			DDS_Init();
 8002a04:	f7ff f834 	bl	8001a70 <DDS_Init>

			HAL_Delay(10);
 8002a08:	200a      	movs	r0, #10
 8002a0a:	f000 fc97 	bl	800333c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002a0e:	4870      	ldr	r0, [pc, #448]	; (8002bd0 <Parsing_command+0x848>)
 8002a10:	f7fd fbc0 	bl	8000194 <strlen>
 8002a14:	4603      	mov	r3, r0
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	4619      	mov	r1, r3
 8002a1a:	486d      	ldr	r0, [pc, #436]	; (8002bd0 <Parsing_command+0x848>)
 8002a1c:	f008 fd86 	bl	800b52c <CDC_Transmit_FS>
			HAL_Delay(10);
 8002a20:	200a      	movs	r0, #10
 8002a22:	f000 fc8b 	bl	800333c <HAL_Delay>
			return;
 8002a26:	e0bb      	b.n	8002ba0 <Parsing_command+0x818>
		}
		else
		{
			HAL_Delay(10);
 8002a28:	200a      	movs	r0, #10
 8002a2a:	f000 fc87 	bl	800333c <HAL_Delay>
			CDC_Transmit_FS(Error2, strlen((const char *)Error2));  // SEND ERROR TO CDC!!!
 8002a2e:	4869      	ldr	r0, [pc, #420]	; (8002bd4 <Parsing_command+0x84c>)
 8002a30:	f7fd fbb0 	bl	8000194 <strlen>
 8002a34:	4603      	mov	r3, r0
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4866      	ldr	r0, [pc, #408]	; (8002bd4 <Parsing_command+0x84c>)
 8002a3c:	f008 fd76 	bl	800b52c <CDC_Transmit_FS>
			HAL_Delay(10);
 8002a40:	200a      	movs	r0, #10
 8002a42:	f000 fc7b 	bl	800333c <HAL_Delay>
			return;
 8002a46:	e0ab      	b.n	8002ba0 <Parsing_command+0x818>
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 8002a48:	f107 0320 	add.w	r3, r7, #32
 8002a4c:	4962      	ldr	r1, [pc, #392]	; (8002bd8 <Parsing_command+0x850>)
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fb96 	bl	8000180 <strcmp>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d143      	bne.n	8002ae2 <Parsing_command+0x75a>
	{
		atof_tmp=atof(decoded_string_2);
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f009 f957 	bl	800bd10 <atof>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7fe f811 	bl	8000a90 <__aeabi_d2f>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
		if(atof_tmp<0.001 || atof_tmp>1)
 8002a72:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a74:	f7fd fcfa 	bl	800046c <__aeabi_f2d>
 8002a78:	a34f      	add	r3, pc, #316	; (adr r3, 8002bb8 <Parsing_command+0x830>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	f7fd ffbf 	bl	8000a00 <__aeabi_dcmplt>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d107      	bne.n	8002a98 <Parsing_command+0x710>
 8002a88:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a8e:	f7fe fb19 	bl	80010c4 <__aeabi_fcmpgt>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00f      	beq.n	8002ab8 <Parsing_command+0x730>
		{
			HAL_Delay(10);
 8002a98:	200a      	movs	r0, #10
 8002a9a:	f000 fc4f 	bl	800333c <HAL_Delay>
			CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002a9e:	484f      	ldr	r0, [pc, #316]	; (8002bdc <Parsing_command+0x854>)
 8002aa0:	f7fd fb78 	bl	8000194 <strlen>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	484c      	ldr	r0, [pc, #304]	; (8002bdc <Parsing_command+0x854>)
 8002aac:	f008 fd3e 	bl	800b52c <CDC_Transmit_FS>
			HAL_Delay(10);
 8002ab0:	200a      	movs	r0, #10
 8002ab2:	f000 fc43 	bl	800333c <HAL_Delay>
			return;
 8002ab6:	e073      	b.n	8002ba0 <Parsing_command+0x818>
		}
		else
		{
			DAC_target_speed=atof_tmp;
 8002ab8:	4a49      	ldr	r2, [pc, #292]	; (8002be0 <Parsing_command+0x858>)
 8002aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abc:	6013      	str	r3, [r2, #0]
			DDS_Init();
 8002abe:	f7fe ffd7 	bl	8001a70 <DDS_Init>

			HAL_Delay(10);
 8002ac2:	200a      	movs	r0, #10
 8002ac4:	f000 fc3a 	bl	800333c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002ac8:	4841      	ldr	r0, [pc, #260]	; (8002bd0 <Parsing_command+0x848>)
 8002aca:	f7fd fb63 	bl	8000194 <strlen>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	483e      	ldr	r0, [pc, #248]	; (8002bd0 <Parsing_command+0x848>)
 8002ad6:	f008 fd29 	bl	800b52c <CDC_Transmit_FS>
			HAL_Delay(10);
 8002ada:	200a      	movs	r0, #10
 8002adc:	f000 fc2e 	bl	800333c <HAL_Delay>
			return;
 8002ae0:	e05e      	b.n	8002ba0 <Parsing_command+0x818>
		}
	}

	// ==== SWEEP_DIRECTION command ====
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 8002ae2:	f107 0320 	add.w	r3, r7, #32
 8002ae6:	493f      	ldr	r1, [pc, #252]	; (8002be4 <Parsing_command+0x85c>)
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fb49 	bl	8000180 <strcmp>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d145      	bne.n	8002b80 <Parsing_command+0x7f8>
	{
		if(!(strcmp(decoded_string_2,"UP"))){
 8002af4:	463b      	mov	r3, r7
 8002af6:	493c      	ldr	r1, [pc, #240]	; (8002be8 <Parsing_command+0x860>)
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fb41 	bl	8000180 <strcmp>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d112      	bne.n	8002b2a <Parsing_command+0x7a2>
			DAC_code_direction=1;
 8002b04:	4b39      	ldr	r3, [pc, #228]	; (8002bec <Parsing_command+0x864>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
			HAL_Delay(10);
 8002b0a:	200a      	movs	r0, #10
 8002b0c:	f000 fc16 	bl	800333c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002b10:	482f      	ldr	r0, [pc, #188]	; (8002bd0 <Parsing_command+0x848>)
 8002b12:	f7fd fb3f 	bl	8000194 <strlen>
 8002b16:	4603      	mov	r3, r0
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	482c      	ldr	r0, [pc, #176]	; (8002bd0 <Parsing_command+0x848>)
 8002b1e:	f008 fd05 	bl	800b52c <CDC_Transmit_FS>
			HAL_Delay(10);
 8002b22:	200a      	movs	r0, #10
 8002b24:	f000 fc0a 	bl	800333c <HAL_Delay>
			return;
 8002b28:	e03a      	b.n	8002ba0 <Parsing_command+0x818>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	4930      	ldr	r1, [pc, #192]	; (8002bf0 <Parsing_command+0x868>)
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fb26 	bl	8000180 <strcmp>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d112      	bne.n	8002b60 <Parsing_command+0x7d8>
				DAC_code_direction=0;
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <Parsing_command+0x864>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
				HAL_Delay(10);
 8002b40:	200a      	movs	r0, #10
 8002b42:	f000 fbfb 	bl	800333c <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002b46:	4822      	ldr	r0, [pc, #136]	; (8002bd0 <Parsing_command+0x848>)
 8002b48:	f7fd fb24 	bl	8000194 <strlen>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4619      	mov	r1, r3
 8002b52:	481f      	ldr	r0, [pc, #124]	; (8002bd0 <Parsing_command+0x848>)
 8002b54:	f008 fcea 	bl	800b52c <CDC_Transmit_FS>
				HAL_Delay(10);
 8002b58:	200a      	movs	r0, #10
 8002b5a:	f000 fbef 	bl	800333c <HAL_Delay>
				return;
 8002b5e:	e01f      	b.n	8002ba0 <Parsing_command+0x818>
			}
			else
			{
				HAL_Delay(10);
 8002b60:	200a      	movs	r0, #10
 8002b62:	f000 fbeb 	bl	800333c <HAL_Delay>
				CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002b66:	481d      	ldr	r0, [pc, #116]	; (8002bdc <Parsing_command+0x854>)
 8002b68:	f7fd fb14 	bl	8000194 <strlen>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4619      	mov	r1, r3
 8002b72:	481a      	ldr	r0, [pc, #104]	; (8002bdc <Parsing_command+0x854>)
 8002b74:	f008 fcda 	bl	800b52c <CDC_Transmit_FS>
				HAL_Delay(10);
 8002b78:	200a      	movs	r0, #10
 8002b7a:	f000 fbdf 	bl	800333c <HAL_Delay>
				return;
 8002b7e:	e00f      	b.n	8002ba0 <Parsing_command+0x818>
			}

		}
	}

	HAL_Delay(10);
 8002b80:	200a      	movs	r0, #10
 8002b82:	f000 fbdb 	bl	800333c <HAL_Delay>
	CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002b86:	4815      	ldr	r0, [pc, #84]	; (8002bdc <Parsing_command+0x854>)
 8002b88:	f7fd fb04 	bl	8000194 <strlen>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4619      	mov	r1, r3
 8002b92:	4812      	ldr	r0, [pc, #72]	; (8002bdc <Parsing_command+0x854>)
 8002b94:	f008 fcca 	bl	800b52c <CDC_Transmit_FS>
	HAL_Delay(10);
 8002b98:	200a      	movs	r0, #10
 8002b9a:	f000 fbcf 	bl	800333c <HAL_Delay>
	return;
 8002b9e:	bf00      	nop
}
 8002ba0:	3750      	adds	r7, #80	; 0x50
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	33333333 	.word	0x33333333
 8002bac:	c0243333 	.word	0xc0243333
 8002bb0:	cccccccd 	.word	0xcccccccd
 8002bb4:	c023cccc 	.word	0xc023cccc
 8002bb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bbc:	3f50624d 	.word	0x3f50624d
 8002bc0:	0800ebc4 	.word	0x0800ebc4
 8002bc4:	20000930 	.word	0x20000930
 8002bc8:	20000958 	.word	0x20000958
 8002bcc:	20000960 	.word	0x20000960
 8002bd0:	200002fc 	.word	0x200002fc
 8002bd4:	20000314 	.word	0x20000314
 8002bd8:	0800ebd4 	.word	0x0800ebd4
 8002bdc:	20000008 	.word	0x20000008
 8002be0:	20000984 	.word	0x20000984
 8002be4:	0800ebe0 	.word	0x0800ebe0
 8002be8:	0800ebf0 	.word	0x0800ebf0
 8002bec:	20000988 	.word	0x20000988
 8002bf0:	0800eb70 	.word	0x0800eb70

08002bf4 <EEPROM_read>:

//==============================================================================================
uint32_t EEPROM_read(uint32_t address_of_read)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	uint32_t Address;

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002c02:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002c06:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a06      	ldr	r2, [pc, #24]	; (8002c24 <EEPROM_read+0x30>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d301      	bcc.n	8002c14 <EEPROM_read+0x20>
	{
		return 0x00;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e001      	b.n	8002c18 <EEPROM_read+0x24>
	}
	return *(__IO uint32_t *) Address;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	08082800 	.word	0x08082800

08002c28 <EEPROM_write>:
//==============================================================================================
void EEPROM_write(uint32_t address_of_read, uint32_t data)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
	/* Clear all pending flags */
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR | FLASH_FLAG_OPTVERRUSR);

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
	     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002c38:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002c3c:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <EEPROM_write+0x50>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d212      	bcs.n	8002c6c <EEPROM_write+0x44>
	{
		return;
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 8002c46:	f000 fd8f 	bl	8003768 <HAL_FLASHEx_DATAEEPROM_Unlock>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	68f9      	ldr	r1, [r7, #12]
 8002c4e:	2002      	movs	r0, #2
 8002c50:	f000 fde8 	bl	8003824 <HAL_FLASHEx_DATAEEPROM_Program>
 8002c54:	4603      	mov	r3, r0
 8002c56:	72fb      	strb	r3, [r7, #11]
	HAL_FLASHEx_DATAEEPROM_Lock();
 8002c58:	f000 fda2 	bl	80037a0 <HAL_FLASHEx_DATAEEPROM_Lock>

	if(FLASHStatus != HAL_OK)
 8002c5c:	7afb      	ldrb	r3, [r7, #11]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <EEPROM_write+0x48>
	{
		return;
	}
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR);

	if(*(__IO uint32_t *) Address != data)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	e002      	b.n	8002c72 <EEPROM_write+0x4a>
		return;
 8002c6c:	bf00      	nop
 8002c6e:	e000      	b.n	8002c72 <EEPROM_write+0x4a>
		return;
 8002c70:	bf00      	nop
	{
		return;
	}

}
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	08082800 	.word	0x08082800

08002c7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c80:	b672      	cpsid	i
}
 8002c82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002c84:	e7fe      	b.n	8002c84 <Error_Handler+0x8>
	...

08002c88 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c8c:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002c8e:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <MX_SPI1_Init+0x6c>)
 8002c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002cbe:	2218      	movs	r2, #24
 8002cc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002cd6:	220a      	movs	r2, #10
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cda:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002cdc:	f003 fb82 	bl	80063e4 <HAL_SPI_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002ce6:	f7ff ffc9 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200009e4 	.word	0x200009e4
 8002cf4:	40013000 	.word	0x40013000

08002cf8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002cfe:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <MX_SPI2_Init+0x6c>)
 8002d00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d02:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d0a:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d16:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d2e:	2218      	movs	r2, #24
 8002d30:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d46:	220a      	movs	r2, #10
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d4a:	4805      	ldr	r0, [pc, #20]	; (8002d60 <MX_SPI2_Init+0x68>)
 8002d4c:	f003 fb4a 	bl	80063e4 <HAL_SPI_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002d56:	f7ff ff91 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000098c 	.word	0x2000098c
 8002d64:	40003800 	.word	0x40003800

08002d68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08c      	sub	sp, #48	; 0x30
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 031c 	add.w	r3, r7, #28
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a32      	ldr	r2, [pc, #200]	; (8002e50 <HAL_SPI_MspInit+0xe8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d130      	bne.n	8002dec <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d8a:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a31      	ldr	r2, [pc, #196]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002d90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	61d3      	str	r3, [r2, #28]
 8002dae:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002dba:	23e0      	movs	r3, #224	; 0xe0
 8002dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dca:	2305      	movs	r3, #5
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	f107 031c 	add.w	r3, r7, #28
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4820      	ldr	r0, [pc, #128]	; (8002e58 <HAL_SPI_MspInit+0xf0>)
 8002dd6:	f000 ff7f 	bl	8003cd8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2101      	movs	r1, #1
 8002dde:	2023      	movs	r0, #35	; 0x23
 8002de0:	f000 fba5 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002de4:	2023      	movs	r0, #35	; 0x23
 8002de6:	f000 fbbe 	bl	8003566 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002dea:	e02d      	b.n	8002e48 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <HAL_SPI_MspInit+0xf4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d128      	bne.n	8002e48 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e00:	6253      	str	r3, [r2, #36]	; 0x24
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4a10      	ldr	r2, [pc, #64]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	61d3      	str	r3, [r2, #28]
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <HAL_SPI_MspInit+0xec>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002e26:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e38:	2305      	movs	r3, #5
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	4619      	mov	r1, r3
 8002e42:	4807      	ldr	r0, [pc, #28]	; (8002e60 <HAL_SPI_MspInit+0xf8>)
 8002e44:	f000 ff48 	bl	8003cd8 <HAL_GPIO_Init>
}
 8002e48:	bf00      	nop
 8002e4a:	3730      	adds	r7, #48	; 0x30
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40013000 	.word	0x40013000
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	40003800 	.word	0x40003800
 8002e60:	40020400 	.word	0x40020400

08002e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002e6a:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <HAL_MspInit+0xa0>)
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <HAL_MspInit+0xa0>)
 8002e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e74:	6253      	str	r3, [r2, #36]	; 0x24
 8002e76:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <HAL_MspInit+0xa0>)
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_MspInit+0xa0>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4a1f      	ldr	r2, [pc, #124]	; (8002f04 <HAL_MspInit+0xa0>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6213      	str	r3, [r2, #32]
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_MspInit+0xa0>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_MspInit+0xa0>)
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	4a19      	ldr	r2, [pc, #100]	; (8002f04 <HAL_MspInit+0xa0>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6253      	str	r3, [r2, #36]	; 0x24
 8002ea6:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <HAL_MspInit+0xa0>)
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	f06f 000b 	mvn.w	r0, #11
 8002eba:	f000 fb38 	bl	800352e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	f06f 000a 	mvn.w	r0, #10
 8002ec6:	f000 fb32 	bl	800352e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2101      	movs	r1, #1
 8002ece:	f06f 0009 	mvn.w	r0, #9
 8002ed2:	f000 fb2c 	bl	800352e <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2101      	movs	r1, #1
 8002eda:	f06f 0004 	mvn.w	r0, #4
 8002ede:	f000 fb26 	bl	800352e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	f06f 0003 	mvn.w	r0, #3
 8002eea:	f000 fb20 	bl	800352e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	f06f 0001 	mvn.w	r0, #1
 8002ef6:	f000 fb1a 	bl	800352e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800

08002f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f0c:	e7fe      	b.n	8002f0c <NMI_Handler+0x4>

08002f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f12:	e7fe      	b.n	8002f12 <HardFault_Handler+0x4>

08002f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f18:	e7fe      	b.n	8002f18 <MemManage_Handler+0x4>

08002f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f1e:	e7fe      	b.n	8002f1e <BusFault_Handler+0x4>

08002f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <UsageFault_Handler+0x4>

08002f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f4e:	f000 f9d9 	bl	8003304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CPU_LDAC_Pin);
 8002f5a:	2004      	movs	r0, #4
 8002f5c:	f001 f86c 	bl	8004038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <USB_LP_IRQHandler+0x10>)
 8002f6a:	f001 f981 	bl	8004270 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200010b4 	.word	0x200010b4

08002f78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f7c:	4802      	ldr	r0, [pc, #8]	; (8002f88 <TIM3_IRQHandler+0x10>)
 8002f7e:	f004 f963 	bl	8007248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000a3c 	.word	0x20000a3c

08002f8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <SPI1_IRQHandler+0x10>)
 8002f92:	f003 fe93 	bl	8006cbc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200009e4 	.word	0x200009e4

08002fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
	return 1;
 8002fa4:	2301      	movs	r3, #1
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <_kill>:

int _kill(int pid, int sig)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fb8:	f008 feae 	bl	800bd18 <__errno>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2216      	movs	r2, #22
 8002fc0:	601a      	str	r2, [r3, #0]
	return -1;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <_exit>:

void _exit (int status)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ffe7 	bl	8002fae <_kill>
	while (1) {}		/* Make sure we hang here */
 8002fe0:	e7fe      	b.n	8002fe0 <_exit+0x12>

08002fe2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e00a      	b.n	800300a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ff4:	f3af 8000 	nop.w
 8002ff8:	4601      	mov	r1, r0
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	60ba      	str	r2, [r7, #8]
 8003000:	b2ca      	uxtb	r2, r1
 8003002:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3301      	adds	r3, #1
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	dbf0      	blt.n	8002ff4 <_read+0x12>
	}

return len;
 8003012:	687b      	ldr	r3, [r7, #4]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e009      	b.n	8003042 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	60ba      	str	r2, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3301      	adds	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	429a      	cmp	r2, r3
 8003048:	dbf1      	blt.n	800302e <_write+0x12>
	}
	return len;
 800304a:	687b      	ldr	r3, [r7, #4]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_close>:

int _close(int file)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	return -1;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800307a:	605a      	str	r2, [r3, #4]
	return 0;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <_isatty>:

int _isatty(int file)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	return 1;
 8003090:	2301      	movs	r3, #1
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
	return 0;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <_sbrk+0x5c>)
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <_sbrk+0x60>)
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <_sbrk+0x64>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <_sbrk+0x64>)
 80030d2:	4a12      	ldr	r2, [pc, #72]	; (800311c <_sbrk+0x68>)
 80030d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <_sbrk+0x64>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d207      	bcs.n	80030f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030e4:	f008 fe18 	bl	800bd18 <__errno>
 80030e8:	4603      	mov	r3, r0
 80030ea:	220c      	movs	r2, #12
 80030ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	e009      	b.n	8003108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <_sbrk+0x64>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <_sbrk+0x64>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	4a05      	ldr	r2, [pc, #20]	; (8003118 <_sbrk+0x64>)
 8003104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003106:	68fb      	ldr	r3, [r7, #12]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20004000 	.word	0x20004000
 8003114:	00000400 	.word	0x00000400
 8003118:	200006e4 	.word	0x200006e4
 800311c:	200013b0 	.word	0x200013b0

08003120 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003132:	f107 0308 	add.w	r3, r7, #8
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003140:	463b      	mov	r3, r7
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <MX_TIM3_Init+0x94>)
 800314a:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <MX_TIM3_Init+0x98>)
 800314c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 -1;
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <MX_TIM3_Init+0x94>)
 8003150:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8003154:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <MX_TIM3_Init+0x94>)
 8003158:	2200      	movs	r2, #0
 800315a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 -1;
 800315c:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <MX_TIM3_Init+0x94>)
 800315e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003164:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <MX_TIM3_Init+0x94>)
 8003166:	2200      	movs	r2, #0
 8003168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <MX_TIM3_Init+0x94>)
 800316c:	2200      	movs	r2, #0
 800316e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003170:	4813      	ldr	r0, [pc, #76]	; (80031c0 <MX_TIM3_Init+0x94>)
 8003172:	f003 ffd7 	bl	8007124 <HAL_TIM_Base_Init>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800317c:	f7ff fd7e 	bl	8002c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	4619      	mov	r1, r3
 800318c:	480c      	ldr	r0, [pc, #48]	; (80031c0 <MX_TIM3_Init+0x94>)
 800318e:	f004 f937 	bl	8007400 <HAL_TIM_ConfigClockSource>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003198:	f7ff fd70 	bl	8002c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800319c:	2300      	movs	r3, #0
 800319e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031a4:	463b      	mov	r3, r7
 80031a6:	4619      	mov	r1, r3
 80031a8:	4805      	ldr	r0, [pc, #20]	; (80031c0 <MX_TIM3_Init+0x94>)
 80031aa:	f004 fb09 	bl	80077c0 <HAL_TIMEx_MasterConfigSynchronization>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80031b4:	f7ff fd62 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80031b8:	bf00      	nop
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000a3c 	.word	0x20000a3c
 80031c4:	40000400 	.word	0x40000400

080031c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <HAL_TIM_Base_MspInit+0x44>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d113      	bne.n	8003202 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_TIM_Base_MspInit+0x48>)
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <HAL_TIM_Base_MspInit+0x48>)
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	6253      	str	r3, [r2, #36]	; 0x24
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_TIM_Base_MspInit+0x48>)
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031f2:	2200      	movs	r2, #0
 80031f4:	2100      	movs	r1, #0
 80031f6:	201d      	movs	r0, #29
 80031f8:	f000 f999 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031fc:	201d      	movs	r0, #29
 80031fe:	f000 f9b2 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40000400 	.word	0x40000400
 8003210:	40023800 	.word	0x40023800

08003214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003214:	480c      	ldr	r0, [pc, #48]	; (8003248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003216:	490d      	ldr	r1, [pc, #52]	; (800324c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003218:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800321a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800321c:	e002      	b.n	8003224 <LoopCopyDataInit>

0800321e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800321e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003222:	3304      	adds	r3, #4

08003224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003228:	d3f9      	bcc.n	800321e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800322c:	4c0a      	ldr	r4, [pc, #40]	; (8003258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003230:	e001      	b.n	8003236 <LoopFillZerobss>

08003232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003234:	3204      	adds	r2, #4

08003236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003238:	d3fb      	bcc.n	8003232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800323a:	f7ff ff71 	bl	8003120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800323e:	f008 fd71 	bl	800bd24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003242:	f7fe fe57 	bl	8001ef4 <main>
  bx lr
 8003246:	4770      	bx	lr
  ldr r0, =_sdata
 8003248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800324c:	200006bc 	.word	0x200006bc
  ldr r2, =_sidata
 8003250:	0800f0f0 	.word	0x0800f0f0
  ldr r2, =_sbss
 8003254:	200006bc 	.word	0x200006bc
  ldr r4, =_ebss
 8003258:	200013b0 	.word	0x200013b0

0800325c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800325c:	e7fe      	b.n	800325c <ADC1_IRQHandler>

0800325e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003268:	2003      	movs	r0, #3
 800326a:	f000 f955 	bl	8003518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800326e:	200f      	movs	r0, #15
 8003270:	f000 f80e 	bl	8003290 <HAL_InitTick>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	71fb      	strb	r3, [r7, #7]
 800327e:	e001      	b.n	8003284 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003280:	f7ff fdf0 	bl	8002e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003284:	79fb      	ldrb	r3, [r7, #7]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800329c:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <HAL_InitTick+0x68>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d022      	beq.n	80032ea <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032a4:	4b15      	ldr	r3, [pc, #84]	; (80032fc <HAL_InitTick+0x6c>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <HAL_InitTick+0x68>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f962 	bl	8003582 <HAL_SYSTICK_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10f      	bne.n	80032e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b0f      	cmp	r3, #15
 80032c8:	d809      	bhi.n	80032de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ca:	2200      	movs	r2, #0
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	f04f 30ff 	mov.w	r0, #4294967295
 80032d2:	f000 f92c 	bl	800352e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <HAL_InitTick+0x70>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	e007      	b.n	80032ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
 80032e2:	e004      	b.n	80032ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
 80032e8:	e001      	b.n	80032ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000374 	.word	0x20000374
 80032fc:	2000036c 	.word	0x2000036c
 8003300:	20000370 	.word	0x20000370

08003304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_IncTick+0x1c>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_IncTick+0x20>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4413      	add	r3, r2
 8003312:	4a03      	ldr	r2, [pc, #12]	; (8003320 <HAL_IncTick+0x1c>)
 8003314:	6013      	str	r3, [r2, #0]
}
 8003316:	bf00      	nop
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000a7c 	.word	0x20000a7c
 8003324:	20000374 	.word	0x20000374

08003328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return uwTick;
 800332c:	4b02      	ldr	r3, [pc, #8]	; (8003338 <HAL_GetTick+0x10>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	20000a7c 	.word	0x20000a7c

0800333c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003344:	f7ff fff0 	bl	8003328 <HAL_GetTick>
 8003348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d004      	beq.n	8003360 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_Delay+0x40>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4413      	add	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003360:	bf00      	nop
 8003362:	f7ff ffe1 	bl	8003328 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	429a      	cmp	r2, r3
 8003370:	d8f7      	bhi.n	8003362 <HAL_Delay+0x26>
  {
  }
}
 8003372:	bf00      	nop
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000374 	.word	0x20000374

08003380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800339c:	4013      	ands	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b2:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	60d3      	str	r3, [r2, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	f003 0307 	and.w	r3, r3, #7
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	db0b      	blt.n	800340e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f003 021f 	and.w	r2, r3, #31
 80033fc:	4906      	ldr	r1, [pc, #24]	; (8003418 <__NVIC_EnableIRQ+0x34>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2001      	movs	r0, #1
 8003406:	fa00 f202 	lsl.w	r2, r0, r2
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	e000e100 	.word	0xe000e100

0800341c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	6039      	str	r1, [r7, #0]
 8003426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342c:	2b00      	cmp	r3, #0
 800342e:	db0a      	blt.n	8003446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	490c      	ldr	r1, [pc, #48]	; (8003468 <__NVIC_SetPriority+0x4c>)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	0112      	lsls	r2, r2, #4
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	440b      	add	r3, r1
 8003440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003444:	e00a      	b.n	800345c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	4908      	ldr	r1, [pc, #32]	; (800346c <__NVIC_SetPriority+0x50>)
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	3b04      	subs	r3, #4
 8003454:	0112      	lsls	r2, r2, #4
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	440b      	add	r3, r1
 800345a:	761a      	strb	r2, [r3, #24]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000e100 	.word	0xe000e100
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	; 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f1c3 0307 	rsb	r3, r3, #7
 800348a:	2b04      	cmp	r3, #4
 800348c:	bf28      	it	cs
 800348e:	2304      	movcs	r3, #4
 8003490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3304      	adds	r3, #4
 8003496:	2b06      	cmp	r3, #6
 8003498:	d902      	bls.n	80034a0 <NVIC_EncodePriority+0x30>
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3b03      	subs	r3, #3
 800349e:	e000      	b.n	80034a2 <NVIC_EncodePriority+0x32>
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a4:	f04f 32ff 	mov.w	r2, #4294967295
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43da      	mvns	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	401a      	ands	r2, r3
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b8:	f04f 31ff 	mov.w	r1, #4294967295
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	43d9      	mvns	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	4313      	orrs	r3, r2
         );
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3724      	adds	r7, #36	; 0x24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e4:	d301      	bcc.n	80034ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00f      	b.n	800350a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <SysTick_Config+0x40>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034f2:	210f      	movs	r1, #15
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	f7ff ff90 	bl	800341c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <SysTick_Config+0x40>)
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <SysTick_Config+0x40>)
 8003504:	2207      	movs	r2, #7
 8003506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	e000e010 	.word	0xe000e010

08003518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff2d 	bl	8003380 <__NVIC_SetPriorityGrouping>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003540:	f7ff ff42 	bl	80033c8 <__NVIC_GetPriorityGrouping>
 8003544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	6978      	ldr	r0, [r7, #20]
 800354c:	f7ff ff90 	bl	8003470 <NVIC_EncodePriority>
 8003550:	4602      	mov	r2, r0
 8003552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff5f 	bl	800341c <__NVIC_SetPriority>
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff35 	bl	80033e4 <__NVIC_EnableIRQ>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ffa2 	bl	80034d4 <SysTick_Config>
 8003590:	4603      	mov	r3, r0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d005      	beq.n	80035be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2204      	movs	r2, #4
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e029      	b.n	8003612 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 020e 	bic.w	r2, r2, #14
 80035cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 021c 	and.w	r2, r3, #28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
    }
  }
  return status;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003624:	f7ff fe80 	bl	8003328 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800362a:	e010      	b.n	800364e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d00c      	beq.n	800364e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d007      	beq.n	800364a <FLASH_WaitForLastOperation+0x2e>
 800363a:	f7ff fe75 	bl	8003328 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d201      	bcs.n	800364e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e02f      	b.n	80036ae <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <FLASH_WaitForLastOperation+0x9c>)
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d0e8      	beq.n	800362c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800365a:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <FLASH_WaitForLastOperation+0x9c>)
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d102      	bne.n	800366c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <FLASH_WaitForLastOperation+0x9c>)
 8003668:	2202      	movs	r2, #2
 800366a:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800366c:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <FLASH_WaitForLastOperation+0x9c>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003678:	d014      	beq.n	80036a4 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <FLASH_WaitForLastOperation+0x9c>)
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003686:	d00d      	beq.n	80036a4 <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <FLASH_WaitForLastOperation+0x9c>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003694:	d006      	beq.n	80036a4 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <FLASH_WaitForLastOperation+0x9c>)
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800369e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a2:	d103      	bne.n	80036ac <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80036a4:	f000 f80a 	bl	80036bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023c00 	.word	0x40023c00

080036bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80036c6:	4b26      	ldr	r3, [pc, #152]	; (8003760 <FLASH_SetErrorCode+0xa4>)
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d2:	d109      	bne.n	80036e8 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80036d4:	4b23      	ldr	r3, [pc, #140]	; (8003764 <FLASH_SetErrorCode+0xa8>)
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	4a21      	ldr	r2, [pc, #132]	; (8003764 <FLASH_SetErrorCode+0xa8>)
 80036de:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <FLASH_SetErrorCode+0xa4>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f4:	d109      	bne.n	800370a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <FLASH_SetErrorCode+0xa8>)
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	4a19      	ldr	r2, [pc, #100]	; (8003764 <FLASH_SetErrorCode+0xa8>)
 8003700:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003708:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <FLASH_SetErrorCode+0xa4>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003716:	d109      	bne.n	800372c <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <FLASH_SetErrorCode+0xa8>)
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	4a10      	ldr	r2, [pc, #64]	; (8003764 <FLASH_SetErrorCode+0xa8>)
 8003722:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800372a:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <FLASH_SetErrorCode+0xa4>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003738:	d109      	bne.n	800374e <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <FLASH_SetErrorCode+0xa8>)
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f043 0308 	orr.w	r3, r3, #8
 8003742:	4a08      	ldr	r2, [pc, #32]	; (8003764 <FLASH_SetErrorCode+0xa8>)
 8003744:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800374c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800374e:	4a04      	ldr	r2, [pc, #16]	; (8003760 <FLASH_SetErrorCode+0xa4>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6193      	str	r3, [r2, #24]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00
 8003764:	20000a80 	.word	0x20000a80

08003768 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800377a:	4a07      	ldr	r2, [pc, #28]	; (8003798 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 800377c:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003780:	4a06      	ldr	r2, [pc, #24]	; (800379c <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 8003782:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
}
 800378a:	4618      	mov	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40023c00 	.word	0x40023c00
 8003798:	89abcdef 	.word	0x89abcdef
 800379c:	02030405 	.word	0x02030405

080037a0 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a04      	ldr	r2, [pc, #16]	; (80037bc <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40023c00 	.word	0x40023c00

080037c0 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037d2:	f7ff ff23 	bl	800361c <FLASH_WaitForLastOperation>
 80037d6:	4603      	mov	r3, r0
 80037d8:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d11a      	bne.n	8003816 <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d102      	bne.n	80037f2 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d102      	bne.n	80037fe <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2200      	movs	r2, #0
 80037fc:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d102      	bne.n	800380a <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800380a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800380e:	f7ff ff05 	bl	800361c <FLASH_WaitForLastOperation>
 8003812:	4603      	mov	r3, r0
 8003814:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 8003816:	7bfb      	ldrb	r3, [r7, #15]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000a80 	.word	0x20000a80

08003824 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8003836:	7c1b      	ldrb	r3, [r3, #16]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 800383c:	2302      	movs	r3, #2
 800383e:	e058      	b.n	80038f2 <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 8003840:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8003842:	2201      	movs	r2, #1
 8003844:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003846:	f24c 3050 	movw	r0, #50000	; 0xc350
 800384a:	f7ff fee7 	bl	800361c <FLASH_WaitForLastOperation>
 800384e:	4603      	mov	r3, r0
 8003850:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003852:	7dfb      	ldrb	r3, [r7, #23]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d148      	bne.n	80038ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003858:	4b28      	ldr	r3, [pc, #160]	; (80038fc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800385a:	2200      	movs	r2, #0
 800385c:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d106      	bne.n	8003872 <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	68b8      	ldr	r0, [r7, #8]
 8003868:	f000 fa18 	bl	8003c9c <FLASH_DATAEEPROM_ProgramWord>
 800386c:	4603      	mov	r3, r0
 800386e:	75fb      	strb	r3, [r7, #23]
 8003870:	e03b      	b.n	80038ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d108      	bne.n	800388a <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	b29b      	uxth	r3, r3
 800387c:	4619      	mov	r1, r3
 800387e:	68b8      	ldr	r0, [r7, #8]
 8003880:	f000 f99c 	bl	8003bbc <FLASH_DATAEEPROM_ProgramHalfWord>
 8003884:	4603      	mov	r3, r0
 8003886:	75fb      	strb	r3, [r7, #23]
 8003888:	e02f      	b.n	80038ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d108      	bne.n	80038a2 <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	4619      	mov	r1, r3
 8003896:	68b8      	ldr	r0, [r7, #8]
 8003898:	f000 f934 	bl	8003b04 <FLASH_DATAEEPROM_ProgramByte>
 800389c:	4603      	mov	r3, r0
 800389e:	75fb      	strb	r3, [r7, #23]
 80038a0:	e023      	b.n	80038ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d108      	bne.n	80038ba <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	4619      	mov	r1, r3
 80038ae:	68b8      	ldr	r0, [r7, #8]
 80038b0:	f000 f826 	bl	8003900 <FLASH_DATAEEPROM_FastProgramByte>
 80038b4:	4603      	mov	r3, r0
 80038b6:	75fb      	strb	r3, [r7, #23]
 80038b8:	e017      	b.n	80038ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d108      	bne.n	80038d2 <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4619      	mov	r1, r3
 80038c6:	68b8      	ldr	r0, [r7, #8]
 80038c8:	f000 f87e 	bl	80039c8 <FLASH_DATAEEPROM_FastProgramHalfWord>
 80038cc:	4603      	mov	r3, r0
 80038ce:	75fb      	strb	r3, [r7, #23]
 80038d0:	e00b      	b.n	80038ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d106      	bne.n	80038e6 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	68b8      	ldr	r0, [r7, #8]
 80038dc:	f000 f8ec 	bl	8003ab8 <FLASH_DATAEEPROM_FastProgramWord>
 80038e0:	4603      	mov	r3, r0
 80038e2:	75fb      	strb	r3, [r7, #23]
 80038e4:	e001      	b.n	80038ea <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80038ea:	4b04      	ldr	r3, [pc, #16]	; (80038fc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	741a      	strb	r2, [r3, #16]

  return status;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000a80 	.word	0x20000a80

08003900 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003918:	f24c 3050 	movw	r0, #50000	; 0xc350
 800391c:	f7ff fe7e 	bl	800361c <FLASH_WaitForLastOperation>
 8003920:	4603      	mov	r3, r0
 8003922:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d145      	bne.n	80039b6 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800392a:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4a24      	ldr	r2, [pc, #144]	; (80039c0 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8003930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003934:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003942:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003946:	f7ff fe69 	bl	800361c <FLASH_WaitForLastOperation>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]
 800394e:	e032      	b.n	80039b6 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	43db      	mvns	r3, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f023 0303 	bic.w	r3, r3, #3
 800397e:	4619      	mov	r1, r3
 8003980:	2002      	movs	r0, #2
 8003982:	f7ff ff1d 	bl	80037c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 8003986:	4603      	mov	r3, r0
 8003988:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800398a:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 800398c:	2200      	movs	r2, #0
 800398e:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4619      	mov	r1, r3
 800399a:	2010      	movs	r0, #16
 800399c:	f7ff ff42 	bl	8003824 <HAL_FLASHEx_DATAEEPROM_Program>
 80039a0:	4603      	mov	r3, r0
 80039a2:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80039a6:	7c1b      	ldrb	r3, [r3, #16]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e003      	b.n	80039b8 <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40023c00 	.word	0x40023c00
 80039c4:	20000a80 	.word	0x20000a80

080039c8 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039e4:	f7ff fe1a 	bl	800361c <FLASH_WaitForLastOperation>
 80039e8:	4603      	mov	r3, r0
 80039ea:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d158      	bne.n	8003aa4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80039f2:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4a2e      	ldr	r2, [pc, #184]	; (8003ab0 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 80039f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039fc:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 80039fe:	887b      	ldrh	r3, [r7, #2]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d009      	beq.n	8003a18 <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	887a      	ldrh	r2, [r7, #2]
 8003a08:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a0e:	f7ff fe05 	bl	800361c <FLASH_WaitForLastOperation>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]
 8003a16:	e045      	b.n	8003aa4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003a18:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d028      	beq.n	8003a7a <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f023 0303 	bic.w	r3, r3, #3
 8003a58:	4619      	mov	r1, r3
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	f7ff feb0 	bl	80037c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 8003a60:	4603      	mov	r3, r0
 8003a62:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	2010      	movs	r0, #16
 8003a70:	f7ff fed8 	bl	8003824 <HAL_FLASHEx_DATAEEPROM_Program>
 8003a74:	4603      	mov	r3, r0
 8003a76:	75fb      	strb	r3, [r7, #23]
 8003a78:	e00b      	b.n	8003a92 <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	2004      	movs	r0, #4
 8003a80:	f7ff fed0 	bl	8003824 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3301      	adds	r3, #1
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	2004      	movs	r0, #4
 8003a8e:	f7ff fec9 	bl	8003824 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8003a94:	7c1b      	ldrb	r3, [r3, #16]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e003      	b.n	8003aa6 <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023c00 	.word	0x40023c00
 8003ab4:	20000a80 	.word	0x20000a80

08003ab8 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003ac6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003aca:	f7ff fda7 	bl	800361c <FLASH_WaitForLastOperation>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10e      	bne.n	8003af6 <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8003ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ae2:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003aea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003aee:	f7ff fd95 	bl	800361c <FLASH_WaitForLastOperation>
 8003af2:	4603      	mov	r3, r0
 8003af4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023c00 	.word	0x40023c00

08003b04 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b20:	f7ff fd7c 	bl	800361c <FLASH_WaitForLastOperation>
 8003b24:	4603      	mov	r3, r0
 8003b26:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d13f      	bne.n	8003bae <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b3e:	f7ff fd6d 	bl	800361c <FLASH_WaitForLastOperation>
 8003b42:	4603      	mov	r3, r0
 8003b44:	75fb      	strb	r3, [r7, #23]
 8003b46:	e032      	b.n	8003bae <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	22ff      	movs	r2, #255	; 0xff
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f023 0303 	bic.w	r3, r3, #3
 8003b76:	4619      	mov	r1, r3
 8003b78:	2002      	movs	r0, #2
 8003b7a:	f7ff fe21 	bl	80037c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f023 0303 	bic.w	r3, r3, #3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4619      	mov	r1, r3
 8003b92:	2010      	movs	r0, #16
 8003b94:	f7ff fe46 	bl	8003824 <HAL_FLASHEx_DATAEEPROM_Program>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8003b9e:	7c1b      	ldrb	r3, [r3, #16]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <FLASH_DATAEEPROM_ProgramByte+0xa4>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e003      	b.n	8003bb0 <FLASH_DATAEEPROM_ProgramByte+0xac>
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000a80 	.word	0x20000a80

08003bbc <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bd8:	f7ff fd20 	bl	800361c <FLASH_WaitForLastOperation>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d152      	bne.n	8003c8c <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	887a      	ldrh	r2, [r7, #2]
 8003bf0:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bf2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bf6:	f7ff fd11 	bl	800361c <FLASH_WaitForLastOperation>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	75fb      	strb	r3, [r7, #23]
 8003bfe:	e045      	b.n	8003c8c <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d028      	beq.n	8003c62 <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f023 0303 	bic.w	r3, r3, #3
 8003c16:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f023 0303 	bic.w	r3, r3, #3
 8003c40:	4619      	mov	r1, r3
 8003c42:	2002      	movs	r0, #2
 8003c44:	f7ff fdbc 	bl	80037c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f023 0303 	bic.w	r3, r3, #3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4619      	mov	r1, r3
 8003c56:	2010      	movs	r0, #16
 8003c58:	f7ff fde4 	bl	8003824 <HAL_FLASHEx_DATAEEPROM_Program>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	75fb      	strb	r3, [r7, #23]
 8003c60:	e00b      	b.n	8003c7a <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 8003c62:	2200      	movs	r2, #0
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	2004      	movs	r0, #4
 8003c68:	f7ff fddc 	bl	8003824 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	2200      	movs	r2, #0
 8003c72:	4619      	mov	r1, r3
 8003c74:	2004      	movs	r0, #4
 8003c76:	f7ff fdd5 	bl	8003824 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8003c7a:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8003c7c:	7c1b      	ldrb	r3, [r3, #16]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e003      	b.n	8003c8e <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 8003c86:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000a80 	.word	0x20000a80

08003c9c <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003caa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cae:	f7ff fcb5 	bl	800361c <FLASH_WaitForLastOperation>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d108      	bne.n	8003cce <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003cc2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cc6:	f7ff fca9 	bl	800361c <FLASH_WaitForLastOperation>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003cee:	e154      	b.n	8003f9a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8146 	beq.w	8003f94 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d005      	beq.n	8003d20 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d130      	bne.n	8003d82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003d56:	2201      	movs	r2, #1
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	f003 0201 	and.w	r2, r3, #1
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d017      	beq.n	8003dbe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	2203      	movs	r2, #3
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4013      	ands	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d123      	bne.n	8003e12 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	08da      	lsrs	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3208      	adds	r2, #8
 8003dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	220f      	movs	r2, #15
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	08da      	lsrs	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3208      	adds	r2, #8
 8003e0c:	6939      	ldr	r1, [r7, #16]
 8003e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 0203 	and.w	r2, r3, #3
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80a0 	beq.w	8003f94 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e54:	4b58      	ldr	r3, [pc, #352]	; (8003fb8 <HAL_GPIO_Init+0x2e0>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	4a57      	ldr	r2, [pc, #348]	; (8003fb8 <HAL_GPIO_Init+0x2e0>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6213      	str	r3, [r2, #32]
 8003e60:	4b55      	ldr	r3, [pc, #340]	; (8003fb8 <HAL_GPIO_Init+0x2e0>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e6c:	4a53      	ldr	r2, [pc, #332]	; (8003fbc <HAL_GPIO_Init+0x2e4>)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	3302      	adds	r3, #2
 8003e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	220f      	movs	r2, #15
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a4b      	ldr	r2, [pc, #300]	; (8003fc0 <HAL_GPIO_Init+0x2e8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d019      	beq.n	8003ecc <HAL_GPIO_Init+0x1f4>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a4a      	ldr	r2, [pc, #296]	; (8003fc4 <HAL_GPIO_Init+0x2ec>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <HAL_GPIO_Init+0x1f0>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a49      	ldr	r2, [pc, #292]	; (8003fc8 <HAL_GPIO_Init+0x2f0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00d      	beq.n	8003ec4 <HAL_GPIO_Init+0x1ec>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a48      	ldr	r2, [pc, #288]	; (8003fcc <HAL_GPIO_Init+0x2f4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d007      	beq.n	8003ec0 <HAL_GPIO_Init+0x1e8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a47      	ldr	r2, [pc, #284]	; (8003fd0 <HAL_GPIO_Init+0x2f8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_GPIO_Init+0x1e4>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	e008      	b.n	8003ece <HAL_GPIO_Init+0x1f6>
 8003ebc:	2305      	movs	r3, #5
 8003ebe:	e006      	b.n	8003ece <HAL_GPIO_Init+0x1f6>
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e004      	b.n	8003ece <HAL_GPIO_Init+0x1f6>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e002      	b.n	8003ece <HAL_GPIO_Init+0x1f6>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_GPIO_Init+0x1f6>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	f002 0203 	and.w	r2, r2, #3
 8003ed4:	0092      	lsls	r2, r2, #2
 8003ed6:	4093      	lsls	r3, r2
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ede:	4937      	ldr	r1, [pc, #220]	; (8003fbc <HAL_GPIO_Init+0x2e4>)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <HAL_GPIO_Init+0x2fc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f10:	4a30      	ldr	r2, [pc, #192]	; (8003fd4 <HAL_GPIO_Init+0x2fc>)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f16:	4b2f      	ldr	r3, [pc, #188]	; (8003fd4 <HAL_GPIO_Init+0x2fc>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4013      	ands	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f3a:	4a26      	ldr	r2, [pc, #152]	; (8003fd4 <HAL_GPIO_Init+0x2fc>)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f40:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <HAL_GPIO_Init+0x2fc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f64:	4a1b      	ldr	r2, [pc, #108]	; (8003fd4 <HAL_GPIO_Init+0x2fc>)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <HAL_GPIO_Init+0x2fc>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f8e:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <HAL_GPIO_Init+0x2fc>)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	3301      	adds	r3, #1
 8003f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f47f aea3 	bne.w	8003cf0 <HAL_GPIO_Init+0x18>
  }
}
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	40020400 	.word	0x40020400
 8003fc8:	40020800 	.word	0x40020800
 8003fcc:	40020c00 	.word	0x40020c00
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40010400 	.word	0x40010400

08003fd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	887b      	ldrh	r3, [r7, #2]
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
 8003ff4:	e001      	b.n	8003ffa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	807b      	strh	r3, [r7, #2]
 8004012:	4613      	mov	r3, r2
 8004014:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004016:	787b      	ldrb	r3, [r7, #1]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800401c:	887a      	ldrh	r2, [r7, #2]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004022:	e003      	b.n	800402c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004024:	887b      	ldrh	r3, [r7, #2]
 8004026:	041a      	lsls	r2, r3, #16
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	619a      	str	r2, [r3, #24]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
	...

08004038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800404e:	4a05      	ldr	r2, [pc, #20]	; (8004064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe f89e 	bl	8002198 <HAL_GPIO_EXTI_Callback>
  }
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40010400 	.word	0x40010400

08004068 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406a:	b08b      	sub	sp, #44	; 0x2c
 800406c:	af06      	add	r7, sp, #24
 800406e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0d0      	b.n	800421c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f007 fb9e 	bl	800b7d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2203      	movs	r2, #3
 8004098:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f003 fc01 	bl	80078a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
 80040aa:	e04c      	b.n	8004146 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	440b      	add	r3, r1
 80040bc:	3301      	adds	r3, #1
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	440b      	add	r3, r1
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040d6:	7bfa      	ldrb	r2, [r7, #15]
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	b298      	uxth	r0, r3
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	440b      	add	r3, r1
 80040e8:	3336      	adds	r3, #54	; 0x36
 80040ea:	4602      	mov	r2, r0
 80040ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	440b      	add	r3, r1
 80040fe:	3303      	adds	r3, #3
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	440b      	add	r3, r1
 8004112:	3338      	adds	r3, #56	; 0x38
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004118:	7bfa      	ldrb	r2, [r7, #15]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	440b      	add	r3, r1
 8004126:	333c      	adds	r3, #60	; 0x3c
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	440b      	add	r3, r1
 800413a:	3340      	adds	r3, #64	; 0x40
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	3301      	adds	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
 8004146:	7bfa      	ldrb	r2, [r7, #15]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	429a      	cmp	r2, r3
 800414e:	d3ad      	bcc.n	80040ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]
 8004154:	e044      	b.n	80041e0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004156:	7bfa      	ldrb	r2, [r7, #15]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	440b      	add	r3, r1
 8004164:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	440b      	add	r3, r1
 800417a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800417e:	7bfa      	ldrb	r2, [r7, #15]
 8004180:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004182:	7bfa      	ldrb	r2, [r7, #15]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	440b      	add	r3, r1
 8004190:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	440b      	add	r3, r1
 80041a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041ae:	7bfa      	ldrb	r2, [r7, #15]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041c4:	7bfa      	ldrb	r2, [r7, #15]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	440b      	add	r3, r1
 80041d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	3301      	adds	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d3b5      	bcc.n	8004156 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	687e      	ldr	r6, [r7, #4]
 80041f2:	466d      	mov	r5, sp
 80041f4:	f106 0410 	add.w	r4, r6, #16
 80041f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	1d33      	adds	r3, r6, #4
 8004202:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004204:	6838      	ldr	r0, [r7, #0]
 8004206:	f003 fb69 	bl	80078dc <USB_DevInit>

  hpcd->USB_Address = 0U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004224 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_PCD_Start+0x16>
 8004236:	2302      	movs	r3, #2
 8004238:	e016      	b.n	8004268 <HAL_PCD_Start+0x44>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f003 fb18 	bl	800787c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800424c:	2101      	movs	r1, #1
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f007 faa0 	bl	800b794 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f005 fcbc 	bl	8009bd6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f005 fcb4 	bl	8009bea <USB_ReadInterrupts>
 8004282:	4603      	mov	r3, r0
 8004284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428c:	d102      	bne.n	8004294 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 faf5 	bl	800487e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f005 fca6 	bl	8009bea <USB_ReadInterrupts>
 800429e:	4603      	mov	r3, r0
 80042a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a8:	d112      	bne.n	80042d0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042bc:	b292      	uxth	r2, r2
 80042be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f007 faff 	bl	800b8c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80042c8:	2100      	movs	r1, #0
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f8c7 	bl	800445e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f005 fc88 	bl	8009bea <USB_ReadInterrupts>
 80042da:	4603      	mov	r3, r0
 80042dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e4:	d10b      	bne.n	80042fe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042f8:	b292      	uxth	r2, r2
 80042fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f005 fc71 	bl	8009bea <USB_ReadInterrupts>
 8004308:	4603      	mov	r3, r0
 800430a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800430e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004312:	d10b      	bne.n	800432c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800431c:	b29a      	uxth	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004326:	b292      	uxth	r2, r2
 8004328:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f005 fc5a 	bl	8009bea <USB_ReadInterrupts>
 8004336:	4603      	mov	r3, r0
 8004338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800433c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004340:	d126      	bne.n	8004390 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800434a:	b29a      	uxth	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0204 	bic.w	r2, r2, #4
 8004354:	b292      	uxth	r2, r2
 8004356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004362:	b29a      	uxth	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0208 	bic.w	r2, r2, #8
 800436c:	b292      	uxth	r2, r2
 800436e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f007 fae0 	bl	800b938 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800438a:	b292      	uxth	r2, r2
 800438c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f005 fc28 	bl	8009bea <USB_ReadInterrupts>
 800439a:	4603      	mov	r3, r0
 800439c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a4:	d126      	bne.n	80043f4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0208 	orr.w	r2, r2, #8
 80043b8:	b292      	uxth	r2, r2
 80043ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d0:	b292      	uxth	r2, r2
 80043d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0204 	orr.w	r2, r2, #4
 80043e8:	b292      	uxth	r2, r2
 80043ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f007 fa88 	bl	800b904 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f005 fbf6 	bl	8009bea <USB_ReadInterrupts>
 80043fe:	4603      	mov	r3, r0
 8004400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004408:	d10e      	bne.n	8004428 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004412:	b29a      	uxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800441c:	b292      	uxth	r2, r2
 800441e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f007 fa41 	bl	800b8aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f005 fbdc 	bl	8009bea <USB_ReadInterrupts>
 8004432:	4603      	mov	r3, r0
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443c:	d10b      	bne.n	8004456 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004450:	b292      	uxth	r2, r2
 8004452:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	460b      	mov	r3, r1
 8004468:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_PCD_SetAddress+0x1a>
 8004474:	2302      	movs	r3, #2
 8004476:	e013      	b.n	80044a0 <HAL_PCD_SetAddress+0x42>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f005 fb8d 	bl	8009bb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	4608      	mov	r0, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	461a      	mov	r2, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	70fb      	strb	r3, [r7, #3]
 80044ba:	460b      	mov	r3, r1
 80044bc:	803b      	strh	r3, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	da0e      	bge.n	80044ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	705a      	strb	r2, [r3, #1]
 80044ea:	e00e      	b.n	800450a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	f003 0207 	and.w	r2, r3, #7
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	b2da      	uxtb	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004516:	883a      	ldrh	r2, [r7, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	78ba      	ldrb	r2, [r7, #2]
 8004520:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d004      	beq.n	8004534 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004534:	78bb      	ldrb	r3, [r7, #2]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d102      	bne.n	8004540 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_PCD_EP_Open+0xa6>
 800454a:	2302      	movs	r3, #2
 800454c:	e00e      	b.n	800456c <HAL_PCD_EP_Open+0xc4>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68f9      	ldr	r1, [r7, #12]
 800455c:	4618      	mov	r0, r3
 800455e:	f003 f9dd 	bl	800791c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800456a:	7afb      	ldrb	r3, [r7, #11]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004584:	2b00      	cmp	r3, #0
 8004586:	da0e      	bge.n	80045a6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	4413      	add	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	705a      	strb	r2, [r3, #1]
 80045a4:	e00e      	b.n	80045c4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	f003 0207 	and.w	r2, r3, #7
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	4413      	add	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_PCD_EP_Close+0x6a>
 80045da:	2302      	movs	r3, #2
 80045dc:	e00e      	b.n	80045fc <HAL_PCD_EP_Close+0x88>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f003 fcff 	bl	8007ff0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	460b      	mov	r3, r1
 8004612:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004614:	7afb      	ldrb	r3, [r7, #11]
 8004616:	f003 0207 	and.w	r2, r3, #7
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2200      	movs	r2, #0
 800463c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2200      	movs	r2, #0
 8004642:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004644:	7afb      	ldrb	r3, [r7, #11]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	b2da      	uxtb	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004650:	7afb      	ldrb	r3, [r7, #11]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6979      	ldr	r1, [r7, #20]
 8004660:	4618      	mov	r0, r3
 8004662:	f003 feb1 	bl	80083c8 <USB_EPStartXfer>
 8004666:	e005      	b.n	8004674 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6979      	ldr	r1, [r7, #20]
 800466e:	4618      	mov	r0, r3
 8004670:	f003 feaa 	bl	80083c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	f003 0207 	and.w	r2, r3, #7
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	440b      	add	r3, r1
 800469c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80046a0:	681b      	ldr	r3, [r3, #0]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	460b      	mov	r3, r1
 80046ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046bc:	7afb      	ldrb	r3, [r7, #11]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2201      	movs	r2, #1
 80046f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046f8:	7afb      	ldrb	r3, [r7, #11]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004704:	7afb      	ldrb	r3, [r7, #11]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6979      	ldr	r1, [r7, #20]
 8004714:	4618      	mov	r0, r3
 8004716:	f003 fe57 	bl	80083c8 <USB_EPStartXfer>
 800471a:	e005      	b.n	8004728 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6979      	ldr	r1, [r7, #20]
 8004722:	4618      	mov	r0, r3
 8004724:	f003 fe50 	bl	80083c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	f003 0207 	and.w	r2, r3, #7
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	429a      	cmp	r2, r3
 800474a:	d901      	bls.n	8004750 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e03e      	b.n	80047ce <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004754:	2b00      	cmp	r3, #0
 8004756:	da0e      	bge.n	8004776 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	4413      	add	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	705a      	strb	r2, [r3, #1]
 8004774:	e00c      	b.n	8004790 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	4413      	add	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004796:	78fb      	ldrb	r3, [r7, #3]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_PCD_EP_SetStall+0x7e>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e00e      	b.n	80047ce <HAL_PCD_EP_SetStall+0x9c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68f9      	ldr	r1, [r7, #12]
 80047be:	4618      	mov	r0, r3
 80047c0:	f005 f8f9 	bl	80099b6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	f003 020f 	and.w	r2, r3, #15
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d901      	bls.n	80047f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e040      	b.n	8004876 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	da0e      	bge.n	800481a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4413      	add	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	705a      	strb	r2, [r3, #1]
 8004818:	e00e      	b.n	8004838 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	f003 0207 	and.w	r2, r3, #7
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4413      	add	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	b2da      	uxtb	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_PCD_EP_ClrStall+0x82>
 8004854:	2302      	movs	r3, #2
 8004856:	e00e      	b.n	8004876 <HAL_PCD_EP_ClrStall+0xa0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68f9      	ldr	r1, [r7, #12]
 8004866:	4618      	mov	r0, r3
 8004868:	f005 f8f5 	bl	8009a56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b08e      	sub	sp, #56	; 0x38
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004886:	e2ec      	b.n	8004e62 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004890:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004892:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800489e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f040 8161 	bne.w	8004b6a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80048a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d152      	bne.n	8004958 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	81fb      	strh	r3, [r7, #14]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	89fb      	ldrh	r3, [r7, #14]
 80048ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3328      	adds	r3, #40	; 0x28
 80048da:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4413      	add	r3, r2
 80048f0:	3302      	adds	r3, #2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	441a      	add	r2, r3
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004916:	2100      	movs	r1, #0
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f006 ffac 	bl	800b876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 829b 	beq.w	8004e62 <PCD_EP_ISR_Handler+0x5e4>
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 8296 	bne.w	8004e62 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004942:	b2da      	uxtb	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	b292      	uxth	r2, r2
 800494a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004956:	e284      	b.n	8004e62 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004968:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800496a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800496e:	2b00      	cmp	r3, #0
 8004970:	d034      	beq.n	80049dc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800497a:	b29b      	uxth	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4413      	add	r3, r2
 8004986:	3306      	adds	r3, #6
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f005 f96e 	bl	8009c92 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29a      	uxth	r2, r3
 80049be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80049c2:	4013      	ands	r3, r2
 80049c4:	823b      	strh	r3, [r7, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	8a3a      	ldrh	r2, [r7, #16]
 80049cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049d0:	b292      	uxth	r2, r2
 80049d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f006 ff21 	bl	800b81c <HAL_PCD_SetupStageCallback>
 80049da:	e242      	b.n	8004e62 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80049dc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f280 823e 	bge.w	8004e62 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80049f2:	4013      	ands	r3, r2
 80049f4:	83bb      	strh	r3, [r7, #28]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	8bba      	ldrh	r2, [r7, #28]
 80049fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a00:	b292      	uxth	r2, r2
 8004a02:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	3306      	adds	r3, #6
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d019      	beq.n	8004a6c <PCD_EP_ISR_Handler+0x1ee>
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d015      	beq.n	8004a6c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	6959      	ldr	r1, [r3, #20]
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f005 f91e 	bl	8009c92 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	441a      	add	r2, r3
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004a64:	2100      	movs	r1, #0
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f006 feea 	bl	800b840 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f040 81f2 	bne.w	8004e62 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	4413      	add	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d112      	bne.n	8004acc <PCD_EP_ISR_Handler+0x24e>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	801a      	strh	r2, [r3, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	801a      	strh	r2, [r3, #0]
 8004aca:	e02f      	b.n	8004b2c <PCD_EP_ISR_Handler+0x2ae>
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ad2:	d813      	bhi.n	8004afc <PCD_EP_ISR_Handler+0x27e>
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	085b      	lsrs	r3, r3, #1
 8004ada:	633b      	str	r3, [r7, #48]	; 0x30
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <PCD_EP_ISR_Handler+0x270>
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	3301      	adds	r3, #1
 8004aec:	633b      	str	r3, [r7, #48]	; 0x30
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	029b      	lsls	r3, r3, #10
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	801a      	strh	r2, [r3, #0]
 8004afa:	e017      	b.n	8004b2c <PCD_EP_ISR_Handler+0x2ae>
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	633b      	str	r3, [r7, #48]	; 0x30
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <PCD_EP_ISR_Handler+0x298>
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	3b01      	subs	r3, #1
 8004b14:	633b      	str	r3, [r7, #48]	; 0x30
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	029b      	lsls	r3, r3, #10
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3c:	827b      	strh	r3, [r7, #18]
 8004b3e:	8a7b      	ldrh	r3, [r7, #18]
 8004b40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b44:	827b      	strh	r3, [r7, #18]
 8004b46:	8a7b      	ldrh	r3, [r7, #18]
 8004b48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b4c:	827b      	strh	r3, [r7, #18]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	8a7b      	ldrh	r3, [r7, #18]
 8004b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	8013      	strh	r3, [r2, #0]
 8004b68:	e17b      	b.n	8004e62 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b7c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f280 80ea 	bge.w	8004d5a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004bb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bb4:	b292      	uxth	r2, r2
 8004bb6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004bb8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	7b1b      	ldrb	r3, [r3, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d122      	bne.n	8004c1c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4413      	add	r3, r2
 8004bea:	3306      	adds	r3, #6
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bfe:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004c00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8087 	beq.w	8004d16 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	6959      	ldr	r1, [r3, #20]
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	88da      	ldrh	r2, [r3, #6]
 8004c14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c16:	f005 f83c 	bl	8009c92 <USB_ReadPMA>
 8004c1a:	e07c      	b.n	8004d16 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	78db      	ldrb	r3, [r3, #3]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d108      	bne.n	8004c36 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004c24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c26:	461a      	mov	r2, r3
 8004c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f927 	bl	8004e7e <HAL_PCD_EP_DB_Receive>
 8004c30:	4603      	mov	r3, r0
 8004c32:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c34:	e06f      	b.n	8004d16 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c50:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d021      	beq.n	8004cd4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cb8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004cba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d02a      	beq.n	8004d16 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	6959      	ldr	r1, [r3, #20]
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	891a      	ldrh	r2, [r3, #8]
 8004ccc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cce:	f004 ffe0 	bl	8009c92 <USB_ReadPMA>
 8004cd2:	e020      	b.n	8004d16 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3306      	adds	r3, #6
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cfc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004cfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	6959      	ldr	r1, [r3, #20]
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	895a      	ldrh	r2, [r3, #10]
 8004d10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d12:	f004 ffbe 	bl	8009c92 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	69da      	ldr	r2, [r3, #28]
 8004d1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d1c:	441a      	add	r2, r3
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d28:	441a      	add	r2, r3
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d004      	beq.n	8004d40 <PCD_EP_ISR_Handler+0x4c2>
 8004d36:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d206      	bcs.n	8004d4e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f006 fd7a 	bl	800b840 <HAL_PCD_DataOutStageCallback>
 8004d4c:	e005      	b.n	8004d5a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d54:	4618      	mov	r0, r3
 8004d56:	f003 fb37 	bl	80083c8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004d5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d07e      	beq.n	8004e62 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004d64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	4413      	add	r3, r2
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	843b      	strh	r3, [r7, #32]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	441a      	add	r2, r3
 8004da2:	8c3b      	ldrh	r3, [r7, #32]
 8004da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	78db      	ldrb	r3, [r3, #3]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d00c      	beq.n	8004dd2 <PCD_EP_ISR_Handler+0x554>
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	78db      	ldrb	r3, [r3, #3]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d146      	bne.n	8004e56 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004dc8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d141      	bne.n	8004e56 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4413      	add	r3, r2
 8004de6:	3302      	adds	r3, #2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dfa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	699a      	ldr	r2, [r3, #24]
 8004e00:	8bfb      	ldrh	r3, [r7, #30]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d906      	bls.n	8004e14 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	8bfb      	ldrh	r3, [r7, #30]
 8004e0c:	1ad2      	subs	r2, r2, r3
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	619a      	str	r2, [r3, #24]
 8004e12:	e002      	b.n	8004e1a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	2200      	movs	r2, #0
 8004e18:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f006 fd24 	bl	800b876 <HAL_PCD_DataInStageCallback>
 8004e2e:	e018      	b.n	8004e62 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	8bfb      	ldrh	r3, [r7, #30]
 8004e36:	441a      	add	r2, r3
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	8bfb      	ldrh	r3, [r7, #30]
 8004e42:	441a      	add	r2, r3
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f003 faba 	bl	80083c8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004e54:	e005      	b.n	8004e62 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e58:	461a      	mov	r2, r3
 8004e5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f91b 	bl	8005098 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	b21b      	sxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f6ff ad0a 	blt.w	8004888 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3738      	adds	r7, #56	; 0x38
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b088      	sub	sp, #32
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d07e      	beq.n	8004f94 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3302      	adds	r3, #2
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ebe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	8b7b      	ldrh	r3, [r7, #26]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d306      	bcc.n	8004ed8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	8b7b      	ldrh	r3, [r7, #26]
 8004ed0:	1ad2      	subs	r2, r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	619a      	str	r2, [r3, #24]
 8004ed6:	e002      	b.n	8004ede <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2200      	movs	r2, #0
 8004edc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d123      	bne.n	8004f2e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f00:	833b      	strh	r3, [r7, #24]
 8004f02:	8b3b      	ldrh	r3, [r7, #24]
 8004f04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f08:	833b      	strh	r3, [r7, #24]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	441a      	add	r2, r3
 8004f18:	8b3b      	ldrh	r3, [r7, #24]
 8004f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01f      	beq.n	8004f78 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	82fb      	strh	r3, [r7, #22]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	8afb      	ldrh	r3, [r7, #22]
 8004f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f78:	8b7b      	ldrh	r3, [r7, #26]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8087 	beq.w	800508e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6959      	ldr	r1, [r3, #20]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	891a      	ldrh	r2, [r3, #8]
 8004f8c:	8b7b      	ldrh	r3, [r7, #26]
 8004f8e:	f004 fe80 	bl	8009c92 <USB_ReadPMA>
 8004f92:	e07c      	b.n	800508e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3306      	adds	r3, #6
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fbc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	8b7b      	ldrh	r3, [r7, #26]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d306      	bcc.n	8004fd6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	8b7b      	ldrh	r3, [r7, #26]
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	619a      	str	r2, [r3, #24]
 8004fd4:	e002      	b.n	8004fdc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d123      	bne.n	800502c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	83fb      	strh	r3, [r7, #30]
 8005000:	8bfb      	ldrh	r3, [r7, #30]
 8005002:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005006:	83fb      	strh	r3, [r7, #30]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	8bfb      	ldrh	r3, [r7, #30]
 8005018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800502c:	88fb      	ldrh	r3, [r7, #6]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d11f      	bne.n	8005076 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	83bb      	strh	r3, [r7, #28]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	441a      	add	r2, r3
 8005060:	8bbb      	ldrh	r3, [r7, #28]
 8005062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005072:	b29b      	uxth	r3, r3
 8005074:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005076:	8b7b      	ldrh	r3, [r7, #26]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6959      	ldr	r1, [r3, #20]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	895a      	ldrh	r2, [r3, #10]
 8005088:	8b7b      	ldrh	r3, [r7, #26]
 800508a:	f004 fe02 	bl	8009c92 <USB_ReadPMA>
    }
  }

  return count;
 800508e:	8b7b      	ldrh	r3, [r7, #26]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b0a2      	sub	sp, #136	; 0x88
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 81c7 	beq.w	8005440 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	3302      	adds	r3, #2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d907      	bls.n	80050fa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050f2:	1ad2      	subs	r2, r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	619a      	str	r2, [r3, #24]
 80050f8:	e002      	b.n	8005100 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2200      	movs	r2, #0
 80050fe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f040 80b9 	bne.w	800527c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d126      	bne.n	8005160 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005120:	b29b      	uxth	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	4413      	add	r3, r2
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	011a      	lsls	r2, r3, #4
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	4413      	add	r3, r2
 8005134:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005144:	b29a      	uxth	r2, r3
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005158:	b29a      	uxth	r2, r3
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	e01a      	b.n	8005196 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d116      	bne.n	8005196 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	633b      	str	r3, [r7, #48]	; 0x30
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005176:	b29b      	uxth	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	4413      	add	r3, r2
 800517e:	633b      	str	r3, [r7, #48]	; 0x30
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	011a      	lsls	r2, r3, #4
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	4413      	add	r3, r2
 800518a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005192:	2200      	movs	r2, #0
 8005194:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d126      	bne.n	80051f2 <HAL_PCD_EP_DB_Transmit+0x15a>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	4413      	add	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	011a      	lsls	r2, r3, #4
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	4413      	add	r3, r2
 80051c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	801a      	strh	r2, [r3, #0]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	801a      	strh	r2, [r3, #0]
 80051f0:	e017      	b.n	8005222 <HAL_PCD_EP_DB_Transmit+0x18a>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d113      	bne.n	8005222 <HAL_PCD_EP_DB_Transmit+0x18a>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005202:	b29b      	uxth	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	4413      	add	r3, r2
 800520a:	623b      	str	r3, [r7, #32]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	011a      	lsls	r2, r3, #4
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	4413      	add	r3, r2
 8005216:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	2200      	movs	r2, #0
 8005220:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f006 fb24 	bl	800b876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 82d4 	beq.w	80057e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005254:	827b      	strh	r3, [r7, #18]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	8a7b      	ldrh	r3, [r7, #18]
 8005266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005276:	b29b      	uxth	r3, r3
 8005278:	8013      	strh	r3, [r2, #0]
 800527a:	e2b2      	b.n	80057e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d021      	beq.n	80052ca <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	441a      	add	r2, r3
 80052b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80052b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	f040 8286 	bne.w	80057e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052de:	441a      	add	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052ec:	441a      	add	r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	6a1a      	ldr	r2, [r3, #32]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d309      	bcc.n	8005312 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	6a1a      	ldr	r2, [r3, #32]
 8005308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530a:	1ad2      	subs	r2, r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	621a      	str	r2, [r3, #32]
 8005310:	e015      	b.n	800533e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d107      	bne.n	800532a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800531a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800531e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005328:	e009      	b.n	800533e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2200      	movs	r2, #0
 800533c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d155      	bne.n	80053f2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	63bb      	str	r3, [r7, #56]	; 0x38
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005354:	b29b      	uxth	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535a:	4413      	add	r3, r2
 800535c:	63bb      	str	r3, [r7, #56]	; 0x38
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	011a      	lsls	r2, r3, #4
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	4413      	add	r3, r2
 8005368:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
 800536e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005370:	2b00      	cmp	r3, #0
 8005372:	d112      	bne.n	800539a <HAL_PCD_EP_DB_Transmit+0x302>
 8005374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800537e:	b29a      	uxth	r2, r3
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	801a      	strh	r2, [r3, #0]
 8005384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005392:	b29a      	uxth	r2, r3
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	e047      	b.n	800542a <HAL_PCD_EP_DB_Transmit+0x392>
 800539a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539c:	2b3e      	cmp	r3, #62	; 0x3e
 800539e:	d811      	bhi.n	80053c4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80053a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a2:	085b      	lsrs	r3, r3, #1
 80053a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80053b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b2:	3301      	adds	r3, #1
 80053b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	029b      	lsls	r3, r3, #10
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	e032      	b.n	800542a <HAL_PCD_EP_DB_Transmit+0x392>
 80053c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <HAL_PCD_EP_DB_Transmit+0x342>
 80053d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d6:	3b01      	subs	r3, #1
 80053d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053dc:	b29b      	uxth	r3, r3
 80053de:	029b      	lsls	r3, r3, #10
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	e01b      	b.n	800542a <HAL_PCD_EP_DB_Transmit+0x392>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d117      	bne.n	800542a <HAL_PCD_EP_DB_Transmit+0x392>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005408:	b29b      	uxth	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800540e:	4413      	add	r3, r2
 8005410:	643b      	str	r3, [r7, #64]	; 0x40
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	011a      	lsls	r2, r3, #4
 8005418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541a:	4413      	add	r3, r2
 800541c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005424:	b29a      	uxth	r2, r3
 8005426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005428:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	6959      	ldr	r1, [r3, #20]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	891a      	ldrh	r2, [r3, #8]
 8005436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005438:	b29b      	uxth	r3, r3
 800543a:	f004 fbe5 	bl	8009c08 <USB_WritePMA>
 800543e:	e1d0      	b.n	80057e2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005448:	b29b      	uxth	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4413      	add	r3, r2
 8005454:	3306      	adds	r3, #6
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005468:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005474:	429a      	cmp	r2, r3
 8005476:	d307      	bcc.n	8005488 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005480:	1ad2      	subs	r2, r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	619a      	str	r2, [r3, #24]
 8005486:	e002      	b.n	800548e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	f040 80c4 	bne.w	8005620 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d126      	bne.n	80054ee <HAL_PCD_EP_DB_Transmit+0x456>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b4:	4413      	add	r3, r2
 80054b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	011a      	lsls	r2, r3, #4
 80054be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c0:	4413      	add	r3, r2
 80054c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054d6:	801a      	strh	r2, [r3, #0]
 80054d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054ea:	801a      	strh	r2, [r3, #0]
 80054ec:	e01a      	b.n	8005524 <HAL_PCD_EP_DB_Transmit+0x48c>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d116      	bne.n	8005524 <HAL_PCD_EP_DB_Transmit+0x48c>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	677b      	str	r3, [r7, #116]	; 0x74
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005504:	b29b      	uxth	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800550a:	4413      	add	r3, r2
 800550c:	677b      	str	r3, [r7, #116]	; 0x74
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	011a      	lsls	r2, r3, #4
 8005514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005516:	4413      	add	r3, r2
 8005518:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800551c:	673b      	str	r3, [r7, #112]	; 0x70
 800551e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005520:	2200      	movs	r2, #0
 8005522:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	67bb      	str	r3, [r7, #120]	; 0x78
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d12f      	bne.n	8005592 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800554a:	4413      	add	r3, r2
 800554c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	011a      	lsls	r2, r3, #4
 8005556:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800555a:	4413      	add	r3, r2
 800555c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005570:	b29a      	uxth	r2, r3
 8005572:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005588:	b29a      	uxth	r2, r3
 800558a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	e017      	b.n	80055c2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d113      	bne.n	80055c2 <HAL_PCD_EP_DB_Transmit+0x52a>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a8:	4413      	add	r3, r2
 80055aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	011a      	lsls	r2, r3, #4
 80055b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b4:	4413      	add	r3, r2
 80055b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055be:	2200      	movs	r2, #0
 80055c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	4619      	mov	r1, r3
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f006 f954 	bl	800b876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f040 8104 	bne.w	80057e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	441a      	add	r2, r3
 8005606:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800560a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800560e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561a:	b29b      	uxth	r3, r3
 800561c:	8013      	strh	r3, [r2, #0]
 800561e:	e0e0      	b.n	80057e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d121      	bne.n	800566e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005644:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	441a      	add	r2, r3
 8005656:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800565a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800565e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566a:	b29b      	uxth	r3, r3
 800566c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005674:	2b01      	cmp	r3, #1
 8005676:	f040 80b4 	bne.w	80057e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	695a      	ldr	r2, [r3, #20]
 800567e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005682:	441a      	add	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005690:	441a      	add	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6a1a      	ldr	r2, [r3, #32]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d309      	bcc.n	80056b6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6a1a      	ldr	r2, [r3, #32]
 80056ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ae:	1ad2      	subs	r2, r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	621a      	str	r2, [r3, #32]
 80056b4:	e015      	b.n	80056e2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d107      	bne.n	80056ce <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80056be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80056cc:	e009      	b.n	80056e2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2200      	movs	r2, #0
 80056d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	667b      	str	r3, [r7, #100]	; 0x64
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d155      	bne.n	800579c <HAL_PCD_EP_DB_Transmit+0x704>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fe:	b29b      	uxth	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005704:	4413      	add	r3, r2
 8005706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	011a      	lsls	r2, r3, #4
 800570e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005710:	4413      	add	r3, r2
 8005712:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005716:	65bb      	str	r3, [r7, #88]	; 0x58
 8005718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571a:	2b00      	cmp	r3, #0
 800571c:	d112      	bne.n	8005744 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800571e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005728:	b29a      	uxth	r2, r3
 800572a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	b29b      	uxth	r3, r3
 8005734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573c:	b29a      	uxth	r2, r3
 800573e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	e044      	b.n	80057ce <HAL_PCD_EP_DB_Transmit+0x736>
 8005744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005746:	2b3e      	cmp	r3, #62	; 0x3e
 8005748:	d811      	bhi.n	800576e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800574a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574c:	085b      	lsrs	r3, r3, #1
 800574e:	657b      	str	r3, [r7, #84]	; 0x54
 8005750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800575a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800575c:	3301      	adds	r3, #1
 800575e:	657b      	str	r3, [r7, #84]	; 0x54
 8005760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005762:	b29b      	uxth	r3, r3
 8005764:	029b      	lsls	r3, r3, #10
 8005766:	b29a      	uxth	r2, r3
 8005768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e02f      	b.n	80057ce <HAL_PCD_EP_DB_Transmit+0x736>
 800576e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	657b      	str	r3, [r7, #84]	; 0x54
 8005774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800577e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005780:	3b01      	subs	r3, #1
 8005782:	657b      	str	r3, [r7, #84]	; 0x54
 8005784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005786:	b29b      	uxth	r3, r3
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	b29b      	uxth	r3, r3
 800578c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005794:	b29a      	uxth	r2, r3
 8005796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005798:	801a      	strh	r2, [r3, #0]
 800579a:	e018      	b.n	80057ce <HAL_PCD_EP_DB_Transmit+0x736>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	785b      	ldrb	r3, [r3, #1]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d114      	bne.n	80057ce <HAL_PCD_EP_DB_Transmit+0x736>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057b2:	4413      	add	r3, r2
 80057b4:	667b      	str	r3, [r7, #100]	; 0x64
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	011a      	lsls	r2, r3, #4
 80057bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057be:	4413      	add	r3, r2
 80057c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057c4:	663b      	str	r3, [r7, #96]	; 0x60
 80057c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057cc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	6959      	ldr	r1, [r3, #20]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	895a      	ldrh	r2, [r3, #10]
 80057da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f004 fa13 	bl	8009c08 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fc:	823b      	strh	r3, [r7, #16]
 80057fe:	8a3b      	ldrh	r3, [r7, #16]
 8005800:	f083 0310 	eor.w	r3, r3, #16
 8005804:	823b      	strh	r3, [r7, #16]
 8005806:	8a3b      	ldrh	r3, [r7, #16]
 8005808:	f083 0320 	eor.w	r3, r3, #32
 800580c:	823b      	strh	r3, [r7, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	441a      	add	r2, r3
 800581c:	8a3b      	ldrh	r3, [r7, #16]
 800581e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800582a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582e:	b29b      	uxth	r3, r3
 8005830:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3788      	adds	r7, #136	; 0x88
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	607b      	str	r3, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	817b      	strh	r3, [r7, #10]
 800584a:	4613      	mov	r3, r2
 800584c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800584e:	897b      	ldrh	r3, [r7, #10]
 8005850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00b      	beq.n	8005872 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800585a:	897b      	ldrh	r3, [r7, #10]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e009      	b.n	8005886 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005872:	897a      	ldrh	r2, [r7, #10]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005886:	893b      	ldrh	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d107      	bne.n	800589c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2200      	movs	r2, #0
 8005890:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	b29a      	uxth	r2, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	80da      	strh	r2, [r3, #6]
 800589a:	e00b      	b.n	80058b4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2201      	movs	r2, #1
 80058a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	0c1b      	lsrs	r3, r3, #16
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr

080058c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e31d      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058d2:	4b94      	ldr	r3, [pc, #592]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
 80058da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058dc:	4b91      	ldr	r3, [pc, #580]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d07b      	beq.n	80059ea <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d006      	beq.n	8005906 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2b0c      	cmp	r3, #12
 80058fc:	d10f      	bne.n	800591e <HAL_RCC_OscConfig+0x5e>
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005904:	d10b      	bne.n	800591e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005906:	4b87      	ldr	r3, [pc, #540]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d06a      	beq.n	80059e8 <HAL_RCC_OscConfig+0x128>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d166      	bne.n	80059e8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e2f7      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d106      	bne.n	8005934 <HAL_RCC_OscConfig+0x74>
 8005926:	4b7f      	ldr	r3, [pc, #508]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a7e      	ldr	r2, [pc, #504]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 800592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	e02d      	b.n	8005990 <HAL_RCC_OscConfig+0xd0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10c      	bne.n	8005956 <HAL_RCC_OscConfig+0x96>
 800593c:	4b79      	ldr	r3, [pc, #484]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a78      	ldr	r2, [pc, #480]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	4b76      	ldr	r3, [pc, #472]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a75      	ldr	r2, [pc, #468]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 800594e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	e01c      	b.n	8005990 <HAL_RCC_OscConfig+0xd0>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b05      	cmp	r3, #5
 800595c:	d10c      	bne.n	8005978 <HAL_RCC_OscConfig+0xb8>
 800595e:	4b71      	ldr	r3, [pc, #452]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a70      	ldr	r2, [pc, #448]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	4b6e      	ldr	r3, [pc, #440]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a6d      	ldr	r2, [pc, #436]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	e00b      	b.n	8005990 <HAL_RCC_OscConfig+0xd0>
 8005978:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a69      	ldr	r2, [pc, #420]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 800597e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	4b67      	ldr	r3, [pc, #412]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a66      	ldr	r2, [pc, #408]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 800598a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800598e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d013      	beq.n	80059c0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005998:	f7fd fcc6 	bl	8003328 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059a0:	f7fd fcc2 	bl	8003328 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b64      	cmp	r3, #100	; 0x64
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e2ad      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059b2:	4b5c      	ldr	r3, [pc, #368]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0f0      	beq.n	80059a0 <HAL_RCC_OscConfig+0xe0>
 80059be:	e014      	b.n	80059ea <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fd fcb2 	bl	8003328 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059c8:	f7fd fcae 	bl	8003328 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	; 0x64
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e299      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059da:	4b52      	ldr	r3, [pc, #328]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x108>
 80059e6:	e000      	b.n	80059ea <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d05a      	beq.n	8005aac <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d005      	beq.n	8005a08 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b0c      	cmp	r3, #12
 8005a00:	d119      	bne.n	8005a36 <HAL_RCC_OscConfig+0x176>
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d116      	bne.n	8005a36 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a08:	4b46      	ldr	r3, [pc, #280]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_OscConfig+0x160>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e276      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a20:	4b40      	ldr	r3, [pc, #256]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	493d      	ldr	r1, [pc, #244]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a34:	e03a      	b.n	8005aac <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d020      	beq.n	8005a80 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a3e:	4b3a      	ldr	r3, [pc, #232]	; (8005b28 <HAL_RCC_OscConfig+0x268>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a44:	f7fd fc70 	bl	8003328 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a4c:	f7fd fc6c 	bl	8003328 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e257      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a5e:	4b31      	ldr	r3, [pc, #196]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6a:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	492a      	ldr	r1, [pc, #168]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	604b      	str	r3, [r1, #4]
 8005a7e:	e015      	b.n	8005aac <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a80:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <HAL_RCC_OscConfig+0x268>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a86:	f7fd fc4f 	bl	8003328 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a8e:	f7fd fc4b 	bl	8003328 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e236      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005aa0:	4b20      	ldr	r3, [pc, #128]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1f0      	bne.n	8005a8e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80b8 	beq.w	8005c2a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d170      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ac0:	4b18      	ldr	r3, [pc, #96]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x218>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e21a      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1a      	ldr	r2, [r3, #32]
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d921      	bls.n	8005b2c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fc19 	bl	8006324 <RCC_SetFlashLatencyFromMSIRange>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e208      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005afc:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	4906      	ldr	r1, [pc, #24]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	061b      	lsls	r3, r3, #24
 8005b1c:	4901      	ldr	r1, [pc, #4]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	604b      	str	r3, [r1, #4]
 8005b22:	e020      	b.n	8005b66 <HAL_RCC_OscConfig+0x2a6>
 8005b24:	40023800 	.word	0x40023800
 8005b28:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b2c:	4ba4      	ldr	r3, [pc, #656]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	49a1      	ldr	r1, [pc, #644]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b3e:	4ba0      	ldr	r3, [pc, #640]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	061b      	lsls	r3, r3, #24
 8005b4c:	499c      	ldr	r1, [pc, #624]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fbe4 	bl	8006324 <RCC_SetFlashLatencyFromMSIRange>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e1d3      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	0b5b      	lsrs	r3, r3, #13
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005b76:	4a92      	ldr	r2, [pc, #584]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005b78:	6892      	ldr	r2, [r2, #8]
 8005b7a:	0912      	lsrs	r2, r2, #4
 8005b7c:	f002 020f 	and.w	r2, r2, #15
 8005b80:	4990      	ldr	r1, [pc, #576]	; (8005dc4 <HAL_RCC_OscConfig+0x504>)
 8005b82:	5c8a      	ldrb	r2, [r1, r2]
 8005b84:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005b86:	4a90      	ldr	r2, [pc, #576]	; (8005dc8 <HAL_RCC_OscConfig+0x508>)
 8005b88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b8a:	4b90      	ldr	r3, [pc, #576]	; (8005dcc <HAL_RCC_OscConfig+0x50c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fd fb7e 	bl	8003290 <HAL_InitTick>
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d045      	beq.n	8005c2a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	e1b5      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d029      	beq.n	8005bfe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005baa:	4b89      	ldr	r3, [pc, #548]	; (8005dd0 <HAL_RCC_OscConfig+0x510>)
 8005bac:	2201      	movs	r2, #1
 8005bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb0:	f7fd fbba 	bl	8003328 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bb8:	f7fd fbb6 	bl	8003328 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e1a1      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005bca:	4b7d      	ldr	r3, [pc, #500]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0f0      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bd6:	4b7a      	ldr	r3, [pc, #488]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	4977      	ldr	r1, [pc, #476]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005be8:	4b75      	ldr	r3, [pc, #468]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	061b      	lsls	r3, r3, #24
 8005bf6:	4972      	ldr	r1, [pc, #456]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	604b      	str	r3, [r1, #4]
 8005bfc:	e015      	b.n	8005c2a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005bfe:	4b74      	ldr	r3, [pc, #464]	; (8005dd0 <HAL_RCC_OscConfig+0x510>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c04:	f7fd fb90 	bl	8003328 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c0c:	f7fd fb8c 	bl	8003328 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e177      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005c1e:	4b68      	ldr	r3, [pc, #416]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d030      	beq.n	8005c98 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c3e:	4b65      	ldr	r3, [pc, #404]	; (8005dd4 <HAL_RCC_OscConfig+0x514>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c44:	f7fd fb70 	bl	8003328 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c4c:	f7fd fb6c 	bl	8003328 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e157      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c5e:	4b58      	ldr	r3, [pc, #352]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCC_OscConfig+0x38c>
 8005c6a:	e015      	b.n	8005c98 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c6c:	4b59      	ldr	r3, [pc, #356]	; (8005dd4 <HAL_RCC_OscConfig+0x514>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c72:	f7fd fb59 	bl	8003328 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c7a:	f7fd fb55 	bl	8003328 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e140      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c8c:	4b4c      	ldr	r3, [pc, #304]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f0      	bne.n	8005c7a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80b5 	beq.w	8005e10 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005caa:	4b45      	ldr	r3, [pc, #276]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10d      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cb6:	4b42      	ldr	r3, [pc, #264]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	4a41      	ldr	r2, [pc, #260]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	6253      	str	r3, [r2, #36]	; 0x24
 8005cc2:	4b3f      	ldr	r3, [pc, #252]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cca:	60bb      	str	r3, [r7, #8]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd2:	4b41      	ldr	r3, [pc, #260]	; (8005dd8 <HAL_RCC_OscConfig+0x518>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d118      	bne.n	8005d10 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cde:	4b3e      	ldr	r3, [pc, #248]	; (8005dd8 <HAL_RCC_OscConfig+0x518>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a3d      	ldr	r2, [pc, #244]	; (8005dd8 <HAL_RCC_OscConfig+0x518>)
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cea:	f7fd fb1d 	bl	8003328 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf2:	f7fd fb19 	bl	8003328 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b64      	cmp	r3, #100	; 0x64
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e104      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d04:	4b34      	ldr	r3, [pc, #208]	; (8005dd8 <HAL_RCC_OscConfig+0x518>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d106      	bne.n	8005d26 <HAL_RCC_OscConfig+0x466>
 8005d18:	4b29      	ldr	r3, [pc, #164]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	4a28      	ldr	r2, [pc, #160]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d22:	6353      	str	r3, [r2, #52]	; 0x34
 8005d24:	e02d      	b.n	8005d82 <HAL_RCC_OscConfig+0x4c2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x488>
 8005d2e:	4b24      	ldr	r3, [pc, #144]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	4a23      	ldr	r2, [pc, #140]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d38:	6353      	str	r3, [r2, #52]	; 0x34
 8005d3a:	4b21      	ldr	r3, [pc, #132]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	4a20      	ldr	r2, [pc, #128]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d44:	6353      	str	r3, [r2, #52]	; 0x34
 8005d46:	e01c      	b.n	8005d82 <HAL_RCC_OscConfig+0x4c2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b05      	cmp	r3, #5
 8005d4e:	d10c      	bne.n	8005d6a <HAL_RCC_OscConfig+0x4aa>
 8005d50:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d54:	4a1a      	ldr	r2, [pc, #104]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d5a:	6353      	str	r3, [r2, #52]	; 0x34
 8005d5c:	4b18      	ldr	r3, [pc, #96]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d60:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d66:	6353      	str	r3, [r2, #52]	; 0x34
 8005d68:	e00b      	b.n	8005d82 <HAL_RCC_OscConfig+0x4c2>
 8005d6a:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	4a14      	ldr	r2, [pc, #80]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d74:	6353      	str	r3, [r2, #52]	; 0x34
 8005d76:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7a:	4a11      	ldr	r2, [pc, #68]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d80:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d015      	beq.n	8005db6 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d8a:	f7fd facd 	bl	8003328 <HAL_GetTick>
 8005d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d90:	e00a      	b.n	8005da8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fd fac9 	bl	8003328 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e0b2      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <HAL_RCC_OscConfig+0x500>)
 8005daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0ee      	beq.n	8005d92 <HAL_RCC_OscConfig+0x4d2>
 8005db4:	e023      	b.n	8005dfe <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005db6:	f7fd fab7 	bl	8003328 <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005dbc:	e019      	b.n	8005df2 <HAL_RCC_OscConfig+0x532>
 8005dbe:	bf00      	nop
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	0800ec38 	.word	0x0800ec38
 8005dc8:	2000036c 	.word	0x2000036c
 8005dcc:	20000370 	.word	0x20000370
 8005dd0:	42470020 	.word	0x42470020
 8005dd4:	42470680 	.word	0x42470680
 8005dd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ddc:	f7fd faa4 	bl	8003328 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e08d      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005df2:	4b49      	ldr	r3, [pc, #292]	; (8005f18 <HAL_RCC_OscConfig+0x658>)
 8005df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1ee      	bne.n	8005ddc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dfe:	7ffb      	ldrb	r3, [r7, #31]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d105      	bne.n	8005e10 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e04:	4b44      	ldr	r3, [pc, #272]	; (8005f18 <HAL_RCC_OscConfig+0x658>)
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	4a43      	ldr	r2, [pc, #268]	; (8005f18 <HAL_RCC_OscConfig+0x658>)
 8005e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e0e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d079      	beq.n	8005f0c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d056      	beq.n	8005ecc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d13b      	bne.n	8005e9e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e26:	4b3d      	ldr	r3, [pc, #244]	; (8005f1c <HAL_RCC_OscConfig+0x65c>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2c:	f7fd fa7c 	bl	8003328 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e34:	f7fd fa78 	bl	8003328 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e063      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e46:	4b34      	ldr	r3, [pc, #208]	; (8005f18 <HAL_RCC_OscConfig+0x658>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e52:	4b31      	ldr	r3, [pc, #196]	; (8005f18 <HAL_RCC_OscConfig+0x658>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	4319      	orrs	r1, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	492b      	ldr	r1, [pc, #172]	; (8005f18 <HAL_RCC_OscConfig+0x658>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e70:	4b2a      	ldr	r3, [pc, #168]	; (8005f1c <HAL_RCC_OscConfig+0x65c>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e76:	f7fd fa57 	bl	8003328 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e7c:	e008      	b.n	8005e90 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e7e:	f7fd fa53 	bl	8003328 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e03e      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e90:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <HAL_RCC_OscConfig+0x658>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0f0      	beq.n	8005e7e <HAL_RCC_OscConfig+0x5be>
 8005e9c:	e036      	b.n	8005f0c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e9e:	4b1f      	ldr	r3, [pc, #124]	; (8005f1c <HAL_RCC_OscConfig+0x65c>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea4:	f7fd fa40 	bl	8003328 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eac:	f7fd fa3c 	bl	8003328 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e027      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ebe:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <HAL_RCC_OscConfig+0x658>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1f0      	bne.n	8005eac <HAL_RCC_OscConfig+0x5ec>
 8005eca:	e01f      	b.n	8005f0c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e01a      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ed8:	4b0f      	ldr	r3, [pc, #60]	; (8005f18 <HAL_RCC_OscConfig+0x658>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d10d      	bne.n	8005f08 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d106      	bne.n	8005f08 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d001      	beq.n	8005f0c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	42470060 	.word	0x42470060

08005f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e11a      	b.n	800616a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f34:	4b8f      	ldr	r3, [pc, #572]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d919      	bls.n	8005f76 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d105      	bne.n	8005f54 <HAL_RCC_ClockConfig+0x34>
 8005f48:	4b8a      	ldr	r3, [pc, #552]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a89      	ldr	r2, [pc, #548]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	4b87      	ldr	r3, [pc, #540]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f023 0201 	bic.w	r2, r3, #1
 8005f5c:	4985      	ldr	r1, [pc, #532]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f64:	4b83      	ldr	r3, [pc, #524]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d001      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e0f9      	b.n	800616a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d008      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f82:	4b7d      	ldr	r3, [pc, #500]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	497a      	ldr	r1, [pc, #488]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 808e 	beq.w	80060be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d107      	bne.n	8005fba <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005faa:	4b73      	ldr	r3, [pc, #460]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d121      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e0d7      	b.n	800616a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d107      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fc2:	4b6d      	ldr	r3, [pc, #436]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d115      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e0cb      	b.n	800616a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d107      	bne.n	8005fea <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fda:	4b67      	ldr	r3, [pc, #412]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e0bf      	b.n	800616a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005fea:	4b63      	ldr	r3, [pc, #396]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e0b7      	b.n	800616a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ffa:	4b5f      	ldr	r3, [pc, #380]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f023 0203 	bic.w	r2, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	495c      	ldr	r1, [pc, #368]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8006008:	4313      	orrs	r3, r2
 800600a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800600c:	f7fd f98c 	bl	8003328 <HAL_GetTick>
 8006010:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d112      	bne.n	8006040 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800601a:	e00a      	b.n	8006032 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800601c:	f7fd f984 	bl	8003328 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	f241 3288 	movw	r2, #5000	; 0x1388
 800602a:	4293      	cmp	r3, r2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e09b      	b.n	800616a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006032:	4b51      	ldr	r3, [pc, #324]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 030c 	and.w	r3, r3, #12
 800603a:	2b08      	cmp	r3, #8
 800603c:	d1ee      	bne.n	800601c <HAL_RCC_ClockConfig+0xfc>
 800603e:	e03e      	b.n	80060be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b03      	cmp	r3, #3
 8006046:	d112      	bne.n	800606e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006048:	e00a      	b.n	8006060 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800604a:	f7fd f96d 	bl	8003328 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f241 3288 	movw	r2, #5000	; 0x1388
 8006058:	4293      	cmp	r3, r2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e084      	b.n	800616a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006060:	4b45      	ldr	r3, [pc, #276]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 030c 	and.w	r3, r3, #12
 8006068:	2b0c      	cmp	r3, #12
 800606a:	d1ee      	bne.n	800604a <HAL_RCC_ClockConfig+0x12a>
 800606c:	e027      	b.n	80060be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d11d      	bne.n	80060b2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006076:	e00a      	b.n	800608e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006078:	f7fd f956 	bl	8003328 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	f241 3288 	movw	r2, #5000	; 0x1388
 8006086:	4293      	cmp	r3, r2
 8006088:	d901      	bls.n	800608e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e06d      	b.n	800616a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800608e:	4b3a      	ldr	r3, [pc, #232]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	2b04      	cmp	r3, #4
 8006098:	d1ee      	bne.n	8006078 <HAL_RCC_ClockConfig+0x158>
 800609a:	e010      	b.n	80060be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800609c:	f7fd f944 	bl	8003328 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e05b      	b.n	800616a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80060b2:	4b31      	ldr	r3, [pc, #196]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1ee      	bne.n	800609c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060be:	4b2d      	ldr	r3, [pc, #180]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d219      	bcs.n	8006100 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d105      	bne.n	80060de <HAL_RCC_ClockConfig+0x1be>
 80060d2:	4b28      	ldr	r3, [pc, #160]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a27      	ldr	r2, [pc, #156]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 80060d8:	f043 0304 	orr.w	r3, r3, #4
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	4b25      	ldr	r3, [pc, #148]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 0201 	bic.w	r2, r3, #1
 80060e6:	4923      	ldr	r1, [pc, #140]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ee:	4b21      	ldr	r3, [pc, #132]	; (8006174 <HAL_RCC_ClockConfig+0x254>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d001      	beq.n	8006100 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e034      	b.n	800616a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800610c:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4917      	ldr	r1, [pc, #92]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800612a:	4b13      	ldr	r3, [pc, #76]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	490f      	ldr	r1, [pc, #60]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 800613a:	4313      	orrs	r3, r2
 800613c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800613e:	f000 f823 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8006142:	4602      	mov	r2, r0
 8006144:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <HAL_RCC_ClockConfig+0x258>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	091b      	lsrs	r3, r3, #4
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	490b      	ldr	r1, [pc, #44]	; (800617c <HAL_RCC_ClockConfig+0x25c>)
 8006150:	5ccb      	ldrb	r3, [r1, r3]
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	4a0a      	ldr	r2, [pc, #40]	; (8006180 <HAL_RCC_ClockConfig+0x260>)
 8006158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800615a:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <HAL_RCC_ClockConfig+0x264>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f7fd f896 	bl	8003290 <HAL_InitTick>
 8006164:	4603      	mov	r3, r0
 8006166:	72fb      	strb	r3, [r7, #11]

  return status;
 8006168:	7afb      	ldrb	r3, [r7, #11]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40023c00 	.word	0x40023c00
 8006178:	40023800 	.word	0x40023800
 800617c:	0800ec38 	.word	0x0800ec38
 8006180:	2000036c 	.word	0x2000036c
 8006184:	20000370 	.word	0x20000370

08006188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006188:	b5b0      	push	{r4, r5, r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800618e:	4b61      	ldr	r3, [pc, #388]	; (8006314 <HAL_RCC_GetSysClockFreq+0x18c>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d00d      	beq.n	80061ba <HAL_RCC_GetSysClockFreq+0x32>
 800619e:	2b0c      	cmp	r3, #12
 80061a0:	f200 80a4 	bhi.w	80062ec <HAL_RCC_GetSysClockFreq+0x164>
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d002      	beq.n	80061ae <HAL_RCC_GetSysClockFreq+0x26>
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d003      	beq.n	80061b4 <HAL_RCC_GetSysClockFreq+0x2c>
 80061ac:	e09e      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061ae:	4b5a      	ldr	r3, [pc, #360]	; (8006318 <HAL_RCC_GetSysClockFreq+0x190>)
 80061b0:	613b      	str	r3, [r7, #16]
      break;
 80061b2:	e0a9      	b.n	8006308 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061b4:	4b59      	ldr	r3, [pc, #356]	; (800631c <HAL_RCC_GetSysClockFreq+0x194>)
 80061b6:	613b      	str	r3, [r7, #16]
      break;
 80061b8:	e0a6      	b.n	8006308 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	0c9b      	lsrs	r3, r3, #18
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	4a57      	ldr	r2, [pc, #348]	; (8006320 <HAL_RCC_GetSysClockFreq+0x198>)
 80061c4:	5cd3      	ldrb	r3, [r2, r3]
 80061c6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	0d9b      	lsrs	r3, r3, #22
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	3301      	adds	r3, #1
 80061d2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061d4:	4b4f      	ldr	r3, [pc, #316]	; (8006314 <HAL_RCC_GetSysClockFreq+0x18c>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d041      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	461c      	mov	r4, r3
 80061e4:	f04f 0500 	mov.w	r5, #0
 80061e8:	4620      	mov	r0, r4
 80061ea:	4629      	mov	r1, r5
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	014b      	lsls	r3, r1, #5
 80061f6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061fa:	0142      	lsls	r2, r0, #5
 80061fc:	4610      	mov	r0, r2
 80061fe:	4619      	mov	r1, r3
 8006200:	1b00      	subs	r0, r0, r4
 8006202:	eb61 0105 	sbc.w	r1, r1, r5
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	018b      	lsls	r3, r1, #6
 8006210:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006214:	0182      	lsls	r2, r0, #6
 8006216:	1a12      	subs	r2, r2, r0
 8006218:	eb63 0301 	sbc.w	r3, r3, r1
 800621c:	f04f 0000 	mov.w	r0, #0
 8006220:	f04f 0100 	mov.w	r1, #0
 8006224:	00d9      	lsls	r1, r3, #3
 8006226:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800622a:	00d0      	lsls	r0, r2, #3
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	1912      	adds	r2, r2, r4
 8006232:	eb45 0303 	adc.w	r3, r5, r3
 8006236:	f04f 0000 	mov.w	r0, #0
 800623a:	f04f 0100 	mov.w	r1, #0
 800623e:	0259      	lsls	r1, r3, #9
 8006240:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006244:	0250      	lsls	r0, r2, #9
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4610      	mov	r0, r2
 800624c:	4619      	mov	r1, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	461a      	mov	r2, r3
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	f7fa ff5f 	bl	8001118 <__aeabi_uldivmod>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4613      	mov	r3, r2
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e040      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	461c      	mov	r4, r3
 8006268:	f04f 0500 	mov.w	r5, #0
 800626c:	4620      	mov	r0, r4
 800626e:	4629      	mov	r1, r5
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	014b      	lsls	r3, r1, #5
 800627a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800627e:	0142      	lsls	r2, r0, #5
 8006280:	4610      	mov	r0, r2
 8006282:	4619      	mov	r1, r3
 8006284:	1b00      	subs	r0, r0, r4
 8006286:	eb61 0105 	sbc.w	r1, r1, r5
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	018b      	lsls	r3, r1, #6
 8006294:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006298:	0182      	lsls	r2, r0, #6
 800629a:	1a12      	subs	r2, r2, r0
 800629c:	eb63 0301 	sbc.w	r3, r3, r1
 80062a0:	f04f 0000 	mov.w	r0, #0
 80062a4:	f04f 0100 	mov.w	r1, #0
 80062a8:	00d9      	lsls	r1, r3, #3
 80062aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062ae:	00d0      	lsls	r0, r2, #3
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	1912      	adds	r2, r2, r4
 80062b6:	eb45 0303 	adc.w	r3, r5, r3
 80062ba:	f04f 0000 	mov.w	r0, #0
 80062be:	f04f 0100 	mov.w	r1, #0
 80062c2:	0299      	lsls	r1, r3, #10
 80062c4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80062c8:	0290      	lsls	r0, r2, #10
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4610      	mov	r0, r2
 80062d0:	4619      	mov	r1, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	461a      	mov	r2, r3
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	f7fa ff1d 	bl	8001118 <__aeabi_uldivmod>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4613      	mov	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	613b      	str	r3, [r7, #16]
      break;
 80062ea:	e00d      	b.n	8006308 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80062ec:	4b09      	ldr	r3, [pc, #36]	; (8006314 <HAL_RCC_GetSysClockFreq+0x18c>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	0b5b      	lsrs	r3, r3, #13
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	613b      	str	r3, [r7, #16]
      break;
 8006306:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006308:	693b      	ldr	r3, [r7, #16]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bdb0      	pop	{r4, r5, r7, pc}
 8006312:	bf00      	nop
 8006314:	40023800 	.word	0x40023800
 8006318:	00f42400 	.word	0x00f42400
 800631c:	007a1200 	.word	0x007a1200
 8006320:	0800ec2c 	.word	0x0800ec2c

08006324 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006330:	4b29      	ldr	r3, [pc, #164]	; (80063d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d12c      	bne.n	8006396 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800633c:	4b26      	ldr	r3, [pc, #152]	; (80063d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006348:	4b24      	ldr	r3, [pc, #144]	; (80063dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	e016      	b.n	8006382 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006354:	4b20      	ldr	r3, [pc, #128]	; (80063d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	4a1f      	ldr	r2, [pc, #124]	; (80063d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800635a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635e:	6253      	str	r3, [r2, #36]	; 0x24
 8006360:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800636c:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8006374:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8006376:	4b18      	ldr	r3, [pc, #96]	; (80063d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800637c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006380:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006388:	d105      	bne.n	8006396 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006390:	d101      	bne.n	8006396 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8006392:	2301      	movs	r3, #1
 8006394:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d105      	bne.n	80063a8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800639c:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a0f      	ldr	r2, [pc, #60]	; (80063e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063a2:	f043 0304 	orr.w	r3, r3, #4
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f023 0201 	bic.w	r2, r3, #1
 80063b0:	490b      	ldr	r1, [pc, #44]	; (80063e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063b8:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d001      	beq.n	80063ca <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40023800 	.word	0x40023800
 80063dc:	40007000 	.word	0x40007000
 80063e0:	40023c00 	.word	0x40023c00

080063e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e06e      	b.n	80064d4 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d108      	bne.n	8006410 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006406:	d009      	beq.n	800641c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	61da      	str	r2, [r3, #28]
 800640e:	e005      	b.n	800641c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fc fc96 	bl	8002d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006452:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006464:	431a      	orrs	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a0:	ea42 0103 	orr.w	r1, r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	0c1a      	lsrs	r2, r3, #16
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f002 0204 	and.w	r2, r2, #4
 80064c2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	4613      	mov	r3, r2
 80064ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_SPI_Transmit+0x22>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e126      	b.n	800674c <HAL_SPI_Transmit+0x270>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006506:	f7fc ff0f 	bl	8003328 <HAL_GetTick>
 800650a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800650c:	88fb      	ldrh	r3, [r7, #6]
 800650e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b01      	cmp	r3, #1
 800651a:	d002      	beq.n	8006522 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800651c:	2302      	movs	r3, #2
 800651e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006520:	e10b      	b.n	800673a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_SPI_Transmit+0x52>
 8006528:	88fb      	ldrh	r3, [r7, #6]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006532:	e102      	b.n	800673a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2203      	movs	r2, #3
 8006538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	88fa      	ldrh	r2, [r7, #6]
 8006552:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657a:	d10f      	bne.n	800659c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800658a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800659a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a6:	2b40      	cmp	r3, #64	; 0x40
 80065a8:	d007      	beq.n	80065ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c2:	d14b      	bne.n	800665c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_SPI_Transmit+0xf6>
 80065cc:	8afb      	ldrh	r3, [r7, #22]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d13e      	bne.n	8006650 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	881a      	ldrh	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	1c9a      	adds	r2, r3, #2
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065f6:	e02b      	b.n	8006650 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b02      	cmp	r3, #2
 8006604:	d112      	bne.n	800662c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660a:	881a      	ldrh	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	1c9a      	adds	r2, r3, #2
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	86da      	strh	r2, [r3, #54]	; 0x36
 800662a:	e011      	b.n	8006650 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800662c:	f7fc fe7c 	bl	8003328 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d803      	bhi.n	8006644 <HAL_SPI_Transmit+0x168>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006642:	d102      	bne.n	800664a <HAL_SPI_Transmit+0x16e>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800664e:	e074      	b.n	800673a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1ce      	bne.n	80065f8 <HAL_SPI_Transmit+0x11c>
 800665a:	e04c      	b.n	80066f6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <HAL_SPI_Transmit+0x18e>
 8006664:	8afb      	ldrh	r3, [r7, #22]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d140      	bne.n	80066ec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	330c      	adds	r3, #12
 8006674:	7812      	ldrb	r2, [r2, #0]
 8006676:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006690:	e02c      	b.n	80066ec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b02      	cmp	r3, #2
 800669e:	d113      	bne.n	80066c8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	330c      	adds	r3, #12
 80066aa:	7812      	ldrb	r2, [r2, #0]
 80066ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80066c6:	e011      	b.n	80066ec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066c8:	f7fc fe2e 	bl	8003328 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d803      	bhi.n	80066e0 <HAL_SPI_Transmit+0x204>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066de:	d102      	bne.n	80066e6 <HAL_SPI_Transmit+0x20a>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d102      	bne.n	80066ec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066ea:	e026      	b.n	800673a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1cd      	bne.n	8006692 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fcd0 	bl	80070a0 <SPI_EndRxTxTransaction>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2220      	movs	r2, #32
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e000      	b.n	800673a <HAL_SPI_Transmit+0x25e>
  }

error:
 8006738:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800674a:	7ffb      	ldrb	r3, [r7, #31]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3720      	adds	r7, #32
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af02      	add	r7, sp, #8
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	4613      	mov	r3, r2
 8006762:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006770:	d112      	bne.n	8006798 <HAL_SPI_Receive+0x44>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10e      	bne.n	8006798 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2204      	movs	r2, #4
 800677e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	4613      	mov	r3, r2
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 f8f1 	bl	8006976 <HAL_SPI_TransmitReceive>
 8006794:	4603      	mov	r3, r0
 8006796:	e0ea      	b.n	800696e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d101      	bne.n	80067a6 <HAL_SPI_Receive+0x52>
 80067a2:	2302      	movs	r3, #2
 80067a4:	e0e3      	b.n	800696e <HAL_SPI_Receive+0x21a>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067ae:	f7fc fdbb 	bl	8003328 <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d002      	beq.n	80067c6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
 80067c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067c4:	e0ca      	b.n	800695c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <HAL_SPI_Receive+0x7e>
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d102      	bne.n	80067d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067d6:	e0c1      	b.n	800695c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2204      	movs	r2, #4
 80067dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	88fa      	ldrh	r2, [r7, #6]
 80067f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681e:	d10f      	bne.n	8006840 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800682e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800683e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d007      	beq.n	800685e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800685c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d162      	bne.n	800692c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006866:	e02e      	b.n	80068c6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b01      	cmp	r3, #1
 8006874:	d115      	bne.n	80068a2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f103 020c 	add.w	r2, r3, #12
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	7812      	ldrb	r2, [r2, #0]
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068a0:	e011      	b.n	80068c6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068a2:	f7fc fd41 	bl	8003328 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d803      	bhi.n	80068ba <HAL_SPI_Receive+0x166>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d102      	bne.n	80068c0 <HAL_SPI_Receive+0x16c>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068c4:	e04a      	b.n	800695c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1cb      	bne.n	8006868 <HAL_SPI_Receive+0x114>
 80068d0:	e031      	b.n	8006936 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d113      	bne.n	8006908 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	b292      	uxth	r2, r2
 80068ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	1c9a      	adds	r2, r3, #2
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006906:	e011      	b.n	800692c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006908:	f7fc fd0e 	bl	8003328 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d803      	bhi.n	8006920 <HAL_SPI_Receive+0x1cc>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691e:	d102      	bne.n	8006926 <HAL_SPI_Receive+0x1d2>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d102      	bne.n	800692c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	75fb      	strb	r3, [r7, #23]
          goto error;
 800692a:	e017      	b.n	800695c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1cd      	bne.n	80068d2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 fb4a 	bl	8006fd4 <SPI_EndRxTransaction>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	75fb      	strb	r3, [r7, #23]
 8006958:	e000      	b.n	800695c <HAL_SPI_Receive+0x208>
  }

error :
 800695a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800696c:	7dfb      	ldrb	r3, [r7, #23]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b08c      	sub	sp, #48	; 0x30
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	607a      	str	r2, [r7, #4]
 8006982:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006984:	2301      	movs	r3, #1
 8006986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_SPI_TransmitReceive+0x26>
 8006998:	2302      	movs	r3, #2
 800699a:	e18a      	b.n	8006cb2 <HAL_SPI_TransmitReceive+0x33c>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069a4:	f7fc fcc0 	bl	8003328 <HAL_GetTick>
 80069a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80069ba:	887b      	ldrh	r3, [r7, #2]
 80069bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d00f      	beq.n	80069e6 <HAL_SPI_TransmitReceive+0x70>
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069cc:	d107      	bne.n	80069de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <HAL_SPI_TransmitReceive+0x68>
 80069d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d003      	beq.n	80069e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80069de:	2302      	movs	r3, #2
 80069e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80069e4:	e15b      	b.n	8006c9e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0x82>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0x82>
 80069f2:	887b      	ldrh	r3, [r7, #2]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80069fe:	e14e      	b.n	8006c9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d003      	beq.n	8006a14 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2205      	movs	r2, #5
 8006a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	887a      	ldrh	r2, [r7, #2]
 8006a24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	887a      	ldrh	r2, [r7, #2]
 8006a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	887a      	ldrh	r2, [r7, #2]
 8006a36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	887a      	ldrh	r2, [r7, #2]
 8006a3c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	2b40      	cmp	r3, #64	; 0x40
 8006a56:	d007      	beq.n	8006a68 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a70:	d178      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_SPI_TransmitReceive+0x10a>
 8006a7a:	8b7b      	ldrh	r3, [r7, #26]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d166      	bne.n	8006b4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a84:	881a      	ldrh	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	1c9a      	adds	r2, r3, #2
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aa4:	e053      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d11b      	bne.n	8006aec <HAL_SPI_TransmitReceive+0x176>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d016      	beq.n	8006aec <HAL_SPI_TransmitReceive+0x176>
 8006abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d113      	bne.n	8006aec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	881a      	ldrh	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad4:	1c9a      	adds	r2, r3, #2
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d119      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x1b8>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d014      	beq.n	8006b2e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	b292      	uxth	r2, r2
 8006b10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	1c9a      	adds	r2, r3, #2
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b2e:	f7fc fbfb 	bl	8003328 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d807      	bhi.n	8006b4e <HAL_SPI_TransmitReceive+0x1d8>
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d003      	beq.n	8006b4e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b4c:	e0a7      	b.n	8006c9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1a6      	bne.n	8006aa6 <HAL_SPI_TransmitReceive+0x130>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1a1      	bne.n	8006aa6 <HAL_SPI_TransmitReceive+0x130>
 8006b62:	e07c      	b.n	8006c5e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <HAL_SPI_TransmitReceive+0x1fc>
 8006b6c:	8b7b      	ldrh	r3, [r7, #26]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d16b      	bne.n	8006c4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	330c      	adds	r3, #12
 8006b7c:	7812      	ldrb	r2, [r2, #0]
 8006b7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b98:	e057      	b.n	8006c4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d11c      	bne.n	8006be2 <HAL_SPI_TransmitReceive+0x26c>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d017      	beq.n	8006be2 <HAL_SPI_TransmitReceive+0x26c>
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d114      	bne.n	8006be2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	7812      	ldrb	r2, [r2, #0]
 8006bc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d119      	bne.n	8006c24 <HAL_SPI_TransmitReceive+0x2ae>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d014      	beq.n	8006c24 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c20:	2301      	movs	r3, #1
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c24:	f7fc fb80 	bl	8003328 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d803      	bhi.n	8006c3c <HAL_SPI_TransmitReceive+0x2c6>
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3a:	d102      	bne.n	8006c42 <HAL_SPI_TransmitReceive+0x2cc>
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c48:	e029      	b.n	8006c9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1a2      	bne.n	8006b9a <HAL_SPI_TransmitReceive+0x224>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d19d      	bne.n	8006b9a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 fa1c 	bl	80070a0 <SPI_EndRxTxTransaction>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d006      	beq.n	8006c7c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2220      	movs	r2, #32
 8006c78:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c7a:	e010      	b.n	8006c9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	e000      	b.n	8006c9e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3730      	adds	r7, #48	; 0x30
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	099b      	lsrs	r3, r3, #6
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10f      	bne.n	8006d00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	099b      	lsrs	r3, r3, #6
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d004      	beq.n	8006d00 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
    return;
 8006cfe:	e0be      	b.n	8006e7e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <HAL_SPI_IRQHandler+0x66>
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	09db      	lsrs	r3, r3, #7
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	4798      	blx	r3
    return;
 8006d20:	e0ad      	b.n	8006e7e <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d106      	bne.n	8006d3c <HAL_SPI_IRQHandler+0x80>
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	099b      	lsrs	r3, r3, #6
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 80a1 	beq.w	8006e7e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 809a 	beq.w	8006e7e <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	099b      	lsrs	r3, r3, #6
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d023      	beq.n	8006d9e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d011      	beq.n	8006d86 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d66:	f043 0204 	orr.w	r2, r3, #4
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	e00b      	b.n	8006d9e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d86:	2300      	movs	r3, #0
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	693b      	ldr	r3, [r7, #16]
        return;
 8006d9c:	e06f      	b.n	8006e7e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d014      	beq.n	8006dd4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dae:	f043 0201 	orr.w	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d04f      	beq.n	8006e7c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d104      	bne.n	8006e08 <HAL_SPI_IRQHandler+0x14c>
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d034      	beq.n	8006e72 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0203 	bic.w	r2, r2, #3
 8006e16:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d011      	beq.n	8006e44 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e24:	4a17      	ldr	r2, [pc, #92]	; (8006e84 <HAL_SPI_IRQHandler+0x1c8>)
 8006e26:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fc fbb4 	bl	800359a <HAL_DMA_Abort_IT>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d016      	beq.n	8006e7a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e50:	4a0c      	ldr	r2, [pc, #48]	; (8006e84 <HAL_SPI_IRQHandler+0x1c8>)
 8006e52:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fc fb9e 	bl	800359a <HAL_DMA_Abort_IT>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006e70:	e003      	b.n	8006e7a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f808 	bl	8006e88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e78:	e000      	b.n	8006e7c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006e7a:	bf00      	nop
    return;
 8006e7c:	bf00      	nop
  }
}
 8006e7e:	3720      	adds	r7, #32
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	08006e9b 	.word	0x08006e9b

08006e88 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr

08006e9a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff ffe7 	bl	8006e88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ed4:	f7fc fa28 	bl	8003328 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	1a9b      	subs	r3, r3, r2
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ee4:	f7fc fa20 	bl	8003328 <HAL_GetTick>
 8006ee8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006eea:	4b39      	ldr	r3, [pc, #228]	; (8006fd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	015b      	lsls	r3, r3, #5
 8006ef0:	0d1b      	lsrs	r3, r3, #20
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	fb02 f303 	mul.w	r3, r2, r3
 8006ef8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006efa:	e054      	b.n	8006fa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f02:	d050      	beq.n	8006fa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f04:	f7fc fa10 	bl	8003328 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d902      	bls.n	8006f1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d13d      	bne.n	8006f96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f32:	d111      	bne.n	8006f58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f3c:	d004      	beq.n	8006f48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f46:	d107      	bne.n	8006f58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f60:	d10f      	bne.n	8006f82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e017      	b.n	8006fc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	bf0c      	ite	eq
 8006fb6:	2301      	moveq	r3, #1
 8006fb8:	2300      	movne	r3, #0
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d19b      	bne.n	8006efc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3720      	adds	r7, #32
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	2000036c 	.word	0x2000036c

08006fd4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af02      	add	r7, sp, #8
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fe8:	d111      	bne.n	800700e <SPI_EndRxTransaction+0x3a>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff2:	d004      	beq.n	8006ffe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ffc:	d107      	bne.n	800700e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800700c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007016:	d12a      	bne.n	800706e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007020:	d012      	beq.n	8007048 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f7ff ff49 	bl	8006ec4 <SPI_WaitFlagStateUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d02d      	beq.n	8007094 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703c:	f043 0220 	orr.w	r2, r3, #32
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e026      	b.n	8007096 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2200      	movs	r2, #0
 8007050:	2101      	movs	r1, #1
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f7ff ff36 	bl	8006ec4 <SPI_WaitFlagStateUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d01a      	beq.n	8007094 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	f043 0220 	orr.w	r2, r3, #32
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e013      	b.n	8007096 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2200      	movs	r2, #0
 8007076:	2101      	movs	r1, #1
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff ff23 	bl	8006ec4 <SPI_WaitFlagStateUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007088:	f043 0220 	orr.w	r2, r3, #32
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e000      	b.n	8007096 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070ac:	4b1b      	ldr	r3, [pc, #108]	; (800711c <SPI_EndRxTxTransaction+0x7c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1b      	ldr	r2, [pc, #108]	; (8007120 <SPI_EndRxTxTransaction+0x80>)
 80070b2:	fba2 2303 	umull	r2, r3, r2, r3
 80070b6:	0d5b      	lsrs	r3, r3, #21
 80070b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070bc:	fb02 f303 	mul.w	r3, r2, r3
 80070c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ca:	d112      	bne.n	80070f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2200      	movs	r2, #0
 80070d4:	2180      	movs	r1, #128	; 0x80
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7ff fef4 	bl	8006ec4 <SPI_WaitFlagStateUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d016      	beq.n	8007110 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e6:	f043 0220 	orr.w	r2, r3, #32
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e00f      	b.n	8007112 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007108:	2b80      	cmp	r3, #128	; 0x80
 800710a:	d0f2      	beq.n	80070f2 <SPI_EndRxTxTransaction+0x52>
 800710c:	e000      	b.n	8007110 <SPI_EndRxTxTransaction+0x70>
        break;
 800710e:	bf00      	nop
  }

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	2000036c 	.word	0x2000036c
 8007120:	165e9f81 	.word	0x165e9f81

08007124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e031      	b.n	800719a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d106      	bne.n	8007150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fc f83c 	bl	80031c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f000 fa34 	bl	80075d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d001      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e03a      	b.n	8007232 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071dc:	d00e      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x58>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a16      	ldr	r2, [pc, #88]	; (800723c <HAL_TIM_Base_Start_IT+0x98>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d009      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x58>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a14      	ldr	r2, [pc, #80]	; (8007240 <HAL_TIM_Base_Start_IT+0x9c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d004      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x58>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a13      	ldr	r2, [pc, #76]	; (8007244 <HAL_TIM_Base_Start_IT+0xa0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d111      	bne.n	8007220 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b06      	cmp	r3, #6
 800720c:	d010      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0201 	orr.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800721e:	e007      	b.n	8007230 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr
 800723c:	40000400 	.word	0x40000400
 8007240:	40000800 	.word	0x40000800
 8007244:	40010800 	.word	0x40010800

08007248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b02      	cmp	r3, #2
 800725c:	d122      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b02      	cmp	r3, #2
 800726a:	d11b      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0202 	mvn.w	r2, #2
 8007274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f985 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 8007290:	e005      	b.n	800729e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f978 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f987 	bl	80075ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d122      	bne.n	80072f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d11b      	bne.n	80072f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0204 	mvn.w	r2, #4
 80072c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f95b 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 80072e4:	e005      	b.n	80072f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f94e 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f95d 	bl	80075ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b08      	cmp	r3, #8
 8007304:	d122      	bne.n	800734c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b08      	cmp	r3, #8
 8007312:	d11b      	bne.n	800734c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0208 	mvn.w	r2, #8
 800731c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2204      	movs	r2, #4
 8007322:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f931 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 8007338:	e005      	b.n	8007346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f924 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f933 	bl	80075ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b10      	cmp	r3, #16
 8007358:	d122      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b10      	cmp	r3, #16
 8007366:	d11b      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0210 	mvn.w	r2, #16
 8007370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2208      	movs	r2, #8
 8007376:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f907 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 800738c:	e005      	b.n	800739a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f8fa 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f909 	bl	80075ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d10e      	bne.n	80073cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d107      	bne.n	80073cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0201 	mvn.w	r2, #1
 80073c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7fa fed2 	bl	8002170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d6:	2b40      	cmp	r3, #64	; 0x40
 80073d8:	d10e      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e4:	2b40      	cmp	r3, #64	; 0x40
 80073e6:	d107      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f8e3 	bl	80075be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_TIM_ConfigClockSource+0x18>
 8007414:	2302      	movs	r3, #2
 8007416:	e0b3      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x180>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800743e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007450:	d03e      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0xd0>
 8007452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007456:	f200 8087 	bhi.w	8007568 <HAL_TIM_ConfigClockSource+0x168>
 800745a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745e:	f000 8085 	beq.w	800756c <HAL_TIM_ConfigClockSource+0x16c>
 8007462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007466:	d87f      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007468:	2b70      	cmp	r3, #112	; 0x70
 800746a:	d01a      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0xa2>
 800746c:	2b70      	cmp	r3, #112	; 0x70
 800746e:	d87b      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007470:	2b60      	cmp	r3, #96	; 0x60
 8007472:	d050      	beq.n	8007516 <HAL_TIM_ConfigClockSource+0x116>
 8007474:	2b60      	cmp	r3, #96	; 0x60
 8007476:	d877      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007478:	2b50      	cmp	r3, #80	; 0x50
 800747a:	d03c      	beq.n	80074f6 <HAL_TIM_ConfigClockSource+0xf6>
 800747c:	2b50      	cmp	r3, #80	; 0x50
 800747e:	d873      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007480:	2b40      	cmp	r3, #64	; 0x40
 8007482:	d058      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0x136>
 8007484:	2b40      	cmp	r3, #64	; 0x40
 8007486:	d86f      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007488:	2b30      	cmp	r3, #48	; 0x30
 800748a:	d064      	beq.n	8007556 <HAL_TIM_ConfigClockSource+0x156>
 800748c:	2b30      	cmp	r3, #48	; 0x30
 800748e:	d86b      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007490:	2b20      	cmp	r3, #32
 8007492:	d060      	beq.n	8007556 <HAL_TIM_ConfigClockSource+0x156>
 8007494:	2b20      	cmp	r3, #32
 8007496:	d867      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d05c      	beq.n	8007556 <HAL_TIM_ConfigClockSource+0x156>
 800749c:	2b10      	cmp	r3, #16
 800749e:	d05a      	beq.n	8007556 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074a0:	e062      	b.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	6899      	ldr	r1, [r3, #8]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f000 f966 	bl	8007782 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	609a      	str	r2, [r3, #8]
      break;
 80074ce:	e04e      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	6899      	ldr	r1, [r3, #8]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f000 f94f 	bl	8007782 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074f2:	609a      	str	r2, [r3, #8]
      break;
 80074f4:	e03b      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	6859      	ldr	r1, [r3, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	461a      	mov	r2, r3
 8007504:	f000 f8c6 	bl	8007694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2150      	movs	r1, #80	; 0x50
 800750e:	4618      	mov	r0, r3
 8007510:	f000 f91d 	bl	800774e <TIM_ITRx_SetConfig>
      break;
 8007514:	e02b      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6859      	ldr	r1, [r3, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	461a      	mov	r2, r3
 8007524:	f000 f8e4 	bl	80076f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2160      	movs	r1, #96	; 0x60
 800752e:	4618      	mov	r0, r3
 8007530:	f000 f90d 	bl	800774e <TIM_ITRx_SetConfig>
      break;
 8007534:	e01b      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	6859      	ldr	r1, [r3, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	461a      	mov	r2, r3
 8007544:	f000 f8a6 	bl	8007694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2140      	movs	r1, #64	; 0x40
 800754e:	4618      	mov	r0, r3
 8007550:	f000 f8fd 	bl	800774e <TIM_ITRx_SetConfig>
      break;
 8007554:	e00b      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f000 f8f4 	bl	800774e <TIM_ITRx_SetConfig>
        break;
 8007566:	e002      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007568:	bf00      	nop
 800756a:	e000      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800756c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr

0800759a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr

080075ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr

080075be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr

080075d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e6:	d007      	beq.n	80075f8 <TIM_Base_SetConfig+0x28>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a25      	ldr	r2, [pc, #148]	; (8007680 <TIM_Base_SetConfig+0xb0>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d003      	beq.n	80075f8 <TIM_Base_SetConfig+0x28>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a24      	ldr	r2, [pc, #144]	; (8007684 <TIM_Base_SetConfig+0xb4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d108      	bne.n	800760a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007610:	d013      	beq.n	800763a <TIM_Base_SetConfig+0x6a>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a1a      	ldr	r2, [pc, #104]	; (8007680 <TIM_Base_SetConfig+0xb0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00f      	beq.n	800763a <TIM_Base_SetConfig+0x6a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a19      	ldr	r2, [pc, #100]	; (8007684 <TIM_Base_SetConfig+0xb4>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00b      	beq.n	800763a <TIM_Base_SetConfig+0x6a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a18      	ldr	r2, [pc, #96]	; (8007688 <TIM_Base_SetConfig+0xb8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d007      	beq.n	800763a <TIM_Base_SetConfig+0x6a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a17      	ldr	r2, [pc, #92]	; (800768c <TIM_Base_SetConfig+0xbc>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d003      	beq.n	800763a <TIM_Base_SetConfig+0x6a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a16      	ldr	r2, [pc, #88]	; (8007690 <TIM_Base_SetConfig+0xc0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d108      	bne.n	800764c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	4313      	orrs	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	615a      	str	r2, [r3, #20]
}
 8007676:	bf00      	nop
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr
 8007680:	40000400 	.word	0x40000400
 8007684:	40000800 	.word	0x40000800
 8007688:	40010800 	.word	0x40010800
 800768c:	40010c00 	.word	0x40010c00
 8007690:	40011000 	.word	0x40011000

08007694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f023 0201 	bic.w	r2, r3, #1
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f023 030a 	bic.w	r3, r3, #10
 80076d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	621a      	str	r2, [r3, #32]
}
 80076e6:	bf00      	nop
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bc80      	pop	{r7}
 80076ee:	4770      	bx	lr

080076f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	f023 0210 	bic.w	r2, r3, #16
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800771a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	031b      	lsls	r3, r3, #12
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800772c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	011b      	lsls	r3, r3, #4
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	4313      	orrs	r3, r2
 8007736:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	621a      	str	r2, [r3, #32]
}
 8007744:	bf00      	nop
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr

0800774e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	f043 0307 	orr.w	r3, r3, #7
 8007770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	609a      	str	r2, [r3, #8]
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007782:	b480      	push	{r7}
 8007784:	b087      	sub	sp, #28
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800779c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	021a      	lsls	r2, r3, #8
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	609a      	str	r2, [r3, #8]
}
 80077b6:	bf00      	nop
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr

080077c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e046      	b.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781a:	d00e      	beq.n	800783a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a13      	ldr	r2, [pc, #76]	; (8007870 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d009      	beq.n	800783a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a12      	ldr	r2, [pc, #72]	; (8007874 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d004      	beq.n	800783a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a10      	ldr	r2, [pc, #64]	; (8007878 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d10c      	bne.n	8007854 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	4313      	orrs	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr
 8007870:	40000400 	.word	0x40000400
 8007874:	40000800 	.word	0x40000800
 8007878:	40010800 	.word	0x40010800

0800787c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800788c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007890:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr

080078a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80078b0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80078b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	43db      	mvns	r3, r3
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	4013      	ands	r3, r2
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bc80      	pop	{r7}
 80078da:	4770      	bx	lr

080078dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80078dc:	b084      	sub	sp, #16
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	f107 0014 	add.w	r0, r7, #20
 80078ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	bc80      	pop	{r7}
 8007918:	b004      	add	sp, #16
 800791a:	4770      	bx	lr

0800791c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800791c:	b480      	push	{r7}
 800791e:	b09b      	sub	sp, #108	; 0x6c
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	b29b      	uxth	r3, r3
 800793a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800793e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007942:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	78db      	ldrb	r3, [r3, #3]
 800794a:	2b03      	cmp	r3, #3
 800794c:	d81f      	bhi.n	800798e <USB_ActivateEndpoint+0x72>
 800794e:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <USB_ActivateEndpoint+0x38>)
 8007950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007954:	08007965 	.word	0x08007965
 8007958:	08007981 	.word	0x08007981
 800795c:	08007997 	.word	0x08007997
 8007960:	08007973 	.word	0x08007973
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007964:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007968:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800796c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007970:	e012      	b.n	8007998 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007972:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007976:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800797a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800797e:	e00b      	b.n	8007998 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007980:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007984:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007988:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800798c:	e004      	b.n	8007998 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007994:	e000      	b.n	8007998 <USB_ActivateEndpoint+0x7c>
      break;
 8007996:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	441a      	add	r2, r3
 80079a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	4313      	orrs	r3, r2
 80079da:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80079ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	7b1b      	ldrb	r3, [r3, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f040 8149 	bne.w	8007c9c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 8084 	beq.w	8007b1c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	4413      	add	r3, r2
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	011a      	lsls	r2, r3, #4
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a36:	613b      	str	r3, [r7, #16]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	88db      	ldrh	r3, [r3, #6]
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	81fb      	strh	r3, [r7, #14]
 8007a56:	89fb      	ldrh	r3, [r7, #14]
 8007a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01b      	beq.n	8007a98 <USB_ActivateEndpoint+0x17c>
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a76:	81bb      	strh	r3, [r7, #12]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	441a      	add	r2, r3
 8007a82:	89bb      	ldrh	r3, [r7, #12]
 8007a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	78db      	ldrb	r3, [r3, #3]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d020      	beq.n	8007ae2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab6:	813b      	strh	r3, [r7, #8]
 8007ab8:	893b      	ldrh	r3, [r7, #8]
 8007aba:	f083 0320 	eor.w	r3, r3, #32
 8007abe:	813b      	strh	r3, [r7, #8]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	441a      	add	r2, r3
 8007aca:	893b      	ldrh	r3, [r7, #8]
 8007acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	8013      	strh	r3, [r2, #0]
 8007ae0:	e27f      	b.n	8007fe2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af8:	817b      	strh	r3, [r7, #10]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	441a      	add	r2, r3
 8007b04:	897b      	ldrh	r3, [r7, #10]
 8007b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	8013      	strh	r3, [r2, #0]
 8007b1a:	e262      	b.n	8007fe2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2c:	4413      	add	r3, r2
 8007b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	011a      	lsls	r2, r3, #4
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	88db      	ldrh	r3, [r3, #6]
 8007b44:	085b      	lsrs	r3, r3, #1
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	4413      	add	r3, r2
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	011a      	lsls	r2, r3, #4
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b72:	623b      	str	r3, [r7, #32]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d112      	bne.n	8007ba2 <USB_ActivateEndpoint+0x286>
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	e02f      	b.n	8007c02 <USB_ActivateEndpoint+0x2e6>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ba8:	d813      	bhi.n	8007bd2 <USB_ActivateEndpoint+0x2b6>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	085b      	lsrs	r3, r3, #1
 8007bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <USB_ActivateEndpoint+0x2a8>
 8007bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	663b      	str	r3, [r7, #96]	; 0x60
 8007bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	029b      	lsls	r3, r3, #10
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	801a      	strh	r2, [r3, #0]
 8007bd0:	e017      	b.n	8007c02 <USB_ActivateEndpoint+0x2e6>
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f003 031f 	and.w	r3, r3, #31
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d102      	bne.n	8007bec <USB_ActivateEndpoint+0x2d0>
 8007be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007be8:	3b01      	subs	r3, #1
 8007bea:	663b      	str	r3, [r7, #96]	; 0x60
 8007bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	029b      	lsls	r3, r3, #10
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	83fb      	strh	r3, [r7, #30]
 8007c10:	8bfb      	ldrh	r3, [r7, #30]
 8007c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d01b      	beq.n	8007c52 <USB_ActivateEndpoint+0x336>
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	881b      	ldrh	r3, [r3, #0]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c30:	83bb      	strh	r3, [r7, #28]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	441a      	add	r2, r3
 8007c3c:	8bbb      	ldrh	r3, [r7, #28]
 8007c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c68:	837b      	strh	r3, [r7, #26]
 8007c6a:	8b7b      	ldrh	r3, [r7, #26]
 8007c6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c70:	837b      	strh	r3, [r7, #26]
 8007c72:	8b7b      	ldrh	r3, [r7, #26]
 8007c74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c78:	837b      	strh	r3, [r7, #26]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	441a      	add	r2, r3
 8007c84:	8b7b      	ldrh	r3, [r7, #26]
 8007c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	8013      	strh	r3, [r2, #0]
 8007c9a:	e1a2      	b.n	8007fe2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	441a      	add	r2, r3
 8007cc0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ccc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ce8:	4413      	add	r3, r2
 8007cea:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	011a      	lsls	r2, r3, #4
 8007cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cfa:	657b      	str	r3, [r7, #84]	; 0x54
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	891b      	ldrh	r3, [r3, #8]
 8007d00:	085b      	lsrs	r3, r3, #1
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d0a:	801a      	strh	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d1c:	4413      	add	r3, r2
 8007d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	011a      	lsls	r2, r3, #4
 8007d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	895b      	ldrh	r3, [r3, #10]
 8007d34:	085b      	lsrs	r3, r3, #1
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d3e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f040 8091 	bne.w	8007e6c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007d58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d01b      	beq.n	8007d9a <USB_ActivateEndpoint+0x47e>
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d78:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	441a      	add	r2, r3
 8007d84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	873b      	strh	r3, [r7, #56]	; 0x38
 8007da8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d01b      	beq.n	8007dea <USB_ActivateEndpoint+0x4ce>
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	441a      	add	r2, r3
 8007dd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e00:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e08:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	441a      	add	r2, r3
 8007e1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e48:	867b      	strh	r3, [r7, #50]	; 0x32
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	441a      	add	r2, r3
 8007e54:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	8013      	strh	r3, [r2, #0]
 8007e6a:	e0ba      	b.n	8007fe2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007e7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01d      	beq.n	8007ec4 <USB_ActivateEndpoint+0x5a8>
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	441a      	add	r2, r3
 8007eac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007ed4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d01d      	beq.n	8007f1c <USB_ActivateEndpoint+0x600>
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	441a      	add	r2, r3
 8007f04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	78db      	ldrb	r3, [r3, #3]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d024      	beq.n	8007f6e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f42:	f083 0320 	eor.w	r3, r3, #32
 8007f46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	441a      	add	r2, r3
 8007f54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	8013      	strh	r3, [r2, #0]
 8007f6c:	e01d      	b.n	8007faa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	441a      	add	r2, r3
 8007f92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	441a      	add	r2, r3
 8007fcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007fe2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	376c      	adds	r7, #108	; 0x6c
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr

08007ff0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b08d      	sub	sp, #52	; 0x34
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	7b1b      	ldrb	r3, [r3, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 808e 	bne.w	8008120 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	785b      	ldrb	r3, [r3, #1]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d044      	beq.n	8008096 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	81bb      	strh	r3, [r7, #12]
 800801a:	89bb      	ldrh	r3, [r7, #12]
 800801c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01b      	beq.n	800805c <USB_DeactivateEndpoint+0x6c>
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803a:	817b      	strh	r3, [r7, #10]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	441a      	add	r2, r3
 8008046:	897b      	ldrh	r3, [r7, #10]
 8008048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008054:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008058:	b29b      	uxth	r3, r3
 800805a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800806e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008072:	813b      	strh	r3, [r7, #8]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	441a      	add	r2, r3
 800807e:	893b      	ldrh	r3, [r7, #8]
 8008080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800808c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008090:	b29b      	uxth	r3, r3
 8008092:	8013      	strh	r3, [r2, #0]
 8008094:	e192      	b.n	80083bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	827b      	strh	r3, [r7, #18]
 80080a4:	8a7b      	ldrh	r3, [r7, #18]
 80080a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d01b      	beq.n	80080e6 <USB_DeactivateEndpoint+0xf6>
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c4:	823b      	strh	r3, [r7, #16]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	441a      	add	r2, r3
 80080d0:	8a3b      	ldrh	r3, [r7, #16]
 80080d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fc:	81fb      	strh	r3, [r7, #14]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	441a      	add	r2, r3
 8008108:	89fb      	ldrh	r3, [r7, #14]
 800810a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800810e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811a:	b29b      	uxth	r3, r3
 800811c:	8013      	strh	r3, [r2, #0]
 800811e:	e14d      	b.n	80083bc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 80a5 	bne.w	8008274 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	843b      	strh	r3, [r7, #32]
 8008138:	8c3b      	ldrh	r3, [r7, #32]
 800813a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d01b      	beq.n	800817a <USB_DeactivateEndpoint+0x18a>
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008158:	83fb      	strh	r3, [r7, #30]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	441a      	add	r2, r3
 8008164:	8bfb      	ldrh	r3, [r7, #30]
 8008166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800816e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008176:	b29b      	uxth	r3, r3
 8008178:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	83bb      	strh	r3, [r7, #28]
 8008188:	8bbb      	ldrh	r3, [r7, #28]
 800818a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818e:	2b00      	cmp	r3, #0
 8008190:	d01b      	beq.n	80081ca <USB_DeactivateEndpoint+0x1da>
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a8:	837b      	strh	r3, [r7, #26]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	441a      	add	r2, r3
 80081b4:	8b7b      	ldrh	r3, [r7, #26]
 80081b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e0:	833b      	strh	r3, [r7, #24]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	441a      	add	r2, r3
 80081ec:	8b3b      	ldrh	r3, [r7, #24]
 80081ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081fe:	b29b      	uxth	r3, r3
 8008200:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008218:	82fb      	strh	r3, [r7, #22]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	441a      	add	r2, r3
 8008224:	8afb      	ldrh	r3, [r7, #22]
 8008226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008236:	b29b      	uxth	r3, r3
 8008238:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800824c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008250:	82bb      	strh	r3, [r7, #20]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	441a      	add	r2, r3
 800825c:	8abb      	ldrh	r3, [r7, #20]
 800825e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800826a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800826e:	b29b      	uxth	r3, r3
 8008270:	8013      	strh	r3, [r2, #0]
 8008272:	e0a3      	b.n	80083bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008282:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01b      	beq.n	80082c4 <USB_DeactivateEndpoint+0x2d4>
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	b29b      	uxth	r3, r3
 800829a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800829e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	441a      	add	r2, r3
 80082ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80082d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01b      	beq.n	8008314 <USB_DeactivateEndpoint+0x324>
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f2:	853b      	strh	r3, [r7, #40]	; 0x28
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	441a      	add	r2, r3
 80082fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800830c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008310:	b29b      	uxth	r3, r3
 8008312:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	b29b      	uxth	r3, r3
 8008322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	441a      	add	r2, r3
 8008336:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800833c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008340:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008348:	b29b      	uxth	r3, r3
 800834a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29b      	uxth	r3, r3
 800835a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800835e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008362:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	441a      	add	r2, r3
 800836e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800837c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008380:	b29b      	uxth	r3, r3
 8008382:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800839a:	847b      	strh	r3, [r7, #34]	; 0x22
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	441a      	add	r2, r3
 80083a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3734      	adds	r7, #52	; 0x34
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bc80      	pop	{r7}
 80083c6:	4770      	bx	lr

080083c8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b0cc      	sub	sp, #304	; 0x130
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	1d3b      	adds	r3, r7, #4
 80083d0:	6018      	str	r0, [r3, #0]
 80083d2:	463b      	mov	r3, r7
 80083d4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083d6:	463b      	mov	r3, r7
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	f040 872e 	bne.w	800923e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80083e2:	463b      	mov	r3, r7
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	699a      	ldr	r2, [r3, #24]
 80083e8:	463b      	mov	r3, r7
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d905      	bls.n	80083fe <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80083f2:	463b      	mov	r3, r7
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80083fc:	e004      	b.n	8008408 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80083fe:	463b      	mov	r3, r7
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008408:	463b      	mov	r3, r7
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	7b1b      	ldrb	r3, [r3, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d134      	bne.n	800847c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008412:	463b      	mov	r3, r7
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	6959      	ldr	r1, [r3, #20]
 8008418:	463b      	mov	r3, r7
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	88da      	ldrh	r2, [r3, #6]
 800841e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008422:	b29b      	uxth	r3, r3
 8008424:	1d38      	adds	r0, r7, #4
 8008426:	6800      	ldr	r0, [r0, #0]
 8008428:	f001 fbee 	bl	8009c08 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800842c:	f107 0310 	add.w	r3, r7, #16
 8008430:	1d3a      	adds	r2, r7, #4
 8008432:	6812      	ldr	r2, [r2, #0]
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	1d3b      	adds	r3, r7, #4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800843e:	b29b      	uxth	r3, r3
 8008440:	4619      	mov	r1, r3
 8008442:	f107 0310 	add.w	r3, r7, #16
 8008446:	f107 0210 	add.w	r2, r7, #16
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	440a      	add	r2, r1
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	463b      	mov	r3, r7
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	011a      	lsls	r2, r3, #4
 8008458:	f107 0310 	add.w	r3, r7, #16
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4413      	add	r3, r2
 8008460:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008464:	f107 030c 	add.w	r3, r7, #12
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846e:	b29a      	uxth	r2, r3
 8008470:	f107 030c 	add.w	r3, r7, #12
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	f000 beac 	b.w	80091d4 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800847c:	463b      	mov	r3, r7
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	78db      	ldrb	r3, [r3, #3]
 8008482:	2b02      	cmp	r3, #2
 8008484:	f040 838c 	bne.w	8008ba0 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008488:	463b      	mov	r3, r7
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6a1a      	ldr	r2, [r3, #32]
 800848e:	463b      	mov	r3, r7
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	429a      	cmp	r2, r3
 8008496:	f240 8330 	bls.w	8008afa <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800849a:	1d3b      	adds	r3, r7, #4
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	463b      	mov	r3, r7
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80084b8:	1d3b      	adds	r3, r7, #4
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	463b      	mov	r3, r7
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	441a      	add	r2, r3
 80084c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80084ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80084d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084da:	b29b      	uxth	r3, r3
 80084dc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80084de:	463b      	mov	r3, r7
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6a1a      	ldr	r2, [r3, #32]
 80084e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e8:	1ad2      	subs	r2, r2, r3
 80084ea:	463b      	mov	r3, r7
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80084f0:	1d3b      	adds	r3, r7, #4
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	463b      	mov	r3, r7
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 819e 	beq.w	8008848 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800850c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008510:	1d3a      	adds	r2, r7, #4
 8008512:	6812      	ldr	r2, [r2, #0]
 8008514:	601a      	str	r2, [r3, #0]
 8008516:	463b      	mov	r3, r7
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	785b      	ldrb	r3, [r3, #1]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d17a      	bne.n	8008616 <USB_EPStartXfer+0x24e>
 8008520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008524:	1d3a      	adds	r2, r7, #4
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	1d3b      	adds	r3, r7, #4
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008532:	b29b      	uxth	r3, r3
 8008534:	4619      	mov	r1, r3
 8008536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800853a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	440a      	add	r2, r1
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	463b      	mov	r3, r7
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	011a      	lsls	r2, r3, #4
 800854c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4413      	add	r3, r2
 8008554:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008562:	2b00      	cmp	r3, #0
 8008564:	d11a      	bne.n	800859c <USB_EPStartXfer+0x1d4>
 8008566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	b29b      	uxth	r3, r3
 8008570:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008574:	b29a      	uxth	r2, r3
 8008576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	801a      	strh	r2, [r3, #0]
 800857e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008590:	b29a      	uxth	r2, r3
 8008592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	801a      	strh	r2, [r3, #0]
 800859a:	e062      	b.n	8008662 <USB_EPStartXfer+0x29a>
 800859c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a0:	2b3e      	cmp	r3, #62	; 0x3e
 80085a2:	d819      	bhi.n	80085d8 <USB_EPStartXfer+0x210>
 80085a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a8:	085b      	lsrs	r3, r3, #1
 80085aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80085ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d004      	beq.n	80085c4 <USB_EPStartXfer+0x1fc>
 80085ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085be:	3301      	adds	r3, #1
 80085c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80085c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	029b      	lsls	r3, r3, #10
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	e044      	b.n	8008662 <USB_EPStartXfer+0x29a>
 80085d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085dc:	095b      	lsrs	r3, r3, #5
 80085de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80085e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d104      	bne.n	80085f8 <USB_EPStartXfer+0x230>
 80085ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085f2:	3b01      	subs	r3, #1
 80085f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80085f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	029b      	lsls	r3, r3, #10
 8008600:	b29b      	uxth	r3, r3
 8008602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800860a:	b29a      	uxth	r2, r3
 800860c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	801a      	strh	r2, [r3, #0]
 8008614:	e025      	b.n	8008662 <USB_EPStartXfer+0x29a>
 8008616:	463b      	mov	r3, r7
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	785b      	ldrb	r3, [r3, #1]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d120      	bne.n	8008662 <USB_EPStartXfer+0x29a>
 8008620:	1d3b      	adds	r3, r7, #4
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008628:	b29b      	uxth	r3, r3
 800862a:	4619      	mov	r1, r3
 800862c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008630:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008634:	6812      	ldr	r2, [r2, #0]
 8008636:	440a      	add	r2, r1
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	463b      	mov	r3, r7
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	011a      	lsls	r2, r3, #4
 8008642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4413      	add	r3, r2
 800864a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800864e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008658:	b29a      	uxth	r2, r3
 800865a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008662:	463b      	mov	r3, r7
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	895b      	ldrh	r3, [r3, #10]
 8008668:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800866c:	463b      	mov	r3, r7
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6959      	ldr	r1, [r3, #20]
 8008672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008676:	b29b      	uxth	r3, r3
 8008678:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800867c:	1d38      	adds	r0, r7, #4
 800867e:	6800      	ldr	r0, [r0, #0]
 8008680:	f001 fac2 	bl	8009c08 <USB_WritePMA>
            ep->xfer_buff += len;
 8008684:	463b      	mov	r3, r7
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	695a      	ldr	r2, [r3, #20]
 800868a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800868e:	441a      	add	r2, r3
 8008690:	463b      	mov	r3, r7
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008696:	463b      	mov	r3, r7
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6a1a      	ldr	r2, [r3, #32]
 800869c:	463b      	mov	r3, r7
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d909      	bls.n	80086ba <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80086a6:	463b      	mov	r3, r7
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6a1a      	ldr	r2, [r3, #32]
 80086ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b0:	1ad2      	subs	r2, r2, r3
 80086b2:	463b      	mov	r3, r7
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	621a      	str	r2, [r3, #32]
 80086b8:	e008      	b.n	80086cc <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80086ba:	463b      	mov	r3, r7
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80086c4:	463b      	mov	r3, r7
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2200      	movs	r2, #0
 80086ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086cc:	463b      	mov	r3, r7
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d17a      	bne.n	80087cc <USB_EPStartXfer+0x404>
 80086d6:	f107 0318 	add.w	r3, r7, #24
 80086da:	1d3a      	adds	r2, r7, #4
 80086dc:	6812      	ldr	r2, [r2, #0]
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	1d3b      	adds	r3, r7, #4
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	4619      	mov	r1, r3
 80086ec:	f107 0318 	add.w	r3, r7, #24
 80086f0:	f107 0218 	add.w	r2, r7, #24
 80086f4:	6812      	ldr	r2, [r2, #0]
 80086f6:	440a      	add	r2, r1
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	463b      	mov	r3, r7
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	011a      	lsls	r2, r3, #4
 8008702:	f107 0318 	add.w	r3, r7, #24
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4413      	add	r3, r2
 800870a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800870e:	f107 0314 	add.w	r3, r7, #20
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008718:	2b00      	cmp	r3, #0
 800871a:	d11a      	bne.n	8008752 <USB_EPStartXfer+0x38a>
 800871c:	f107 0314 	add.w	r3, r7, #20
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	b29b      	uxth	r3, r3
 8008726:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800872a:	b29a      	uxth	r2, r3
 800872c:	f107 0314 	add.w	r3, r7, #20
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	f107 0314 	add.w	r3, r7, #20
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	b29b      	uxth	r3, r3
 800873e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008746:	b29a      	uxth	r2, r3
 8008748:	f107 0314 	add.w	r3, r7, #20
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	801a      	strh	r2, [r3, #0]
 8008750:	e067      	b.n	8008822 <USB_EPStartXfer+0x45a>
 8008752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008756:	2b3e      	cmp	r3, #62	; 0x3e
 8008758:	d819      	bhi.n	800878e <USB_EPStartXfer+0x3c6>
 800875a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800875e:	085b      	lsrs	r3, r3, #1
 8008760:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <USB_EPStartXfer+0x3b2>
 8008770:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008774:	3301      	adds	r3, #1
 8008776:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800877a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800877e:	b29b      	uxth	r3, r3
 8008780:	029b      	lsls	r3, r3, #10
 8008782:	b29a      	uxth	r2, r3
 8008784:	f107 0314 	add.w	r3, r7, #20
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	801a      	strh	r2, [r3, #0]
 800878c:	e049      	b.n	8008822 <USB_EPStartXfer+0x45a>
 800878e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800879c:	f003 031f 	and.w	r3, r3, #31
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d104      	bne.n	80087ae <USB_EPStartXfer+0x3e6>
 80087a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80087a8:	3b01      	subs	r3, #1
 80087aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80087ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	029b      	lsls	r3, r3, #10
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	f107 0314 	add.w	r3, r7, #20
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	801a      	strh	r2, [r3, #0]
 80087ca:	e02a      	b.n	8008822 <USB_EPStartXfer+0x45a>
 80087cc:	463b      	mov	r3, r7
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d125      	bne.n	8008822 <USB_EPStartXfer+0x45a>
 80087d6:	f107 0320 	add.w	r3, r7, #32
 80087da:	1d3a      	adds	r2, r7, #4
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	1d3b      	adds	r3, r7, #4
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	4619      	mov	r1, r3
 80087ec:	f107 0320 	add.w	r3, r7, #32
 80087f0:	f107 0220 	add.w	r2, r7, #32
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	440a      	add	r2, r1
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	463b      	mov	r3, r7
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	011a      	lsls	r2, r3, #4
 8008802:	f107 0320 	add.w	r3, r7, #32
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4413      	add	r3, r2
 800880a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800880e:	f107 031c 	add.w	r3, r7, #28
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008818:	b29a      	uxth	r2, r3
 800881a:	f107 031c 	add.w	r3, r7, #28
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008822:	463b      	mov	r3, r7
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	891b      	ldrh	r3, [r3, #8]
 8008828:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800882c:	463b      	mov	r3, r7
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6959      	ldr	r1, [r3, #20]
 8008832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008836:	b29b      	uxth	r3, r3
 8008838:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800883c:	1d38      	adds	r0, r7, #4
 800883e:	6800      	ldr	r0, [r0, #0]
 8008840:	f001 f9e2 	bl	8009c08 <USB_WritePMA>
 8008844:	f000 bcc6 	b.w	80091d4 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008848:	463b      	mov	r3, r7
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	785b      	ldrb	r3, [r3, #1]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d164      	bne.n	800891c <USB_EPStartXfer+0x554>
 8008852:	1d3b      	adds	r3, r7, #4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	64bb      	str	r3, [r7, #72]	; 0x48
 8008858:	1d3b      	adds	r3, r7, #4
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008860:	b29b      	uxth	r3, r3
 8008862:	461a      	mov	r2, r3
 8008864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008866:	4413      	add	r3, r2
 8008868:	64bb      	str	r3, [r7, #72]	; 0x48
 800886a:	463b      	mov	r3, r7
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	011a      	lsls	r2, r3, #4
 8008872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008874:	4413      	add	r3, r2
 8008876:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800887a:	647b      	str	r3, [r7, #68]	; 0x44
 800887c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d112      	bne.n	80088aa <USB_EPStartXfer+0x4e2>
 8008884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	b29b      	uxth	r3, r3
 800888a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800888e:	b29a      	uxth	r2, r3
 8008890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800889e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a6:	801a      	strh	r2, [r3, #0]
 80088a8:	e057      	b.n	800895a <USB_EPStartXfer+0x592>
 80088aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ae:	2b3e      	cmp	r3, #62	; 0x3e
 80088b0:	d817      	bhi.n	80088e2 <USB_EPStartXfer+0x51a>
 80088b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b6:	085b      	lsrs	r3, r3, #1
 80088b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80088bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <USB_EPStartXfer+0x50a>
 80088c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80088cc:	3301      	adds	r3, #1
 80088ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80088d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	029b      	lsls	r3, r3, #10
 80088da:	b29a      	uxth	r2, r3
 80088dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	e03b      	b.n	800895a <USB_EPStartXfer+0x592>
 80088e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e6:	095b      	lsrs	r3, r3, #5
 80088e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80088ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f0:	f003 031f 	and.w	r3, r3, #31
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d104      	bne.n	8008902 <USB_EPStartXfer+0x53a>
 80088f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80088fc:	3b01      	subs	r3, #1
 80088fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008902:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008906:	b29b      	uxth	r3, r3
 8008908:	029b      	lsls	r3, r3, #10
 800890a:	b29b      	uxth	r3, r3
 800890c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008914:	b29a      	uxth	r2, r3
 8008916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008918:	801a      	strh	r2, [r3, #0]
 800891a:	e01e      	b.n	800895a <USB_EPStartXfer+0x592>
 800891c:	463b      	mov	r3, r7
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	785b      	ldrb	r3, [r3, #1]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d119      	bne.n	800895a <USB_EPStartXfer+0x592>
 8008926:	1d3b      	adds	r3, r7, #4
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	653b      	str	r3, [r7, #80]	; 0x50
 800892c:	1d3b      	adds	r3, r7, #4
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008934:	b29b      	uxth	r3, r3
 8008936:	461a      	mov	r2, r3
 8008938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800893a:	4413      	add	r3, r2
 800893c:	653b      	str	r3, [r7, #80]	; 0x50
 800893e:	463b      	mov	r3, r7
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	011a      	lsls	r2, r3, #4
 8008946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008948:	4413      	add	r3, r2
 800894a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800894e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008954:	b29a      	uxth	r2, r3
 8008956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008958:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800895a:	463b      	mov	r3, r7
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	891b      	ldrh	r3, [r3, #8]
 8008960:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008964:	463b      	mov	r3, r7
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6959      	ldr	r1, [r3, #20]
 800896a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896e:	b29b      	uxth	r3, r3
 8008970:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008974:	1d38      	adds	r0, r7, #4
 8008976:	6800      	ldr	r0, [r0, #0]
 8008978:	f001 f946 	bl	8009c08 <USB_WritePMA>
            ep->xfer_buff += len;
 800897c:	463b      	mov	r3, r7
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	695a      	ldr	r2, [r3, #20]
 8008982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008986:	441a      	add	r2, r3
 8008988:	463b      	mov	r3, r7
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800898e:	463b      	mov	r3, r7
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6a1a      	ldr	r2, [r3, #32]
 8008994:	463b      	mov	r3, r7
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	429a      	cmp	r2, r3
 800899c:	d909      	bls.n	80089b2 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800899e:	463b      	mov	r3, r7
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6a1a      	ldr	r2, [r3, #32]
 80089a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a8:	1ad2      	subs	r2, r2, r3
 80089aa:	463b      	mov	r3, r7
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	621a      	str	r2, [r3, #32]
 80089b0:	e008      	b.n	80089c4 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80089b2:	463b      	mov	r3, r7
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80089bc:	463b      	mov	r3, r7
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2200      	movs	r2, #0
 80089c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089c4:	1d3b      	adds	r3, r7, #4
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	643b      	str	r3, [r7, #64]	; 0x40
 80089ca:	463b      	mov	r3, r7
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	785b      	ldrb	r3, [r3, #1]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d164      	bne.n	8008a9e <USB_EPStartXfer+0x6d6>
 80089d4:	1d3b      	adds	r3, r7, #4
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80089da:	1d3b      	adds	r3, r7, #4
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	461a      	mov	r2, r3
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	4413      	add	r3, r2
 80089ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80089ec:	463b      	mov	r3, r7
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	011a      	lsls	r2, r3, #4
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	4413      	add	r3, r2
 80089f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089fc:	637b      	str	r3, [r7, #52]	; 0x34
 80089fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d112      	bne.n	8008a2c <USB_EPStartXfer+0x664>
 8008a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a14:	801a      	strh	r2, [r3, #0]
 8008a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a18:	881b      	ldrh	r3, [r3, #0]
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a28:	801a      	strh	r2, [r3, #0]
 8008a2a:	e054      	b.n	8008ad6 <USB_EPStartXfer+0x70e>
 8008a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a30:	2b3e      	cmp	r3, #62	; 0x3e
 8008a32:	d817      	bhi.n	8008a64 <USB_EPStartXfer+0x69c>
 8008a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a38:	085b      	lsrs	r3, r3, #1
 8008a3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d004      	beq.n	8008a54 <USB_EPStartXfer+0x68c>
 8008a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008a4e:	3301      	adds	r3, #1
 8008a50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	029b      	lsls	r3, r3, #10
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a60:	801a      	strh	r2, [r3, #0]
 8008a62:	e038      	b.n	8008ad6 <USB_EPStartXfer+0x70e>
 8008a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a68:	095b      	lsrs	r3, r3, #5
 8008a6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a72:	f003 031f 	and.w	r3, r3, #31
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d104      	bne.n	8008a84 <USB_EPStartXfer+0x6bc>
 8008a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	029b      	lsls	r3, r3, #10
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	801a      	strh	r2, [r3, #0]
 8008a9c:	e01b      	b.n	8008ad6 <USB_EPStartXfer+0x70e>
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	785b      	ldrb	r3, [r3, #1]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d116      	bne.n	8008ad6 <USB_EPStartXfer+0x70e>
 8008aa8:	1d3b      	adds	r3, r7, #4
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab6:	4413      	add	r3, r2
 8008ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8008aba:	463b      	mov	r3, r7
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	011a      	lsls	r2, r3, #4
 8008ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ad6:	463b      	mov	r3, r7
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	895b      	ldrh	r3, [r3, #10]
 8008adc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ae0:	463b      	mov	r3, r7
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6959      	ldr	r1, [r3, #20]
 8008ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008af0:	1d38      	adds	r0, r7, #4
 8008af2:	6800      	ldr	r0, [r0, #0]
 8008af4:	f001 f888 	bl	8009c08 <USB_WritePMA>
 8008af8:	e36c      	b.n	80091d4 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008afa:	463b      	mov	r3, r7
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008b04:	1d3b      	adds	r3, r7, #4
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	463b      	mov	r3, r7
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b1e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008b22:	1d3b      	adds	r3, r7, #4
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	463b      	mov	r3, r7
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	441a      	add	r2, r3
 8008b30:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b48:	1d3b      	adds	r3, r7, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b4e:	1d3b      	adds	r3, r7, #4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	461a      	mov	r2, r3
 8008b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b5c:	4413      	add	r3, r2
 8008b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b60:	463b      	mov	r3, r7
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	011a      	lsls	r2, r3, #4
 8008b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b70:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b7c:	463b      	mov	r3, r7
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	891b      	ldrh	r3, [r3, #8]
 8008b82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b86:	463b      	mov	r3, r7
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6959      	ldr	r1, [r3, #20]
 8008b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b96:	1d38      	adds	r0, r7, #4
 8008b98:	6800      	ldr	r0, [r0, #0]
 8008b9a:	f001 f835 	bl	8009c08 <USB_WritePMA>
 8008b9e:	e319      	b.n	80091d4 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008ba0:	1d3b      	adds	r3, r7, #4
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	463b      	mov	r3, r7
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bba:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008bbe:	1d3b      	adds	r3, r7, #4
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	441a      	add	r2, r3
 8008bcc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bd8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008be4:	463b      	mov	r3, r7
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6a1a      	ldr	r2, [r3, #32]
 8008bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bee:	1ad2      	subs	r2, r2, r3
 8008bf0:	463b      	mov	r3, r7
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008bf6:	1d3b      	adds	r3, r7, #4
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	463b      	mov	r3, r7
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 8162 	beq.w	8008ed6 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c12:	1d3b      	adds	r3, r7, #4
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c1a:	463b      	mov	r3, r7
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d164      	bne.n	8008cee <USB_EPStartXfer+0x926>
 8008c24:	1d3b      	adds	r3, r7, #4
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c2a:	1d3b      	adds	r3, r7, #4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	461a      	mov	r2, r3
 8008c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c38:	4413      	add	r3, r2
 8008c3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c3c:	463b      	mov	r3, r7
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	011a      	lsls	r2, r3, #4
 8008c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c46:	4413      	add	r3, r2
 8008c48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c4c:	677b      	str	r3, [r7, #116]	; 0x74
 8008c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d112      	bne.n	8008c7c <USB_EPStartXfer+0x8b4>
 8008c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c78:	801a      	strh	r2, [r3, #0]
 8008c7a:	e057      	b.n	8008d2c <USB_EPStartXfer+0x964>
 8008c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c80:	2b3e      	cmp	r3, #62	; 0x3e
 8008c82:	d817      	bhi.n	8008cb4 <USB_EPStartXfer+0x8ec>
 8008c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c88:	085b      	lsrs	r3, r3, #1
 8008c8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d004      	beq.n	8008ca4 <USB_EPStartXfer+0x8dc>
 8008c9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ca4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	029b      	lsls	r3, r3, #10
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cb0:	801a      	strh	r2, [r3, #0]
 8008cb2:	e03b      	b.n	8008d2c <USB_EPStartXfer+0x964>
 8008cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cb8:	095b      	lsrs	r3, r3, #5
 8008cba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc2:	f003 031f 	and.w	r3, r3, #31
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d104      	bne.n	8008cd4 <USB_EPStartXfer+0x90c>
 8008cca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008cd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	029b      	lsls	r3, r3, #10
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	e01e      	b.n	8008d2c <USB_EPStartXfer+0x964>
 8008cee:	463b      	mov	r3, r7
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	785b      	ldrb	r3, [r3, #1]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d119      	bne.n	8008d2c <USB_EPStartXfer+0x964>
 8008cf8:	1d3b      	adds	r3, r7, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	461a      	mov	r2, r3
 8008d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d08:	4413      	add	r3, r2
 8008d0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d0e:	463b      	mov	r3, r7
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	011a      	lsls	r2, r3, #4
 8008d16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008d2c:	463b      	mov	r3, r7
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	895b      	ldrh	r3, [r3, #10]
 8008d32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d36:	463b      	mov	r3, r7
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6959      	ldr	r1, [r3, #20]
 8008d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008d46:	1d38      	adds	r0, r7, #4
 8008d48:	6800      	ldr	r0, [r0, #0]
 8008d4a:	f000 ff5d 	bl	8009c08 <USB_WritePMA>
          ep->xfer_buff += len;
 8008d4e:	463b      	mov	r3, r7
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	695a      	ldr	r2, [r3, #20]
 8008d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d58:	441a      	add	r2, r3
 8008d5a:	463b      	mov	r3, r7
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008d60:	463b      	mov	r3, r7
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6a1a      	ldr	r2, [r3, #32]
 8008d66:	463b      	mov	r3, r7
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d909      	bls.n	8008d84 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008d70:	463b      	mov	r3, r7
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6a1a      	ldr	r2, [r3, #32]
 8008d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d7a:	1ad2      	subs	r2, r2, r3
 8008d7c:	463b      	mov	r3, r7
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	621a      	str	r2, [r3, #32]
 8008d82:	e008      	b.n	8008d96 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008d84:	463b      	mov	r3, r7
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d8e:	463b      	mov	r3, r7
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2200      	movs	r2, #0
 8008d94:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 821a 	beq.w	80091d4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008da0:	463b      	mov	r3, r7
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	785b      	ldrb	r3, [r3, #1]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d164      	bne.n	8008e74 <USB_EPStartXfer+0xaac>
 8008daa:	1d3b      	adds	r3, r7, #4
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8008db0:	1d3b      	adds	r3, r7, #4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	461a      	mov	r2, r3
 8008dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dbe:	4413      	add	r3, r2
 8008dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dc2:	463b      	mov	r3, r7
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	011a      	lsls	r2, r3, #4
 8008dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dcc:	4413      	add	r3, r2
 8008dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dd2:	667b      	str	r3, [r7, #100]	; 0x64
 8008dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d112      	bne.n	8008e02 <USB_EPStartXfer+0xa3a>
 8008ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dea:	801a      	strh	r2, [r3, #0]
 8008dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dfe:	801a      	strh	r2, [r3, #0]
 8008e00:	e057      	b.n	8008eb2 <USB_EPStartXfer+0xaea>
 8008e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e06:	2b3e      	cmp	r3, #62	; 0x3e
 8008e08:	d817      	bhi.n	8008e3a <USB_EPStartXfer+0xa72>
 8008e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e0e:	085b      	lsrs	r3, r3, #1
 8008e10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d004      	beq.n	8008e2a <USB_EPStartXfer+0xa62>
 8008e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e24:	3301      	adds	r3, #1
 8008e26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e36:	801a      	strh	r2, [r3, #0]
 8008e38:	e03b      	b.n	8008eb2 <USB_EPStartXfer+0xaea>
 8008e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e3e:	095b      	lsrs	r3, r3, #5
 8008e40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e48:	f003 031f 	and.w	r3, r3, #31
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d104      	bne.n	8008e5a <USB_EPStartXfer+0xa92>
 8008e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e54:	3b01      	subs	r3, #1
 8008e56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	029b      	lsls	r3, r3, #10
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e70:	801a      	strh	r2, [r3, #0]
 8008e72:	e01e      	b.n	8008eb2 <USB_EPStartXfer+0xaea>
 8008e74:	463b      	mov	r3, r7
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	785b      	ldrb	r3, [r3, #1]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d119      	bne.n	8008eb2 <USB_EPStartXfer+0xaea>
 8008e7e:	1d3b      	adds	r3, r7, #4
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	673b      	str	r3, [r7, #112]	; 0x70
 8008e84:	1d3b      	adds	r3, r7, #4
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e92:	4413      	add	r3, r2
 8008e94:	673b      	str	r3, [r7, #112]	; 0x70
 8008e96:	463b      	mov	r3, r7
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	011a      	lsls	r2, r3, #4
 8008e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008eb2:	463b      	mov	r3, r7
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	891b      	ldrh	r3, [r3, #8]
 8008eb8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ebc:	463b      	mov	r3, r7
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6959      	ldr	r1, [r3, #20]
 8008ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ecc:	1d38      	adds	r0, r7, #4
 8008ece:	6800      	ldr	r0, [r0, #0]
 8008ed0:	f000 fe9a 	bl	8009c08 <USB_WritePMA>
 8008ed4:	e17e      	b.n	80091d4 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	785b      	ldrb	r3, [r3, #1]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d16f      	bne.n	8008fc0 <USB_EPStartXfer+0xbf8>
 8008ee0:	1d3b      	adds	r3, r7, #4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ee8:	1d3b      	adds	r3, r7, #4
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ef8:	4413      	add	r3, r2
 8008efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008efe:	463b      	mov	r3, r7
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	011a      	lsls	r2, r3, #4
 8008f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d116      	bne.n	8008f4a <USB_EPStartXfer+0xb82>
 8008f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f2e:	801a      	strh	r2, [r3, #0]
 8008f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f46:	801a      	strh	r2, [r3, #0]
 8008f48:	e05f      	b.n	800900a <USB_EPStartXfer+0xc42>
 8008f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8008f50:	d818      	bhi.n	8008f84 <USB_EPStartXfer+0xbbc>
 8008f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f56:	085b      	lsrs	r3, r3, #1
 8008f58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <USB_EPStartXfer+0xbaa>
 8008f68:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	029b      	lsls	r3, r3, #10
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f80:	801a      	strh	r2, [r3, #0]
 8008f82:	e042      	b.n	800900a <USB_EPStartXfer+0xc42>
 8008f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f88:	095b      	lsrs	r3, r3, #5
 8008f8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f92:	f003 031f 	and.w	r3, r3, #31
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d104      	bne.n	8008fa4 <USB_EPStartXfer+0xbdc>
 8008f9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fa4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	029b      	lsls	r3, r3, #10
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	e024      	b.n	800900a <USB_EPStartXfer+0xc42>
 8008fc0:	463b      	mov	r3, r7
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	785b      	ldrb	r3, [r3, #1]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d11f      	bne.n	800900a <USB_EPStartXfer+0xc42>
 8008fca:	1d3b      	adds	r3, r7, #4
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008fd2:	1d3b      	adds	r3, r7, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008fe8:	463b      	mov	r3, r7
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	011a      	lsls	r2, r3, #4
 8008ff0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009002:	b29a      	uxth	r2, r3
 8009004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009008:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800900a:	463b      	mov	r3, r7
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	891b      	ldrh	r3, [r3, #8]
 8009010:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009014:	463b      	mov	r3, r7
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6959      	ldr	r1, [r3, #20]
 800901a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901e:	b29b      	uxth	r3, r3
 8009020:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009024:	1d38      	adds	r0, r7, #4
 8009026:	6800      	ldr	r0, [r0, #0]
 8009028:	f000 fdee 	bl	8009c08 <USB_WritePMA>
          ep->xfer_buff += len;
 800902c:	463b      	mov	r3, r7
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	695a      	ldr	r2, [r3, #20]
 8009032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009036:	441a      	add	r2, r3
 8009038:	463b      	mov	r3, r7
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800903e:	463b      	mov	r3, r7
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6a1a      	ldr	r2, [r3, #32]
 8009044:	463b      	mov	r3, r7
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	429a      	cmp	r2, r3
 800904c:	d909      	bls.n	8009062 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800904e:	463b      	mov	r3, r7
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6a1a      	ldr	r2, [r3, #32]
 8009054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009058:	1ad2      	subs	r2, r2, r3
 800905a:	463b      	mov	r3, r7
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	621a      	str	r2, [r3, #32]
 8009060:	e008      	b.n	8009074 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8009062:	463b      	mov	r3, r7
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800906c:	463b      	mov	r3, r7
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2200      	movs	r2, #0
 8009072:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 80ab 	beq.w	80091d4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800907e:	1d3b      	adds	r3, r7, #4
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009086:	463b      	mov	r3, r7
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	785b      	ldrb	r3, [r3, #1]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d16f      	bne.n	8009170 <USB_EPStartXfer+0xda8>
 8009090:	1d3b      	adds	r3, r7, #4
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009098:	1d3b      	adds	r3, r7, #4
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	461a      	mov	r2, r3
 80090a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090a8:	4413      	add	r3, r2
 80090aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090ae:	463b      	mov	r3, r7
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	011a      	lsls	r2, r3, #4
 80090b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090ba:	4413      	add	r3, r2
 80090bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d116      	bne.n	80090fa <USB_EPStartXfer+0xd32>
 80090cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090d8:	b29a      	uxth	r2, r3
 80090da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090de:	801a      	strh	r2, [r3, #0]
 80090e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090f6:	801a      	strh	r2, [r3, #0]
 80090f8:	e05b      	b.n	80091b2 <USB_EPStartXfer+0xdea>
 80090fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009100:	d818      	bhi.n	8009134 <USB_EPStartXfer+0xd6c>
 8009102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009106:	085b      	lsrs	r3, r3, #1
 8009108:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800910c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d004      	beq.n	8009122 <USB_EPStartXfer+0xd5a>
 8009118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800911c:	3301      	adds	r3, #1
 800911e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009126:	b29b      	uxth	r3, r3
 8009128:	029b      	lsls	r3, r3, #10
 800912a:	b29a      	uxth	r2, r3
 800912c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009130:	801a      	strh	r2, [r3, #0]
 8009132:	e03e      	b.n	80091b2 <USB_EPStartXfer+0xdea>
 8009134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009138:	095b      	lsrs	r3, r3, #5
 800913a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800913e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009142:	f003 031f 	and.w	r3, r3, #31
 8009146:	2b00      	cmp	r3, #0
 8009148:	d104      	bne.n	8009154 <USB_EPStartXfer+0xd8c>
 800914a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800914e:	3b01      	subs	r3, #1
 8009150:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009158:	b29b      	uxth	r3, r3
 800915a:	029b      	lsls	r3, r3, #10
 800915c:	b29b      	uxth	r3, r3
 800915e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009166:	b29a      	uxth	r2, r3
 8009168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800916c:	801a      	strh	r2, [r3, #0]
 800916e:	e020      	b.n	80091b2 <USB_EPStartXfer+0xdea>
 8009170:	463b      	mov	r3, r7
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	785b      	ldrb	r3, [r3, #1]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d11b      	bne.n	80091b2 <USB_EPStartXfer+0xdea>
 800917a:	1d3b      	adds	r3, r7, #4
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009182:	b29b      	uxth	r3, r3
 8009184:	461a      	mov	r2, r3
 8009186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800918a:	4413      	add	r3, r2
 800918c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009190:	463b      	mov	r3, r7
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	011a      	lsls	r2, r3, #4
 8009198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800919c:	4413      	add	r3, r2
 800919e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80091b2:	463b      	mov	r3, r7
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	895b      	ldrh	r3, [r3, #10]
 80091b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091bc:	463b      	mov	r3, r7
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6959      	ldr	r1, [r3, #20]
 80091c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80091cc:	1d38      	adds	r0, r7, #4
 80091ce:	6800      	ldr	r0, [r0, #0]
 80091d0:	f000 fd1a 	bl	8009c08 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80091d4:	1d3b      	adds	r3, r7, #4
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	463b      	mov	r3, r7
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	f107 020a 	add.w	r2, r7, #10
 80091ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091f2:	8013      	strh	r3, [r2, #0]
 80091f4:	f107 030a 	add.w	r3, r7, #10
 80091f8:	f107 020a 	add.w	r2, r7, #10
 80091fc:	8812      	ldrh	r2, [r2, #0]
 80091fe:	f082 0210 	eor.w	r2, r2, #16
 8009202:	801a      	strh	r2, [r3, #0]
 8009204:	f107 030a 	add.w	r3, r7, #10
 8009208:	f107 020a 	add.w	r2, r7, #10
 800920c:	8812      	ldrh	r2, [r2, #0]
 800920e:	f082 0220 	eor.w	r2, r2, #32
 8009212:	801a      	strh	r2, [r3, #0]
 8009214:	1d3b      	adds	r3, r7, #4
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	463b      	mov	r3, r7
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	441a      	add	r2, r3
 8009222:	f107 030a 	add.w	r3, r7, #10
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800922c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009238:	b29b      	uxth	r3, r3
 800923a:	8013      	strh	r3, [r2, #0]
 800923c:	e3b5      	b.n	80099aa <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800923e:	463b      	mov	r3, r7
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	7b1b      	ldrb	r3, [r3, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	f040 8090 	bne.w	800936a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800924a:	463b      	mov	r3, r7
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	699a      	ldr	r2, [r3, #24]
 8009250:	463b      	mov	r3, r7
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	429a      	cmp	r2, r3
 8009258:	d90e      	bls.n	8009278 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800925a:	463b      	mov	r3, r7
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009264:	463b      	mov	r3, r7
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699a      	ldr	r2, [r3, #24]
 800926a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800926e:	1ad2      	subs	r2, r2, r3
 8009270:	463b      	mov	r3, r7
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	619a      	str	r2, [r3, #24]
 8009276:	e008      	b.n	800928a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009278:	463b      	mov	r3, r7
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009282:	463b      	mov	r3, r7
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2200      	movs	r2, #0
 8009288:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800928a:	1d3b      	adds	r3, r7, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009292:	1d3b      	adds	r3, r7, #4
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800929a:	b29b      	uxth	r3, r3
 800929c:	461a      	mov	r2, r3
 800929e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80092a2:	4413      	add	r3, r2
 80092a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092a8:	463b      	mov	r3, r7
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	011a      	lsls	r2, r3, #4
 80092b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80092b4:	4413      	add	r3, r2
 80092b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d116      	bne.n	80092f4 <USB_EPStartXfer+0xf2c>
 80092c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092d8:	801a      	strh	r2, [r3, #0]
 80092da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	e32c      	b.n	800994e <USB_EPStartXfer+0x1586>
 80092f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092f8:	2b3e      	cmp	r3, #62	; 0x3e
 80092fa:	d818      	bhi.n	800932e <USB_EPStartXfer+0xf66>
 80092fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009300:	085b      	lsrs	r3, r3, #1
 8009302:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	d004      	beq.n	800931c <USB_EPStartXfer+0xf54>
 8009312:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009316:	3301      	adds	r3, #1
 8009318:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800931c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009320:	b29b      	uxth	r3, r3
 8009322:	029b      	lsls	r3, r3, #10
 8009324:	b29a      	uxth	r2, r3
 8009326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800932a:	801a      	strh	r2, [r3, #0]
 800932c:	e30f      	b.n	800994e <USB_EPStartXfer+0x1586>
 800932e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009332:	095b      	lsrs	r3, r3, #5
 8009334:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800933c:	f003 031f 	and.w	r3, r3, #31
 8009340:	2b00      	cmp	r3, #0
 8009342:	d104      	bne.n	800934e <USB_EPStartXfer+0xf86>
 8009344:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009348:	3b01      	subs	r3, #1
 800934a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800934e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009352:	b29b      	uxth	r3, r3
 8009354:	029b      	lsls	r3, r3, #10
 8009356:	b29b      	uxth	r3, r3
 8009358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800935c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009360:	b29a      	uxth	r2, r3
 8009362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009366:	801a      	strh	r2, [r3, #0]
 8009368:	e2f1      	b.n	800994e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800936a:	463b      	mov	r3, r7
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	78db      	ldrb	r3, [r3, #3]
 8009370:	2b02      	cmp	r3, #2
 8009372:	f040 818f 	bne.w	8009694 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009376:	463b      	mov	r3, r7
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d175      	bne.n	800946c <USB_EPStartXfer+0x10a4>
 8009380:	1d3b      	adds	r3, r7, #4
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009388:	1d3b      	adds	r3, r7, #4
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009390:	b29b      	uxth	r3, r3
 8009392:	461a      	mov	r2, r3
 8009394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009398:	4413      	add	r3, r2
 800939a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800939e:	463b      	mov	r3, r7
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	011a      	lsls	r2, r3, #4
 80093a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80093aa:	4413      	add	r3, r2
 80093ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093b4:	463b      	mov	r3, r7
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d116      	bne.n	80093ec <USB_EPStartXfer+0x1024>
 80093be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093d0:	801a      	strh	r2, [r3, #0]
 80093d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	b29b      	uxth	r3, r3
 80093da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093e8:	801a      	strh	r2, [r3, #0]
 80093ea:	e065      	b.n	80094b8 <USB_EPStartXfer+0x10f0>
 80093ec:	463b      	mov	r3, r7
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	2b3e      	cmp	r3, #62	; 0x3e
 80093f4:	d81a      	bhi.n	800942c <USB_EPStartXfer+0x1064>
 80093f6:	463b      	mov	r3, r7
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	085b      	lsrs	r3, r3, #1
 80093fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009402:	463b      	mov	r3, r7
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	d004      	beq.n	800941a <USB_EPStartXfer+0x1052>
 8009410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009414:	3301      	adds	r3, #1
 8009416:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800941a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800941e:	b29b      	uxth	r3, r3
 8009420:	029b      	lsls	r3, r3, #10
 8009422:	b29a      	uxth	r2, r3
 8009424:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009428:	801a      	strh	r2, [r3, #0]
 800942a:	e045      	b.n	80094b8 <USB_EPStartXfer+0x10f0>
 800942c:	463b      	mov	r3, r7
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	095b      	lsrs	r3, r3, #5
 8009434:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009438:	463b      	mov	r3, r7
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f003 031f 	and.w	r3, r3, #31
 8009442:	2b00      	cmp	r3, #0
 8009444:	d104      	bne.n	8009450 <USB_EPStartXfer+0x1088>
 8009446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800944a:	3b01      	subs	r3, #1
 800944c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009454:	b29b      	uxth	r3, r3
 8009456:	029b      	lsls	r3, r3, #10
 8009458:	b29b      	uxth	r3, r3
 800945a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800945e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009462:	b29a      	uxth	r2, r3
 8009464:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009468:	801a      	strh	r2, [r3, #0]
 800946a:	e025      	b.n	80094b8 <USB_EPStartXfer+0x10f0>
 800946c:	463b      	mov	r3, r7
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	785b      	ldrb	r3, [r3, #1]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d120      	bne.n	80094b8 <USB_EPStartXfer+0x10f0>
 8009476:	1d3b      	adds	r3, r7, #4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800947e:	1d3b      	adds	r3, r7, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009486:	b29b      	uxth	r3, r3
 8009488:	461a      	mov	r2, r3
 800948a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800948e:	4413      	add	r3, r2
 8009490:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009494:	463b      	mov	r3, r7
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	011a      	lsls	r2, r3, #4
 800949c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094a0:	4413      	add	r3, r2
 80094a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094aa:	463b      	mov	r3, r7
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80094b6:	801a      	strh	r2, [r3, #0]
 80094b8:	1d3b      	adds	r3, r7, #4
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094c0:	463b      	mov	r3, r7
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d175      	bne.n	80095b6 <USB_EPStartXfer+0x11ee>
 80094ca:	1d3b      	adds	r3, r7, #4
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80094d2:	1d3b      	adds	r3, r7, #4
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094da:	b29b      	uxth	r3, r3
 80094dc:	461a      	mov	r2, r3
 80094de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094e2:	4413      	add	r3, r2
 80094e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80094e8:	463b      	mov	r3, r7
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	011a      	lsls	r2, r3, #4
 80094f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094f4:	4413      	add	r3, r2
 80094f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094fe:	463b      	mov	r3, r7
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d116      	bne.n	8009536 <USB_EPStartXfer+0x116e>
 8009508:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	b29b      	uxth	r3, r3
 8009510:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009514:	b29a      	uxth	r2, r3
 8009516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800951a:	801a      	strh	r2, [r3, #0]
 800951c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	b29b      	uxth	r3, r3
 8009524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800952c:	b29a      	uxth	r2, r3
 800952e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009532:	801a      	strh	r2, [r3, #0]
 8009534:	e061      	b.n	80095fa <USB_EPStartXfer+0x1232>
 8009536:	463b      	mov	r3, r7
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	2b3e      	cmp	r3, #62	; 0x3e
 800953e:	d81a      	bhi.n	8009576 <USB_EPStartXfer+0x11ae>
 8009540:	463b      	mov	r3, r7
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	085b      	lsrs	r3, r3, #1
 8009548:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800954c:	463b      	mov	r3, r7
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <USB_EPStartXfer+0x119c>
 800955a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800955e:	3301      	adds	r3, #1
 8009560:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009564:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009568:	b29b      	uxth	r3, r3
 800956a:	029b      	lsls	r3, r3, #10
 800956c:	b29a      	uxth	r2, r3
 800956e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009572:	801a      	strh	r2, [r3, #0]
 8009574:	e041      	b.n	80095fa <USB_EPStartXfer+0x1232>
 8009576:	463b      	mov	r3, r7
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	095b      	lsrs	r3, r3, #5
 800957e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009582:	463b      	mov	r3, r7
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	f003 031f 	and.w	r3, r3, #31
 800958c:	2b00      	cmp	r3, #0
 800958e:	d104      	bne.n	800959a <USB_EPStartXfer+0x11d2>
 8009590:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009594:	3b01      	subs	r3, #1
 8009596:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800959a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800959e:	b29b      	uxth	r3, r3
 80095a0:	029b      	lsls	r3, r3, #10
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	e021      	b.n	80095fa <USB_EPStartXfer+0x1232>
 80095b6:	463b      	mov	r3, r7
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	785b      	ldrb	r3, [r3, #1]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d11c      	bne.n	80095fa <USB_EPStartXfer+0x1232>
 80095c0:	1d3b      	adds	r3, r7, #4
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	461a      	mov	r2, r3
 80095cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80095d0:	4413      	add	r3, r2
 80095d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095d6:	463b      	mov	r3, r7
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	011a      	lsls	r2, r3, #4
 80095de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80095e2:	4413      	add	r3, r2
 80095e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095ec:	463b      	mov	r3, r7
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80095fa:	463b      	mov	r3, r7
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 81a4 	beq.w	800994e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009606:	1d3b      	adds	r3, r7, #4
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	463b      	mov	r3, r7
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800961a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800961e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d005      	beq.n	8009632 <USB_EPStartXfer+0x126a>
 8009626:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800962a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10d      	bne.n	800964e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009632:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800963a:	2b00      	cmp	r3, #0
 800963c:	f040 8187 	bne.w	800994e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009640:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009648:	2b00      	cmp	r3, #0
 800964a:	f040 8180 	bne.w	800994e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800964e:	1d3b      	adds	r3, r7, #4
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	463b      	mov	r3, r7
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	b29b      	uxth	r3, r3
 8009660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009668:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800966c:	1d3b      	adds	r3, r7, #4
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	463b      	mov	r3, r7
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	441a      	add	r2, r3
 800967a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800967e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800968a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800968e:	b29b      	uxth	r3, r3
 8009690:	8013      	strh	r3, [r2, #0]
 8009692:	e15c      	b.n	800994e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009694:	463b      	mov	r3, r7
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	78db      	ldrb	r3, [r3, #3]
 800969a:	2b01      	cmp	r3, #1
 800969c:	f040 8155 	bne.w	800994a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80096a0:	463b      	mov	r3, r7
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	699a      	ldr	r2, [r3, #24]
 80096a6:	463b      	mov	r3, r7
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d90e      	bls.n	80096ce <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80096b0:	463b      	mov	r3, r7
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80096ba:	463b      	mov	r3, r7
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	699a      	ldr	r2, [r3, #24]
 80096c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c4:	1ad2      	subs	r2, r2, r3
 80096c6:	463b      	mov	r3, r7
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	619a      	str	r2, [r3, #24]
 80096cc:	e008      	b.n	80096e0 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80096ce:	463b      	mov	r3, r7
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80096d8:	463b      	mov	r3, r7
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2200      	movs	r2, #0
 80096de:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80096e0:	463b      	mov	r3, r7
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d16f      	bne.n	80097ca <USB_EPStartXfer+0x1402>
 80096ea:	1d3b      	adds	r3, r7, #4
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096f2:	1d3b      	adds	r3, r7, #4
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	461a      	mov	r2, r3
 80096fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009702:	4413      	add	r3, r2
 8009704:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009708:	463b      	mov	r3, r7
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	011a      	lsls	r2, r3, #4
 8009710:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009714:	4413      	add	r3, r2
 8009716:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800971a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800971e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009722:	2b00      	cmp	r3, #0
 8009724:	d116      	bne.n	8009754 <USB_EPStartXfer+0x138c>
 8009726:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	b29b      	uxth	r3, r3
 800972e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009732:	b29a      	uxth	r2, r3
 8009734:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009738:	801a      	strh	r2, [r3, #0]
 800973a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	b29b      	uxth	r3, r3
 8009742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800974a:	b29a      	uxth	r2, r3
 800974c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009750:	801a      	strh	r2, [r3, #0]
 8009752:	e05f      	b.n	8009814 <USB_EPStartXfer+0x144c>
 8009754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009758:	2b3e      	cmp	r3, #62	; 0x3e
 800975a:	d818      	bhi.n	800978e <USB_EPStartXfer+0x13c6>
 800975c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009760:	085b      	lsrs	r3, r3, #1
 8009762:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d004      	beq.n	800977c <USB_EPStartXfer+0x13b4>
 8009772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009776:	3301      	adds	r3, #1
 8009778:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800977c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009780:	b29b      	uxth	r3, r3
 8009782:	029b      	lsls	r3, r3, #10
 8009784:	b29a      	uxth	r2, r3
 8009786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800978a:	801a      	strh	r2, [r3, #0]
 800978c:	e042      	b.n	8009814 <USB_EPStartXfer+0x144c>
 800978e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009792:	095b      	lsrs	r3, r3, #5
 8009794:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800979c:	f003 031f 	and.w	r3, r3, #31
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d104      	bne.n	80097ae <USB_EPStartXfer+0x13e6>
 80097a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097a8:	3b01      	subs	r3, #1
 80097aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	029b      	lsls	r3, r3, #10
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097c6:	801a      	strh	r2, [r3, #0]
 80097c8:	e024      	b.n	8009814 <USB_EPStartXfer+0x144c>
 80097ca:	463b      	mov	r3, r7
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	785b      	ldrb	r3, [r3, #1]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d11f      	bne.n	8009814 <USB_EPStartXfer+0x144c>
 80097d4:	1d3b      	adds	r3, r7, #4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80097dc:	1d3b      	adds	r3, r7, #4
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	461a      	mov	r2, r3
 80097e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ec:	4413      	add	r3, r2
 80097ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80097f2:	463b      	mov	r3, r7
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	011a      	lsls	r2, r3, #4
 80097fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097fe:	4413      	add	r3, r2
 8009800:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009804:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800980c:	b29a      	uxth	r2, r3
 800980e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009812:	801a      	strh	r2, [r3, #0]
 8009814:	1d3b      	adds	r3, r7, #4
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800981c:	463b      	mov	r3, r7
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	785b      	ldrb	r3, [r3, #1]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d16f      	bne.n	8009906 <USB_EPStartXfer+0x153e>
 8009826:	1d3b      	adds	r3, r7, #4
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800982e:	1d3b      	adds	r3, r7, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009836:	b29b      	uxth	r3, r3
 8009838:	461a      	mov	r2, r3
 800983a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800983e:	4413      	add	r3, r2
 8009840:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009844:	463b      	mov	r3, r7
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	011a      	lsls	r2, r3, #4
 800984c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009850:	4413      	add	r3, r2
 8009852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800985a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800985e:	2b00      	cmp	r3, #0
 8009860:	d116      	bne.n	8009890 <USB_EPStartXfer+0x14c8>
 8009862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	b29b      	uxth	r3, r3
 800986a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800986e:	b29a      	uxth	r2, r3
 8009870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009874:	801a      	strh	r2, [r3, #0]
 8009876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	b29b      	uxth	r3, r3
 800987e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009886:	b29a      	uxth	r2, r3
 8009888:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800988c:	801a      	strh	r2, [r3, #0]
 800988e:	e05e      	b.n	800994e <USB_EPStartXfer+0x1586>
 8009890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009894:	2b3e      	cmp	r3, #62	; 0x3e
 8009896:	d818      	bhi.n	80098ca <USB_EPStartXfer+0x1502>
 8009898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800989c:	085b      	lsrs	r3, r3, #1
 800989e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d004      	beq.n	80098b8 <USB_EPStartXfer+0x14f0>
 80098ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098b2:	3301      	adds	r3, #1
 80098b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098bc:	b29b      	uxth	r3, r3
 80098be:	029b      	lsls	r3, r3, #10
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098c6:	801a      	strh	r2, [r3, #0]
 80098c8:	e041      	b.n	800994e <USB_EPStartXfer+0x1586>
 80098ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098ce:	095b      	lsrs	r3, r3, #5
 80098d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d8:	f003 031f 	and.w	r3, r3, #31
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d104      	bne.n	80098ea <USB_EPStartXfer+0x1522>
 80098e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098e4:	3b01      	subs	r3, #1
 80098e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	029b      	lsls	r3, r3, #10
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009902:	801a      	strh	r2, [r3, #0]
 8009904:	e023      	b.n	800994e <USB_EPStartXfer+0x1586>
 8009906:	463b      	mov	r3, r7
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	785b      	ldrb	r3, [r3, #1]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d11e      	bne.n	800994e <USB_EPStartXfer+0x1586>
 8009910:	1d3b      	adds	r3, r7, #4
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009918:	b29b      	uxth	r3, r3
 800991a:	461a      	mov	r2, r3
 800991c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009920:	4413      	add	r3, r2
 8009922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009926:	463b      	mov	r3, r7
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	011a      	lsls	r2, r3, #4
 800992e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009932:	4413      	add	r3, r2
 8009934:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800993c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009940:	b29a      	uxth	r2, r3
 8009942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009946:	801a      	strh	r2, [r3, #0]
 8009948:	e001      	b.n	800994e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e02e      	b.n	80099ac <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800994e:	1d3b      	adds	r3, r7, #4
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	463b      	mov	r3, r7
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	b29b      	uxth	r3, r3
 8009960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009968:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800996c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009970:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009974:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009978:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800997c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009980:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009984:	1d3b      	adds	r3, r7, #4
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	463b      	mov	r3, r7
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	441a      	add	r2, r3
 8009992:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800999a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800999e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	785b      	ldrb	r3, [r3, #1]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d020      	beq.n	8009a0a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099de:	81bb      	strh	r3, [r7, #12]
 80099e0:	89bb      	ldrh	r3, [r7, #12]
 80099e2:	f083 0310 	eor.w	r3, r3, #16
 80099e6:	81bb      	strh	r3, [r7, #12]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	441a      	add	r2, r3
 80099f2:	89bb      	ldrh	r3, [r7, #12]
 80099f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	8013      	strh	r3, [r2, #0]
 8009a08:	e01f      	b.n	8009a4a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a20:	81fb      	strh	r3, [r7, #14]
 8009a22:	89fb      	ldrh	r3, [r7, #14]
 8009a24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a28:	81fb      	strh	r3, [r7, #14]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	441a      	add	r2, r3
 8009a34:	89fb      	ldrh	r3, [r7, #14]
 8009a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bc80      	pop	{r7}
 8009a54:	4770      	bx	lr

08009a56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b087      	sub	sp, #28
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	7b1b      	ldrb	r3, [r3, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f040 809d 	bne.w	8009ba4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	785b      	ldrb	r3, [r3, #1]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d04c      	beq.n	8009b0c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	823b      	strh	r3, [r7, #16]
 8009a80:	8a3b      	ldrh	r3, [r7, #16]
 8009a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d01b      	beq.n	8009ac2 <USB_EPClearStall+0x6c>
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aa0:	81fb      	strh	r3, [r7, #14]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	441a      	add	r2, r3
 8009aac:	89fb      	ldrh	r3, [r7, #14]
 8009aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	78db      	ldrb	r3, [r3, #3]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d06c      	beq.n	8009ba4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ae0:	81bb      	strh	r3, [r7, #12]
 8009ae2:	89bb      	ldrh	r3, [r7, #12]
 8009ae4:	f083 0320 	eor.w	r3, r3, #32
 8009ae8:	81bb      	strh	r3, [r7, #12]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	441a      	add	r2, r3
 8009af4:	89bb      	ldrh	r3, [r7, #12]
 8009af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	8013      	strh	r3, [r2, #0]
 8009b0a:	e04b      	b.n	8009ba4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	82fb      	strh	r3, [r7, #22]
 8009b1a:	8afb      	ldrh	r3, [r7, #22]
 8009b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d01b      	beq.n	8009b5c <USB_EPClearStall+0x106>
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3a:	82bb      	strh	r3, [r7, #20]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	441a      	add	r2, r3
 8009b46:	8abb      	ldrh	r3, [r7, #20]
 8009b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b72:	827b      	strh	r3, [r7, #18]
 8009b74:	8a7b      	ldrh	r3, [r7, #18]
 8009b76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b7a:	827b      	strh	r3, [r7, #18]
 8009b7c:	8a7b      	ldrh	r3, [r7, #18]
 8009b7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b82:	827b      	strh	r3, [r7, #18]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	441a      	add	r2, r3
 8009b8e:	8a7b      	ldrh	r3, [r7, #18]
 8009b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	371c      	adds	r7, #28
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bc80      	pop	{r7}
 8009bae:	4770      	bx	lr

08009bb0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009bbc:	78fb      	ldrb	r3, [r7, #3]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d103      	bne.n	8009bca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2280      	movs	r2, #128	; 0x80
 8009bc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bc80      	pop	{r7}
 8009bd4:	4770      	bx	lr

08009bd6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bc80      	pop	{r7}
 8009be8:	4770      	bx	lr

08009bea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bc80      	pop	{r7}
 8009c06:	4770      	bx	lr

08009c08 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b08d      	sub	sp, #52	; 0x34
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	4611      	mov	r1, r2
 8009c14:	461a      	mov	r2, r3
 8009c16:	460b      	mov	r3, r1
 8009c18:	80fb      	strh	r3, [r7, #6]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c1e:	88bb      	ldrh	r3, [r7, #4]
 8009c20:	3301      	adds	r3, #1
 8009c22:	085b      	lsrs	r3, r3, #1
 8009c24:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c2e:	88fb      	ldrh	r3, [r7, #6]
 8009c30:	005a      	lsls	r2, r3, #1
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c3a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c40:	e01e      	b.n	8009c80 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	021b      	lsls	r3, r3, #8
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	3302      	adds	r3, #2
 8009c6c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	3302      	adds	r3, #2
 8009c72:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	3301      	adds	r3, #1
 8009c78:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1dd      	bne.n	8009c42 <USB_WritePMA+0x3a>
  }
}
 8009c86:	bf00      	nop
 8009c88:	bf00      	nop
 8009c8a:	3734      	adds	r7, #52	; 0x34
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bc80      	pop	{r7}
 8009c90:	4770      	bx	lr

08009c92 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b08b      	sub	sp, #44	; 0x2c
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	60f8      	str	r0, [r7, #12]
 8009c9a:	60b9      	str	r1, [r7, #8]
 8009c9c:	4611      	mov	r1, r2
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	80fb      	strh	r3, [r7, #6]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009ca8:	88bb      	ldrh	r3, [r7, #4]
 8009caa:	085b      	lsrs	r3, r3, #1
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009cb8:	88fb      	ldrh	r3, [r7, #6]
 8009cba:	005a      	lsls	r2, r3, #1
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cc4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cca:	e01b      	b.n	8009d04 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	3302      	adds	r3, #2
 8009cd8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	b2da      	uxtb	r2, r3
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	0a1b      	lsrs	r3, r3, #8
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	3302      	adds	r3, #2
 8009cfc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	3b01      	subs	r3, #1
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e0      	bne.n	8009ccc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009d0a:	88bb      	ldrh	r3, [r7, #4]
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d007      	beq.n	8009d26 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	701a      	strb	r2, [r3, #0]
  }
}
 8009d26:	bf00      	nop
 8009d28:	372c      	adds	r7, #44	; 0x2c
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bc80      	pop	{r7}
 8009d2e:	4770      	bx	lr

08009d30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	7c1b      	ldrb	r3, [r3, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d115      	bne.n	8009d74 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	2181      	movs	r1, #129	; 0x81
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f001 fe74 	bl	800ba3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d60:	2202      	movs	r2, #2
 8009d62:	2101      	movs	r1, #1
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f001 fe6a 	bl	800ba3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8009d72:	e012      	b.n	8009d9a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d74:	2340      	movs	r3, #64	; 0x40
 8009d76:	2202      	movs	r2, #2
 8009d78:	2181      	movs	r1, #129	; 0x81
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f001 fe5f 	bl	800ba3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d86:	2340      	movs	r3, #64	; 0x40
 8009d88:	2202      	movs	r2, #2
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f001 fe56 	bl	800ba3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d9a:	2308      	movs	r3, #8
 8009d9c:	2203      	movs	r2, #3
 8009d9e:	2182      	movs	r1, #130	; 0x82
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 fe4c 	bl	800ba3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8009dac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009db0:	f001 ff6c 	bl	800bc8c <USBD_static_malloc>
 8009db4:	4602      	mov	r2, r0
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	73fb      	strb	r3, [r7, #15]
 8009dca:	e026      	b.n	8009e1a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009dd2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	7c1b      	ldrb	r3, [r3, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d109      	bne.n	8009e0a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e00:	2101      	movs	r1, #1
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f001 ff0c 	bl	800bc20 <USBD_LL_PrepareReceive>
 8009e08:	e007      	b.n	8009e1a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e10:	2340      	movs	r3, #64	; 0x40
 8009e12:	2101      	movs	r1, #1
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 ff03 	bl	800bc20 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e34:	2181      	movs	r1, #129	; 0x81
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f001 fe27 	bl	800ba8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e42:	2101      	movs	r1, #1
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f001 fe20 	bl	800ba8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e52:	2182      	movs	r1, #130	; 0x82
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f001 fe18 	bl	800ba8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00e      	beq.n	8009e88 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f001 ff12 	bl	800bca4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b086      	sub	sp, #24
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ea2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d039      	beq.n	8009f30 <USBD_CDC_Setup+0x9e>
 8009ebc:	2b20      	cmp	r3, #32
 8009ebe:	d17f      	bne.n	8009fc0 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	88db      	ldrh	r3, [r3, #6]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d029      	beq.n	8009f1c <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	b25b      	sxtb	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	da11      	bge.n	8009ef6 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8009ede:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	88d2      	ldrh	r2, [r2, #6]
 8009ee4:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009ee6:	6939      	ldr	r1, [r7, #16]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	88db      	ldrh	r3, [r3, #6]
 8009eec:	461a      	mov	r2, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f001 f993 	bl	800b21a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8009ef4:	e06b      	b.n	8009fce <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	785a      	ldrb	r2, [r3, #1]
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	88db      	ldrh	r3, [r3, #6]
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f0c:	6939      	ldr	r1, [r7, #16]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	88db      	ldrh	r3, [r3, #6]
 8009f12:	461a      	mov	r2, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f001 f9ae 	bl	800b276 <USBD_CtlPrepareRx>
    break;
 8009f1a:	e058      	b.n	8009fce <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	7850      	ldrb	r0, [r2, #1]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	4798      	blx	r3
    break;
 8009f2e:	e04e      	b.n	8009fce <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	785b      	ldrb	r3, [r3, #1]
 8009f34:	2b0b      	cmp	r3, #11
 8009f36:	d02e      	beq.n	8009f96 <USBD_CDC_Setup+0x104>
 8009f38:	2b0b      	cmp	r3, #11
 8009f3a:	dc38      	bgt.n	8009fae <USBD_CDC_Setup+0x11c>
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <USBD_CDC_Setup+0xb4>
 8009f40:	2b0a      	cmp	r3, #10
 8009f42:	d014      	beq.n	8009f6e <USBD_CDC_Setup+0xdc>
 8009f44:	e033      	b.n	8009fae <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f4c:	2b03      	cmp	r3, #3
 8009f4e:	d107      	bne.n	8009f60 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8009f50:	f107 030c 	add.w	r3, r7, #12
 8009f54:	2202      	movs	r2, #2
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f001 f95e 	bl	800b21a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009f5e:	e02e      	b.n	8009fbe <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f001 f8ef 	bl	800b146 <USBD_CtlError>
			  ret = USBD_FAIL;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f6c:	e027      	b.n	8009fbe <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d107      	bne.n	8009f88 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8009f78:	f107 030f 	add.w	r3, r7, #15
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 f94a 	bl	800b21a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009f86:	e01a      	b.n	8009fbe <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 f8db 	bl	800b146 <USBD_CtlError>
			  ret = USBD_FAIL;
 8009f90:	2302      	movs	r3, #2
 8009f92:	75fb      	strb	r3, [r7, #23]
      break;
 8009f94:	e013      	b.n	8009fbe <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d00d      	beq.n	8009fbc <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 f8cf 	bl	800b146 <USBD_CtlError>
			  ret = USBD_FAIL;
 8009fa8:	2302      	movs	r3, #2
 8009faa:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009fac:	e006      	b.n	8009fbc <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f001 f8c8 	bl	800b146 <USBD_CtlError>
      ret = USBD_FAIL;
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8009fba:	e000      	b.n	8009fbe <USBD_CDC_Setup+0x12c>
      break;
 8009fbc:	bf00      	nop
    }
    break;
 8009fbe:	e006      	b.n	8009fce <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 f8bf 	bl	800b146 <USBD_CtlError>
    ret = USBD_FAIL;
 8009fc8:	2302      	movs	r3, #2
 8009fca:	75fb      	strb	r3, [r7, #23]
    break;
 8009fcc:	bf00      	nop
  }

  return ret;
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3718      	adds	r7, #24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009fea:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009ff2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d03a      	beq.n	800a074 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009ffe:	78fa      	ldrb	r2, [r7, #3]
 800a000:	6879      	ldr	r1, [r7, #4]
 800a002:	4613      	mov	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	440b      	add	r3, r1
 800a00c:	331c      	adds	r3, #28
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d029      	beq.n	800a068 <USBD_CDC_DataIn+0x90>
 800a014:	78fa      	ldrb	r2, [r7, #3]
 800a016:	6879      	ldr	r1, [r7, #4]
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	440b      	add	r3, r1
 800a022:	331c      	adds	r3, #28
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	78f9      	ldrb	r1, [r7, #3]
 800a028:	68b8      	ldr	r0, [r7, #8]
 800a02a:	460b      	mov	r3, r1
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	440b      	add	r3, r1
 800a030:	00db      	lsls	r3, r3, #3
 800a032:	4403      	add	r3, r0
 800a034:	3338      	adds	r3, #56	; 0x38
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	fbb2 f1f3 	udiv	r1, r2, r3
 800a03c:	fb03 f301 	mul.w	r3, r3, r1
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d110      	bne.n	800a068 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a046:	78fa      	ldrb	r2, [r7, #3]
 800a048:	6879      	ldr	r1, [r7, #4]
 800a04a:	4613      	mov	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	440b      	add	r3, r1
 800a054:	331c      	adds	r3, #28
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800a05a:	78f9      	ldrb	r1, [r7, #3]
 800a05c:	2300      	movs	r3, #0
 800a05e:	2200      	movs	r2, #0
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 fdba 	bl	800bbda <USBD_LL_Transmit>
 800a066:	e003      	b.n	800a070 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	e000      	b.n	800a076 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a074:	2302      	movs	r3, #2
  }
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	460b      	mov	r3, r1
 800a088:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a090:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800a092:	78fb      	ldrb	r3, [r7, #3]
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f001 fde5 	bl	800bc66 <USBD_LL_GetRxDataSize>
 800a09c:	4602      	mov	r2, r0
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00d      	beq.n	800a0ca <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a0c2:	4611      	mov	r1, r2
 800a0c4:	4798      	blx	r3

    return USBD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e000      	b.n	800a0cc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a0ca:	2302      	movs	r3, #2
  }
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a0e2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d015      	beq.n	800a11a <USBD_CDC_EP0_RxReady+0x46>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0f4:	2bff      	cmp	r3, #255	; 0xff
 800a0f6:	d010      	beq.n	800a11a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a106:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a10e:	b292      	uxth	r2, r2
 800a110:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	22ff      	movs	r2, #255	; 0xff
 800a116:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2243      	movs	r2, #67	; 0x43
 800a130:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a132:	4b03      	ldr	r3, [pc, #12]	; (800a140 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a134:	4618      	mov	r0, r3
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	bc80      	pop	{r7}
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	20000400 	.word	0x20000400

0800a144 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2243      	movs	r2, #67	; 0x43
 800a150:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a152:	4b03      	ldr	r3, [pc, #12]	; (800a160 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a154:	4618      	mov	r0, r3
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	bc80      	pop	{r7}
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	200003bc 	.word	0x200003bc

0800a164 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2243      	movs	r2, #67	; 0x43
 800a170:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a172:	4b03      	ldr	r3, [pc, #12]	; (800a180 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a174:	4618      	mov	r0, r3
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	bc80      	pop	{r7}
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	20000444 	.word	0x20000444

0800a184 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	220a      	movs	r2, #10
 800a190:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a192:	4b03      	ldr	r3, [pc, #12]	; (800a1a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	bc80      	pop	{r7}
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	20000378 	.word	0x20000378

0800a1a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d005      	beq.n	800a1c4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bc80      	pop	{r7}
 800a1ce:	4770      	bx	lr

0800a1d0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a1e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a1ee:	88fa      	ldrh	r2, [r7, #6]
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	371c      	adds	r7, #28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bc80      	pop	{r7}
 800a200:	4770      	bx	lr

0800a202 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800a202:	b480      	push	{r7}
 800a204:	b085      	sub	sp, #20
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a212:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	bc80      	pop	{r7}
 800a226:	4770      	bx	lr

0800a228 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a236:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d01c      	beq.n	800a27c <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d115      	bne.n	800a278 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2201      	movs	r2, #1
 800a250:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	2181      	movs	r1, #129	; 0x81
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f001 fcb3 	bl	800bbda <USBD_LL_Transmit>

      return USBD_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	e002      	b.n	800a27e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a278:	2301      	movs	r3, #1
 800a27a:	e000      	b.n	800a27e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a27c:	2302      	movs	r3, #2
  }
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a294:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d017      	beq.n	800a2d0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	7c1b      	ldrb	r3, [r3, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d109      	bne.n	800a2bc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 fcb3 	bl	800bc20 <USBD_LL_PrepareReceive>
 800a2ba:	e007      	b.n	800a2cc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2c2:	2340      	movs	r3, #64	; 0x40
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f001 fcaa 	bl	800bc20 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	e000      	b.n	800a2d2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a2d0:	2302      	movs	r3, #2
  }
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b084      	sub	sp, #16
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	60f8      	str	r0, [r7, #12]
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	e01a      	b.n	800a328 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d003      	beq.n	800a312 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	79fa      	ldrb	r2, [r7, #7]
 800a31e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f001 fb17 	bl	800b954 <USBD_LL_Init>

  return USBD_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d006      	beq.n	800a352 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]
 800a350:	e001      	b.n	800a356 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a352:	2302      	movs	r3, #2
 800a354:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a356:	7bfb      	ldrb	r3, [r7, #15]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bc80      	pop	{r7}
 800a360:	4770      	bx	lr

0800a362 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 fb4c 	bl	800ba08 <USBD_LL_Start>

  return USBD_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	bc80      	pop	{r7}
 800a38c:	4770      	bx	lr

0800a38e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b084      	sub	sp, #16
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	460b      	mov	r3, r1
 800a398:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800a39a:	2302      	movs	r3, #2
 800a39c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00c      	beq.n	800a3c2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	78fa      	ldrb	r2, [r7, #3]
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	4798      	blx	r3
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	78fa      	ldrb	r2, [r7, #3]
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	4798      	blx	r3
  return USBD_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	4618      	mov	r0, r3
 800a406:	f000 fe62 	bl	800b0ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800a418:	461a      	mov	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a426:	f003 031f 	and.w	r3, r3, #31
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d016      	beq.n	800a45c <USBD_LL_SetupStage+0x6a>
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d81c      	bhi.n	800a46c <USBD_LL_SetupStage+0x7a>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d002      	beq.n	800a43c <USBD_LL_SetupStage+0x4a>
 800a436:	2b01      	cmp	r3, #1
 800a438:	d008      	beq.n	800a44c <USBD_LL_SetupStage+0x5a>
 800a43a:	e017      	b.n	800a46c <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f9c5 	bl	800a7d4 <USBD_StdDevReq>
    break;
 800a44a:	e01a      	b.n	800a482 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fa27 	bl	800a8a8 <USBD_StdItfReq>
    break;
 800a45a:	e012      	b.n	800a482 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fa67 	bl	800a938 <USBD_StdEPReq>
    break;
 800a46a:	e00a      	b.n	800a482 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a472:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a476:	b2db      	uxtb	r3, r3
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f001 fb24 	bl	800bac8 <USBD_LL_StallEP>
    break;
 800a480:	bf00      	nop
  }

  return USBD_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	460b      	mov	r3, r1
 800a496:	607a      	str	r2, [r7, #4]
 800a498:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800a49a:	7afb      	ldrb	r3, [r7, #11]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d14b      	bne.n	800a538 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a4a6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d134      	bne.n	800a51c <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	68da      	ldr	r2, [r3, #12]
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d919      	bls.n	800a4f2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	68da      	ldr	r2, [r3, #12]
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	1ad2      	subs	r2, r2, r3
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	68da      	ldr	r2, [r3, #12]
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d203      	bcs.n	800a4e0 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	e002      	b.n	800a4e6 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fee1 	bl	800b2b2 <USBD_CtlContinueRx>
 800a4f0:	e038      	b.n	800a564 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a504:	2b03      	cmp	r3, #3
 800a506:	d105      	bne.n	800a514 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 fede 	bl	800b2d6 <USBD_CtlSendStatus>
 800a51a:	e023      	b.n	800a564 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a522:	2b05      	cmp	r3, #5
 800a524:	d11e      	bne.n	800a564 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800a52e:	2100      	movs	r1, #0
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f001 fac9 	bl	800bac8 <USBD_LL_StallEP>
 800a536:	e015      	b.n	800a564 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00d      	beq.n	800a560 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d108      	bne.n	800a560 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	7afa      	ldrb	r2, [r7, #11]
 800a558:	4611      	mov	r1, r2
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	4798      	blx	r3
 800a55e:	e001      	b.n	800a564 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a560:	2302      	movs	r3, #2
 800a562:	e000      	b.n	800a566 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b086      	sub	sp, #24
 800a572:	af00      	add	r7, sp, #0
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	460b      	mov	r3, r1
 800a578:	607a      	str	r2, [r7, #4]
 800a57a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800a57c:	7afb      	ldrb	r3, [r7, #11]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d17f      	bne.n	800a682 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3314      	adds	r3, #20
 800a586:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d15c      	bne.n	800a64c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	68da      	ldr	r2, [r3, #12]
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d915      	bls.n	800a5ca <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	68da      	ldr	r2, [r3, #12]
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	1ad2      	subs	r2, r2, r3
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	6879      	ldr	r1, [r7, #4]
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 fe4b 	bl	800b252 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a5bc:	2300      	movs	r3, #0
 800a5be:	2200      	movs	r2, #0
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f001 fb2c 	bl	800bc20 <USBD_LL_PrepareReceive>
 800a5c8:	e04e      	b.n	800a668 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	6912      	ldr	r2, [r2, #16]
 800a5d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5d6:	fb02 f201 	mul.w	r2, r2, r1
 800a5da:	1a9b      	subs	r3, r3, r2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d11c      	bne.n	800a61a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	689a      	ldr	r2, [r3, #8]
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d316      	bcc.n	800a61a <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d20f      	bcs.n	800a61a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 fe27 	bl	800b252 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a60c:	2300      	movs	r3, #0
 800a60e:	2200      	movs	r2, #0
 800a610:	2100      	movs	r1, #0
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f001 fb04 	bl	800bc20 <USBD_LL_PrepareReceive>
 800a618:	e026      	b.n	800a668 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a62c:	2b03      	cmp	r3, #3
 800a62e:	d105      	bne.n	800a63c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a63c:	2180      	movs	r1, #128	; 0x80
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f001 fa42 	bl	800bac8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 fe59 	bl	800b2fc <USBD_CtlReceiveStatus>
 800a64a:	e00d      	b.n	800a668 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a652:	2b04      	cmp	r3, #4
 800a654:	d004      	beq.n	800a660 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d103      	bne.n	800a668 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a660:	2180      	movs	r1, #128	; 0x80
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f001 fa30 	bl	800bac8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d11d      	bne.n	800a6ae <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7ff fe81 	bl	800a37a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800a680:	e015      	b.n	800a6ae <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00d      	beq.n	800a6aa <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800a694:	2b03      	cmp	r3, #3
 800a696:	d108      	bne.n	800a6aa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	7afa      	ldrb	r2, [r7, #11]
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	4798      	blx	r3
 800a6a8:	e001      	b.n	800a6ae <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	e000      	b.n	800a6b0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3718      	adds	r7, #24
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6c0:	2340      	movs	r3, #64	; 0x40
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f001 f9b9 	bl	800ba3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2240      	movs	r2, #64	; 0x40
 800a6d8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6dc:	2340      	movs	r3, #64	; 0x40
 800a6de:	2200      	movs	r2, #0
 800a6e0:	2180      	movs	r1, #128	; 0x80
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f001 f9ab 	bl	800ba3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2240      	movs	r2, #64	; 0x40
 800a6f2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d009      	beq.n	800a730 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	6852      	ldr	r2, [r2, #4]
 800a728:	b2d2      	uxtb	r2, r2
 800a72a:	4611      	mov	r1, r2
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	4798      	blx	r3
  }

  return USBD_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a73a:	b480      	push	{r7}
 800a73c:	b083      	sub	sp, #12
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	460b      	mov	r3, r1
 800a744:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	78fa      	ldrb	r2, [r7, #3]
 800a74a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	bc80      	pop	{r7}
 800a756:	4770      	bx	lr

0800a758 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2204      	movs	r2, #4
 800a770:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bc80      	pop	{r7}
 800a77e:	4770      	bx	lr

0800a780 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bc80      	pop	{r7}
 800a79e:	4770      	bx	lr

0800a7a0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a7ae:	2b03      	cmp	r3, #3
 800a7b0:	d10b      	bne.n	800a7ca <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d005      	beq.n	800a7ca <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7ea:	2b40      	cmp	r3, #64	; 0x40
 800a7ec:	d005      	beq.n	800a7fa <USBD_StdDevReq+0x26>
 800a7ee:	2b40      	cmp	r3, #64	; 0x40
 800a7f0:	d84f      	bhi.n	800a892 <USBD_StdDevReq+0xbe>
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d009      	beq.n	800a80a <USBD_StdDevReq+0x36>
 800a7f6:	2b20      	cmp	r3, #32
 800a7f8:	d14b      	bne.n	800a892 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	4798      	blx	r3
    break;
 800a808:	e048      	b.n	800a89c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	785b      	ldrb	r3, [r3, #1]
 800a80e:	2b09      	cmp	r3, #9
 800a810:	d839      	bhi.n	800a886 <USBD_StdDevReq+0xb2>
 800a812:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <USBD_StdDevReq+0x44>)
 800a814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a818:	0800a869 	.word	0x0800a869
 800a81c:	0800a87d 	.word	0x0800a87d
 800a820:	0800a887 	.word	0x0800a887
 800a824:	0800a873 	.word	0x0800a873
 800a828:	0800a887 	.word	0x0800a887
 800a82c:	0800a84b 	.word	0x0800a84b
 800a830:	0800a841 	.word	0x0800a841
 800a834:	0800a887 	.word	0x0800a887
 800a838:	0800a85f 	.word	0x0800a85f
 800a83c:	0800a855 	.word	0x0800a855
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f9da 	bl	800abfc <USBD_GetDescriptor>
      break;
 800a848:	e022      	b.n	800a890 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 facf 	bl	800adf0 <USBD_SetAddress>
      break;
 800a852:	e01d      	b.n	800a890 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fb0e 	bl	800ae78 <USBD_SetConfig>
      break;
 800a85c:	e018      	b.n	800a890 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fb97 	bl	800af94 <USBD_GetConfig>
      break;
 800a866:	e013      	b.n	800a890 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fbc7 	bl	800affe <USBD_GetStatus>
      break;
 800a870:	e00e      	b.n	800a890 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 fbf5 	bl	800b064 <USBD_SetFeature>
      break;
 800a87a:	e009      	b.n	800a890 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fc04 	bl	800b08c <USBD_ClrFeature>
      break;
 800a884:	e004      	b.n	800a890 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fc5c 	bl	800b146 <USBD_CtlError>
      break;
 800a88e:	bf00      	nop
    }
    break;
 800a890:	e004      	b.n	800a89c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fc56 	bl	800b146 <USBD_CtlError>
    break;
 800a89a:	bf00      	nop
  }

  return ret;
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop

0800a8a8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8be:	2b40      	cmp	r3, #64	; 0x40
 800a8c0:	d005      	beq.n	800a8ce <USBD_StdItfReq+0x26>
 800a8c2:	2b40      	cmp	r3, #64	; 0x40
 800a8c4:	d82e      	bhi.n	800a924 <USBD_StdItfReq+0x7c>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <USBD_StdItfReq+0x26>
 800a8ca:	2b20      	cmp	r3, #32
 800a8cc:	d12a      	bne.n	800a924 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d81d      	bhi.n	800a916 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	889b      	ldrh	r3, [r3, #4]
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d813      	bhi.n	800a90c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	4798      	blx	r3
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	88db      	ldrh	r3, [r3, #6]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d110      	bne.n	800a920 <USBD_StdItfReq+0x78>
 800a8fe:	7bfb      	ldrb	r3, [r7, #15]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10d      	bne.n	800a920 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fce6 	bl	800b2d6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a90a:	e009      	b.n	800a920 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fc19 	bl	800b146 <USBD_CtlError>
      break;
 800a914:	e004      	b.n	800a920 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fc14 	bl	800b146 <USBD_CtlError>
      break;
 800a91e:	e000      	b.n	800a922 <USBD_StdItfReq+0x7a>
      break;
 800a920:	bf00      	nop
    }
    break;
 800a922:	e004      	b.n	800a92e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fc0d 	bl	800b146 <USBD_CtlError>
    break;
 800a92c:	bf00      	nop
  }

  return USBD_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	889b      	ldrh	r3, [r3, #4]
 800a94a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a954:	2b40      	cmp	r3, #64	; 0x40
 800a956:	d007      	beq.n	800a968 <USBD_StdEPReq+0x30>
 800a958:	2b40      	cmp	r3, #64	; 0x40
 800a95a:	f200 8144 	bhi.w	800abe6 <USBD_StdEPReq+0x2ae>
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00a      	beq.n	800a978 <USBD_StdEPReq+0x40>
 800a962:	2b20      	cmp	r3, #32
 800a964:	f040 813f 	bne.w	800abe6 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	4798      	blx	r3
    break;
 800a976:	e13b      	b.n	800abf0 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a980:	2b20      	cmp	r3, #32
 800a982:	d10a      	bne.n	800a99a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	4798      	blx	r3
 800a992:	4603      	mov	r3, r0
 800a994:	73fb      	strb	r3, [r7, #15]

      return ret;
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	e12b      	b.n	800abf2 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	785b      	ldrb	r3, [r3, #1]
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d007      	beq.n	800a9b2 <USBD_StdEPReq+0x7a>
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	f300 8119 	bgt.w	800abda <USBD_StdEPReq+0x2a2>
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d072      	beq.n	800aa92 <USBD_StdEPReq+0x15a>
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d03a      	beq.n	800aa26 <USBD_StdEPReq+0xee>
 800a9b0:	e113      	b.n	800abda <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d002      	beq.n	800a9c2 <USBD_StdEPReq+0x8a>
 800a9bc:	2b03      	cmp	r3, #3
 800a9be:	d015      	beq.n	800a9ec <USBD_StdEPReq+0xb4>
 800a9c0:	e02b      	b.n	800aa1a <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9c2:	7bbb      	ldrb	r3, [r7, #14]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00c      	beq.n	800a9e2 <USBD_StdEPReq+0xaa>
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	2b80      	cmp	r3, #128	; 0x80
 800a9cc:	d009      	beq.n	800a9e2 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a9ce:	7bbb      	ldrb	r3, [r7, #14]
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f001 f878 	bl	800bac8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a9d8:	2180      	movs	r1, #128	; 0x80
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f001 f874 	bl	800bac8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a9e0:	e020      	b.n	800aa24 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fbae 	bl	800b146 <USBD_CtlError>
        break;
 800a9ea:	e01b      	b.n	800aa24 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	885b      	ldrh	r3, [r3, #2]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10e      	bne.n	800aa12 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00b      	beq.n	800aa12 <USBD_StdEPReq+0xda>
 800a9fa:	7bbb      	ldrb	r3, [r7, #14]
 800a9fc:	2b80      	cmp	r3, #128	; 0x80
 800a9fe:	d008      	beq.n	800aa12 <USBD_StdEPReq+0xda>
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	88db      	ldrh	r3, [r3, #6]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d104      	bne.n	800aa12 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800aa08:	7bbb      	ldrb	r3, [r7, #14]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f001 f85b 	bl	800bac8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fc5f 	bl	800b2d6 <USBD_CtlSendStatus>

        break;
 800aa18:	e004      	b.n	800aa24 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fb92 	bl	800b146 <USBD_CtlError>
        break;
 800aa22:	bf00      	nop
      }
      break;
 800aa24:	e0de      	b.n	800abe4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d002      	beq.n	800aa36 <USBD_StdEPReq+0xfe>
 800aa30:	2b03      	cmp	r3, #3
 800aa32:	d015      	beq.n	800aa60 <USBD_StdEPReq+0x128>
 800aa34:	e026      	b.n	800aa84 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00c      	beq.n	800aa56 <USBD_StdEPReq+0x11e>
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
 800aa3e:	2b80      	cmp	r3, #128	; 0x80
 800aa40:	d009      	beq.n	800aa56 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f001 f83e 	bl	800bac8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800aa4c:	2180      	movs	r1, #128	; 0x80
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f001 f83a 	bl	800bac8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800aa54:	e01c      	b.n	800aa90 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fb74 	bl	800b146 <USBD_CtlError>
        break;
 800aa5e:	e017      	b.n	800aa90 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	885b      	ldrh	r3, [r3, #2]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d112      	bne.n	800aa8e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d004      	beq.n	800aa7c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa72:	7bbb      	ldrb	r3, [r7, #14]
 800aa74:	4619      	mov	r1, r3
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 f845 	bl	800bb06 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fc2a 	bl	800b2d6 <USBD_CtlSendStatus>
        }
        break;
 800aa82:	e004      	b.n	800aa8e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fb5d 	bl	800b146 <USBD_CtlError>
        break;
 800aa8c:	e000      	b.n	800aa90 <USBD_StdEPReq+0x158>
        break;
 800aa8e:	bf00      	nop
      }
      break;
 800aa90:	e0a8      	b.n	800abe4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d002      	beq.n	800aaa2 <USBD_StdEPReq+0x16a>
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	d031      	beq.n	800ab04 <USBD_StdEPReq+0x1cc>
 800aaa0:	e095      	b.n	800abce <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aaa2:	7bbb      	ldrb	r3, [r7, #14]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d007      	beq.n	800aab8 <USBD_StdEPReq+0x180>
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	2b80      	cmp	r3, #128	; 0x80
 800aaac:	d004      	beq.n	800aab8 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fb48 	bl	800b146 <USBD_CtlError>
          break;
 800aab6:	e08f      	b.n	800abd8 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800aab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	da0b      	bge.n	800aad8 <USBD_StdEPReq+0x1a0>
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	3310      	adds	r3, #16
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	4413      	add	r3, r2
 800aad4:	3304      	adds	r3, #4
 800aad6:	e00a      	b.n	800aaee <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	4413      	add	r3, r2
 800aaee:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	2202      	movs	r2, #2
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fb8c 	bl	800b21a <USBD_CtlSendData>
          break;
 800ab02:	e069      	b.n	800abd8 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800ab04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	da11      	bge.n	800ab30 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab0c:	7bbb      	ldrb	r3, [r7, #14]
 800ab0e:	f003 020f 	and.w	r2, r3, #15
 800ab12:	6879      	ldr	r1, [r7, #4]
 800ab14:	4613      	mov	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	440b      	add	r3, r1
 800ab1e:	3318      	adds	r3, #24
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d117      	bne.n	800ab56 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fb0c 	bl	800b146 <USBD_CtlError>
            break;
 800ab2e:	e053      	b.n	800abd8 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	f003 020f 	and.w	r2, r3, #15
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	440b      	add	r3, r1
 800ab42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d104      	bne.n	800ab56 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800ab4c:	6839      	ldr	r1, [r7, #0]
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 faf9 	bl	800b146 <USBD_CtlError>
            break;
 800ab54:	e040      	b.n	800abd8 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ab56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	da0b      	bge.n	800ab76 <USBD_StdEPReq+0x23e>
 800ab5e:	7bbb      	ldrb	r3, [r7, #14]
 800ab60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab64:	4613      	mov	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	3310      	adds	r3, #16
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	4413      	add	r3, r2
 800ab72:	3304      	adds	r3, #4
 800ab74:	e00a      	b.n	800ab8c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <USBD_StdEPReq+0x262>
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	2b80      	cmp	r3, #128	; 0x80
 800ab98:	d103      	bne.n	800aba2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	e00e      	b.n	800abc0 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	4619      	mov	r1, r3
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 ffcc 	bl	800bb44 <USBD_LL_IsStallEP>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2201      	movs	r2, #1
 800abb6:	601a      	str	r2, [r3, #0]
 800abb8:	e002      	b.n	800abc0 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	2202      	movs	r2, #2
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fb27 	bl	800b21a <USBD_CtlSendData>
          break;
 800abcc:	e004      	b.n	800abd8 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fab8 	bl	800b146 <USBD_CtlError>
        break;
 800abd6:	bf00      	nop
      }
      break;
 800abd8:	e004      	b.n	800abe4 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fab2 	bl	800b146 <USBD_CtlError>
      break;
 800abe2:	bf00      	nop
    }
    break;
 800abe4:	e004      	b.n	800abf0 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 faac 	bl	800b146 <USBD_CtlError>
    break;
 800abee:	bf00      	nop
  }

  return ret;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
	...

0800abfc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	885b      	ldrh	r3, [r3, #2]
 800ac0a:	0a1b      	lsrs	r3, r3, #8
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	2b06      	cmp	r3, #6
 800ac12:	f200 80c9 	bhi.w	800ada8 <USBD_GetDescriptor+0x1ac>
 800ac16:	a201      	add	r2, pc, #4	; (adr r2, 800ac1c <USBD_GetDescriptor+0x20>)
 800ac18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1c:	0800ac39 	.word	0x0800ac39
 800ac20:	0800ac51 	.word	0x0800ac51
 800ac24:	0800ac91 	.word	0x0800ac91
 800ac28:	0800ada9 	.word	0x0800ada9
 800ac2c:	0800ada9 	.word	0x0800ada9
 800ac30:	0800ad55 	.word	0x0800ad55
 800ac34:	0800ad7b 	.word	0x0800ad7b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	7c12      	ldrb	r2, [r2, #16]
 800ac44:	f107 010a 	add.w	r1, r7, #10
 800ac48:	4610      	mov	r0, r2
 800ac4a:	4798      	blx	r3
 800ac4c:	60f8      	str	r0, [r7, #12]
    break;
 800ac4e:	e0b0      	b.n	800adb2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	7c1b      	ldrb	r3, [r3, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10d      	bne.n	800ac74 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac60:	f107 020a 	add.w	r2, r7, #10
 800ac64:	4610      	mov	r0, r2
 800ac66:	4798      	blx	r3
 800ac68:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	2202      	movs	r2, #2
 800ac70:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ac72:	e09e      	b.n	800adb2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	f107 020a 	add.w	r2, r7, #10
 800ac80:	4610      	mov	r0, r2
 800ac82:	4798      	blx	r3
 800ac84:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	701a      	strb	r2, [r3, #0]
    break;
 800ac8e:	e090      	b.n	800adb2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	885b      	ldrh	r3, [r3, #2]
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b05      	cmp	r3, #5
 800ac98:	d856      	bhi.n	800ad48 <USBD_GetDescriptor+0x14c>
 800ac9a:	a201      	add	r2, pc, #4	; (adr r2, 800aca0 <USBD_GetDescriptor+0xa4>)
 800ac9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca0:	0800acb9 	.word	0x0800acb9
 800aca4:	0800acd1 	.word	0x0800acd1
 800aca8:	0800ace9 	.word	0x0800ace9
 800acac:	0800ad01 	.word	0x0800ad01
 800acb0:	0800ad19 	.word	0x0800ad19
 800acb4:	0800ad31 	.word	0x0800ad31
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	7c12      	ldrb	r2, [r2, #16]
 800acc4:	f107 010a 	add.w	r1, r7, #10
 800acc8:	4610      	mov	r0, r2
 800acca:	4798      	blx	r3
 800accc:	60f8      	str	r0, [r7, #12]
      break;
 800acce:	e040      	b.n	800ad52 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	7c12      	ldrb	r2, [r2, #16]
 800acdc:	f107 010a 	add.w	r1, r7, #10
 800ace0:	4610      	mov	r0, r2
 800ace2:	4798      	blx	r3
 800ace4:	60f8      	str	r0, [r7, #12]
      break;
 800ace6:	e034      	b.n	800ad52 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	7c12      	ldrb	r2, [r2, #16]
 800acf4:	f107 010a 	add.w	r1, r7, #10
 800acf8:	4610      	mov	r0, r2
 800acfa:	4798      	blx	r3
 800acfc:	60f8      	str	r0, [r7, #12]
      break;
 800acfe:	e028      	b.n	800ad52 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	7c12      	ldrb	r2, [r2, #16]
 800ad0c:	f107 010a 	add.w	r1, r7, #10
 800ad10:	4610      	mov	r0, r2
 800ad12:	4798      	blx	r3
 800ad14:	60f8      	str	r0, [r7, #12]
      break;
 800ad16:	e01c      	b.n	800ad52 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ad1e:	695b      	ldr	r3, [r3, #20]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	7c12      	ldrb	r2, [r2, #16]
 800ad24:	f107 010a 	add.w	r1, r7, #10
 800ad28:	4610      	mov	r0, r2
 800ad2a:	4798      	blx	r3
 800ad2c:	60f8      	str	r0, [r7, #12]
      break;
 800ad2e:	e010      	b.n	800ad52 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	7c12      	ldrb	r2, [r2, #16]
 800ad3c:	f107 010a 	add.w	r1, r7, #10
 800ad40:	4610      	mov	r0, r2
 800ad42:	4798      	blx	r3
 800ad44:	60f8      	str	r0, [r7, #12]
      break;
 800ad46:	e004      	b.n	800ad52 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f9fb 	bl	800b146 <USBD_CtlError>
      return;
 800ad50:	e04b      	b.n	800adea <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800ad52:	e02e      	b.n	800adb2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	7c1b      	ldrb	r3, [r3, #16]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d109      	bne.n	800ad70 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ad62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad64:	f107 020a 	add.w	r2, r7, #10
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4798      	blx	r3
 800ad6c:	60f8      	str	r0, [r7, #12]
      break;
 800ad6e:	e020      	b.n	800adb2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f9e7 	bl	800b146 <USBD_CtlError>
      return;
 800ad78:	e037      	b.n	800adea <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	7c1b      	ldrb	r3, [r3, #16]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10d      	bne.n	800ad9e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ad88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8a:	f107 020a 	add.w	r2, r7, #10
 800ad8e:	4610      	mov	r0, r2
 800ad90:	4798      	blx	r3
 800ad92:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	3301      	adds	r3, #1
 800ad98:	2207      	movs	r2, #7
 800ad9a:	701a      	strb	r2, [r3, #0]
      break;
 800ad9c:	e009      	b.n	800adb2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f9d0 	bl	800b146 <USBD_CtlError>
      return;
 800ada6:	e020      	b.n	800adea <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f9cb 	bl	800b146 <USBD_CtlError>
    return;
 800adb0:	e01b      	b.n	800adea <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800adb2:	897b      	ldrh	r3, [r7, #10]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d011      	beq.n	800addc <USBD_GetDescriptor+0x1e0>
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	88db      	ldrh	r3, [r3, #6]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00d      	beq.n	800addc <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	88da      	ldrh	r2, [r3, #6]
 800adc4:	897b      	ldrh	r3, [r7, #10]
 800adc6:	4293      	cmp	r3, r2
 800adc8:	bf28      	it	cs
 800adca:	4613      	movcs	r3, r2
 800adcc:	b29b      	uxth	r3, r3
 800adce:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800add0:	897b      	ldrh	r3, [r7, #10]
 800add2:	461a      	mov	r2, r3
 800add4:	68f9      	ldr	r1, [r7, #12]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fa1f 	bl	800b21a <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	88db      	ldrh	r3, [r3, #6]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d102      	bne.n	800adea <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fa76 	bl	800b2d6 <USBD_CtlSendStatus>
  }
}
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	889b      	ldrh	r3, [r3, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d130      	bne.n	800ae64 <USBD_SetAddress+0x74>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	88db      	ldrh	r3, [r3, #6]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d12c      	bne.n	800ae64 <USBD_SetAddress+0x74>
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	885b      	ldrh	r3, [r3, #2]
 800ae0e:	2b7f      	cmp	r3, #127	; 0x7f
 800ae10:	d828      	bhi.n	800ae64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	885b      	ldrh	r3, [r3, #2]
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ae24:	2b03      	cmp	r3, #3
 800ae26:	d104      	bne.n	800ae32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f98b 	bl	800b146 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae30:	e01d      	b.n	800ae6e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	7bfa      	ldrb	r2, [r7, #15]
 800ae36:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae3a:	7bfb      	ldrb	r3, [r7, #15]
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 feac 	bl	800bb9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fa46 	bl	800b2d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d004      	beq.n	800ae5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2202      	movs	r2, #2
 800ae54:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae58:	e009      	b.n	800ae6e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae62:	e004      	b.n	800ae6e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f96d 	bl	800b146 <USBD_CtlError>
  }
}
 800ae6c:	bf00      	nop
 800ae6e:	bf00      	nop
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
	...

0800ae78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	885b      	ldrh	r3, [r3, #2]
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	4b41      	ldr	r3, [pc, #260]	; (800af90 <USBD_SetConfig+0x118>)
 800ae8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae8c:	4b40      	ldr	r3, [pc, #256]	; (800af90 <USBD_SetConfig+0x118>)
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d904      	bls.n	800ae9e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f955 	bl	800b146 <USBD_CtlError>
 800ae9c:	e075      	b.n	800af8a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d002      	beq.n	800aeae <USBD_SetConfig+0x36>
 800aea8:	2b03      	cmp	r3, #3
 800aeaa:	d023      	beq.n	800aef4 <USBD_SetConfig+0x7c>
 800aeac:	e062      	b.n	800af74 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800aeae:	4b38      	ldr	r3, [pc, #224]	; (800af90 <USBD_SetConfig+0x118>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d01a      	beq.n	800aeec <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800aeb6:	4b36      	ldr	r3, [pc, #216]	; (800af90 <USBD_SetConfig+0x118>)
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2203      	movs	r2, #3
 800aec4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aec8:	4b31      	ldr	r3, [pc, #196]	; (800af90 <USBD_SetConfig+0x118>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	4619      	mov	r1, r3
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7ff fa5d 	bl	800a38e <USBD_SetClassConfig>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d104      	bne.n	800aee4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f932 	bl	800b146 <USBD_CtlError>
          return;
 800aee2:	e052      	b.n	800af8a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f9f6 	bl	800b2d6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800aeea:	e04e      	b.n	800af8a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f9f2 	bl	800b2d6 <USBD_CtlSendStatus>
      break;
 800aef2:	e04a      	b.n	800af8a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aef4:	4b26      	ldr	r3, [pc, #152]	; (800af90 <USBD_SetConfig+0x118>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d112      	bne.n	800af22 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2202      	movs	r2, #2
 800af00:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800af04:	4b22      	ldr	r3, [pc, #136]	; (800af90 <USBD_SetConfig+0x118>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	461a      	mov	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800af0e:	4b20      	ldr	r3, [pc, #128]	; (800af90 <USBD_SetConfig+0x118>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	4619      	mov	r1, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff fa59 	bl	800a3cc <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f9db 	bl	800b2d6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800af20:	e033      	b.n	800af8a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800af22:	4b1b      	ldr	r3, [pc, #108]	; (800af90 <USBD_SetConfig+0x118>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d01d      	beq.n	800af6c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f7ff fa47 	bl	800a3cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af3e:	4b14      	ldr	r3, [pc, #80]	; (800af90 <USBD_SetConfig+0x118>)
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af48:	4b11      	ldr	r3, [pc, #68]	; (800af90 <USBD_SetConfig+0x118>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff fa1d 	bl	800a38e <USBD_SetClassConfig>
 800af54:	4603      	mov	r3, r0
 800af56:	2b02      	cmp	r3, #2
 800af58:	d104      	bne.n	800af64 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800af5a:	6839      	ldr	r1, [r7, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f8f2 	bl	800b146 <USBD_CtlError>
          return;
 800af62:	e012      	b.n	800af8a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f9b6 	bl	800b2d6 <USBD_CtlSendStatus>
      break;
 800af6a:	e00e      	b.n	800af8a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f9b2 	bl	800b2d6 <USBD_CtlSendStatus>
      break;
 800af72:	e00a      	b.n	800af8a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f8e5 	bl	800b146 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800af7c:	4b04      	ldr	r3, [pc, #16]	; (800af90 <USBD_SetConfig+0x118>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff fa22 	bl	800a3cc <USBD_ClrClassConfig>
      break;
 800af88:	bf00      	nop
    }
  }
}
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	200006e8 	.word	0x200006e8

0800af94 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	88db      	ldrh	r3, [r3, #6]
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d004      	beq.n	800afb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f8cc 	bl	800b146 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800afae:	e022      	b.n	800aff6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	dc02      	bgt.n	800afc0 <USBD_GetConfig+0x2c>
 800afba:	2b00      	cmp	r3, #0
 800afbc:	dc03      	bgt.n	800afc6 <USBD_GetConfig+0x32>
 800afbe:	e015      	b.n	800afec <USBD_GetConfig+0x58>
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	d00b      	beq.n	800afdc <USBD_GetConfig+0x48>
 800afc4:	e012      	b.n	800afec <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3308      	adds	r3, #8
 800afd0:	2201      	movs	r2, #1
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f920 	bl	800b21a <USBD_CtlSendData>
      break;
 800afda:	e00c      	b.n	800aff6 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3304      	adds	r3, #4
 800afe0:	2201      	movs	r2, #1
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f918 	bl	800b21a <USBD_CtlSendData>
      break;
 800afea:	e004      	b.n	800aff6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f8a9 	bl	800b146 <USBD_CtlError>
      break;
 800aff4:	bf00      	nop
}
 800aff6:	bf00      	nop
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b00e:	3b01      	subs	r3, #1
 800b010:	2b02      	cmp	r3, #2
 800b012:	d81e      	bhi.n	800b052 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	88db      	ldrh	r3, [r3, #6]
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d004      	beq.n	800b026 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f891 	bl	800b146 <USBD_CtlError>
      break;
 800b024:	e01a      	b.n	800b05c <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2201      	movs	r2, #1
 800b02a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800b032:	2b00      	cmp	r3, #0
 800b034:	d005      	beq.n	800b042 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	f043 0202 	orr.w	r2, r3, #2
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	330c      	adds	r3, #12
 800b046:	2202      	movs	r2, #2
 800b048:	4619      	mov	r1, r3
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f8e5 	bl	800b21a <USBD_CtlSendData>
    break;
 800b050:	e004      	b.n	800b05c <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f876 	bl	800b146 <USBD_CtlError>
    break;
 800b05a:	bf00      	nop
  }
}
 800b05c:	bf00      	nop
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	885b      	ldrh	r3, [r3, #2]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d106      	bne.n	800b084 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f929 	bl	800b2d6 <USBD_CtlSendStatus>
  }

}
 800b084:	bf00      	nop
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b09c:	3b01      	subs	r3, #1
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d80b      	bhi.n	800b0ba <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	885b      	ldrh	r3, [r3, #2]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d10c      	bne.n	800b0c4 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f90f 	bl	800b2d6 <USBD_CtlSendStatus>
    }
    break;
 800b0b8:	e004      	b.n	800b0c4 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f842 	bl	800b146 <USBD_CtlError>
    break;
 800b0c2:	e000      	b.n	800b0c6 <USBD_ClrFeature+0x3a>
    break;
 800b0c4:	bf00      	nop
  }
}
 800b0c6:	bf00      	nop
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b083      	sub	sp, #12
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	781a      	ldrb	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	785a      	ldrb	r2, [r3, #1]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	3302      	adds	r3, #2
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	3303      	adds	r3, #3
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	021b      	lsls	r3, r3, #8
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	4413      	add	r3, r2
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	3304      	adds	r3, #4
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	3305      	adds	r3, #5
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	b29b      	uxth	r3, r3
 800b114:	021b      	lsls	r3, r3, #8
 800b116:	b29b      	uxth	r3, r3
 800b118:	4413      	add	r3, r2
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	3306      	adds	r3, #6
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	b29a      	uxth	r2, r3
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	3307      	adds	r3, #7
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	021b      	lsls	r3, r3, #8
 800b132:	b29b      	uxth	r3, r3
 800b134:	4413      	add	r3, r2
 800b136:	b29a      	uxth	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	80da      	strh	r2, [r3, #6]

}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	bc80      	pop	{r7}
 800b144:	4770      	bx	lr

0800b146 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b082      	sub	sp, #8
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800b150:	2180      	movs	r1, #128	; 0x80
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fcb8 	bl	800bac8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b158:	2100      	movs	r1, #0
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fcb4 	bl	800bac8 <USBD_LL_StallEP>
}
 800b160:	bf00      	nop
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b174:	2300      	movs	r3, #0
 800b176:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d032      	beq.n	800b1e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f000 f834 	bl	800b1ec <USBD_GetLen>
 800b184:	4603      	mov	r3, r0
 800b186:	3301      	adds	r3, #1
 800b188:	b29b      	uxth	r3, r3
 800b18a:	005b      	lsls	r3, r3, #1
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b192:	7dfb      	ldrb	r3, [r7, #23]
 800b194:	1c5a      	adds	r2, r3, #1
 800b196:	75fa      	strb	r2, [r7, #23]
 800b198:	461a      	mov	r2, r3
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	4413      	add	r3, r2
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	7812      	ldrb	r2, [r2, #0]
 800b1a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
 800b1a6:	1c5a      	adds	r2, r3, #1
 800b1a8:	75fa      	strb	r2, [r7, #23]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	2203      	movs	r2, #3
 800b1b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b1b4:	e012      	b.n	800b1dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	1c5a      	adds	r2, r3, #1
 800b1ba:	60fa      	str	r2, [r7, #12]
 800b1bc:	7dfa      	ldrb	r2, [r7, #23]
 800b1be:	1c51      	adds	r1, r2, #1
 800b1c0:	75f9      	strb	r1, [r7, #23]
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	440a      	add	r2, r1
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b1cc:	7dfb      	ldrb	r3, [r7, #23]
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	75fa      	strb	r2, [r7, #23]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	2200      	movs	r2, #0
 800b1da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e8      	bne.n	800b1b6 <USBD_GetString+0x4e>
    }
  }
}
 800b1e4:	bf00      	nop
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800b1f8:	e005      	b.n	800b206 <USBD_GetLen+0x1a>
    {
        len++;
 800b1fa:	7bfb      	ldrb	r3, [r7, #15]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	73fb      	strb	r3, [r7, #15]
        buf++;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	3301      	adds	r3, #1
 800b204:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1f5      	bne.n	800b1fa <USBD_GetLen+0xe>
    }

    return len;
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	bc80      	pop	{r7}
 800b218:	4770      	bx	lr

0800b21a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	4613      	mov	r3, r2
 800b226:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2202      	movs	r2, #2
 800b22c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800b230:	88fa      	ldrh	r2, [r7, #6]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b236:	88fa      	ldrh	r2, [r7, #6]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b23c:	88fb      	ldrh	r3, [r7, #6]
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	2100      	movs	r1, #0
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f000 fcc9 	bl	800bbda <USBD_LL_Transmit>

  return USBD_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b084      	sub	sp, #16
 800b256:	af00      	add	r7, sp, #0
 800b258:	60f8      	str	r0, [r7, #12]
 800b25a:	60b9      	str	r1, [r7, #8]
 800b25c:	4613      	mov	r3, r2
 800b25e:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b260:	88fb      	ldrh	r3, [r7, #6]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	2100      	movs	r1, #0
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f000 fcb7 	bl	800bbda <USBD_LL_Transmit>

  return USBD_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b084      	sub	sp, #16
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	60f8      	str	r0, [r7, #12]
 800b27e:	60b9      	str	r1, [r7, #8]
 800b280:	4613      	mov	r3, r2
 800b282:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2203      	movs	r2, #3
 800b288:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800b28c:	88fa      	ldrh	r2, [r7, #6]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800b294:	88fa      	ldrh	r2, [r7, #6]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800b29c:	88fb      	ldrh	r3, [r7, #6]
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f000 fcbc 	bl	800bc20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	60f8      	str	r0, [r7, #12]
 800b2ba:	60b9      	str	r1, [r7, #8]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2c0:	88fb      	ldrh	r3, [r7, #6]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f000 fcaa 	bl	800bc20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b082      	sub	sp, #8
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2204      	movs	r2, #4
 800b2e2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fc74 	bl	800bbda <USBD_LL_Transmit>

  return USBD_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2205      	movs	r2, #5
 800b308:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b30c:	2300      	movs	r3, #0
 800b30e:	2200      	movs	r2, #0
 800b310:	2100      	movs	r1, #0
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fc84 	bl	800bc20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
	...

0800b324 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b328:	2200      	movs	r2, #0
 800b32a:	4912      	ldr	r1, [pc, #72]	; (800b374 <MX_USB_DEVICE_Init+0x50>)
 800b32c:	4812      	ldr	r0, [pc, #72]	; (800b378 <MX_USB_DEVICE_Init+0x54>)
 800b32e:	f7fe ffd4 	bl	800a2da <USBD_Init>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b338:	f7f7 fca0 	bl	8002c7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b33c:	490f      	ldr	r1, [pc, #60]	; (800b37c <MX_USB_DEVICE_Init+0x58>)
 800b33e:	480e      	ldr	r0, [pc, #56]	; (800b378 <MX_USB_DEVICE_Init+0x54>)
 800b340:	f7fe fff6 	bl	800a330 <USBD_RegisterClass>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d001      	beq.n	800b34e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b34a:	f7f7 fc97 	bl	8002c7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b34e:	490c      	ldr	r1, [pc, #48]	; (800b380 <MX_USB_DEVICE_Init+0x5c>)
 800b350:	4809      	ldr	r0, [pc, #36]	; (800b378 <MX_USB_DEVICE_Init+0x54>)
 800b352:	f7fe ff27 	bl	800a1a4 <USBD_CDC_RegisterInterface>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d001      	beq.n	800b360 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b35c:	f7f7 fc8e 	bl	8002c7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b360:	4805      	ldr	r0, [pc, #20]	; (800b378 <MX_USB_DEVICE_Init+0x54>)
 800b362:	f7fe fffe 	bl	800a362 <USBD_Start>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b36c:	f7f7 fc86 	bl	8002c7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b370:	bf00      	nop
 800b372:	bd80      	pop	{r7, pc}
 800b374:	20000498 	.word	0x20000498
 800b378:	20000a98 	.word	0x20000a98
 800b37c:	20000384 	.word	0x20000384
 800b380:	20000488 	.word	0x20000488

0800b384 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b388:	2200      	movs	r2, #0
 800b38a:	4905      	ldr	r1, [pc, #20]	; (800b3a0 <CDC_Init_FS+0x1c>)
 800b38c:	4805      	ldr	r0, [pc, #20]	; (800b3a4 <CDC_Init_FS+0x20>)
 800b38e:	f7fe ff1f 	bl	800a1d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b392:	4905      	ldr	r1, [pc, #20]	; (800b3a8 <CDC_Init_FS+0x24>)
 800b394:	4803      	ldr	r0, [pc, #12]	; (800b3a4 <CDC_Init_FS+0x20>)
 800b396:	f7fe ff34 	bl	800a202 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b39a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	20000db4 	.word	0x20000db4
 800b3a4:	20000a98 	.word	0x20000a98
 800b3a8:	20000d34 	.word	0x20000d34

0800b3ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b3b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bc80      	pop	{r7}
 800b3b8:	4770      	bx	lr
	...

0800b3bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	6039      	str	r1, [r7, #0]
 800b3c6:	71fb      	strb	r3, [r7, #7]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b3cc:	79fb      	ldrb	r3, [r7, #7]
 800b3ce:	2b23      	cmp	r3, #35	; 0x23
 800b3d0:	d866      	bhi.n	800b4a0 <CDC_Control_FS+0xe4>
 800b3d2:	a201      	add	r2, pc, #4	; (adr r2, 800b3d8 <CDC_Control_FS+0x1c>)
 800b3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d8:	0800b4a1 	.word	0x0800b4a1
 800b3dc:	0800b4a1 	.word	0x0800b4a1
 800b3e0:	0800b4a1 	.word	0x0800b4a1
 800b3e4:	0800b4a1 	.word	0x0800b4a1
 800b3e8:	0800b4a1 	.word	0x0800b4a1
 800b3ec:	0800b4a1 	.word	0x0800b4a1
 800b3f0:	0800b4a1 	.word	0x0800b4a1
 800b3f4:	0800b4a1 	.word	0x0800b4a1
 800b3f8:	0800b4a1 	.word	0x0800b4a1
 800b3fc:	0800b4a1 	.word	0x0800b4a1
 800b400:	0800b4a1 	.word	0x0800b4a1
 800b404:	0800b4a1 	.word	0x0800b4a1
 800b408:	0800b4a1 	.word	0x0800b4a1
 800b40c:	0800b4a1 	.word	0x0800b4a1
 800b410:	0800b4a1 	.word	0x0800b4a1
 800b414:	0800b4a1 	.word	0x0800b4a1
 800b418:	0800b4a1 	.word	0x0800b4a1
 800b41c:	0800b4a1 	.word	0x0800b4a1
 800b420:	0800b4a1 	.word	0x0800b4a1
 800b424:	0800b4a1 	.word	0x0800b4a1
 800b428:	0800b4a1 	.word	0x0800b4a1
 800b42c:	0800b4a1 	.word	0x0800b4a1
 800b430:	0800b4a1 	.word	0x0800b4a1
 800b434:	0800b4a1 	.word	0x0800b4a1
 800b438:	0800b4a1 	.word	0x0800b4a1
 800b43c:	0800b4a1 	.word	0x0800b4a1
 800b440:	0800b4a1 	.word	0x0800b4a1
 800b444:	0800b4a1 	.word	0x0800b4a1
 800b448:	0800b4a1 	.word	0x0800b4a1
 800b44c:	0800b4a1 	.word	0x0800b4a1
 800b450:	0800b4a1 	.word	0x0800b4a1
 800b454:	0800b4a1 	.word	0x0800b4a1
 800b458:	0800b4a1 	.word	0x0800b4a1
 800b45c:	0800b469 	.word	0x0800b469
 800b460:	0800b4a1 	.word	0x0800b4a1
 800b464:	0800b4a1 	.word	0x0800b4a1
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	2220      	movs	r2, #32
 800b46c:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	3301      	adds	r3, #1
 800b472:	22c2      	movs	r2, #194	; 0xc2
 800b474:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	3302      	adds	r3, #2
 800b47a:	2201      	movs	r2, #1
 800b47c:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	3303      	adds	r3, #3
 800b482:	2200      	movs	r2, #0
 800b484:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	3304      	adds	r3, #4
 800b48a:	2200      	movs	r2, #0
 800b48c:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	3305      	adds	r3, #5
 800b492:	2200      	movs	r2, #0
 800b494:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	3306      	adds	r3, #6
 800b49a:	2208      	movs	r2, #8
 800b49c:	701a      	strb	r2, [r3, #0]
    break;
 800b49e:	e000      	b.n	800b4a2 <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b4a0:	bf00      	nop
  }

  return (USBD_OK);
 800b4a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bc80      	pop	{r7}
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop

0800b4b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800b4be:	e018      	b.n	800b4f2 <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b0a      	cmp	r3, #10
 800b4ca:	d005      	beq.n	800b4d8 <CDC_Receive_FS+0x28>
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	2b0d      	cmp	r3, #13
 800b4d6:	d102      	bne.n	800b4de <CDC_Receive_FS+0x2e>
 800b4d8:	4b12      	ldr	r3, [pc, #72]	; (800b524 <CDC_Receive_FS+0x74>)
 800b4da:	2201      	movs	r2, #1
 800b4dc:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7f6 fefc 	bl	80022e4 <Write_to_circ_buffer>
	  i++;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d3e1      	bcc.n	800b4c0 <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	b29b      	uxth	r3, r3
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f811 	bl	800b52c <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b50a:	6879      	ldr	r1, [r7, #4]
 800b50c:	4806      	ldr	r0, [pc, #24]	; (800b528 <CDC_Receive_FS+0x78>)
 800b50e:	f7fe fe78 	bl	800a202 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b512:	4805      	ldr	r0, [pc, #20]	; (800b528 <CDC_Receive_FS+0x78>)
 800b514:	f7fe feb7 	bl	800a286 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b518:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20000983 	.word	0x20000983
 800b528:	20000a98 	.word	0x20000a98

0800b52c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b538:	2300      	movs	r3, #0
 800b53a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b53c:	4b0d      	ldr	r3, [pc, #52]	; (800b574 <CDC_Transmit_FS+0x48>)
 800b53e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b542:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b54e:	2301      	movs	r3, #1
 800b550:	e00b      	b.n	800b56a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b552:	887b      	ldrh	r3, [r7, #2]
 800b554:	461a      	mov	r2, r3
 800b556:	6879      	ldr	r1, [r7, #4]
 800b558:	4806      	ldr	r0, [pc, #24]	; (800b574 <CDC_Transmit_FS+0x48>)
 800b55a:	f7fe fe39 	bl	800a1d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b55e:	4805      	ldr	r0, [pc, #20]	; (800b574 <CDC_Transmit_FS+0x48>)
 800b560:	f7fe fe62 	bl	800a228 <USBD_CDC_TransmitPacket>
 800b564:	4603      	mov	r3, r0
 800b566:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b568:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	20000a98 	.word	0x20000a98

0800b578 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	6039      	str	r1, [r7, #0]
 800b582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2212      	movs	r2, #18
 800b588:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b58a:	4b03      	ldr	r3, [pc, #12]	; (800b598 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	bc80      	pop	{r7}
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	200004b4 	.word	0x200004b4

0800b59c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	6039      	str	r1, [r7, #0]
 800b5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2204      	movs	r2, #4
 800b5ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5ae:	4b03      	ldr	r3, [pc, #12]	; (800b5bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bc80      	pop	{r7}
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	200004c8 	.word	0x200004c8

0800b5c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	6039      	str	r1, [r7, #0]
 800b5ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5cc:	79fb      	ldrb	r3, [r7, #7]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d105      	bne.n	800b5de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	4907      	ldr	r1, [pc, #28]	; (800b5f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5d6:	4808      	ldr	r0, [pc, #32]	; (800b5f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5d8:	f7ff fdc6 	bl	800b168 <USBD_GetString>
 800b5dc:	e004      	b.n	800b5e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	4904      	ldr	r1, [pc, #16]	; (800b5f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5e2:	4805      	ldr	r0, [pc, #20]	; (800b5f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5e4:	f7ff fdc0 	bl	800b168 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5e8:	4b02      	ldr	r3, [pc, #8]	; (800b5f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20000eb4 	.word	0x20000eb4
 800b5f8:	0800ebf4 	.word	0x0800ebf4

0800b5fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	4603      	mov	r3, r0
 800b604:	6039      	str	r1, [r7, #0]
 800b606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b608:	683a      	ldr	r2, [r7, #0]
 800b60a:	4904      	ldr	r1, [pc, #16]	; (800b61c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b60c:	4804      	ldr	r0, [pc, #16]	; (800b620 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b60e:	f7ff fdab 	bl	800b168 <USBD_GetString>
  return USBD_StrDesc;
 800b612:	4b02      	ldr	r3, [pc, #8]	; (800b61c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b614:	4618      	mov	r0, r3
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	20000eb4 	.word	0x20000eb4
 800b620:	0800ec00 	.word	0x0800ec00

0800b624 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	6039      	str	r1, [r7, #0]
 800b62e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	221a      	movs	r2, #26
 800b634:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b636:	f000 f843 	bl	800b6c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b63a:	4b02      	ldr	r3, [pc, #8]	; (800b644 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	200004cc 	.word	0x200004cc

0800b648 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	6039      	str	r1, [r7, #0]
 800b652:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d105      	bne.n	800b666 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	4907      	ldr	r1, [pc, #28]	; (800b67c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b65e:	4808      	ldr	r0, [pc, #32]	; (800b680 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b660:	f7ff fd82 	bl	800b168 <USBD_GetString>
 800b664:	e004      	b.n	800b670 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	4904      	ldr	r1, [pc, #16]	; (800b67c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b66a:	4805      	ldr	r0, [pc, #20]	; (800b680 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b66c:	f7ff fd7c 	bl	800b168 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b670:	4b02      	ldr	r3, [pc, #8]	; (800b67c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20000eb4 	.word	0x20000eb4
 800b680:	0800ec10 	.word	0x0800ec10

0800b684 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	4603      	mov	r3, r0
 800b68c:	6039      	str	r1, [r7, #0]
 800b68e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b690:	79fb      	ldrb	r3, [r7, #7]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d105      	bne.n	800b6a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	4907      	ldr	r1, [pc, #28]	; (800b6b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b69a:	4808      	ldr	r0, [pc, #32]	; (800b6bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b69c:	f7ff fd64 	bl	800b168 <USBD_GetString>
 800b6a0:	e004      	b.n	800b6ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	4904      	ldr	r1, [pc, #16]	; (800b6b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6a6:	4805      	ldr	r0, [pc, #20]	; (800b6bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6a8:	f7ff fd5e 	bl	800b168 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6ac:	4b02      	ldr	r3, [pc, #8]	; (800b6b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20000eb4 	.word	0x20000eb4
 800b6bc:	0800ec1c 	.word	0x0800ec1c

0800b6c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6c6:	4b0f      	ldr	r3, [pc, #60]	; (800b704 <Get_SerialNum+0x44>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6cc:	4b0e      	ldr	r3, [pc, #56]	; (800b708 <Get_SerialNum+0x48>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6d2:	4b0e      	ldr	r3, [pc, #56]	; (800b70c <Get_SerialNum+0x4c>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4413      	add	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d009      	beq.n	800b6fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6e6:	2208      	movs	r2, #8
 800b6e8:	4909      	ldr	r1, [pc, #36]	; (800b710 <Get_SerialNum+0x50>)
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f000 f814 	bl	800b718 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6f0:	2204      	movs	r2, #4
 800b6f2:	4908      	ldr	r1, [pc, #32]	; (800b714 <Get_SerialNum+0x54>)
 800b6f4:	68b8      	ldr	r0, [r7, #8]
 800b6f6:	f000 f80f 	bl	800b718 <IntToUnicode>
  }
}
 800b6fa:	bf00      	nop
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	1ff80050 	.word	0x1ff80050
 800b708:	1ff80054 	.word	0x1ff80054
 800b70c:	1ff80058 	.word	0x1ff80058
 800b710:	200004ce 	.word	0x200004ce
 800b714:	200004de 	.word	0x200004de

0800b718 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b718:	b480      	push	{r7}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	4613      	mov	r3, r2
 800b724:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b726:	2300      	movs	r3, #0
 800b728:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b72a:	2300      	movs	r3, #0
 800b72c:	75fb      	strb	r3, [r7, #23]
 800b72e:	e027      	b.n	800b780 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	0f1b      	lsrs	r3, r3, #28
 800b734:	2b09      	cmp	r3, #9
 800b736:	d80b      	bhi.n	800b750 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	0f1b      	lsrs	r3, r3, #28
 800b73c:	b2da      	uxtb	r2, r3
 800b73e:	7dfb      	ldrb	r3, [r7, #23]
 800b740:	005b      	lsls	r3, r3, #1
 800b742:	4619      	mov	r1, r3
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	440b      	add	r3, r1
 800b748:	3230      	adds	r2, #48	; 0x30
 800b74a:	b2d2      	uxtb	r2, r2
 800b74c:	701a      	strb	r2, [r3, #0]
 800b74e:	e00a      	b.n	800b766 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	0f1b      	lsrs	r3, r3, #28
 800b754:	b2da      	uxtb	r2, r3
 800b756:	7dfb      	ldrb	r3, [r7, #23]
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	4619      	mov	r1, r3
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	440b      	add	r3, r1
 800b760:	3237      	adds	r2, #55	; 0x37
 800b762:	b2d2      	uxtb	r2, r2
 800b764:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	011b      	lsls	r3, r3, #4
 800b76a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b76c:	7dfb      	ldrb	r3, [r7, #23]
 800b76e:	005b      	lsls	r3, r3, #1
 800b770:	3301      	adds	r3, #1
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	4413      	add	r3, r2
 800b776:	2200      	movs	r2, #0
 800b778:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
 800b77c:	3301      	adds	r3, #1
 800b77e:	75fb      	strb	r3, [r7, #23]
 800b780:	7dfa      	ldrb	r2, [r7, #23]
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	429a      	cmp	r2, r3
 800b786:	d3d3      	bcc.n	800b730 <IntToUnicode+0x18>
  }
}
 800b788:	bf00      	nop
 800b78a:	bf00      	nop
 800b78c:	371c      	adds	r7, #28
 800b78e:	46bd      	mov	sp, r7
 800b790:	bc80      	pop	{r7}
 800b792:	4770      	bx	lr

0800b794 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800b7a0:	78fb      	ldrb	r3, [r7, #3]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d106      	bne.n	800b7b4 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800b7a6:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <HAL_PCDEx_SetConnectionState+0x38>)
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	4a08      	ldr	r2, [pc, #32]	; (800b7cc <HAL_PCDEx_SetConnectionState+0x38>)
 800b7ac:	f043 0301 	orr.w	r3, r3, #1
 800b7b0:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800b7b2:	e005      	b.n	800b7c0 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800b7b4:	4b05      	ldr	r3, [pc, #20]	; (800b7cc <HAL_PCDEx_SetConnectionState+0x38>)
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	4a04      	ldr	r2, [pc, #16]	; (800b7cc <HAL_PCDEx_SetConnectionState+0x38>)
 800b7ba:	f023 0301 	bic.w	r3, r3, #1
 800b7be:	6053      	str	r3, [r2, #4]
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bc80      	pop	{r7}
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	40010000 	.word	0x40010000

0800b7d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a0d      	ldr	r2, [pc, #52]	; (800b814 <HAL_PCD_MspInit+0x44>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d113      	bne.n	800b80a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b7e2:	4b0d      	ldr	r3, [pc, #52]	; (800b818 <HAL_PCD_MspInit+0x48>)
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e6:	4a0c      	ldr	r2, [pc, #48]	; (800b818 <HAL_PCD_MspInit+0x48>)
 800b7e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7ec:	6253      	str	r3, [r2, #36]	; 0x24
 800b7ee:	4b0a      	ldr	r3, [pc, #40]	; (800b818 <HAL_PCD_MspInit+0x48>)
 800b7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	2101      	movs	r1, #1
 800b7fe:	2014      	movs	r0, #20
 800b800:	f7f7 fe95 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b804:	2014      	movs	r0, #20
 800b806:	f7f7 feae 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b80a:	bf00      	nop
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	40005c00 	.word	0x40005c00
 800b818:	40023800 	.word	0x40023800

0800b81c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b830:	4619      	mov	r1, r3
 800b832:	4610      	mov	r0, r2
 800b834:	f7fe fddd 	bl	800a3f2 <USBD_LL_SetupStage>
}
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	460b      	mov	r3, r1
 800b84a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b852:	78fa      	ldrb	r2, [r7, #3]
 800b854:	6879      	ldr	r1, [r7, #4]
 800b856:	4613      	mov	r3, r2
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4413      	add	r3, r2
 800b85c:	00db      	lsls	r3, r3, #3
 800b85e:	440b      	add	r3, r1
 800b860:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	78fb      	ldrb	r3, [r7, #3]
 800b868:	4619      	mov	r1, r3
 800b86a:	f7fe fe0f 	bl	800a48c <USBD_LL_DataOutStage>
}
 800b86e:	bf00      	nop
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b082      	sub	sp, #8
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	460b      	mov	r3, r1
 800b880:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b888:	78fa      	ldrb	r2, [r7, #3]
 800b88a:	6879      	ldr	r1, [r7, #4]
 800b88c:	4613      	mov	r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	4413      	add	r3, r2
 800b892:	00db      	lsls	r3, r3, #3
 800b894:	440b      	add	r3, r1
 800b896:	333c      	adds	r3, #60	; 0x3c
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	78fb      	ldrb	r3, [r7, #3]
 800b89c:	4619      	mov	r1, r3
 800b89e:	f7fe fe66 	bl	800a56e <USBD_LL_DataInStage>
}
 800b8a2:	bf00      	nop
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fe ff71 	bl	800a7a0 <USBD_LL_SOF>
}
 800b8be:	bf00      	nop
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	d001      	beq.n	800b8de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b8da:	f7f7 f9cf 	bl	8002c7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8e4:	7bfa      	ldrb	r2, [r7, #15]
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fe ff26 	bl	800a73a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7fe fedf 	bl	800a6b8 <USBD_LL_Reset>
}
 800b8fa:	bf00      	nop
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
	...

0800b904 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b912:	4618      	mov	r0, r3
 800b914:	f7fe ff20 	bl	800a758 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	699b      	ldr	r3, [r3, #24]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d005      	beq.n	800b92c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b920:	4b04      	ldr	r3, [pc, #16]	; (800b934 <HAL_PCD_SuspendCallback+0x30>)
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	4a03      	ldr	r2, [pc, #12]	; (800b934 <HAL_PCD_SuspendCallback+0x30>)
 800b926:	f043 0306 	orr.w	r3, r3, #6
 800b92a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b92c:	bf00      	nop
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	e000ed00 	.word	0xe000ed00

0800b938 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe ff1a 	bl	800a780 <USBD_LL_Resume>
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b95c:	4a28      	ldr	r2, [pc, #160]	; (800ba00 <USBD_LL_Init+0xac>)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a26      	ldr	r2, [pc, #152]	; (800ba00 <USBD_LL_Init+0xac>)
 800b968:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800b96c:	4b24      	ldr	r3, [pc, #144]	; (800ba00 <USBD_LL_Init+0xac>)
 800b96e:	4a25      	ldr	r2, [pc, #148]	; (800ba04 <USBD_LL_Init+0xb0>)
 800b970:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b972:	4b23      	ldr	r3, [pc, #140]	; (800ba00 <USBD_LL_Init+0xac>)
 800b974:	2208      	movs	r2, #8
 800b976:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b978:	4b21      	ldr	r3, [pc, #132]	; (800ba00 <USBD_LL_Init+0xac>)
 800b97a:	2202      	movs	r2, #2
 800b97c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b97e:	4b20      	ldr	r3, [pc, #128]	; (800ba00 <USBD_LL_Init+0xac>)
 800b980:	2202      	movs	r2, #2
 800b982:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b984:	4b1e      	ldr	r3, [pc, #120]	; (800ba00 <USBD_LL_Init+0xac>)
 800b986:	2200      	movs	r2, #0
 800b988:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b98a:	4b1d      	ldr	r3, [pc, #116]	; (800ba00 <USBD_LL_Init+0xac>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b990:	481b      	ldr	r0, [pc, #108]	; (800ba00 <USBD_LL_Init+0xac>)
 800b992:	f7f8 fb69 	bl	8004068 <HAL_PCD_Init>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b99c:	f7f7 f96e 	bl	8002c7c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b9a6:	2318      	movs	r3, #24
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	f7f9 ff46 	bl	800583c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b9b6:	2358      	movs	r3, #88	; 0x58
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	2180      	movs	r1, #128	; 0x80
 800b9bc:	f7f9 ff3e 	bl	800583c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b9c6:	23c0      	movs	r3, #192	; 0xc0
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2181      	movs	r1, #129	; 0x81
 800b9cc:	f7f9 ff36 	bl	800583c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b9d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2101      	movs	r1, #1
 800b9de:	f7f9 ff2d 	bl	800583c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b9e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2182      	movs	r1, #130	; 0x82
 800b9f0:	f7f9 ff24 	bl	800583c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	200010b4 	.word	0x200010b4
 800ba04:	40005c00 	.word	0x40005c00

0800ba08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f8 fc00 	bl	8004224 <HAL_PCD_Start>
 800ba24:	4603      	mov	r3, r0
 800ba26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 f944 	bl	800bcb8 <USBD_Get_USB_Status>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b084      	sub	sp, #16
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	4608      	mov	r0, r1
 800ba48:	4611      	mov	r1, r2
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	70fb      	strb	r3, [r7, #3]
 800ba50:	460b      	mov	r3, r1
 800ba52:	70bb      	strb	r3, [r7, #2]
 800ba54:	4613      	mov	r3, r2
 800ba56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ba66:	78bb      	ldrb	r3, [r7, #2]
 800ba68:	883a      	ldrh	r2, [r7, #0]
 800ba6a:	78f9      	ldrb	r1, [r7, #3]
 800ba6c:	f7f8 fd1c 	bl	80044a8 <HAL_PCD_EP_Open>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 f91e 	bl	800bcb8 <USBD_Get_USB_Status>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	460b      	mov	r3, r1
 800ba94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800baa4:	78fa      	ldrb	r2, [r7, #3]
 800baa6:	4611      	mov	r1, r2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7f8 fd63 	bl	8004574 <HAL_PCD_EP_Close>
 800baae:	4603      	mov	r3, r0
 800bab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f000 f8ff 	bl	800bcb8 <USBD_Get_USB_Status>
 800baba:	4603      	mov	r3, r0
 800babc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800babe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bae2:	78fa      	ldrb	r2, [r7, #3]
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7f8 fe23 	bl	8004732 <HAL_PCD_EP_SetStall>
 800baec:	4603      	mov	r3, r0
 800baee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 f8e0 	bl	800bcb8 <USBD_Get_USB_Status>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b084      	sub	sp, #16
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb12:	2300      	movs	r3, #0
 800bb14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb20:	78fa      	ldrb	r2, [r7, #3]
 800bb22:	4611      	mov	r1, r2
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7f8 fe56 	bl	80047d6 <HAL_PCD_EP_ClrStall>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 f8c1 	bl	800bcb8 <USBD_Get_USB_Status>
 800bb36:	4603      	mov	r3, r0
 800bb38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	da0c      	bge.n	800bb7a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb60:	78fb      	ldrb	r3, [r7, #3]
 800bb62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb66:	68f9      	ldr	r1, [r7, #12]
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	440b      	add	r3, r1
 800bb74:	3302      	adds	r3, #2
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	e00b      	b.n	800bb92 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb7a:	78fb      	ldrb	r3, [r7, #3]
 800bb7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb80:	68f9      	ldr	r1, [r7, #12]
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	440b      	add	r3, r1
 800bb8c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bb90:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bc80      	pop	{r7}
 800bb9a:	4770      	bx	lr

0800bb9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	460b      	mov	r3, r1
 800bba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bbb6:	78fa      	ldrb	r2, [r7, #3]
 800bbb8:	4611      	mov	r1, r2
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7f8 fc4f 	bl	800445e <HAL_PCD_SetAddress>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 f876 	bl	800bcb8 <USBD_Get_USB_Status>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b086      	sub	sp, #24
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	60f8      	str	r0, [r7, #12]
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	72fb      	strb	r3, [r7, #11]
 800bbea:	4613      	mov	r3, r2
 800bbec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bbfc:	893b      	ldrh	r3, [r7, #8]
 800bbfe:	7af9      	ldrb	r1, [r7, #11]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	f7f8 fd53 	bl	80046ac <HAL_PCD_EP_Transmit>
 800bc06:	4603      	mov	r3, r0
 800bc08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc0a:	7dfb      	ldrb	r3, [r7, #23]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 f853 	bl	800bcb8 <USBD_Get_USB_Status>
 800bc12:	4603      	mov	r3, r0
 800bc14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc16:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	607a      	str	r2, [r7, #4]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	72fb      	strb	r3, [r7, #11]
 800bc30:	4613      	mov	r3, r2
 800bc32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bc42:	893b      	ldrh	r3, [r7, #8]
 800bc44:	7af9      	ldrb	r1, [r7, #11]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	f7f8 fcdc 	bl	8004604 <HAL_PCD_EP_Receive>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 f830 	bl	800bcb8 <USBD_Get_USB_Status>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc5c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3718      	adds	r7, #24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b082      	sub	sp, #8
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	460b      	mov	r3, r1
 800bc70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc78:	78fa      	ldrb	r2, [r7, #3]
 800bc7a:	4611      	mov	r1, r2
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7f8 fcfe 	bl	800467e <HAL_PCD_EP_GetRxCount>
 800bc82:	4603      	mov	r3, r0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc94:	4b02      	ldr	r3, [pc, #8]	; (800bca0 <USBD_static_malloc+0x14>)
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bc80      	pop	{r7}
 800bc9e:	4770      	bx	lr
 800bca0:	200006ec 	.word	0x200006ec

0800bca4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]

}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bc80      	pop	{r7}
 800bcb4:	4770      	bx	lr
	...

0800bcb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bcc6:	79fb      	ldrb	r3, [r7, #7]
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d817      	bhi.n	800bcfc <USBD_Get_USB_Status+0x44>
 800bccc:	a201      	add	r2, pc, #4	; (adr r2, 800bcd4 <USBD_Get_USB_Status+0x1c>)
 800bcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd2:	bf00      	nop
 800bcd4:	0800bce5 	.word	0x0800bce5
 800bcd8:	0800bceb 	.word	0x0800bceb
 800bcdc:	0800bcf1 	.word	0x0800bcf1
 800bce0:	0800bcf7 	.word	0x0800bcf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73fb      	strb	r3, [r7, #15]
    break;
 800bce8:	e00b      	b.n	800bd02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcea:	2302      	movs	r3, #2
 800bcec:	73fb      	strb	r3, [r7, #15]
    break;
 800bcee:	e008      	b.n	800bd02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf4:	e005      	b.n	800bd02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcfa:	e002      	b.n	800bd02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	73fb      	strb	r3, [r7, #15]
    break;
 800bd00:	bf00      	nop
  }
  return usb_status;
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bc80      	pop	{r7}
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop

0800bd10 <atof>:
 800bd10:	2100      	movs	r1, #0
 800bd12:	f000 be61 	b.w	800c9d8 <strtod>
	...

0800bd18 <__errno>:
 800bd18:	4b01      	ldr	r3, [pc, #4]	; (800bd20 <__errno+0x8>)
 800bd1a:	6818      	ldr	r0, [r3, #0]
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	200004e8 	.word	0x200004e8

0800bd24 <__libc_init_array>:
 800bd24:	b570      	push	{r4, r5, r6, lr}
 800bd26:	2600      	movs	r6, #0
 800bd28:	4d0c      	ldr	r5, [pc, #48]	; (800bd5c <__libc_init_array+0x38>)
 800bd2a:	4c0d      	ldr	r4, [pc, #52]	; (800bd60 <__libc_init_array+0x3c>)
 800bd2c:	1b64      	subs	r4, r4, r5
 800bd2e:	10a4      	asrs	r4, r4, #2
 800bd30:	42a6      	cmp	r6, r4
 800bd32:	d109      	bne.n	800bd48 <__libc_init_array+0x24>
 800bd34:	f002 fee8 	bl	800eb08 <_init>
 800bd38:	2600      	movs	r6, #0
 800bd3a:	4d0a      	ldr	r5, [pc, #40]	; (800bd64 <__libc_init_array+0x40>)
 800bd3c:	4c0a      	ldr	r4, [pc, #40]	; (800bd68 <__libc_init_array+0x44>)
 800bd3e:	1b64      	subs	r4, r4, r5
 800bd40:	10a4      	asrs	r4, r4, #2
 800bd42:	42a6      	cmp	r6, r4
 800bd44:	d105      	bne.n	800bd52 <__libc_init_array+0x2e>
 800bd46:	bd70      	pop	{r4, r5, r6, pc}
 800bd48:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd4c:	4798      	blx	r3
 800bd4e:	3601      	adds	r6, #1
 800bd50:	e7ee      	b.n	800bd30 <__libc_init_array+0xc>
 800bd52:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd56:	4798      	blx	r3
 800bd58:	3601      	adds	r6, #1
 800bd5a:	e7f2      	b.n	800bd42 <__libc_init_array+0x1e>
 800bd5c:	0800f0e8 	.word	0x0800f0e8
 800bd60:	0800f0e8 	.word	0x0800f0e8
 800bd64:	0800f0e8 	.word	0x0800f0e8
 800bd68:	0800f0ec 	.word	0x0800f0ec

0800bd6c <memcpy>:
 800bd6c:	440a      	add	r2, r1
 800bd6e:	4291      	cmp	r1, r2
 800bd70:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd74:	d100      	bne.n	800bd78 <memcpy+0xc>
 800bd76:	4770      	bx	lr
 800bd78:	b510      	push	{r4, lr}
 800bd7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd7e:	4291      	cmp	r1, r2
 800bd80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd84:	d1f9      	bne.n	800bd7a <memcpy+0xe>
 800bd86:	bd10      	pop	{r4, pc}

0800bd88 <memset>:
 800bd88:	4603      	mov	r3, r0
 800bd8a:	4402      	add	r2, r0
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d100      	bne.n	800bd92 <memset+0xa>
 800bd90:	4770      	bx	lr
 800bd92:	f803 1b01 	strb.w	r1, [r3], #1
 800bd96:	e7f9      	b.n	800bd8c <memset+0x4>

0800bd98 <strcpy>:
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd9e:	f803 2b01 	strb.w	r2, [r3], #1
 800bda2:	2a00      	cmp	r2, #0
 800bda4:	d1f9      	bne.n	800bd9a <strcpy+0x2>
 800bda6:	4770      	bx	lr

0800bda8 <sulp>:
 800bda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdac:	460f      	mov	r7, r1
 800bdae:	4690      	mov	r8, r2
 800bdb0:	f001 fd9a 	bl	800d8e8 <__ulp>
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	f1b8 0f00 	cmp.w	r8, #0
 800bdbc:	d011      	beq.n	800bde2 <sulp+0x3a>
 800bdbe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800bdc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	dd0b      	ble.n	800bde2 <sulp+0x3a>
 800bdca:	2400      	movs	r4, #0
 800bdcc:	051b      	lsls	r3, r3, #20
 800bdce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bdd2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bdd6:	4622      	mov	r2, r4
 800bdd8:	462b      	mov	r3, r5
 800bdda:	f7f4 fb9f 	bl	800051c <__aeabi_dmul>
 800bdde:	4604      	mov	r4, r0
 800bde0:	460d      	mov	r5, r1
 800bde2:	4620      	mov	r0, r4
 800bde4:	4629      	mov	r1, r5
 800bde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdea:	0000      	movs	r0, r0
 800bdec:	0000      	movs	r0, r0
	...

0800bdf0 <_strtod_l>:
 800bdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf4:	469b      	mov	fp, r3
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	b0a1      	sub	sp, #132	; 0x84
 800bdfa:	931c      	str	r3, [sp, #112]	; 0x70
 800bdfc:	4ba1      	ldr	r3, [pc, #644]	; (800c084 <_strtod_l+0x294>)
 800bdfe:	4682      	mov	sl, r0
 800be00:	681f      	ldr	r7, [r3, #0]
 800be02:	460e      	mov	r6, r1
 800be04:	4638      	mov	r0, r7
 800be06:	9217      	str	r2, [sp, #92]	; 0x5c
 800be08:	f7f4 f9c4 	bl	8000194 <strlen>
 800be0c:	f04f 0800 	mov.w	r8, #0
 800be10:	4604      	mov	r4, r0
 800be12:	f04f 0900 	mov.w	r9, #0
 800be16:	961b      	str	r6, [sp, #108]	; 0x6c
 800be18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be1a:	781a      	ldrb	r2, [r3, #0]
 800be1c:	2a2b      	cmp	r2, #43	; 0x2b
 800be1e:	d04c      	beq.n	800beba <_strtod_l+0xca>
 800be20:	d83a      	bhi.n	800be98 <_strtod_l+0xa8>
 800be22:	2a0d      	cmp	r2, #13
 800be24:	d833      	bhi.n	800be8e <_strtod_l+0x9e>
 800be26:	2a08      	cmp	r2, #8
 800be28:	d833      	bhi.n	800be92 <_strtod_l+0xa2>
 800be2a:	2a00      	cmp	r2, #0
 800be2c:	d03d      	beq.n	800beaa <_strtod_l+0xba>
 800be2e:	2300      	movs	r3, #0
 800be30:	930c      	str	r3, [sp, #48]	; 0x30
 800be32:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800be34:	782b      	ldrb	r3, [r5, #0]
 800be36:	2b30      	cmp	r3, #48	; 0x30
 800be38:	f040 80af 	bne.w	800bf9a <_strtod_l+0x1aa>
 800be3c:	786b      	ldrb	r3, [r5, #1]
 800be3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be42:	2b58      	cmp	r3, #88	; 0x58
 800be44:	d16c      	bne.n	800bf20 <_strtod_l+0x130>
 800be46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be48:	4650      	mov	r0, sl
 800be4a:	9301      	str	r3, [sp, #4]
 800be4c:	ab1c      	add	r3, sp, #112	; 0x70
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	4a8d      	ldr	r2, [pc, #564]	; (800c088 <_strtod_l+0x298>)
 800be52:	f8cd b008 	str.w	fp, [sp, #8]
 800be56:	ab1d      	add	r3, sp, #116	; 0x74
 800be58:	a91b      	add	r1, sp, #108	; 0x6c
 800be5a:	f000 febd 	bl	800cbd8 <__gethex>
 800be5e:	f010 0607 	ands.w	r6, r0, #7
 800be62:	4604      	mov	r4, r0
 800be64:	d005      	beq.n	800be72 <_strtod_l+0x82>
 800be66:	2e06      	cmp	r6, #6
 800be68:	d129      	bne.n	800bebe <_strtod_l+0xce>
 800be6a:	2300      	movs	r3, #0
 800be6c:	3501      	adds	r5, #1
 800be6e:	951b      	str	r5, [sp, #108]	; 0x6c
 800be70:	930c      	str	r3, [sp, #48]	; 0x30
 800be72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be74:	2b00      	cmp	r3, #0
 800be76:	f040 8596 	bne.w	800c9a6 <_strtod_l+0xbb6>
 800be7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be7c:	b1d3      	cbz	r3, 800beb4 <_strtod_l+0xc4>
 800be7e:	4642      	mov	r2, r8
 800be80:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800be84:	4610      	mov	r0, r2
 800be86:	4619      	mov	r1, r3
 800be88:	b021      	add	sp, #132	; 0x84
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8e:	2a20      	cmp	r2, #32
 800be90:	d1cd      	bne.n	800be2e <_strtod_l+0x3e>
 800be92:	3301      	adds	r3, #1
 800be94:	931b      	str	r3, [sp, #108]	; 0x6c
 800be96:	e7bf      	b.n	800be18 <_strtod_l+0x28>
 800be98:	2a2d      	cmp	r2, #45	; 0x2d
 800be9a:	d1c8      	bne.n	800be2e <_strtod_l+0x3e>
 800be9c:	2201      	movs	r2, #1
 800be9e:	920c      	str	r2, [sp, #48]	; 0x30
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	921b      	str	r2, [sp, #108]	; 0x6c
 800bea4:	785b      	ldrb	r3, [r3, #1]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1c3      	bne.n	800be32 <_strtod_l+0x42>
 800beaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800beac:	961b      	str	r6, [sp, #108]	; 0x6c
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f040 8577 	bne.w	800c9a2 <_strtod_l+0xbb2>
 800beb4:	4642      	mov	r2, r8
 800beb6:	464b      	mov	r3, r9
 800beb8:	e7e4      	b.n	800be84 <_strtod_l+0x94>
 800beba:	2200      	movs	r2, #0
 800bebc:	e7ef      	b.n	800be9e <_strtod_l+0xae>
 800bebe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bec0:	b13a      	cbz	r2, 800bed2 <_strtod_l+0xe2>
 800bec2:	2135      	movs	r1, #53	; 0x35
 800bec4:	a81e      	add	r0, sp, #120	; 0x78
 800bec6:	f001 fe13 	bl	800daf0 <__copybits>
 800beca:	4650      	mov	r0, sl
 800becc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bece:	f001 f9db 	bl	800d288 <_Bfree>
 800bed2:	3e01      	subs	r6, #1
 800bed4:	2e05      	cmp	r6, #5
 800bed6:	d807      	bhi.n	800bee8 <_strtod_l+0xf8>
 800bed8:	e8df f006 	tbb	[pc, r6]
 800bedc:	1d180b0e 	.word	0x1d180b0e
 800bee0:	030e      	.short	0x030e
 800bee2:	f04f 0900 	mov.w	r9, #0
 800bee6:	46c8      	mov	r8, r9
 800bee8:	0721      	lsls	r1, r4, #28
 800beea:	d5c2      	bpl.n	800be72 <_strtod_l+0x82>
 800beec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800bef0:	e7bf      	b.n	800be72 <_strtod_l+0x82>
 800bef2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800bef6:	e7f7      	b.n	800bee8 <_strtod_l+0xf8>
 800bef8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800befa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800befe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bf02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bf06:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bf0a:	e7ed      	b.n	800bee8 <_strtod_l+0xf8>
 800bf0c:	f04f 0800 	mov.w	r8, #0
 800bf10:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c08c <_strtod_l+0x29c>
 800bf14:	e7e8      	b.n	800bee8 <_strtod_l+0xf8>
 800bf16:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bf1a:	f04f 38ff 	mov.w	r8, #4294967295
 800bf1e:	e7e3      	b.n	800bee8 <_strtod_l+0xf8>
 800bf20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf22:	1c5a      	adds	r2, r3, #1
 800bf24:	921b      	str	r2, [sp, #108]	; 0x6c
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	2b30      	cmp	r3, #48	; 0x30
 800bf2a:	d0f9      	beq.n	800bf20 <_strtod_l+0x130>
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d0a0      	beq.n	800be72 <_strtod_l+0x82>
 800bf30:	2301      	movs	r3, #1
 800bf32:	9307      	str	r3, [sp, #28]
 800bf34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf36:	220a      	movs	r2, #10
 800bf38:	9308      	str	r3, [sp, #32]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	469b      	mov	fp, r3
 800bf3e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800bf42:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bf44:	7805      	ldrb	r5, [r0, #0]
 800bf46:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800bf4a:	b2d9      	uxtb	r1, r3
 800bf4c:	2909      	cmp	r1, #9
 800bf4e:	d926      	bls.n	800bf9e <_strtod_l+0x1ae>
 800bf50:	4622      	mov	r2, r4
 800bf52:	4639      	mov	r1, r7
 800bf54:	f002 f9c8 	bl	800e2e8 <strncmp>
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d032      	beq.n	800bfc2 <_strtod_l+0x1d2>
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	462b      	mov	r3, r5
 800bf60:	465c      	mov	r4, fp
 800bf62:	4602      	mov	r2, r0
 800bf64:	9004      	str	r0, [sp, #16]
 800bf66:	2b65      	cmp	r3, #101	; 0x65
 800bf68:	d001      	beq.n	800bf6e <_strtod_l+0x17e>
 800bf6a:	2b45      	cmp	r3, #69	; 0x45
 800bf6c:	d113      	bne.n	800bf96 <_strtod_l+0x1a6>
 800bf6e:	b91c      	cbnz	r4, 800bf78 <_strtod_l+0x188>
 800bf70:	9b07      	ldr	r3, [sp, #28]
 800bf72:	4303      	orrs	r3, r0
 800bf74:	d099      	beq.n	800beaa <_strtod_l+0xba>
 800bf76:	2400      	movs	r4, #0
 800bf78:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bf7a:	1c73      	adds	r3, r6, #1
 800bf7c:	931b      	str	r3, [sp, #108]	; 0x6c
 800bf7e:	7873      	ldrb	r3, [r6, #1]
 800bf80:	2b2b      	cmp	r3, #43	; 0x2b
 800bf82:	d078      	beq.n	800c076 <_strtod_l+0x286>
 800bf84:	2b2d      	cmp	r3, #45	; 0x2d
 800bf86:	d07b      	beq.n	800c080 <_strtod_l+0x290>
 800bf88:	2700      	movs	r7, #0
 800bf8a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bf8e:	2909      	cmp	r1, #9
 800bf90:	f240 8082 	bls.w	800c098 <_strtod_l+0x2a8>
 800bf94:	961b      	str	r6, [sp, #108]	; 0x6c
 800bf96:	2500      	movs	r5, #0
 800bf98:	e09e      	b.n	800c0d8 <_strtod_l+0x2e8>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	e7c9      	b.n	800bf32 <_strtod_l+0x142>
 800bf9e:	f1bb 0f08 	cmp.w	fp, #8
 800bfa2:	bfd5      	itete	le
 800bfa4:	9906      	ldrle	r1, [sp, #24]
 800bfa6:	9905      	ldrgt	r1, [sp, #20]
 800bfa8:	fb02 3301 	mlale	r3, r2, r1, r3
 800bfac:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bfb0:	f100 0001 	add.w	r0, r0, #1
 800bfb4:	bfd4      	ite	le
 800bfb6:	9306      	strle	r3, [sp, #24]
 800bfb8:	9305      	strgt	r3, [sp, #20]
 800bfba:	f10b 0b01 	add.w	fp, fp, #1
 800bfbe:	901b      	str	r0, [sp, #108]	; 0x6c
 800bfc0:	e7bf      	b.n	800bf42 <_strtod_l+0x152>
 800bfc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfc4:	191a      	adds	r2, r3, r4
 800bfc6:	921b      	str	r2, [sp, #108]	; 0x6c
 800bfc8:	5d1b      	ldrb	r3, [r3, r4]
 800bfca:	f1bb 0f00 	cmp.w	fp, #0
 800bfce:	d036      	beq.n	800c03e <_strtod_l+0x24e>
 800bfd0:	465c      	mov	r4, fp
 800bfd2:	9004      	str	r0, [sp, #16]
 800bfd4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bfd8:	2a09      	cmp	r2, #9
 800bfda:	d912      	bls.n	800c002 <_strtod_l+0x212>
 800bfdc:	2201      	movs	r2, #1
 800bfde:	e7c2      	b.n	800bf66 <_strtod_l+0x176>
 800bfe0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	1c5a      	adds	r2, r3, #1
 800bfe6:	921b      	str	r2, [sp, #108]	; 0x6c
 800bfe8:	785b      	ldrb	r3, [r3, #1]
 800bfea:	2b30      	cmp	r3, #48	; 0x30
 800bfec:	d0f8      	beq.n	800bfe0 <_strtod_l+0x1f0>
 800bfee:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bff2:	2a08      	cmp	r2, #8
 800bff4:	f200 84dc 	bhi.w	800c9b0 <_strtod_l+0xbc0>
 800bff8:	9004      	str	r0, [sp, #16]
 800bffa:	2000      	movs	r0, #0
 800bffc:	4604      	mov	r4, r0
 800bffe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c000:	9208      	str	r2, [sp, #32]
 800c002:	3b30      	subs	r3, #48	; 0x30
 800c004:	f100 0201 	add.w	r2, r0, #1
 800c008:	d013      	beq.n	800c032 <_strtod_l+0x242>
 800c00a:	9904      	ldr	r1, [sp, #16]
 800c00c:	1905      	adds	r5, r0, r4
 800c00e:	4411      	add	r1, r2
 800c010:	9104      	str	r1, [sp, #16]
 800c012:	4622      	mov	r2, r4
 800c014:	210a      	movs	r1, #10
 800c016:	42aa      	cmp	r2, r5
 800c018:	d113      	bne.n	800c042 <_strtod_l+0x252>
 800c01a:	1822      	adds	r2, r4, r0
 800c01c:	2a08      	cmp	r2, #8
 800c01e:	f104 0401 	add.w	r4, r4, #1
 800c022:	4404      	add	r4, r0
 800c024:	dc1b      	bgt.n	800c05e <_strtod_l+0x26e>
 800c026:	220a      	movs	r2, #10
 800c028:	9906      	ldr	r1, [sp, #24]
 800c02a:	fb02 3301 	mla	r3, r2, r1, r3
 800c02e:	9306      	str	r3, [sp, #24]
 800c030:	2200      	movs	r2, #0
 800c032:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c034:	4610      	mov	r0, r2
 800c036:	1c59      	adds	r1, r3, #1
 800c038:	911b      	str	r1, [sp, #108]	; 0x6c
 800c03a:	785b      	ldrb	r3, [r3, #1]
 800c03c:	e7ca      	b.n	800bfd4 <_strtod_l+0x1e4>
 800c03e:	4658      	mov	r0, fp
 800c040:	e7d3      	b.n	800bfea <_strtod_l+0x1fa>
 800c042:	2a08      	cmp	r2, #8
 800c044:	dc04      	bgt.n	800c050 <_strtod_l+0x260>
 800c046:	9f06      	ldr	r7, [sp, #24]
 800c048:	434f      	muls	r7, r1
 800c04a:	9706      	str	r7, [sp, #24]
 800c04c:	3201      	adds	r2, #1
 800c04e:	e7e2      	b.n	800c016 <_strtod_l+0x226>
 800c050:	1c57      	adds	r7, r2, #1
 800c052:	2f10      	cmp	r7, #16
 800c054:	bfde      	ittt	le
 800c056:	9f05      	ldrle	r7, [sp, #20]
 800c058:	434f      	mulle	r7, r1
 800c05a:	9705      	strle	r7, [sp, #20]
 800c05c:	e7f6      	b.n	800c04c <_strtod_l+0x25c>
 800c05e:	2c10      	cmp	r4, #16
 800c060:	bfdf      	itttt	le
 800c062:	220a      	movle	r2, #10
 800c064:	9905      	ldrle	r1, [sp, #20]
 800c066:	fb02 3301 	mlale	r3, r2, r1, r3
 800c06a:	9305      	strle	r3, [sp, #20]
 800c06c:	e7e0      	b.n	800c030 <_strtod_l+0x240>
 800c06e:	2300      	movs	r3, #0
 800c070:	2201      	movs	r2, #1
 800c072:	9304      	str	r3, [sp, #16]
 800c074:	e77c      	b.n	800bf70 <_strtod_l+0x180>
 800c076:	2700      	movs	r7, #0
 800c078:	1cb3      	adds	r3, r6, #2
 800c07a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c07c:	78b3      	ldrb	r3, [r6, #2]
 800c07e:	e784      	b.n	800bf8a <_strtod_l+0x19a>
 800c080:	2701      	movs	r7, #1
 800c082:	e7f9      	b.n	800c078 <_strtod_l+0x288>
 800c084:	0800edd8 	.word	0x0800edd8
 800c088:	0800ec58 	.word	0x0800ec58
 800c08c:	7ff00000 	.word	0x7ff00000
 800c090:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c092:	1c59      	adds	r1, r3, #1
 800c094:	911b      	str	r1, [sp, #108]	; 0x6c
 800c096:	785b      	ldrb	r3, [r3, #1]
 800c098:	2b30      	cmp	r3, #48	; 0x30
 800c09a:	d0f9      	beq.n	800c090 <_strtod_l+0x2a0>
 800c09c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c0a0:	2908      	cmp	r1, #8
 800c0a2:	f63f af78 	bhi.w	800bf96 <_strtod_l+0x1a6>
 800c0a6:	f04f 0e0a 	mov.w	lr, #10
 800c0aa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800c0ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c0b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0b4:	1c59      	adds	r1, r3, #1
 800c0b6:	911b      	str	r1, [sp, #108]	; 0x6c
 800c0b8:	785b      	ldrb	r3, [r3, #1]
 800c0ba:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800c0be:	2d09      	cmp	r5, #9
 800c0c0:	d935      	bls.n	800c12e <_strtod_l+0x33e>
 800c0c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c0c4:	1b49      	subs	r1, r1, r5
 800c0c6:	2908      	cmp	r1, #8
 800c0c8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c0cc:	dc02      	bgt.n	800c0d4 <_strtod_l+0x2e4>
 800c0ce:	4565      	cmp	r5, ip
 800c0d0:	bfa8      	it	ge
 800c0d2:	4665      	movge	r5, ip
 800c0d4:	b107      	cbz	r7, 800c0d8 <_strtod_l+0x2e8>
 800c0d6:	426d      	negs	r5, r5
 800c0d8:	2c00      	cmp	r4, #0
 800c0da:	d14c      	bne.n	800c176 <_strtod_l+0x386>
 800c0dc:	9907      	ldr	r1, [sp, #28]
 800c0de:	4301      	orrs	r1, r0
 800c0e0:	f47f aec7 	bne.w	800be72 <_strtod_l+0x82>
 800c0e4:	2a00      	cmp	r2, #0
 800c0e6:	f47f aee0 	bne.w	800beaa <_strtod_l+0xba>
 800c0ea:	2b69      	cmp	r3, #105	; 0x69
 800c0ec:	d026      	beq.n	800c13c <_strtod_l+0x34c>
 800c0ee:	dc23      	bgt.n	800c138 <_strtod_l+0x348>
 800c0f0:	2b49      	cmp	r3, #73	; 0x49
 800c0f2:	d023      	beq.n	800c13c <_strtod_l+0x34c>
 800c0f4:	2b4e      	cmp	r3, #78	; 0x4e
 800c0f6:	f47f aed8 	bne.w	800beaa <_strtod_l+0xba>
 800c0fa:	499c      	ldr	r1, [pc, #624]	; (800c36c <_strtod_l+0x57c>)
 800c0fc:	a81b      	add	r0, sp, #108	; 0x6c
 800c0fe:	f000 ffb9 	bl	800d074 <__match>
 800c102:	2800      	cmp	r0, #0
 800c104:	f43f aed1 	beq.w	800beaa <_strtod_l+0xba>
 800c108:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b28      	cmp	r3, #40	; 0x28
 800c10e:	d12c      	bne.n	800c16a <_strtod_l+0x37a>
 800c110:	4997      	ldr	r1, [pc, #604]	; (800c370 <_strtod_l+0x580>)
 800c112:	aa1e      	add	r2, sp, #120	; 0x78
 800c114:	a81b      	add	r0, sp, #108	; 0x6c
 800c116:	f000 ffc1 	bl	800d09c <__hexnan>
 800c11a:	2805      	cmp	r0, #5
 800c11c:	d125      	bne.n	800c16a <_strtod_l+0x37a>
 800c11e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c120:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c124:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c128:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c12c:	e6a1      	b.n	800be72 <_strtod_l+0x82>
 800c12e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800c132:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c136:	e7bc      	b.n	800c0b2 <_strtod_l+0x2c2>
 800c138:	2b6e      	cmp	r3, #110	; 0x6e
 800c13a:	e7dc      	b.n	800c0f6 <_strtod_l+0x306>
 800c13c:	498d      	ldr	r1, [pc, #564]	; (800c374 <_strtod_l+0x584>)
 800c13e:	a81b      	add	r0, sp, #108	; 0x6c
 800c140:	f000 ff98 	bl	800d074 <__match>
 800c144:	2800      	cmp	r0, #0
 800c146:	f43f aeb0 	beq.w	800beaa <_strtod_l+0xba>
 800c14a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c14c:	498a      	ldr	r1, [pc, #552]	; (800c378 <_strtod_l+0x588>)
 800c14e:	3b01      	subs	r3, #1
 800c150:	a81b      	add	r0, sp, #108	; 0x6c
 800c152:	931b      	str	r3, [sp, #108]	; 0x6c
 800c154:	f000 ff8e 	bl	800d074 <__match>
 800c158:	b910      	cbnz	r0, 800c160 <_strtod_l+0x370>
 800c15a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c15c:	3301      	adds	r3, #1
 800c15e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c160:	f04f 0800 	mov.w	r8, #0
 800c164:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800c388 <_strtod_l+0x598>
 800c168:	e683      	b.n	800be72 <_strtod_l+0x82>
 800c16a:	4884      	ldr	r0, [pc, #528]	; (800c37c <_strtod_l+0x58c>)
 800c16c:	f002 f8a6 	bl	800e2bc <nan>
 800c170:	4680      	mov	r8, r0
 800c172:	4689      	mov	r9, r1
 800c174:	e67d      	b.n	800be72 <_strtod_l+0x82>
 800c176:	9b04      	ldr	r3, [sp, #16]
 800c178:	f1bb 0f00 	cmp.w	fp, #0
 800c17c:	bf08      	it	eq
 800c17e:	46a3      	moveq	fp, r4
 800c180:	1aeb      	subs	r3, r5, r3
 800c182:	2c10      	cmp	r4, #16
 800c184:	9806      	ldr	r0, [sp, #24]
 800c186:	4626      	mov	r6, r4
 800c188:	9307      	str	r3, [sp, #28]
 800c18a:	bfa8      	it	ge
 800c18c:	2610      	movge	r6, #16
 800c18e:	f7f4 f94b 	bl	8000428 <__aeabi_ui2d>
 800c192:	2c09      	cmp	r4, #9
 800c194:	4680      	mov	r8, r0
 800c196:	4689      	mov	r9, r1
 800c198:	dd13      	ble.n	800c1c2 <_strtod_l+0x3d2>
 800c19a:	4b79      	ldr	r3, [pc, #484]	; (800c380 <_strtod_l+0x590>)
 800c19c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c1a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c1a4:	f7f4 f9ba 	bl	800051c <__aeabi_dmul>
 800c1a8:	4680      	mov	r8, r0
 800c1aa:	9805      	ldr	r0, [sp, #20]
 800c1ac:	4689      	mov	r9, r1
 800c1ae:	f7f4 f93b 	bl	8000428 <__aeabi_ui2d>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4640      	mov	r0, r8
 800c1b8:	4649      	mov	r1, r9
 800c1ba:	f7f3 fff9 	bl	80001b0 <__adddf3>
 800c1be:	4680      	mov	r8, r0
 800c1c0:	4689      	mov	r9, r1
 800c1c2:	2c0f      	cmp	r4, #15
 800c1c4:	dc36      	bgt.n	800c234 <_strtod_l+0x444>
 800c1c6:	9b07      	ldr	r3, [sp, #28]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f43f ae52 	beq.w	800be72 <_strtod_l+0x82>
 800c1ce:	dd22      	ble.n	800c216 <_strtod_l+0x426>
 800c1d0:	2b16      	cmp	r3, #22
 800c1d2:	dc09      	bgt.n	800c1e8 <_strtod_l+0x3f8>
 800c1d4:	4c6a      	ldr	r4, [pc, #424]	; (800c380 <_strtod_l+0x590>)
 800c1d6:	4642      	mov	r2, r8
 800c1d8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800c1dc:	464b      	mov	r3, r9
 800c1de:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c1e2:	f7f4 f99b 	bl	800051c <__aeabi_dmul>
 800c1e6:	e7c3      	b.n	800c170 <_strtod_l+0x380>
 800c1e8:	9a07      	ldr	r2, [sp, #28]
 800c1ea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	db20      	blt.n	800c234 <_strtod_l+0x444>
 800c1f2:	4d63      	ldr	r5, [pc, #396]	; (800c380 <_strtod_l+0x590>)
 800c1f4:	f1c4 040f 	rsb	r4, r4, #15
 800c1f8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c1fc:	4642      	mov	r2, r8
 800c1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c202:	464b      	mov	r3, r9
 800c204:	f7f4 f98a 	bl	800051c <__aeabi_dmul>
 800c208:	9b07      	ldr	r3, [sp, #28]
 800c20a:	1b1c      	subs	r4, r3, r4
 800c20c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c210:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c214:	e7e5      	b.n	800c1e2 <_strtod_l+0x3f2>
 800c216:	9b07      	ldr	r3, [sp, #28]
 800c218:	3316      	adds	r3, #22
 800c21a:	db0b      	blt.n	800c234 <_strtod_l+0x444>
 800c21c:	9b04      	ldr	r3, [sp, #16]
 800c21e:	4a58      	ldr	r2, [pc, #352]	; (800c380 <_strtod_l+0x590>)
 800c220:	1b5d      	subs	r5, r3, r5
 800c222:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c226:	4640      	mov	r0, r8
 800c228:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c22c:	4649      	mov	r1, r9
 800c22e:	f7f4 fa9f 	bl	8000770 <__aeabi_ddiv>
 800c232:	e79d      	b.n	800c170 <_strtod_l+0x380>
 800c234:	9b07      	ldr	r3, [sp, #28]
 800c236:	1ba6      	subs	r6, r4, r6
 800c238:	441e      	add	r6, r3
 800c23a:	2e00      	cmp	r6, #0
 800c23c:	dd71      	ble.n	800c322 <_strtod_l+0x532>
 800c23e:	f016 030f 	ands.w	r3, r6, #15
 800c242:	d00a      	beq.n	800c25a <_strtod_l+0x46a>
 800c244:	494e      	ldr	r1, [pc, #312]	; (800c380 <_strtod_l+0x590>)
 800c246:	4642      	mov	r2, r8
 800c248:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c24c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c250:	464b      	mov	r3, r9
 800c252:	f7f4 f963 	bl	800051c <__aeabi_dmul>
 800c256:	4680      	mov	r8, r0
 800c258:	4689      	mov	r9, r1
 800c25a:	f036 060f 	bics.w	r6, r6, #15
 800c25e:	d050      	beq.n	800c302 <_strtod_l+0x512>
 800c260:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800c264:	dd27      	ble.n	800c2b6 <_strtod_l+0x4c6>
 800c266:	f04f 0b00 	mov.w	fp, #0
 800c26a:	f8cd b010 	str.w	fp, [sp, #16]
 800c26e:	f8cd b020 	str.w	fp, [sp, #32]
 800c272:	f8cd b018 	str.w	fp, [sp, #24]
 800c276:	2322      	movs	r3, #34	; 0x22
 800c278:	f04f 0800 	mov.w	r8, #0
 800c27c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c388 <_strtod_l+0x598>
 800c280:	f8ca 3000 	str.w	r3, [sl]
 800c284:	9b08      	ldr	r3, [sp, #32]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f43f adf3 	beq.w	800be72 <_strtod_l+0x82>
 800c28c:	4650      	mov	r0, sl
 800c28e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c290:	f000 fffa 	bl	800d288 <_Bfree>
 800c294:	4650      	mov	r0, sl
 800c296:	9906      	ldr	r1, [sp, #24]
 800c298:	f000 fff6 	bl	800d288 <_Bfree>
 800c29c:	4650      	mov	r0, sl
 800c29e:	9904      	ldr	r1, [sp, #16]
 800c2a0:	f000 fff2 	bl	800d288 <_Bfree>
 800c2a4:	4650      	mov	r0, sl
 800c2a6:	9908      	ldr	r1, [sp, #32]
 800c2a8:	f000 ffee 	bl	800d288 <_Bfree>
 800c2ac:	4659      	mov	r1, fp
 800c2ae:	4650      	mov	r0, sl
 800c2b0:	f000 ffea 	bl	800d288 <_Bfree>
 800c2b4:	e5dd      	b.n	800be72 <_strtod_l+0x82>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	4640      	mov	r0, r8
 800c2ba:	4649      	mov	r1, r9
 800c2bc:	461f      	mov	r7, r3
 800c2be:	1136      	asrs	r6, r6, #4
 800c2c0:	2e01      	cmp	r6, #1
 800c2c2:	dc21      	bgt.n	800c308 <_strtod_l+0x518>
 800c2c4:	b10b      	cbz	r3, 800c2ca <_strtod_l+0x4da>
 800c2c6:	4680      	mov	r8, r0
 800c2c8:	4689      	mov	r9, r1
 800c2ca:	4b2e      	ldr	r3, [pc, #184]	; (800c384 <_strtod_l+0x594>)
 800c2cc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c2d0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c2d4:	4642      	mov	r2, r8
 800c2d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2da:	464b      	mov	r3, r9
 800c2dc:	f7f4 f91e 	bl	800051c <__aeabi_dmul>
 800c2e0:	4b29      	ldr	r3, [pc, #164]	; (800c388 <_strtod_l+0x598>)
 800c2e2:	460a      	mov	r2, r1
 800c2e4:	400b      	ands	r3, r1
 800c2e6:	4929      	ldr	r1, [pc, #164]	; (800c38c <_strtod_l+0x59c>)
 800c2e8:	4680      	mov	r8, r0
 800c2ea:	428b      	cmp	r3, r1
 800c2ec:	d8bb      	bhi.n	800c266 <_strtod_l+0x476>
 800c2ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c2f2:	428b      	cmp	r3, r1
 800c2f4:	bf86      	itte	hi
 800c2f6:	f04f 38ff 	movhi.w	r8, #4294967295
 800c2fa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800c390 <_strtod_l+0x5a0>
 800c2fe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c302:	2300      	movs	r3, #0
 800c304:	9305      	str	r3, [sp, #20]
 800c306:	e07e      	b.n	800c406 <_strtod_l+0x616>
 800c308:	07f2      	lsls	r2, r6, #31
 800c30a:	d507      	bpl.n	800c31c <_strtod_l+0x52c>
 800c30c:	4b1d      	ldr	r3, [pc, #116]	; (800c384 <_strtod_l+0x594>)
 800c30e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c316:	f7f4 f901 	bl	800051c <__aeabi_dmul>
 800c31a:	2301      	movs	r3, #1
 800c31c:	3701      	adds	r7, #1
 800c31e:	1076      	asrs	r6, r6, #1
 800c320:	e7ce      	b.n	800c2c0 <_strtod_l+0x4d0>
 800c322:	d0ee      	beq.n	800c302 <_strtod_l+0x512>
 800c324:	4276      	negs	r6, r6
 800c326:	f016 020f 	ands.w	r2, r6, #15
 800c32a:	d00a      	beq.n	800c342 <_strtod_l+0x552>
 800c32c:	4b14      	ldr	r3, [pc, #80]	; (800c380 <_strtod_l+0x590>)
 800c32e:	4640      	mov	r0, r8
 800c330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c334:	4649      	mov	r1, r9
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	f7f4 fa19 	bl	8000770 <__aeabi_ddiv>
 800c33e:	4680      	mov	r8, r0
 800c340:	4689      	mov	r9, r1
 800c342:	1136      	asrs	r6, r6, #4
 800c344:	d0dd      	beq.n	800c302 <_strtod_l+0x512>
 800c346:	2e1f      	cmp	r6, #31
 800c348:	dd24      	ble.n	800c394 <_strtod_l+0x5a4>
 800c34a:	f04f 0b00 	mov.w	fp, #0
 800c34e:	f8cd b010 	str.w	fp, [sp, #16]
 800c352:	f8cd b020 	str.w	fp, [sp, #32]
 800c356:	f8cd b018 	str.w	fp, [sp, #24]
 800c35a:	2322      	movs	r3, #34	; 0x22
 800c35c:	f04f 0800 	mov.w	r8, #0
 800c360:	f04f 0900 	mov.w	r9, #0
 800c364:	f8ca 3000 	str.w	r3, [sl]
 800c368:	e78c      	b.n	800c284 <_strtod_l+0x494>
 800c36a:	bf00      	nop
 800c36c:	0800ec55 	.word	0x0800ec55
 800c370:	0800ec6c 	.word	0x0800ec6c
 800c374:	0800ec4c 	.word	0x0800ec4c
 800c378:	0800ec4f 	.word	0x0800ec4f
 800c37c:	0800ed5b 	.word	0x0800ed5b
 800c380:	0800ee78 	.word	0x0800ee78
 800c384:	0800ee50 	.word	0x0800ee50
 800c388:	7ff00000 	.word	0x7ff00000
 800c38c:	7ca00000 	.word	0x7ca00000
 800c390:	7fefffff 	.word	0x7fefffff
 800c394:	f016 0310 	ands.w	r3, r6, #16
 800c398:	bf18      	it	ne
 800c39a:	236a      	movne	r3, #106	; 0x6a
 800c39c:	4640      	mov	r0, r8
 800c39e:	9305      	str	r3, [sp, #20]
 800c3a0:	4649      	mov	r1, r9
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	4fb2      	ldr	r7, [pc, #712]	; (800c670 <_strtod_l+0x880>)
 800c3a6:	07f2      	lsls	r2, r6, #31
 800c3a8:	d504      	bpl.n	800c3b4 <_strtod_l+0x5c4>
 800c3aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ae:	f7f4 f8b5 	bl	800051c <__aeabi_dmul>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	1076      	asrs	r6, r6, #1
 800c3b6:	f107 0708 	add.w	r7, r7, #8
 800c3ba:	d1f4      	bne.n	800c3a6 <_strtod_l+0x5b6>
 800c3bc:	b10b      	cbz	r3, 800c3c2 <_strtod_l+0x5d2>
 800c3be:	4680      	mov	r8, r0
 800c3c0:	4689      	mov	r9, r1
 800c3c2:	9b05      	ldr	r3, [sp, #20]
 800c3c4:	b1bb      	cbz	r3, 800c3f6 <_strtod_l+0x606>
 800c3c6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800c3ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	4649      	mov	r1, r9
 800c3d2:	dd10      	ble.n	800c3f6 <_strtod_l+0x606>
 800c3d4:	2b1f      	cmp	r3, #31
 800c3d6:	f340 812b 	ble.w	800c630 <_strtod_l+0x840>
 800c3da:	2b34      	cmp	r3, #52	; 0x34
 800c3dc:	bfd8      	it	le
 800c3de:	f04f 32ff 	movle.w	r2, #4294967295
 800c3e2:	f04f 0800 	mov.w	r8, #0
 800c3e6:	bfcf      	iteee	gt
 800c3e8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c3ec:	3b20      	suble	r3, #32
 800c3ee:	fa02 f303 	lslle.w	r3, r2, r3
 800c3f2:	ea03 0901 	andle.w	r9, r3, r1
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	4640      	mov	r0, r8
 800c3fc:	4649      	mov	r1, r9
 800c3fe:	f7f4 faf5 	bl	80009ec <__aeabi_dcmpeq>
 800c402:	2800      	cmp	r0, #0
 800c404:	d1a1      	bne.n	800c34a <_strtod_l+0x55a>
 800c406:	9b06      	ldr	r3, [sp, #24]
 800c408:	465a      	mov	r2, fp
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	4650      	mov	r0, sl
 800c40e:	4623      	mov	r3, r4
 800c410:	9908      	ldr	r1, [sp, #32]
 800c412:	f000 ffa5 	bl	800d360 <__s2b>
 800c416:	9008      	str	r0, [sp, #32]
 800c418:	2800      	cmp	r0, #0
 800c41a:	f43f af24 	beq.w	800c266 <_strtod_l+0x476>
 800c41e:	9b04      	ldr	r3, [sp, #16]
 800c420:	f04f 0b00 	mov.w	fp, #0
 800c424:	1b5d      	subs	r5, r3, r5
 800c426:	9b07      	ldr	r3, [sp, #28]
 800c428:	f8cd b010 	str.w	fp, [sp, #16]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	bfb4      	ite	lt
 800c430:	462b      	movlt	r3, r5
 800c432:	2300      	movge	r3, #0
 800c434:	930e      	str	r3, [sp, #56]	; 0x38
 800c436:	9b07      	ldr	r3, [sp, #28]
 800c438:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c43c:	9316      	str	r3, [sp, #88]	; 0x58
 800c43e:	9b08      	ldr	r3, [sp, #32]
 800c440:	4650      	mov	r0, sl
 800c442:	6859      	ldr	r1, [r3, #4]
 800c444:	f000 fee0 	bl	800d208 <_Balloc>
 800c448:	9006      	str	r0, [sp, #24]
 800c44a:	2800      	cmp	r0, #0
 800c44c:	f43f af13 	beq.w	800c276 <_strtod_l+0x486>
 800c450:	9b08      	ldr	r3, [sp, #32]
 800c452:	300c      	adds	r0, #12
 800c454:	691a      	ldr	r2, [r3, #16]
 800c456:	f103 010c 	add.w	r1, r3, #12
 800c45a:	3202      	adds	r2, #2
 800c45c:	0092      	lsls	r2, r2, #2
 800c45e:	f7ff fc85 	bl	800bd6c <memcpy>
 800c462:	ab1e      	add	r3, sp, #120	; 0x78
 800c464:	9301      	str	r3, [sp, #4]
 800c466:	ab1d      	add	r3, sp, #116	; 0x74
 800c468:	9300      	str	r3, [sp, #0]
 800c46a:	4642      	mov	r2, r8
 800c46c:	464b      	mov	r3, r9
 800c46e:	4650      	mov	r0, sl
 800c470:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800c474:	f001 fab2 	bl	800d9dc <__d2b>
 800c478:	901c      	str	r0, [sp, #112]	; 0x70
 800c47a:	2800      	cmp	r0, #0
 800c47c:	f43f aefb 	beq.w	800c276 <_strtod_l+0x486>
 800c480:	2101      	movs	r1, #1
 800c482:	4650      	mov	r0, sl
 800c484:	f001 f804 	bl	800d490 <__i2b>
 800c488:	4603      	mov	r3, r0
 800c48a:	9004      	str	r0, [sp, #16]
 800c48c:	2800      	cmp	r0, #0
 800c48e:	f43f aef2 	beq.w	800c276 <_strtod_l+0x486>
 800c492:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c494:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c496:	2d00      	cmp	r5, #0
 800c498:	bfab      	itete	ge
 800c49a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c49c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c49e:	18ee      	addge	r6, r5, r3
 800c4a0:	1b5c      	sublt	r4, r3, r5
 800c4a2:	9b05      	ldr	r3, [sp, #20]
 800c4a4:	bfa8      	it	ge
 800c4a6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800c4a8:	eba5 0503 	sub.w	r5, r5, r3
 800c4ac:	4415      	add	r5, r2
 800c4ae:	4b71      	ldr	r3, [pc, #452]	; (800c674 <_strtod_l+0x884>)
 800c4b0:	f105 35ff 	add.w	r5, r5, #4294967295
 800c4b4:	bfb8      	it	lt
 800c4b6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800c4b8:	429d      	cmp	r5, r3
 800c4ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c4be:	f280 80c9 	bge.w	800c654 <_strtod_l+0x864>
 800c4c2:	1b5b      	subs	r3, r3, r5
 800c4c4:	2b1f      	cmp	r3, #31
 800c4c6:	f04f 0701 	mov.w	r7, #1
 800c4ca:	eba2 0203 	sub.w	r2, r2, r3
 800c4ce:	f300 80b6 	bgt.w	800c63e <_strtod_l+0x84e>
 800c4d2:	2500      	movs	r5, #0
 800c4d4:	fa07 f303 	lsl.w	r3, r7, r3
 800c4d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4da:	18b7      	adds	r7, r6, r2
 800c4dc:	9b05      	ldr	r3, [sp, #20]
 800c4de:	42be      	cmp	r6, r7
 800c4e0:	4414      	add	r4, r2
 800c4e2:	441c      	add	r4, r3
 800c4e4:	4633      	mov	r3, r6
 800c4e6:	bfa8      	it	ge
 800c4e8:	463b      	movge	r3, r7
 800c4ea:	42a3      	cmp	r3, r4
 800c4ec:	bfa8      	it	ge
 800c4ee:	4623      	movge	r3, r4
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bfc2      	ittt	gt
 800c4f4:	1aff      	subgt	r7, r7, r3
 800c4f6:	1ae4      	subgt	r4, r4, r3
 800c4f8:	1af6      	subgt	r6, r6, r3
 800c4fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	dd17      	ble.n	800c530 <_strtod_l+0x740>
 800c500:	461a      	mov	r2, r3
 800c502:	4650      	mov	r0, sl
 800c504:	9904      	ldr	r1, [sp, #16]
 800c506:	f001 f87d 	bl	800d604 <__pow5mult>
 800c50a:	9004      	str	r0, [sp, #16]
 800c50c:	2800      	cmp	r0, #0
 800c50e:	f43f aeb2 	beq.w	800c276 <_strtod_l+0x486>
 800c512:	4601      	mov	r1, r0
 800c514:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c516:	4650      	mov	r0, sl
 800c518:	f000 ffd0 	bl	800d4bc <__multiply>
 800c51c:	9009      	str	r0, [sp, #36]	; 0x24
 800c51e:	2800      	cmp	r0, #0
 800c520:	f43f aea9 	beq.w	800c276 <_strtod_l+0x486>
 800c524:	4650      	mov	r0, sl
 800c526:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c528:	f000 feae 	bl	800d288 <_Bfree>
 800c52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c52e:	931c      	str	r3, [sp, #112]	; 0x70
 800c530:	2f00      	cmp	r7, #0
 800c532:	f300 8093 	bgt.w	800c65c <_strtod_l+0x86c>
 800c536:	9b07      	ldr	r3, [sp, #28]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	dd08      	ble.n	800c54e <_strtod_l+0x75e>
 800c53c:	4650      	mov	r0, sl
 800c53e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c540:	9906      	ldr	r1, [sp, #24]
 800c542:	f001 f85f 	bl	800d604 <__pow5mult>
 800c546:	9006      	str	r0, [sp, #24]
 800c548:	2800      	cmp	r0, #0
 800c54a:	f43f ae94 	beq.w	800c276 <_strtod_l+0x486>
 800c54e:	2c00      	cmp	r4, #0
 800c550:	dd08      	ble.n	800c564 <_strtod_l+0x774>
 800c552:	4622      	mov	r2, r4
 800c554:	4650      	mov	r0, sl
 800c556:	9906      	ldr	r1, [sp, #24]
 800c558:	f001 f8ae 	bl	800d6b8 <__lshift>
 800c55c:	9006      	str	r0, [sp, #24]
 800c55e:	2800      	cmp	r0, #0
 800c560:	f43f ae89 	beq.w	800c276 <_strtod_l+0x486>
 800c564:	2e00      	cmp	r6, #0
 800c566:	dd08      	ble.n	800c57a <_strtod_l+0x78a>
 800c568:	4632      	mov	r2, r6
 800c56a:	4650      	mov	r0, sl
 800c56c:	9904      	ldr	r1, [sp, #16]
 800c56e:	f001 f8a3 	bl	800d6b8 <__lshift>
 800c572:	9004      	str	r0, [sp, #16]
 800c574:	2800      	cmp	r0, #0
 800c576:	f43f ae7e 	beq.w	800c276 <_strtod_l+0x486>
 800c57a:	4650      	mov	r0, sl
 800c57c:	9a06      	ldr	r2, [sp, #24]
 800c57e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c580:	f001 f922 	bl	800d7c8 <__mdiff>
 800c584:	4683      	mov	fp, r0
 800c586:	2800      	cmp	r0, #0
 800c588:	f43f ae75 	beq.w	800c276 <_strtod_l+0x486>
 800c58c:	2400      	movs	r4, #0
 800c58e:	68c3      	ldr	r3, [r0, #12]
 800c590:	9904      	ldr	r1, [sp, #16]
 800c592:	60c4      	str	r4, [r0, #12]
 800c594:	930d      	str	r3, [sp, #52]	; 0x34
 800c596:	f001 f8fb 	bl	800d790 <__mcmp>
 800c59a:	42a0      	cmp	r0, r4
 800c59c:	da70      	bge.n	800c680 <_strtod_l+0x890>
 800c59e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5a0:	ea53 0308 	orrs.w	r3, r3, r8
 800c5a4:	f040 8096 	bne.w	800c6d4 <_strtod_l+0x8e4>
 800c5a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f040 8091 	bne.w	800c6d4 <_strtod_l+0x8e4>
 800c5b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c5b6:	0d1b      	lsrs	r3, r3, #20
 800c5b8:	051b      	lsls	r3, r3, #20
 800c5ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c5be:	f240 8089 	bls.w	800c6d4 <_strtod_l+0x8e4>
 800c5c2:	f8db 3014 	ldr.w	r3, [fp, #20]
 800c5c6:	b923      	cbnz	r3, 800c5d2 <_strtod_l+0x7e2>
 800c5c8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	f340 8081 	ble.w	800c6d4 <_strtod_l+0x8e4>
 800c5d2:	4659      	mov	r1, fp
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	4650      	mov	r0, sl
 800c5d8:	f001 f86e 	bl	800d6b8 <__lshift>
 800c5dc:	9904      	ldr	r1, [sp, #16]
 800c5de:	4683      	mov	fp, r0
 800c5e0:	f001 f8d6 	bl	800d790 <__mcmp>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	dd75      	ble.n	800c6d4 <_strtod_l+0x8e4>
 800c5e8:	9905      	ldr	r1, [sp, #20]
 800c5ea:	464b      	mov	r3, r9
 800c5ec:	4a22      	ldr	r2, [pc, #136]	; (800c678 <_strtod_l+0x888>)
 800c5ee:	2900      	cmp	r1, #0
 800c5f0:	f000 8091 	beq.w	800c716 <_strtod_l+0x926>
 800c5f4:	ea02 0109 	and.w	r1, r2, r9
 800c5f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c5fc:	f300 808b 	bgt.w	800c716 <_strtod_l+0x926>
 800c600:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c604:	f77f aea9 	ble.w	800c35a <_strtod_l+0x56a>
 800c608:	2300      	movs	r3, #0
 800c60a:	4a1c      	ldr	r2, [pc, #112]	; (800c67c <_strtod_l+0x88c>)
 800c60c:	4640      	mov	r0, r8
 800c60e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c612:	4649      	mov	r1, r9
 800c614:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c618:	f7f3 ff80 	bl	800051c <__aeabi_dmul>
 800c61c:	460b      	mov	r3, r1
 800c61e:	4303      	orrs	r3, r0
 800c620:	bf08      	it	eq
 800c622:	2322      	moveq	r3, #34	; 0x22
 800c624:	4680      	mov	r8, r0
 800c626:	4689      	mov	r9, r1
 800c628:	bf08      	it	eq
 800c62a:	f8ca 3000 	streq.w	r3, [sl]
 800c62e:	e62d      	b.n	800c28c <_strtod_l+0x49c>
 800c630:	f04f 32ff 	mov.w	r2, #4294967295
 800c634:	fa02 f303 	lsl.w	r3, r2, r3
 800c638:	ea03 0808 	and.w	r8, r3, r8
 800c63c:	e6db      	b.n	800c3f6 <_strtod_l+0x606>
 800c63e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800c642:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800c646:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800c64a:	35e2      	adds	r5, #226	; 0xe2
 800c64c:	fa07 f505 	lsl.w	r5, r7, r5
 800c650:	970f      	str	r7, [sp, #60]	; 0x3c
 800c652:	e742      	b.n	800c4da <_strtod_l+0x6ea>
 800c654:	2301      	movs	r3, #1
 800c656:	2500      	movs	r5, #0
 800c658:	930f      	str	r3, [sp, #60]	; 0x3c
 800c65a:	e73e      	b.n	800c4da <_strtod_l+0x6ea>
 800c65c:	463a      	mov	r2, r7
 800c65e:	4650      	mov	r0, sl
 800c660:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c662:	f001 f829 	bl	800d6b8 <__lshift>
 800c666:	901c      	str	r0, [sp, #112]	; 0x70
 800c668:	2800      	cmp	r0, #0
 800c66a:	f47f af64 	bne.w	800c536 <_strtod_l+0x746>
 800c66e:	e602      	b.n	800c276 <_strtod_l+0x486>
 800c670:	0800ec80 	.word	0x0800ec80
 800c674:	fffffc02 	.word	0xfffffc02
 800c678:	7ff00000 	.word	0x7ff00000
 800c67c:	39500000 	.word	0x39500000
 800c680:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c684:	d166      	bne.n	800c754 <_strtod_l+0x964>
 800c686:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c68c:	b35a      	cbz	r2, 800c6e6 <_strtod_l+0x8f6>
 800c68e:	4a9c      	ldr	r2, [pc, #624]	; (800c900 <_strtod_l+0xb10>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d12c      	bne.n	800c6ee <_strtod_l+0x8fe>
 800c694:	9b05      	ldr	r3, [sp, #20]
 800c696:	4640      	mov	r0, r8
 800c698:	b303      	cbz	r3, 800c6dc <_strtod_l+0x8ec>
 800c69a:	464b      	mov	r3, r9
 800c69c:	4a99      	ldr	r2, [pc, #612]	; (800c904 <_strtod_l+0xb14>)
 800c69e:	f04f 31ff 	mov.w	r1, #4294967295
 800c6a2:	401a      	ands	r2, r3
 800c6a4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c6a8:	d81b      	bhi.n	800c6e2 <_strtod_l+0x8f2>
 800c6aa:	0d12      	lsrs	r2, r2, #20
 800c6ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c6b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c6b4:	4298      	cmp	r0, r3
 800c6b6:	d11a      	bne.n	800c6ee <_strtod_l+0x8fe>
 800c6b8:	4b93      	ldr	r3, [pc, #588]	; (800c908 <_strtod_l+0xb18>)
 800c6ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d102      	bne.n	800c6c6 <_strtod_l+0x8d6>
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	f43f add8 	beq.w	800c276 <_strtod_l+0x486>
 800c6c6:	f04f 0800 	mov.w	r8, #0
 800c6ca:	4b8e      	ldr	r3, [pc, #568]	; (800c904 <_strtod_l+0xb14>)
 800c6cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6ce:	401a      	ands	r2, r3
 800c6d0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800c6d4:	9b05      	ldr	r3, [sp, #20]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d196      	bne.n	800c608 <_strtod_l+0x818>
 800c6da:	e5d7      	b.n	800c28c <_strtod_l+0x49c>
 800c6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e0:	e7e8      	b.n	800c6b4 <_strtod_l+0x8c4>
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	e7e6      	b.n	800c6b4 <_strtod_l+0x8c4>
 800c6e6:	ea53 0308 	orrs.w	r3, r3, r8
 800c6ea:	f43f af7d 	beq.w	800c5e8 <_strtod_l+0x7f8>
 800c6ee:	b1e5      	cbz	r5, 800c72a <_strtod_l+0x93a>
 800c6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6f2:	421d      	tst	r5, r3
 800c6f4:	d0ee      	beq.n	800c6d4 <_strtod_l+0x8e4>
 800c6f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	9a05      	ldr	r2, [sp, #20]
 800c6fe:	b1c3      	cbz	r3, 800c732 <_strtod_l+0x942>
 800c700:	f7ff fb52 	bl	800bda8 <sulp>
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c70c:	f7f3 fd50 	bl	80001b0 <__adddf3>
 800c710:	4680      	mov	r8, r0
 800c712:	4689      	mov	r9, r1
 800c714:	e7de      	b.n	800c6d4 <_strtod_l+0x8e4>
 800c716:	4013      	ands	r3, r2
 800c718:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c71c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c720:	f04f 38ff 	mov.w	r8, #4294967295
 800c724:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c728:	e7d4      	b.n	800c6d4 <_strtod_l+0x8e4>
 800c72a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c72c:	ea13 0f08 	tst.w	r3, r8
 800c730:	e7e0      	b.n	800c6f4 <_strtod_l+0x904>
 800c732:	f7ff fb39 	bl	800bda8 <sulp>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c73e:	f7f3 fd35 	bl	80001ac <__aeabi_dsub>
 800c742:	2200      	movs	r2, #0
 800c744:	2300      	movs	r3, #0
 800c746:	4680      	mov	r8, r0
 800c748:	4689      	mov	r9, r1
 800c74a:	f7f4 f94f 	bl	80009ec <__aeabi_dcmpeq>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d0c0      	beq.n	800c6d4 <_strtod_l+0x8e4>
 800c752:	e602      	b.n	800c35a <_strtod_l+0x56a>
 800c754:	4658      	mov	r0, fp
 800c756:	9904      	ldr	r1, [sp, #16]
 800c758:	f001 f99c 	bl	800da94 <__ratio>
 800c75c:	2200      	movs	r2, #0
 800c75e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c762:	4606      	mov	r6, r0
 800c764:	460f      	mov	r7, r1
 800c766:	f7f4 f955 	bl	8000a14 <__aeabi_dcmple>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d075      	beq.n	800c85a <_strtod_l+0xa6a>
 800c76e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c770:	2b00      	cmp	r3, #0
 800c772:	d047      	beq.n	800c804 <_strtod_l+0xa14>
 800c774:	2600      	movs	r6, #0
 800c776:	4f65      	ldr	r7, [pc, #404]	; (800c90c <_strtod_l+0xb1c>)
 800c778:	4d64      	ldr	r5, [pc, #400]	; (800c90c <_strtod_l+0xb1c>)
 800c77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c77c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c780:	0d1b      	lsrs	r3, r3, #20
 800c782:	051b      	lsls	r3, r3, #20
 800c784:	930f      	str	r3, [sp, #60]	; 0x3c
 800c786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c788:	4b61      	ldr	r3, [pc, #388]	; (800c910 <_strtod_l+0xb20>)
 800c78a:	429a      	cmp	r2, r3
 800c78c:	f040 80c8 	bne.w	800c920 <_strtod_l+0xb30>
 800c790:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c794:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c79a:	4640      	mov	r0, r8
 800c79c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	f001 f8a1 	bl	800d8e8 <__ulp>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	f7f3 feb5 	bl	800051c <__aeabi_dmul>
 800c7b2:	4642      	mov	r2, r8
 800c7b4:	464b      	mov	r3, r9
 800c7b6:	f7f3 fcfb 	bl	80001b0 <__adddf3>
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	4951      	ldr	r1, [pc, #324]	; (800c904 <_strtod_l+0xb14>)
 800c7be:	4a55      	ldr	r2, [pc, #340]	; (800c914 <_strtod_l+0xb24>)
 800c7c0:	4019      	ands	r1, r3
 800c7c2:	4291      	cmp	r1, r2
 800c7c4:	4680      	mov	r8, r0
 800c7c6:	d95e      	bls.n	800c886 <_strtod_l+0xa96>
 800c7c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d103      	bne.n	800c7da <_strtod_l+0x9ea>
 800c7d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	f43f ad4e 	beq.w	800c276 <_strtod_l+0x486>
 800c7da:	f04f 38ff 	mov.w	r8, #4294967295
 800c7de:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800c908 <_strtod_l+0xb18>
 800c7e2:	4650      	mov	r0, sl
 800c7e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c7e6:	f000 fd4f 	bl	800d288 <_Bfree>
 800c7ea:	4650      	mov	r0, sl
 800c7ec:	9906      	ldr	r1, [sp, #24]
 800c7ee:	f000 fd4b 	bl	800d288 <_Bfree>
 800c7f2:	4650      	mov	r0, sl
 800c7f4:	9904      	ldr	r1, [sp, #16]
 800c7f6:	f000 fd47 	bl	800d288 <_Bfree>
 800c7fa:	4659      	mov	r1, fp
 800c7fc:	4650      	mov	r0, sl
 800c7fe:	f000 fd43 	bl	800d288 <_Bfree>
 800c802:	e61c      	b.n	800c43e <_strtod_l+0x64e>
 800c804:	f1b8 0f00 	cmp.w	r8, #0
 800c808:	d119      	bne.n	800c83e <_strtod_l+0xa4e>
 800c80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c80c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c810:	b9e3      	cbnz	r3, 800c84c <_strtod_l+0xa5c>
 800c812:	2200      	movs	r2, #0
 800c814:	4630      	mov	r0, r6
 800c816:	4639      	mov	r1, r7
 800c818:	4b3c      	ldr	r3, [pc, #240]	; (800c90c <_strtod_l+0xb1c>)
 800c81a:	f7f4 f8f1 	bl	8000a00 <__aeabi_dcmplt>
 800c81e:	b9c8      	cbnz	r0, 800c854 <_strtod_l+0xa64>
 800c820:	2200      	movs	r2, #0
 800c822:	4630      	mov	r0, r6
 800c824:	4639      	mov	r1, r7
 800c826:	4b3c      	ldr	r3, [pc, #240]	; (800c918 <_strtod_l+0xb28>)
 800c828:	f7f3 fe78 	bl	800051c <__aeabi_dmul>
 800c82c:	4604      	mov	r4, r0
 800c82e:	460d      	mov	r5, r1
 800c830:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c834:	9418      	str	r4, [sp, #96]	; 0x60
 800c836:	9319      	str	r3, [sp, #100]	; 0x64
 800c838:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800c83c:	e79d      	b.n	800c77a <_strtod_l+0x98a>
 800c83e:	f1b8 0f01 	cmp.w	r8, #1
 800c842:	d103      	bne.n	800c84c <_strtod_l+0xa5c>
 800c844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c846:	2b00      	cmp	r3, #0
 800c848:	f43f ad87 	beq.w	800c35a <_strtod_l+0x56a>
 800c84c:	2600      	movs	r6, #0
 800c84e:	2400      	movs	r4, #0
 800c850:	4f32      	ldr	r7, [pc, #200]	; (800c91c <_strtod_l+0xb2c>)
 800c852:	e791      	b.n	800c778 <_strtod_l+0x988>
 800c854:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c856:	4d30      	ldr	r5, [pc, #192]	; (800c918 <_strtod_l+0xb28>)
 800c858:	e7ea      	b.n	800c830 <_strtod_l+0xa40>
 800c85a:	4b2f      	ldr	r3, [pc, #188]	; (800c918 <_strtod_l+0xb28>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	4630      	mov	r0, r6
 800c860:	4639      	mov	r1, r7
 800c862:	f7f3 fe5b 	bl	800051c <__aeabi_dmul>
 800c866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c868:	4604      	mov	r4, r0
 800c86a:	460d      	mov	r5, r1
 800c86c:	b933      	cbnz	r3, 800c87c <_strtod_l+0xa8c>
 800c86e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c872:	9010      	str	r0, [sp, #64]	; 0x40
 800c874:	9311      	str	r3, [sp, #68]	; 0x44
 800c876:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c87a:	e77e      	b.n	800c77a <_strtod_l+0x98a>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c884:	e7f7      	b.n	800c876 <_strtod_l+0xa86>
 800c886:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c88a:	9b05      	ldr	r3, [sp, #20]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1a8      	bne.n	800c7e2 <_strtod_l+0x9f2>
 800c890:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c894:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c896:	0d1b      	lsrs	r3, r3, #20
 800c898:	051b      	lsls	r3, r3, #20
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d1a1      	bne.n	800c7e2 <_strtod_l+0x9f2>
 800c89e:	4620      	mov	r0, r4
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	f7f4 fc51 	bl	8001148 <__aeabi_d2lz>
 800c8a6:	f7f3 fe0b 	bl	80004c0 <__aeabi_l2d>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	f7f3 fc7b 	bl	80001ac <__aeabi_dsub>
 800c8b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8bc:	ea43 0308 	orr.w	r3, r3, r8
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	460d      	mov	r5, r1
 800c8c6:	d066      	beq.n	800c996 <_strtod_l+0xba6>
 800c8c8:	a309      	add	r3, pc, #36	; (adr r3, 800c8f0 <_strtod_l+0xb00>)
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	f7f4 f897 	bl	8000a00 <__aeabi_dcmplt>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	f47f acda 	bne.w	800c28c <_strtod_l+0x49c>
 800c8d8:	a307      	add	r3, pc, #28	; (adr r3, 800c8f8 <_strtod_l+0xb08>)
 800c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8de:	4620      	mov	r0, r4
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	f7f4 f8ab 	bl	8000a3c <__aeabi_dcmpgt>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	f43f af7b 	beq.w	800c7e2 <_strtod_l+0x9f2>
 800c8ec:	e4ce      	b.n	800c28c <_strtod_l+0x49c>
 800c8ee:	bf00      	nop
 800c8f0:	94a03595 	.word	0x94a03595
 800c8f4:	3fdfffff 	.word	0x3fdfffff
 800c8f8:	35afe535 	.word	0x35afe535
 800c8fc:	3fe00000 	.word	0x3fe00000
 800c900:	000fffff 	.word	0x000fffff
 800c904:	7ff00000 	.word	0x7ff00000
 800c908:	7fefffff 	.word	0x7fefffff
 800c90c:	3ff00000 	.word	0x3ff00000
 800c910:	7fe00000 	.word	0x7fe00000
 800c914:	7c9fffff 	.word	0x7c9fffff
 800c918:	3fe00000 	.word	0x3fe00000
 800c91c:	bff00000 	.word	0xbff00000
 800c920:	9b05      	ldr	r3, [sp, #20]
 800c922:	b313      	cbz	r3, 800c96a <_strtod_l+0xb7a>
 800c924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c926:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c92a:	d81e      	bhi.n	800c96a <_strtod_l+0xb7a>
 800c92c:	a326      	add	r3, pc, #152	; (adr r3, 800c9c8 <_strtod_l+0xbd8>)
 800c92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c932:	4620      	mov	r0, r4
 800c934:	4629      	mov	r1, r5
 800c936:	f7f4 f86d 	bl	8000a14 <__aeabi_dcmple>
 800c93a:	b190      	cbz	r0, 800c962 <_strtod_l+0xb72>
 800c93c:	4629      	mov	r1, r5
 800c93e:	4620      	mov	r0, r4
 800c940:	f7f4 f886 	bl	8000a50 <__aeabi_d2uiz>
 800c944:	2801      	cmp	r0, #1
 800c946:	bf38      	it	cc
 800c948:	2001      	movcc	r0, #1
 800c94a:	f7f3 fd6d 	bl	8000428 <__aeabi_ui2d>
 800c94e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c950:	4604      	mov	r4, r0
 800c952:	460d      	mov	r5, r1
 800c954:	b9d3      	cbnz	r3, 800c98c <_strtod_l+0xb9c>
 800c956:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c95a:	9012      	str	r0, [sp, #72]	; 0x48
 800c95c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c95e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800c962:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c964:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800c968:	1a9f      	subs	r7, r3, r2
 800c96a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c96e:	f000 ffbb 	bl	800d8e8 <__ulp>
 800c972:	4602      	mov	r2, r0
 800c974:	460b      	mov	r3, r1
 800c976:	4630      	mov	r0, r6
 800c978:	4639      	mov	r1, r7
 800c97a:	f7f3 fdcf 	bl	800051c <__aeabi_dmul>
 800c97e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c982:	f7f3 fc15 	bl	80001b0 <__adddf3>
 800c986:	4680      	mov	r8, r0
 800c988:	4689      	mov	r9, r1
 800c98a:	e77e      	b.n	800c88a <_strtod_l+0xa9a>
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800c994:	e7e3      	b.n	800c95e <_strtod_l+0xb6e>
 800c996:	a30e      	add	r3, pc, #56	; (adr r3, 800c9d0 <_strtod_l+0xbe0>)
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	f7f4 f830 	bl	8000a00 <__aeabi_dcmplt>
 800c9a0:	e7a1      	b.n	800c8e6 <_strtod_l+0xaf6>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	930c      	str	r3, [sp, #48]	; 0x30
 800c9a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9aa:	6013      	str	r3, [r2, #0]
 800c9ac:	f7ff ba65 	b.w	800be7a <_strtod_l+0x8a>
 800c9b0:	2b65      	cmp	r3, #101	; 0x65
 800c9b2:	f43f ab5c 	beq.w	800c06e <_strtod_l+0x27e>
 800c9b6:	2b45      	cmp	r3, #69	; 0x45
 800c9b8:	f43f ab59 	beq.w	800c06e <_strtod_l+0x27e>
 800c9bc:	2201      	movs	r2, #1
 800c9be:	f7ff bb8d 	b.w	800c0dc <_strtod_l+0x2ec>
 800c9c2:	bf00      	nop
 800c9c4:	f3af 8000 	nop.w
 800c9c8:	ffc00000 	.word	0xffc00000
 800c9cc:	41dfffff 	.word	0x41dfffff
 800c9d0:	94a03595 	.word	0x94a03595
 800c9d4:	3fcfffff 	.word	0x3fcfffff

0800c9d8 <strtod>:
 800c9d8:	460a      	mov	r2, r1
 800c9da:	4601      	mov	r1, r0
 800c9dc:	4802      	ldr	r0, [pc, #8]	; (800c9e8 <strtod+0x10>)
 800c9de:	4b03      	ldr	r3, [pc, #12]	; (800c9ec <strtod+0x14>)
 800c9e0:	6800      	ldr	r0, [r0, #0]
 800c9e2:	f7ff ba05 	b.w	800bdf0 <_strtod_l>
 800c9e6:	bf00      	nop
 800c9e8:	200004e8 	.word	0x200004e8
 800c9ec:	20000550 	.word	0x20000550

0800c9f0 <strtok>:
 800c9f0:	4b16      	ldr	r3, [pc, #88]	; (800ca4c <strtok+0x5c>)
 800c9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f6:	681f      	ldr	r7, [r3, #0]
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800c9fc:	460e      	mov	r6, r1
 800c9fe:	b9ec      	cbnz	r4, 800ca3c <strtok+0x4c>
 800ca00:	2050      	movs	r0, #80	; 0x50
 800ca02:	f000 fbe7 	bl	800d1d4 <malloc>
 800ca06:	4602      	mov	r2, r0
 800ca08:	65b8      	str	r0, [r7, #88]	; 0x58
 800ca0a:	b920      	cbnz	r0, 800ca16 <strtok+0x26>
 800ca0c:	2157      	movs	r1, #87	; 0x57
 800ca0e:	4b10      	ldr	r3, [pc, #64]	; (800ca50 <strtok+0x60>)
 800ca10:	4810      	ldr	r0, [pc, #64]	; (800ca54 <strtok+0x64>)
 800ca12:	f000 f849 	bl	800caa8 <__assert_func>
 800ca16:	e9c0 4400 	strd	r4, r4, [r0]
 800ca1a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ca1e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ca22:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ca26:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ca2a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ca2e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ca32:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ca36:	6184      	str	r4, [r0, #24]
 800ca38:	7704      	strb	r4, [r0, #28]
 800ca3a:	6244      	str	r4, [r0, #36]	; 0x24
 800ca3c:	4631      	mov	r1, r6
 800ca3e:	4628      	mov	r0, r5
 800ca40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca42:	2301      	movs	r3, #1
 800ca44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca48:	f000 b806 	b.w	800ca58 <__strtok_r>
 800ca4c:	200004e8 	.word	0x200004e8
 800ca50:	0800eca8 	.word	0x0800eca8
 800ca54:	0800ecbf 	.word	0x0800ecbf

0800ca58 <__strtok_r>:
 800ca58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca5a:	b908      	cbnz	r0, 800ca60 <__strtok_r+0x8>
 800ca5c:	6810      	ldr	r0, [r2, #0]
 800ca5e:	b188      	cbz	r0, 800ca84 <__strtok_r+0x2c>
 800ca60:	4604      	mov	r4, r0
 800ca62:	460f      	mov	r7, r1
 800ca64:	4620      	mov	r0, r4
 800ca66:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ca6a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ca6e:	b91e      	cbnz	r6, 800ca78 <__strtok_r+0x20>
 800ca70:	b965      	cbnz	r5, 800ca8c <__strtok_r+0x34>
 800ca72:	4628      	mov	r0, r5
 800ca74:	6015      	str	r5, [r2, #0]
 800ca76:	e005      	b.n	800ca84 <__strtok_r+0x2c>
 800ca78:	42b5      	cmp	r5, r6
 800ca7a:	d1f6      	bne.n	800ca6a <__strtok_r+0x12>
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1f0      	bne.n	800ca62 <__strtok_r+0xa>
 800ca80:	6014      	str	r4, [r2, #0]
 800ca82:	7003      	strb	r3, [r0, #0]
 800ca84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca86:	461c      	mov	r4, r3
 800ca88:	e00c      	b.n	800caa4 <__strtok_r+0x4c>
 800ca8a:	b915      	cbnz	r5, 800ca92 <__strtok_r+0x3a>
 800ca8c:	460e      	mov	r6, r1
 800ca8e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca92:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ca96:	42ab      	cmp	r3, r5
 800ca98:	d1f7      	bne.n	800ca8a <__strtok_r+0x32>
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d0f3      	beq.n	800ca86 <__strtok_r+0x2e>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800caa4:	6014      	str	r4, [r2, #0]
 800caa6:	e7ed      	b.n	800ca84 <__strtok_r+0x2c>

0800caa8 <__assert_func>:
 800caa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caaa:	4614      	mov	r4, r2
 800caac:	461a      	mov	r2, r3
 800caae:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <__assert_func+0x2c>)
 800cab0:	4605      	mov	r5, r0
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68d8      	ldr	r0, [r3, #12]
 800cab6:	b14c      	cbz	r4, 800cacc <__assert_func+0x24>
 800cab8:	4b07      	ldr	r3, [pc, #28]	; (800cad8 <__assert_func+0x30>)
 800caba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cabe:	9100      	str	r1, [sp, #0]
 800cac0:	462b      	mov	r3, r5
 800cac2:	4906      	ldr	r1, [pc, #24]	; (800cadc <__assert_func+0x34>)
 800cac4:	f000 f80e 	bl	800cae4 <fiprintf>
 800cac8:	f001 fcee 	bl	800e4a8 <abort>
 800cacc:	4b04      	ldr	r3, [pc, #16]	; (800cae0 <__assert_func+0x38>)
 800cace:	461c      	mov	r4, r3
 800cad0:	e7f3      	b.n	800caba <__assert_func+0x12>
 800cad2:	bf00      	nop
 800cad4:	200004e8 	.word	0x200004e8
 800cad8:	0800ed20 	.word	0x0800ed20
 800cadc:	0800ed2d 	.word	0x0800ed2d
 800cae0:	0800ed5b 	.word	0x0800ed5b

0800cae4 <fiprintf>:
 800cae4:	b40e      	push	{r1, r2, r3}
 800cae6:	b503      	push	{r0, r1, lr}
 800cae8:	4601      	mov	r1, r0
 800caea:	ab03      	add	r3, sp, #12
 800caec:	4805      	ldr	r0, [pc, #20]	; (800cb04 <fiprintf+0x20>)
 800caee:	f853 2b04 	ldr.w	r2, [r3], #4
 800caf2:	6800      	ldr	r0, [r0, #0]
 800caf4:	9301      	str	r3, [sp, #4]
 800caf6:	f001 f91b 	bl	800dd30 <_vfiprintf_r>
 800cafa:	b002      	add	sp, #8
 800cafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb00:	b003      	add	sp, #12
 800cb02:	4770      	bx	lr
 800cb04:	200004e8 	.word	0x200004e8

0800cb08 <rshift>:
 800cb08:	6903      	ldr	r3, [r0, #16]
 800cb0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb0e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cb12:	f100 0414 	add.w	r4, r0, #20
 800cb16:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cb1a:	dd46      	ble.n	800cbaa <rshift+0xa2>
 800cb1c:	f011 011f 	ands.w	r1, r1, #31
 800cb20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb28:	d10c      	bne.n	800cb44 <rshift+0x3c>
 800cb2a:	4629      	mov	r1, r5
 800cb2c:	f100 0710 	add.w	r7, r0, #16
 800cb30:	42b1      	cmp	r1, r6
 800cb32:	d335      	bcc.n	800cba0 <rshift+0x98>
 800cb34:	1a9b      	subs	r3, r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	1eea      	subs	r2, r5, #3
 800cb3a:	4296      	cmp	r6, r2
 800cb3c:	bf38      	it	cc
 800cb3e:	2300      	movcc	r3, #0
 800cb40:	4423      	add	r3, r4
 800cb42:	e015      	b.n	800cb70 <rshift+0x68>
 800cb44:	46a1      	mov	r9, r4
 800cb46:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb4a:	f1c1 0820 	rsb	r8, r1, #32
 800cb4e:	40cf      	lsrs	r7, r1
 800cb50:	f105 0e04 	add.w	lr, r5, #4
 800cb54:	4576      	cmp	r6, lr
 800cb56:	46f4      	mov	ip, lr
 800cb58:	d816      	bhi.n	800cb88 <rshift+0x80>
 800cb5a:	1a9b      	subs	r3, r3, r2
 800cb5c:	009a      	lsls	r2, r3, #2
 800cb5e:	3a04      	subs	r2, #4
 800cb60:	3501      	adds	r5, #1
 800cb62:	42ae      	cmp	r6, r5
 800cb64:	bf38      	it	cc
 800cb66:	2200      	movcc	r2, #0
 800cb68:	18a3      	adds	r3, r4, r2
 800cb6a:	50a7      	str	r7, [r4, r2]
 800cb6c:	b107      	cbz	r7, 800cb70 <rshift+0x68>
 800cb6e:	3304      	adds	r3, #4
 800cb70:	42a3      	cmp	r3, r4
 800cb72:	eba3 0204 	sub.w	r2, r3, r4
 800cb76:	bf08      	it	eq
 800cb78:	2300      	moveq	r3, #0
 800cb7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb7e:	6102      	str	r2, [r0, #16]
 800cb80:	bf08      	it	eq
 800cb82:	6143      	streq	r3, [r0, #20]
 800cb84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb88:	f8dc c000 	ldr.w	ip, [ip]
 800cb8c:	fa0c fc08 	lsl.w	ip, ip, r8
 800cb90:	ea4c 0707 	orr.w	r7, ip, r7
 800cb94:	f849 7b04 	str.w	r7, [r9], #4
 800cb98:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb9c:	40cf      	lsrs	r7, r1
 800cb9e:	e7d9      	b.n	800cb54 <rshift+0x4c>
 800cba0:	f851 cb04 	ldr.w	ip, [r1], #4
 800cba4:	f847 cf04 	str.w	ip, [r7, #4]!
 800cba8:	e7c2      	b.n	800cb30 <rshift+0x28>
 800cbaa:	4623      	mov	r3, r4
 800cbac:	e7e0      	b.n	800cb70 <rshift+0x68>

0800cbae <__hexdig_fun>:
 800cbae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cbb2:	2b09      	cmp	r3, #9
 800cbb4:	d802      	bhi.n	800cbbc <__hexdig_fun+0xe>
 800cbb6:	3820      	subs	r0, #32
 800cbb8:	b2c0      	uxtb	r0, r0
 800cbba:	4770      	bx	lr
 800cbbc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cbc0:	2b05      	cmp	r3, #5
 800cbc2:	d801      	bhi.n	800cbc8 <__hexdig_fun+0x1a>
 800cbc4:	3847      	subs	r0, #71	; 0x47
 800cbc6:	e7f7      	b.n	800cbb8 <__hexdig_fun+0xa>
 800cbc8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cbcc:	2b05      	cmp	r3, #5
 800cbce:	d801      	bhi.n	800cbd4 <__hexdig_fun+0x26>
 800cbd0:	3827      	subs	r0, #39	; 0x27
 800cbd2:	e7f1      	b.n	800cbb8 <__hexdig_fun+0xa>
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	4770      	bx	lr

0800cbd8 <__gethex>:
 800cbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbdc:	b08b      	sub	sp, #44	; 0x2c
 800cbde:	9306      	str	r3, [sp, #24]
 800cbe0:	4bb9      	ldr	r3, [pc, #740]	; (800cec8 <__gethex+0x2f0>)
 800cbe2:	9002      	str	r0, [sp, #8]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	468b      	mov	fp, r1
 800cbe8:	4618      	mov	r0, r3
 800cbea:	4690      	mov	r8, r2
 800cbec:	9303      	str	r3, [sp, #12]
 800cbee:	f7f3 fad1 	bl	8000194 <strlen>
 800cbf2:	4682      	mov	sl, r0
 800cbf4:	9b03      	ldr	r3, [sp, #12]
 800cbf6:	f8db 2000 	ldr.w	r2, [fp]
 800cbfa:	4403      	add	r3, r0
 800cbfc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cc00:	9307      	str	r3, [sp, #28]
 800cc02:	1c93      	adds	r3, r2, #2
 800cc04:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cc08:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cc0c:	32fe      	adds	r2, #254	; 0xfe
 800cc0e:	18d1      	adds	r1, r2, r3
 800cc10:	461f      	mov	r7, r3
 800cc12:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc16:	9101      	str	r1, [sp, #4]
 800cc18:	2830      	cmp	r0, #48	; 0x30
 800cc1a:	d0f8      	beq.n	800cc0e <__gethex+0x36>
 800cc1c:	f7ff ffc7 	bl	800cbae <__hexdig_fun>
 800cc20:	4604      	mov	r4, r0
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d13a      	bne.n	800cc9c <__gethex+0xc4>
 800cc26:	4652      	mov	r2, sl
 800cc28:	4638      	mov	r0, r7
 800cc2a:	9903      	ldr	r1, [sp, #12]
 800cc2c:	f001 fb5c 	bl	800e2e8 <strncmp>
 800cc30:	4605      	mov	r5, r0
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d166      	bne.n	800cd04 <__gethex+0x12c>
 800cc36:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cc3a:	eb07 060a 	add.w	r6, r7, sl
 800cc3e:	f7ff ffb6 	bl	800cbae <__hexdig_fun>
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d060      	beq.n	800cd08 <__gethex+0x130>
 800cc46:	4633      	mov	r3, r6
 800cc48:	7818      	ldrb	r0, [r3, #0]
 800cc4a:	461f      	mov	r7, r3
 800cc4c:	2830      	cmp	r0, #48	; 0x30
 800cc4e:	f103 0301 	add.w	r3, r3, #1
 800cc52:	d0f9      	beq.n	800cc48 <__gethex+0x70>
 800cc54:	f7ff ffab 	bl	800cbae <__hexdig_fun>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	fab0 f480 	clz	r4, r0
 800cc5e:	4635      	mov	r5, r6
 800cc60:	0964      	lsrs	r4, r4, #5
 800cc62:	9301      	str	r3, [sp, #4]
 800cc64:	463a      	mov	r2, r7
 800cc66:	4616      	mov	r6, r2
 800cc68:	7830      	ldrb	r0, [r6, #0]
 800cc6a:	3201      	adds	r2, #1
 800cc6c:	f7ff ff9f 	bl	800cbae <__hexdig_fun>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	d1f8      	bne.n	800cc66 <__gethex+0x8e>
 800cc74:	4652      	mov	r2, sl
 800cc76:	4630      	mov	r0, r6
 800cc78:	9903      	ldr	r1, [sp, #12]
 800cc7a:	f001 fb35 	bl	800e2e8 <strncmp>
 800cc7e:	b980      	cbnz	r0, 800cca2 <__gethex+0xca>
 800cc80:	b94d      	cbnz	r5, 800cc96 <__gethex+0xbe>
 800cc82:	eb06 050a 	add.w	r5, r6, sl
 800cc86:	462a      	mov	r2, r5
 800cc88:	4616      	mov	r6, r2
 800cc8a:	7830      	ldrb	r0, [r6, #0]
 800cc8c:	3201      	adds	r2, #1
 800cc8e:	f7ff ff8e 	bl	800cbae <__hexdig_fun>
 800cc92:	2800      	cmp	r0, #0
 800cc94:	d1f8      	bne.n	800cc88 <__gethex+0xb0>
 800cc96:	1bad      	subs	r5, r5, r6
 800cc98:	00ad      	lsls	r5, r5, #2
 800cc9a:	e004      	b.n	800cca6 <__gethex+0xce>
 800cc9c:	2400      	movs	r4, #0
 800cc9e:	4625      	mov	r5, r4
 800cca0:	e7e0      	b.n	800cc64 <__gethex+0x8c>
 800cca2:	2d00      	cmp	r5, #0
 800cca4:	d1f7      	bne.n	800cc96 <__gethex+0xbe>
 800cca6:	7833      	ldrb	r3, [r6, #0]
 800cca8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ccac:	2b50      	cmp	r3, #80	; 0x50
 800ccae:	d139      	bne.n	800cd24 <__gethex+0x14c>
 800ccb0:	7873      	ldrb	r3, [r6, #1]
 800ccb2:	2b2b      	cmp	r3, #43	; 0x2b
 800ccb4:	d02a      	beq.n	800cd0c <__gethex+0x134>
 800ccb6:	2b2d      	cmp	r3, #45	; 0x2d
 800ccb8:	d02c      	beq.n	800cd14 <__gethex+0x13c>
 800ccba:	f04f 0900 	mov.w	r9, #0
 800ccbe:	1c71      	adds	r1, r6, #1
 800ccc0:	7808      	ldrb	r0, [r1, #0]
 800ccc2:	f7ff ff74 	bl	800cbae <__hexdig_fun>
 800ccc6:	1e43      	subs	r3, r0, #1
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b18      	cmp	r3, #24
 800cccc:	d82a      	bhi.n	800cd24 <__gethex+0x14c>
 800ccce:	f1a0 0210 	sub.w	r2, r0, #16
 800ccd2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ccd6:	f7ff ff6a 	bl	800cbae <__hexdig_fun>
 800ccda:	1e43      	subs	r3, r0, #1
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	2b18      	cmp	r3, #24
 800cce0:	d91b      	bls.n	800cd1a <__gethex+0x142>
 800cce2:	f1b9 0f00 	cmp.w	r9, #0
 800cce6:	d000      	beq.n	800ccea <__gethex+0x112>
 800cce8:	4252      	negs	r2, r2
 800ccea:	4415      	add	r5, r2
 800ccec:	f8cb 1000 	str.w	r1, [fp]
 800ccf0:	b1d4      	cbz	r4, 800cd28 <__gethex+0x150>
 800ccf2:	9b01      	ldr	r3, [sp, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	bf14      	ite	ne
 800ccf8:	2700      	movne	r7, #0
 800ccfa:	2706      	moveq	r7, #6
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	b00b      	add	sp, #44	; 0x2c
 800cd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd04:	463e      	mov	r6, r7
 800cd06:	4625      	mov	r5, r4
 800cd08:	2401      	movs	r4, #1
 800cd0a:	e7cc      	b.n	800cca6 <__gethex+0xce>
 800cd0c:	f04f 0900 	mov.w	r9, #0
 800cd10:	1cb1      	adds	r1, r6, #2
 800cd12:	e7d5      	b.n	800ccc0 <__gethex+0xe8>
 800cd14:	f04f 0901 	mov.w	r9, #1
 800cd18:	e7fa      	b.n	800cd10 <__gethex+0x138>
 800cd1a:	230a      	movs	r3, #10
 800cd1c:	fb03 0202 	mla	r2, r3, r2, r0
 800cd20:	3a10      	subs	r2, #16
 800cd22:	e7d6      	b.n	800ccd2 <__gethex+0xfa>
 800cd24:	4631      	mov	r1, r6
 800cd26:	e7e1      	b.n	800ccec <__gethex+0x114>
 800cd28:	4621      	mov	r1, r4
 800cd2a:	1bf3      	subs	r3, r6, r7
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	2b07      	cmp	r3, #7
 800cd30:	dc0a      	bgt.n	800cd48 <__gethex+0x170>
 800cd32:	9802      	ldr	r0, [sp, #8]
 800cd34:	f000 fa68 	bl	800d208 <_Balloc>
 800cd38:	4604      	mov	r4, r0
 800cd3a:	b940      	cbnz	r0, 800cd4e <__gethex+0x176>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	21de      	movs	r1, #222	; 0xde
 800cd40:	4b62      	ldr	r3, [pc, #392]	; (800cecc <__gethex+0x2f4>)
 800cd42:	4863      	ldr	r0, [pc, #396]	; (800ced0 <__gethex+0x2f8>)
 800cd44:	f7ff feb0 	bl	800caa8 <__assert_func>
 800cd48:	3101      	adds	r1, #1
 800cd4a:	105b      	asrs	r3, r3, #1
 800cd4c:	e7ef      	b.n	800cd2e <__gethex+0x156>
 800cd4e:	f04f 0b00 	mov.w	fp, #0
 800cd52:	f100 0914 	add.w	r9, r0, #20
 800cd56:	f1ca 0301 	rsb	r3, sl, #1
 800cd5a:	f8cd 9010 	str.w	r9, [sp, #16]
 800cd5e:	f8cd b004 	str.w	fp, [sp, #4]
 800cd62:	9308      	str	r3, [sp, #32]
 800cd64:	42b7      	cmp	r7, r6
 800cd66:	d33f      	bcc.n	800cde8 <__gethex+0x210>
 800cd68:	9f04      	ldr	r7, [sp, #16]
 800cd6a:	9b01      	ldr	r3, [sp, #4]
 800cd6c:	f847 3b04 	str.w	r3, [r7], #4
 800cd70:	eba7 0709 	sub.w	r7, r7, r9
 800cd74:	10bf      	asrs	r7, r7, #2
 800cd76:	6127      	str	r7, [r4, #16]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f000 fb3b 	bl	800d3f4 <__hi0bits>
 800cd7e:	017f      	lsls	r7, r7, #5
 800cd80:	f8d8 6000 	ldr.w	r6, [r8]
 800cd84:	1a3f      	subs	r7, r7, r0
 800cd86:	42b7      	cmp	r7, r6
 800cd88:	dd62      	ble.n	800ce50 <__gethex+0x278>
 800cd8a:	1bbf      	subs	r7, r7, r6
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f000 fed1 	bl	800db36 <__any_on>
 800cd94:	4682      	mov	sl, r0
 800cd96:	b1a8      	cbz	r0, 800cdc4 <__gethex+0x1ec>
 800cd98:	f04f 0a01 	mov.w	sl, #1
 800cd9c:	1e7b      	subs	r3, r7, #1
 800cd9e:	1159      	asrs	r1, r3, #5
 800cda0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cda4:	f003 021f 	and.w	r2, r3, #31
 800cda8:	fa0a f202 	lsl.w	r2, sl, r2
 800cdac:	420a      	tst	r2, r1
 800cdae:	d009      	beq.n	800cdc4 <__gethex+0x1ec>
 800cdb0:	4553      	cmp	r3, sl
 800cdb2:	dd05      	ble.n	800cdc0 <__gethex+0x1e8>
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	1eb9      	subs	r1, r7, #2
 800cdb8:	f000 febd 	bl	800db36 <__any_on>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d144      	bne.n	800ce4a <__gethex+0x272>
 800cdc0:	f04f 0a02 	mov.w	sl, #2
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f7ff fe9e 	bl	800cb08 <rshift>
 800cdcc:	443d      	add	r5, r7
 800cdce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdd2:	42ab      	cmp	r3, r5
 800cdd4:	da4a      	bge.n	800ce6c <__gethex+0x294>
 800cdd6:	4621      	mov	r1, r4
 800cdd8:	9802      	ldr	r0, [sp, #8]
 800cdda:	f000 fa55 	bl	800d288 <_Bfree>
 800cdde:	2300      	movs	r3, #0
 800cde0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cde2:	27a3      	movs	r7, #163	; 0xa3
 800cde4:	6013      	str	r3, [r2, #0]
 800cde6:	e789      	b.n	800ccfc <__gethex+0x124>
 800cde8:	1e73      	subs	r3, r6, #1
 800cdea:	9a07      	ldr	r2, [sp, #28]
 800cdec:	9305      	str	r3, [sp, #20]
 800cdee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d019      	beq.n	800ce2a <__gethex+0x252>
 800cdf6:	f1bb 0f20 	cmp.w	fp, #32
 800cdfa:	d107      	bne.n	800ce0c <__gethex+0x234>
 800cdfc:	9b04      	ldr	r3, [sp, #16]
 800cdfe:	9a01      	ldr	r2, [sp, #4]
 800ce00:	f843 2b04 	str.w	r2, [r3], #4
 800ce04:	9304      	str	r3, [sp, #16]
 800ce06:	2300      	movs	r3, #0
 800ce08:	469b      	mov	fp, r3
 800ce0a:	9301      	str	r3, [sp, #4]
 800ce0c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ce10:	f7ff fecd 	bl	800cbae <__hexdig_fun>
 800ce14:	9b01      	ldr	r3, [sp, #4]
 800ce16:	f000 000f 	and.w	r0, r0, #15
 800ce1a:	fa00 f00b 	lsl.w	r0, r0, fp
 800ce1e:	4303      	orrs	r3, r0
 800ce20:	9301      	str	r3, [sp, #4]
 800ce22:	f10b 0b04 	add.w	fp, fp, #4
 800ce26:	9b05      	ldr	r3, [sp, #20]
 800ce28:	e00d      	b.n	800ce46 <__gethex+0x26e>
 800ce2a:	9b05      	ldr	r3, [sp, #20]
 800ce2c:	9a08      	ldr	r2, [sp, #32]
 800ce2e:	4413      	add	r3, r2
 800ce30:	42bb      	cmp	r3, r7
 800ce32:	d3e0      	bcc.n	800cdf6 <__gethex+0x21e>
 800ce34:	4618      	mov	r0, r3
 800ce36:	4652      	mov	r2, sl
 800ce38:	9903      	ldr	r1, [sp, #12]
 800ce3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce3c:	f001 fa54 	bl	800e2e8 <strncmp>
 800ce40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce42:	2800      	cmp	r0, #0
 800ce44:	d1d7      	bne.n	800cdf6 <__gethex+0x21e>
 800ce46:	461e      	mov	r6, r3
 800ce48:	e78c      	b.n	800cd64 <__gethex+0x18c>
 800ce4a:	f04f 0a03 	mov.w	sl, #3
 800ce4e:	e7b9      	b.n	800cdc4 <__gethex+0x1ec>
 800ce50:	da09      	bge.n	800ce66 <__gethex+0x28e>
 800ce52:	1bf7      	subs	r7, r6, r7
 800ce54:	4621      	mov	r1, r4
 800ce56:	463a      	mov	r2, r7
 800ce58:	9802      	ldr	r0, [sp, #8]
 800ce5a:	f000 fc2d 	bl	800d6b8 <__lshift>
 800ce5e:	4604      	mov	r4, r0
 800ce60:	1bed      	subs	r5, r5, r7
 800ce62:	f100 0914 	add.w	r9, r0, #20
 800ce66:	f04f 0a00 	mov.w	sl, #0
 800ce6a:	e7b0      	b.n	800cdce <__gethex+0x1f6>
 800ce6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ce70:	42a8      	cmp	r0, r5
 800ce72:	dd71      	ble.n	800cf58 <__gethex+0x380>
 800ce74:	1b45      	subs	r5, r0, r5
 800ce76:	42ae      	cmp	r6, r5
 800ce78:	dc34      	bgt.n	800cee4 <__gethex+0x30c>
 800ce7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	d028      	beq.n	800ced4 <__gethex+0x2fc>
 800ce82:	2b03      	cmp	r3, #3
 800ce84:	d02a      	beq.n	800cedc <__gethex+0x304>
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d115      	bne.n	800ceb6 <__gethex+0x2de>
 800ce8a:	42ae      	cmp	r6, r5
 800ce8c:	d113      	bne.n	800ceb6 <__gethex+0x2de>
 800ce8e:	2e01      	cmp	r6, #1
 800ce90:	d10b      	bne.n	800ceaa <__gethex+0x2d2>
 800ce92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce96:	9a06      	ldr	r2, [sp, #24]
 800ce98:	2762      	movs	r7, #98	; 0x62
 800ce9a:	6013      	str	r3, [r2, #0]
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	6123      	str	r3, [r4, #16]
 800cea0:	f8c9 3000 	str.w	r3, [r9]
 800cea4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cea6:	601c      	str	r4, [r3, #0]
 800cea8:	e728      	b.n	800ccfc <__gethex+0x124>
 800ceaa:	4620      	mov	r0, r4
 800ceac:	1e71      	subs	r1, r6, #1
 800ceae:	f000 fe42 	bl	800db36 <__any_on>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d1ed      	bne.n	800ce92 <__gethex+0x2ba>
 800ceb6:	4621      	mov	r1, r4
 800ceb8:	9802      	ldr	r0, [sp, #8]
 800ceba:	f000 f9e5 	bl	800d288 <_Bfree>
 800cebe:	2300      	movs	r3, #0
 800cec0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cec2:	2750      	movs	r7, #80	; 0x50
 800cec4:	6013      	str	r3, [r2, #0]
 800cec6:	e719      	b.n	800ccfc <__gethex+0x124>
 800cec8:	0800edd8 	.word	0x0800edd8
 800cecc:	0800ed5c 	.word	0x0800ed5c
 800ced0:	0800ed6d 	.word	0x0800ed6d
 800ced4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1ed      	bne.n	800ceb6 <__gethex+0x2de>
 800ceda:	e7da      	b.n	800ce92 <__gethex+0x2ba>
 800cedc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1d7      	bne.n	800ce92 <__gethex+0x2ba>
 800cee2:	e7e8      	b.n	800ceb6 <__gethex+0x2de>
 800cee4:	1e6f      	subs	r7, r5, #1
 800cee6:	f1ba 0f00 	cmp.w	sl, #0
 800ceea:	d132      	bne.n	800cf52 <__gethex+0x37a>
 800ceec:	b127      	cbz	r7, 800cef8 <__gethex+0x320>
 800ceee:	4639      	mov	r1, r7
 800cef0:	4620      	mov	r0, r4
 800cef2:	f000 fe20 	bl	800db36 <__any_on>
 800cef6:	4682      	mov	sl, r0
 800cef8:	2101      	movs	r1, #1
 800cefa:	117b      	asrs	r3, r7, #5
 800cefc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cf00:	f007 071f 	and.w	r7, r7, #31
 800cf04:	fa01 f707 	lsl.w	r7, r1, r7
 800cf08:	421f      	tst	r7, r3
 800cf0a:	f04f 0702 	mov.w	r7, #2
 800cf0e:	4629      	mov	r1, r5
 800cf10:	4620      	mov	r0, r4
 800cf12:	bf18      	it	ne
 800cf14:	f04a 0a02 	orrne.w	sl, sl, #2
 800cf18:	1b76      	subs	r6, r6, r5
 800cf1a:	f7ff fdf5 	bl	800cb08 <rshift>
 800cf1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cf22:	f1ba 0f00 	cmp.w	sl, #0
 800cf26:	d048      	beq.n	800cfba <__gethex+0x3e2>
 800cf28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d015      	beq.n	800cf5c <__gethex+0x384>
 800cf30:	2b03      	cmp	r3, #3
 800cf32:	d017      	beq.n	800cf64 <__gethex+0x38c>
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d109      	bne.n	800cf4c <__gethex+0x374>
 800cf38:	f01a 0f02 	tst.w	sl, #2
 800cf3c:	d006      	beq.n	800cf4c <__gethex+0x374>
 800cf3e:	f8d9 0000 	ldr.w	r0, [r9]
 800cf42:	ea4a 0a00 	orr.w	sl, sl, r0
 800cf46:	f01a 0f01 	tst.w	sl, #1
 800cf4a:	d10e      	bne.n	800cf6a <__gethex+0x392>
 800cf4c:	f047 0710 	orr.w	r7, r7, #16
 800cf50:	e033      	b.n	800cfba <__gethex+0x3e2>
 800cf52:	f04f 0a01 	mov.w	sl, #1
 800cf56:	e7cf      	b.n	800cef8 <__gethex+0x320>
 800cf58:	2701      	movs	r7, #1
 800cf5a:	e7e2      	b.n	800cf22 <__gethex+0x34a>
 800cf5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf5e:	f1c3 0301 	rsb	r3, r3, #1
 800cf62:	9315      	str	r3, [sp, #84]	; 0x54
 800cf64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0f0      	beq.n	800cf4c <__gethex+0x374>
 800cf6a:	f04f 0c00 	mov.w	ip, #0
 800cf6e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cf72:	f104 0314 	add.w	r3, r4, #20
 800cf76:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cf7a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf84:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf88:	d01c      	beq.n	800cfc4 <__gethex+0x3ec>
 800cf8a:	3201      	adds	r2, #1
 800cf8c:	6002      	str	r2, [r0, #0]
 800cf8e:	2f02      	cmp	r7, #2
 800cf90:	f104 0314 	add.w	r3, r4, #20
 800cf94:	d13d      	bne.n	800d012 <__gethex+0x43a>
 800cf96:	f8d8 2000 	ldr.w	r2, [r8]
 800cf9a:	3a01      	subs	r2, #1
 800cf9c:	42b2      	cmp	r2, r6
 800cf9e:	d10a      	bne.n	800cfb6 <__gethex+0x3de>
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	1171      	asrs	r1, r6, #5
 800cfa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cfa8:	f006 061f 	and.w	r6, r6, #31
 800cfac:	fa02 f606 	lsl.w	r6, r2, r6
 800cfb0:	421e      	tst	r6, r3
 800cfb2:	bf18      	it	ne
 800cfb4:	4617      	movne	r7, r2
 800cfb6:	f047 0720 	orr.w	r7, r7, #32
 800cfba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cfbc:	601c      	str	r4, [r3, #0]
 800cfbe:	9b06      	ldr	r3, [sp, #24]
 800cfc0:	601d      	str	r5, [r3, #0]
 800cfc2:	e69b      	b.n	800ccfc <__gethex+0x124>
 800cfc4:	4299      	cmp	r1, r3
 800cfc6:	f843 cc04 	str.w	ip, [r3, #-4]
 800cfca:	d8d8      	bhi.n	800cf7e <__gethex+0x3a6>
 800cfcc:	68a3      	ldr	r3, [r4, #8]
 800cfce:	459b      	cmp	fp, r3
 800cfd0:	db17      	blt.n	800d002 <__gethex+0x42a>
 800cfd2:	6861      	ldr	r1, [r4, #4]
 800cfd4:	9802      	ldr	r0, [sp, #8]
 800cfd6:	3101      	adds	r1, #1
 800cfd8:	f000 f916 	bl	800d208 <_Balloc>
 800cfdc:	4681      	mov	r9, r0
 800cfde:	b918      	cbnz	r0, 800cfe8 <__gethex+0x410>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	2184      	movs	r1, #132	; 0x84
 800cfe4:	4b19      	ldr	r3, [pc, #100]	; (800d04c <__gethex+0x474>)
 800cfe6:	e6ac      	b.n	800cd42 <__gethex+0x16a>
 800cfe8:	6922      	ldr	r2, [r4, #16]
 800cfea:	f104 010c 	add.w	r1, r4, #12
 800cfee:	3202      	adds	r2, #2
 800cff0:	0092      	lsls	r2, r2, #2
 800cff2:	300c      	adds	r0, #12
 800cff4:	f7fe feba 	bl	800bd6c <memcpy>
 800cff8:	4621      	mov	r1, r4
 800cffa:	9802      	ldr	r0, [sp, #8]
 800cffc:	f000 f944 	bl	800d288 <_Bfree>
 800d000:	464c      	mov	r4, r9
 800d002:	6923      	ldr	r3, [r4, #16]
 800d004:	1c5a      	adds	r2, r3, #1
 800d006:	6122      	str	r2, [r4, #16]
 800d008:	2201      	movs	r2, #1
 800d00a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d00e:	615a      	str	r2, [r3, #20]
 800d010:	e7bd      	b.n	800cf8e <__gethex+0x3b6>
 800d012:	6922      	ldr	r2, [r4, #16]
 800d014:	455a      	cmp	r2, fp
 800d016:	dd0b      	ble.n	800d030 <__gethex+0x458>
 800d018:	2101      	movs	r1, #1
 800d01a:	4620      	mov	r0, r4
 800d01c:	f7ff fd74 	bl	800cb08 <rshift>
 800d020:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d024:	3501      	adds	r5, #1
 800d026:	42ab      	cmp	r3, r5
 800d028:	f6ff aed5 	blt.w	800cdd6 <__gethex+0x1fe>
 800d02c:	2701      	movs	r7, #1
 800d02e:	e7c2      	b.n	800cfb6 <__gethex+0x3de>
 800d030:	f016 061f 	ands.w	r6, r6, #31
 800d034:	d0fa      	beq.n	800d02c <__gethex+0x454>
 800d036:	449a      	add	sl, r3
 800d038:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d03c:	f000 f9da 	bl	800d3f4 <__hi0bits>
 800d040:	f1c6 0620 	rsb	r6, r6, #32
 800d044:	42b0      	cmp	r0, r6
 800d046:	dbe7      	blt.n	800d018 <__gethex+0x440>
 800d048:	e7f0      	b.n	800d02c <__gethex+0x454>
 800d04a:	bf00      	nop
 800d04c:	0800ed5c 	.word	0x0800ed5c

0800d050 <L_shift>:
 800d050:	f1c2 0208 	rsb	r2, r2, #8
 800d054:	0092      	lsls	r2, r2, #2
 800d056:	b570      	push	{r4, r5, r6, lr}
 800d058:	f1c2 0620 	rsb	r6, r2, #32
 800d05c:	6843      	ldr	r3, [r0, #4]
 800d05e:	6804      	ldr	r4, [r0, #0]
 800d060:	fa03 f506 	lsl.w	r5, r3, r6
 800d064:	432c      	orrs	r4, r5
 800d066:	40d3      	lsrs	r3, r2
 800d068:	6004      	str	r4, [r0, #0]
 800d06a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d06e:	4288      	cmp	r0, r1
 800d070:	d3f4      	bcc.n	800d05c <L_shift+0xc>
 800d072:	bd70      	pop	{r4, r5, r6, pc}

0800d074 <__match>:
 800d074:	b530      	push	{r4, r5, lr}
 800d076:	6803      	ldr	r3, [r0, #0]
 800d078:	3301      	adds	r3, #1
 800d07a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d07e:	b914      	cbnz	r4, 800d086 <__match+0x12>
 800d080:	6003      	str	r3, [r0, #0]
 800d082:	2001      	movs	r0, #1
 800d084:	bd30      	pop	{r4, r5, pc}
 800d086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d08a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d08e:	2d19      	cmp	r5, #25
 800d090:	bf98      	it	ls
 800d092:	3220      	addls	r2, #32
 800d094:	42a2      	cmp	r2, r4
 800d096:	d0f0      	beq.n	800d07a <__match+0x6>
 800d098:	2000      	movs	r0, #0
 800d09a:	e7f3      	b.n	800d084 <__match+0x10>

0800d09c <__hexnan>:
 800d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a0:	2500      	movs	r5, #0
 800d0a2:	680b      	ldr	r3, [r1, #0]
 800d0a4:	4682      	mov	sl, r0
 800d0a6:	115e      	asrs	r6, r3, #5
 800d0a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d0ac:	f013 031f 	ands.w	r3, r3, #31
 800d0b0:	bf18      	it	ne
 800d0b2:	3604      	addne	r6, #4
 800d0b4:	1f37      	subs	r7, r6, #4
 800d0b6:	4690      	mov	r8, r2
 800d0b8:	46b9      	mov	r9, r7
 800d0ba:	463c      	mov	r4, r7
 800d0bc:	46ab      	mov	fp, r5
 800d0be:	b087      	sub	sp, #28
 800d0c0:	6801      	ldr	r1, [r0, #0]
 800d0c2:	9301      	str	r3, [sp, #4]
 800d0c4:	f846 5c04 	str.w	r5, [r6, #-4]
 800d0c8:	9502      	str	r5, [sp, #8]
 800d0ca:	784a      	ldrb	r2, [r1, #1]
 800d0cc:	1c4b      	adds	r3, r1, #1
 800d0ce:	9303      	str	r3, [sp, #12]
 800d0d0:	b342      	cbz	r2, 800d124 <__hexnan+0x88>
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	9105      	str	r1, [sp, #20]
 800d0d6:	9204      	str	r2, [sp, #16]
 800d0d8:	f7ff fd69 	bl	800cbae <__hexdig_fun>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d14f      	bne.n	800d180 <__hexnan+0xe4>
 800d0e0:	9a04      	ldr	r2, [sp, #16]
 800d0e2:	9905      	ldr	r1, [sp, #20]
 800d0e4:	2a20      	cmp	r2, #32
 800d0e6:	d818      	bhi.n	800d11a <__hexnan+0x7e>
 800d0e8:	9b02      	ldr	r3, [sp, #8]
 800d0ea:	459b      	cmp	fp, r3
 800d0ec:	dd13      	ble.n	800d116 <__hexnan+0x7a>
 800d0ee:	454c      	cmp	r4, r9
 800d0f0:	d206      	bcs.n	800d100 <__hexnan+0x64>
 800d0f2:	2d07      	cmp	r5, #7
 800d0f4:	dc04      	bgt.n	800d100 <__hexnan+0x64>
 800d0f6:	462a      	mov	r2, r5
 800d0f8:	4649      	mov	r1, r9
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f7ff ffa8 	bl	800d050 <L_shift>
 800d100:	4544      	cmp	r4, r8
 800d102:	d950      	bls.n	800d1a6 <__hexnan+0x10a>
 800d104:	2300      	movs	r3, #0
 800d106:	f1a4 0904 	sub.w	r9, r4, #4
 800d10a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d10e:	461d      	mov	r5, r3
 800d110:	464c      	mov	r4, r9
 800d112:	f8cd b008 	str.w	fp, [sp, #8]
 800d116:	9903      	ldr	r1, [sp, #12]
 800d118:	e7d7      	b.n	800d0ca <__hexnan+0x2e>
 800d11a:	2a29      	cmp	r2, #41	; 0x29
 800d11c:	d156      	bne.n	800d1cc <__hexnan+0x130>
 800d11e:	3102      	adds	r1, #2
 800d120:	f8ca 1000 	str.w	r1, [sl]
 800d124:	f1bb 0f00 	cmp.w	fp, #0
 800d128:	d050      	beq.n	800d1cc <__hexnan+0x130>
 800d12a:	454c      	cmp	r4, r9
 800d12c:	d206      	bcs.n	800d13c <__hexnan+0xa0>
 800d12e:	2d07      	cmp	r5, #7
 800d130:	dc04      	bgt.n	800d13c <__hexnan+0xa0>
 800d132:	462a      	mov	r2, r5
 800d134:	4649      	mov	r1, r9
 800d136:	4620      	mov	r0, r4
 800d138:	f7ff ff8a 	bl	800d050 <L_shift>
 800d13c:	4544      	cmp	r4, r8
 800d13e:	d934      	bls.n	800d1aa <__hexnan+0x10e>
 800d140:	4623      	mov	r3, r4
 800d142:	f1a8 0204 	sub.w	r2, r8, #4
 800d146:	f853 1b04 	ldr.w	r1, [r3], #4
 800d14a:	429f      	cmp	r7, r3
 800d14c:	f842 1f04 	str.w	r1, [r2, #4]!
 800d150:	d2f9      	bcs.n	800d146 <__hexnan+0xaa>
 800d152:	1b3b      	subs	r3, r7, r4
 800d154:	f023 0303 	bic.w	r3, r3, #3
 800d158:	3304      	adds	r3, #4
 800d15a:	3401      	adds	r4, #1
 800d15c:	3e03      	subs	r6, #3
 800d15e:	42b4      	cmp	r4, r6
 800d160:	bf88      	it	hi
 800d162:	2304      	movhi	r3, #4
 800d164:	2200      	movs	r2, #0
 800d166:	4443      	add	r3, r8
 800d168:	f843 2b04 	str.w	r2, [r3], #4
 800d16c:	429f      	cmp	r7, r3
 800d16e:	d2fb      	bcs.n	800d168 <__hexnan+0xcc>
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	b91b      	cbnz	r3, 800d17c <__hexnan+0xe0>
 800d174:	4547      	cmp	r7, r8
 800d176:	d127      	bne.n	800d1c8 <__hexnan+0x12c>
 800d178:	2301      	movs	r3, #1
 800d17a:	603b      	str	r3, [r7, #0]
 800d17c:	2005      	movs	r0, #5
 800d17e:	e026      	b.n	800d1ce <__hexnan+0x132>
 800d180:	3501      	adds	r5, #1
 800d182:	2d08      	cmp	r5, #8
 800d184:	f10b 0b01 	add.w	fp, fp, #1
 800d188:	dd06      	ble.n	800d198 <__hexnan+0xfc>
 800d18a:	4544      	cmp	r4, r8
 800d18c:	d9c3      	bls.n	800d116 <__hexnan+0x7a>
 800d18e:	2300      	movs	r3, #0
 800d190:	2501      	movs	r5, #1
 800d192:	f844 3c04 	str.w	r3, [r4, #-4]
 800d196:	3c04      	subs	r4, #4
 800d198:	6822      	ldr	r2, [r4, #0]
 800d19a:	f000 000f 	and.w	r0, r0, #15
 800d19e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d1a2:	6022      	str	r2, [r4, #0]
 800d1a4:	e7b7      	b.n	800d116 <__hexnan+0x7a>
 800d1a6:	2508      	movs	r5, #8
 800d1a8:	e7b5      	b.n	800d116 <__hexnan+0x7a>
 800d1aa:	9b01      	ldr	r3, [sp, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d0df      	beq.n	800d170 <__hexnan+0xd4>
 800d1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b4:	f1c3 0320 	rsb	r3, r3, #32
 800d1b8:	fa22 f303 	lsr.w	r3, r2, r3
 800d1bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d1c0:	401a      	ands	r2, r3
 800d1c2:	f846 2c04 	str.w	r2, [r6, #-4]
 800d1c6:	e7d3      	b.n	800d170 <__hexnan+0xd4>
 800d1c8:	3f04      	subs	r7, #4
 800d1ca:	e7d1      	b.n	800d170 <__hexnan+0xd4>
 800d1cc:	2004      	movs	r0, #4
 800d1ce:	b007      	add	sp, #28
 800d1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1d4 <malloc>:
 800d1d4:	4b02      	ldr	r3, [pc, #8]	; (800d1e0 <malloc+0xc>)
 800d1d6:	4601      	mov	r1, r0
 800d1d8:	6818      	ldr	r0, [r3, #0]
 800d1da:	f000 bd27 	b.w	800dc2c <_malloc_r>
 800d1de:	bf00      	nop
 800d1e0:	200004e8 	.word	0x200004e8

0800d1e4 <__ascii_mbtowc>:
 800d1e4:	b082      	sub	sp, #8
 800d1e6:	b901      	cbnz	r1, 800d1ea <__ascii_mbtowc+0x6>
 800d1e8:	a901      	add	r1, sp, #4
 800d1ea:	b142      	cbz	r2, 800d1fe <__ascii_mbtowc+0x1a>
 800d1ec:	b14b      	cbz	r3, 800d202 <__ascii_mbtowc+0x1e>
 800d1ee:	7813      	ldrb	r3, [r2, #0]
 800d1f0:	600b      	str	r3, [r1, #0]
 800d1f2:	7812      	ldrb	r2, [r2, #0]
 800d1f4:	1e10      	subs	r0, r2, #0
 800d1f6:	bf18      	it	ne
 800d1f8:	2001      	movne	r0, #1
 800d1fa:	b002      	add	sp, #8
 800d1fc:	4770      	bx	lr
 800d1fe:	4610      	mov	r0, r2
 800d200:	e7fb      	b.n	800d1fa <__ascii_mbtowc+0x16>
 800d202:	f06f 0001 	mvn.w	r0, #1
 800d206:	e7f8      	b.n	800d1fa <__ascii_mbtowc+0x16>

0800d208 <_Balloc>:
 800d208:	b570      	push	{r4, r5, r6, lr}
 800d20a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d20c:	4604      	mov	r4, r0
 800d20e:	460d      	mov	r5, r1
 800d210:	b976      	cbnz	r6, 800d230 <_Balloc+0x28>
 800d212:	2010      	movs	r0, #16
 800d214:	f7ff ffde 	bl	800d1d4 <malloc>
 800d218:	4602      	mov	r2, r0
 800d21a:	6260      	str	r0, [r4, #36]	; 0x24
 800d21c:	b920      	cbnz	r0, 800d228 <_Balloc+0x20>
 800d21e:	2166      	movs	r1, #102	; 0x66
 800d220:	4b17      	ldr	r3, [pc, #92]	; (800d280 <_Balloc+0x78>)
 800d222:	4818      	ldr	r0, [pc, #96]	; (800d284 <_Balloc+0x7c>)
 800d224:	f7ff fc40 	bl	800caa8 <__assert_func>
 800d228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d22c:	6006      	str	r6, [r0, #0]
 800d22e:	60c6      	str	r6, [r0, #12]
 800d230:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d232:	68f3      	ldr	r3, [r6, #12]
 800d234:	b183      	cbz	r3, 800d258 <_Balloc+0x50>
 800d236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d23e:	b9b8      	cbnz	r0, 800d270 <_Balloc+0x68>
 800d240:	2101      	movs	r1, #1
 800d242:	fa01 f605 	lsl.w	r6, r1, r5
 800d246:	1d72      	adds	r2, r6, #5
 800d248:	4620      	mov	r0, r4
 800d24a:	0092      	lsls	r2, r2, #2
 800d24c:	f000 fc94 	bl	800db78 <_calloc_r>
 800d250:	b160      	cbz	r0, 800d26c <_Balloc+0x64>
 800d252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d256:	e00e      	b.n	800d276 <_Balloc+0x6e>
 800d258:	2221      	movs	r2, #33	; 0x21
 800d25a:	2104      	movs	r1, #4
 800d25c:	4620      	mov	r0, r4
 800d25e:	f000 fc8b 	bl	800db78 <_calloc_r>
 800d262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d264:	60f0      	str	r0, [r6, #12]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1e4      	bne.n	800d236 <_Balloc+0x2e>
 800d26c:	2000      	movs	r0, #0
 800d26e:	bd70      	pop	{r4, r5, r6, pc}
 800d270:	6802      	ldr	r2, [r0, #0]
 800d272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d276:	2300      	movs	r3, #0
 800d278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d27c:	e7f7      	b.n	800d26e <_Balloc+0x66>
 800d27e:	bf00      	nop
 800d280:	0800eca8 	.word	0x0800eca8
 800d284:	0800edec 	.word	0x0800edec

0800d288 <_Bfree>:
 800d288:	b570      	push	{r4, r5, r6, lr}
 800d28a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d28c:	4605      	mov	r5, r0
 800d28e:	460c      	mov	r4, r1
 800d290:	b976      	cbnz	r6, 800d2b0 <_Bfree+0x28>
 800d292:	2010      	movs	r0, #16
 800d294:	f7ff ff9e 	bl	800d1d4 <malloc>
 800d298:	4602      	mov	r2, r0
 800d29a:	6268      	str	r0, [r5, #36]	; 0x24
 800d29c:	b920      	cbnz	r0, 800d2a8 <_Bfree+0x20>
 800d29e:	218a      	movs	r1, #138	; 0x8a
 800d2a0:	4b08      	ldr	r3, [pc, #32]	; (800d2c4 <_Bfree+0x3c>)
 800d2a2:	4809      	ldr	r0, [pc, #36]	; (800d2c8 <_Bfree+0x40>)
 800d2a4:	f7ff fc00 	bl	800caa8 <__assert_func>
 800d2a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2ac:	6006      	str	r6, [r0, #0]
 800d2ae:	60c6      	str	r6, [r0, #12]
 800d2b0:	b13c      	cbz	r4, 800d2c2 <_Bfree+0x3a>
 800d2b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d2b4:	6862      	ldr	r2, [r4, #4]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2bc:	6021      	str	r1, [r4, #0]
 800d2be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d2c2:	bd70      	pop	{r4, r5, r6, pc}
 800d2c4:	0800eca8 	.word	0x0800eca8
 800d2c8:	0800edec 	.word	0x0800edec

0800d2cc <__multadd>:
 800d2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d0:	4698      	mov	r8, r3
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	690e      	ldr	r6, [r1, #16]
 800d2d8:	4607      	mov	r7, r0
 800d2da:	f101 0014 	add.w	r0, r1, #20
 800d2de:	6805      	ldr	r5, [r0, #0]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	b2a9      	uxth	r1, r5
 800d2e4:	fb02 8101 	mla	r1, r2, r1, r8
 800d2e8:	0c2d      	lsrs	r5, r5, #16
 800d2ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d2ee:	fb02 c505 	mla	r5, r2, r5, ip
 800d2f2:	b289      	uxth	r1, r1
 800d2f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d2f8:	429e      	cmp	r6, r3
 800d2fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d2fe:	f840 1b04 	str.w	r1, [r0], #4
 800d302:	dcec      	bgt.n	800d2de <__multadd+0x12>
 800d304:	f1b8 0f00 	cmp.w	r8, #0
 800d308:	d022      	beq.n	800d350 <__multadd+0x84>
 800d30a:	68a3      	ldr	r3, [r4, #8]
 800d30c:	42b3      	cmp	r3, r6
 800d30e:	dc19      	bgt.n	800d344 <__multadd+0x78>
 800d310:	6861      	ldr	r1, [r4, #4]
 800d312:	4638      	mov	r0, r7
 800d314:	3101      	adds	r1, #1
 800d316:	f7ff ff77 	bl	800d208 <_Balloc>
 800d31a:	4605      	mov	r5, r0
 800d31c:	b928      	cbnz	r0, 800d32a <__multadd+0x5e>
 800d31e:	4602      	mov	r2, r0
 800d320:	21b5      	movs	r1, #181	; 0xb5
 800d322:	4b0d      	ldr	r3, [pc, #52]	; (800d358 <__multadd+0x8c>)
 800d324:	480d      	ldr	r0, [pc, #52]	; (800d35c <__multadd+0x90>)
 800d326:	f7ff fbbf 	bl	800caa8 <__assert_func>
 800d32a:	6922      	ldr	r2, [r4, #16]
 800d32c:	f104 010c 	add.w	r1, r4, #12
 800d330:	3202      	adds	r2, #2
 800d332:	0092      	lsls	r2, r2, #2
 800d334:	300c      	adds	r0, #12
 800d336:	f7fe fd19 	bl	800bd6c <memcpy>
 800d33a:	4621      	mov	r1, r4
 800d33c:	4638      	mov	r0, r7
 800d33e:	f7ff ffa3 	bl	800d288 <_Bfree>
 800d342:	462c      	mov	r4, r5
 800d344:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d348:	3601      	adds	r6, #1
 800d34a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d34e:	6126      	str	r6, [r4, #16]
 800d350:	4620      	mov	r0, r4
 800d352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d356:	bf00      	nop
 800d358:	0800ed5c 	.word	0x0800ed5c
 800d35c:	0800edec 	.word	0x0800edec

0800d360 <__s2b>:
 800d360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d364:	4615      	mov	r5, r2
 800d366:	2209      	movs	r2, #9
 800d368:	461f      	mov	r7, r3
 800d36a:	3308      	adds	r3, #8
 800d36c:	460c      	mov	r4, r1
 800d36e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d372:	4606      	mov	r6, r0
 800d374:	2201      	movs	r2, #1
 800d376:	2100      	movs	r1, #0
 800d378:	429a      	cmp	r2, r3
 800d37a:	db09      	blt.n	800d390 <__s2b+0x30>
 800d37c:	4630      	mov	r0, r6
 800d37e:	f7ff ff43 	bl	800d208 <_Balloc>
 800d382:	b940      	cbnz	r0, 800d396 <__s2b+0x36>
 800d384:	4602      	mov	r2, r0
 800d386:	21ce      	movs	r1, #206	; 0xce
 800d388:	4b18      	ldr	r3, [pc, #96]	; (800d3ec <__s2b+0x8c>)
 800d38a:	4819      	ldr	r0, [pc, #100]	; (800d3f0 <__s2b+0x90>)
 800d38c:	f7ff fb8c 	bl	800caa8 <__assert_func>
 800d390:	0052      	lsls	r2, r2, #1
 800d392:	3101      	adds	r1, #1
 800d394:	e7f0      	b.n	800d378 <__s2b+0x18>
 800d396:	9b08      	ldr	r3, [sp, #32]
 800d398:	2d09      	cmp	r5, #9
 800d39a:	6143      	str	r3, [r0, #20]
 800d39c:	f04f 0301 	mov.w	r3, #1
 800d3a0:	6103      	str	r3, [r0, #16]
 800d3a2:	dd16      	ble.n	800d3d2 <__s2b+0x72>
 800d3a4:	f104 0909 	add.w	r9, r4, #9
 800d3a8:	46c8      	mov	r8, r9
 800d3aa:	442c      	add	r4, r5
 800d3ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d3b0:	4601      	mov	r1, r0
 800d3b2:	220a      	movs	r2, #10
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	3b30      	subs	r3, #48	; 0x30
 800d3b8:	f7ff ff88 	bl	800d2cc <__multadd>
 800d3bc:	45a0      	cmp	r8, r4
 800d3be:	d1f5      	bne.n	800d3ac <__s2b+0x4c>
 800d3c0:	f1a5 0408 	sub.w	r4, r5, #8
 800d3c4:	444c      	add	r4, r9
 800d3c6:	1b2d      	subs	r5, r5, r4
 800d3c8:	1963      	adds	r3, r4, r5
 800d3ca:	42bb      	cmp	r3, r7
 800d3cc:	db04      	blt.n	800d3d8 <__s2b+0x78>
 800d3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d2:	2509      	movs	r5, #9
 800d3d4:	340a      	adds	r4, #10
 800d3d6:	e7f6      	b.n	800d3c6 <__s2b+0x66>
 800d3d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d3dc:	4601      	mov	r1, r0
 800d3de:	220a      	movs	r2, #10
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	3b30      	subs	r3, #48	; 0x30
 800d3e4:	f7ff ff72 	bl	800d2cc <__multadd>
 800d3e8:	e7ee      	b.n	800d3c8 <__s2b+0x68>
 800d3ea:	bf00      	nop
 800d3ec:	0800ed5c 	.word	0x0800ed5c
 800d3f0:	0800edec 	.word	0x0800edec

0800d3f4 <__hi0bits>:
 800d3f4:	0c02      	lsrs	r2, r0, #16
 800d3f6:	0412      	lsls	r2, r2, #16
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	b9ca      	cbnz	r2, 800d430 <__hi0bits+0x3c>
 800d3fc:	0403      	lsls	r3, r0, #16
 800d3fe:	2010      	movs	r0, #16
 800d400:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d404:	bf04      	itt	eq
 800d406:	021b      	lsleq	r3, r3, #8
 800d408:	3008      	addeq	r0, #8
 800d40a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d40e:	bf04      	itt	eq
 800d410:	011b      	lsleq	r3, r3, #4
 800d412:	3004      	addeq	r0, #4
 800d414:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d418:	bf04      	itt	eq
 800d41a:	009b      	lsleq	r3, r3, #2
 800d41c:	3002      	addeq	r0, #2
 800d41e:	2b00      	cmp	r3, #0
 800d420:	db05      	blt.n	800d42e <__hi0bits+0x3a>
 800d422:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d426:	f100 0001 	add.w	r0, r0, #1
 800d42a:	bf08      	it	eq
 800d42c:	2020      	moveq	r0, #32
 800d42e:	4770      	bx	lr
 800d430:	2000      	movs	r0, #0
 800d432:	e7e5      	b.n	800d400 <__hi0bits+0xc>

0800d434 <__lo0bits>:
 800d434:	6803      	ldr	r3, [r0, #0]
 800d436:	4602      	mov	r2, r0
 800d438:	f013 0007 	ands.w	r0, r3, #7
 800d43c:	d00b      	beq.n	800d456 <__lo0bits+0x22>
 800d43e:	07d9      	lsls	r1, r3, #31
 800d440:	d422      	bmi.n	800d488 <__lo0bits+0x54>
 800d442:	0798      	lsls	r0, r3, #30
 800d444:	bf49      	itett	mi
 800d446:	085b      	lsrmi	r3, r3, #1
 800d448:	089b      	lsrpl	r3, r3, #2
 800d44a:	2001      	movmi	r0, #1
 800d44c:	6013      	strmi	r3, [r2, #0]
 800d44e:	bf5c      	itt	pl
 800d450:	2002      	movpl	r0, #2
 800d452:	6013      	strpl	r3, [r2, #0]
 800d454:	4770      	bx	lr
 800d456:	b299      	uxth	r1, r3
 800d458:	b909      	cbnz	r1, 800d45e <__lo0bits+0x2a>
 800d45a:	2010      	movs	r0, #16
 800d45c:	0c1b      	lsrs	r3, r3, #16
 800d45e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d462:	bf04      	itt	eq
 800d464:	0a1b      	lsreq	r3, r3, #8
 800d466:	3008      	addeq	r0, #8
 800d468:	0719      	lsls	r1, r3, #28
 800d46a:	bf04      	itt	eq
 800d46c:	091b      	lsreq	r3, r3, #4
 800d46e:	3004      	addeq	r0, #4
 800d470:	0799      	lsls	r1, r3, #30
 800d472:	bf04      	itt	eq
 800d474:	089b      	lsreq	r3, r3, #2
 800d476:	3002      	addeq	r0, #2
 800d478:	07d9      	lsls	r1, r3, #31
 800d47a:	d403      	bmi.n	800d484 <__lo0bits+0x50>
 800d47c:	085b      	lsrs	r3, r3, #1
 800d47e:	f100 0001 	add.w	r0, r0, #1
 800d482:	d003      	beq.n	800d48c <__lo0bits+0x58>
 800d484:	6013      	str	r3, [r2, #0]
 800d486:	4770      	bx	lr
 800d488:	2000      	movs	r0, #0
 800d48a:	4770      	bx	lr
 800d48c:	2020      	movs	r0, #32
 800d48e:	4770      	bx	lr

0800d490 <__i2b>:
 800d490:	b510      	push	{r4, lr}
 800d492:	460c      	mov	r4, r1
 800d494:	2101      	movs	r1, #1
 800d496:	f7ff feb7 	bl	800d208 <_Balloc>
 800d49a:	4602      	mov	r2, r0
 800d49c:	b928      	cbnz	r0, 800d4aa <__i2b+0x1a>
 800d49e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d4a2:	4b04      	ldr	r3, [pc, #16]	; (800d4b4 <__i2b+0x24>)
 800d4a4:	4804      	ldr	r0, [pc, #16]	; (800d4b8 <__i2b+0x28>)
 800d4a6:	f7ff faff 	bl	800caa8 <__assert_func>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	6144      	str	r4, [r0, #20]
 800d4ae:	6103      	str	r3, [r0, #16]
 800d4b0:	bd10      	pop	{r4, pc}
 800d4b2:	bf00      	nop
 800d4b4:	0800ed5c 	.word	0x0800ed5c
 800d4b8:	0800edec 	.word	0x0800edec

0800d4bc <__multiply>:
 800d4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c0:	4614      	mov	r4, r2
 800d4c2:	690a      	ldr	r2, [r1, #16]
 800d4c4:	6923      	ldr	r3, [r4, #16]
 800d4c6:	460d      	mov	r5, r1
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	bfbe      	ittt	lt
 800d4cc:	460b      	movlt	r3, r1
 800d4ce:	4625      	movlt	r5, r4
 800d4d0:	461c      	movlt	r4, r3
 800d4d2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d4d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d4da:	68ab      	ldr	r3, [r5, #8]
 800d4dc:	6869      	ldr	r1, [r5, #4]
 800d4de:	eb0a 0709 	add.w	r7, sl, r9
 800d4e2:	42bb      	cmp	r3, r7
 800d4e4:	b085      	sub	sp, #20
 800d4e6:	bfb8      	it	lt
 800d4e8:	3101      	addlt	r1, #1
 800d4ea:	f7ff fe8d 	bl	800d208 <_Balloc>
 800d4ee:	b930      	cbnz	r0, 800d4fe <__multiply+0x42>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	f240 115d 	movw	r1, #349	; 0x15d
 800d4f6:	4b41      	ldr	r3, [pc, #260]	; (800d5fc <__multiply+0x140>)
 800d4f8:	4841      	ldr	r0, [pc, #260]	; (800d600 <__multiply+0x144>)
 800d4fa:	f7ff fad5 	bl	800caa8 <__assert_func>
 800d4fe:	f100 0614 	add.w	r6, r0, #20
 800d502:	4633      	mov	r3, r6
 800d504:	2200      	movs	r2, #0
 800d506:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d50a:	4543      	cmp	r3, r8
 800d50c:	d31e      	bcc.n	800d54c <__multiply+0x90>
 800d50e:	f105 0c14 	add.w	ip, r5, #20
 800d512:	f104 0314 	add.w	r3, r4, #20
 800d516:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d51a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d51e:	9202      	str	r2, [sp, #8]
 800d520:	ebac 0205 	sub.w	r2, ip, r5
 800d524:	3a15      	subs	r2, #21
 800d526:	f022 0203 	bic.w	r2, r2, #3
 800d52a:	3204      	adds	r2, #4
 800d52c:	f105 0115 	add.w	r1, r5, #21
 800d530:	458c      	cmp	ip, r1
 800d532:	bf38      	it	cc
 800d534:	2204      	movcc	r2, #4
 800d536:	9201      	str	r2, [sp, #4]
 800d538:	9a02      	ldr	r2, [sp, #8]
 800d53a:	9303      	str	r3, [sp, #12]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d808      	bhi.n	800d552 <__multiply+0x96>
 800d540:	2f00      	cmp	r7, #0
 800d542:	dc55      	bgt.n	800d5f0 <__multiply+0x134>
 800d544:	6107      	str	r7, [r0, #16]
 800d546:	b005      	add	sp, #20
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54c:	f843 2b04 	str.w	r2, [r3], #4
 800d550:	e7db      	b.n	800d50a <__multiply+0x4e>
 800d552:	f8b3 a000 	ldrh.w	sl, [r3]
 800d556:	f1ba 0f00 	cmp.w	sl, #0
 800d55a:	d020      	beq.n	800d59e <__multiply+0xe2>
 800d55c:	46b1      	mov	r9, r6
 800d55e:	2200      	movs	r2, #0
 800d560:	f105 0e14 	add.w	lr, r5, #20
 800d564:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d568:	f8d9 b000 	ldr.w	fp, [r9]
 800d56c:	b2a1      	uxth	r1, r4
 800d56e:	fa1f fb8b 	uxth.w	fp, fp
 800d572:	fb0a b101 	mla	r1, sl, r1, fp
 800d576:	4411      	add	r1, r2
 800d578:	f8d9 2000 	ldr.w	r2, [r9]
 800d57c:	0c24      	lsrs	r4, r4, #16
 800d57e:	0c12      	lsrs	r2, r2, #16
 800d580:	fb0a 2404 	mla	r4, sl, r4, r2
 800d584:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d588:	b289      	uxth	r1, r1
 800d58a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d58e:	45f4      	cmp	ip, lr
 800d590:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d594:	f849 1b04 	str.w	r1, [r9], #4
 800d598:	d8e4      	bhi.n	800d564 <__multiply+0xa8>
 800d59a:	9901      	ldr	r1, [sp, #4]
 800d59c:	5072      	str	r2, [r6, r1]
 800d59e:	9a03      	ldr	r2, [sp, #12]
 800d5a0:	3304      	adds	r3, #4
 800d5a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d5a6:	f1b9 0f00 	cmp.w	r9, #0
 800d5aa:	d01f      	beq.n	800d5ec <__multiply+0x130>
 800d5ac:	46b6      	mov	lr, r6
 800d5ae:	f04f 0a00 	mov.w	sl, #0
 800d5b2:	6834      	ldr	r4, [r6, #0]
 800d5b4:	f105 0114 	add.w	r1, r5, #20
 800d5b8:	880a      	ldrh	r2, [r1, #0]
 800d5ba:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d5be:	b2a4      	uxth	r4, r4
 800d5c0:	fb09 b202 	mla	r2, r9, r2, fp
 800d5c4:	4492      	add	sl, r2
 800d5c6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d5ca:	f84e 4b04 	str.w	r4, [lr], #4
 800d5ce:	f851 4b04 	ldr.w	r4, [r1], #4
 800d5d2:	f8be 2000 	ldrh.w	r2, [lr]
 800d5d6:	0c24      	lsrs	r4, r4, #16
 800d5d8:	fb09 2404 	mla	r4, r9, r4, r2
 800d5dc:	458c      	cmp	ip, r1
 800d5de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d5e2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d5e6:	d8e7      	bhi.n	800d5b8 <__multiply+0xfc>
 800d5e8:	9a01      	ldr	r2, [sp, #4]
 800d5ea:	50b4      	str	r4, [r6, r2]
 800d5ec:	3604      	adds	r6, #4
 800d5ee:	e7a3      	b.n	800d538 <__multiply+0x7c>
 800d5f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d1a5      	bne.n	800d544 <__multiply+0x88>
 800d5f8:	3f01      	subs	r7, #1
 800d5fa:	e7a1      	b.n	800d540 <__multiply+0x84>
 800d5fc:	0800ed5c 	.word	0x0800ed5c
 800d600:	0800edec 	.word	0x0800edec

0800d604 <__pow5mult>:
 800d604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d608:	4615      	mov	r5, r2
 800d60a:	f012 0203 	ands.w	r2, r2, #3
 800d60e:	4606      	mov	r6, r0
 800d610:	460f      	mov	r7, r1
 800d612:	d007      	beq.n	800d624 <__pow5mult+0x20>
 800d614:	4c25      	ldr	r4, [pc, #148]	; (800d6ac <__pow5mult+0xa8>)
 800d616:	3a01      	subs	r2, #1
 800d618:	2300      	movs	r3, #0
 800d61a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d61e:	f7ff fe55 	bl	800d2cc <__multadd>
 800d622:	4607      	mov	r7, r0
 800d624:	10ad      	asrs	r5, r5, #2
 800d626:	d03d      	beq.n	800d6a4 <__pow5mult+0xa0>
 800d628:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d62a:	b97c      	cbnz	r4, 800d64c <__pow5mult+0x48>
 800d62c:	2010      	movs	r0, #16
 800d62e:	f7ff fdd1 	bl	800d1d4 <malloc>
 800d632:	4602      	mov	r2, r0
 800d634:	6270      	str	r0, [r6, #36]	; 0x24
 800d636:	b928      	cbnz	r0, 800d644 <__pow5mult+0x40>
 800d638:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d63c:	4b1c      	ldr	r3, [pc, #112]	; (800d6b0 <__pow5mult+0xac>)
 800d63e:	481d      	ldr	r0, [pc, #116]	; (800d6b4 <__pow5mult+0xb0>)
 800d640:	f7ff fa32 	bl	800caa8 <__assert_func>
 800d644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d648:	6004      	str	r4, [r0, #0]
 800d64a:	60c4      	str	r4, [r0, #12]
 800d64c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d650:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d654:	b94c      	cbnz	r4, 800d66a <__pow5mult+0x66>
 800d656:	f240 2171 	movw	r1, #625	; 0x271
 800d65a:	4630      	mov	r0, r6
 800d65c:	f7ff ff18 	bl	800d490 <__i2b>
 800d660:	2300      	movs	r3, #0
 800d662:	4604      	mov	r4, r0
 800d664:	f8c8 0008 	str.w	r0, [r8, #8]
 800d668:	6003      	str	r3, [r0, #0]
 800d66a:	f04f 0900 	mov.w	r9, #0
 800d66e:	07eb      	lsls	r3, r5, #31
 800d670:	d50a      	bpl.n	800d688 <__pow5mult+0x84>
 800d672:	4639      	mov	r1, r7
 800d674:	4622      	mov	r2, r4
 800d676:	4630      	mov	r0, r6
 800d678:	f7ff ff20 	bl	800d4bc <__multiply>
 800d67c:	4680      	mov	r8, r0
 800d67e:	4639      	mov	r1, r7
 800d680:	4630      	mov	r0, r6
 800d682:	f7ff fe01 	bl	800d288 <_Bfree>
 800d686:	4647      	mov	r7, r8
 800d688:	106d      	asrs	r5, r5, #1
 800d68a:	d00b      	beq.n	800d6a4 <__pow5mult+0xa0>
 800d68c:	6820      	ldr	r0, [r4, #0]
 800d68e:	b938      	cbnz	r0, 800d6a0 <__pow5mult+0x9c>
 800d690:	4622      	mov	r2, r4
 800d692:	4621      	mov	r1, r4
 800d694:	4630      	mov	r0, r6
 800d696:	f7ff ff11 	bl	800d4bc <__multiply>
 800d69a:	6020      	str	r0, [r4, #0]
 800d69c:	f8c0 9000 	str.w	r9, [r0]
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	e7e4      	b.n	800d66e <__pow5mult+0x6a>
 800d6a4:	4638      	mov	r0, r7
 800d6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6aa:	bf00      	nop
 800d6ac:	0800ef40 	.word	0x0800ef40
 800d6b0:	0800eca8 	.word	0x0800eca8
 800d6b4:	0800edec 	.word	0x0800edec

0800d6b8 <__lshift>:
 800d6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6bc:	460c      	mov	r4, r1
 800d6be:	4607      	mov	r7, r0
 800d6c0:	4691      	mov	r9, r2
 800d6c2:	6923      	ldr	r3, [r4, #16]
 800d6c4:	6849      	ldr	r1, [r1, #4]
 800d6c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6ca:	68a3      	ldr	r3, [r4, #8]
 800d6cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6d0:	f108 0601 	add.w	r6, r8, #1
 800d6d4:	42b3      	cmp	r3, r6
 800d6d6:	db0b      	blt.n	800d6f0 <__lshift+0x38>
 800d6d8:	4638      	mov	r0, r7
 800d6da:	f7ff fd95 	bl	800d208 <_Balloc>
 800d6de:	4605      	mov	r5, r0
 800d6e0:	b948      	cbnz	r0, 800d6f6 <__lshift+0x3e>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d6e8:	4b27      	ldr	r3, [pc, #156]	; (800d788 <__lshift+0xd0>)
 800d6ea:	4828      	ldr	r0, [pc, #160]	; (800d78c <__lshift+0xd4>)
 800d6ec:	f7ff f9dc 	bl	800caa8 <__assert_func>
 800d6f0:	3101      	adds	r1, #1
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	e7ee      	b.n	800d6d4 <__lshift+0x1c>
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	f100 0114 	add.w	r1, r0, #20
 800d6fc:	f100 0210 	add.w	r2, r0, #16
 800d700:	4618      	mov	r0, r3
 800d702:	4553      	cmp	r3, sl
 800d704:	db33      	blt.n	800d76e <__lshift+0xb6>
 800d706:	6920      	ldr	r0, [r4, #16]
 800d708:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d70c:	f104 0314 	add.w	r3, r4, #20
 800d710:	f019 091f 	ands.w	r9, r9, #31
 800d714:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d718:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d71c:	d02b      	beq.n	800d776 <__lshift+0xbe>
 800d71e:	468a      	mov	sl, r1
 800d720:	2200      	movs	r2, #0
 800d722:	f1c9 0e20 	rsb	lr, r9, #32
 800d726:	6818      	ldr	r0, [r3, #0]
 800d728:	fa00 f009 	lsl.w	r0, r0, r9
 800d72c:	4302      	orrs	r2, r0
 800d72e:	f84a 2b04 	str.w	r2, [sl], #4
 800d732:	f853 2b04 	ldr.w	r2, [r3], #4
 800d736:	459c      	cmp	ip, r3
 800d738:	fa22 f20e 	lsr.w	r2, r2, lr
 800d73c:	d8f3      	bhi.n	800d726 <__lshift+0x6e>
 800d73e:	ebac 0304 	sub.w	r3, ip, r4
 800d742:	3b15      	subs	r3, #21
 800d744:	f023 0303 	bic.w	r3, r3, #3
 800d748:	3304      	adds	r3, #4
 800d74a:	f104 0015 	add.w	r0, r4, #21
 800d74e:	4584      	cmp	ip, r0
 800d750:	bf38      	it	cc
 800d752:	2304      	movcc	r3, #4
 800d754:	50ca      	str	r2, [r1, r3]
 800d756:	b10a      	cbz	r2, 800d75c <__lshift+0xa4>
 800d758:	f108 0602 	add.w	r6, r8, #2
 800d75c:	3e01      	subs	r6, #1
 800d75e:	4638      	mov	r0, r7
 800d760:	4621      	mov	r1, r4
 800d762:	612e      	str	r6, [r5, #16]
 800d764:	f7ff fd90 	bl	800d288 <_Bfree>
 800d768:	4628      	mov	r0, r5
 800d76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d76e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d772:	3301      	adds	r3, #1
 800d774:	e7c5      	b.n	800d702 <__lshift+0x4a>
 800d776:	3904      	subs	r1, #4
 800d778:	f853 2b04 	ldr.w	r2, [r3], #4
 800d77c:	459c      	cmp	ip, r3
 800d77e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d782:	d8f9      	bhi.n	800d778 <__lshift+0xc0>
 800d784:	e7ea      	b.n	800d75c <__lshift+0xa4>
 800d786:	bf00      	nop
 800d788:	0800ed5c 	.word	0x0800ed5c
 800d78c:	0800edec 	.word	0x0800edec

0800d790 <__mcmp>:
 800d790:	4603      	mov	r3, r0
 800d792:	690a      	ldr	r2, [r1, #16]
 800d794:	6900      	ldr	r0, [r0, #16]
 800d796:	b530      	push	{r4, r5, lr}
 800d798:	1a80      	subs	r0, r0, r2
 800d79a:	d10d      	bne.n	800d7b8 <__mcmp+0x28>
 800d79c:	3314      	adds	r3, #20
 800d79e:	3114      	adds	r1, #20
 800d7a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d7a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d7a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d7ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d7b0:	4295      	cmp	r5, r2
 800d7b2:	d002      	beq.n	800d7ba <__mcmp+0x2a>
 800d7b4:	d304      	bcc.n	800d7c0 <__mcmp+0x30>
 800d7b6:	2001      	movs	r0, #1
 800d7b8:	bd30      	pop	{r4, r5, pc}
 800d7ba:	42a3      	cmp	r3, r4
 800d7bc:	d3f4      	bcc.n	800d7a8 <__mcmp+0x18>
 800d7be:	e7fb      	b.n	800d7b8 <__mcmp+0x28>
 800d7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c4:	e7f8      	b.n	800d7b8 <__mcmp+0x28>
	...

0800d7c8 <__mdiff>:
 800d7c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	4692      	mov	sl, r2
 800d7d6:	f7ff ffdb 	bl	800d790 <__mcmp>
 800d7da:	1e05      	subs	r5, r0, #0
 800d7dc:	d111      	bne.n	800d802 <__mdiff+0x3a>
 800d7de:	4629      	mov	r1, r5
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f7ff fd11 	bl	800d208 <_Balloc>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	b928      	cbnz	r0, 800d7f6 <__mdiff+0x2e>
 800d7ea:	f240 2132 	movw	r1, #562	; 0x232
 800d7ee:	4b3c      	ldr	r3, [pc, #240]	; (800d8e0 <__mdiff+0x118>)
 800d7f0:	483c      	ldr	r0, [pc, #240]	; (800d8e4 <__mdiff+0x11c>)
 800d7f2:	f7ff f959 	bl	800caa8 <__assert_func>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d802:	bfa4      	itt	ge
 800d804:	4653      	movge	r3, sl
 800d806:	46a2      	movge	sl, r4
 800d808:	4630      	mov	r0, r6
 800d80a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d80e:	bfa6      	itte	ge
 800d810:	461c      	movge	r4, r3
 800d812:	2500      	movge	r5, #0
 800d814:	2501      	movlt	r5, #1
 800d816:	f7ff fcf7 	bl	800d208 <_Balloc>
 800d81a:	4602      	mov	r2, r0
 800d81c:	b918      	cbnz	r0, 800d826 <__mdiff+0x5e>
 800d81e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d822:	4b2f      	ldr	r3, [pc, #188]	; (800d8e0 <__mdiff+0x118>)
 800d824:	e7e4      	b.n	800d7f0 <__mdiff+0x28>
 800d826:	f100 0814 	add.w	r8, r0, #20
 800d82a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d82e:	60c5      	str	r5, [r0, #12]
 800d830:	f04f 0c00 	mov.w	ip, #0
 800d834:	f10a 0514 	add.w	r5, sl, #20
 800d838:	f10a 0010 	add.w	r0, sl, #16
 800d83c:	46c2      	mov	sl, r8
 800d83e:	6926      	ldr	r6, [r4, #16]
 800d840:	f104 0914 	add.w	r9, r4, #20
 800d844:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d848:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d84c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d850:	f859 3b04 	ldr.w	r3, [r9], #4
 800d854:	fa1f f18b 	uxth.w	r1, fp
 800d858:	4461      	add	r1, ip
 800d85a:	fa1f fc83 	uxth.w	ip, r3
 800d85e:	0c1b      	lsrs	r3, r3, #16
 800d860:	eba1 010c 	sub.w	r1, r1, ip
 800d864:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d868:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d86c:	b289      	uxth	r1, r1
 800d86e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d872:	454e      	cmp	r6, r9
 800d874:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d878:	f84a 3b04 	str.w	r3, [sl], #4
 800d87c:	d8e6      	bhi.n	800d84c <__mdiff+0x84>
 800d87e:	1b33      	subs	r3, r6, r4
 800d880:	3b15      	subs	r3, #21
 800d882:	f023 0303 	bic.w	r3, r3, #3
 800d886:	3415      	adds	r4, #21
 800d888:	3304      	adds	r3, #4
 800d88a:	42a6      	cmp	r6, r4
 800d88c:	bf38      	it	cc
 800d88e:	2304      	movcc	r3, #4
 800d890:	441d      	add	r5, r3
 800d892:	4443      	add	r3, r8
 800d894:	461e      	mov	r6, r3
 800d896:	462c      	mov	r4, r5
 800d898:	4574      	cmp	r4, lr
 800d89a:	d30e      	bcc.n	800d8ba <__mdiff+0xf2>
 800d89c:	f10e 0103 	add.w	r1, lr, #3
 800d8a0:	1b49      	subs	r1, r1, r5
 800d8a2:	f021 0103 	bic.w	r1, r1, #3
 800d8a6:	3d03      	subs	r5, #3
 800d8a8:	45ae      	cmp	lr, r5
 800d8aa:	bf38      	it	cc
 800d8ac:	2100      	movcc	r1, #0
 800d8ae:	4419      	add	r1, r3
 800d8b0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d8b4:	b18b      	cbz	r3, 800d8da <__mdiff+0x112>
 800d8b6:	6117      	str	r7, [r2, #16]
 800d8b8:	e7a0      	b.n	800d7fc <__mdiff+0x34>
 800d8ba:	f854 8b04 	ldr.w	r8, [r4], #4
 800d8be:	fa1f f188 	uxth.w	r1, r8
 800d8c2:	4461      	add	r1, ip
 800d8c4:	1408      	asrs	r0, r1, #16
 800d8c6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d8ca:	b289      	uxth	r1, r1
 800d8cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d8d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8d4:	f846 1b04 	str.w	r1, [r6], #4
 800d8d8:	e7de      	b.n	800d898 <__mdiff+0xd0>
 800d8da:	3f01      	subs	r7, #1
 800d8dc:	e7e8      	b.n	800d8b0 <__mdiff+0xe8>
 800d8de:	bf00      	nop
 800d8e0:	0800ed5c 	.word	0x0800ed5c
 800d8e4:	0800edec 	.word	0x0800edec

0800d8e8 <__ulp>:
 800d8e8:	4b11      	ldr	r3, [pc, #68]	; (800d930 <__ulp+0x48>)
 800d8ea:	400b      	ands	r3, r1
 800d8ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	dd02      	ble.n	800d8fa <__ulp+0x12>
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	4770      	bx	lr
 800d8fa:	425b      	negs	r3, r3
 800d8fc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d900:	f04f 0000 	mov.w	r0, #0
 800d904:	f04f 0100 	mov.w	r1, #0
 800d908:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d90c:	da04      	bge.n	800d918 <__ulp+0x30>
 800d90e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d912:	fa43 f102 	asr.w	r1, r3, r2
 800d916:	4770      	bx	lr
 800d918:	f1a2 0314 	sub.w	r3, r2, #20
 800d91c:	2b1e      	cmp	r3, #30
 800d91e:	bfd6      	itet	le
 800d920:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d924:	2301      	movgt	r3, #1
 800d926:	fa22 f303 	lsrle.w	r3, r2, r3
 800d92a:	4618      	mov	r0, r3
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	7ff00000 	.word	0x7ff00000

0800d934 <__b2d>:
 800d934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d938:	6907      	ldr	r7, [r0, #16]
 800d93a:	f100 0914 	add.w	r9, r0, #20
 800d93e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d942:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d946:	f1a7 0804 	sub.w	r8, r7, #4
 800d94a:	4630      	mov	r0, r6
 800d94c:	f7ff fd52 	bl	800d3f4 <__hi0bits>
 800d950:	f1c0 0320 	rsb	r3, r0, #32
 800d954:	280a      	cmp	r0, #10
 800d956:	600b      	str	r3, [r1, #0]
 800d958:	491f      	ldr	r1, [pc, #124]	; (800d9d8 <__b2d+0xa4>)
 800d95a:	dc17      	bgt.n	800d98c <__b2d+0x58>
 800d95c:	45c1      	cmp	r9, r8
 800d95e:	bf28      	it	cs
 800d960:	2200      	movcs	r2, #0
 800d962:	f1c0 0c0b 	rsb	ip, r0, #11
 800d966:	fa26 f30c 	lsr.w	r3, r6, ip
 800d96a:	bf38      	it	cc
 800d96c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d970:	ea43 0501 	orr.w	r5, r3, r1
 800d974:	f100 0315 	add.w	r3, r0, #21
 800d978:	fa06 f303 	lsl.w	r3, r6, r3
 800d97c:	fa22 f20c 	lsr.w	r2, r2, ip
 800d980:	ea43 0402 	orr.w	r4, r3, r2
 800d984:	4620      	mov	r0, r4
 800d986:	4629      	mov	r1, r5
 800d988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d98c:	45c1      	cmp	r9, r8
 800d98e:	bf2e      	itee	cs
 800d990:	2200      	movcs	r2, #0
 800d992:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d996:	f1a7 0808 	subcc.w	r8, r7, #8
 800d99a:	f1b0 030b 	subs.w	r3, r0, #11
 800d99e:	d016      	beq.n	800d9ce <__b2d+0x9a>
 800d9a0:	f1c3 0720 	rsb	r7, r3, #32
 800d9a4:	fa22 f107 	lsr.w	r1, r2, r7
 800d9a8:	45c8      	cmp	r8, r9
 800d9aa:	fa06 f603 	lsl.w	r6, r6, r3
 800d9ae:	ea46 0601 	orr.w	r6, r6, r1
 800d9b2:	bf94      	ite	ls
 800d9b4:	2100      	movls	r1, #0
 800d9b6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d9ba:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d9be:	fa02 f003 	lsl.w	r0, r2, r3
 800d9c2:	40f9      	lsrs	r1, r7
 800d9c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d9c8:	ea40 0401 	orr.w	r4, r0, r1
 800d9cc:	e7da      	b.n	800d984 <__b2d+0x50>
 800d9ce:	4614      	mov	r4, r2
 800d9d0:	ea46 0501 	orr.w	r5, r6, r1
 800d9d4:	e7d6      	b.n	800d984 <__b2d+0x50>
 800d9d6:	bf00      	nop
 800d9d8:	3ff00000 	.word	0x3ff00000

0800d9dc <__d2b>:
 800d9dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d9e0:	2101      	movs	r1, #1
 800d9e2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d9e6:	4690      	mov	r8, r2
 800d9e8:	461d      	mov	r5, r3
 800d9ea:	f7ff fc0d 	bl	800d208 <_Balloc>
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	b930      	cbnz	r0, 800da00 <__d2b+0x24>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	f240 310a 	movw	r1, #778	; 0x30a
 800d9f8:	4b24      	ldr	r3, [pc, #144]	; (800da8c <__d2b+0xb0>)
 800d9fa:	4825      	ldr	r0, [pc, #148]	; (800da90 <__d2b+0xb4>)
 800d9fc:	f7ff f854 	bl	800caa8 <__assert_func>
 800da00:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800da04:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800da08:	bb2d      	cbnz	r5, 800da56 <__d2b+0x7a>
 800da0a:	9301      	str	r3, [sp, #4]
 800da0c:	f1b8 0300 	subs.w	r3, r8, #0
 800da10:	d026      	beq.n	800da60 <__d2b+0x84>
 800da12:	4668      	mov	r0, sp
 800da14:	9300      	str	r3, [sp, #0]
 800da16:	f7ff fd0d 	bl	800d434 <__lo0bits>
 800da1a:	9900      	ldr	r1, [sp, #0]
 800da1c:	b1f0      	cbz	r0, 800da5c <__d2b+0x80>
 800da1e:	9a01      	ldr	r2, [sp, #4]
 800da20:	f1c0 0320 	rsb	r3, r0, #32
 800da24:	fa02 f303 	lsl.w	r3, r2, r3
 800da28:	430b      	orrs	r3, r1
 800da2a:	40c2      	lsrs	r2, r0
 800da2c:	6163      	str	r3, [r4, #20]
 800da2e:	9201      	str	r2, [sp, #4]
 800da30:	9b01      	ldr	r3, [sp, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	bf14      	ite	ne
 800da36:	2102      	movne	r1, #2
 800da38:	2101      	moveq	r1, #1
 800da3a:	61a3      	str	r3, [r4, #24]
 800da3c:	6121      	str	r1, [r4, #16]
 800da3e:	b1c5      	cbz	r5, 800da72 <__d2b+0x96>
 800da40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da44:	4405      	add	r5, r0
 800da46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da4a:	603d      	str	r5, [r7, #0]
 800da4c:	6030      	str	r0, [r6, #0]
 800da4e:	4620      	mov	r0, r4
 800da50:	b002      	add	sp, #8
 800da52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da5a:	e7d6      	b.n	800da0a <__d2b+0x2e>
 800da5c:	6161      	str	r1, [r4, #20]
 800da5e:	e7e7      	b.n	800da30 <__d2b+0x54>
 800da60:	a801      	add	r0, sp, #4
 800da62:	f7ff fce7 	bl	800d434 <__lo0bits>
 800da66:	2101      	movs	r1, #1
 800da68:	9b01      	ldr	r3, [sp, #4]
 800da6a:	6121      	str	r1, [r4, #16]
 800da6c:	6163      	str	r3, [r4, #20]
 800da6e:	3020      	adds	r0, #32
 800da70:	e7e5      	b.n	800da3e <__d2b+0x62>
 800da72:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800da76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da7a:	6038      	str	r0, [r7, #0]
 800da7c:	6918      	ldr	r0, [r3, #16]
 800da7e:	f7ff fcb9 	bl	800d3f4 <__hi0bits>
 800da82:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800da86:	6031      	str	r1, [r6, #0]
 800da88:	e7e1      	b.n	800da4e <__d2b+0x72>
 800da8a:	bf00      	nop
 800da8c:	0800ed5c 	.word	0x0800ed5c
 800da90:	0800edec 	.word	0x0800edec

0800da94 <__ratio>:
 800da94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da98:	4688      	mov	r8, r1
 800da9a:	4669      	mov	r1, sp
 800da9c:	4681      	mov	r9, r0
 800da9e:	f7ff ff49 	bl	800d934 <__b2d>
 800daa2:	460f      	mov	r7, r1
 800daa4:	4604      	mov	r4, r0
 800daa6:	460d      	mov	r5, r1
 800daa8:	4640      	mov	r0, r8
 800daaa:	a901      	add	r1, sp, #4
 800daac:	f7ff ff42 	bl	800d934 <__b2d>
 800dab0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dab4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dab8:	468b      	mov	fp, r1
 800daba:	eba3 0c02 	sub.w	ip, r3, r2
 800dabe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dac2:	1a9b      	subs	r3, r3, r2
 800dac4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dac8:	2b00      	cmp	r3, #0
 800daca:	bfd5      	itete	le
 800dacc:	460a      	movle	r2, r1
 800dace:	462a      	movgt	r2, r5
 800dad0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dad4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dad8:	bfd8      	it	le
 800dada:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dade:	465b      	mov	r3, fp
 800dae0:	4602      	mov	r2, r0
 800dae2:	4639      	mov	r1, r7
 800dae4:	4620      	mov	r0, r4
 800dae6:	f7f2 fe43 	bl	8000770 <__aeabi_ddiv>
 800daea:	b003      	add	sp, #12
 800daec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800daf0 <__copybits>:
 800daf0:	3901      	subs	r1, #1
 800daf2:	b570      	push	{r4, r5, r6, lr}
 800daf4:	1149      	asrs	r1, r1, #5
 800daf6:	6914      	ldr	r4, [r2, #16]
 800daf8:	3101      	adds	r1, #1
 800dafa:	f102 0314 	add.w	r3, r2, #20
 800dafe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800db02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800db06:	1f05      	subs	r5, r0, #4
 800db08:	42a3      	cmp	r3, r4
 800db0a:	d30c      	bcc.n	800db26 <__copybits+0x36>
 800db0c:	1aa3      	subs	r3, r4, r2
 800db0e:	3b11      	subs	r3, #17
 800db10:	f023 0303 	bic.w	r3, r3, #3
 800db14:	3211      	adds	r2, #17
 800db16:	42a2      	cmp	r2, r4
 800db18:	bf88      	it	hi
 800db1a:	2300      	movhi	r3, #0
 800db1c:	4418      	add	r0, r3
 800db1e:	2300      	movs	r3, #0
 800db20:	4288      	cmp	r0, r1
 800db22:	d305      	bcc.n	800db30 <__copybits+0x40>
 800db24:	bd70      	pop	{r4, r5, r6, pc}
 800db26:	f853 6b04 	ldr.w	r6, [r3], #4
 800db2a:	f845 6f04 	str.w	r6, [r5, #4]!
 800db2e:	e7eb      	b.n	800db08 <__copybits+0x18>
 800db30:	f840 3b04 	str.w	r3, [r0], #4
 800db34:	e7f4      	b.n	800db20 <__copybits+0x30>

0800db36 <__any_on>:
 800db36:	f100 0214 	add.w	r2, r0, #20
 800db3a:	6900      	ldr	r0, [r0, #16]
 800db3c:	114b      	asrs	r3, r1, #5
 800db3e:	4298      	cmp	r0, r3
 800db40:	b510      	push	{r4, lr}
 800db42:	db11      	blt.n	800db68 <__any_on+0x32>
 800db44:	dd0a      	ble.n	800db5c <__any_on+0x26>
 800db46:	f011 011f 	ands.w	r1, r1, #31
 800db4a:	d007      	beq.n	800db5c <__any_on+0x26>
 800db4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800db50:	fa24 f001 	lsr.w	r0, r4, r1
 800db54:	fa00 f101 	lsl.w	r1, r0, r1
 800db58:	428c      	cmp	r4, r1
 800db5a:	d10b      	bne.n	800db74 <__any_on+0x3e>
 800db5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db60:	4293      	cmp	r3, r2
 800db62:	d803      	bhi.n	800db6c <__any_on+0x36>
 800db64:	2000      	movs	r0, #0
 800db66:	bd10      	pop	{r4, pc}
 800db68:	4603      	mov	r3, r0
 800db6a:	e7f7      	b.n	800db5c <__any_on+0x26>
 800db6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db70:	2900      	cmp	r1, #0
 800db72:	d0f5      	beq.n	800db60 <__any_on+0x2a>
 800db74:	2001      	movs	r0, #1
 800db76:	e7f6      	b.n	800db66 <__any_on+0x30>

0800db78 <_calloc_r>:
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	fb02 f501 	mul.w	r5, r2, r1
 800db7e:	4629      	mov	r1, r5
 800db80:	f000 f854 	bl	800dc2c <_malloc_r>
 800db84:	4604      	mov	r4, r0
 800db86:	b118      	cbz	r0, 800db90 <_calloc_r+0x18>
 800db88:	462a      	mov	r2, r5
 800db8a:	2100      	movs	r1, #0
 800db8c:	f7fe f8fc 	bl	800bd88 <memset>
 800db90:	4620      	mov	r0, r4
 800db92:	bd38      	pop	{r3, r4, r5, pc}

0800db94 <_free_r>:
 800db94:	b538      	push	{r3, r4, r5, lr}
 800db96:	4605      	mov	r5, r0
 800db98:	2900      	cmp	r1, #0
 800db9a:	d043      	beq.n	800dc24 <_free_r+0x90>
 800db9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dba0:	1f0c      	subs	r4, r1, #4
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	bfb8      	it	lt
 800dba6:	18e4      	addlt	r4, r4, r3
 800dba8:	f000 feb2 	bl	800e910 <__malloc_lock>
 800dbac:	4a1e      	ldr	r2, [pc, #120]	; (800dc28 <_free_r+0x94>)
 800dbae:	6813      	ldr	r3, [r2, #0]
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	b933      	cbnz	r3, 800dbc2 <_free_r+0x2e>
 800dbb4:	6063      	str	r3, [r4, #4]
 800dbb6:	6014      	str	r4, [r2, #0]
 800dbb8:	4628      	mov	r0, r5
 800dbba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbbe:	f000 bead 	b.w	800e91c <__malloc_unlock>
 800dbc2:	42a3      	cmp	r3, r4
 800dbc4:	d90a      	bls.n	800dbdc <_free_r+0x48>
 800dbc6:	6821      	ldr	r1, [r4, #0]
 800dbc8:	1862      	adds	r2, r4, r1
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	bf01      	itttt	eq
 800dbce:	681a      	ldreq	r2, [r3, #0]
 800dbd0:	685b      	ldreq	r3, [r3, #4]
 800dbd2:	1852      	addeq	r2, r2, r1
 800dbd4:	6022      	streq	r2, [r4, #0]
 800dbd6:	6063      	str	r3, [r4, #4]
 800dbd8:	6004      	str	r4, [r0, #0]
 800dbda:	e7ed      	b.n	800dbb8 <_free_r+0x24>
 800dbdc:	461a      	mov	r2, r3
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	b10b      	cbz	r3, 800dbe6 <_free_r+0x52>
 800dbe2:	42a3      	cmp	r3, r4
 800dbe4:	d9fa      	bls.n	800dbdc <_free_r+0x48>
 800dbe6:	6811      	ldr	r1, [r2, #0]
 800dbe8:	1850      	adds	r0, r2, r1
 800dbea:	42a0      	cmp	r0, r4
 800dbec:	d10b      	bne.n	800dc06 <_free_r+0x72>
 800dbee:	6820      	ldr	r0, [r4, #0]
 800dbf0:	4401      	add	r1, r0
 800dbf2:	1850      	adds	r0, r2, r1
 800dbf4:	4283      	cmp	r3, r0
 800dbf6:	6011      	str	r1, [r2, #0]
 800dbf8:	d1de      	bne.n	800dbb8 <_free_r+0x24>
 800dbfa:	6818      	ldr	r0, [r3, #0]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	4401      	add	r1, r0
 800dc00:	6011      	str	r1, [r2, #0]
 800dc02:	6053      	str	r3, [r2, #4]
 800dc04:	e7d8      	b.n	800dbb8 <_free_r+0x24>
 800dc06:	d902      	bls.n	800dc0e <_free_r+0x7a>
 800dc08:	230c      	movs	r3, #12
 800dc0a:	602b      	str	r3, [r5, #0]
 800dc0c:	e7d4      	b.n	800dbb8 <_free_r+0x24>
 800dc0e:	6820      	ldr	r0, [r4, #0]
 800dc10:	1821      	adds	r1, r4, r0
 800dc12:	428b      	cmp	r3, r1
 800dc14:	bf01      	itttt	eq
 800dc16:	6819      	ldreq	r1, [r3, #0]
 800dc18:	685b      	ldreq	r3, [r3, #4]
 800dc1a:	1809      	addeq	r1, r1, r0
 800dc1c:	6021      	streq	r1, [r4, #0]
 800dc1e:	6063      	str	r3, [r4, #4]
 800dc20:	6054      	str	r4, [r2, #4]
 800dc22:	e7c9      	b.n	800dbb8 <_free_r+0x24>
 800dc24:	bd38      	pop	{r3, r4, r5, pc}
 800dc26:	bf00      	nop
 800dc28:	2000090c 	.word	0x2000090c

0800dc2c <_malloc_r>:
 800dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2e:	1ccd      	adds	r5, r1, #3
 800dc30:	f025 0503 	bic.w	r5, r5, #3
 800dc34:	3508      	adds	r5, #8
 800dc36:	2d0c      	cmp	r5, #12
 800dc38:	bf38      	it	cc
 800dc3a:	250c      	movcc	r5, #12
 800dc3c:	2d00      	cmp	r5, #0
 800dc3e:	4606      	mov	r6, r0
 800dc40:	db01      	blt.n	800dc46 <_malloc_r+0x1a>
 800dc42:	42a9      	cmp	r1, r5
 800dc44:	d903      	bls.n	800dc4e <_malloc_r+0x22>
 800dc46:	230c      	movs	r3, #12
 800dc48:	6033      	str	r3, [r6, #0]
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc4e:	f000 fe5f 	bl	800e910 <__malloc_lock>
 800dc52:	4921      	ldr	r1, [pc, #132]	; (800dcd8 <_malloc_r+0xac>)
 800dc54:	680a      	ldr	r2, [r1, #0]
 800dc56:	4614      	mov	r4, r2
 800dc58:	b99c      	cbnz	r4, 800dc82 <_malloc_r+0x56>
 800dc5a:	4f20      	ldr	r7, [pc, #128]	; (800dcdc <_malloc_r+0xb0>)
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	b923      	cbnz	r3, 800dc6a <_malloc_r+0x3e>
 800dc60:	4621      	mov	r1, r4
 800dc62:	4630      	mov	r0, r6
 800dc64:	f000 fb30 	bl	800e2c8 <_sbrk_r>
 800dc68:	6038      	str	r0, [r7, #0]
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	f000 fb2b 	bl	800e2c8 <_sbrk_r>
 800dc72:	1c43      	adds	r3, r0, #1
 800dc74:	d123      	bne.n	800dcbe <_malloc_r+0x92>
 800dc76:	230c      	movs	r3, #12
 800dc78:	4630      	mov	r0, r6
 800dc7a:	6033      	str	r3, [r6, #0]
 800dc7c:	f000 fe4e 	bl	800e91c <__malloc_unlock>
 800dc80:	e7e3      	b.n	800dc4a <_malloc_r+0x1e>
 800dc82:	6823      	ldr	r3, [r4, #0]
 800dc84:	1b5b      	subs	r3, r3, r5
 800dc86:	d417      	bmi.n	800dcb8 <_malloc_r+0x8c>
 800dc88:	2b0b      	cmp	r3, #11
 800dc8a:	d903      	bls.n	800dc94 <_malloc_r+0x68>
 800dc8c:	6023      	str	r3, [r4, #0]
 800dc8e:	441c      	add	r4, r3
 800dc90:	6025      	str	r5, [r4, #0]
 800dc92:	e004      	b.n	800dc9e <_malloc_r+0x72>
 800dc94:	6863      	ldr	r3, [r4, #4]
 800dc96:	42a2      	cmp	r2, r4
 800dc98:	bf0c      	ite	eq
 800dc9a:	600b      	streq	r3, [r1, #0]
 800dc9c:	6053      	strne	r3, [r2, #4]
 800dc9e:	4630      	mov	r0, r6
 800dca0:	f000 fe3c 	bl	800e91c <__malloc_unlock>
 800dca4:	f104 000b 	add.w	r0, r4, #11
 800dca8:	1d23      	adds	r3, r4, #4
 800dcaa:	f020 0007 	bic.w	r0, r0, #7
 800dcae:	1ac2      	subs	r2, r0, r3
 800dcb0:	d0cc      	beq.n	800dc4c <_malloc_r+0x20>
 800dcb2:	1a1b      	subs	r3, r3, r0
 800dcb4:	50a3      	str	r3, [r4, r2]
 800dcb6:	e7c9      	b.n	800dc4c <_malloc_r+0x20>
 800dcb8:	4622      	mov	r2, r4
 800dcba:	6864      	ldr	r4, [r4, #4]
 800dcbc:	e7cc      	b.n	800dc58 <_malloc_r+0x2c>
 800dcbe:	1cc4      	adds	r4, r0, #3
 800dcc0:	f024 0403 	bic.w	r4, r4, #3
 800dcc4:	42a0      	cmp	r0, r4
 800dcc6:	d0e3      	beq.n	800dc90 <_malloc_r+0x64>
 800dcc8:	1a21      	subs	r1, r4, r0
 800dcca:	4630      	mov	r0, r6
 800dccc:	f000 fafc 	bl	800e2c8 <_sbrk_r>
 800dcd0:	3001      	adds	r0, #1
 800dcd2:	d1dd      	bne.n	800dc90 <_malloc_r+0x64>
 800dcd4:	e7cf      	b.n	800dc76 <_malloc_r+0x4a>
 800dcd6:	bf00      	nop
 800dcd8:	2000090c 	.word	0x2000090c
 800dcdc:	20000910 	.word	0x20000910

0800dce0 <__sfputc_r>:
 800dce0:	6893      	ldr	r3, [r2, #8]
 800dce2:	b410      	push	{r4}
 800dce4:	3b01      	subs	r3, #1
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	6093      	str	r3, [r2, #8]
 800dcea:	da07      	bge.n	800dcfc <__sfputc_r+0x1c>
 800dcec:	6994      	ldr	r4, [r2, #24]
 800dcee:	42a3      	cmp	r3, r4
 800dcf0:	db01      	blt.n	800dcf6 <__sfputc_r+0x16>
 800dcf2:	290a      	cmp	r1, #10
 800dcf4:	d102      	bne.n	800dcfc <__sfputc_r+0x1c>
 800dcf6:	bc10      	pop	{r4}
 800dcf8:	f000 bb08 	b.w	800e30c <__swbuf_r>
 800dcfc:	6813      	ldr	r3, [r2, #0]
 800dcfe:	1c58      	adds	r0, r3, #1
 800dd00:	6010      	str	r0, [r2, #0]
 800dd02:	7019      	strb	r1, [r3, #0]
 800dd04:	4608      	mov	r0, r1
 800dd06:	bc10      	pop	{r4}
 800dd08:	4770      	bx	lr

0800dd0a <__sfputs_r>:
 800dd0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	460f      	mov	r7, r1
 800dd10:	4614      	mov	r4, r2
 800dd12:	18d5      	adds	r5, r2, r3
 800dd14:	42ac      	cmp	r4, r5
 800dd16:	d101      	bne.n	800dd1c <__sfputs_r+0x12>
 800dd18:	2000      	movs	r0, #0
 800dd1a:	e007      	b.n	800dd2c <__sfputs_r+0x22>
 800dd1c:	463a      	mov	r2, r7
 800dd1e:	4630      	mov	r0, r6
 800dd20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd24:	f7ff ffdc 	bl	800dce0 <__sfputc_r>
 800dd28:	1c43      	adds	r3, r0, #1
 800dd2a:	d1f3      	bne.n	800dd14 <__sfputs_r+0xa>
 800dd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd30 <_vfiprintf_r>:
 800dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd34:	460d      	mov	r5, r1
 800dd36:	4614      	mov	r4, r2
 800dd38:	4698      	mov	r8, r3
 800dd3a:	4606      	mov	r6, r0
 800dd3c:	b09d      	sub	sp, #116	; 0x74
 800dd3e:	b118      	cbz	r0, 800dd48 <_vfiprintf_r+0x18>
 800dd40:	6983      	ldr	r3, [r0, #24]
 800dd42:	b90b      	cbnz	r3, 800dd48 <_vfiprintf_r+0x18>
 800dd44:	f000 fcd2 	bl	800e6ec <__sinit>
 800dd48:	4b89      	ldr	r3, [pc, #548]	; (800df70 <_vfiprintf_r+0x240>)
 800dd4a:	429d      	cmp	r5, r3
 800dd4c:	d11b      	bne.n	800dd86 <_vfiprintf_r+0x56>
 800dd4e:	6875      	ldr	r5, [r6, #4]
 800dd50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd52:	07d9      	lsls	r1, r3, #31
 800dd54:	d405      	bmi.n	800dd62 <_vfiprintf_r+0x32>
 800dd56:	89ab      	ldrh	r3, [r5, #12]
 800dd58:	059a      	lsls	r2, r3, #22
 800dd5a:	d402      	bmi.n	800dd62 <_vfiprintf_r+0x32>
 800dd5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd5e:	f000 fd63 	bl	800e828 <__retarget_lock_acquire_recursive>
 800dd62:	89ab      	ldrh	r3, [r5, #12]
 800dd64:	071b      	lsls	r3, r3, #28
 800dd66:	d501      	bpl.n	800dd6c <_vfiprintf_r+0x3c>
 800dd68:	692b      	ldr	r3, [r5, #16]
 800dd6a:	b9eb      	cbnz	r3, 800dda8 <_vfiprintf_r+0x78>
 800dd6c:	4629      	mov	r1, r5
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f000 fb2c 	bl	800e3cc <__swsetup_r>
 800dd74:	b1c0      	cbz	r0, 800dda8 <_vfiprintf_r+0x78>
 800dd76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd78:	07dc      	lsls	r4, r3, #31
 800dd7a:	d50e      	bpl.n	800dd9a <_vfiprintf_r+0x6a>
 800dd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd80:	b01d      	add	sp, #116	; 0x74
 800dd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd86:	4b7b      	ldr	r3, [pc, #492]	; (800df74 <_vfiprintf_r+0x244>)
 800dd88:	429d      	cmp	r5, r3
 800dd8a:	d101      	bne.n	800dd90 <_vfiprintf_r+0x60>
 800dd8c:	68b5      	ldr	r5, [r6, #8]
 800dd8e:	e7df      	b.n	800dd50 <_vfiprintf_r+0x20>
 800dd90:	4b79      	ldr	r3, [pc, #484]	; (800df78 <_vfiprintf_r+0x248>)
 800dd92:	429d      	cmp	r5, r3
 800dd94:	bf08      	it	eq
 800dd96:	68f5      	ldreq	r5, [r6, #12]
 800dd98:	e7da      	b.n	800dd50 <_vfiprintf_r+0x20>
 800dd9a:	89ab      	ldrh	r3, [r5, #12]
 800dd9c:	0598      	lsls	r0, r3, #22
 800dd9e:	d4ed      	bmi.n	800dd7c <_vfiprintf_r+0x4c>
 800dda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dda2:	f000 fd42 	bl	800e82a <__retarget_lock_release_recursive>
 800dda6:	e7e9      	b.n	800dd7c <_vfiprintf_r+0x4c>
 800dda8:	2300      	movs	r3, #0
 800ddaa:	9309      	str	r3, [sp, #36]	; 0x24
 800ddac:	2320      	movs	r3, #32
 800ddae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddb2:	2330      	movs	r3, #48	; 0x30
 800ddb4:	f04f 0901 	mov.w	r9, #1
 800ddb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddbc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800df7c <_vfiprintf_r+0x24c>
 800ddc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddc4:	4623      	mov	r3, r4
 800ddc6:	469a      	mov	sl, r3
 800ddc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddcc:	b10a      	cbz	r2, 800ddd2 <_vfiprintf_r+0xa2>
 800ddce:	2a25      	cmp	r2, #37	; 0x25
 800ddd0:	d1f9      	bne.n	800ddc6 <_vfiprintf_r+0x96>
 800ddd2:	ebba 0b04 	subs.w	fp, sl, r4
 800ddd6:	d00b      	beq.n	800ddf0 <_vfiprintf_r+0xc0>
 800ddd8:	465b      	mov	r3, fp
 800ddda:	4622      	mov	r2, r4
 800dddc:	4629      	mov	r1, r5
 800ddde:	4630      	mov	r0, r6
 800dde0:	f7ff ff93 	bl	800dd0a <__sfputs_r>
 800dde4:	3001      	adds	r0, #1
 800dde6:	f000 80aa 	beq.w	800df3e <_vfiprintf_r+0x20e>
 800ddea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddec:	445a      	add	r2, fp
 800ddee:	9209      	str	r2, [sp, #36]	; 0x24
 800ddf0:	f89a 3000 	ldrb.w	r3, [sl]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f000 80a2 	beq.w	800df3e <_vfiprintf_r+0x20e>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f04f 32ff 	mov.w	r2, #4294967295
 800de00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de04:	f10a 0a01 	add.w	sl, sl, #1
 800de08:	9304      	str	r3, [sp, #16]
 800de0a:	9307      	str	r3, [sp, #28]
 800de0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de10:	931a      	str	r3, [sp, #104]	; 0x68
 800de12:	4654      	mov	r4, sl
 800de14:	2205      	movs	r2, #5
 800de16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de1a:	4858      	ldr	r0, [pc, #352]	; (800df7c <_vfiprintf_r+0x24c>)
 800de1c:	f000 fd6a 	bl	800e8f4 <memchr>
 800de20:	9a04      	ldr	r2, [sp, #16]
 800de22:	b9d8      	cbnz	r0, 800de5c <_vfiprintf_r+0x12c>
 800de24:	06d1      	lsls	r1, r2, #27
 800de26:	bf44      	itt	mi
 800de28:	2320      	movmi	r3, #32
 800de2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de2e:	0713      	lsls	r3, r2, #28
 800de30:	bf44      	itt	mi
 800de32:	232b      	movmi	r3, #43	; 0x2b
 800de34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de38:	f89a 3000 	ldrb.w	r3, [sl]
 800de3c:	2b2a      	cmp	r3, #42	; 0x2a
 800de3e:	d015      	beq.n	800de6c <_vfiprintf_r+0x13c>
 800de40:	4654      	mov	r4, sl
 800de42:	2000      	movs	r0, #0
 800de44:	f04f 0c0a 	mov.w	ip, #10
 800de48:	9a07      	ldr	r2, [sp, #28]
 800de4a:	4621      	mov	r1, r4
 800de4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de50:	3b30      	subs	r3, #48	; 0x30
 800de52:	2b09      	cmp	r3, #9
 800de54:	d94e      	bls.n	800def4 <_vfiprintf_r+0x1c4>
 800de56:	b1b0      	cbz	r0, 800de86 <_vfiprintf_r+0x156>
 800de58:	9207      	str	r2, [sp, #28]
 800de5a:	e014      	b.n	800de86 <_vfiprintf_r+0x156>
 800de5c:	eba0 0308 	sub.w	r3, r0, r8
 800de60:	fa09 f303 	lsl.w	r3, r9, r3
 800de64:	4313      	orrs	r3, r2
 800de66:	46a2      	mov	sl, r4
 800de68:	9304      	str	r3, [sp, #16]
 800de6a:	e7d2      	b.n	800de12 <_vfiprintf_r+0xe2>
 800de6c:	9b03      	ldr	r3, [sp, #12]
 800de6e:	1d19      	adds	r1, r3, #4
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	9103      	str	r1, [sp, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	bfbb      	ittet	lt
 800de78:	425b      	neglt	r3, r3
 800de7a:	f042 0202 	orrlt.w	r2, r2, #2
 800de7e:	9307      	strge	r3, [sp, #28]
 800de80:	9307      	strlt	r3, [sp, #28]
 800de82:	bfb8      	it	lt
 800de84:	9204      	strlt	r2, [sp, #16]
 800de86:	7823      	ldrb	r3, [r4, #0]
 800de88:	2b2e      	cmp	r3, #46	; 0x2e
 800de8a:	d10c      	bne.n	800dea6 <_vfiprintf_r+0x176>
 800de8c:	7863      	ldrb	r3, [r4, #1]
 800de8e:	2b2a      	cmp	r3, #42	; 0x2a
 800de90:	d135      	bne.n	800defe <_vfiprintf_r+0x1ce>
 800de92:	9b03      	ldr	r3, [sp, #12]
 800de94:	3402      	adds	r4, #2
 800de96:	1d1a      	adds	r2, r3, #4
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	9203      	str	r2, [sp, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	bfb8      	it	lt
 800dea0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dea4:	9305      	str	r3, [sp, #20]
 800dea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df8c <_vfiprintf_r+0x25c>
 800deaa:	2203      	movs	r2, #3
 800deac:	4650      	mov	r0, sl
 800deae:	7821      	ldrb	r1, [r4, #0]
 800deb0:	f000 fd20 	bl	800e8f4 <memchr>
 800deb4:	b140      	cbz	r0, 800dec8 <_vfiprintf_r+0x198>
 800deb6:	2340      	movs	r3, #64	; 0x40
 800deb8:	eba0 000a 	sub.w	r0, r0, sl
 800debc:	fa03 f000 	lsl.w	r0, r3, r0
 800dec0:	9b04      	ldr	r3, [sp, #16]
 800dec2:	3401      	adds	r4, #1
 800dec4:	4303      	orrs	r3, r0
 800dec6:	9304      	str	r3, [sp, #16]
 800dec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800decc:	2206      	movs	r2, #6
 800dece:	482c      	ldr	r0, [pc, #176]	; (800df80 <_vfiprintf_r+0x250>)
 800ded0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ded4:	f000 fd0e 	bl	800e8f4 <memchr>
 800ded8:	2800      	cmp	r0, #0
 800deda:	d03f      	beq.n	800df5c <_vfiprintf_r+0x22c>
 800dedc:	4b29      	ldr	r3, [pc, #164]	; (800df84 <_vfiprintf_r+0x254>)
 800dede:	bb1b      	cbnz	r3, 800df28 <_vfiprintf_r+0x1f8>
 800dee0:	9b03      	ldr	r3, [sp, #12]
 800dee2:	3307      	adds	r3, #7
 800dee4:	f023 0307 	bic.w	r3, r3, #7
 800dee8:	3308      	adds	r3, #8
 800deea:	9303      	str	r3, [sp, #12]
 800deec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deee:	443b      	add	r3, r7
 800def0:	9309      	str	r3, [sp, #36]	; 0x24
 800def2:	e767      	b.n	800ddc4 <_vfiprintf_r+0x94>
 800def4:	460c      	mov	r4, r1
 800def6:	2001      	movs	r0, #1
 800def8:	fb0c 3202 	mla	r2, ip, r2, r3
 800defc:	e7a5      	b.n	800de4a <_vfiprintf_r+0x11a>
 800defe:	2300      	movs	r3, #0
 800df00:	f04f 0c0a 	mov.w	ip, #10
 800df04:	4619      	mov	r1, r3
 800df06:	3401      	adds	r4, #1
 800df08:	9305      	str	r3, [sp, #20]
 800df0a:	4620      	mov	r0, r4
 800df0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df10:	3a30      	subs	r2, #48	; 0x30
 800df12:	2a09      	cmp	r2, #9
 800df14:	d903      	bls.n	800df1e <_vfiprintf_r+0x1ee>
 800df16:	2b00      	cmp	r3, #0
 800df18:	d0c5      	beq.n	800dea6 <_vfiprintf_r+0x176>
 800df1a:	9105      	str	r1, [sp, #20]
 800df1c:	e7c3      	b.n	800dea6 <_vfiprintf_r+0x176>
 800df1e:	4604      	mov	r4, r0
 800df20:	2301      	movs	r3, #1
 800df22:	fb0c 2101 	mla	r1, ip, r1, r2
 800df26:	e7f0      	b.n	800df0a <_vfiprintf_r+0x1da>
 800df28:	ab03      	add	r3, sp, #12
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	462a      	mov	r2, r5
 800df2e:	4630      	mov	r0, r6
 800df30:	4b15      	ldr	r3, [pc, #84]	; (800df88 <_vfiprintf_r+0x258>)
 800df32:	a904      	add	r1, sp, #16
 800df34:	f3af 8000 	nop.w
 800df38:	4607      	mov	r7, r0
 800df3a:	1c78      	adds	r0, r7, #1
 800df3c:	d1d6      	bne.n	800deec <_vfiprintf_r+0x1bc>
 800df3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df40:	07d9      	lsls	r1, r3, #31
 800df42:	d405      	bmi.n	800df50 <_vfiprintf_r+0x220>
 800df44:	89ab      	ldrh	r3, [r5, #12]
 800df46:	059a      	lsls	r2, r3, #22
 800df48:	d402      	bmi.n	800df50 <_vfiprintf_r+0x220>
 800df4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df4c:	f000 fc6d 	bl	800e82a <__retarget_lock_release_recursive>
 800df50:	89ab      	ldrh	r3, [r5, #12]
 800df52:	065b      	lsls	r3, r3, #25
 800df54:	f53f af12 	bmi.w	800dd7c <_vfiprintf_r+0x4c>
 800df58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df5a:	e711      	b.n	800dd80 <_vfiprintf_r+0x50>
 800df5c:	ab03      	add	r3, sp, #12
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	462a      	mov	r2, r5
 800df62:	4630      	mov	r0, r6
 800df64:	4b08      	ldr	r3, [pc, #32]	; (800df88 <_vfiprintf_r+0x258>)
 800df66:	a904      	add	r1, sp, #16
 800df68:	f000 f882 	bl	800e070 <_printf_i>
 800df6c:	e7e4      	b.n	800df38 <_vfiprintf_r+0x208>
 800df6e:	bf00      	nop
 800df70:	0800f0a0 	.word	0x0800f0a0
 800df74:	0800f0c0 	.word	0x0800f0c0
 800df78:	0800f080 	.word	0x0800f080
 800df7c:	0800ef4c 	.word	0x0800ef4c
 800df80:	0800ef56 	.word	0x0800ef56
 800df84:	00000000 	.word	0x00000000
 800df88:	0800dd0b 	.word	0x0800dd0b
 800df8c:	0800ef52 	.word	0x0800ef52

0800df90 <_printf_common>:
 800df90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df94:	4616      	mov	r6, r2
 800df96:	4699      	mov	r9, r3
 800df98:	688a      	ldr	r2, [r1, #8]
 800df9a:	690b      	ldr	r3, [r1, #16]
 800df9c:	4607      	mov	r7, r0
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	bfb8      	it	lt
 800dfa2:	4613      	movlt	r3, r2
 800dfa4:	6033      	str	r3, [r6, #0]
 800dfa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfaa:	460c      	mov	r4, r1
 800dfac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dfb0:	b10a      	cbz	r2, 800dfb6 <_printf_common+0x26>
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	6033      	str	r3, [r6, #0]
 800dfb6:	6823      	ldr	r3, [r4, #0]
 800dfb8:	0699      	lsls	r1, r3, #26
 800dfba:	bf42      	ittt	mi
 800dfbc:	6833      	ldrmi	r3, [r6, #0]
 800dfbe:	3302      	addmi	r3, #2
 800dfc0:	6033      	strmi	r3, [r6, #0]
 800dfc2:	6825      	ldr	r5, [r4, #0]
 800dfc4:	f015 0506 	ands.w	r5, r5, #6
 800dfc8:	d106      	bne.n	800dfd8 <_printf_common+0x48>
 800dfca:	f104 0a19 	add.w	sl, r4, #25
 800dfce:	68e3      	ldr	r3, [r4, #12]
 800dfd0:	6832      	ldr	r2, [r6, #0]
 800dfd2:	1a9b      	subs	r3, r3, r2
 800dfd4:	42ab      	cmp	r3, r5
 800dfd6:	dc28      	bgt.n	800e02a <_printf_common+0x9a>
 800dfd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dfdc:	1e13      	subs	r3, r2, #0
 800dfde:	6822      	ldr	r2, [r4, #0]
 800dfe0:	bf18      	it	ne
 800dfe2:	2301      	movne	r3, #1
 800dfe4:	0692      	lsls	r2, r2, #26
 800dfe6:	d42d      	bmi.n	800e044 <_printf_common+0xb4>
 800dfe8:	4649      	mov	r1, r9
 800dfea:	4638      	mov	r0, r7
 800dfec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dff0:	47c0      	blx	r8
 800dff2:	3001      	adds	r0, #1
 800dff4:	d020      	beq.n	800e038 <_printf_common+0xa8>
 800dff6:	6823      	ldr	r3, [r4, #0]
 800dff8:	68e5      	ldr	r5, [r4, #12]
 800dffa:	f003 0306 	and.w	r3, r3, #6
 800dffe:	2b04      	cmp	r3, #4
 800e000:	bf18      	it	ne
 800e002:	2500      	movne	r5, #0
 800e004:	6832      	ldr	r2, [r6, #0]
 800e006:	f04f 0600 	mov.w	r6, #0
 800e00a:	68a3      	ldr	r3, [r4, #8]
 800e00c:	bf08      	it	eq
 800e00e:	1aad      	subeq	r5, r5, r2
 800e010:	6922      	ldr	r2, [r4, #16]
 800e012:	bf08      	it	eq
 800e014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e018:	4293      	cmp	r3, r2
 800e01a:	bfc4      	itt	gt
 800e01c:	1a9b      	subgt	r3, r3, r2
 800e01e:	18ed      	addgt	r5, r5, r3
 800e020:	341a      	adds	r4, #26
 800e022:	42b5      	cmp	r5, r6
 800e024:	d11a      	bne.n	800e05c <_printf_common+0xcc>
 800e026:	2000      	movs	r0, #0
 800e028:	e008      	b.n	800e03c <_printf_common+0xac>
 800e02a:	2301      	movs	r3, #1
 800e02c:	4652      	mov	r2, sl
 800e02e:	4649      	mov	r1, r9
 800e030:	4638      	mov	r0, r7
 800e032:	47c0      	blx	r8
 800e034:	3001      	adds	r0, #1
 800e036:	d103      	bne.n	800e040 <_printf_common+0xb0>
 800e038:	f04f 30ff 	mov.w	r0, #4294967295
 800e03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e040:	3501      	adds	r5, #1
 800e042:	e7c4      	b.n	800dfce <_printf_common+0x3e>
 800e044:	2030      	movs	r0, #48	; 0x30
 800e046:	18e1      	adds	r1, r4, r3
 800e048:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e04c:	1c5a      	adds	r2, r3, #1
 800e04e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e052:	4422      	add	r2, r4
 800e054:	3302      	adds	r3, #2
 800e056:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e05a:	e7c5      	b.n	800dfe8 <_printf_common+0x58>
 800e05c:	2301      	movs	r3, #1
 800e05e:	4622      	mov	r2, r4
 800e060:	4649      	mov	r1, r9
 800e062:	4638      	mov	r0, r7
 800e064:	47c0      	blx	r8
 800e066:	3001      	adds	r0, #1
 800e068:	d0e6      	beq.n	800e038 <_printf_common+0xa8>
 800e06a:	3601      	adds	r6, #1
 800e06c:	e7d9      	b.n	800e022 <_printf_common+0x92>
	...

0800e070 <_printf_i>:
 800e070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e074:	460c      	mov	r4, r1
 800e076:	7e27      	ldrb	r7, [r4, #24]
 800e078:	4691      	mov	r9, r2
 800e07a:	2f78      	cmp	r7, #120	; 0x78
 800e07c:	4680      	mov	r8, r0
 800e07e:	469a      	mov	sl, r3
 800e080:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e082:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e086:	d807      	bhi.n	800e098 <_printf_i+0x28>
 800e088:	2f62      	cmp	r7, #98	; 0x62
 800e08a:	d80a      	bhi.n	800e0a2 <_printf_i+0x32>
 800e08c:	2f00      	cmp	r7, #0
 800e08e:	f000 80d9 	beq.w	800e244 <_printf_i+0x1d4>
 800e092:	2f58      	cmp	r7, #88	; 0x58
 800e094:	f000 80a4 	beq.w	800e1e0 <_printf_i+0x170>
 800e098:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e09c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0a0:	e03a      	b.n	800e118 <_printf_i+0xa8>
 800e0a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0a6:	2b15      	cmp	r3, #21
 800e0a8:	d8f6      	bhi.n	800e098 <_printf_i+0x28>
 800e0aa:	a001      	add	r0, pc, #4	; (adr r0, 800e0b0 <_printf_i+0x40>)
 800e0ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e0b0:	0800e109 	.word	0x0800e109
 800e0b4:	0800e11d 	.word	0x0800e11d
 800e0b8:	0800e099 	.word	0x0800e099
 800e0bc:	0800e099 	.word	0x0800e099
 800e0c0:	0800e099 	.word	0x0800e099
 800e0c4:	0800e099 	.word	0x0800e099
 800e0c8:	0800e11d 	.word	0x0800e11d
 800e0cc:	0800e099 	.word	0x0800e099
 800e0d0:	0800e099 	.word	0x0800e099
 800e0d4:	0800e099 	.word	0x0800e099
 800e0d8:	0800e099 	.word	0x0800e099
 800e0dc:	0800e22b 	.word	0x0800e22b
 800e0e0:	0800e14d 	.word	0x0800e14d
 800e0e4:	0800e20d 	.word	0x0800e20d
 800e0e8:	0800e099 	.word	0x0800e099
 800e0ec:	0800e099 	.word	0x0800e099
 800e0f0:	0800e24d 	.word	0x0800e24d
 800e0f4:	0800e099 	.word	0x0800e099
 800e0f8:	0800e14d 	.word	0x0800e14d
 800e0fc:	0800e099 	.word	0x0800e099
 800e100:	0800e099 	.word	0x0800e099
 800e104:	0800e215 	.word	0x0800e215
 800e108:	680b      	ldr	r3, [r1, #0]
 800e10a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e10e:	1d1a      	adds	r2, r3, #4
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	600a      	str	r2, [r1, #0]
 800e114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e118:	2301      	movs	r3, #1
 800e11a:	e0a4      	b.n	800e266 <_printf_i+0x1f6>
 800e11c:	6825      	ldr	r5, [r4, #0]
 800e11e:	6808      	ldr	r0, [r1, #0]
 800e120:	062e      	lsls	r6, r5, #24
 800e122:	f100 0304 	add.w	r3, r0, #4
 800e126:	d50a      	bpl.n	800e13e <_printf_i+0xce>
 800e128:	6805      	ldr	r5, [r0, #0]
 800e12a:	600b      	str	r3, [r1, #0]
 800e12c:	2d00      	cmp	r5, #0
 800e12e:	da03      	bge.n	800e138 <_printf_i+0xc8>
 800e130:	232d      	movs	r3, #45	; 0x2d
 800e132:	426d      	negs	r5, r5
 800e134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e138:	230a      	movs	r3, #10
 800e13a:	485e      	ldr	r0, [pc, #376]	; (800e2b4 <_printf_i+0x244>)
 800e13c:	e019      	b.n	800e172 <_printf_i+0x102>
 800e13e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e142:	6805      	ldr	r5, [r0, #0]
 800e144:	600b      	str	r3, [r1, #0]
 800e146:	bf18      	it	ne
 800e148:	b22d      	sxthne	r5, r5
 800e14a:	e7ef      	b.n	800e12c <_printf_i+0xbc>
 800e14c:	680b      	ldr	r3, [r1, #0]
 800e14e:	6825      	ldr	r5, [r4, #0]
 800e150:	1d18      	adds	r0, r3, #4
 800e152:	6008      	str	r0, [r1, #0]
 800e154:	0628      	lsls	r0, r5, #24
 800e156:	d501      	bpl.n	800e15c <_printf_i+0xec>
 800e158:	681d      	ldr	r5, [r3, #0]
 800e15a:	e002      	b.n	800e162 <_printf_i+0xf2>
 800e15c:	0669      	lsls	r1, r5, #25
 800e15e:	d5fb      	bpl.n	800e158 <_printf_i+0xe8>
 800e160:	881d      	ldrh	r5, [r3, #0]
 800e162:	2f6f      	cmp	r7, #111	; 0x6f
 800e164:	bf0c      	ite	eq
 800e166:	2308      	moveq	r3, #8
 800e168:	230a      	movne	r3, #10
 800e16a:	4852      	ldr	r0, [pc, #328]	; (800e2b4 <_printf_i+0x244>)
 800e16c:	2100      	movs	r1, #0
 800e16e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e172:	6866      	ldr	r6, [r4, #4]
 800e174:	2e00      	cmp	r6, #0
 800e176:	bfa8      	it	ge
 800e178:	6821      	ldrge	r1, [r4, #0]
 800e17a:	60a6      	str	r6, [r4, #8]
 800e17c:	bfa4      	itt	ge
 800e17e:	f021 0104 	bicge.w	r1, r1, #4
 800e182:	6021      	strge	r1, [r4, #0]
 800e184:	b90d      	cbnz	r5, 800e18a <_printf_i+0x11a>
 800e186:	2e00      	cmp	r6, #0
 800e188:	d04d      	beq.n	800e226 <_printf_i+0x1b6>
 800e18a:	4616      	mov	r6, r2
 800e18c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e190:	fb03 5711 	mls	r7, r3, r1, r5
 800e194:	5dc7      	ldrb	r7, [r0, r7]
 800e196:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e19a:	462f      	mov	r7, r5
 800e19c:	42bb      	cmp	r3, r7
 800e19e:	460d      	mov	r5, r1
 800e1a0:	d9f4      	bls.n	800e18c <_printf_i+0x11c>
 800e1a2:	2b08      	cmp	r3, #8
 800e1a4:	d10b      	bne.n	800e1be <_printf_i+0x14e>
 800e1a6:	6823      	ldr	r3, [r4, #0]
 800e1a8:	07df      	lsls	r7, r3, #31
 800e1aa:	d508      	bpl.n	800e1be <_printf_i+0x14e>
 800e1ac:	6923      	ldr	r3, [r4, #16]
 800e1ae:	6861      	ldr	r1, [r4, #4]
 800e1b0:	4299      	cmp	r1, r3
 800e1b2:	bfde      	ittt	le
 800e1b4:	2330      	movle	r3, #48	; 0x30
 800e1b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e1ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e1be:	1b92      	subs	r2, r2, r6
 800e1c0:	6122      	str	r2, [r4, #16]
 800e1c2:	464b      	mov	r3, r9
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4640      	mov	r0, r8
 800e1c8:	f8cd a000 	str.w	sl, [sp]
 800e1cc:	aa03      	add	r2, sp, #12
 800e1ce:	f7ff fedf 	bl	800df90 <_printf_common>
 800e1d2:	3001      	adds	r0, #1
 800e1d4:	d14c      	bne.n	800e270 <_printf_i+0x200>
 800e1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1da:	b004      	add	sp, #16
 800e1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1e0:	4834      	ldr	r0, [pc, #208]	; (800e2b4 <_printf_i+0x244>)
 800e1e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e1e6:	680e      	ldr	r6, [r1, #0]
 800e1e8:	6823      	ldr	r3, [r4, #0]
 800e1ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800e1ee:	061f      	lsls	r7, r3, #24
 800e1f0:	600e      	str	r6, [r1, #0]
 800e1f2:	d514      	bpl.n	800e21e <_printf_i+0x1ae>
 800e1f4:	07d9      	lsls	r1, r3, #31
 800e1f6:	bf44      	itt	mi
 800e1f8:	f043 0320 	orrmi.w	r3, r3, #32
 800e1fc:	6023      	strmi	r3, [r4, #0]
 800e1fe:	b91d      	cbnz	r5, 800e208 <_printf_i+0x198>
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	f023 0320 	bic.w	r3, r3, #32
 800e206:	6023      	str	r3, [r4, #0]
 800e208:	2310      	movs	r3, #16
 800e20a:	e7af      	b.n	800e16c <_printf_i+0xfc>
 800e20c:	6823      	ldr	r3, [r4, #0]
 800e20e:	f043 0320 	orr.w	r3, r3, #32
 800e212:	6023      	str	r3, [r4, #0]
 800e214:	2378      	movs	r3, #120	; 0x78
 800e216:	4828      	ldr	r0, [pc, #160]	; (800e2b8 <_printf_i+0x248>)
 800e218:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e21c:	e7e3      	b.n	800e1e6 <_printf_i+0x176>
 800e21e:	065e      	lsls	r6, r3, #25
 800e220:	bf48      	it	mi
 800e222:	b2ad      	uxthmi	r5, r5
 800e224:	e7e6      	b.n	800e1f4 <_printf_i+0x184>
 800e226:	4616      	mov	r6, r2
 800e228:	e7bb      	b.n	800e1a2 <_printf_i+0x132>
 800e22a:	680b      	ldr	r3, [r1, #0]
 800e22c:	6826      	ldr	r6, [r4, #0]
 800e22e:	1d1d      	adds	r5, r3, #4
 800e230:	6960      	ldr	r0, [r4, #20]
 800e232:	600d      	str	r5, [r1, #0]
 800e234:	0635      	lsls	r5, r6, #24
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	d501      	bpl.n	800e23e <_printf_i+0x1ce>
 800e23a:	6018      	str	r0, [r3, #0]
 800e23c:	e002      	b.n	800e244 <_printf_i+0x1d4>
 800e23e:	0671      	lsls	r1, r6, #25
 800e240:	d5fb      	bpl.n	800e23a <_printf_i+0x1ca>
 800e242:	8018      	strh	r0, [r3, #0]
 800e244:	2300      	movs	r3, #0
 800e246:	4616      	mov	r6, r2
 800e248:	6123      	str	r3, [r4, #16]
 800e24a:	e7ba      	b.n	800e1c2 <_printf_i+0x152>
 800e24c:	680b      	ldr	r3, [r1, #0]
 800e24e:	1d1a      	adds	r2, r3, #4
 800e250:	600a      	str	r2, [r1, #0]
 800e252:	681e      	ldr	r6, [r3, #0]
 800e254:	2100      	movs	r1, #0
 800e256:	4630      	mov	r0, r6
 800e258:	6862      	ldr	r2, [r4, #4]
 800e25a:	f000 fb4b 	bl	800e8f4 <memchr>
 800e25e:	b108      	cbz	r0, 800e264 <_printf_i+0x1f4>
 800e260:	1b80      	subs	r0, r0, r6
 800e262:	6060      	str	r0, [r4, #4]
 800e264:	6863      	ldr	r3, [r4, #4]
 800e266:	6123      	str	r3, [r4, #16]
 800e268:	2300      	movs	r3, #0
 800e26a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e26e:	e7a8      	b.n	800e1c2 <_printf_i+0x152>
 800e270:	4632      	mov	r2, r6
 800e272:	4649      	mov	r1, r9
 800e274:	4640      	mov	r0, r8
 800e276:	6923      	ldr	r3, [r4, #16]
 800e278:	47d0      	blx	sl
 800e27a:	3001      	adds	r0, #1
 800e27c:	d0ab      	beq.n	800e1d6 <_printf_i+0x166>
 800e27e:	6823      	ldr	r3, [r4, #0]
 800e280:	079b      	lsls	r3, r3, #30
 800e282:	d413      	bmi.n	800e2ac <_printf_i+0x23c>
 800e284:	68e0      	ldr	r0, [r4, #12]
 800e286:	9b03      	ldr	r3, [sp, #12]
 800e288:	4298      	cmp	r0, r3
 800e28a:	bfb8      	it	lt
 800e28c:	4618      	movlt	r0, r3
 800e28e:	e7a4      	b.n	800e1da <_printf_i+0x16a>
 800e290:	2301      	movs	r3, #1
 800e292:	4632      	mov	r2, r6
 800e294:	4649      	mov	r1, r9
 800e296:	4640      	mov	r0, r8
 800e298:	47d0      	blx	sl
 800e29a:	3001      	adds	r0, #1
 800e29c:	d09b      	beq.n	800e1d6 <_printf_i+0x166>
 800e29e:	3501      	adds	r5, #1
 800e2a0:	68e3      	ldr	r3, [r4, #12]
 800e2a2:	9903      	ldr	r1, [sp, #12]
 800e2a4:	1a5b      	subs	r3, r3, r1
 800e2a6:	42ab      	cmp	r3, r5
 800e2a8:	dcf2      	bgt.n	800e290 <_printf_i+0x220>
 800e2aa:	e7eb      	b.n	800e284 <_printf_i+0x214>
 800e2ac:	2500      	movs	r5, #0
 800e2ae:	f104 0619 	add.w	r6, r4, #25
 800e2b2:	e7f5      	b.n	800e2a0 <_printf_i+0x230>
 800e2b4:	0800ef5d 	.word	0x0800ef5d
 800e2b8:	0800ef6e 	.word	0x0800ef6e

0800e2bc <nan>:
 800e2bc:	2000      	movs	r0, #0
 800e2be:	4901      	ldr	r1, [pc, #4]	; (800e2c4 <nan+0x8>)
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop
 800e2c4:	7ff80000 	.word	0x7ff80000

0800e2c8 <_sbrk_r>:
 800e2c8:	b538      	push	{r3, r4, r5, lr}
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	4d05      	ldr	r5, [pc, #20]	; (800e2e4 <_sbrk_r+0x1c>)
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	4608      	mov	r0, r1
 800e2d2:	602b      	str	r3, [r5, #0]
 800e2d4:	f7f4 feee 	bl	80030b4 <_sbrk>
 800e2d8:	1c43      	adds	r3, r0, #1
 800e2da:	d102      	bne.n	800e2e2 <_sbrk_r+0x1a>
 800e2dc:	682b      	ldr	r3, [r5, #0]
 800e2de:	b103      	cbz	r3, 800e2e2 <_sbrk_r+0x1a>
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	bd38      	pop	{r3, r4, r5, pc}
 800e2e4:	200013ac 	.word	0x200013ac

0800e2e8 <strncmp>:
 800e2e8:	b510      	push	{r4, lr}
 800e2ea:	b16a      	cbz	r2, 800e308 <strncmp+0x20>
 800e2ec:	3901      	subs	r1, #1
 800e2ee:	1884      	adds	r4, r0, r2
 800e2f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e2f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d103      	bne.n	800e304 <strncmp+0x1c>
 800e2fc:	42a0      	cmp	r0, r4
 800e2fe:	d001      	beq.n	800e304 <strncmp+0x1c>
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1f5      	bne.n	800e2f0 <strncmp+0x8>
 800e304:	1a98      	subs	r0, r3, r2
 800e306:	bd10      	pop	{r4, pc}
 800e308:	4610      	mov	r0, r2
 800e30a:	e7fc      	b.n	800e306 <strncmp+0x1e>

0800e30c <__swbuf_r>:
 800e30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30e:	460e      	mov	r6, r1
 800e310:	4614      	mov	r4, r2
 800e312:	4605      	mov	r5, r0
 800e314:	b118      	cbz	r0, 800e31e <__swbuf_r+0x12>
 800e316:	6983      	ldr	r3, [r0, #24]
 800e318:	b90b      	cbnz	r3, 800e31e <__swbuf_r+0x12>
 800e31a:	f000 f9e7 	bl	800e6ec <__sinit>
 800e31e:	4b21      	ldr	r3, [pc, #132]	; (800e3a4 <__swbuf_r+0x98>)
 800e320:	429c      	cmp	r4, r3
 800e322:	d12b      	bne.n	800e37c <__swbuf_r+0x70>
 800e324:	686c      	ldr	r4, [r5, #4]
 800e326:	69a3      	ldr	r3, [r4, #24]
 800e328:	60a3      	str	r3, [r4, #8]
 800e32a:	89a3      	ldrh	r3, [r4, #12]
 800e32c:	071a      	lsls	r2, r3, #28
 800e32e:	d52f      	bpl.n	800e390 <__swbuf_r+0x84>
 800e330:	6923      	ldr	r3, [r4, #16]
 800e332:	b36b      	cbz	r3, 800e390 <__swbuf_r+0x84>
 800e334:	6923      	ldr	r3, [r4, #16]
 800e336:	6820      	ldr	r0, [r4, #0]
 800e338:	b2f6      	uxtb	r6, r6
 800e33a:	1ac0      	subs	r0, r0, r3
 800e33c:	6963      	ldr	r3, [r4, #20]
 800e33e:	4637      	mov	r7, r6
 800e340:	4283      	cmp	r3, r0
 800e342:	dc04      	bgt.n	800e34e <__swbuf_r+0x42>
 800e344:	4621      	mov	r1, r4
 800e346:	4628      	mov	r0, r5
 800e348:	f000 f93c 	bl	800e5c4 <_fflush_r>
 800e34c:	bb30      	cbnz	r0, 800e39c <__swbuf_r+0x90>
 800e34e:	68a3      	ldr	r3, [r4, #8]
 800e350:	3001      	adds	r0, #1
 800e352:	3b01      	subs	r3, #1
 800e354:	60a3      	str	r3, [r4, #8]
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	1c5a      	adds	r2, r3, #1
 800e35a:	6022      	str	r2, [r4, #0]
 800e35c:	701e      	strb	r6, [r3, #0]
 800e35e:	6963      	ldr	r3, [r4, #20]
 800e360:	4283      	cmp	r3, r0
 800e362:	d004      	beq.n	800e36e <__swbuf_r+0x62>
 800e364:	89a3      	ldrh	r3, [r4, #12]
 800e366:	07db      	lsls	r3, r3, #31
 800e368:	d506      	bpl.n	800e378 <__swbuf_r+0x6c>
 800e36a:	2e0a      	cmp	r6, #10
 800e36c:	d104      	bne.n	800e378 <__swbuf_r+0x6c>
 800e36e:	4621      	mov	r1, r4
 800e370:	4628      	mov	r0, r5
 800e372:	f000 f927 	bl	800e5c4 <_fflush_r>
 800e376:	b988      	cbnz	r0, 800e39c <__swbuf_r+0x90>
 800e378:	4638      	mov	r0, r7
 800e37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e37c:	4b0a      	ldr	r3, [pc, #40]	; (800e3a8 <__swbuf_r+0x9c>)
 800e37e:	429c      	cmp	r4, r3
 800e380:	d101      	bne.n	800e386 <__swbuf_r+0x7a>
 800e382:	68ac      	ldr	r4, [r5, #8]
 800e384:	e7cf      	b.n	800e326 <__swbuf_r+0x1a>
 800e386:	4b09      	ldr	r3, [pc, #36]	; (800e3ac <__swbuf_r+0xa0>)
 800e388:	429c      	cmp	r4, r3
 800e38a:	bf08      	it	eq
 800e38c:	68ec      	ldreq	r4, [r5, #12]
 800e38e:	e7ca      	b.n	800e326 <__swbuf_r+0x1a>
 800e390:	4621      	mov	r1, r4
 800e392:	4628      	mov	r0, r5
 800e394:	f000 f81a 	bl	800e3cc <__swsetup_r>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d0cb      	beq.n	800e334 <__swbuf_r+0x28>
 800e39c:	f04f 37ff 	mov.w	r7, #4294967295
 800e3a0:	e7ea      	b.n	800e378 <__swbuf_r+0x6c>
 800e3a2:	bf00      	nop
 800e3a4:	0800f0a0 	.word	0x0800f0a0
 800e3a8:	0800f0c0 	.word	0x0800f0c0
 800e3ac:	0800f080 	.word	0x0800f080

0800e3b0 <__ascii_wctomb>:
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	4608      	mov	r0, r1
 800e3b4:	b141      	cbz	r1, 800e3c8 <__ascii_wctomb+0x18>
 800e3b6:	2aff      	cmp	r2, #255	; 0xff
 800e3b8:	d904      	bls.n	800e3c4 <__ascii_wctomb+0x14>
 800e3ba:	228a      	movs	r2, #138	; 0x8a
 800e3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c0:	601a      	str	r2, [r3, #0]
 800e3c2:	4770      	bx	lr
 800e3c4:	2001      	movs	r0, #1
 800e3c6:	700a      	strb	r2, [r1, #0]
 800e3c8:	4770      	bx	lr
	...

0800e3cc <__swsetup_r>:
 800e3cc:	4b32      	ldr	r3, [pc, #200]	; (800e498 <__swsetup_r+0xcc>)
 800e3ce:	b570      	push	{r4, r5, r6, lr}
 800e3d0:	681d      	ldr	r5, [r3, #0]
 800e3d2:	4606      	mov	r6, r0
 800e3d4:	460c      	mov	r4, r1
 800e3d6:	b125      	cbz	r5, 800e3e2 <__swsetup_r+0x16>
 800e3d8:	69ab      	ldr	r3, [r5, #24]
 800e3da:	b913      	cbnz	r3, 800e3e2 <__swsetup_r+0x16>
 800e3dc:	4628      	mov	r0, r5
 800e3de:	f000 f985 	bl	800e6ec <__sinit>
 800e3e2:	4b2e      	ldr	r3, [pc, #184]	; (800e49c <__swsetup_r+0xd0>)
 800e3e4:	429c      	cmp	r4, r3
 800e3e6:	d10f      	bne.n	800e408 <__swsetup_r+0x3c>
 800e3e8:	686c      	ldr	r4, [r5, #4]
 800e3ea:	89a3      	ldrh	r3, [r4, #12]
 800e3ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3f0:	0719      	lsls	r1, r3, #28
 800e3f2:	d42c      	bmi.n	800e44e <__swsetup_r+0x82>
 800e3f4:	06dd      	lsls	r5, r3, #27
 800e3f6:	d411      	bmi.n	800e41c <__swsetup_r+0x50>
 800e3f8:	2309      	movs	r3, #9
 800e3fa:	6033      	str	r3, [r6, #0]
 800e3fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e400:	f04f 30ff 	mov.w	r0, #4294967295
 800e404:	81a3      	strh	r3, [r4, #12]
 800e406:	e03e      	b.n	800e486 <__swsetup_r+0xba>
 800e408:	4b25      	ldr	r3, [pc, #148]	; (800e4a0 <__swsetup_r+0xd4>)
 800e40a:	429c      	cmp	r4, r3
 800e40c:	d101      	bne.n	800e412 <__swsetup_r+0x46>
 800e40e:	68ac      	ldr	r4, [r5, #8]
 800e410:	e7eb      	b.n	800e3ea <__swsetup_r+0x1e>
 800e412:	4b24      	ldr	r3, [pc, #144]	; (800e4a4 <__swsetup_r+0xd8>)
 800e414:	429c      	cmp	r4, r3
 800e416:	bf08      	it	eq
 800e418:	68ec      	ldreq	r4, [r5, #12]
 800e41a:	e7e6      	b.n	800e3ea <__swsetup_r+0x1e>
 800e41c:	0758      	lsls	r0, r3, #29
 800e41e:	d512      	bpl.n	800e446 <__swsetup_r+0x7a>
 800e420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e422:	b141      	cbz	r1, 800e436 <__swsetup_r+0x6a>
 800e424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e428:	4299      	cmp	r1, r3
 800e42a:	d002      	beq.n	800e432 <__swsetup_r+0x66>
 800e42c:	4630      	mov	r0, r6
 800e42e:	f7ff fbb1 	bl	800db94 <_free_r>
 800e432:	2300      	movs	r3, #0
 800e434:	6363      	str	r3, [r4, #52]	; 0x34
 800e436:	89a3      	ldrh	r3, [r4, #12]
 800e438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e43c:	81a3      	strh	r3, [r4, #12]
 800e43e:	2300      	movs	r3, #0
 800e440:	6063      	str	r3, [r4, #4]
 800e442:	6923      	ldr	r3, [r4, #16]
 800e444:	6023      	str	r3, [r4, #0]
 800e446:	89a3      	ldrh	r3, [r4, #12]
 800e448:	f043 0308 	orr.w	r3, r3, #8
 800e44c:	81a3      	strh	r3, [r4, #12]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	b94b      	cbnz	r3, 800e466 <__swsetup_r+0x9a>
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e45c:	d003      	beq.n	800e466 <__swsetup_r+0x9a>
 800e45e:	4621      	mov	r1, r4
 800e460:	4630      	mov	r0, r6
 800e462:	f000 fa07 	bl	800e874 <__smakebuf_r>
 800e466:	89a0      	ldrh	r0, [r4, #12]
 800e468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e46c:	f010 0301 	ands.w	r3, r0, #1
 800e470:	d00a      	beq.n	800e488 <__swsetup_r+0xbc>
 800e472:	2300      	movs	r3, #0
 800e474:	60a3      	str	r3, [r4, #8]
 800e476:	6963      	ldr	r3, [r4, #20]
 800e478:	425b      	negs	r3, r3
 800e47a:	61a3      	str	r3, [r4, #24]
 800e47c:	6923      	ldr	r3, [r4, #16]
 800e47e:	b943      	cbnz	r3, 800e492 <__swsetup_r+0xc6>
 800e480:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e484:	d1ba      	bne.n	800e3fc <__swsetup_r+0x30>
 800e486:	bd70      	pop	{r4, r5, r6, pc}
 800e488:	0781      	lsls	r1, r0, #30
 800e48a:	bf58      	it	pl
 800e48c:	6963      	ldrpl	r3, [r4, #20]
 800e48e:	60a3      	str	r3, [r4, #8]
 800e490:	e7f4      	b.n	800e47c <__swsetup_r+0xb0>
 800e492:	2000      	movs	r0, #0
 800e494:	e7f7      	b.n	800e486 <__swsetup_r+0xba>
 800e496:	bf00      	nop
 800e498:	200004e8 	.word	0x200004e8
 800e49c:	0800f0a0 	.word	0x0800f0a0
 800e4a0:	0800f0c0 	.word	0x0800f0c0
 800e4a4:	0800f080 	.word	0x0800f080

0800e4a8 <abort>:
 800e4a8:	2006      	movs	r0, #6
 800e4aa:	b508      	push	{r3, lr}
 800e4ac:	f000 fa64 	bl	800e978 <raise>
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	f7f4 fd8c 	bl	8002fce <_exit>
	...

0800e4b8 <__sflush_r>:
 800e4b8:	898a      	ldrh	r2, [r1, #12]
 800e4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4be:	4605      	mov	r5, r0
 800e4c0:	0710      	lsls	r0, r2, #28
 800e4c2:	460c      	mov	r4, r1
 800e4c4:	d458      	bmi.n	800e578 <__sflush_r+0xc0>
 800e4c6:	684b      	ldr	r3, [r1, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	dc05      	bgt.n	800e4d8 <__sflush_r+0x20>
 800e4cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	dc02      	bgt.n	800e4d8 <__sflush_r+0x20>
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4da:	2e00      	cmp	r6, #0
 800e4dc:	d0f9      	beq.n	800e4d2 <__sflush_r+0x1a>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4e4:	682f      	ldr	r7, [r5, #0]
 800e4e6:	602b      	str	r3, [r5, #0]
 800e4e8:	d032      	beq.n	800e550 <__sflush_r+0x98>
 800e4ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4ec:	89a3      	ldrh	r3, [r4, #12]
 800e4ee:	075a      	lsls	r2, r3, #29
 800e4f0:	d505      	bpl.n	800e4fe <__sflush_r+0x46>
 800e4f2:	6863      	ldr	r3, [r4, #4]
 800e4f4:	1ac0      	subs	r0, r0, r3
 800e4f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4f8:	b10b      	cbz	r3, 800e4fe <__sflush_r+0x46>
 800e4fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4fc:	1ac0      	subs	r0, r0, r3
 800e4fe:	2300      	movs	r3, #0
 800e500:	4602      	mov	r2, r0
 800e502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e504:	4628      	mov	r0, r5
 800e506:	6a21      	ldr	r1, [r4, #32]
 800e508:	47b0      	blx	r6
 800e50a:	1c43      	adds	r3, r0, #1
 800e50c:	89a3      	ldrh	r3, [r4, #12]
 800e50e:	d106      	bne.n	800e51e <__sflush_r+0x66>
 800e510:	6829      	ldr	r1, [r5, #0]
 800e512:	291d      	cmp	r1, #29
 800e514:	d82c      	bhi.n	800e570 <__sflush_r+0xb8>
 800e516:	4a2a      	ldr	r2, [pc, #168]	; (800e5c0 <__sflush_r+0x108>)
 800e518:	40ca      	lsrs	r2, r1
 800e51a:	07d6      	lsls	r6, r2, #31
 800e51c:	d528      	bpl.n	800e570 <__sflush_r+0xb8>
 800e51e:	2200      	movs	r2, #0
 800e520:	6062      	str	r2, [r4, #4]
 800e522:	6922      	ldr	r2, [r4, #16]
 800e524:	04d9      	lsls	r1, r3, #19
 800e526:	6022      	str	r2, [r4, #0]
 800e528:	d504      	bpl.n	800e534 <__sflush_r+0x7c>
 800e52a:	1c42      	adds	r2, r0, #1
 800e52c:	d101      	bne.n	800e532 <__sflush_r+0x7a>
 800e52e:	682b      	ldr	r3, [r5, #0]
 800e530:	b903      	cbnz	r3, 800e534 <__sflush_r+0x7c>
 800e532:	6560      	str	r0, [r4, #84]	; 0x54
 800e534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e536:	602f      	str	r7, [r5, #0]
 800e538:	2900      	cmp	r1, #0
 800e53a:	d0ca      	beq.n	800e4d2 <__sflush_r+0x1a>
 800e53c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e540:	4299      	cmp	r1, r3
 800e542:	d002      	beq.n	800e54a <__sflush_r+0x92>
 800e544:	4628      	mov	r0, r5
 800e546:	f7ff fb25 	bl	800db94 <_free_r>
 800e54a:	2000      	movs	r0, #0
 800e54c:	6360      	str	r0, [r4, #52]	; 0x34
 800e54e:	e7c1      	b.n	800e4d4 <__sflush_r+0x1c>
 800e550:	6a21      	ldr	r1, [r4, #32]
 800e552:	2301      	movs	r3, #1
 800e554:	4628      	mov	r0, r5
 800e556:	47b0      	blx	r6
 800e558:	1c41      	adds	r1, r0, #1
 800e55a:	d1c7      	bne.n	800e4ec <__sflush_r+0x34>
 800e55c:	682b      	ldr	r3, [r5, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d0c4      	beq.n	800e4ec <__sflush_r+0x34>
 800e562:	2b1d      	cmp	r3, #29
 800e564:	d001      	beq.n	800e56a <__sflush_r+0xb2>
 800e566:	2b16      	cmp	r3, #22
 800e568:	d101      	bne.n	800e56e <__sflush_r+0xb6>
 800e56a:	602f      	str	r7, [r5, #0]
 800e56c:	e7b1      	b.n	800e4d2 <__sflush_r+0x1a>
 800e56e:	89a3      	ldrh	r3, [r4, #12]
 800e570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e574:	81a3      	strh	r3, [r4, #12]
 800e576:	e7ad      	b.n	800e4d4 <__sflush_r+0x1c>
 800e578:	690f      	ldr	r7, [r1, #16]
 800e57a:	2f00      	cmp	r7, #0
 800e57c:	d0a9      	beq.n	800e4d2 <__sflush_r+0x1a>
 800e57e:	0793      	lsls	r3, r2, #30
 800e580:	bf18      	it	ne
 800e582:	2300      	movne	r3, #0
 800e584:	680e      	ldr	r6, [r1, #0]
 800e586:	bf08      	it	eq
 800e588:	694b      	ldreq	r3, [r1, #20]
 800e58a:	eba6 0807 	sub.w	r8, r6, r7
 800e58e:	600f      	str	r7, [r1, #0]
 800e590:	608b      	str	r3, [r1, #8]
 800e592:	f1b8 0f00 	cmp.w	r8, #0
 800e596:	dd9c      	ble.n	800e4d2 <__sflush_r+0x1a>
 800e598:	4643      	mov	r3, r8
 800e59a:	463a      	mov	r2, r7
 800e59c:	4628      	mov	r0, r5
 800e59e:	6a21      	ldr	r1, [r4, #32]
 800e5a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5a2:	47b0      	blx	r6
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	dc06      	bgt.n	800e5b6 <__sflush_r+0xfe>
 800e5a8:	89a3      	ldrh	r3, [r4, #12]
 800e5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5b2:	81a3      	strh	r3, [r4, #12]
 800e5b4:	e78e      	b.n	800e4d4 <__sflush_r+0x1c>
 800e5b6:	4407      	add	r7, r0
 800e5b8:	eba8 0800 	sub.w	r8, r8, r0
 800e5bc:	e7e9      	b.n	800e592 <__sflush_r+0xda>
 800e5be:	bf00      	nop
 800e5c0:	20400001 	.word	0x20400001

0800e5c4 <_fflush_r>:
 800e5c4:	b538      	push	{r3, r4, r5, lr}
 800e5c6:	690b      	ldr	r3, [r1, #16]
 800e5c8:	4605      	mov	r5, r0
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	b913      	cbnz	r3, 800e5d4 <_fflush_r+0x10>
 800e5ce:	2500      	movs	r5, #0
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	bd38      	pop	{r3, r4, r5, pc}
 800e5d4:	b118      	cbz	r0, 800e5de <_fflush_r+0x1a>
 800e5d6:	6983      	ldr	r3, [r0, #24]
 800e5d8:	b90b      	cbnz	r3, 800e5de <_fflush_r+0x1a>
 800e5da:	f000 f887 	bl	800e6ec <__sinit>
 800e5de:	4b14      	ldr	r3, [pc, #80]	; (800e630 <_fflush_r+0x6c>)
 800e5e0:	429c      	cmp	r4, r3
 800e5e2:	d11b      	bne.n	800e61c <_fflush_r+0x58>
 800e5e4:	686c      	ldr	r4, [r5, #4]
 800e5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d0ef      	beq.n	800e5ce <_fflush_r+0xa>
 800e5ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5f0:	07d0      	lsls	r0, r2, #31
 800e5f2:	d404      	bmi.n	800e5fe <_fflush_r+0x3a>
 800e5f4:	0599      	lsls	r1, r3, #22
 800e5f6:	d402      	bmi.n	800e5fe <_fflush_r+0x3a>
 800e5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5fa:	f000 f915 	bl	800e828 <__retarget_lock_acquire_recursive>
 800e5fe:	4628      	mov	r0, r5
 800e600:	4621      	mov	r1, r4
 800e602:	f7ff ff59 	bl	800e4b8 <__sflush_r>
 800e606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e608:	4605      	mov	r5, r0
 800e60a:	07da      	lsls	r2, r3, #31
 800e60c:	d4e0      	bmi.n	800e5d0 <_fflush_r+0xc>
 800e60e:	89a3      	ldrh	r3, [r4, #12]
 800e610:	059b      	lsls	r3, r3, #22
 800e612:	d4dd      	bmi.n	800e5d0 <_fflush_r+0xc>
 800e614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e616:	f000 f908 	bl	800e82a <__retarget_lock_release_recursive>
 800e61a:	e7d9      	b.n	800e5d0 <_fflush_r+0xc>
 800e61c:	4b05      	ldr	r3, [pc, #20]	; (800e634 <_fflush_r+0x70>)
 800e61e:	429c      	cmp	r4, r3
 800e620:	d101      	bne.n	800e626 <_fflush_r+0x62>
 800e622:	68ac      	ldr	r4, [r5, #8]
 800e624:	e7df      	b.n	800e5e6 <_fflush_r+0x22>
 800e626:	4b04      	ldr	r3, [pc, #16]	; (800e638 <_fflush_r+0x74>)
 800e628:	429c      	cmp	r4, r3
 800e62a:	bf08      	it	eq
 800e62c:	68ec      	ldreq	r4, [r5, #12]
 800e62e:	e7da      	b.n	800e5e6 <_fflush_r+0x22>
 800e630:	0800f0a0 	.word	0x0800f0a0
 800e634:	0800f0c0 	.word	0x0800f0c0
 800e638:	0800f080 	.word	0x0800f080

0800e63c <std>:
 800e63c:	2300      	movs	r3, #0
 800e63e:	b510      	push	{r4, lr}
 800e640:	4604      	mov	r4, r0
 800e642:	e9c0 3300 	strd	r3, r3, [r0]
 800e646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e64a:	6083      	str	r3, [r0, #8]
 800e64c:	8181      	strh	r1, [r0, #12]
 800e64e:	6643      	str	r3, [r0, #100]	; 0x64
 800e650:	81c2      	strh	r2, [r0, #14]
 800e652:	6183      	str	r3, [r0, #24]
 800e654:	4619      	mov	r1, r3
 800e656:	2208      	movs	r2, #8
 800e658:	305c      	adds	r0, #92	; 0x5c
 800e65a:	f7fd fb95 	bl	800bd88 <memset>
 800e65e:	4b05      	ldr	r3, [pc, #20]	; (800e674 <std+0x38>)
 800e660:	6224      	str	r4, [r4, #32]
 800e662:	6263      	str	r3, [r4, #36]	; 0x24
 800e664:	4b04      	ldr	r3, [pc, #16]	; (800e678 <std+0x3c>)
 800e666:	62a3      	str	r3, [r4, #40]	; 0x28
 800e668:	4b04      	ldr	r3, [pc, #16]	; (800e67c <std+0x40>)
 800e66a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e66c:	4b04      	ldr	r3, [pc, #16]	; (800e680 <std+0x44>)
 800e66e:	6323      	str	r3, [r4, #48]	; 0x30
 800e670:	bd10      	pop	{r4, pc}
 800e672:	bf00      	nop
 800e674:	0800e9b1 	.word	0x0800e9b1
 800e678:	0800e9d3 	.word	0x0800e9d3
 800e67c:	0800ea0b 	.word	0x0800ea0b
 800e680:	0800ea2f 	.word	0x0800ea2f

0800e684 <_cleanup_r>:
 800e684:	4901      	ldr	r1, [pc, #4]	; (800e68c <_cleanup_r+0x8>)
 800e686:	f000 b8af 	b.w	800e7e8 <_fwalk_reent>
 800e68a:	bf00      	nop
 800e68c:	0800e5c5 	.word	0x0800e5c5

0800e690 <__sfmoreglue>:
 800e690:	b570      	push	{r4, r5, r6, lr}
 800e692:	2568      	movs	r5, #104	; 0x68
 800e694:	1e4a      	subs	r2, r1, #1
 800e696:	4355      	muls	r5, r2
 800e698:	460e      	mov	r6, r1
 800e69a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e69e:	f7ff fac5 	bl	800dc2c <_malloc_r>
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	b140      	cbz	r0, 800e6b8 <__sfmoreglue+0x28>
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	e9c0 1600 	strd	r1, r6, [r0]
 800e6ac:	300c      	adds	r0, #12
 800e6ae:	60a0      	str	r0, [r4, #8]
 800e6b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e6b4:	f7fd fb68 	bl	800bd88 <memset>
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	bd70      	pop	{r4, r5, r6, pc}

0800e6bc <__sfp_lock_acquire>:
 800e6bc:	4801      	ldr	r0, [pc, #4]	; (800e6c4 <__sfp_lock_acquire+0x8>)
 800e6be:	f000 b8b3 	b.w	800e828 <__retarget_lock_acquire_recursive>
 800e6c2:	bf00      	nop
 800e6c4:	200013a8 	.word	0x200013a8

0800e6c8 <__sfp_lock_release>:
 800e6c8:	4801      	ldr	r0, [pc, #4]	; (800e6d0 <__sfp_lock_release+0x8>)
 800e6ca:	f000 b8ae 	b.w	800e82a <__retarget_lock_release_recursive>
 800e6ce:	bf00      	nop
 800e6d0:	200013a8 	.word	0x200013a8

0800e6d4 <__sinit_lock_acquire>:
 800e6d4:	4801      	ldr	r0, [pc, #4]	; (800e6dc <__sinit_lock_acquire+0x8>)
 800e6d6:	f000 b8a7 	b.w	800e828 <__retarget_lock_acquire_recursive>
 800e6da:	bf00      	nop
 800e6dc:	200013a3 	.word	0x200013a3

0800e6e0 <__sinit_lock_release>:
 800e6e0:	4801      	ldr	r0, [pc, #4]	; (800e6e8 <__sinit_lock_release+0x8>)
 800e6e2:	f000 b8a2 	b.w	800e82a <__retarget_lock_release_recursive>
 800e6e6:	bf00      	nop
 800e6e8:	200013a3 	.word	0x200013a3

0800e6ec <__sinit>:
 800e6ec:	b510      	push	{r4, lr}
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	f7ff fff0 	bl	800e6d4 <__sinit_lock_acquire>
 800e6f4:	69a3      	ldr	r3, [r4, #24]
 800e6f6:	b11b      	cbz	r3, 800e700 <__sinit+0x14>
 800e6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6fc:	f7ff bff0 	b.w	800e6e0 <__sinit_lock_release>
 800e700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e704:	6523      	str	r3, [r4, #80]	; 0x50
 800e706:	4b13      	ldr	r3, [pc, #76]	; (800e754 <__sinit+0x68>)
 800e708:	4a13      	ldr	r2, [pc, #76]	; (800e758 <__sinit+0x6c>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e70e:	42a3      	cmp	r3, r4
 800e710:	bf08      	it	eq
 800e712:	2301      	moveq	r3, #1
 800e714:	4620      	mov	r0, r4
 800e716:	bf08      	it	eq
 800e718:	61a3      	streq	r3, [r4, #24]
 800e71a:	f000 f81f 	bl	800e75c <__sfp>
 800e71e:	6060      	str	r0, [r4, #4]
 800e720:	4620      	mov	r0, r4
 800e722:	f000 f81b 	bl	800e75c <__sfp>
 800e726:	60a0      	str	r0, [r4, #8]
 800e728:	4620      	mov	r0, r4
 800e72a:	f000 f817 	bl	800e75c <__sfp>
 800e72e:	2200      	movs	r2, #0
 800e730:	2104      	movs	r1, #4
 800e732:	60e0      	str	r0, [r4, #12]
 800e734:	6860      	ldr	r0, [r4, #4]
 800e736:	f7ff ff81 	bl	800e63c <std>
 800e73a:	2201      	movs	r2, #1
 800e73c:	2109      	movs	r1, #9
 800e73e:	68a0      	ldr	r0, [r4, #8]
 800e740:	f7ff ff7c 	bl	800e63c <std>
 800e744:	2202      	movs	r2, #2
 800e746:	2112      	movs	r1, #18
 800e748:	68e0      	ldr	r0, [r4, #12]
 800e74a:	f7ff ff77 	bl	800e63c <std>
 800e74e:	2301      	movs	r3, #1
 800e750:	61a3      	str	r3, [r4, #24]
 800e752:	e7d1      	b.n	800e6f8 <__sinit+0xc>
 800e754:	0800ec48 	.word	0x0800ec48
 800e758:	0800e685 	.word	0x0800e685

0800e75c <__sfp>:
 800e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75e:	4607      	mov	r7, r0
 800e760:	f7ff ffac 	bl	800e6bc <__sfp_lock_acquire>
 800e764:	4b1e      	ldr	r3, [pc, #120]	; (800e7e0 <__sfp+0x84>)
 800e766:	681e      	ldr	r6, [r3, #0]
 800e768:	69b3      	ldr	r3, [r6, #24]
 800e76a:	b913      	cbnz	r3, 800e772 <__sfp+0x16>
 800e76c:	4630      	mov	r0, r6
 800e76e:	f7ff ffbd 	bl	800e6ec <__sinit>
 800e772:	3648      	adds	r6, #72	; 0x48
 800e774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e778:	3b01      	subs	r3, #1
 800e77a:	d503      	bpl.n	800e784 <__sfp+0x28>
 800e77c:	6833      	ldr	r3, [r6, #0]
 800e77e:	b30b      	cbz	r3, 800e7c4 <__sfp+0x68>
 800e780:	6836      	ldr	r6, [r6, #0]
 800e782:	e7f7      	b.n	800e774 <__sfp+0x18>
 800e784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e788:	b9d5      	cbnz	r5, 800e7c0 <__sfp+0x64>
 800e78a:	4b16      	ldr	r3, [pc, #88]	; (800e7e4 <__sfp+0x88>)
 800e78c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e790:	60e3      	str	r3, [r4, #12]
 800e792:	6665      	str	r5, [r4, #100]	; 0x64
 800e794:	f000 f847 	bl	800e826 <__retarget_lock_init_recursive>
 800e798:	f7ff ff96 	bl	800e6c8 <__sfp_lock_release>
 800e79c:	2208      	movs	r2, #8
 800e79e:	4629      	mov	r1, r5
 800e7a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e7a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e7a8:	6025      	str	r5, [r4, #0]
 800e7aa:	61a5      	str	r5, [r4, #24]
 800e7ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e7b0:	f7fd faea 	bl	800bd88 <memset>
 800e7b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e7b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e7bc:	4620      	mov	r0, r4
 800e7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7c0:	3468      	adds	r4, #104	; 0x68
 800e7c2:	e7d9      	b.n	800e778 <__sfp+0x1c>
 800e7c4:	2104      	movs	r1, #4
 800e7c6:	4638      	mov	r0, r7
 800e7c8:	f7ff ff62 	bl	800e690 <__sfmoreglue>
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	6030      	str	r0, [r6, #0]
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d1d5      	bne.n	800e780 <__sfp+0x24>
 800e7d4:	f7ff ff78 	bl	800e6c8 <__sfp_lock_release>
 800e7d8:	230c      	movs	r3, #12
 800e7da:	603b      	str	r3, [r7, #0]
 800e7dc:	e7ee      	b.n	800e7bc <__sfp+0x60>
 800e7de:	bf00      	nop
 800e7e0:	0800ec48 	.word	0x0800ec48
 800e7e4:	ffff0001 	.word	0xffff0001

0800e7e8 <_fwalk_reent>:
 800e7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7ec:	4606      	mov	r6, r0
 800e7ee:	4688      	mov	r8, r1
 800e7f0:	2700      	movs	r7, #0
 800e7f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7fa:	f1b9 0901 	subs.w	r9, r9, #1
 800e7fe:	d505      	bpl.n	800e80c <_fwalk_reent+0x24>
 800e800:	6824      	ldr	r4, [r4, #0]
 800e802:	2c00      	cmp	r4, #0
 800e804:	d1f7      	bne.n	800e7f6 <_fwalk_reent+0xe>
 800e806:	4638      	mov	r0, r7
 800e808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e80c:	89ab      	ldrh	r3, [r5, #12]
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d907      	bls.n	800e822 <_fwalk_reent+0x3a>
 800e812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e816:	3301      	adds	r3, #1
 800e818:	d003      	beq.n	800e822 <_fwalk_reent+0x3a>
 800e81a:	4629      	mov	r1, r5
 800e81c:	4630      	mov	r0, r6
 800e81e:	47c0      	blx	r8
 800e820:	4307      	orrs	r7, r0
 800e822:	3568      	adds	r5, #104	; 0x68
 800e824:	e7e9      	b.n	800e7fa <_fwalk_reent+0x12>

0800e826 <__retarget_lock_init_recursive>:
 800e826:	4770      	bx	lr

0800e828 <__retarget_lock_acquire_recursive>:
 800e828:	4770      	bx	lr

0800e82a <__retarget_lock_release_recursive>:
 800e82a:	4770      	bx	lr

0800e82c <__swhatbuf_r>:
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	460e      	mov	r6, r1
 800e830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e834:	4614      	mov	r4, r2
 800e836:	2900      	cmp	r1, #0
 800e838:	461d      	mov	r5, r3
 800e83a:	b096      	sub	sp, #88	; 0x58
 800e83c:	da07      	bge.n	800e84e <__swhatbuf_r+0x22>
 800e83e:	2300      	movs	r3, #0
 800e840:	602b      	str	r3, [r5, #0]
 800e842:	89b3      	ldrh	r3, [r6, #12]
 800e844:	061a      	lsls	r2, r3, #24
 800e846:	d410      	bmi.n	800e86a <__swhatbuf_r+0x3e>
 800e848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e84c:	e00e      	b.n	800e86c <__swhatbuf_r+0x40>
 800e84e:	466a      	mov	r2, sp
 800e850:	f000 f914 	bl	800ea7c <_fstat_r>
 800e854:	2800      	cmp	r0, #0
 800e856:	dbf2      	blt.n	800e83e <__swhatbuf_r+0x12>
 800e858:	9a01      	ldr	r2, [sp, #4]
 800e85a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e85e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e862:	425a      	negs	r2, r3
 800e864:	415a      	adcs	r2, r3
 800e866:	602a      	str	r2, [r5, #0]
 800e868:	e7ee      	b.n	800e848 <__swhatbuf_r+0x1c>
 800e86a:	2340      	movs	r3, #64	; 0x40
 800e86c:	2000      	movs	r0, #0
 800e86e:	6023      	str	r3, [r4, #0]
 800e870:	b016      	add	sp, #88	; 0x58
 800e872:	bd70      	pop	{r4, r5, r6, pc}

0800e874 <__smakebuf_r>:
 800e874:	898b      	ldrh	r3, [r1, #12]
 800e876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e878:	079d      	lsls	r5, r3, #30
 800e87a:	4606      	mov	r6, r0
 800e87c:	460c      	mov	r4, r1
 800e87e:	d507      	bpl.n	800e890 <__smakebuf_r+0x1c>
 800e880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e884:	6023      	str	r3, [r4, #0]
 800e886:	6123      	str	r3, [r4, #16]
 800e888:	2301      	movs	r3, #1
 800e88a:	6163      	str	r3, [r4, #20]
 800e88c:	b002      	add	sp, #8
 800e88e:	bd70      	pop	{r4, r5, r6, pc}
 800e890:	466a      	mov	r2, sp
 800e892:	ab01      	add	r3, sp, #4
 800e894:	f7ff ffca 	bl	800e82c <__swhatbuf_r>
 800e898:	9900      	ldr	r1, [sp, #0]
 800e89a:	4605      	mov	r5, r0
 800e89c:	4630      	mov	r0, r6
 800e89e:	f7ff f9c5 	bl	800dc2c <_malloc_r>
 800e8a2:	b948      	cbnz	r0, 800e8b8 <__smakebuf_r+0x44>
 800e8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8a8:	059a      	lsls	r2, r3, #22
 800e8aa:	d4ef      	bmi.n	800e88c <__smakebuf_r+0x18>
 800e8ac:	f023 0303 	bic.w	r3, r3, #3
 800e8b0:	f043 0302 	orr.w	r3, r3, #2
 800e8b4:	81a3      	strh	r3, [r4, #12]
 800e8b6:	e7e3      	b.n	800e880 <__smakebuf_r+0xc>
 800e8b8:	4b0d      	ldr	r3, [pc, #52]	; (800e8f0 <__smakebuf_r+0x7c>)
 800e8ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800e8bc:	89a3      	ldrh	r3, [r4, #12]
 800e8be:	6020      	str	r0, [r4, #0]
 800e8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8c4:	81a3      	strh	r3, [r4, #12]
 800e8c6:	9b00      	ldr	r3, [sp, #0]
 800e8c8:	6120      	str	r0, [r4, #16]
 800e8ca:	6163      	str	r3, [r4, #20]
 800e8cc:	9b01      	ldr	r3, [sp, #4]
 800e8ce:	b15b      	cbz	r3, 800e8e8 <__smakebuf_r+0x74>
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8d6:	f000 f8e3 	bl	800eaa0 <_isatty_r>
 800e8da:	b128      	cbz	r0, 800e8e8 <__smakebuf_r+0x74>
 800e8dc:	89a3      	ldrh	r3, [r4, #12]
 800e8de:	f023 0303 	bic.w	r3, r3, #3
 800e8e2:	f043 0301 	orr.w	r3, r3, #1
 800e8e6:	81a3      	strh	r3, [r4, #12]
 800e8e8:	89a0      	ldrh	r0, [r4, #12]
 800e8ea:	4305      	orrs	r5, r0
 800e8ec:	81a5      	strh	r5, [r4, #12]
 800e8ee:	e7cd      	b.n	800e88c <__smakebuf_r+0x18>
 800e8f0:	0800e685 	.word	0x0800e685

0800e8f4 <memchr>:
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	b510      	push	{r4, lr}
 800e8f8:	b2c9      	uxtb	r1, r1
 800e8fa:	4402      	add	r2, r0
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	4618      	mov	r0, r3
 800e900:	d101      	bne.n	800e906 <memchr+0x12>
 800e902:	2000      	movs	r0, #0
 800e904:	e003      	b.n	800e90e <memchr+0x1a>
 800e906:	7804      	ldrb	r4, [r0, #0]
 800e908:	3301      	adds	r3, #1
 800e90a:	428c      	cmp	r4, r1
 800e90c:	d1f6      	bne.n	800e8fc <memchr+0x8>
 800e90e:	bd10      	pop	{r4, pc}

0800e910 <__malloc_lock>:
 800e910:	4801      	ldr	r0, [pc, #4]	; (800e918 <__malloc_lock+0x8>)
 800e912:	f7ff bf89 	b.w	800e828 <__retarget_lock_acquire_recursive>
 800e916:	bf00      	nop
 800e918:	200013a4 	.word	0x200013a4

0800e91c <__malloc_unlock>:
 800e91c:	4801      	ldr	r0, [pc, #4]	; (800e924 <__malloc_unlock+0x8>)
 800e91e:	f7ff bf84 	b.w	800e82a <__retarget_lock_release_recursive>
 800e922:	bf00      	nop
 800e924:	200013a4 	.word	0x200013a4

0800e928 <_raise_r>:
 800e928:	291f      	cmp	r1, #31
 800e92a:	b538      	push	{r3, r4, r5, lr}
 800e92c:	4604      	mov	r4, r0
 800e92e:	460d      	mov	r5, r1
 800e930:	d904      	bls.n	800e93c <_raise_r+0x14>
 800e932:	2316      	movs	r3, #22
 800e934:	6003      	str	r3, [r0, #0]
 800e936:	f04f 30ff 	mov.w	r0, #4294967295
 800e93a:	bd38      	pop	{r3, r4, r5, pc}
 800e93c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e93e:	b112      	cbz	r2, 800e946 <_raise_r+0x1e>
 800e940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e944:	b94b      	cbnz	r3, 800e95a <_raise_r+0x32>
 800e946:	4620      	mov	r0, r4
 800e948:	f000 f830 	bl	800e9ac <_getpid_r>
 800e94c:	462a      	mov	r2, r5
 800e94e:	4601      	mov	r1, r0
 800e950:	4620      	mov	r0, r4
 800e952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e956:	f000 b817 	b.w	800e988 <_kill_r>
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d00a      	beq.n	800e974 <_raise_r+0x4c>
 800e95e:	1c59      	adds	r1, r3, #1
 800e960:	d103      	bne.n	800e96a <_raise_r+0x42>
 800e962:	2316      	movs	r3, #22
 800e964:	6003      	str	r3, [r0, #0]
 800e966:	2001      	movs	r0, #1
 800e968:	e7e7      	b.n	800e93a <_raise_r+0x12>
 800e96a:	2400      	movs	r4, #0
 800e96c:	4628      	mov	r0, r5
 800e96e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e972:	4798      	blx	r3
 800e974:	2000      	movs	r0, #0
 800e976:	e7e0      	b.n	800e93a <_raise_r+0x12>

0800e978 <raise>:
 800e978:	4b02      	ldr	r3, [pc, #8]	; (800e984 <raise+0xc>)
 800e97a:	4601      	mov	r1, r0
 800e97c:	6818      	ldr	r0, [r3, #0]
 800e97e:	f7ff bfd3 	b.w	800e928 <_raise_r>
 800e982:	bf00      	nop
 800e984:	200004e8 	.word	0x200004e8

0800e988 <_kill_r>:
 800e988:	b538      	push	{r3, r4, r5, lr}
 800e98a:	2300      	movs	r3, #0
 800e98c:	4d06      	ldr	r5, [pc, #24]	; (800e9a8 <_kill_r+0x20>)
 800e98e:	4604      	mov	r4, r0
 800e990:	4608      	mov	r0, r1
 800e992:	4611      	mov	r1, r2
 800e994:	602b      	str	r3, [r5, #0]
 800e996:	f7f4 fb0a 	bl	8002fae <_kill>
 800e99a:	1c43      	adds	r3, r0, #1
 800e99c:	d102      	bne.n	800e9a4 <_kill_r+0x1c>
 800e99e:	682b      	ldr	r3, [r5, #0]
 800e9a0:	b103      	cbz	r3, 800e9a4 <_kill_r+0x1c>
 800e9a2:	6023      	str	r3, [r4, #0]
 800e9a4:	bd38      	pop	{r3, r4, r5, pc}
 800e9a6:	bf00      	nop
 800e9a8:	200013ac 	.word	0x200013ac

0800e9ac <_getpid_r>:
 800e9ac:	f7f4 baf8 	b.w	8002fa0 <_getpid>

0800e9b0 <__sread>:
 800e9b0:	b510      	push	{r4, lr}
 800e9b2:	460c      	mov	r4, r1
 800e9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9b8:	f000 f894 	bl	800eae4 <_read_r>
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	bfab      	itete	ge
 800e9c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e9c2:	89a3      	ldrhlt	r3, [r4, #12]
 800e9c4:	181b      	addge	r3, r3, r0
 800e9c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e9ca:	bfac      	ite	ge
 800e9cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e9ce:	81a3      	strhlt	r3, [r4, #12]
 800e9d0:	bd10      	pop	{r4, pc}

0800e9d2 <__swrite>:
 800e9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d6:	461f      	mov	r7, r3
 800e9d8:	898b      	ldrh	r3, [r1, #12]
 800e9da:	4605      	mov	r5, r0
 800e9dc:	05db      	lsls	r3, r3, #23
 800e9de:	460c      	mov	r4, r1
 800e9e0:	4616      	mov	r6, r2
 800e9e2:	d505      	bpl.n	800e9f0 <__swrite+0x1e>
 800e9e4:	2302      	movs	r3, #2
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ec:	f000 f868 	bl	800eac0 <_lseek_r>
 800e9f0:	89a3      	ldrh	r3, [r4, #12]
 800e9f2:	4632      	mov	r2, r6
 800e9f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9f8:	81a3      	strh	r3, [r4, #12]
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	463b      	mov	r3, r7
 800e9fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea06:	f000 b817 	b.w	800ea38 <_write_r>

0800ea0a <__sseek>:
 800ea0a:	b510      	push	{r4, lr}
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea12:	f000 f855 	bl	800eac0 <_lseek_r>
 800ea16:	1c43      	adds	r3, r0, #1
 800ea18:	89a3      	ldrh	r3, [r4, #12]
 800ea1a:	bf15      	itete	ne
 800ea1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea26:	81a3      	strheq	r3, [r4, #12]
 800ea28:	bf18      	it	ne
 800ea2a:	81a3      	strhne	r3, [r4, #12]
 800ea2c:	bd10      	pop	{r4, pc}

0800ea2e <__sclose>:
 800ea2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea32:	f000 b813 	b.w	800ea5c <_close_r>
	...

0800ea38 <_write_r>:
 800ea38:	b538      	push	{r3, r4, r5, lr}
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	4608      	mov	r0, r1
 800ea3e:	4611      	mov	r1, r2
 800ea40:	2200      	movs	r2, #0
 800ea42:	4d05      	ldr	r5, [pc, #20]	; (800ea58 <_write_r+0x20>)
 800ea44:	602a      	str	r2, [r5, #0]
 800ea46:	461a      	mov	r2, r3
 800ea48:	f7f4 fae8 	bl	800301c <_write>
 800ea4c:	1c43      	adds	r3, r0, #1
 800ea4e:	d102      	bne.n	800ea56 <_write_r+0x1e>
 800ea50:	682b      	ldr	r3, [r5, #0]
 800ea52:	b103      	cbz	r3, 800ea56 <_write_r+0x1e>
 800ea54:	6023      	str	r3, [r4, #0]
 800ea56:	bd38      	pop	{r3, r4, r5, pc}
 800ea58:	200013ac 	.word	0x200013ac

0800ea5c <_close_r>:
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	2300      	movs	r3, #0
 800ea60:	4d05      	ldr	r5, [pc, #20]	; (800ea78 <_close_r+0x1c>)
 800ea62:	4604      	mov	r4, r0
 800ea64:	4608      	mov	r0, r1
 800ea66:	602b      	str	r3, [r5, #0]
 800ea68:	f7f4 faf4 	bl	8003054 <_close>
 800ea6c:	1c43      	adds	r3, r0, #1
 800ea6e:	d102      	bne.n	800ea76 <_close_r+0x1a>
 800ea70:	682b      	ldr	r3, [r5, #0]
 800ea72:	b103      	cbz	r3, 800ea76 <_close_r+0x1a>
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	bd38      	pop	{r3, r4, r5, pc}
 800ea78:	200013ac 	.word	0x200013ac

0800ea7c <_fstat_r>:
 800ea7c:	b538      	push	{r3, r4, r5, lr}
 800ea7e:	2300      	movs	r3, #0
 800ea80:	4d06      	ldr	r5, [pc, #24]	; (800ea9c <_fstat_r+0x20>)
 800ea82:	4604      	mov	r4, r0
 800ea84:	4608      	mov	r0, r1
 800ea86:	4611      	mov	r1, r2
 800ea88:	602b      	str	r3, [r5, #0]
 800ea8a:	f7f4 faee 	bl	800306a <_fstat>
 800ea8e:	1c43      	adds	r3, r0, #1
 800ea90:	d102      	bne.n	800ea98 <_fstat_r+0x1c>
 800ea92:	682b      	ldr	r3, [r5, #0]
 800ea94:	b103      	cbz	r3, 800ea98 <_fstat_r+0x1c>
 800ea96:	6023      	str	r3, [r4, #0]
 800ea98:	bd38      	pop	{r3, r4, r5, pc}
 800ea9a:	bf00      	nop
 800ea9c:	200013ac 	.word	0x200013ac

0800eaa0 <_isatty_r>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	4d05      	ldr	r5, [pc, #20]	; (800eabc <_isatty_r+0x1c>)
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	4608      	mov	r0, r1
 800eaaa:	602b      	str	r3, [r5, #0]
 800eaac:	f7f4 faec 	bl	8003088 <_isatty>
 800eab0:	1c43      	adds	r3, r0, #1
 800eab2:	d102      	bne.n	800eaba <_isatty_r+0x1a>
 800eab4:	682b      	ldr	r3, [r5, #0]
 800eab6:	b103      	cbz	r3, 800eaba <_isatty_r+0x1a>
 800eab8:	6023      	str	r3, [r4, #0]
 800eaba:	bd38      	pop	{r3, r4, r5, pc}
 800eabc:	200013ac 	.word	0x200013ac

0800eac0 <_lseek_r>:
 800eac0:	b538      	push	{r3, r4, r5, lr}
 800eac2:	4604      	mov	r4, r0
 800eac4:	4608      	mov	r0, r1
 800eac6:	4611      	mov	r1, r2
 800eac8:	2200      	movs	r2, #0
 800eaca:	4d05      	ldr	r5, [pc, #20]	; (800eae0 <_lseek_r+0x20>)
 800eacc:	602a      	str	r2, [r5, #0]
 800eace:	461a      	mov	r2, r3
 800ead0:	f7f4 fae4 	bl	800309c <_lseek>
 800ead4:	1c43      	adds	r3, r0, #1
 800ead6:	d102      	bne.n	800eade <_lseek_r+0x1e>
 800ead8:	682b      	ldr	r3, [r5, #0]
 800eada:	b103      	cbz	r3, 800eade <_lseek_r+0x1e>
 800eadc:	6023      	str	r3, [r4, #0]
 800eade:	bd38      	pop	{r3, r4, r5, pc}
 800eae0:	200013ac 	.word	0x200013ac

0800eae4 <_read_r>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	4604      	mov	r4, r0
 800eae8:	4608      	mov	r0, r1
 800eaea:	4611      	mov	r1, r2
 800eaec:	2200      	movs	r2, #0
 800eaee:	4d05      	ldr	r5, [pc, #20]	; (800eb04 <_read_r+0x20>)
 800eaf0:	602a      	str	r2, [r5, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	f7f4 fa75 	bl	8002fe2 <_read>
 800eaf8:	1c43      	adds	r3, r0, #1
 800eafa:	d102      	bne.n	800eb02 <_read_r+0x1e>
 800eafc:	682b      	ldr	r3, [r5, #0]
 800eafe:	b103      	cbz	r3, 800eb02 <_read_r+0x1e>
 800eb00:	6023      	str	r3, [r4, #0]
 800eb02:	bd38      	pop	{r3, r4, r5, pc}
 800eb04:	200013ac 	.word	0x200013ac

0800eb08 <_init>:
 800eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0a:	bf00      	nop
 800eb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb0e:	bc08      	pop	{r3}
 800eb10:	469e      	mov	lr, r3
 800eb12:	4770      	bx	lr

0800eb14 <_fini>:
 800eb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb16:	bf00      	nop
 800eb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb1a:	bc08      	pop	{r3}
 800eb1c:	469e      	mov	lr, r3
 800eb1e:	4770      	bx	lr
