
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119a4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08011ae8  08011ae8  00021ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080120f0  080120f0  000306e8  2**0
                  CONTENTS
  4 .ARM          00000008  080120f0  080120f0  000220f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080120f8  080120f8  000306e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080120f8  080120f8  000220f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080120fc  080120fc  000220fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e8  20000000  08012100  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e90  200006e8  080127e8  000306e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001578  080127e8  00031578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000306e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1fe  00000000  00000000  00030711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cc2  00000000  00000000  0004b90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  000505d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  00051eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e2  00000000  00000000  00053558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe5a  00000000  00000000  0006db3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e92  00000000  00000000  0008d994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b14  00000000  00000000  00115878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200006e8 	.word	0x200006e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08011acc 	.word	0x08011acc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200006ec 	.word	0x200006ec
 800017c:	08011acc 	.word	0x08011acc

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_frsub>:
 8000bac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	e002      	b.n	8000bb8 <__addsf3>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_fsub>:
 8000bb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb8 <__addsf3>:
 8000bb8:	0042      	lsls	r2, r0, #1
 8000bba:	bf1f      	itttt	ne
 8000bbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc0:	ea92 0f03 	teqne	r2, r3
 8000bc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bcc:	d06a      	beq.n	8000ca4 <__addsf3+0xec>
 8000bce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd6:	bfc1      	itttt	gt
 8000bd8:	18d2      	addgt	r2, r2, r3
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	4048      	eorgt	r0, r1
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	bfb8      	it	lt
 8000be2:	425b      	neglt	r3, r3
 8000be4:	2b19      	cmp	r3, #25
 8000be6:	bf88      	it	hi
 8000be8:	4770      	bxhi	lr
 8000bea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c06:	bf18      	it	ne
 8000c08:	4249      	negne	r1, r1
 8000c0a:	ea92 0f03 	teq	r2, r3
 8000c0e:	d03f      	beq.n	8000c90 <__addsf3+0xd8>
 8000c10:	f1a2 0201 	sub.w	r2, r2, #1
 8000c14:	fa41 fc03 	asr.w	ip, r1, r3
 8000c18:	eb10 000c 	adds.w	r0, r0, ip
 8000c1c:	f1c3 0320 	rsb	r3, r3, #32
 8000c20:	fa01 f103 	lsl.w	r1, r1, r3
 8000c24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__addsf3+0x78>
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c34:	d313      	bcc.n	8000c5e <__addsf3+0xa6>
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3a:	d306      	bcc.n	8000c4a <__addsf3+0x92>
 8000c3c:	0840      	lsrs	r0, r0, #1
 8000c3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c42:	f102 0201 	add.w	r2, r2, #1
 8000c46:	2afe      	cmp	r2, #254	; 0xfe
 8000c48:	d251      	bcs.n	8000cee <__addsf3+0x136>
 8000c4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	ea40 0003 	orr.w	r0, r0, r3
 8000c5c:	4770      	bx	lr
 8000c5e:	0049      	lsls	r1, r1, #1
 8000c60:	eb40 0000 	adc.w	r0, r0, r0
 8000c64:	3a01      	subs	r2, #1
 8000c66:	bf28      	it	cs
 8000c68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c6c:	d2ed      	bcs.n	8000c4a <__addsf3+0x92>
 8000c6e:	fab0 fc80 	clz	ip, r0
 8000c72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c76:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7e:	bfaa      	itet	ge
 8000c80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c84:	4252      	neglt	r2, r2
 8000c86:	4318      	orrge	r0, r3
 8000c88:	bfbc      	itt	lt
 8000c8a:	40d0      	lsrlt	r0, r2
 8000c8c:	4318      	orrlt	r0, r3
 8000c8e:	4770      	bx	lr
 8000c90:	f092 0f00 	teq	r2, #0
 8000c94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c98:	bf06      	itte	eq
 8000c9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9e:	3201      	addeq	r2, #1
 8000ca0:	3b01      	subne	r3, #1
 8000ca2:	e7b5      	b.n	8000c10 <__addsf3+0x58>
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d021      	beq.n	8000cf8 <__addsf3+0x140>
 8000cb4:	ea92 0f03 	teq	r2, r3
 8000cb8:	d004      	beq.n	8000cc4 <__addsf3+0x10c>
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	4608      	moveq	r0, r1
 8000cc2:	4770      	bx	lr
 8000cc4:	ea90 0f01 	teq	r0, r1
 8000cc8:	bf1c      	itt	ne
 8000cca:	2000      	movne	r0, #0
 8000ccc:	4770      	bxne	lr
 8000cce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cd2:	d104      	bne.n	8000cde <__addsf3+0x126>
 8000cd4:	0040      	lsls	r0, r0, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ce2:	bf3c      	itt	cc
 8000ce4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bxcc	lr
 8000cea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf6:	4770      	bx	lr
 8000cf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cfc:	bf16      	itet	ne
 8000cfe:	4608      	movne	r0, r1
 8000d00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d04:	4601      	movne	r1, r0
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	bf06      	itte	eq
 8000d0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0e:	ea90 0f01 	teqeq	r0, r1
 8000d12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_ui2f>:
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e004      	b.n	8000d28 <__aeabi_i2f+0x8>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_i2f>:
 8000d20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	bf48      	it	mi
 8000d26:	4240      	negmi	r0, r0
 8000d28:	ea5f 0c00 	movs.w	ip, r0
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d34:	4601      	mov	r1, r0
 8000d36:	f04f 0000 	mov.w	r0, #0
 8000d3a:	e01c      	b.n	8000d76 <__aeabi_l2f+0x2a>

08000d3c <__aeabi_ul2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e00a      	b.n	8000d60 <__aeabi_l2f+0x14>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_l2f>:
 8000d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d58:	d502      	bpl.n	8000d60 <__aeabi_l2f+0x14>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	ea5f 0c01 	movs.w	ip, r1
 8000d64:	bf02      	ittt	eq
 8000d66:	4684      	moveq	ip, r0
 8000d68:	4601      	moveq	r1, r0
 8000d6a:	2000      	moveq	r0, #0
 8000d6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d70:	bf08      	it	eq
 8000d72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d7a:	fabc f28c 	clz	r2, ip
 8000d7e:	3a08      	subs	r2, #8
 8000d80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d84:	db10      	blt.n	8000da8 <__aeabi_l2f+0x5c>
 8000d86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d90:	f1c2 0220 	rsb	r2, r2, #32
 8000d94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d98:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9c:	eb43 0002 	adc.w	r0, r3, r2
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f102 0220 	add.w	r2, r2, #32
 8000dac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_fmul>:
 8000dc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd0:	bf1e      	ittt	ne
 8000dd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd6:	ea92 0f0c 	teqne	r2, ip
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d06f      	beq.n	8000ec0 <__aeabi_fmul+0xf8>
 8000de0:	441a      	add	r2, r3
 8000de2:	ea80 0c01 	eor.w	ip, r0, r1
 8000de6:	0240      	lsls	r0, r0, #9
 8000de8:	bf18      	it	ne
 8000dea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dee:	d01e      	beq.n	8000e2e <__aeabi_fmul+0x66>
 8000df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000e00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e08:	bf3e      	ittt	cc
 8000e0a:	0049      	lslcc	r1, r1, #1
 8000e0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e10:	005b      	lslcc	r3, r3, #1
 8000e12:	ea40 0001 	orr.w	r0, r0, r1
 8000e16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e1a:	2afd      	cmp	r2, #253	; 0xfd
 8000e1c:	d81d      	bhi.n	8000e5a <__aeabi_fmul+0x92>
 8000e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e26:	bf08      	it	eq
 8000e28:	f020 0001 	biceq.w	r0, r0, #1
 8000e2c:	4770      	bx	lr
 8000e2e:	f090 0f00 	teq	r0, #0
 8000e32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e36:	bf08      	it	eq
 8000e38:	0249      	lsleq	r1, r1, #9
 8000e3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e42:	3a7f      	subs	r2, #127	; 0x7f
 8000e44:	bfc2      	ittt	gt
 8000e46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4e:	4770      	bxgt	lr
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	dc5d      	bgt.n	8000f18 <__aeabi_fmul+0x150>
 8000e5c:	f112 0f19 	cmn.w	r2, #25
 8000e60:	bfdc      	itt	le
 8000e62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e66:	4770      	bxle	lr
 8000e68:	f1c2 0200 	rsb	r2, r2, #0
 8000e6c:	0041      	lsls	r1, r0, #1
 8000e6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e72:	f1c2 0220 	rsb	r2, r2, #32
 8000e76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7e:	f140 0000 	adc.w	r0, r0, #0
 8000e82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e86:	bf08      	it	eq
 8000e88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e8c:	4770      	bx	lr
 8000e8e:	f092 0f00 	teq	r2, #0
 8000e92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e96:	bf02      	ittt	eq
 8000e98:	0040      	lsleq	r0, r0, #1
 8000e9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9e:	3a01      	subeq	r2, #1
 8000ea0:	d0f9      	beq.n	8000e96 <__aeabi_fmul+0xce>
 8000ea2:	ea40 000c 	orr.w	r0, r0, ip
 8000ea6:	f093 0f00 	teq	r3, #0
 8000eaa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0049      	lsleq	r1, r1, #1
 8000eb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb6:	3b01      	subeq	r3, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xe6>
 8000eba:	ea41 010c 	orr.w	r1, r1, ip
 8000ebe:	e78f      	b.n	8000de0 <__aeabi_fmul+0x18>
 8000ec0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	bf18      	it	ne
 8000eca:	ea93 0f0c 	teqne	r3, ip
 8000ece:	d00a      	beq.n	8000ee6 <__aeabi_fmul+0x11e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1d8      	bne.n	8000e8e <__aeabi_fmul+0xc6>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	4770      	bx	lr
 8000ee6:	f090 0f00 	teq	r0, #0
 8000eea:	bf17      	itett	ne
 8000eec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ef0:	4608      	moveq	r0, r1
 8000ef2:	f091 0f00 	teqne	r1, #0
 8000ef6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000efa:	d014      	beq.n	8000f26 <__aeabi_fmul+0x15e>
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d101      	bne.n	8000f06 <__aeabi_fmul+0x13e>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d10f      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f06:	ea93 0f0c 	teq	r3, ip
 8000f0a:	d103      	bne.n	8000f14 <__aeabi_fmul+0x14c>
 8000f0c:	024b      	lsls	r3, r1, #9
 8000f0e:	bf18      	it	ne
 8000f10:	4608      	movne	r0, r1
 8000f12:	d108      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f14:	ea80 0001 	eor.w	r0, r0, r1
 8000f18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f24:	4770      	bx	lr
 8000f26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_fdiv>:
 8000f30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f38:	bf1e      	ittt	ne
 8000f3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3e:	ea92 0f0c 	teqne	r2, ip
 8000f42:	ea93 0f0c 	teqne	r3, ip
 8000f46:	d069      	beq.n	800101c <__aeabi_fdiv+0xec>
 8000f48:	eba2 0203 	sub.w	r2, r2, r3
 8000f4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f56:	d037      	beq.n	8000fc8 <__aeabi_fdiv+0x98>
 8000f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	bf38      	it	cc
 8000f6c:	005b      	lslcc	r3, r3, #1
 8000f6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f76:	428b      	cmp	r3, r1
 8000f78:	bf24      	itt	cs
 8000f7a:	1a5b      	subcs	r3, r3, r1
 8000f7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f84:	bf24      	itt	cs
 8000f86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f92:	bf24      	itt	cs
 8000f94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa0:	bf24      	itt	cs
 8000fa2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	bf18      	it	ne
 8000fae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb2:	d1e0      	bne.n	8000f76 <__aeabi_fdiv+0x46>
 8000fb4:	2afd      	cmp	r2, #253	; 0xfd
 8000fb6:	f63f af50 	bhi.w	8000e5a <__aeabi_fmul+0x92>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc0:	bf08      	it	eq
 8000fc2:	f020 0001 	biceq.w	r0, r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd0:	327f      	adds	r2, #127	; 0x7f
 8000fd2:	bfc2      	ittt	gt
 8000fd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fdc:	4770      	bxgt	lr
 8000fde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	e737      	b.n	8000e5a <__aeabi_fmul+0x92>
 8000fea:	f092 0f00 	teq	r2, #0
 8000fee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ff2:	bf02      	ittt	eq
 8000ff4:	0040      	lsleq	r0, r0, #1
 8000ff6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ffa:	3a01      	subeq	r2, #1
 8000ffc:	d0f9      	beq.n	8000ff2 <__aeabi_fdiv+0xc2>
 8000ffe:	ea40 000c 	orr.w	r0, r0, ip
 8001002:	f093 0f00 	teq	r3, #0
 8001006:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0049      	lsleq	r1, r1, #1
 800100e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001012:	3b01      	subeq	r3, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xda>
 8001016:	ea41 010c 	orr.w	r1, r1, ip
 800101a:	e795      	b.n	8000f48 <__aeabi_fdiv+0x18>
 800101c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001020:	ea92 0f0c 	teq	r2, ip
 8001024:	d108      	bne.n	8001038 <__aeabi_fdiv+0x108>
 8001026:	0242      	lsls	r2, r0, #9
 8001028:	f47f af7d 	bne.w	8000f26 <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	f47f af70 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 8001034:	4608      	mov	r0, r1
 8001036:	e776      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001038:	ea93 0f0c 	teq	r3, ip
 800103c:	d104      	bne.n	8001048 <__aeabi_fdiv+0x118>
 800103e:	024b      	lsls	r3, r1, #9
 8001040:	f43f af4c 	beq.w	8000edc <__aeabi_fmul+0x114>
 8001044:	4608      	mov	r0, r1
 8001046:	e76e      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001048:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800104c:	bf18      	it	ne
 800104e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001052:	d1ca      	bne.n	8000fea <__aeabi_fdiv+0xba>
 8001054:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001058:	f47f af5c 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 800105c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001060:	f47f af3c 	bne.w	8000edc <__aeabi_fmul+0x114>
 8001064:	e75f      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001066:	bf00      	nop

08001068 <__gesf2>:
 8001068:	f04f 3cff 	mov.w	ip, #4294967295
 800106c:	e006      	b.n	800107c <__cmpsf2+0x4>
 800106e:	bf00      	nop

08001070 <__lesf2>:
 8001070:	f04f 0c01 	mov.w	ip, #1
 8001074:	e002      	b.n	800107c <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__cmpsf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	bf18      	it	ne
 800108e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001092:	d011      	beq.n	80010b8 <__cmpsf2+0x40>
 8001094:	b001      	add	sp, #4
 8001096:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800109a:	bf18      	it	ne
 800109c:	ea90 0f01 	teqne	r0, r1
 80010a0:	bf58      	it	pl
 80010a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a6:	bf88      	it	hi
 80010a8:	17c8      	asrhi	r0, r1, #31
 80010aa:	bf38      	it	cc
 80010ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b0:	bf18      	it	ne
 80010b2:	f040 0001 	orrne.w	r0, r0, #1
 80010b6:	4770      	bx	lr
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__cmpsf2+0x4c>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d105      	bne.n	80010d0 <__cmpsf2+0x58>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d1e4      	bne.n	8001094 <__cmpsf2+0x1c>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d0e1      	beq.n	8001094 <__cmpsf2+0x1c>
 80010d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <__aeabi_cfrcmple>:
 80010d8:	4684      	mov	ip, r0
 80010da:	4608      	mov	r0, r1
 80010dc:	4661      	mov	r1, ip
 80010de:	e7ff      	b.n	80010e0 <__aeabi_cfcmpeq>

080010e0 <__aeabi_cfcmpeq>:
 80010e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010e2:	f7ff ffc9 	bl	8001078 <__cmpsf2>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	bf48      	it	mi
 80010ea:	f110 0f00 	cmnmi.w	r0, #0
 80010ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f0 <__aeabi_fcmpeq>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff fff4 	bl	80010e0 <__aeabi_cfcmpeq>
 80010f8:	bf0c      	ite	eq
 80010fa:	2001      	moveq	r0, #1
 80010fc:	2000      	movne	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmplt>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffea 	bl	80010e0 <__aeabi_cfcmpeq>
 800110c:	bf34      	ite	cc
 800110e:	2001      	movcc	r0, #1
 8001110:	2000      	movcs	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmple>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffe0 	bl	80010e0 <__aeabi_cfcmpeq>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpge>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffd2 	bl	80010d8 <__aeabi_cfrcmple>
 8001134:	bf94      	ite	ls
 8001136:	2001      	movls	r0, #1
 8001138:	2000      	movhi	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpgt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffc8 	bl	80010d8 <__aeabi_cfrcmple>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_f2uiz>:
 8001154:	0042      	lsls	r2, r0, #1
 8001156:	d20e      	bcs.n	8001176 <__aeabi_f2uiz+0x22>
 8001158:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800115c:	d30b      	bcc.n	8001176 <__aeabi_f2uiz+0x22>
 800115e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001162:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001166:	d409      	bmi.n	800117c <__aeabi_f2uiz+0x28>
 8001168:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	4770      	bx	lr
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	4770      	bx	lr
 800117c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001180:	d101      	bne.n	8001186 <__aeabi_f2uiz+0x32>
 8001182:	0242      	lsls	r2, r0, #9
 8001184:	d102      	bne.n	800118c <__aeabi_f2uiz+0x38>
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	4770      	bx	lr
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <__aeabi_uldivmod>:
 8001194:	b953      	cbnz	r3, 80011ac <__aeabi_uldivmod+0x18>
 8001196:	b94a      	cbnz	r2, 80011ac <__aeabi_uldivmod+0x18>
 8001198:	2900      	cmp	r1, #0
 800119a:	bf08      	it	eq
 800119c:	2800      	cmpeq	r0, #0
 800119e:	bf1c      	itt	ne
 80011a0:	f04f 31ff 	movne.w	r1, #4294967295
 80011a4:	f04f 30ff 	movne.w	r0, #4294967295
 80011a8:	f000 b9ae 	b.w	8001508 <__aeabi_idiv0>
 80011ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b4:	f000 f83e 	bl	8001234 <__udivmoddi4>
 80011b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c0:	b004      	add	sp, #16
 80011c2:	4770      	bx	lr

080011c4 <__aeabi_d2lz>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4605      	mov	r5, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4628      	mov	r0, r5
 80011d0:	4621      	mov	r1, r4
 80011d2:	f7ff fc15 	bl	8000a00 <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x20>
 80011d8:	4628      	mov	r0, r5
 80011da:	4621      	mov	r1, r4
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4628      	mov	r0, r5
 80011e6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f98b 	bl	800051c <__aeabi_dmul>
 8001206:	f7ff fc61 	bl	8000acc <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f90c 	bl	8000428 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f982 	bl	800051c <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffc4 	bl	80001ac <__aeabi_dsub>
 8001224:	f7ff fc52 	bl	8000acc <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000

08001234 <__udivmoddi4>:
 8001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001238:	9e08      	ldr	r6, [sp, #32]
 800123a:	460d      	mov	r5, r1
 800123c:	4604      	mov	r4, r0
 800123e:	4688      	mov	r8, r1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d14d      	bne.n	80012e0 <__udivmoddi4+0xac>
 8001244:	428a      	cmp	r2, r1
 8001246:	4694      	mov	ip, r2
 8001248:	d968      	bls.n	800131c <__udivmoddi4+0xe8>
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b152      	cbz	r2, 8001266 <__udivmoddi4+0x32>
 8001250:	fa01 f302 	lsl.w	r3, r1, r2
 8001254:	f1c2 0120 	rsb	r1, r2, #32
 8001258:	fa20 f101 	lsr.w	r1, r0, r1
 800125c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001260:	ea41 0803 	orr.w	r8, r1, r3
 8001264:	4094      	lsls	r4, r2
 8001266:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800126a:	fbb8 f7f1 	udiv	r7, r8, r1
 800126e:	fa1f fe8c 	uxth.w	lr, ip
 8001272:	fb01 8817 	mls	r8, r1, r7, r8
 8001276:	fb07 f00e 	mul.w	r0, r7, lr
 800127a:	0c23      	lsrs	r3, r4, #16
 800127c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001280:	4298      	cmp	r0, r3
 8001282:	d90a      	bls.n	800129a <__udivmoddi4+0x66>
 8001284:	eb1c 0303 	adds.w	r3, ip, r3
 8001288:	f107 35ff 	add.w	r5, r7, #4294967295
 800128c:	f080 811e 	bcs.w	80014cc <__udivmoddi4+0x298>
 8001290:	4298      	cmp	r0, r3
 8001292:	f240 811b 	bls.w	80014cc <__udivmoddi4+0x298>
 8001296:	3f02      	subs	r7, #2
 8001298:	4463      	add	r3, ip
 800129a:	1a1b      	subs	r3, r3, r0
 800129c:	fbb3 f0f1 	udiv	r0, r3, r1
 80012a0:	fb01 3310 	mls	r3, r1, r0, r3
 80012a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80012a8:	b2a4      	uxth	r4, r4
 80012aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012ae:	45a6      	cmp	lr, r4
 80012b0:	d90a      	bls.n	80012c8 <__udivmoddi4+0x94>
 80012b2:	eb1c 0404 	adds.w	r4, ip, r4
 80012b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80012ba:	f080 8109 	bcs.w	80014d0 <__udivmoddi4+0x29c>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f240 8106 	bls.w	80014d0 <__udivmoddi4+0x29c>
 80012c4:	4464      	add	r4, ip
 80012c6:	3802      	subs	r0, #2
 80012c8:	2100      	movs	r1, #0
 80012ca:	eba4 040e 	sub.w	r4, r4, lr
 80012ce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012d2:	b11e      	cbz	r6, 80012dc <__udivmoddi4+0xa8>
 80012d4:	2300      	movs	r3, #0
 80012d6:	40d4      	lsrs	r4, r2
 80012d8:	e9c6 4300 	strd	r4, r3, [r6]
 80012dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0xc2>
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	f000 80ee 	beq.w	80014c6 <__udivmoddi4+0x292>
 80012ea:	2100      	movs	r1, #0
 80012ec:	e9c6 0500 	strd	r0, r5, [r6]
 80012f0:	4608      	mov	r0, r1
 80012f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f6:	fab3 f183 	clz	r1, r3
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d14a      	bne.n	8001394 <__udivmoddi4+0x160>
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d302      	bcc.n	8001308 <__udivmoddi4+0xd4>
 8001302:	4282      	cmp	r2, r0
 8001304:	f200 80fc 	bhi.w	8001500 <__udivmoddi4+0x2cc>
 8001308:	1a84      	subs	r4, r0, r2
 800130a:	eb65 0303 	sbc.w	r3, r5, r3
 800130e:	2001      	movs	r0, #1
 8001310:	4698      	mov	r8, r3
 8001312:	2e00      	cmp	r6, #0
 8001314:	d0e2      	beq.n	80012dc <__udivmoddi4+0xa8>
 8001316:	e9c6 4800 	strd	r4, r8, [r6]
 800131a:	e7df      	b.n	80012dc <__udivmoddi4+0xa8>
 800131c:	b902      	cbnz	r2, 8001320 <__udivmoddi4+0xec>
 800131e:	deff      	udf	#255	; 0xff
 8001320:	fab2 f282 	clz	r2, r2
 8001324:	2a00      	cmp	r2, #0
 8001326:	f040 8091 	bne.w	800144c <__udivmoddi4+0x218>
 800132a:	eba1 000c 	sub.w	r0, r1, ip
 800132e:	2101      	movs	r1, #1
 8001330:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001334:	fa1f fe8c 	uxth.w	lr, ip
 8001338:	fbb0 f3f7 	udiv	r3, r0, r7
 800133c:	fb07 0013 	mls	r0, r7, r3, r0
 8001340:	0c25      	lsrs	r5, r4, #16
 8001342:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001346:	fb0e f003 	mul.w	r0, lr, r3
 800134a:	42a8      	cmp	r0, r5
 800134c:	d908      	bls.n	8001360 <__udivmoddi4+0x12c>
 800134e:	eb1c 0505 	adds.w	r5, ip, r5
 8001352:	f103 38ff 	add.w	r8, r3, #4294967295
 8001356:	d202      	bcs.n	800135e <__udivmoddi4+0x12a>
 8001358:	42a8      	cmp	r0, r5
 800135a:	f200 80ce 	bhi.w	80014fa <__udivmoddi4+0x2c6>
 800135e:	4643      	mov	r3, r8
 8001360:	1a2d      	subs	r5, r5, r0
 8001362:	fbb5 f0f7 	udiv	r0, r5, r7
 8001366:	fb07 5510 	mls	r5, r7, r0, r5
 800136a:	fb0e fe00 	mul.w	lr, lr, r0
 800136e:	b2a4      	uxth	r4, r4
 8001370:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001374:	45a6      	cmp	lr, r4
 8001376:	d908      	bls.n	800138a <__udivmoddi4+0x156>
 8001378:	eb1c 0404 	adds.w	r4, ip, r4
 800137c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001380:	d202      	bcs.n	8001388 <__udivmoddi4+0x154>
 8001382:	45a6      	cmp	lr, r4
 8001384:	f200 80b6 	bhi.w	80014f4 <__udivmoddi4+0x2c0>
 8001388:	4628      	mov	r0, r5
 800138a:	eba4 040e 	sub.w	r4, r4, lr
 800138e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001392:	e79e      	b.n	80012d2 <__udivmoddi4+0x9e>
 8001394:	f1c1 0720 	rsb	r7, r1, #32
 8001398:	408b      	lsls	r3, r1
 800139a:	fa22 fc07 	lsr.w	ip, r2, r7
 800139e:	ea4c 0c03 	orr.w	ip, ip, r3
 80013a2:	fa25 fa07 	lsr.w	sl, r5, r7
 80013a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013aa:	fbba f8f9 	udiv	r8, sl, r9
 80013ae:	fa20 f307 	lsr.w	r3, r0, r7
 80013b2:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b6:	408d      	lsls	r5, r1
 80013b8:	fa1f fe8c 	uxth.w	lr, ip
 80013bc:	431d      	orrs	r5, r3
 80013be:	fa00 f301 	lsl.w	r3, r0, r1
 80013c2:	fb08 f00e 	mul.w	r0, r8, lr
 80013c6:	0c2c      	lsrs	r4, r5, #16
 80013c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013cc:	42a0      	cmp	r0, r4
 80013ce:	fa02 f201 	lsl.w	r2, r2, r1
 80013d2:	d90b      	bls.n	80013ec <__udivmoddi4+0x1b8>
 80013d4:	eb1c 0404 	adds.w	r4, ip, r4
 80013d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80013dc:	f080 8088 	bcs.w	80014f0 <__udivmoddi4+0x2bc>
 80013e0:	42a0      	cmp	r0, r4
 80013e2:	f240 8085 	bls.w	80014f0 <__udivmoddi4+0x2bc>
 80013e6:	f1a8 0802 	sub.w	r8, r8, #2
 80013ea:	4464      	add	r4, ip
 80013ec:	1a24      	subs	r4, r4, r0
 80013ee:	fbb4 f0f9 	udiv	r0, r4, r9
 80013f2:	fb09 4410 	mls	r4, r9, r0, r4
 80013f6:	fb00 fe0e 	mul.w	lr, r0, lr
 80013fa:	b2ad      	uxth	r5, r5
 80013fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001400:	45a6      	cmp	lr, r4
 8001402:	d908      	bls.n	8001416 <__udivmoddi4+0x1e2>
 8001404:	eb1c 0404 	adds.w	r4, ip, r4
 8001408:	f100 35ff 	add.w	r5, r0, #4294967295
 800140c:	d26c      	bcs.n	80014e8 <__udivmoddi4+0x2b4>
 800140e:	45a6      	cmp	lr, r4
 8001410:	d96a      	bls.n	80014e8 <__udivmoddi4+0x2b4>
 8001412:	3802      	subs	r0, #2
 8001414:	4464      	add	r4, ip
 8001416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800141a:	fba0 9502 	umull	r9, r5, r0, r2
 800141e:	eba4 040e 	sub.w	r4, r4, lr
 8001422:	42ac      	cmp	r4, r5
 8001424:	46c8      	mov	r8, r9
 8001426:	46ae      	mov	lr, r5
 8001428:	d356      	bcc.n	80014d8 <__udivmoddi4+0x2a4>
 800142a:	d053      	beq.n	80014d4 <__udivmoddi4+0x2a0>
 800142c:	2e00      	cmp	r6, #0
 800142e:	d069      	beq.n	8001504 <__udivmoddi4+0x2d0>
 8001430:	ebb3 0208 	subs.w	r2, r3, r8
 8001434:	eb64 040e 	sbc.w	r4, r4, lr
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	fa04 f707 	lsl.w	r7, r4, r7
 8001440:	431f      	orrs	r7, r3
 8001442:	40cc      	lsrs	r4, r1
 8001444:	e9c6 7400 	strd	r7, r4, [r6]
 8001448:	2100      	movs	r1, #0
 800144a:	e747      	b.n	80012dc <__udivmoddi4+0xa8>
 800144c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001450:	f1c2 0120 	rsb	r1, r2, #32
 8001454:	fa25 f301 	lsr.w	r3, r5, r1
 8001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800145c:	fa20 f101 	lsr.w	r1, r0, r1
 8001460:	4095      	lsls	r5, r2
 8001462:	430d      	orrs	r5, r1
 8001464:	fbb3 f1f7 	udiv	r1, r3, r7
 8001468:	fb07 3311 	mls	r3, r7, r1, r3
 800146c:	fa1f fe8c 	uxth.w	lr, ip
 8001470:	0c28      	lsrs	r0, r5, #16
 8001472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001476:	fb01 f30e 	mul.w	r3, r1, lr
 800147a:	4283      	cmp	r3, r0
 800147c:	fa04 f402 	lsl.w	r4, r4, r2
 8001480:	d908      	bls.n	8001494 <__udivmoddi4+0x260>
 8001482:	eb1c 0000 	adds.w	r0, ip, r0
 8001486:	f101 38ff 	add.w	r8, r1, #4294967295
 800148a:	d22f      	bcs.n	80014ec <__udivmoddi4+0x2b8>
 800148c:	4283      	cmp	r3, r0
 800148e:	d92d      	bls.n	80014ec <__udivmoddi4+0x2b8>
 8001490:	3902      	subs	r1, #2
 8001492:	4460      	add	r0, ip
 8001494:	1ac0      	subs	r0, r0, r3
 8001496:	fbb0 f3f7 	udiv	r3, r0, r7
 800149a:	fb07 0013 	mls	r0, r7, r3, r0
 800149e:	b2ad      	uxth	r5, r5
 80014a0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014a4:	fb03 f00e 	mul.w	r0, r3, lr
 80014a8:	42a8      	cmp	r0, r5
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x28a>
 80014ac:	eb1c 0505 	adds.w	r5, ip, r5
 80014b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80014b4:	d216      	bcs.n	80014e4 <__udivmoddi4+0x2b0>
 80014b6:	42a8      	cmp	r0, r5
 80014b8:	d914      	bls.n	80014e4 <__udivmoddi4+0x2b0>
 80014ba:	3b02      	subs	r3, #2
 80014bc:	4465      	add	r5, ip
 80014be:	1a28      	subs	r0, r5, r0
 80014c0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014c4:	e738      	b.n	8001338 <__udivmoddi4+0x104>
 80014c6:	4631      	mov	r1, r6
 80014c8:	4630      	mov	r0, r6
 80014ca:	e707      	b.n	80012dc <__udivmoddi4+0xa8>
 80014cc:	462f      	mov	r7, r5
 80014ce:	e6e4      	b.n	800129a <__udivmoddi4+0x66>
 80014d0:	4618      	mov	r0, r3
 80014d2:	e6f9      	b.n	80012c8 <__udivmoddi4+0x94>
 80014d4:	454b      	cmp	r3, r9
 80014d6:	d2a9      	bcs.n	800142c <__udivmoddi4+0x1f8>
 80014d8:	ebb9 0802 	subs.w	r8, r9, r2
 80014dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80014e0:	3801      	subs	r0, #1
 80014e2:	e7a3      	b.n	800142c <__udivmoddi4+0x1f8>
 80014e4:	4643      	mov	r3, r8
 80014e6:	e7ea      	b.n	80014be <__udivmoddi4+0x28a>
 80014e8:	4628      	mov	r0, r5
 80014ea:	e794      	b.n	8001416 <__udivmoddi4+0x1e2>
 80014ec:	4641      	mov	r1, r8
 80014ee:	e7d1      	b.n	8001494 <__udivmoddi4+0x260>
 80014f0:	46d0      	mov	r8, sl
 80014f2:	e77b      	b.n	80013ec <__udivmoddi4+0x1b8>
 80014f4:	4464      	add	r4, ip
 80014f6:	3802      	subs	r0, #2
 80014f8:	e747      	b.n	800138a <__udivmoddi4+0x156>
 80014fa:	3b02      	subs	r3, #2
 80014fc:	4465      	add	r5, ip
 80014fe:	e72f      	b.n	8001360 <__udivmoddi4+0x12c>
 8001500:	4608      	mov	r0, r1
 8001502:	e706      	b.n	8001312 <__udivmoddi4+0xde>
 8001504:	4631      	mov	r1, r6
 8001506:	e6e9      	b.n	80012dc <__udivmoddi4+0xa8>

08001508 <__aeabi_idiv0>:
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	889b      	ldrh	r3, [r3, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	88db      	ldrh	r3, [r3, #6]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
	if (total < 0)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da05      	bge.n	8001538 <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	891b      	ldrh	r3, [r3, #8]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4413      	add	r3, r2
 8001536:	617b      	str	r3, [r7, #20]

	if (total == 0)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e031      	b.n	80015a8 <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	88db      	ldrh	r3, [r3, #6]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	8912      	ldrh	r2, [r2, #8]
 8001550:	fbb3 f0f2 	udiv	r0, r3, r2
 8001554:	fb00 f202 	mul.w	r2, r0, r2
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
			* circ_buf->element_size);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	895b      	ldrh	r3, [r3, #10]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001566:	440b      	add	r3, r1
 8001568:	613b      	str	r3, [r7, #16]

	if (elem)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	895b      	ldrh	r3, [r3, #10]
 8001574:	461a      	mov	r2, r3
 8001576:	6939      	ldr	r1, [r7, #16]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f00c fa5f 	bl	800da3c <memcpy>

	if (!read_only) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d110      	bne.n	80015a6 <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	88db      	ldrh	r3, [r3, #6]
 8001588:	3301      	adds	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	88db      	ldrh	r3, [r3, #6]
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	429a      	cmp	r2, r3
 800159e:	db02      	blt.n	80015a6 <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	889b      	ldrh	r3, [r3, #4]
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	88db      	ldrh	r3, [r3, #6]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	891b      	ldrh	r3, [r3, #8]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	891b      	ldrh	r3, [r3, #8]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	db02      	blt.n	80015ec <__circ_gbuf_push+0x3c>
		return -1; // Full
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e02b      	b.n	8001644 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	889b      	ldrh	r3, [r3, #4]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	8912      	ldrh	r2, [r2, #8]
 80015f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80015fc:	fb00 f202 	mul.w	r2, r0, r2
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
			* circ_buf->element_size );
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	895b      	ldrh	r3, [r3, #10]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 800160e:	440b      	add	r3, r1
 8001610:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	895b      	ldrh	r3, [r3, #10]
 8001616:	461a      	mov	r2, r3
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f00c fa0e 	bl	800da3c <memcpy>
	circ_buf->push_count++;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	891b      	ldrh	r3, [r3, #8]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	429a      	cmp	r2, r3
 800163a:	db02      	blt.n	8001642 <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	809a      	strh	r2, [r3, #4]
	return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <Relay_control>:
extern uint16_t DAC_tx_tmp_buffer[2];
extern float DDS_FTW;


//==============================================================================================
void Relay_control(uint8_t relay,uint8_t state){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
	int Relay_address=0;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
	if(relay<1 || relay>3 || state>1) return;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 80c3 	beq.w	80017ee <Relay_control+0x1a2>
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b03      	cmp	r3, #3
 800166c:	f200 80bf 	bhi.w	80017ee <Relay_control+0x1a2>
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	2b01      	cmp	r3, #1
 8001674:	f200 80bb 	bhi.w	80017ee <Relay_control+0x1a2>

	while(Relay_address<=0x5) // Set all OUTx to zero
 8001678:	e03c      	b.n	80016f4 <Relay_control+0xa8>
	{
		HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	2102      	movs	r1, #2
 8001688:	485b      	ldr	r0, [pc, #364]	; (80017f8 <Relay_control+0x1ac>)
 800168a:	f003 fa1c 	bl	8004ac6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	105b      	asrs	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	2104      	movs	r1, #4
 800169e:	4856      	ldr	r0, [pc, #344]	; (80017f8 <Relay_control+0x1ac>)
 80016a0:	f003 fa11 	bl	8004ac6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	109b      	asrs	r3, r3, #2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	2108      	movs	r1, #8
 80016b4:	4850      	ldr	r0, [pc, #320]	; (80017f8 <Relay_control+0x1ac>)
 80016b6:	f003 fa06 	bl	8004ac6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 80016ba:	2200      	movs	r2, #0
 80016bc:	2101      	movs	r1, #1
 80016be:	484e      	ldr	r0, [pc, #312]	; (80017f8 <Relay_control+0x1ac>)
 80016c0:	f003 fa01 	bl	8004ac6 <HAL_GPIO_WritePin>

		HAL_Delay(1); // wait 1ms
 80016c4:	2001      	movs	r0, #1
 80016c6:	f002 fb99 	bl	8003dfc <HAL_Delay>
		HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	484a      	ldr	r0, [pc, #296]	; (80017fc <Relay_control+0x1b0>)
 80016d2:	f003 f9f8 	bl	8004ac6 <HAL_GPIO_WritePin>
		HAL_Delay(1); // wait 1ms
 80016d6:	2001      	movs	r0, #1
 80016d8:	f002 fb90 	bl	8003dfc <HAL_Delay>
		HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e2:	4846      	ldr	r0, [pc, #280]	; (80017fc <Relay_control+0x1b0>)
 80016e4:	f003 f9ef 	bl	8004ac6 <HAL_GPIO_WritePin>
		HAL_Delay(1); // wait 1ms
 80016e8:	2001      	movs	r0, #1
 80016ea:	f002 fb87 	bl	8003dfc <HAL_Delay>
		Relay_address++;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
	while(Relay_address<=0x5) // Set all OUTx to zero
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	ddbf      	ble.n	800167a <Relay_control+0x2e>
	}


	switch (relay)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d006      	beq.n	800170e <Relay_control+0xc2>
 8001700:	2b03      	cmp	r3, #3
 8001702:	dc1f      	bgt.n	8001744 <Relay_control+0xf8>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d014      	beq.n	8001732 <Relay_control+0xe6>
 8001708:	2b02      	cmp	r3, #2
 800170a:	d009      	beq.n	8001720 <Relay_control+0xd4>
 800170c:	e01a      	b.n	8001744 <Relay_control+0xf8>
	{
	case 3:
		if (state==1){
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <Relay_control+0xce>
			Relay_address=0x5; //OUT6
 8001714:	2305      	movs	r3, #5
 8001716:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x4; //OUT5
		} break;
 8001718:	e014      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x4; //OUT5
 800171a:	2304      	movs	r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
		} break;
 800171e:	e011      	b.n	8001744 <Relay_control+0xf8>
	case 2:
		if (state==1){
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <Relay_control+0xe0>
			Relay_address=0x3; //OUT4
 8001726:	2303      	movs	r3, #3
 8001728:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x2; //OUT3
		} break;
 800172a:	e00b      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x2; //OUT3
 800172c:	2302      	movs	r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
		} break;
 8001730:	e008      	b.n	8001744 <Relay_control+0xf8>
	case 1:
		if (state==1){
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <Relay_control+0xf2>
			Relay_address=0x1; //OUT2
 8001738:	2301      	movs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x0; //OUT1
		} break;
 800173c:	e001      	b.n	8001742 <Relay_control+0xf6>
			Relay_address=0x0; //OUT1
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
		} break;
 8001742:	bf00      	nop
	}

	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	2102      	movs	r1, #2
 8001752:	4829      	ldr	r0, [pc, #164]	; (80017f8 <Relay_control+0x1ac>)
 8001754:	f003 f9b7 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	105b      	asrs	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	2104      	movs	r1, #4
 8001768:	4823      	ldr	r0, [pc, #140]	; (80017f8 <Relay_control+0x1ac>)
 800176a:	f003 f9ac 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	109b      	asrs	r3, r3, #2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	2108      	movs	r1, #8
 800177e:	481e      	ldr	r0, [pc, #120]	; (80017f8 <Relay_control+0x1ac>)
 8001780:	f003 f9a1 	bl	8004ac6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 1); // LVL 1
 8001784:	2201      	movs	r2, #1
 8001786:	2101      	movs	r1, #1
 8001788:	481b      	ldr	r0, [pc, #108]	; (80017f8 <Relay_control+0x1ac>)
 800178a:	f003 f99c 	bl	8004ac6 <HAL_GPIO_WritePin>

	HAL_Delay(1); // wait 1ms
 800178e:	2001      	movs	r0, #1
 8001790:	f002 fb34 	bl	8003dfc <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179a:	4818      	ldr	r0, [pc, #96]	; (80017fc <Relay_control+0x1b0>)
 800179c:	f003 f993 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 80017a0:	2001      	movs	r0, #1
 80017a2:	f002 fb2b 	bl	8003dfc <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <Relay_control+0x1b0>)
 80017ae:	f003 f98a 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_Delay(50); // wait 50ms
 80017b2:	2032      	movs	r0, #50	; 0x32
 80017b4:	f002 fb22 	bl	8003dfc <HAL_Delay>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 80017b8:	2200      	movs	r2, #0
 80017ba:	2101      	movs	r1, #1
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <Relay_control+0x1ac>)
 80017be:	f003 f982 	bl	8004ac6 <HAL_GPIO_WritePin>

	HAL_Delay(1); // wait 1ms
 80017c2:	2001      	movs	r0, #1
 80017c4:	f002 fb1a 	bl	8003dfc <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <Relay_control+0x1b0>)
 80017d0:	f003 f979 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 80017d4:	2001      	movs	r0, #1
 80017d6:	f002 fb11 	bl	8003dfc <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e0:	4806      	ldr	r0, [pc, #24]	; (80017fc <Relay_control+0x1b0>)
 80017e2:	f003 f970 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 80017e6:	2001      	movs	r0, #1
 80017e8:	f002 fb08 	bl	8003dfc <HAL_Delay>
 80017ec:	e000      	b.n	80017f0 <Relay_control+0x1a4>
	if(relay<1 || relay>3 || state>1) return;
 80017ee:	bf00      	nop

}
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020800 	.word	0x40020800

08001800 <CPLD_control>:
//==============================================================================================



//==============================================================================================
void CPLD_control(uint8_t divide_coeff){
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
	if(divide_coeff>0x0F) return;
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d840      	bhi.n	8001892 <CPLD_control+0x92>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin,  divide_coeff & 0x1     );
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	2101      	movs	r1, #1
 800181c:	481f      	ldr	r0, [pc, #124]	; (800189c <CPLD_control+0x9c>)
 800181e:	f003 f952 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin, (divide_coeff & 0x2) >>1);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	105b      	asrs	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	2102      	movs	r1, #2
 8001832:	481a      	ldr	r0, [pc, #104]	; (800189c <CPLD_control+0x9c>)
 8001834:	f003 f947 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (divide_coeff & 0x4) >>2);
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	109b      	asrs	r3, r3, #2
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	2104      	movs	r1, #4
 8001848:	4814      	ldr	r0, [pc, #80]	; (800189c <CPLD_control+0x9c>)
 800184a:	f003 f93c 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (divide_coeff & 0x8) >>3);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	10db      	asrs	r3, r3, #3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	2108      	movs	r1, #8
 800185e:	480f      	ldr	r0, [pc, #60]	; (800189c <CPLD_control+0x9c>)
 8001860:	f003 f931 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_SET); // Send strobe
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <CPLD_control+0xa0>)
 800186c:	f003 f92b 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001876:	480a      	ldr	r0, [pc, #40]	; (80018a0 <CPLD_control+0xa0>)
 8001878:	f003 f925 	bl	8004ac6 <HAL_GPIO_WritePin>

	if(divide_coeff==0x00)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <CPLD_control+0x8a>
	{
		cfg.LDACMODE=0;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <CPLD_control+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	709a      	strb	r2, [r3, #2]
 8001888:	e004      	b.n	8001894 <CPLD_control+0x94>
	}
	else
	{
		cfg.LDACMODE=1;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <CPLD_control+0xa4>)
 800188c:	2201      	movs	r2, #1
 800188e:	709a      	strb	r2, [r3, #2]
 8001890:	e000      	b.n	8001894 <CPLD_control+0x94>
	if(divide_coeff>0x0F) return;
 8001892:	bf00      	nop
	}
}
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020800 	.word	0x40020800
 80018a4:	20000878 	.word	0x20000878

080018a8 <DAC_Write>:



//==============================================================================================
void DAC_Write(uint32_t value)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <DAC_Write+0x64>)
 80018b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018b6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018c0:	f023 030f 	bic.w	r3, r3, #15
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <DAC_Write+0x64>)
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <DAC_Write+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <DAC_Write+0x64>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0c1b      	lsrs	r3, r3, #16
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <DAC_Write+0x68>)
 80018d8:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <DAC_Write+0x64>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <DAC_Write+0x68>)
 80018e2:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2110      	movs	r1, #16
 80018e8:	480a      	ldr	r0, [pc, #40]	; (8001914 <DAC_Write+0x6c>)
 80018ea:	f003 f8ec 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 80018ee:	2302      	movs	r3, #2
 80018f0:	2202      	movs	r2, #2
 80018f2:	4907      	ldr	r1, [pc, #28]	; (8001910 <DAC_Write+0x68>)
 80018f4:	4808      	ldr	r0, [pc, #32]	; (8001918 <DAC_Write+0x70>)
 80018f6:	f005 ffeb 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 80018fa:	2201      	movs	r2, #1
 80018fc:	2110      	movs	r1, #16
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <DAC_Write+0x6c>)
 8001900:	f003 f8e1 	bl	8004ac6 <HAL_GPIO_WritePin>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000870 	.word	0x20000870
 8001910:	20000874 	.word	0x20000874
 8001914:	40020000 	.word	0x40020000
 8001918:	200008a8 	.word	0x200008a8

0800191c <DAC_Write_FAST>:

//==============================================================================================
void DAC_Write_FAST(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2110      	movs	r1, #16
 8001924:	4807      	ldr	r0, [pc, #28]	; (8001944 <DAC_Write_FAST+0x28>)
 8001926:	f003 f8ce 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 800192a:	2302      	movs	r3, #2
 800192c:	2202      	movs	r2, #2
 800192e:	4906      	ldr	r1, [pc, #24]	; (8001948 <DAC_Write_FAST+0x2c>)
 8001930:	4806      	ldr	r0, [pc, #24]	; (800194c <DAC_Write_FAST+0x30>)
 8001932:	f005 ffcd 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001936:	2201      	movs	r2, #1
 8001938:	2110      	movs	r1, #16
 800193a:	4802      	ldr	r0, [pc, #8]	; (8001944 <DAC_Write_FAST+0x28>)
 800193c:	f003 f8c3 	bl	8004ac6 <HAL_GPIO_WritePin>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020000 	.word	0x40020000
 8001948:	20000874 	.word	0x20000874
 800194c:	200008a8 	.word	0x200008a8

08001950 <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

	DAC_tx_buffer=0x02000000; // Write CONFIG1
 8001954:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <DAC_SendInit+0xfc>)
 8001956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800195a:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 800195c:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <DAC_SendInit+0x100>)
 800195e:	7a1b      	ldrb	r3, [r3, #8]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	f003 0210 	and.w	r2, r3, #16
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <DAC_SendInit+0xfc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a37      	ldr	r2, [pc, #220]	; (8001a4c <DAC_SendInit+0xfc>)
 800196e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x06)<<6;
 8001970:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <DAC_SendInit+0x100>)
 8001972:	79db      	ldrb	r3, [r3, #7]
 8001974:	019b      	lsls	r3, r3, #6
 8001976:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <DAC_SendInit+0xfc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a32      	ldr	r2, [pc, #200]	; (8001a4c <DAC_SendInit+0xfc>)
 8001982:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 8001984:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <DAC_SendInit+0x100>)
 8001986:	799b      	ldrb	r3, [r3, #6]
 8001988:	029b      	lsls	r3, r3, #10
 800198a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800198e:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <DAC_SendInit+0xfc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a2d      	ldr	r2, [pc, #180]	; (8001a4c <DAC_SendInit+0xfc>)
 8001996:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 8001998:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <DAC_SendInit+0x100>)
 800199a:	795b      	ldrb	r3, [r3, #5]
 800199c:	02db      	lsls	r3, r3, #11
 800199e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80019a2:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <DAC_SendInit+0xfc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <DAC_SendInit+0xfc>)
 80019aa:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <DAC_SendInit+0x100>)
 80019ae:	791b      	ldrb	r3, [r3, #4]
 80019b0:	031b      	lsls	r3, r3, #12
 80019b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <DAC_SendInit+0xfc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a23      	ldr	r2, [pc, #140]	; (8001a4c <DAC_SendInit+0xfc>)
 80019be:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <DAC_SendInit+0x100>)
 80019c2:	78db      	ldrb	r3, [r3, #3]
 80019c4:	035b      	lsls	r3, r3, #13
 80019c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <DAC_SendInit+0xfc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <DAC_SendInit+0xfc>)
 80019d2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 80019d4:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <DAC_SendInit+0x100>)
 80019d6:	789b      	ldrb	r3, [r3, #2]
 80019d8:	039b      	lsls	r3, r3, #14
 80019da:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80019de:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <DAC_SendInit+0xfc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <DAC_SendInit+0xfc>)
 80019e6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <DAC_SendInit+0x100>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	049b      	lsls	r3, r3, #18
 80019ee:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <DAC_SendInit+0xfc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <DAC_SendInit+0xfc>)
 80019fa:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <DAC_SendInit+0x100>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	05db      	lsls	r3, r3, #23
 8001a02:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <DAC_SendInit+0xfc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <DAC_SendInit+0xfc>)
 8001a0e:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <DAC_SendInit+0xfc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <DAC_SendInit+0x104>)
 8001a1a:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <DAC_SendInit+0xfc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <DAC_SendInit+0x104>)
 8001a24:	805a      	strh	r2, [r3, #2]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2110      	movs	r1, #16
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <DAC_SendInit+0x108>)
 8001a2c:	f003 f84b 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 8001a30:	2305      	movs	r3, #5
 8001a32:	2202      	movs	r2, #2
 8001a34:	4907      	ldr	r1, [pc, #28]	; (8001a54 <DAC_SendInit+0x104>)
 8001a36:	4809      	ldr	r0, [pc, #36]	; (8001a5c <DAC_SendInit+0x10c>)
 8001a38:	f005 ff4a 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2110      	movs	r1, #16
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <DAC_SendInit+0x108>)
 8001a42:	f003 f840 	bl	8004ac6 <HAL_GPIO_WritePin>

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000870 	.word	0x20000870
 8001a50:	20000878 	.word	0x20000878
 8001a54:	20000874 	.word	0x20000874
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	200008a8 	.word	0x200008a8

08001a60 <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
	uint32_t DAC_tx_buffer;
	uint16_t DAC_tx_tmp_buffer[2];

	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	813b      	strh	r3, [r7, #8]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	817b      	strh	r3, [r7, #10]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	82fb      	strh	r3, [r7, #22]

	//	DDS_prepare_to_tempcal();

	//CPLD_control(0x0); // Disable LDAC signal

	cfg.EN_TMP_CAL=1;
 8001a72:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <DAC_TEMP_CAL+0xe0>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
	DAC_SendInit();
 8001a78:	f7ff ff6a 	bl	8001950 <DAC_SendInit>
	HAL_Delay(10);
 8001a7c:	200a      	movs	r0, #10
 8001a7e:	f002 f9bd 	bl	8003dfc <HAL_Delay>

	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <DAC_TEMP_CAL+0xe4>)
 8001a84:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	0c1b      	lsrs	r3, r3, #16
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	81bb      	strh	r3, [r7, #12]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	81fb      	strh	r3, [r7, #14]

	DAC_tx_buffer=0x85000000; // read status register
 8001a94:	f04f 4305 	mov.w	r3, #2231369728	; 0x85000000
 8001a98:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	80bb      	strh	r3, [r7, #4]
	DAC_tx_tmp_buffer2[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4826      	ldr	r0, [pc, #152]	; (8001b48 <DAC_TEMP_CAL+0xe8>)
 8001aae:	f003 f80a 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001ab2:	f107 010c 	add.w	r1, r7, #12
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4824      	ldr	r0, [pc, #144]	; (8001b4c <DAC_TEMP_CAL+0xec>)
 8001abc:	f005 ff08 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2110      	movs	r1, #16
 8001ac4:	4820      	ldr	r0, [pc, #128]	; (8001b48 <DAC_TEMP_CAL+0xe8>)
 8001ac6:	f002 fffe 	bl	8004ac6 <HAL_GPIO_WritePin>

	HAL_Delay(500); // Wait some time....
 8001aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ace:	f002 f995 	bl	8003dfc <HAL_Delay>

	do{ // Check complete flag
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2110      	movs	r1, #16
 8001ad6:	481c      	ldr	r0, [pc, #112]	; (8001b48 <DAC_TEMP_CAL+0xe8>)
 8001ad8:	f002 fff5 	bl	8004ac6 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 8001adc:	1d39      	adds	r1, r7, #4
 8001ade:	2302      	movs	r3, #2
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	481a      	ldr	r0, [pc, #104]	; (8001b4c <DAC_TEMP_CAL+0xec>)
 8001ae4:	f005 fef4 	bl	80078d0 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2110      	movs	r1, #16
 8001aec:	4816      	ldr	r0, [pc, #88]	; (8001b48 <DAC_TEMP_CAL+0xe8>)
 8001aee:	f002 ffea 	bl	8004ac6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2110      	movs	r1, #16
 8001af6:	4814      	ldr	r0, [pc, #80]	; (8001b48 <DAC_TEMP_CAL+0xe8>)
 8001af8:	f002 ffe5 	bl	8004ac6 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 2, 2);
 8001afc:	f107 0108 	add.w	r1, r7, #8
 8001b00:	2302      	movs	r3, #2
 8001b02:	2202      	movs	r2, #2
 8001b04:	4811      	ldr	r0, [pc, #68]	; (8001b4c <DAC_TEMP_CAL+0xec>)
 8001b06:	f006 f81f 	bl	8007b48 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2110      	movs	r1, #16
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <DAC_TEMP_CAL+0xe8>)
 8001b10:	f002 ffd9 	bl	8004ac6 <HAL_GPIO_WritePin>
		ALM=(spi_receive[1] & 0x1000) >> 12;
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	131b      	asrs	r3, r3, #12
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	82fb      	strh	r3, [r7, #22]
		if(ALM!=1)HAL_Delay(1000);
 8001b20:	8afb      	ldrh	r3, [r7, #22]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d003      	beq.n	8001b2e <DAC_TEMP_CAL+0xce>
 8001b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b2a:	f002 f967 	bl	8003dfc <HAL_Delay>
	}while(ALM!=1);
 8001b2e:	8afb      	ldrh	r3, [r7, #22]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d1ce      	bne.n	8001ad2 <DAC_TEMP_CAL+0x72>
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000878 	.word	0x20000878
 8001b44:	04000100 	.word	0x04000100
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	200008a8 	.word	0x200008a8

08001b50 <DDS_Calculation>:

void DDS_Calculation(void)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
	float hw_limit=1000; // 1(256)kHz hardware optimized limit
 8001b56:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <DDS_Calculation+0x1f4>)
 8001b58:	613b      	str	r3, [r7, #16]
	float dac_counts=1048576;
 8001b5a:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8001b5e:	60fb      	str	r3, [r7, #12]
	float corr_coeff;
	float dac_tmp=DAC_code;
 8001b60:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <DDS_Calculation+0x1f8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff f8d7 	bl	8000d18 <__aeabi_ui2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	60bb      	str	r3, [r7, #8]
	float second_left;
	uint32_t codes_left;

	corr_coeff=corr_coeff_1*dac_tmp*dac_tmp;
 8001b6e:	4b77      	ldr	r3, [pc, #476]	; (8001d4c <DDS_Calculation+0x1fc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68b9      	ldr	r1, [r7, #8]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f927 	bl	8000dc8 <__aeabi_fmul>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	68b8      	ldr	r0, [r7, #8]
 8001b80:	f7ff f922 	bl	8000dc8 <__aeabi_fmul>
 8001b84:	4603      	mov	r3, r0
 8001b86:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_2*dac_tmp;
 8001b88:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <DDS_Calculation+0x200>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f91a 	bl	8000dc8 <__aeabi_fmul>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4619      	mov	r1, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff f80d 	bl	8000bb8 <__addsf3>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_3;
 8001ba2:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <DDS_Calculation+0x204>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff f805 	bl	8000bb8 <__addsf3>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	607b      	str	r3, [r7, #4]

	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001bb2:	4b69      	ldr	r3, [pc, #420]	; (8001d58 <DDS_Calculation+0x208>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a69      	ldr	r2, [pc, #420]	; (8001d5c <DDS_Calculation+0x20c>)
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f9b7 	bl	8000f30 <__aeabi_fdiv>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff f9b2 	bl	8000f30 <__aeabi_fdiv>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <DDS_Calculation+0x210>)
 8001bd2:	601a      	str	r2, [r3, #0]

	if(DDS_target_frequecny>hw_limit)
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <DDS_Calculation+0x210>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	6938      	ldr	r0, [r7, #16]
 8001bdc:	f7ff fa92 	bl	8001104 <__aeabi_fcmplt>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d02e      	beq.n	8001c44 <DDS_Calculation+0xf4>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 8001be6:	4b5e      	ldr	r3, [pc, #376]	; (8001d60 <DDS_Calculation+0x210>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6939      	ldr	r1, [r7, #16]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f99f 	bl	8000f30 <__aeabi_fdiv>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff faad 	bl	8001154 <__aeabi_f2uiz>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a59      	ldr	r2, [pc, #356]	; (8001d64 <DDS_Calculation+0x214>)
 8001bfe:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001c00:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <DDS_Calculation+0x208>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a55      	ldr	r2, [pc, #340]	; (8001d5c <DDS_Calculation+0x20c>)
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f990 	bl	8000f30 <__aeabi_fdiv>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4619      	mov	r1, r3
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7ff f98b 	bl	8000f30 <__aeabi_fdiv>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <DDS_Calculation+0x210>)
 8001c20:	601a      	str	r2, [r3, #0]
		DDS_target_frequecny/=(float)DDS_target_multipiller;
 8001c22:	4b4f      	ldr	r3, [pc, #316]	; (8001d60 <DDS_Calculation+0x210>)
 8001c24:	681c      	ldr	r4, [r3, #0]
 8001c26:	4b4f      	ldr	r3, [pc, #316]	; (8001d64 <DDS_Calculation+0x214>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f874 	bl	8000d18 <__aeabi_ui2f>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4619      	mov	r1, r3
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7ff f97b 	bl	8000f30 <__aeabi_fdiv>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b48      	ldr	r3, [pc, #288]	; (8001d60 <DDS_Calculation+0x210>)
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e002      	b.n	8001c4a <DDS_Calculation+0xfa>
	} else DDS_target_multipiller = 1;
 8001c44:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <DDS_Calculation+0x214>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

	DDS_FTW=(((DDS_target_frequecny/corr_coeff)*((1<<CPLD_WORD)+1))/DDS_clock_frequecny)*(float)0xFFFFFFFF;
 8001c4a:	4b45      	ldr	r3, [pc, #276]	; (8001d60 <DDS_Calculation+0x210>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f96d 	bl	8000f30 <__aeabi_fdiv>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461c      	mov	r4, r3
 8001c5a:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <DDS_Calculation+0x218>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2301      	movs	r3, #1
 8001c62:	4093      	lsls	r3, r2
 8001c64:	3301      	adds	r3, #1
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f85a 	bl	8000d20 <__aeabi_i2f>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4620      	mov	r0, r4
 8001c72:	f7ff f8a9 	bl	8000dc8 <__aeabi_fmul>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <DDS_Calculation+0x21c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4610      	mov	r0, r2
 8001c82:	f7ff f955 	bl	8000f30 <__aeabi_fdiv>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f89b 	bl	8000dc8 <__aeabi_fmul>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <DDS_Calculation+0x220>)
 8001c98:	601a      	str	r2, [r3, #0]

	if(DAC_code_direction)
 8001c9a:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <DDS_Calculation+0x224>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <DDS_Calculation+0x162>
	{
		codes_left=0xFFFFF-DAC_code;
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <DDS_Calculation+0x1f8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8001caa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e002      	b.n	8001cb8 <DDS_Calculation+0x168>
	}
	else
	{
		codes_left=DAC_code;
 8001cb2:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <DDS_Calculation+0x1f8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	617b      	str	r3, [r7, #20]
	}

	second_left=codes_left/DDS_target_multipiller/DDS_target_frequecny;
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <DDS_Calculation+0x214>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f828 	bl	8000d18 <__aeabi_ui2f>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <DDS_Calculation+0x210>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f7ff f92d 	bl	8000f30 <__aeabi_fdiv>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	603b      	str	r3, [r7, #0]
	eta_second=(uint32_t)second_left % 60;
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f7ff fa3a 	bl	8001154 <__aeabi_f2uiz>
 8001ce0:	4601      	mov	r1, r0
 8001ce2:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <DDS_Calculation+0x228>)
 8001ce4:	fba3 2301 	umull	r2, r3, r3, r1
 8001ce8:	095a      	lsrs	r2, r3, #5
 8001cea:	4613      	mov	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	1aca      	subs	r2, r1, r3
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <DDS_Calculation+0x22c>)
 8001cf8:	701a      	strb	r2, [r3, #0]
	eta_minute=(uint32_t)(second_left / 60) % 60;
 8001cfa:	4921      	ldr	r1, [pc, #132]	; (8001d80 <DDS_Calculation+0x230>)
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f7ff f917 	bl	8000f30 <__aeabi_fdiv>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fa25 	bl	8001154 <__aeabi_f2uiz>
 8001d0a:	4601      	mov	r1, r0
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <DDS_Calculation+0x228>)
 8001d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8001d12:	095a      	lsrs	r2, r3, #5
 8001d14:	4613      	mov	r3, r2
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	1aca      	subs	r2, r1, r3
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <DDS_Calculation+0x234>)
 8001d22:	701a      	strb	r2, [r3, #0]
	eta_hours=(uint32_t) second_left / 3600;
 8001d24:	6838      	ldr	r0, [r7, #0]
 8001d26:	f7ff fa15 	bl	8001154 <__aeabi_f2uiz>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <DDS_Calculation+0x238>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0adb      	lsrs	r3, r3, #11
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <DDS_Calculation+0x23c>)
 8001d38:	701a      	strb	r2, [r3, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	447a0000 	.word	0x447a0000
 8001d48:	200008a0 	.word	0x200008a0
 8001d4c:	20000704 	.word	0x20000704
 8001d50:	20000708 	.word	0x20000708
 8001d54:	2000070c 	.word	0x2000070c
 8001d58:	20000894 	.word	0x20000894
 8001d5c:	20000890 	.word	0x20000890
 8001d60:	2000088c 	.word	0x2000088c
 8001d64:	2000038c 	.word	0x2000038c
 8001d68:	20000388 	.word	0x20000388
 8001d6c:	20000390 	.word	0x20000390
 8001d70:	20000888 	.word	0x20000888
 8001d74:	200008a4 	.word	0x200008a4
 8001d78:	88888889 	.word	0x88888889
 8001d7c:	20000884 	.word	0x20000884
 8001d80:	42700000 	.word	0x42700000
 8001d84:	20000883 	.word	0x20000883
 8001d88:	91a2b3c5 	.word	0x91a2b3c5
 8001d8c:	20000882 	.word	0x20000882

08001d90 <DDS_Init>:

//==============================================================================================
void DDS_Init(void)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];
	DDS_Calculation();
 8001d96:	f7ff fedb 	bl	8001b50 <DDS_Calculation>

	HAL_Delay(100);
 8001d9a:	2064      	movs	r0, #100	; 0x64
 8001d9c:	f002 f82e 	bl	8003dfc <HAL_Delay>

	//CONTROL REGISTER WRITE SLEEP =1 ,	RESET = 1,	CLR = 1
	DDS_tx_buffer[0]=0xC000; // Control DDS (D15=1, D14=1)
 8001da0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001da4:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=0x7 << 11; //  SLEEP = 1 , RESET = 1,	CLR = 1
 8001da6:	88bb      	ldrh	r3, [r7, #4]
 8001da8:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001db6:	4861      	ldr	r0, [pc, #388]	; (8001f3c <DDS_Init+0x1ac>)
 8001db8:	f002 fe85 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001dbc:	1d39      	adds	r1, r7, #4
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	485f      	ldr	r0, [pc, #380]	; (8001f40 <DDS_Init+0x1b0>)
 8001dc4:	f005 fd84 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dce:	485b      	ldr	r0, [pc, #364]	; (8001f3c <DDS_Init+0x1ac>)
 8001dd0:	f002 fe79 	bl	8004ac6 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001dd4:	2064      	movs	r0, #100	; 0x64
 8001dd6:	f002 f811 	bl	8003dfc <HAL_Delay>
	//DO NOT !!! SET SYNC AND/OR SELSRC TO 1

	//WRITE INITIAL DATA

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001dda:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001dde:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001de0:	88bc      	ldrh	r4, [r7, #4]
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <DDS_Init+0x1b4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f9b4 	bl	8001154 <__aeabi_f2uiz>
 8001dec:	4603      	mov	r3, r0
 8001dee:	0e1b      	lsrs	r3, r3, #24
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4423      	add	r3, r4
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dfe:	484f      	ldr	r0, [pc, #316]	; (8001f3c <DDS_Init+0x1ac>)
 8001e00:	f002 fe61 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e04:	1d39      	adds	r1, r7, #4
 8001e06:	2305      	movs	r3, #5
 8001e08:	2201      	movs	r2, #1
 8001e0a:	484d      	ldr	r0, [pc, #308]	; (8001f40 <DDS_Init+0x1b0>)
 8001e0c:	f005 fd60 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e16:	4849      	ldr	r0, [pc, #292]	; (8001f3c <DDS_Init+0x1ac>)
 8001e18:	f002 fe55 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001e1c:	2032      	movs	r0, #50	; 0x32
 8001e1e:	f001 ffed 	bl	8003dfc <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001e22:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001e26:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001e28:	88bc      	ldrh	r4, [r7, #4]
 8001e2a:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <DDS_Init+0x1b4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f990 	bl	8001154 <__aeabi_f2uiz>
 8001e34:	4603      	mov	r3, r0
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4423      	add	r3, r4
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4a:	483c      	ldr	r0, [pc, #240]	; (8001f3c <DDS_Init+0x1ac>)
 8001e4c:	f002 fe3b 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e50:	1d39      	adds	r1, r7, #4
 8001e52:	2305      	movs	r3, #5
 8001e54:	2201      	movs	r2, #1
 8001e56:	483a      	ldr	r0, [pc, #232]	; (8001f40 <DDS_Init+0x1b0>)
 8001e58:	f005 fd3a 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e62:	4836      	ldr	r0, [pc, #216]	; (8001f3c <DDS_Init+0x1ac>)
 8001e64:	f002 fe2f 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001e68:	2032      	movs	r0, #50	; 0x32
 8001e6a:	f001 ffc7 	bl	8003dfc <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001e6e:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001e72:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001e74:	88bc      	ldrh	r4, [r7, #4]
 8001e76:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <DDS_Init+0x1b4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f96a 	bl	8001154 <__aeabi_f2uiz>
 8001e80:	4603      	mov	r3, r0
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4423      	add	r3, r4
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e96:	4829      	ldr	r0, [pc, #164]	; (8001f3c <DDS_Init+0x1ac>)
 8001e98:	f002 fe15 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e9c:	1d39      	adds	r1, r7, #4
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4827      	ldr	r0, [pc, #156]	; (8001f40 <DDS_Init+0x1b0>)
 8001ea4:	f005 fd14 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eae:	4823      	ldr	r0, [pc, #140]	; (8001f3c <DDS_Init+0x1ac>)
 8001eb0:	f002 fe09 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001eb4:	2032      	movs	r0, #50	; 0x32
 8001eb6:	f001 ffa1 	bl	8003dfc <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ebe:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001ec0:	88bc      	ldrh	r4, [r7, #4]
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <DDS_Init+0x1b4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f944 	bl	8001154 <__aeabi_f2uiz>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4423      	add	r3, r4
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001eda:	2200      	movs	r2, #0
 8001edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee0:	4816      	ldr	r0, [pc, #88]	; (8001f3c <DDS_Init+0x1ac>)
 8001ee2:	f002 fdf0 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ee6:	1d39      	adds	r1, r7, #4
 8001ee8:	2305      	movs	r3, #5
 8001eea:	2201      	movs	r2, #1
 8001eec:	4814      	ldr	r0, [pc, #80]	; (8001f40 <DDS_Init+0x1b0>)
 8001eee:	f005 fcef 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef8:	4810      	ldr	r0, [pc, #64]	; (8001f3c <DDS_Init+0x1ac>)
 8001efa:	f002 fde4 	bl	8004ac6 <HAL_GPIO_WritePin>


	HAL_Delay(100);
 8001efe:	2064      	movs	r0, #100	; 0x64
 8001f00:	f001 ff7c 	bl	8003dfc <HAL_Delay>

	// CONTROL REGISTER WRITE, 	SLEEP = 0,	RESET = 0, CLR = 0

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Exit DAC from Sleep+Reset mode
 8001f04:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f08:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f10:	480a      	ldr	r0, [pc, #40]	; (8001f3c <DDS_Init+0x1ac>)
 8001f12:	f002 fdd8 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f16:	1d39      	adds	r1, r7, #4
 8001f18:	2305      	movs	r3, #5
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4808      	ldr	r0, [pc, #32]	; (8001f40 <DDS_Init+0x1b0>)
 8001f1e:	f005 fcd7 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <DDS_Init+0x1ac>)
 8001f2a:	f002 fdcc 	bl	8004ac6 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001f2e:	2064      	movs	r0, #100	; 0x64
 8001f30:	f001 ff64 	bl	8003dfc <HAL_Delay>

}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd90      	pop	{r4, r7, pc}
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	20000900 	.word	0x20000900
 8001f44:	20000888 	.word	0x20000888

08001f48 <DDS_Update>:

//==============================================================================================
void DDS_Update(void)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];

	DDS_Calculation();
 8001f4e:	f7ff fdff 	bl	8001b50 <DDS_Calculation>

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001f52:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001f56:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001f58:	88bc      	ldrh	r4, [r7, #4]
 8001f5a:	4b44      	ldr	r3, [pc, #272]	; (800206c <DDS_Update+0x124>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f8f8 	bl	8001154 <__aeabi_f2uiz>
 8001f64:	4603      	mov	r3, r0
 8001f66:	0e1b      	lsrs	r3, r3, #24
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4423      	add	r3, r4
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f70:	2200      	movs	r2, #0
 8001f72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f76:	483e      	ldr	r0, [pc, #248]	; (8002070 <DDS_Update+0x128>)
 8001f78:	f002 fda5 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f7c:	1d39      	adds	r1, r7, #4
 8001f7e:	2305      	movs	r3, #5
 8001f80:	2201      	movs	r2, #1
 8001f82:	483c      	ldr	r0, [pc, #240]	; (8002074 <DDS_Update+0x12c>)
 8001f84:	f005 fca4 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f8e:	4838      	ldr	r0, [pc, #224]	; (8002070 <DDS_Update+0x128>)
 8001f90:	f002 fd99 	bl	8004ac6 <HAL_GPIO_WritePin>
//	HAL_Delay(1);

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001f94:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001f98:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001f9a:	88bc      	ldrh	r4, [r7, #4]
 8001f9c:	4b33      	ldr	r3, [pc, #204]	; (800206c <DDS_Update+0x124>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff f8d7 	bl	8001154 <__aeabi_f2uiz>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4423      	add	r3, r4
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fbc:	482c      	ldr	r0, [pc, #176]	; (8002070 <DDS_Update+0x128>)
 8001fbe:	f002 fd82 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001fc2:	1d39      	adds	r1, r7, #4
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	482a      	ldr	r0, [pc, #168]	; (8002074 <DDS_Update+0x12c>)
 8001fca:	f005 fc81 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd4:	4826      	ldr	r0, [pc, #152]	; (8002070 <DDS_Update+0x128>)
 8001fd6:	f002 fd76 	bl	8004ac6 <HAL_GPIO_WritePin>
//	HAL_Delay(1);

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001fda:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001fde:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001fe0:	88bc      	ldrh	r4, [r7, #4]
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <DDS_Update+0x124>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f8b4 	bl	8001154 <__aeabi_f2uiz>
 8001fec:	4603      	mov	r3, r0
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	4423      	add	r3, r4
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002002:	481b      	ldr	r0, [pc, #108]	; (8002070 <DDS_Update+0x128>)
 8002004:	f002 fd5f 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8002008:	1d39      	adds	r1, r7, #4
 800200a:	2305      	movs	r3, #5
 800200c:	2201      	movs	r2, #1
 800200e:	4819      	ldr	r0, [pc, #100]	; (8002074 <DDS_Update+0x12c>)
 8002010:	f005 fc5e 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002014:	2201      	movs	r2, #1
 8002016:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201a:	4815      	ldr	r0, [pc, #84]	; (8002070 <DDS_Update+0x128>)
 800201c:	f002 fd53 	bl	8004ac6 <HAL_GPIO_WritePin>
//	HAL_Delay(1);

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8002020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002024:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8002026:	88bc      	ldrh	r4, [r7, #4]
 8002028:	4b10      	ldr	r3, [pc, #64]	; (800206c <DDS_Update+0x124>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f891 	bl	8001154 <__aeabi_f2uiz>
 8002032:	4603      	mov	r3, r0
 8002034:	b29b      	uxth	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	b29b      	uxth	r3, r3
 800203a:	4423      	add	r3, r4
 800203c:	b29b      	uxth	r3, r3
 800203e:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002046:	480a      	ldr	r0, [pc, #40]	; (8002070 <DDS_Update+0x128>)
 8002048:	f002 fd3d 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 800204c:	1d39      	adds	r1, r7, #4
 800204e:	2305      	movs	r3, #5
 8002050:	2201      	movs	r2, #1
 8002052:	4808      	ldr	r0, [pc, #32]	; (8002074 <DDS_Update+0x12c>)
 8002054:	f005 fc3c 	bl	80078d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002058:	2201      	movs	r2, #1
 800205a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <DDS_Update+0x128>)
 8002060:	f002 fd31 	bl	8004ac6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
	HAL_Delay(1);
*/
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}
 800206c:	20000888 	.word	0x20000888
 8002070:	40020400 	.word	0x40020400
 8002074:	20000900 	.word	0x20000900

08002078 <LcdClear_massive>:
  LcdUpdate();
}


void LcdClear_massive(void)     //Clears the display
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
  int i = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]

  for (i = 0; i < LCD_CACHSIZE; i++)
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	e007      	b.n	8002098 <LcdClear_massive+0x20>
    LcdCache[i] = 0;            //забиваем всю память 0
 8002088:	4a08      	ldr	r2, [pc, #32]	; (80020ac <LcdClear_massive+0x34>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < LCD_CACHSIZE; i++)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3301      	adds	r3, #1
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2bc7      	cmp	r3, #199	; 0xc7
 800209c:	ddf4      	ble.n	8002088 <LcdClear_massive+0x10>
}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000710 	.word	0x20000710

080020b0 <pulse_e>:
//////////////////////////////////////////////////////////////////////////////////////



void pulse_e() //импульс на вход Е индикатора
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
//    PIN_ON(PIN_E);
	//    delay_us(100);
	//    PIN_OFF(PIN_E);
	//    delay_us(39);

	HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_SET);//    PIN_ON(PIN_E);
 80020b4:	2201      	movs	r2, #1
 80020b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <pulse_e+0x20>)
 80020bc:	f002 fd03 	bl	8004ac6 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 80020c0:	2200      	movs	r2, #0
 80020c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020c6:	4802      	ldr	r0, [pc, #8]	; (80020d0 <pulse_e+0x20>)
 80020c8:	f002 fcfd 	bl	8004ac6 <HAL_GPIO_WritePin>
    //HAL_Delay(1);
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40020400 	.word	0x40020400

080020d4 <send_nibble>:

void send_nibble(unsigned char data) //полубайтовый вывод
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  //выводим половину байта на соответствующие контакты
  if(data & 0x01)
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <send_nibble+0x20>
	HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB4);
 80020e8:	2201      	movs	r2, #1
 80020ea:	2104      	movs	r1, #4
 80020ec:	481f      	ldr	r0, [pc, #124]	; (800216c <send_nibble+0x98>)
 80020ee:	f002 fcea 	bl	8004ac6 <HAL_GPIO_WritePin>
 80020f2:	e004      	b.n	80020fe <send_nibble+0x2a>
  else
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2104      	movs	r1, #4
 80020f8:	481c      	ldr	r0, [pc, #112]	; (800216c <send_nibble+0x98>)
 80020fa:	f002 fce4 	bl	8004ac6 <HAL_GPIO_WritePin>

  if(data & 0x02)
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <send_nibble+0x40>
		HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB5);
 8002108:	2201      	movs	r2, #1
 800210a:	2108      	movs	r1, #8
 800210c:	4817      	ldr	r0, [pc, #92]	; (800216c <send_nibble+0x98>)
 800210e:	f002 fcda 	bl	8004ac6 <HAL_GPIO_WritePin>
 8002112:	e004      	b.n	800211e <send_nibble+0x4a>
	  else
	    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 8002114:	2200      	movs	r2, #0
 8002116:	2108      	movs	r1, #8
 8002118:	4814      	ldr	r0, [pc, #80]	; (800216c <send_nibble+0x98>)
 800211a:	f002 fcd4 	bl	8004ac6 <HAL_GPIO_WritePin>

  if(data & 0x04)
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <send_nibble+0x60>
		HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB6);
 8002128:	2201      	movs	r2, #1
 800212a:	2110      	movs	r1, #16
 800212c:	480f      	ldr	r0, [pc, #60]	; (800216c <send_nibble+0x98>)
 800212e:	f002 fcca 	bl	8004ac6 <HAL_GPIO_WritePin>
 8002132:	e004      	b.n	800213e <send_nibble+0x6a>
	  else
	    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 8002134:	2200      	movs	r2, #0
 8002136:	2110      	movs	r1, #16
 8002138:	480c      	ldr	r0, [pc, #48]	; (800216c <send_nibble+0x98>)
 800213a:	f002 fcc4 	bl	8004ac6 <HAL_GPIO_WritePin>

  if(data & 0x08)
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <send_nibble+0x80>
		HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB7);
 8002148:	2201      	movs	r2, #1
 800214a:	2120      	movs	r1, #32
 800214c:	4807      	ldr	r0, [pc, #28]	; (800216c <send_nibble+0x98>)
 800214e:	f002 fcba 	bl	8004ac6 <HAL_GPIO_WritePin>
 8002152:	e004      	b.n	800215e <send_nibble+0x8a>
	  else
	    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 8002154:	2200      	movs	r2, #0
 8002156:	2120      	movs	r1, #32
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <send_nibble+0x98>)
 800215a:	f002 fcb4 	bl	8004ac6 <HAL_GPIO_WritePin>

  pulse_e(); //чтобы индикатор проглотил данные
 800215e:	f7ff ffa7 	bl	80020b0 <pulse_e>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40020400 	.word	0x40020400

08002170 <send_data>:

void send_data(unsigned char data) //вывод 2хполбайта на индикатор
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  //Первым шлем старшие полбайта: по инструкции
  //сначала столбец, потом строка таблицы знакогенератора
  send_nibble((data>>4) & 0x0F);
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	b2db      	uxtb	r3, r3
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ffa7 	bl	80020d4 <send_nibble>
  send_nibble(data & 0x0F);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ffa0 	bl	80020d4 <send_nibble>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <check_busy_flag>:

int check_busy_flag(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a2:	463b      	mov	r3, r7
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
	GPIO_PinState status;

	lcd44780_RW_1; // Read
 80021b0:	2201      	movs	r2, #1
 80021b2:	2102      	movs	r1, #2
 80021b4:	4822      	ldr	r0, [pc, #136]	; (8002240 <check_busy_flag+0xa4>)
 80021b6:	f002 fc86 	bl	8004ac6 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 80021ba:	2320      	movs	r3, #32
 80021bc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c6:	2302      	movs	r3, #2
 80021c8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ca:	463b      	mov	r3, r7
 80021cc:	4619      	mov	r1, r3
 80021ce:	481c      	ldr	r0, [pc, #112]	; (8002240 <check_busy_flag+0xa4>)
 80021d0:	f002 fae2 	bl	8004798 <HAL_GPIO_Init>

	lcd44780_E_1;
 80021d4:	2201      	movs	r2, #1
 80021d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021da:	4819      	ldr	r0, [pc, #100]	; (8002240 <check_busy_flag+0xa4>)
 80021dc:	f002 fc73 	bl	8004ac6 <HAL_GPIO_WritePin>
	status=HAL_GPIO_ReadPin(Display_DB7_GPIO_Port, Display_DB7_Pin);
 80021e0:	2120      	movs	r1, #32
 80021e2:	4817      	ldr	r0, [pc, #92]	; (8002240 <check_busy_flag+0xa4>)
 80021e4:	f002 fc58 	bl	8004a98 <HAL_GPIO_ReadPin>
 80021e8:	4603      	mov	r3, r0
 80021ea:	75fb      	strb	r3, [r7, #23]
	lcd44780_E_0;
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f2:	4813      	ldr	r0, [pc, #76]	; (8002240 <check_busy_flag+0xa4>)
 80021f4:	f002 fc67 	bl	8004ac6 <HAL_GPIO_WritePin>
	lcd44780_E_1;
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021fe:	4810      	ldr	r0, [pc, #64]	; (8002240 <check_busy_flag+0xa4>)
 8002200:	f002 fc61 	bl	8004ac6 <HAL_GPIO_WritePin>
	lcd44780_E_0;
 8002204:	2200      	movs	r2, #0
 8002206:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800220a:	480d      	ldr	r0, [pc, #52]	; (8002240 <check_busy_flag+0xa4>)
 800220c:	f002 fc5b 	bl	8004ac6 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 8002210:	2320      	movs	r3, #32
 8002212:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002214:	2311      	movs	r3, #17
 8002216:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221c:	2302      	movs	r3, #2
 800221e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	463b      	mov	r3, r7
 8002222:	4619      	mov	r1, r3
 8002224:	4806      	ldr	r0, [pc, #24]	; (8002240 <check_busy_flag+0xa4>)
 8002226:	f002 fab7 	bl	8004798 <HAL_GPIO_Init>
	lcd44780_RW_0;
 800222a:	2200      	movs	r2, #0
 800222c:	2102      	movs	r1, #2
 800222e:	4804      	ldr	r0, [pc, #16]	; (8002240 <check_busy_flag+0xa4>)
 8002230:	f002 fc49 	bl	8004ac6 <HAL_GPIO_WritePin>
	return status;
 8002234:	7dfb      	ldrb	r3, [r7, #23]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40020400 	.word	0x40020400

08002244 <init_LCD>:

void init_LCD() //инициализация ЖК
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_Power_GPIO_Port, Display_Power_Pin, GPIO_PIN_RESET);
 8002248:	2200      	movs	r2, #0
 800224a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224e:	4847      	ldr	r0, [pc, #284]	; (800236c <init_LCD+0x128>)
 8002250:	f002 fc39 	bl	8004ac6 <HAL_GPIO_WritePin>
  //Выводы в 0
    HAL_GPIO_WritePin(Display_RS_GPIO_Port, Display_RS_Pin, GPIO_PIN_SET);//  PIN_OFF(PIN_RS); !!!
 8002254:	2201      	movs	r2, #1
 8002256:	2101      	movs	r1, #1
 8002258:	4844      	ldr	r0, [pc, #272]	; (800236c <init_LCD+0x128>)
 800225a:	f002 fc34 	bl	8004ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002264:	4841      	ldr	r0, [pc, #260]	; (800236c <init_LCD+0x128>)
 8002266:	f002 fc2e 	bl	8004ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 800226a:	2200      	movs	r2, #0
 800226c:	2104      	movs	r1, #4
 800226e:	483f      	ldr	r0, [pc, #252]	; (800236c <init_LCD+0x128>)
 8002270:	f002 fc29 	bl	8004ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 8002274:	2200      	movs	r2, #0
 8002276:	2108      	movs	r1, #8
 8002278:	483c      	ldr	r0, [pc, #240]	; (800236c <init_LCD+0x128>)
 800227a:	f002 fc24 	bl	8004ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 800227e:	2200      	movs	r2, #0
 8002280:	2110      	movs	r1, #16
 8002282:	483a      	ldr	r0, [pc, #232]	; (800236c <init_LCD+0x128>)
 8002284:	f002 fc1f 	bl	8004ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 8002288:	2200      	movs	r2, #0
 800228a:	2120      	movs	r1, #32
 800228c:	4837      	ldr	r0, [pc, #220]	; (800236c <init_LCD+0x128>)
 800228e:	f002 fc1a 	bl	8004ac6 <HAL_GPIO_WritePin>

	//Ждем включения ЖКИ
    HAL_Delay(500);
 8002292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002296:	f001 fdb1 	bl	8003dfc <HAL_Delay>
    lcd44780_RS_0;
 800229a:	2201      	movs	r2, #1
 800229c:	2101      	movs	r1, #1
 800229e:	4833      	ldr	r0, [pc, #204]	; (800236c <init_LCD+0x128>)
 80022a0:	f002 fc11 	bl	8004ac6 <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 80022a4:	2200      	movs	r2, #0
 80022a6:	2102      	movs	r1, #2
 80022a8:	4830      	ldr	r0, [pc, #192]	; (800236c <init_LCD+0x128>)
 80022aa:	f002 fc0c 	bl	8004ac6 <HAL_GPIO_WritePin>
	send_nibble(0x02);
 80022ae:	2002      	movs	r0, #2
 80022b0:	f7ff ff10 	bl	80020d4 <send_nibble>
	send_nibble(0x02);
 80022b4:	2002      	movs	r0, #2
 80022b6:	f7ff ff0d 	bl	80020d4 <send_nibble>
	send_nibble(0x08);// N=1 F=0
 80022ba:	2008      	movs	r0, #8
 80022bc:	f7ff ff0a 	bl	80020d4 <send_nibble>

	while(check_busy_flag());
 80022c0:	bf00      	nop
 80022c2:	f7ff ff6b 	bl	800219c <check_busy_flag>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1fa      	bne.n	80022c2 <init_LCD+0x7e>

	send_nibble(0x00);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff ff01 	bl	80020d4 <send_nibble>
	send_nibble(0x0E);// D=1 C=1 B=0
 80022d2:	200e      	movs	r0, #14
 80022d4:	f7ff fefe 	bl	80020d4 <send_nibble>

	while(check_busy_flag());
 80022d8:	bf00      	nop
 80022da:	f7ff ff5f 	bl	800219c <check_busy_flag>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1fa      	bne.n	80022da <init_LCD+0x96>
	send_nibble(0x00);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff fef5 	bl	80020d4 <send_nibble>
	send_nibble(0x01);
 80022ea:	2001      	movs	r0, #1
 80022ec:	f7ff fef2 	bl	80020d4 <send_nibble>

	while(check_busy_flag());
 80022f0:	bf00      	nop
 80022f2:	f7ff ff53 	bl	800219c <check_busy_flag>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1fa      	bne.n	80022f2 <init_LCD+0xae>
	send_nibble(0x00);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7ff fee9 	bl	80020d4 <send_nibble>
	send_nibble(0x06); // I/D=1  S/H=0
 8002302:	2006      	movs	r0, #6
 8002304:	f7ff fee6 	bl	80020d4 <send_nibble>
//	send_nibble(0x04); // I/D=0  S/H=0

	while(check_busy_flag());
 8002308:	bf00      	nop
 800230a:	f7ff ff47 	bl	800219c <check_busy_flag>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1fa      	bne.n	800230a <init_LCD+0xc6>

    lcd44780_RS_0;
 8002314:	2201      	movs	r2, #1
 8002316:	2101      	movs	r1, #1
 8002318:	4814      	ldr	r0, [pc, #80]	; (800236c <init_LCD+0x128>)
 800231a:	f002 fbd4 	bl	8004ac6 <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 800231e:	2200      	movs	r2, #0
 8002320:	2102      	movs	r1, #2
 8002322:	4812      	ldr	r0, [pc, #72]	; (800236c <init_LCD+0x128>)
 8002324:	f002 fbcf 	bl	8004ac6 <HAL_GPIO_WritePin>
	send_nibble(0x02); // DL=0
 8002328:	2002      	movs	r0, #2
 800232a:	f7ff fed3 	bl	80020d4 <send_nibble>
	send_nibble(0x0A);// N=1 F=0 FT1=1 FT0=0
 800232e:	200a      	movs	r0, #10
 8002330:	f7ff fed0 	bl	80020d4 <send_nibble>
	while(check_busy_flag());
 8002334:	bf00      	nop
 8002336:	f7ff ff31 	bl	800219c <check_busy_flag>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1fa      	bne.n	8002336 <init_LCD+0xf2>


    send_data(0x1F); //переключение в графику
 8002340:	201f      	movs	r0, #31
 8002342:	f7ff ff15 	bl	8002170 <send_data>
    while(check_busy_flag());
 8002346:	bf00      	nop
 8002348:	f7ff ff28 	bl	800219c <check_busy_flag>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1fa      	bne.n	8002348 <init_LCD+0x104>

    send_data(0x01); //очистили от мусора ОЗУ (т.с. что clear())
 8002352:	2001      	movs	r0, #1
 8002354:	f7ff ff0c 	bl	8002170 <send_data>
    while(check_busy_flag());
 8002358:	bf00      	nop
 800235a:	f7ff ff1f 	bl	800219c <check_busy_flag>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1fa      	bne.n	800235a <init_LCD+0x116>

    LcdClear_massive();
 8002364:	f7ff fe88 	bl	8002078 <LcdClear_massive>

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40020400 	.word	0x40020400

08002370 <send_answer_to_CDC>:




void send_answer_to_CDC(uint8_t type)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
	switch(type)
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2b0d      	cmp	r3, #13
 800237e:	f200 808f 	bhi.w	80024a0 <send_answer_to_CDC+0x130>
 8002382:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <send_answer_to_CDC+0x18>)
 8002384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002388:	080023c1 	.word	0x080023c1
 800238c:	080023e1 	.word	0x080023e1
 8002390:	08002401 	.word	0x08002401
 8002394:	08002421 	.word	0x08002421
 8002398:	08002441 	.word	0x08002441
 800239c:	08002461 	.word	0x08002461
 80023a0:	080024a1 	.word	0x080024a1
 80023a4:	080024a1 	.word	0x080024a1
 80023a8:	080024a1 	.word	0x080024a1
 80023ac:	080024a1 	.word	0x080024a1
 80023b0:	080024a1 	.word	0x080024a1
 80023b4:	080024a1 	.word	0x080024a1
 80023b8:	080024a1 	.word	0x080024a1
 80023bc:	08002481 	.word	0x08002481
	{
	case ERROR_TYPE_1:
		HAL_Delay(10);
 80023c0:	200a      	movs	r0, #10
 80023c2:	f001 fd1b 	bl	8003dfc <HAL_Delay>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 80023c6:	4838      	ldr	r0, [pc, #224]	; (80024a8 <send_answer_to_CDC+0x138>)
 80023c8:	f7fd fee4 	bl	8000194 <strlen>
 80023cc:	4603      	mov	r3, r0
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	4619      	mov	r1, r3
 80023d2:	4835      	ldr	r0, [pc, #212]	; (80024a8 <send_answer_to_CDC+0x138>)
 80023d4:	f00a ff12 	bl	800d1fc <CDC_Transmit_FS>
		HAL_Delay(10);
 80023d8:	200a      	movs	r0, #10
 80023da:	f001 fd0f 	bl	8003dfc <HAL_Delay>
		break;
 80023de:	e05f      	b.n	80024a0 <send_answer_to_CDC+0x130>
	case ERROR_TYPE_2:
		HAL_Delay(10);
 80023e0:	200a      	movs	r0, #10
 80023e2:	f001 fd0b 	bl	8003dfc <HAL_Delay>
		CDC_Transmit_FS(Error2, strlen((const char *)Error2));  // SEND ERROR TO CDC!!!
 80023e6:	4831      	ldr	r0, [pc, #196]	; (80024ac <send_answer_to_CDC+0x13c>)
 80023e8:	f7fd fed4 	bl	8000194 <strlen>
 80023ec:	4603      	mov	r3, r0
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4619      	mov	r1, r3
 80023f2:	482e      	ldr	r0, [pc, #184]	; (80024ac <send_answer_to_CDC+0x13c>)
 80023f4:	f00a ff02 	bl	800d1fc <CDC_Transmit_FS>
		HAL_Delay(10);
 80023f8:	200a      	movs	r0, #10
 80023fa:	f001 fcff 	bl	8003dfc <HAL_Delay>
		break;
 80023fe:	e04f      	b.n	80024a0 <send_answer_to_CDC+0x130>
	case OK_TYPE_1:
		HAL_Delay(10);
 8002400:	200a      	movs	r0, #10
 8002402:	f001 fcfb 	bl	8003dfc <HAL_Delay>
		CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002406:	482a      	ldr	r0, [pc, #168]	; (80024b0 <send_answer_to_CDC+0x140>)
 8002408:	f7fd fec4 	bl	8000194 <strlen>
 800240c:	4603      	mov	r3, r0
 800240e:	b29b      	uxth	r3, r3
 8002410:	4619      	mov	r1, r3
 8002412:	4827      	ldr	r0, [pc, #156]	; (80024b0 <send_answer_to_CDC+0x140>)
 8002414:	f00a fef2 	bl	800d1fc <CDC_Transmit_FS>
		HAL_Delay(10);
 8002418:	200a      	movs	r0, #10
 800241a:	f001 fcef 	bl	8003dfc <HAL_Delay>
		break;
 800241e:	e03f      	b.n	80024a0 <send_answer_to_CDC+0x130>
	case OK_TYPE_2:
		HAL_Delay(10);
 8002420:	200a      	movs	r0, #10
 8002422:	f001 fceb 	bl	8003dfc <HAL_Delay>
		CDC_Transmit_FS(OK_Enter, strlen((const char *)OK_Enter));
 8002426:	4823      	ldr	r0, [pc, #140]	; (80024b4 <send_answer_to_CDC+0x144>)
 8002428:	f7fd feb4 	bl	8000194 <strlen>
 800242c:	4603      	mov	r3, r0
 800242e:	b29b      	uxth	r3, r3
 8002430:	4619      	mov	r1, r3
 8002432:	4820      	ldr	r0, [pc, #128]	; (80024b4 <send_answer_to_CDC+0x144>)
 8002434:	f00a fee2 	bl	800d1fc <CDC_Transmit_FS>
		HAL_Delay(10);
 8002438:	200a      	movs	r0, #10
 800243a:	f001 fcdf 	bl	8003dfc <HAL_Delay>
		break;
 800243e:	e02f      	b.n	80024a0 <send_answer_to_CDC+0x130>
	case CLEAR_TYPE_1:
		HAL_Delay(10);
 8002440:	200a      	movs	r0, #10
 8002442:	f001 fcdb 	bl	8003dfc <HAL_Delay>
		CDC_Transmit_FS(clear, strlen((const char *)clear));
 8002446:	481c      	ldr	r0, [pc, #112]	; (80024b8 <send_answer_to_CDC+0x148>)
 8002448:	f7fd fea4 	bl	8000194 <strlen>
 800244c:	4603      	mov	r3, r0
 800244e:	b29b      	uxth	r3, r3
 8002450:	4619      	mov	r1, r3
 8002452:	4819      	ldr	r0, [pc, #100]	; (80024b8 <send_answer_to_CDC+0x148>)
 8002454:	f00a fed2 	bl	800d1fc <CDC_Transmit_FS>
		HAL_Delay(10);
 8002458:	200a      	movs	r0, #10
 800245a:	f001 fccf 	bl	8003dfc <HAL_Delay>
		break;
 800245e:	e01f      	b.n	80024a0 <send_answer_to_CDC+0x130>
	case DONE_TYPE_1:
		HAL_Delay(10);
 8002460:	200a      	movs	r0, #10
 8002462:	f001 fccb 	bl	8003dfc <HAL_Delay>
		CDC_Transmit_FS(Done, strlen((const char *)Done));
 8002466:	4815      	ldr	r0, [pc, #84]	; (80024bc <send_answer_to_CDC+0x14c>)
 8002468:	f7fd fe94 	bl	8000194 <strlen>
 800246c:	4603      	mov	r3, r0
 800246e:	b29b      	uxth	r3, r3
 8002470:	4619      	mov	r1, r3
 8002472:	4812      	ldr	r0, [pc, #72]	; (80024bc <send_answer_to_CDC+0x14c>)
 8002474:	f00a fec2 	bl	800d1fc <CDC_Transmit_FS>
		HAL_Delay(10);
 8002478:	200a      	movs	r0, #10
 800247a:	f001 fcbf 	bl	8003dfc <HAL_Delay>
		break;
 800247e:	e00f      	b.n	80024a0 <send_answer_to_CDC+0x130>
	case RUN_CAL_TYPE_TEMP:
		HAL_Delay(10);
 8002480:	200a      	movs	r0, #10
 8002482:	f001 fcbb 	bl	8003dfc <HAL_Delay>
		CDC_Transmit_FS(run_cal, strlen((const char *)run_cal));
 8002486:	480e      	ldr	r0, [pc, #56]	; (80024c0 <send_answer_to_CDC+0x150>)
 8002488:	f7fd fe84 	bl	8000194 <strlen>
 800248c:	4603      	mov	r3, r0
 800248e:	b29b      	uxth	r3, r3
 8002490:	4619      	mov	r1, r3
 8002492:	480b      	ldr	r0, [pc, #44]	; (80024c0 <send_answer_to_CDC+0x150>)
 8002494:	f00a feb2 	bl	800d1fc <CDC_Transmit_FS>
		HAL_Delay(10);
 8002498:	200a      	movs	r0, #10
 800249a:	f001 fcaf 	bl	8003dfc <HAL_Delay>
		break;
 800249e:	bf00      	nop
	}
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	2000002c 	.word	0x2000002c
 80024ac:	20000338 	.word	0x20000338
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000320 	.word	0x20000320
 80024b8:	20000024 	.word	0x20000024
 80024bc:	20000364 	.word	0x20000364
 80024c0:	20000008 	.word	0x20000008

080024c4 <cmd_SWEEP_START>:
void cmd_SWEEP_START()
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	DAC_TEMP_CAL();
 80024c8:	f7ff faca 	bl	8001a60 <DAC_TEMP_CAL>
	CPLD_control(CPLD_WORD); // Enable LDAC signal
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <cmd_SWEEP_START+0x1c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f995 	bl	8001800 <CPLD_control>
	DAC_SendInit();
 80024d6:	f7ff fa3b 	bl	8001950 <DAC_SendInit>
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000388 	.word	0x20000388

080024e4 <cmd_SWEEP_STOP>:

/////////////////////////////////////////////////////////
void cmd_SWEEP_STOP()
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	CPLD_control(0x0); // Disable LDAC signal
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7ff f989 	bl	8001800 <CPLD_control>
	DAC_SendInit();
 80024ee:	f7ff fa2f 	bl	8001950 <DAC_SendInit>
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <cmd_DAC_SET>:

/////////////////////////////////////////////////////////
void cmd_DAC_SET(uint32_t code)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	if (code>0xFFFFF)return;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002506:	d21a      	bcs.n	800253e <cmd_DAC_SET+0x46>

	switch(code)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <cmd_DAC_SET+0x20>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a0d      	ldr	r2, [pc, #52]	; (8002548 <cmd_DAC_SET+0x50>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <cmd_DAC_SET+0x28>
 8002516:	e007      	b.n	8002528 <cmd_DAC_SET+0x30>
	{
	case DAC_CODE_DOWN:
		DAC_code_direction=1;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <cmd_DAC_SET+0x54>)
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
		break;
 800251e:	e003      	b.n	8002528 <cmd_DAC_SET+0x30>
	case DAC_CODE_TOP:
		DAC_code_direction=0;
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <cmd_DAC_SET+0x54>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
		break;
 8002526:	bf00      	nop
	}

	CPLD_control(0x0); // Disable LDAC signal
 8002528:	2000      	movs	r0, #0
 800252a:	f7ff f969 	bl	8001800 <CPLD_control>
	DAC_SendInit();
 800252e:	f7ff fa0f 	bl	8001950 <DAC_SendInit>
	DAC_TEMP_CAL();
 8002532:	f7ff fa95 	bl	8001a60 <DAC_TEMP_CAL>
	DAC_Write(code);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff f9b6 	bl	80018a8 <DAC_Write>
 800253c:	e000      	b.n	8002540 <cmd_DAC_SET+0x48>
	if (code>0xFFFFF)return;
 800253e:	bf00      	nop
}
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	000fffff 	.word	0x000fffff
 800254c:	200008a4 	.word	0x200008a4

08002550 <cmd_CAL>:


/////////////////////////////////////////////////////////
FunctionalState cmd_CAL(uint8_t cmd, float coeff)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]
	float tmpx;

	tmpx=coeff;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	3b06      	subs	r3, #6
 8002564:	2b05      	cmp	r3, #5
 8002566:	f200 80bf 	bhi.w	80026e8 <cmd_CAL+0x198>
 800256a:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <cmd_CAL+0x20>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	08002589 	.word	0x08002589
 8002574:	0800259b 	.word	0x0800259b
 8002578:	080025ad 	.word	0x080025ad
 800257c:	080025bf 	.word	0x080025bf
 8002580:	080025d1 	.word	0x080025d1
 8002584:	0800265d 	.word	0x0800265d
	{
	case DAC_CAL_TEMP:
		DAC_Write(DAC_CODE_MIDDLE);
 8002588:	486b      	ldr	r0, [pc, #428]	; (8002738 <cmd_CAL+0x1e8>)
 800258a:	f7ff f98d 	bl	80018a8 <DAC_Write>
		DAC_TEMP_CAL();
 800258e:	f7ff fa67 	bl	8001a60 <DAC_TEMP_CAL>
		DAC_Write(DAC_CODE_MIDDLE);
 8002592:	4869      	ldr	r0, [pc, #420]	; (8002738 <cmd_CAL+0x1e8>)
 8002594:	f7ff f988 	bl	80018a8 <DAC_Write>
		break;
 8002598:	e0a6      	b.n	80026e8 <cmd_CAL+0x198>
	case DAC_CAL_POLY_A:
		EEPROM_write(corr_coeff_1_EEPROM_ADDRESS,float_to_binary(tmpx));
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f935 	bl	800280a <float_to_binary>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4619      	mov	r1, r3
 80025a4:	2010      	movs	r0, #16
 80025a6:	f000 f96f 	bl	8002888 <EEPROM_write>
		break;
 80025aa:	e09d      	b.n	80026e8 <cmd_CAL+0x198>
	case DAC_CAL_POLY_B:
		EEPROM_write(corr_coeff_2_EEPROM_ADDRESS,float_to_binary(tmpx));
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f92c 	bl	800280a <float_to_binary>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4619      	mov	r1, r3
 80025b6:	2018      	movs	r0, #24
 80025b8:	f000 f966 	bl	8002888 <EEPROM_write>
		break;
 80025bc:	e094      	b.n	80026e8 <cmd_CAL+0x198>
	case DAC_CAL_POLY_C:
		EEPROM_write(corr_coeff_3_EEPROM_ADDRESS,float_to_binary(tmpx));
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f923 	bl	800280a <float_to_binary>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4619      	mov	r1, r3
 80025c8:	2020      	movs	r0, #32
 80025ca:	f000 f95d 	bl	8002888 <EEPROM_write>
		break;
 80025ce:	e08b      	b.n	80026e8 <cmd_CAL+0x198>
	case DAC_CAL_TOP:
		if((tmpx<10.1 && tmpx>9.9) || (tmpx>6.8 && tmpx<7.1))
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7fd ff4b 	bl	800046c <__aeabi_f2d>
 80025d6:	a348      	add	r3, pc, #288	; (adr r3, 80026f8 <cmd_CAL+0x1a8>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fe fa10 	bl	8000a00 <__aeabi_dcmplt>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <cmd_CAL+0xac>
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7fd ff40 	bl	800046c <__aeabi_f2d>
 80025ec:	a344      	add	r3, pc, #272	; (adr r3, 8002700 <cmd_CAL+0x1b0>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fe fa23 	bl	8000a3c <__aeabi_dcmpgt>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d115      	bne.n	8002628 <cmd_CAL+0xd8>
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7fd ff35 	bl	800046c <__aeabi_f2d>
 8002602:	a341      	add	r3, pc, #260	; (adr r3, 8002708 <cmd_CAL+0x1b8>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f7fe fa18 	bl	8000a3c <__aeabi_dcmpgt>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d022      	beq.n	8002658 <cmd_CAL+0x108>
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7fd ff2a 	bl	800046c <__aeabi_f2d>
 8002618:	a33d      	add	r3, pc, #244	; (adr r3, 8002710 <cmd_CAL+0x1c0>)
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	f7fe f9ef 	bl	8000a00 <__aeabi_dcmplt>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d017      	beq.n	8002658 <cmd_CAL+0x108>
		{
			cal_DAC_up_voltage=tmpx;
 8002628:	4a44      	ldr	r2, [pc, #272]	; (800273c <cmd_CAL+0x1ec>)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6013      	str	r3, [r2, #0]
			EEPROM_write(cal_DAC_up_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f8eb 	bl	800280a <float_to_binary>
 8002634:	4603      	mov	r3, r0
 8002636:	4619      	mov	r1, r3
 8002638:	2000      	movs	r0, #0
 800263a:	f000 f925 	bl	8002888 <EEPROM_write>
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 800263e:	4b3f      	ldr	r3, [pc, #252]	; (800273c <cmd_CAL+0x1ec>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a3f      	ldr	r2, [pc, #252]	; (8002740 <cmd_CAL+0x1f0>)
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fab3 	bl	8000bb4 <__aeabi_fsub>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <cmd_CAL+0x1f4>)
 8002654:	601a      	str	r2, [r3, #0]
		}
		else return 0;
		break;
 8002656:	e047      	b.n	80026e8 <cmd_CAL+0x198>
		else return 0;
 8002658:	2300      	movs	r3, #0
 800265a:	e046      	b.n	80026ea <cmd_CAL+0x19a>
	case DAC_CAL_DOWN:
		if((tmpx>-10.1 && tmpx<-9.9) || (tmpx<-6.8 && tmpx>-7.1))
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7fd ff05 	bl	800046c <__aeabi_f2d>
 8002662:	a32d      	add	r3, pc, #180	; (adr r3, 8002718 <cmd_CAL+0x1c8>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f7fe f9e8 	bl	8000a3c <__aeabi_dcmpgt>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <cmd_CAL+0x138>
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7fd fefa 	bl	800046c <__aeabi_f2d>
 8002678:	a329      	add	r3, pc, #164	; (adr r3, 8002720 <cmd_CAL+0x1d0>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fe f9bf 	bl	8000a00 <__aeabi_dcmplt>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d115      	bne.n	80026b4 <cmd_CAL+0x164>
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7fd feef 	bl	800046c <__aeabi_f2d>
 800268e:	a326      	add	r3, pc, #152	; (adr r3, 8002728 <cmd_CAL+0x1d8>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fe f9b4 	bl	8000a00 <__aeabi_dcmplt>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d022      	beq.n	80026e4 <cmd_CAL+0x194>
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7fd fee4 	bl	800046c <__aeabi_f2d>
 80026a4:	a322      	add	r3, pc, #136	; (adr r3, 8002730 <cmd_CAL+0x1e0>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f7fe f9c7 	bl	8000a3c <__aeabi_dcmpgt>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d017      	beq.n	80026e4 <cmd_CAL+0x194>
		{
			cal_DAC_down_voltage=tmpx;
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <cmd_CAL+0x1f0>)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6013      	str	r3, [r2, #0]
			EEPROM_write(cal_DAC_down_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f8a5 	bl	800280a <float_to_binary>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4619      	mov	r1, r3
 80026c4:	2008      	movs	r0, #8
 80026c6:	f000 f8df 	bl	8002888 <EEPROM_write>
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <cmd_CAL+0x1ec>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <cmd_CAL+0x1f0>)
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fa6d 	bl	8000bb4 <__aeabi_fsub>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <cmd_CAL+0x1f4>)
 80026e0:	601a      	str	r2, [r3, #0]
		}
		else return 0;
		break;
 80026e2:	e001      	b.n	80026e8 <cmd_CAL+0x198>
		else return 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <cmd_CAL+0x19a>
	}
	return 1;
 80026e8:	2301      	movs	r3, #1

}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	f3af 8000 	nop.w
 80026f8:	33333333 	.word	0x33333333
 80026fc:	40243333 	.word	0x40243333
 8002700:	cccccccd 	.word	0xcccccccd
 8002704:	4023cccc 	.word	0x4023cccc
 8002708:	33333333 	.word	0x33333333
 800270c:	401b3333 	.word	0x401b3333
 8002710:	66666666 	.word	0x66666666
 8002714:	401c6666 	.word	0x401c6666
 8002718:	33333333 	.word	0x33333333
 800271c:	c0243333 	.word	0xc0243333
 8002720:	cccccccd 	.word	0xcccccccd
 8002724:	c023cccc 	.word	0xc023cccc
 8002728:	33333333 	.word	0x33333333
 800272c:	c01b3333 	.word	0xc01b3333
 8002730:	66666666 	.word	0x66666666
 8002734:	c01c6666 	.word	0xc01c6666
 8002738:	0007ffff 	.word	0x0007ffff
 800273c:	20000898 	.word	0x20000898
 8002740:	2000089c 	.word	0x2000089c
 8002744:	20000894 	.word	0x20000894

08002748 <load_data_from_EEPROM>:
/////////////////////////////////////////////////////////
void load_data_from_EEPROM(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	cal_DAC_up_voltage=binary_to_float(EEPROM_read(cal_DAC_up_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 800274c:	2000      	movs	r0, #0
 800274e:	f000 f881 	bl	8002854 <EEPROM_read>
 8002752:	4603      	mov	r3, r0
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f845 	bl	80027e4 <binary_to_float>
 800275a:	4603      	mov	r3, r0
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <load_data_from_EEPROM+0x84>)
 800275e:	6013      	str	r3, [r2, #0]
	cal_DAC_down_voltage=binary_to_float(EEPROM_read(cal_DAC_down_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 8002760:	2008      	movs	r0, #8
 8002762:	f000 f877 	bl	8002854 <EEPROM_read>
 8002766:	4603      	mov	r3, r0
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f83b 	bl	80027e4 <binary_to_float>
 800276e:	4603      	mov	r3, r0
 8002770:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <load_data_from_EEPROM+0x88>)
 8002772:	6013      	str	r3, [r2, #0]
	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <load_data_from_EEPROM+0x84>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <load_data_from_EEPROM+0x88>)
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fa18 	bl	8000bb4 <__aeabi_fsub>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <load_data_from_EEPROM+0x8c>)
 800278a:	601a      	str	r2, [r3, #0]

	corr_coeff_1=binary_to_float(EEPROM_read(corr_coeff_1_EEPROM_ADDRESS));
 800278c:	2010      	movs	r0, #16
 800278e:	f000 f861 	bl	8002854 <EEPROM_read>
 8002792:	4603      	mov	r3, r0
 8002794:	4618      	mov	r0, r3
 8002796:	f000 f825 	bl	80027e4 <binary_to_float>
 800279a:	4603      	mov	r3, r0
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <load_data_from_EEPROM+0x90>)
 800279e:	6013      	str	r3, [r2, #0]
	corr_coeff_2=binary_to_float(EEPROM_read(corr_coeff_2_EEPROM_ADDRESS));
 80027a0:	2018      	movs	r0, #24
 80027a2:	f000 f857 	bl	8002854 <EEPROM_read>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f81b 	bl	80027e4 <binary_to_float>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <load_data_from_EEPROM+0x94>)
 80027b2:	6013      	str	r3, [r2, #0]
	corr_coeff_3=binary_to_float(EEPROM_read(corr_coeff_3_EEPROM_ADDRESS));
 80027b4:	2020      	movs	r0, #32
 80027b6:	f000 f84d 	bl	8002854 <EEPROM_read>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f811 	bl	80027e4 <binary_to_float>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4a06      	ldr	r2, [pc, #24]	; (80027e0 <load_data_from_EEPROM+0x98>)
 80027c6:	6013      	str	r3, [r2, #0]
}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000898 	.word	0x20000898
 80027d0:	2000089c 	.word	0x2000089c
 80027d4:	20000894 	.word	0x20000894
 80027d8:	20000704 	.word	0x20000704
 80027dc:	20000708 	.word	0x20000708
 80027e0:	2000070c 	.word	0x2000070c

080027e4 <binary_to_float>:
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC push_options
#pragma GCC optimize ("O0")

float binary_to_float(uint32_t a)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	    int * p;
	    float out=0;
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]

	    p = &out;
 80027f2:	f107 0308 	add.w	r3, r7, #8
 80027f6:	60fb      	str	r3, [r7, #12]
	    (*p)=a;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	601a      	str	r2, [r3, #0]
	    return out;
 80027fe:	68bb      	ldr	r3, [r7, #8]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <float_to_binary>:


uint32_t float_to_binary(float a)
{
 800280a:	b480      	push	{r7}
 800280c:	b087      	sub	sp, #28
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	    int i;
	    int * p;
	    uint32_t out=0;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]

	    p = &a;
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	60fb      	str	r3, [r7, #12]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 800281a:	231f      	movs	r3, #31
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e010      	b.n	8002842 <float_to_binary+0x38>
	    {
	    	out+=((*p) >> i & 1)<<i;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa42 f303 	asr.w	r3, r2, r3
 800282a:	f003 0201 	and.w	r2, r3, #1
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	461a      	mov	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3b01      	subs	r3, #1
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b00      	cmp	r3, #0
 8002846:	daeb      	bge.n	8002820 <float_to_binary+0x16>
	    }

	    return out;
 8002848:	693b      	ldr	r3, [r7, #16]
}
 800284a:	4618      	mov	r0, r3
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <EEPROM_read>:
//==============================================================================================


//==============================================================================================
uint32_t EEPROM_read(uint32_t address_of_read)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	uint32_t Address;

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002862:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002866:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4a06      	ldr	r2, [pc, #24]	; (8002884 <EEPROM_read+0x30>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d301      	bcc.n	8002874 <EEPROM_read+0x20>
	{
		return 0x00;
 8002870:	2300      	movs	r3, #0
 8002872:	e001      	b.n	8002878 <EEPROM_read+0x24>
	}
	return *(__IO uint32_t *) Address;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	08082800 	.word	0x08082800

08002888 <EEPROM_write>:
//==============================================================================================
void EEPROM_write(uint32_t address_of_read, uint32_t data)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
	/* Clear all pending flags */
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR | FLASH_FLAG_OPTVERRUSR);

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
	     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002898:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 800289c:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <EEPROM_write+0x50>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d212      	bcs.n	80028cc <EEPROM_write+0x44>
	{
		return;
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 80028a6:	f001 fcbf 	bl	8004228 <HAL_FLASHEx_DATAEEPROM_Unlock>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	68f9      	ldr	r1, [r7, #12]
 80028ae:	2002      	movs	r0, #2
 80028b0:	f001 fd18 	bl	80042e4 <HAL_FLASHEx_DATAEEPROM_Program>
 80028b4:	4603      	mov	r3, r0
 80028b6:	72fb      	strb	r3, [r7, #11]
	HAL_FLASHEx_DATAEEPROM_Lock();
 80028b8:	f001 fcd2 	bl	8004260 <HAL_FLASHEx_DATAEEPROM_Lock>

	if(FLASHStatus != HAL_OK)
 80028bc:	7afb      	ldrb	r3, [r7, #11]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <EEPROM_write+0x48>
	{
		return;
	}
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR);

	if(*(__IO uint32_t *) Address != data)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	e002      	b.n	80028d2 <EEPROM_write+0x4a>
		return;
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <EEPROM_write+0x4a>
		return;
 80028d0:	bf00      	nop
	{
		return;
	}

}
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	08082800 	.word	0x08082800

080028dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
 80028f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f2:	4b7c      	ldr	r3, [pc, #496]	; (8002ae4 <MX_GPIO_Init+0x208>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4a7b      	ldr	r2, [pc, #492]	; (8002ae4 <MX_GPIO_Init+0x208>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	61d3      	str	r3, [r2, #28]
 80028fe:	4b79      	ldr	r3, [pc, #484]	; (8002ae4 <MX_GPIO_Init+0x208>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800290a:	4b76      	ldr	r3, [pc, #472]	; (8002ae4 <MX_GPIO_Init+0x208>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	4a75      	ldr	r2, [pc, #468]	; (8002ae4 <MX_GPIO_Init+0x208>)
 8002910:	f043 0320 	orr.w	r3, r3, #32
 8002914:	61d3      	str	r3, [r2, #28]
 8002916:	4b73      	ldr	r3, [pc, #460]	; (8002ae4 <MX_GPIO_Init+0x208>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	4b70      	ldr	r3, [pc, #448]	; (8002ae4 <MX_GPIO_Init+0x208>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4a6f      	ldr	r2, [pc, #444]	; (8002ae4 <MX_GPIO_Init+0x208>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	61d3      	str	r3, [r2, #28]
 800292e:	4b6d      	ldr	r3, [pc, #436]	; (8002ae4 <MX_GPIO_Init+0x208>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800293a:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <MX_GPIO_Init+0x208>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4a69      	ldr	r2, [pc, #420]	; (8002ae4 <MX_GPIO_Init+0x208>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	61d3      	str	r3, [r2, #28]
 8002946:	4b67      	ldr	r3, [pc, #412]	; (8002ae4 <MX_GPIO_Init+0x208>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 8002952:	2200      	movs	r2, #0
 8002954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002958:	4863      	ldr	r0, [pc, #396]	; (8002ae8 <MX_GPIO_Init+0x20c>)
 800295a:	f002 f8b4 	bl	8004ac6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, GPIO_PIN_SET);
 800295e:	2201      	movs	r2, #1
 8002960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002964:	4860      	ldr	r0, [pc, #384]	; (8002ae8 <MX_GPIO_Init+0x20c>)
 8002966:	f002 f8ae 	bl	8004ac6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 800296a:	2201      	movs	r2, #1
 800296c:	f248 011f 	movw	r1, #32799	; 0x801f
 8002970:	485e      	ldr	r0, [pc, #376]	; (8002aec <MX_GPIO_Init+0x210>)
 8002972:	f002 f8a8 	bl	8004ac6 <HAL_GPIO_WritePin>
                          |DAC_SYNC_Pin|DAC_CLR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RS_Pin|Display_Power_Pin, GPIO_PIN_RESET);
 8002976:	2200      	movs	r2, #0
 8002978:	f640 0101 	movw	r1, #2049	; 0x801
 800297c:	485c      	ldr	r0, [pc, #368]	; (8002af0 <MX_GPIO_Init+0x214>)
 800297e:	f002 f8a2 	bl	8004ac6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|SPI2_NSS_Pin
 8002982:	2201      	movs	r2, #1
 8002984:	f241 413e 	movw	r1, #5182	; 0x143e
 8002988:	4859      	ldr	r0, [pc, #356]	; (8002af0 <MX_GPIO_Init+0x214>)
 800298a:	f002 f89c 	bl	8004ac6 <HAL_GPIO_WritePin>
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Start_button_Pin;
 800298e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002994:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299a:	2301      	movs	r3, #1
 800299c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Start_button_GPIO_Port, &GPIO_InitStruct);
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	4619      	mov	r1, r3
 80029a4:	4850      	ldr	r0, [pc, #320]	; (8002ae8 <MX_GPIO_Init+0x20c>)
 80029a6:	f001 fef7 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Count_EN_Pin;
 80029aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b0:	2301      	movs	r3, #1
 80029b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b8:	2302      	movs	r3, #2
 80029ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Count_EN_GPIO_Port, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	4849      	ldr	r0, [pc, #292]	; (8002ae8 <MX_GPIO_Init+0x20c>)
 80029c4:	f001 fee8 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_cs_Pin;
 80029c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d6:	2303      	movs	r3, #3
 80029d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_cs_GPIO_Port, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	4841      	ldr	r0, [pc, #260]	; (8002ae8 <MX_GPIO_Init+0x20c>)
 80029e2:	f001 fed9 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 80029e6:	f248 030f 	movw	r3, #32783	; 0x800f
 80029ea:	617b      	str	r3, [r7, #20]
                          |DAC_CLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	2303      	movs	r3, #3
 80029f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	483b      	ldr	r0, [pc, #236]	; (8002aec <MX_GPIO_Init+0x210>)
 8002a00:	f001 feca 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8002a04:	2310      	movs	r3, #16
 8002a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4834      	ldr	r0, [pc, #208]	; (8002aec <MX_GPIO_Init+0x210>)
 8002a1c:	f001 febc 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Display_RS_Pin;
 8002a20:	2301      	movs	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a24:	2301      	movs	r3, #1
 8002a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Display_RS_GPIO_Port, &GPIO_InitStruct);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	482e      	ldr	r0, [pc, #184]	; (8002af0 <MX_GPIO_Init+0x214>)
 8002a38:	f001 feae 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|Display_Power_Pin
 8002a3c:	f640 433e 	movw	r3, #3134	; 0xc3e
 8002a40:	617b      	str	r3, [r7, #20]
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002a42:	2311      	movs	r3, #17
 8002a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4826      	ldr	r0, [pc, #152]	; (8002af0 <MX_GPIO_Init+0x214>)
 8002a56:	f001 fe9f 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a60:	2301      	movs	r3, #1
 8002a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	481f      	ldr	r0, [pc, #124]	; (8002af0 <MX_GPIO_Init+0x214>)
 8002a74:	f001 fe90 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encode_Push_Pin;
 8002a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a84:	2301      	movs	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encode_Push_GPIO_Port, &GPIO_InitStruct);
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4817      	ldr	r0, [pc, #92]	; (8002aec <MX_GPIO_Init+0x210>)
 8002a90:	f001 fe82 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4810      	ldr	r0, [pc, #64]	; (8002aec <MX_GPIO_Init+0x210>)
 8002aac:	f001 fe74 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 8002ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4809      	ldr	r0, [pc, #36]	; (8002aec <MX_GPIO_Init+0x210>)
 8002ac6:	f001 fe67 	bl	8004798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2101      	movs	r1, #1
 8002ace:	2028      	movs	r0, #40	; 0x28
 8002ad0:	f001 fa8d 	bl	8003fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ad4:	2028      	movs	r0, #40	; 0x28
 8002ad6:	f001 faa6 	bl	8004026 <HAL_NVIC_EnableIRQ>

}
 8002ada:	bf00      	nop
 8002adc:	3728      	adds	r7, #40	; 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40020400 	.word	0x40020400

08002af4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002afa:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <MX_I2C1_Init+0x54>)
 8002afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b00:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <MX_I2C1_Init+0x58>)
 8002b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b30:	4804      	ldr	r0, [pc, #16]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b32:	f001 fff9 	bl	8004b28 <HAL_I2C_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b3c:	f000 fc92 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200007fc 	.word	0x200007fc
 8002b48:	40005400 	.word	0x40005400
 8002b4c:	000186a0 	.word	0x000186a0

08002b50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_I2C_MspInit+0x7c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d128      	bne.n	8002bc4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <HAL_I2C_MspInit+0x80>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <HAL_I2C_MspInit+0x80>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	61d3      	str	r3, [r2, #28]
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_I2C_MspInit+0x80>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TMP117_SCL_Pin|TMP117_SDA_Pin;
 8002b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b90:	2312      	movs	r3, #18
 8002b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b94:	2301      	movs	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	480b      	ldr	r0, [pc, #44]	; (8002bd4 <HAL_I2C_MspInit+0x84>)
 8002ba8:	f001 fdf6 	bl	8004798 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_I2C_MspInit+0x80>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <HAL_I2C_MspInit+0x80>)
 8002bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bb6:	6253      	str	r3, [r2, #36]	; 0x24
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_I2C_MspInit+0x80>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3728      	adds	r7, #40	; 0x28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40005400 	.word	0x40005400
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40020400 	.word	0x40020400

08002bd8 <USB_rx_command_buffer_push_refd>:

extern uint8_t command_buffer[31];

int16_t Enc_Counter = 0;

CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4804      	ldr	r0, [pc, #16]	; (8002bf4 <USB_rx_command_buffer_push_refd+0x1c>)
 8002be4:	f7fe fce4 	bl	80015b0 <__circ_gbuf_push>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2000037c 	.word	0x2000037c

08002bf8 <USB_rx_command_buffer_pop_refd>:
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4803      	ldr	r0, [pc, #12]	; (8002c14 <USB_rx_command_buffer_pop_refd+0x1c>)
 8002c06:	f7fe fc81 	bl	800150c <__circ_gbuf_pop>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	2000037c 	.word	0x2000037c

08002c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b095      	sub	sp, #84	; 0x54
 8002c1c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 8002c1e:	4b57      	ldr	r3, [pc, #348]	; (8002d7c <main+0x164>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 8002c24:	4b55      	ldr	r3, [pc, #340]	; (8002d7c <main+0x164>)
 8002c26:	2208      	movs	r2, #8
 8002c28:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8002c2a:	4b54      	ldr	r3, [pc, #336]	; (8002d7c <main+0x164>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 8002c30:	4b52      	ldr	r3, [pc, #328]	; (8002d7c <main+0x164>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 8002c36:	4b51      	ldr	r3, [pc, #324]	; (8002d7c <main+0x164>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8002c3c:	4b4f      	ldr	r3, [pc, #316]	; (8002d7c <main+0x164>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 8002c42:	4b4e      	ldr	r3, [pc, #312]	; (8002d7c <main+0x164>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 8002c48:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <main+0x164>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 8002c4e:	4b4b      	ldr	r3, [pc, #300]	; (8002d7c <main+0x164>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]

	DAC_target_speed=0.001; //  V/s
 8002c54:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <main+0x168>)
 8002c56:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <main+0x16c>)
 8002c58:	601a      	str	r2, [r3, #0]
	DAC_code=DAC_CODE_MIDDLE;
 8002c5a:	4b4b      	ldr	r3, [pc, #300]	; (8002d88 <main+0x170>)
 8002c5c:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <main+0x174>)
 8002c5e:	601a      	str	r2, [r3, #0]
	DAC_code_direction=0;
 8002c60:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <main+0x178>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c66:	f001 f85a 	bl	8003d1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c6a:	f000 f8a5 	bl	8002db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c6e:	f7ff fe35 	bl	80028dc <MX_GPIO_Init>
  MX_SPI1_Init();
 8002c72:	f000 fbfd 	bl	8003470 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002c76:	f000 fc2f 	bl	80034d8 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8002c7a:	f00a f9bb 	bl	800cff4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002c7e:	f000 fea5 	bl	80039cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c82:	f000 fef1 	bl	8003a68 <MX_TIM4_Init>
  MX_I2C1_Init();
 8002c86:	f7ff ff35 	bl	8002af4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002c8a:	f000 fe53 	bl	8003934 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002c8e:	f000 f8df 	bl	8002e50 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(750); //WarmUP
 8002c92:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002c96:	f001 f8b1 	bl	8003dfc <HAL_Delay>
  load_data_from_EEPROM();
 8002c9a:	f7ff fd55 	bl	8002748 <load_data_from_EEPROM>
  TMP117_Initialization(hi2c1);
 8002c9e:	4c3d      	ldr	r4, [pc, #244]	; (8002d94 <main+0x17c>)
 8002ca0:	4668      	mov	r0, sp
 8002ca2:	f104 0310 	add.w	r3, r4, #16
 8002ca6:	2244      	movs	r2, #68	; 0x44
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f00a fec7 	bl	800da3c <memcpy>
 8002cae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cb2:	f000 ffdd 	bl	8003c70 <TMP117_Initialization>
  init_LCD();
 8002cb6:	f7ff fac5 	bl	8002244 <init_LCD>
  DDS_Init();
 8002cba:	f7ff f869 	bl	8001d90 <DDS_Init>
  DAC_SendInit();
 8002cbe:	f7fe fe47 	bl	8001950 <DAC_SendInit>
  DAC_Write(DAC_code);
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <main+0x170>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fdee 	bl	80018a8 <DAC_Write>

  HAL_TIM_Base_Start_IT(&htim3);
 8002ccc:	4832      	ldr	r0, [pc, #200]	; (8002d98 <main+0x180>)
 8002cce:	f005 fc63 	bl	8008598 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002cd2:	4832      	ldr	r0, [pc, #200]	; (8002d9c <main+0x184>)
 8002cd4:	f005 fc60 	bl	8008598 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002cd8:	213c      	movs	r1, #60	; 0x3c
 8002cda:	4831      	ldr	r0, [pc, #196]	; (8002da0 <main+0x188>)
 8002cdc:	f005 fd4c 	bl	8008778 <HAL_TIM_Encoder_Start>


  Relay_control(1,0); // x1 mode
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	f7fe fcb2 	bl	800164c <Relay_control>
  Relay_control(2,0); // x2/x4 mode
 8002ce8:	2100      	movs	r1, #0
 8002cea:	2002      	movs	r0, #2
 8002cec:	f7fe fcae 	bl	800164c <Relay_control>
  Relay_control(3,0); // Output Enable
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2003      	movs	r0, #3
 8002cf4:	f7fe fcaa 	bl	800164c <Relay_control>
  CPLD_control(CPLD_WORD);
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <main+0x18c>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe fd7f 	bl	8001800 <CPLD_control>

  send_answer_to_CDC(CLEAR_TYPE_1);
 8002d02:	2004      	movs	r0, #4
 8002d04:	f7ff fb34 	bl	8002370 <send_answer_to_CDC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(USB_CDC_End_Line_Received)
 8002d08:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <main+0x190>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d021      	beq.n	8002d56 <main+0x13e>
		{
			uint8_t i=0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	71fb      	strb	r3, [r7, #7]
			USB_CDC_End_Line_Received=0;
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <main+0x190>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
			while (1) {
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	4a23      	ldr	r2, [pc, #140]	; (8002dac <main+0x194>)
 8002d20:	4413      	add	r3, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff68 	bl	8002bf8 <USB_rx_command_buffer_pop_refd>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <main+0x11e>
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <main+0x194>)
 8002d32:	210a      	movs	r1, #10
 8002d34:	54d1      	strb	r1, [r2, r3]
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <main+0x194>)
 8002d3a:	5cd3      	ldrb	r3, [r2, r3]
 8002d3c:	2b0a      	cmp	r3, #10
 8002d3e:	d008      	beq.n	8002d52 <main+0x13a>
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <main+0x194>)
 8002d44:	5cd3      	ldrb	r3, [r2, r3]
 8002d46:	2b0d      	cmp	r3, #13
 8002d48:	d003      	beq.n	8002d52 <main+0x13a>
				i++;
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	71fb      	strb	r3, [r7, #7]
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8002d50:	e7e4      	b.n	8002d1c <main+0x104>
			}
			Parsing_USB_command();
 8002d52:	f000 f939 	bl	8002fc8 <Parsing_USB_command>
		}

		if(Need_update_DDS)
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <main+0x198>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0d4      	beq.n	8002d08 <main+0xf0>
		{
			if(Ramp_dac_step_complete)
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <main+0x19c>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <main+0x15e>
			{
				DDS_Update();
 8002d66:	f7ff f8ef 	bl	8001f48 <DDS_Update>
				Need_update_DDS=0;
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <main+0x198>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
				Ramp_dac_step_complete=0;
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <main+0x19c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
			}
			DDS_Calculation();
 8002d76:	f7fe feeb 	bl	8001b50 <DDS_Calculation>
		if(USB_CDC_End_Line_Received)
 8002d7a:	e7c5      	b.n	8002d08 <main+0xf0>
 8002d7c:	20000878 	.word	0x20000878
 8002d80:	20000890 	.word	0x20000890
 8002d84:	3a83126f 	.word	0x3a83126f
 8002d88:	200008a0 	.word	0x200008a0
 8002d8c:	0007ffff 	.word	0x0007ffff
 8002d90:	200008a4 	.word	0x200008a4
 8002d94:	200007fc 	.word	0x200007fc
 8002d98:	2000099c 	.word	0x2000099c
 8002d9c:	2000095c 	.word	0x2000095c
 8002da0:	200009dc 	.word	0x200009dc
 8002da4:	20000388 	.word	0x20000388
 8002da8:	200007d8 	.word	0x200007d8
 8002dac:	200007dc 	.word	0x200007dc
 8002db0:	200008a6 	.word	0x200008a6
 8002db4:	200008a7 	.word	0x200008a7

08002db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b092      	sub	sp, #72	; 0x48
 8002dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	2234      	movs	r2, #52	; 0x34
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f00a fe46 	bl	800da58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dcc:	463b      	mov	r3, r7
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
 8002dd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dda:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <SystemClock_Config+0x94>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002de2:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <SystemClock_Config+0x94>)
 8002de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002de8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dea:	2301      	movs	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002df2:	2302      	movs	r3, #2
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002dfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002e02:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002e06:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 ff01 	bl	8006c14 <HAL_RCC_OscConfig>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002e18:	f000 fb24 	bl	8003464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e1c:	230f      	movs	r3, #15
 8002e1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e20:	2303      	movs	r3, #3
 8002e22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e30:	463b      	mov	r3, r7
 8002e32:	2101      	movs	r1, #1
 8002e34:	4618      	mov	r0, r3
 8002e36:	f004 fa1d 	bl	8007274 <HAL_RCC_ClockConfig>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002e40:	f000 fb10 	bl	8003464 <Error_Handler>
  }
}
 8002e44:	bf00      	nop
 8002e46:	3748      	adds	r7, #72	; 0x48
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40007000 	.word	0x40007000

08002e50 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2100      	movs	r1, #0
 8002e58:	2017      	movs	r0, #23
 8002e5a:	f001 f8c8 	bl	8003fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e5e:	2017      	movs	r0, #23
 8002e60:	f001 f8e1 	bl	8004026 <HAL_NVIC_EnableIRQ>
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_PeriodElapsedCallback>:
//==============================================================================================


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3 )// INL correction, each 500ms
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d106      	bne.n	8002e86 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		if(cfg.LDACMODE==1)Need_update_DDS=1;
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002e7a:	789b      	ldrb	r3, [r3, #2]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d102      	bne.n	8002e86 <HAL_TIM_PeriodElapsedCallback+0x1e>
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim2 )//User interface workload, each 10ms
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d102      	bne.n	8002e94 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		Need_update_Display=1;
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
	}

}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	2000099c 	.word	0x2000099c
 8002ea4:	20000878 	.word	0x20000878
 8002ea8:	200008a6 	.word	0x200008a6
 8002eac:	2000095c 	.word	0x2000095c
 8002eb0:	200008a5 	.word	0x200008a5

08002eb4 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
	DAC_Write_FAST();
 8002ebe:	f7fe fd2d 	bl	800191c <DAC_Write_FAST>
	Ramp_dac_step_complete=1;
 8002ec2:	4b3b      	ldr	r3, [pc, #236]	; (8002fb0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_9)
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ece:	d16b      	bne.n	8002fa8 <HAL_GPIO_EXTI_Callback+0xf4>
	{
		if(DAC_code_direction)
 8002ed0:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <HAL_GPIO_EXTI_Callback+0x100>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d035      	beq.n	8002f44 <HAL_GPIO_EXTI_Callback+0x90>
		{
			if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 8002ed8:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <HAL_GPIO_EXTI_Callback+0x104>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8002ee0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002ee4:	4a35      	ldr	r2, [pc, #212]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x108>)
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d322      	bcc.n	8002f32 <HAL_GPIO_EXTI_Callback+0x7e>
			{
				DAC_code+=DDS_target_multipiller;
 8002eec:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x108>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <HAL_GPIO_EXTI_Callback+0x104>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4a31      	ldr	r2, [pc, #196]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x108>)
 8002ef8:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f00:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8002f02:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x108>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f0c:	f023 030f 	bic.w	r3, r3, #15
 8002f10:	4a2b      	ldr	r2, [pc, #172]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	4413      	add	r3, r2
 8002f16:	4a2a      	ldr	r2, [pc, #168]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002f18:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	0c1b      	lsrs	r3, r3, #16
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_GPIO_EXTI_Callback+0x110>)
 8002f24:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <HAL_GPIO_EXTI_Callback+0x110>)
 8002f2e:	805a      	strh	r2, [r3, #2]
 8002f30:	e03a      	b.n	8002fa8 <HAL_GPIO_EXTI_Callback+0xf4>

			} else  {
				CPLD_control(0x0); // Disable LDAC signal
 8002f32:	2000      	movs	r0, #0
 8002f34:	f7fe fc64 	bl	8001800 <CPLD_control>
				DAC_SendInit();
 8002f38:	f7fe fd0a 	bl	8001950 <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 8002f3c:	2005      	movs	r0, #5
 8002f3e:	f7ff fa17 	bl	8002370 <send_answer_to_CDC>
				return;
 8002f42:	e031      	b.n	8002fa8 <HAL_GPIO_EXTI_Callback+0xf4>
			}
		}
		else
		{
			if(DAC_code>=DDS_target_multipiller)
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x108>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_GPIO_EXTI_Callback+0x104>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d322      	bcc.n	8002f96 <HAL_GPIO_EXTI_Callback+0xe2>
			{
				DAC_code-=DDS_target_multipiller;
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x108>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_GPIO_EXTI_Callback+0x104>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	4a18      	ldr	r2, [pc, #96]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x108>)
 8002f5c:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8002f5e:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f64:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x108>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f70:	f023 030f 	bic.w	r3, r3, #15
 8002f74:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	4413      	add	r3, r2
 8002f7a:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002f7c:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	0c1b      	lsrs	r3, r3, #16
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_GPIO_EXTI_Callback+0x110>)
 8002f88:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <HAL_GPIO_EXTI_Callback+0x110>)
 8002f92:	805a      	strh	r2, [r3, #2]
 8002f94:	e008      	b.n	8002fa8 <HAL_GPIO_EXTI_Callback+0xf4>

			} else {
				CPLD_control(0x0); // Disable LDAC signal
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe fc32 	bl	8001800 <CPLD_control>
				DAC_SendInit();
 8002f9c:	f7fe fcd8 	bl	8001950 <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 8002fa0:	2005      	movs	r0, #5
 8002fa2:	f7ff f9e5 	bl	8002370 <send_answer_to_CDC>
				return;
 8002fa6:	bf00      	nop
			}
		}
	}
}
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200008a7 	.word	0x200008a7
 8002fb4:	200008a4 	.word	0x200008a4
 8002fb8:	2000038c 	.word	0x2000038c
 8002fbc:	200008a0 	.word	0x200008a0
 8002fc0:	20000870 	.word	0x20000870
 8002fc4:	20000874 	.word	0x20000874

08002fc8 <Parsing_USB_command>:

void Parsing_USB_command(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b094      	sub	sp, #80	; 0x50
 8002fcc:	af00      	add	r7, sp, #0
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];
	float dac_resolution;

	found = strtok((char *)command_buffer," ");
 8002fce:	49b8      	ldr	r1, [pc, #736]	; (80032b0 <Parsing_USB_command+0x2e8>)
 8002fd0:	48b8      	ldr	r0, [pc, #736]	; (80032b4 <Parsing_USB_command+0x2ec>)
 8002fd2:	f00b ffc9 	bl	800ef68 <strtok>
 8002fd6:	64b8      	str	r0, [r7, #72]	; 0x48
	if(found!=NULL)
 8002fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <Parsing_USB_command+0x34>
	{
		strcpy(decoded_string_1,found);
 8002fde:	f107 0320 	add.w	r3, r7, #32
 8002fe2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f00b f99f 	bl	800e328 <strcpy>
	{
		send_answer_to_CDC(ERROR_TYPE_1);
		return;
	}

	found = strtok(NULL,"\r");
 8002fea:	49b3      	ldr	r1, [pc, #716]	; (80032b8 <Parsing_USB_command+0x2f0>)
 8002fec:	2000      	movs	r0, #0
 8002fee:	f00b ffbb 	bl	800ef68 <strtok>
 8002ff2:	64b8      	str	r0, [r7, #72]	; 0x48
	if(found!=NULL)
 8002ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d023      	beq.n	8003042 <Parsing_USB_command+0x7a>
 8002ffa:	e003      	b.n	8003004 <Parsing_USB_command+0x3c>
		send_answer_to_CDC(ERROR_TYPE_1);
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f7ff f9b7 	bl	8002370 <send_answer_to_CDC>
		return;
 8003002:	e202      	b.n	800340a <Parsing_USB_command+0x442>
	{
		strcpy(decoded_string_2,found);
 8003004:	463b      	mov	r3, r7
 8003006:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003008:	4618      	mov	r0, r3
 800300a:	f00b f98d 	bl	800e328 <strcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 800300e:	2300      	movs	r3, #0
 8003010:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003012:	e00d      	b.n	8003030 <Parsing_USB_command+0x68>
 8003014:	463a      	mov	r2, r7
 8003016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003018:	4413      	add	r3, r2
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b20      	cmp	r3, #32
 800301e:	d104      	bne.n	800302a <Parsing_USB_command+0x62>
 8003020:	463a      	mov	r2, r7
 8003022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003024:	4413      	add	r3, r2
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302c:	3301      	adds	r3, #1
 800302e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003030:	463b      	mov	r3, r7
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd f8ae 	bl	8000194 <strlen>
 8003038:	4602      	mov	r2, r0
 800303a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303c:	429a      	cmp	r2, r3
 800303e:	d8e9      	bhi.n	8003014 <Parsing_USB_command+0x4c>
 8003040:	e003      	b.n	800304a <Parsing_USB_command+0x82>
	}
	else
	{
		send_answer_to_CDC(ERROR_TYPE_1);
 8003042:	2000      	movs	r0, #0
 8003044:	f7ff f994 	bl	8002370 <send_answer_to_CDC>
		return;
 8003048:	e1df      	b.n	800340a <Parsing_USB_command+0x442>
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 800304a:	f107 0320 	add.w	r3, r7, #32
 800304e:	499b      	ldr	r1, [pc, #620]	; (80032bc <Parsing_USB_command+0x2f4>)
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd f895 	bl	8000180 <strcmp>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d11f      	bne.n	800309c <Parsing_USB_command+0xd4>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 800305c:	463b      	mov	r3, r7
 800305e:	4998      	ldr	r1, [pc, #608]	; (80032c0 <Parsing_USB_command+0x2f8>)
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd f88d 	bl	8000180 <strcmp>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d105      	bne.n	8003078 <Parsing_USB_command+0xb0>
			cmd_SWEEP_START();
 800306c:	f7ff fa2a 	bl	80024c4 <cmd_SWEEP_START>
			send_answer_to_CDC(OK_TYPE_2);
 8003070:	2003      	movs	r0, #3
 8003072:	f7ff f97d 	bl	8002370 <send_answer_to_CDC>
			return;
 8003076:	e1c8      	b.n	800340a <Parsing_USB_command+0x442>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP"))){
 8003078:	463b      	mov	r3, r7
 800307a:	4992      	ldr	r1, [pc, #584]	; (80032c4 <Parsing_USB_command+0x2fc>)
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd f87f 	bl	8000180 <strcmp>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <Parsing_USB_command+0xcc>
				cmd_SWEEP_STOP();
 8003088:	f7ff fa2c 	bl	80024e4 <cmd_SWEEP_STOP>
				send_answer_to_CDC(OK_TYPE_2);
 800308c:	2003      	movs	r0, #3
 800308e:	f7ff f96f 	bl	8002370 <send_answer_to_CDC>
				return;
 8003092:	e1ba      	b.n	800340a <Parsing_USB_command+0x442>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 8003094:	2000      	movs	r0, #0
 8003096:	f7ff f96b 	bl	8002370 <send_answer_to_CDC>
				return;
 800309a:	e1b6      	b.n	800340a <Parsing_USB_command+0x442>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 800309c:	f107 0320 	add.w	r3, r7, #32
 80030a0:	4989      	ldr	r1, [pc, #548]	; (80032c8 <Parsing_USB_command+0x300>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd f86c 	bl	8000180 <strcmp>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d169      	bne.n	8003182 <Parsing_USB_command+0x1ba>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 80030ae:	463b      	mov	r3, r7
 80030b0:	4986      	ldr	r1, [pc, #536]	; (80032cc <Parsing_USB_command+0x304>)
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd f864 	bl	8000180 <strcmp>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <Parsing_USB_command+0x104>
			cmd_DAC_SET(DAC_CODE_TOP);
 80030be:	4884      	ldr	r0, [pc, #528]	; (80032d0 <Parsing_USB_command+0x308>)
 80030c0:	f7ff fa1a 	bl	80024f8 <cmd_DAC_SET>
			send_answer_to_CDC(OK_TYPE_2);
 80030c4:	2003      	movs	r0, #3
 80030c6:	f7ff f953 	bl	8002370 <send_answer_to_CDC>
			return;
 80030ca:	e19e      	b.n	800340a <Parsing_USB_command+0x442>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 80030cc:	463b      	mov	r3, r7
 80030ce:	4981      	ldr	r1, [pc, #516]	; (80032d4 <Parsing_USB_command+0x30c>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd f855 	bl	8000180 <strcmp>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <Parsing_USB_command+0x122>
				cmd_DAC_SET(DAC_CODE_DOWN);
 80030dc:	2000      	movs	r0, #0
 80030de:	f7ff fa0b 	bl	80024f8 <cmd_DAC_SET>
				send_answer_to_CDC(OK_TYPE_2);
 80030e2:	2003      	movs	r0, #3
 80030e4:	f7ff f944 	bl	8002370 <send_answer_to_CDC>
				return;
 80030e8:	e18f      	b.n	800340a <Parsing_USB_command+0x442>
			}
			else
			{
				atof_tmp=atof(decoded_string_2);
 80030ea:	463b      	mov	r3, r7
 80030ec:	4618      	mov	r0, r3
 80030ee:	f00a fc77 	bl	800d9e0 <atof>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	f7fd fd07 	bl	8000b0c <__aeabi_d2f>
 80030fe:	4603      	mov	r3, r0
 8003100:	647b      	str	r3, [r7, #68]	; 0x44
				if(atof_tmp>=cal_DAC_down_voltage && atof_tmp<=cal_DAC_up_voltage)
 8003102:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <Parsing_USB_command+0x310>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4619      	mov	r1, r3
 8003108:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800310a:	f7fe f80f 	bl	800112c <__aeabi_fcmpge>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d032      	beq.n	800317a <Parsing_USB_command+0x1b2>
 8003114:	4b71      	ldr	r3, [pc, #452]	; (80032dc <Parsing_USB_command+0x314>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4619      	mov	r1, r3
 800311a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800311c:	f7fd fffc 	bl	8001118 <__aeabi_fcmple>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d029      	beq.n	800317a <Parsing_USB_command+0x1b2>
				{
					dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 8003126:	4b6d      	ldr	r3, [pc, #436]	; (80032dc <Parsing_USB_command+0x314>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6b      	ldr	r2, [pc, #428]	; (80032d8 <Parsing_USB_command+0x310>)
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fd3f 	bl	8000bb4 <__aeabi_fsub>
 8003136:	4603      	mov	r3, r0
 8003138:	4969      	ldr	r1, [pc, #420]	; (80032e0 <Parsing_USB_command+0x318>)
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fef8 	bl	8000f30 <__aeabi_fdiv>
 8003140:	4603      	mov	r3, r0
 8003142:	643b      	str	r3, [r7, #64]	; 0x40
					DAC_code=(uint32_t)((atof_tmp-cal_DAC_down_voltage)/dac_resolution);
 8003144:	4b64      	ldr	r3, [pc, #400]	; (80032d8 <Parsing_USB_command+0x310>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800314c:	f7fd fd32 	bl	8000bb4 <__aeabi_fsub>
 8003150:	4603      	mov	r3, r0
 8003152:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd feeb 	bl	8000f30 <__aeabi_fdiv>
 800315a:	4603      	mov	r3, r0
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd fff9 	bl	8001154 <__aeabi_f2uiz>
 8003162:	4603      	mov	r3, r0
 8003164:	4a5f      	ldr	r2, [pc, #380]	; (80032e4 <Parsing_USB_command+0x31c>)
 8003166:	6013      	str	r3, [r2, #0]
					cmd_DAC_SET(DAC_code);
 8003168:	4b5e      	ldr	r3, [pc, #376]	; (80032e4 <Parsing_USB_command+0x31c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff f9c3 	bl	80024f8 <cmd_DAC_SET>
					send_answer_to_CDC(OK_TYPE_2);
 8003172:	2003      	movs	r0, #3
 8003174:	f7ff f8fc 	bl	8002370 <send_answer_to_CDC>
					return;
 8003178:	e147      	b.n	800340a <Parsing_USB_command+0x442>
				}
				else
				{
					send_answer_to_CDC(ERROR_TYPE_2);
 800317a:	2001      	movs	r0, #1
 800317c:	f7ff f8f8 	bl	8002370 <send_answer_to_CDC>
					return;
 8003180:	e143      	b.n	800340a <Parsing_USB_command+0x442>

		}
	}

	// ==== DAC_CAL_TEMP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TEMP")))
 8003182:	f107 0320 	add.w	r3, r7, #32
 8003186:	4958      	ldr	r1, [pc, #352]	; (80032e8 <Parsing_USB_command+0x320>)
 8003188:	4618      	mov	r0, r3
 800318a:	f7fc fff9 	bl	8000180 <strcmp>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d116      	bne.n	80031c2 <Parsing_USB_command+0x1fa>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8003194:	463b      	mov	r3, r7
 8003196:	494a      	ldr	r1, [pc, #296]	; (80032c0 <Parsing_USB_command+0x2f8>)
 8003198:	4618      	mov	r0, r3
 800319a:	f7fc fff1 	bl	8000180 <strcmp>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <Parsing_USB_command+0x1f2>
			send_answer_to_CDC(RUN_CAL_TYPE_TEMP);
 80031a4:	200d      	movs	r0, #13
 80031a6:	f7ff f8e3 	bl	8002370 <send_answer_to_CDC>
			cmd_CAL(DAC_CAL_TEMP,NONE);
 80031aa:	4950      	ldr	r1, [pc, #320]	; (80032ec <Parsing_USB_command+0x324>)
 80031ac:	2006      	movs	r0, #6
 80031ae:	f7ff f9cf 	bl	8002550 <cmd_CAL>
			send_answer_to_CDC(OK_TYPE_1);
 80031b2:	2002      	movs	r0, #2
 80031b4:	f7ff f8dc 	bl	8002370 <send_answer_to_CDC>
			return;
 80031b8:	e127      	b.n	800340a <Parsing_USB_command+0x442>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7ff f8d8 	bl	8002370 <send_answer_to_CDC>
			return;
 80031c0:	e123      	b.n	800340a <Parsing_USB_command+0x442>
		}
	}

	// ==== DAC_CAL_POLY_A command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_A")))
 80031c2:	f107 0320 	add.w	r3, r7, #32
 80031c6:	494a      	ldr	r1, [pc, #296]	; (80032f0 <Parsing_USB_command+0x328>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fc ffd9 	bl	8000180 <strcmp>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d112      	bne.n	80031fa <Parsing_USB_command+0x232>
	{
		cmd_CAL(DAC_CAL_POLY_A,atof(decoded_string_2));
 80031d4:	463b      	mov	r3, r7
 80031d6:	4618      	mov	r0, r3
 80031d8:	f00a fc02 	bl	800d9e0 <atof>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7fd fc92 	bl	8000b0c <__aeabi_d2f>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4619      	mov	r1, r3
 80031ec:	2007      	movs	r0, #7
 80031ee:	f7ff f9af 	bl	8002550 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 80031f2:	2003      	movs	r0, #3
 80031f4:	f7ff f8bc 	bl	8002370 <send_answer_to_CDC>
		return;
 80031f8:	e107      	b.n	800340a <Parsing_USB_command+0x442>
	}

	// ==== DAC_CAL_POLY_B command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_B")))
 80031fa:	f107 0320 	add.w	r3, r7, #32
 80031fe:	493d      	ldr	r1, [pc, #244]	; (80032f4 <Parsing_USB_command+0x32c>)
 8003200:	4618      	mov	r0, r3
 8003202:	f7fc ffbd 	bl	8000180 <strcmp>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d112      	bne.n	8003232 <Parsing_USB_command+0x26a>
	{
		cmd_CAL(DAC_CAL_POLY_B,atof(decoded_string_2));
 800320c:	463b      	mov	r3, r7
 800320e:	4618      	mov	r0, r3
 8003210:	f00a fbe6 	bl	800d9e0 <atof>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	f7fd fc76 	bl	8000b0c <__aeabi_d2f>
 8003220:	4603      	mov	r3, r0
 8003222:	4619      	mov	r1, r3
 8003224:	2008      	movs	r0, #8
 8003226:	f7ff f993 	bl	8002550 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 800322a:	2003      	movs	r0, #3
 800322c:	f7ff f8a0 	bl	8002370 <send_answer_to_CDC>
		return;
 8003230:	e0eb      	b.n	800340a <Parsing_USB_command+0x442>
	}

	// ==== DAC_CAL_POLY_C command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_C")))
 8003232:	f107 0320 	add.w	r3, r7, #32
 8003236:	4930      	ldr	r1, [pc, #192]	; (80032f8 <Parsing_USB_command+0x330>)
 8003238:	4618      	mov	r0, r3
 800323a:	f7fc ffa1 	bl	8000180 <strcmp>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d112      	bne.n	800326a <Parsing_USB_command+0x2a2>
	{
		cmd_CAL(DAC_CAL_POLY_C,atof(decoded_string_2));
 8003244:	463b      	mov	r3, r7
 8003246:	4618      	mov	r0, r3
 8003248:	f00a fbca 	bl	800d9e0 <atof>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
 8003254:	f7fd fc5a 	bl	8000b0c <__aeabi_d2f>
 8003258:	4603      	mov	r3, r0
 800325a:	4619      	mov	r1, r3
 800325c:	2009      	movs	r0, #9
 800325e:	f7ff f977 	bl	8002550 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003262:	2003      	movs	r0, #3
 8003264:	f7ff f884 	bl	8002370 <send_answer_to_CDC>
		return;
 8003268:	e0cf      	b.n	800340a <Parsing_USB_command+0x442>
	}

	// ==== DAC_CAL_TOP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TOP")))
 800326a:	f107 0320 	add.w	r3, r7, #32
 800326e:	4923      	ldr	r1, [pc, #140]	; (80032fc <Parsing_USB_command+0x334>)
 8003270:	4618      	mov	r0, r3
 8003272:	f7fc ff85 	bl	8000180 <strcmp>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d141      	bne.n	8003300 <Parsing_USB_command+0x338>
	{
		if(cmd_CAL(DAC_CAL_TOP,atof(decoded_string_2)))
 800327c:	463b      	mov	r3, r7
 800327e:	4618      	mov	r0, r3
 8003280:	f00a fbae 	bl	800d9e0 <atof>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	f7fd fc3e 	bl	8000b0c <__aeabi_d2f>
 8003290:	4603      	mov	r3, r0
 8003292:	4619      	mov	r1, r3
 8003294:	200a      	movs	r0, #10
 8003296:	f7ff f95b 	bl	8002550 <cmd_CAL>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <Parsing_USB_command+0x2e0>
		{
			send_answer_to_CDC(OK_TYPE_2);
 80032a0:	2003      	movs	r0, #3
 80032a2:	f7ff f865 	bl	8002370 <send_answer_to_CDC>
			return;
 80032a6:	e0b0      	b.n	800340a <Parsing_USB_command+0x442>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 80032a8:	2001      	movs	r0, #1
 80032aa:	f7ff f861 	bl	8002370 <send_answer_to_CDC>
			return;
 80032ae:	e0ac      	b.n	800340a <Parsing_USB_command+0x442>
 80032b0:	08011ae8 	.word	0x08011ae8
 80032b4:	200007dc 	.word	0x200007dc
 80032b8:	08011aec 	.word	0x08011aec
 80032bc:	08011af0 	.word	0x08011af0
 80032c0:	08011af8 	.word	0x08011af8
 80032c4:	08011b00 	.word	0x08011b00
 80032c8:	08011b08 	.word	0x08011b08
 80032cc:	08011b10 	.word	0x08011b10
 80032d0:	000fffff 	.word	0x000fffff
 80032d4:	08011b14 	.word	0x08011b14
 80032d8:	2000089c 	.word	0x2000089c
 80032dc:	20000898 	.word	0x20000898
 80032e0:	497ffff0 	.word	0x497ffff0
 80032e4:	200008a0 	.word	0x200008a0
 80032e8:	08011b1c 	.word	0x08011b1c
 80032ec:	41400000 	.word	0x41400000
 80032f0:	08011b2c 	.word	0x08011b2c
 80032f4:	08011b3c 	.word	0x08011b3c
 80032f8:	08011b4c 	.word	0x08011b4c
 80032fc:	08011b5c 	.word	0x08011b5c
		}
	}


	// ==== DAC_CAL_DOWN command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_DOWN")))
 8003300:	f107 0320 	add.w	r3, r7, #32
 8003304:	4944      	ldr	r1, [pc, #272]	; (8003418 <Parsing_USB_command+0x450>)
 8003306:	4618      	mov	r0, r3
 8003308:	f7fc ff3a 	bl	8000180 <strcmp>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d119      	bne.n	8003346 <Parsing_USB_command+0x37e>
	{
		if(cmd_CAL(DAC_CAL_DOWN,atof(decoded_string_2)))
 8003312:	463b      	mov	r3, r7
 8003314:	4618      	mov	r0, r3
 8003316:	f00a fb63 	bl	800d9e0 <atof>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	f7fd fbf3 	bl	8000b0c <__aeabi_d2f>
 8003326:	4603      	mov	r3, r0
 8003328:	4619      	mov	r1, r3
 800332a:	200b      	movs	r0, #11
 800332c:	f7ff f910 	bl	8002550 <cmd_CAL>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <Parsing_USB_command+0x376>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003336:	2003      	movs	r0, #3
 8003338:	f7ff f81a 	bl	8002370 <send_answer_to_CDC>
			return;
 800333c:	e065      	b.n	800340a <Parsing_USB_command+0x442>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 800333e:	2001      	movs	r0, #1
 8003340:	f7ff f816 	bl	8002370 <send_answer_to_CDC>
			return;
 8003344:	e061      	b.n	800340a <Parsing_USB_command+0x442>
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 8003346:	f107 0320 	add.w	r3, r7, #32
 800334a:	4934      	ldr	r1, [pc, #208]	; (800341c <Parsing_USB_command+0x454>)
 800334c:	4618      	mov	r0, r3
 800334e:	f7fc ff17 	bl	8000180 <strcmp>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d129      	bne.n	80033ac <Parsing_USB_command+0x3e4>
	{
		atof_tmp=atof(decoded_string_2);
 8003358:	463b      	mov	r3, r7
 800335a:	4618      	mov	r0, r3
 800335c:	f00a fb40 	bl	800d9e0 <atof>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	f7fd fbd0 	bl	8000b0c <__aeabi_d2f>
 800336c:	4603      	mov	r3, r0
 800336e:	647b      	str	r3, [r7, #68]	; 0x44
		if(atof_tmp<0.001 || atof_tmp>1)
 8003370:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003372:	f7fd f87b 	bl	800046c <__aeabi_f2d>
 8003376:	a326      	add	r3, pc, #152	; (adr r3, 8003410 <Parsing_USB_command+0x448>)
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f7fd fb40 	bl	8000a00 <__aeabi_dcmplt>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <Parsing_USB_command+0x3ce>
 8003386:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800338a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800338c:	f7fd fed8 	bl	8001140 <__aeabi_fcmpgt>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <Parsing_USB_command+0x3d6>
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 8003396:	2000      	movs	r0, #0
 8003398:	f7fe ffea 	bl	8002370 <send_answer_to_CDC>
			return;
 800339c:	e035      	b.n	800340a <Parsing_USB_command+0x442>
		}
		else
		{
			DAC_target_speed=atof_tmp;
 800339e:	4a20      	ldr	r2, [pc, #128]	; (8003420 <Parsing_USB_command+0x458>)
 80033a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a2:	6013      	str	r3, [r2, #0]

			send_answer_to_CDC(OK_TYPE_2);
 80033a4:	2003      	movs	r0, #3
 80033a6:	f7fe ffe3 	bl	8002370 <send_answer_to_CDC>
			return;
 80033aa:	e02e      	b.n	800340a <Parsing_USB_command+0x442>
		}
	}

	// ==== SWEEP_DIRECTION command ====
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 80033ac:	f107 0320 	add.w	r3, r7, #32
 80033b0:	491c      	ldr	r1, [pc, #112]	; (8003424 <Parsing_USB_command+0x45c>)
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fc fee4 	bl	8000180 <strcmp>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d121      	bne.n	8003402 <Parsing_USB_command+0x43a>
	{
		if(!(strcmp(decoded_string_2,"UP"))){
 80033be:	463b      	mov	r3, r7
 80033c0:	4919      	ldr	r1, [pc, #100]	; (8003428 <Parsing_USB_command+0x460>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fc fedc 	bl	8000180 <strcmp>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <Parsing_USB_command+0x414>
			DAC_code_direction=1;
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <Parsing_USB_command+0x464>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
			send_answer_to_CDC(OK_TYPE_2);
 80033d4:	2003      	movs	r0, #3
 80033d6:	f7fe ffcb 	bl	8002370 <send_answer_to_CDC>
			return;
 80033da:	e016      	b.n	800340a <Parsing_USB_command+0x442>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 80033dc:	463b      	mov	r3, r7
 80033de:	4914      	ldr	r1, [pc, #80]	; (8003430 <Parsing_USB_command+0x468>)
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fc fecd 	bl	8000180 <strcmp>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <Parsing_USB_command+0x432>
				DAC_code_direction=0;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <Parsing_USB_command+0x464>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
				send_answer_to_CDC(OK_TYPE_2);
 80033f2:	2003      	movs	r0, #3
 80033f4:	f7fe ffbc 	bl	8002370 <send_answer_to_CDC>
				return;
 80033f8:	e007      	b.n	800340a <Parsing_USB_command+0x442>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 80033fa:	2000      	movs	r0, #0
 80033fc:	f7fe ffb8 	bl	8002370 <send_answer_to_CDC>
				return;
 8003400:	e003      	b.n	800340a <Parsing_USB_command+0x442>
			}

		}
	}

	send_answer_to_CDC(ERROR_TYPE_1);
 8003402:	2000      	movs	r0, #0
 8003404:	f7fe ffb4 	bl	8002370 <send_answer_to_CDC>
	return;
 8003408:	bf00      	nop
}
 800340a:	3750      	adds	r7, #80	; 0x50
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	d2f1a9fc 	.word	0xd2f1a9fc
 8003414:	3f50624d 	.word	0x3f50624d
 8003418:	08011b68 	.word	0x08011b68
 800341c:	08011b78 	.word	0x08011b78
 8003420:	20000890 	.word	0x20000890
 8003424:	08011b84 	.word	0x08011b84
 8003428:	08011b94 	.word	0x08011b94
 800342c:	200008a4 	.word	0x200008a4
 8003430:	08011b14 	.word	0x08011b14

08003434 <Write_to_circ_buffer>:

void Write_to_circ_buffer(uint8_t Buf)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 800343e:	1dfb      	adds	r3, r7, #7
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fbc9 	bl	8002bd8 <USB_rx_command_buffer_push_refd>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <Write_to_circ_buffer+0x24>
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <Write_to_circ_buffer+0x2c>)
 800344e:	2200      	movs	r2, #0
 8003450:	809a      	strh	r2, [r3, #4]
 8003452:	4b03      	ldr	r3, [pc, #12]	; (8003460 <Write_to_circ_buffer+0x2c>)
 8003454:	2200      	movs	r2, #0
 8003456:	80da      	strh	r2, [r3, #6]
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	2000037c 	.word	0x2000037c

08003464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003468:	b672      	cpsid	i
}
 800346a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800346c:	e7fe      	b.n	800346c <Error_Handler+0x8>
	...

08003470 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <MX_SPI1_Init+0x60>)
 8003476:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <MX_SPI1_Init+0x64>)
 8003478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <MX_SPI1_Init+0x60>)
 800347c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003480:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003482:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <MX_SPI1_Init+0x60>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <MX_SPI1_Init+0x60>)
 800348a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800348e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <MX_SPI1_Init+0x60>)
 8003492:	2200      	movs	r2, #0
 8003494:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <MX_SPI1_Init+0x60>)
 8003498:	2201      	movs	r2, #1
 800349a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <MX_SPI1_Init+0x60>)
 800349e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80034a4:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <MX_SPI1_Init+0x60>)
 80034a6:	2218      	movs	r2, #24
 80034a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <MX_SPI1_Init+0x60>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <MX_SPI1_Init+0x60>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <MX_SPI1_Init+0x60>)
 80034b8:	220a      	movs	r2, #10
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034bc:	4804      	ldr	r0, [pc, #16]	; (80034d0 <MX_SPI1_Init+0x60>)
 80034be:	f004 f98b 	bl	80077d8 <HAL_SPI_Init>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 80034c8:	f7ff ffcc 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	200008a8 	.word	0x200008a8
 80034d4:	40013000 	.word	0x40013000

080034d8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <MX_SPI2_Init+0x60>)
 80034de:	4a17      	ldr	r2, [pc, #92]	; (800353c <MX_SPI2_Init+0x64>)
 80034e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <MX_SPI2_Init+0x60>)
 80034e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <MX_SPI2_Init+0x60>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <MX_SPI2_Init+0x60>)
 80034f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <MX_SPI2_Init+0x60>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <MX_SPI2_Init+0x60>)
 8003500:	2201      	movs	r2, #1
 8003502:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <MX_SPI2_Init+0x60>)
 8003506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <MX_SPI2_Init+0x60>)
 800350e:	2218      	movs	r2, #24
 8003510:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <MX_SPI2_Init+0x60>)
 8003514:	2200      	movs	r2, #0
 8003516:	621a      	str	r2, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <MX_SPI2_Init+0x60>)
 800351a:	2200      	movs	r2, #0
 800351c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <MX_SPI2_Init+0x60>)
 8003520:	220a      	movs	r2, #10
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003524:	4804      	ldr	r0, [pc, #16]	; (8003538 <MX_SPI2_Init+0x60>)
 8003526:	f004 f957 	bl	80077d8 <HAL_SPI_Init>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8003530:	f7ff ff98 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000900 	.word	0x20000900
 800353c:	40003800 	.word	0x40003800

08003540 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08c      	sub	sp, #48	; 0x30
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 031c 	add.w	r3, r7, #28
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a32      	ldr	r2, [pc, #200]	; (8003628 <HAL_SPI_MspInit+0xe8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d130      	bne.n	80035c4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003562:	4b32      	ldr	r3, [pc, #200]	; (800362c <HAL_SPI_MspInit+0xec>)
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	4a31      	ldr	r2, [pc, #196]	; (800362c <HAL_SPI_MspInit+0xec>)
 8003568:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800356c:	6213      	str	r3, [r2, #32]
 800356e:	4b2f      	ldr	r3, [pc, #188]	; (800362c <HAL_SPI_MspInit+0xec>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357a:	4b2c      	ldr	r3, [pc, #176]	; (800362c <HAL_SPI_MspInit+0xec>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	4a2b      	ldr	r2, [pc, #172]	; (800362c <HAL_SPI_MspInit+0xec>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	61d3      	str	r3, [r2, #28]
 8003586:	4b29      	ldr	r3, [pc, #164]	; (800362c <HAL_SPI_MspInit+0xec>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003592:	23e0      	movs	r3, #224	; 0xe0
 8003594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003596:	2302      	movs	r3, #2
 8003598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359e:	2303      	movs	r3, #3
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035a2:	2305      	movs	r3, #5
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a6:	f107 031c 	add.w	r3, r7, #28
 80035aa:	4619      	mov	r1, r3
 80035ac:	4820      	ldr	r0, [pc, #128]	; (8003630 <HAL_SPI_MspInit+0xf0>)
 80035ae:	f001 f8f3 	bl	8004798 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80035b2:	2200      	movs	r2, #0
 80035b4:	2101      	movs	r1, #1
 80035b6:	2023      	movs	r0, #35	; 0x23
 80035b8:	f000 fd19 	bl	8003fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80035bc:	2023      	movs	r0, #35	; 0x23
 80035be:	f000 fd32 	bl	8004026 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80035c2:	e02d      	b.n	8003620 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <HAL_SPI_MspInit+0xf4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d128      	bne.n	8003620 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <HAL_SPI_MspInit+0xec>)
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	4a16      	ldr	r2, [pc, #88]	; (800362c <HAL_SPI_MspInit+0xec>)
 80035d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d8:	6253      	str	r3, [r2, #36]	; 0x24
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <HAL_SPI_MspInit+0xec>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_SPI_MspInit+0xec>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4a10      	ldr	r2, [pc, #64]	; (800362c <HAL_SPI_MspInit+0xec>)
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	61d3      	str	r3, [r2, #28]
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <HAL_SPI_MspInit+0xec>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80035fe:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	2302      	movs	r3, #2
 8003606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360c:	2303      	movs	r3, #3
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003610:	2305      	movs	r3, #5
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003614:	f107 031c 	add.w	r3, r7, #28
 8003618:	4619      	mov	r1, r3
 800361a:	4807      	ldr	r0, [pc, #28]	; (8003638 <HAL_SPI_MspInit+0xf8>)
 800361c:	f001 f8bc 	bl	8004798 <HAL_GPIO_Init>
}
 8003620:	bf00      	nop
 8003622:	3730      	adds	r7, #48	; 0x30
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40013000 	.word	0x40013000
 800362c:	40023800 	.word	0x40023800
 8003630:	40020000 	.word	0x40020000
 8003634:	40003800 	.word	0x40003800
 8003638:	40020400 	.word	0x40020400

0800363c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8003642:	4b26      	ldr	r3, [pc, #152]	; (80036dc <HAL_MspInit+0xa0>)
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <HAL_MspInit+0xa0>)
 8003648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800364c:	6253      	str	r3, [r2, #36]	; 0x24
 800364e:	4b23      	ldr	r3, [pc, #140]	; (80036dc <HAL_MspInit+0xa0>)
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365a:	4b20      	ldr	r3, [pc, #128]	; (80036dc <HAL_MspInit+0xa0>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <HAL_MspInit+0xa0>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6213      	str	r3, [r2, #32]
 8003666:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_MspInit+0xa0>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003672:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <HAL_MspInit+0xa0>)
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	4a19      	ldr	r2, [pc, #100]	; (80036dc <HAL_MspInit+0xa0>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367c:	6253      	str	r3, [r2, #36]	; 0x24
 800367e:	4b17      	ldr	r3, [pc, #92]	; (80036dc <HAL_MspInit+0xa0>)
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800368a:	2200      	movs	r2, #0
 800368c:	2101      	movs	r1, #1
 800368e:	f06f 000b 	mvn.w	r0, #11
 8003692:	f000 fcac 	bl	8003fee <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8003696:	2200      	movs	r2, #0
 8003698:	2101      	movs	r1, #1
 800369a:	f06f 000a 	mvn.w	r0, #10
 800369e:	f000 fca6 	bl	8003fee <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2101      	movs	r1, #1
 80036a6:	f06f 0009 	mvn.w	r0, #9
 80036aa:	f000 fca0 	bl	8003fee <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2101      	movs	r1, #1
 80036b2:	f06f 0004 	mvn.w	r0, #4
 80036b6:	f000 fc9a 	bl	8003fee <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80036ba:	2200      	movs	r2, #0
 80036bc:	2101      	movs	r1, #1
 80036be:	f06f 0003 	mvn.w	r0, #3
 80036c2:	f000 fc94 	bl	8003fee <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2101      	movs	r1, #1
 80036ca:	f06f 0001 	mvn.w	r0, #1
 80036ce:	f000 fc8e 	bl	8003fee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800

080036e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036e4:	e7fe      	b.n	80036e4 <NMI_Handler+0x4>

080036e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036e6:	b480      	push	{r7}
 80036e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036ea:	e7fe      	b.n	80036ea <HardFault_Handler+0x4>

080036ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036f0:	e7fe      	b.n	80036f0 <MemManage_Handler+0x4>

080036f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036f2:	b480      	push	{r7}
 80036f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036f6:	e7fe      	b.n	80036f6 <BusFault_Handler+0x4>

080036f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036fc:	e7fe      	b.n	80036fc <UsageFault_Handler+0x4>

080036fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036fe:	b480      	push	{r7}
 8003700:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800370a:	b480      	push	{r7}
 800370c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003726:	f000 fb4d 	bl	8003dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <USB_LP_IRQHandler+0x10>)
 8003736:	f001 ff45 	bl	80055c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	2000105c 	.word	0x2000105c

08003744 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encode_Push_Pin);
 8003748:	f44f 7080 	mov.w	r0, #256	; 0x100
 800374c:	f001 f9d4 	bl	8004af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003750:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003754:	f001 f9d0 	bl	8004af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}

0800375c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003760:	4802      	ldr	r0, [pc, #8]	; (800376c <TIM2_IRQHandler+0x10>)
 8003762:	f005 f873 	bl	800884c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	2000095c 	.word	0x2000095c

08003770 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <TIM3_IRQHandler+0x10>)
 8003776:	f005 f869 	bl	800884c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	2000099c 	.word	0x2000099c

08003784 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <SPI1_IRQHandler+0x10>)
 800378a:	f004 fc91 	bl	80080b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200008a8 	.word	0x200008a8

08003798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Start_button_Pin);
 800379c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037a0:	f001 f9aa 	bl	8004af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
	return 1;
 80037ac:	2301      	movs	r3, #1
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr

080037b6 <_kill>:

int _kill(int pid, int sig)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037c0:	f00a f912 	bl	800d9e8 <__errno>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2216      	movs	r2, #22
 80037c8:	601a      	str	r2, [r3, #0]
	return -1;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <_exit>:

void _exit (int status)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037de:	f04f 31ff 	mov.w	r1, #4294967295
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ffe7 	bl	80037b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037e8:	e7fe      	b.n	80037e8 <_exit+0x12>

080037ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	e00a      	b.n	8003812 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037fc:	f3af 8000 	nop.w
 8003800:	4601      	mov	r1, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	60ba      	str	r2, [r7, #8]
 8003808:	b2ca      	uxtb	r2, r1
 800380a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	3301      	adds	r3, #1
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	dbf0      	blt.n	80037fc <_read+0x12>
	}

return len;
 800381a:	687b      	ldr	r3, [r7, #4]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e009      	b.n	800384a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	60ba      	str	r2, [r7, #8]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	3301      	adds	r3, #1
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	429a      	cmp	r2, r3
 8003850:	dbf1      	blt.n	8003836 <_write+0x12>
	}
	return len;
 8003852:	687b      	ldr	r3, [r7, #4]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <_close>:

int _close(int file)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	return -1;
 8003864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003882:	605a      	str	r2, [r3, #4]
	return 0;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <_isatty>:

int _isatty(int file)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	return 1;
 8003898:	2301      	movs	r3, #1
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
	return 0;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <_sbrk+0x5c>)
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <_sbrk+0x60>)
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <_sbrk+0x64>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <_sbrk+0x64>)
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <_sbrk+0x68>)
 80038dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <_sbrk+0x64>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d207      	bcs.n	80038fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038ec:	f00a f87c 	bl	800d9e8 <__errno>
 80038f0:	4603      	mov	r3, r0
 80038f2:	220c      	movs	r2, #12
 80038f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038f6:	f04f 33ff 	mov.w	r3, #4294967295
 80038fa:	e009      	b.n	8003910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <_sbrk+0x64>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <_sbrk+0x64>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	4a05      	ldr	r2, [pc, #20]	; (8003920 <_sbrk+0x64>)
 800390c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800390e:	68fb      	ldr	r3, [r7, #12]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20004000 	.word	0x20004000
 800391c:	00000400 	.word	0x00000400
 8003920:	20000958 	.word	0x20000958
 8003924:	20001578 	.word	0x20001578

08003928 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800393a:	f107 0308 	add.w	r3, r7, #8
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003948:	463b      	mov	r3, r7
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <MX_TIM2_Init+0x94>)
 8003952:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003956:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 -1;
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <MX_TIM2_Init+0x94>)
 800395a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800395e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <MX_TIM2_Init+0x94>)
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10 - 1;
 8003966:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <MX_TIM2_Init+0x94>)
 8003968:	2209      	movs	r2, #9
 800396a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800396c:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <MX_TIM2_Init+0x94>)
 800396e:	2200      	movs	r2, #0
 8003970:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <MX_TIM2_Init+0x94>)
 8003974:	2200      	movs	r2, #0
 8003976:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003978:	4813      	ldr	r0, [pc, #76]	; (80039c8 <MX_TIM2_Init+0x94>)
 800397a:	f004 fdcd 	bl	8008518 <HAL_TIM_Base_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003984:	f7ff fd6e 	bl	8003464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800398c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800398e:	f107 0308 	add.w	r3, r7, #8
 8003992:	4619      	mov	r1, r3
 8003994:	480c      	ldr	r0, [pc, #48]	; (80039c8 <MX_TIM2_Init+0x94>)
 8003996:	f005 f835 	bl	8008a04 <HAL_TIM_ConfigClockSource>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80039a0:	f7ff fd60 	bl	8003464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039ac:	463b      	mov	r3, r7
 80039ae:	4619      	mov	r1, r3
 80039b0:	4805      	ldr	r0, [pc, #20]	; (80039c8 <MX_TIM2_Init+0x94>)
 80039b2:	f005 fa2b 	bl	8008e0c <HAL_TIMEx_MasterConfigSynchronization>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80039bc:	f7ff fd52 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	2000095c 	.word	0x2000095c

080039cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039d2:	f107 0308 	add.w	r3, r7, #8
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039e0:	463b      	mov	r3, r7
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039e8:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <MX_TIM3_Init+0x94>)
 80039ea:	4a1e      	ldr	r2, [pc, #120]	; (8003a64 <MX_TIM3_Init+0x98>)
 80039ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 -1;
 80039ee:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <MX_TIM3_Init+0x94>)
 80039f0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80039f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f6:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <MX_TIM3_Init+0x94>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 -1;
 80039fc:	4b18      	ldr	r3, [pc, #96]	; (8003a60 <MX_TIM3_Init+0x94>)
 80039fe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003a02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a04:	4b16      	ldr	r3, [pc, #88]	; (8003a60 <MX_TIM3_Init+0x94>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a0a:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <MX_TIM3_Init+0x94>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a10:	4813      	ldr	r0, [pc, #76]	; (8003a60 <MX_TIM3_Init+0x94>)
 8003a12:	f004 fd81 	bl	8008518 <HAL_TIM_Base_Init>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003a1c:	f7ff fd22 	bl	8003464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a26:	f107 0308 	add.w	r3, r7, #8
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	480c      	ldr	r0, [pc, #48]	; (8003a60 <MX_TIM3_Init+0x94>)
 8003a2e:	f004 ffe9 	bl	8008a04 <HAL_TIM_ConfigClockSource>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003a38:	f7ff fd14 	bl	8003464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a40:	2300      	movs	r3, #0
 8003a42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a44:	463b      	mov	r3, r7
 8003a46:	4619      	mov	r1, r3
 8003a48:	4805      	ldr	r0, [pc, #20]	; (8003a60 <MX_TIM3_Init+0x94>)
 8003a4a:	f005 f9df 	bl	8008e0c <HAL_TIMEx_MasterConfigSynchronization>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003a54:	f7ff fd06 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a58:	bf00      	nop
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	2000099c 	.word	0x2000099c
 8003a64:	40000400 	.word	0x40000400

08003a68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08c      	sub	sp, #48	; 0x30
 8003a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a6e:	f107 030c 	add.w	r3, r7, #12
 8003a72:	2224      	movs	r2, #36	; 0x24
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f009 ffee 	bl	800da58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a7c:	1d3b      	adds	r3, r7, #4
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a84:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <MX_TIM4_Init+0xa0>)
 8003a86:	4a21      	ldr	r2, [pc, #132]	; (8003b0c <MX_TIM4_Init+0xa4>)
 8003a88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003a8a:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <MX_TIM4_Init+0xa0>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <MX_TIM4_Init+0xa0>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003a96:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <MX_TIM4_Init+0xa0>)
 8003a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <MX_TIM4_Init+0xa0>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aa4:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <MX_TIM4_Init+0xa0>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003ace:	f107 030c 	add.w	r3, r7, #12
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	480c      	ldr	r0, [pc, #48]	; (8003b08 <MX_TIM4_Init+0xa0>)
 8003ad6:	f004 fdb1 	bl	800863c <HAL_TIM_Encoder_Init>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003ae0:	f7ff fcc0 	bl	8003464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4805      	ldr	r0, [pc, #20]	; (8003b08 <MX_TIM4_Init+0xa0>)
 8003af2:	f005 f98b 	bl	8008e0c <HAL_TIMEx_MasterConfigSynchronization>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003afc:	f7ff fcb2 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b00:	bf00      	nop
 8003b02:	3730      	adds	r7, #48	; 0x30
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	200009dc 	.word	0x200009dc
 8003b0c:	40000800 	.word	0x40000800

08003b10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d114      	bne.n	8003b4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b22:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_TIM_Base_MspInit+0x78>)
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <HAL_TIM_Base_MspInit+0x78>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	6253      	str	r3, [r2, #36]	; 0x24
 8003b2e:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <HAL_TIM_Base_MspInit+0x78>)
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	201c      	movs	r0, #28
 8003b40:	f000 fa55 	bl	8003fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b44:	201c      	movs	r0, #28
 8003b46:	f000 fa6e 	bl	8004026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003b4a:	e018      	b.n	8003b7e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <HAL_TIM_Base_MspInit+0x7c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d113      	bne.n	8003b7e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <HAL_TIM_Base_MspInit+0x78>)
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	4a0b      	ldr	r2, [pc, #44]	; (8003b88 <HAL_TIM_Base_MspInit+0x78>)
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	6253      	str	r3, [r2, #36]	; 0x24
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_TIM_Base_MspInit+0x78>)
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2101      	movs	r1, #1
 8003b72:	201d      	movs	r0, #29
 8003b74:	f000 fa3b 	bl	8003fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b78:	201d      	movs	r0, #29
 8003b7a:	f000 fa54 	bl	8004026 <HAL_NVIC_EnableIRQ>
}
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40000400 	.word	0x40000400

08003b90 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	; 0x28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <HAL_TIM_Encoder_MspInit+0x7c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d127      	bne.n	8003c02 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bb2:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <HAL_TIM_Encoder_MspInit+0x80>)
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <HAL_TIM_Encoder_MspInit+0x80>)
 8003bb8:	f043 0304 	orr.w	r3, r3, #4
 8003bbc:	6253      	str	r3, [r2, #36]	; 0x24
 8003bbe:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <HAL_TIM_Encoder_MspInit+0x80>)
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bca:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <HAL_TIM_Encoder_MspInit+0x80>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	4a10      	ldr	r2, [pc, #64]	; (8003c10 <HAL_TIM_Encoder_MspInit+0x80>)
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	61d3      	str	r3, [r2, #28]
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <HAL_TIM_Encoder_MspInit+0x80>)
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003be2:	23c0      	movs	r3, #192	; 0xc0
 8003be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be6:	2302      	movs	r3, #2
 8003be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf6:	f107 0314 	add.w	r3, r7, #20
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4805      	ldr	r0, [pc, #20]	; (8003c14 <HAL_TIM_Encoder_MspInit+0x84>)
 8003bfe:	f000 fdcb 	bl	8004798 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003c02:	bf00      	nop
 8003c04:	3728      	adds	r7, #40	; 0x28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40000800 	.word	0x40000800
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40020400 	.word	0x40020400

08003c18 <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second)
{
 8003c18:	b084      	sub	sp, #16
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af02      	add	r7, sp, #8
 8003c20:	f107 0c08 	add.w	ip, r7, #8
 8003c24:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <TMP117_set_Configuration+0x50>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <TMP117_set_Configuration+0x50>)
 8003c30:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8003c34:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <TMP117_set_Configuration+0x50>)
 8003c38:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003c3c:	7093      	strb	r3, [r2, #2]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,2,100);
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <TMP117_set_Configuration+0x54>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	b299      	uxth	r1, r3
 8003c44:	2364      	movs	r3, #100	; 0x64
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	2302      	movs	r3, #2
 8003c4a:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <TMP117_set_Configuration+0x50>)
 8003c4c:	f107 0008 	add.w	r0, r7, #8
 8003c50:	f001 f8ae 	bl	8004db0 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8003c54:	2001      	movs	r0, #1
 8003c56:	f000 f8d1 	bl	8003dfc <HAL_Delay>
}
 8003c5a:	bf00      	nop
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c62:	b004      	add	sp, #16
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000a1c 	.word	0x20000a1c
 8003c6c:	20000398 	.word	0x20000398

08003c70 <TMP117_Initialization>:
   @Description   Custom Parameters for Sensor
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  void
 */
void TMP117_Initialization               (I2C_HandleTypeDef i2c)
{
 8003c70:	b084      	sub	sp, #16
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b094      	sub	sp, #80	; 0x50
 8003c76:	af14      	add	r7, sp, #80	; 0x50
 8003c78:	f107 0c08 	add.w	ip, r7, #8
 8003c7c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    TMP117_set_Configuration(i2c,0x02,0x22);
 8003c80:	2322      	movs	r3, #34	; 0x22
 8003c82:	9312      	str	r3, [sp, #72]	; 0x48
 8003c84:	2302      	movs	r3, #2
 8003c86:	9311      	str	r3, [sp, #68]	; 0x44
 8003c88:	4668      	mov	r0, sp
 8003c8a:	f107 0318 	add.w	r3, r7, #24
 8003c8e:	2244      	movs	r2, #68	; 0x44
 8003c90:	4619      	mov	r1, r3
 8003c92:	f009 fed3 	bl	800da3c <memcpy>
 8003c96:	f107 0308 	add.w	r3, r7, #8
 8003c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c9c:	f7ff ffbc 	bl	8003c18 <TMP117_set_Configuration>
	HAL_Delay(100); // wait 1ms
 8003ca0:	2064      	movs	r0, #100	; 0x64
 8003ca2:	f000 f8ab 	bl	8003dfc <HAL_Delay>
	TMP117_set_Configuration(i2c,0x02,0x20);
 8003ca6:	2320      	movs	r3, #32
 8003ca8:	9312      	str	r3, [sp, #72]	; 0x48
 8003caa:	2302      	movs	r3, #2
 8003cac:	9311      	str	r3, [sp, #68]	; 0x44
 8003cae:	4668      	mov	r0, sp
 8003cb0:	f107 0318 	add.w	r3, r7, #24
 8003cb4:	2244      	movs	r2, #68	; 0x44
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f009 fec0 	bl	800da3c <memcpy>
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cc2:	f7ff ffa9 	bl	8003c18 <TMP117_set_Configuration>
//      TMP117_set_Temperature_Offset(i2c,0x00,0x00); //Default Value
//      TMP117_set_LowLimit(i2c,0x12,0x80);           //Set 10 Celcius
//      TMP117_set_HighLimit(i2c,0x51,0x20);          //Set 40 Celcius
}
 8003cc6:	bf00      	nop
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cce:	b004      	add	sp, #16
 8003cd0:	4770      	bx	lr
	...

08003cd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cd4:	480c      	ldr	r0, [pc, #48]	; (8003d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003cd6:	490d      	ldr	r1, [pc, #52]	; (8003d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cdc:	e002      	b.n	8003ce4 <LoopCopyDataInit>

08003cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ce2:	3304      	adds	r3, #4

08003ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ce8:	d3f9      	bcc.n	8003cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003cec:	4c0a      	ldr	r4, [pc, #40]	; (8003d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cf0:	e001      	b.n	8003cf6 <LoopFillZerobss>

08003cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cf4:	3204      	adds	r2, #4

08003cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cf8:	d3fb      	bcc.n	8003cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003cfa:	f7ff fe15 	bl	8003928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cfe:	f009 fe79 	bl	800d9f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d02:	f7fe ff89 	bl	8002c18 <main>
  bx lr
 8003d06:	4770      	bx	lr
  ldr r0, =_sdata
 8003d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d0c:	200006e8 	.word	0x200006e8
  ldr r2, =_sidata
 8003d10:	08012100 	.word	0x08012100
  ldr r2, =_sbss
 8003d14:	200006e8 	.word	0x200006e8
  ldr r4, =_ebss
 8003d18:	20001578 	.word	0x20001578

08003d1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d1c:	e7fe      	b.n	8003d1c <ADC1_IRQHandler>

08003d1e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d28:	2003      	movs	r0, #3
 8003d2a:	f000 f955 	bl	8003fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d2e:	200f      	movs	r0, #15
 8003d30:	f000 f80e 	bl	8003d50 <HAL_InitTick>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	71fb      	strb	r3, [r7, #7]
 8003d3e:	e001      	b.n	8003d44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d40:	f7ff fc7c 	bl	800363c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d44:	79fb      	ldrb	r3, [r7, #7]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003d5c:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <HAL_InitTick+0x68>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d022      	beq.n	8003daa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_InitTick+0x6c>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <HAL_InitTick+0x68>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f962 	bl	8004042 <HAL_SYSTICK_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10f      	bne.n	8003da4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b0f      	cmp	r3, #15
 8003d88:	d809      	bhi.n	8003d9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d92:	f000 f92c 	bl	8003fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <HAL_InitTick+0x70>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	e007      	b.n	8003dae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
 8003da2:	e004      	b.n	8003dae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
 8003da8:	e001      	b.n	8003dae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	200003a0 	.word	0x200003a0
 8003dbc:	20000394 	.word	0x20000394
 8003dc0:	2000039c 	.word	0x2000039c

08003dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_IncTick+0x1c>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_IncTick+0x20>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	4a03      	ldr	r2, [pc, #12]	; (8003de0 <HAL_IncTick+0x1c>)
 8003dd4:	6013      	str	r3, [r2, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000a20 	.word	0x20000a20
 8003de4:	200003a0 	.word	0x200003a0

08003de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return uwTick;
 8003dec:	4b02      	ldr	r3, [pc, #8]	; (8003df8 <HAL_GetTick+0x10>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	20000a20 	.word	0x20000a20

08003dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e04:	f7ff fff0 	bl	8003de8 <HAL_GetTick>
 8003e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d004      	beq.n	8003e20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_Delay+0x40>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e20:	bf00      	nop
 8003e22:	f7ff ffe1 	bl	8003de8 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d8f7      	bhi.n	8003e22 <HAL_Delay+0x26>
  {
  }
}
 8003e32:	bf00      	nop
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	200003a0 	.word	0x200003a0

08003e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <__NVIC_SetPriorityGrouping+0x44>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e72:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <__NVIC_SetPriorityGrouping+0x44>)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	60d3      	str	r3, [r2, #12]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	f003 0307 	and.w	r3, r3, #7
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	db0b      	blt.n	8003ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	f003 021f 	and.w	r2, r3, #31
 8003ebc:	4906      	ldr	r1, [pc, #24]	; (8003ed8 <__NVIC_EnableIRQ+0x34>)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	e000e100 	.word	0xe000e100

08003edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	6039      	str	r1, [r7, #0]
 8003ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	db0a      	blt.n	8003f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	490c      	ldr	r1, [pc, #48]	; (8003f28 <__NVIC_SetPriority+0x4c>)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	0112      	lsls	r2, r2, #4
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	440b      	add	r3, r1
 8003f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f04:	e00a      	b.n	8003f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4908      	ldr	r1, [pc, #32]	; (8003f2c <__NVIC_SetPriority+0x50>)
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	3b04      	subs	r3, #4
 8003f14:	0112      	lsls	r2, r2, #4
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	440b      	add	r3, r1
 8003f1a:	761a      	strb	r2, [r3, #24]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	e000e100 	.word	0xe000e100
 8003f2c:	e000ed00 	.word	0xe000ed00

08003f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b089      	sub	sp, #36	; 0x24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f1c3 0307 	rsb	r3, r3, #7
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	bf28      	it	cs
 8003f4e:	2304      	movcs	r3, #4
 8003f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3304      	adds	r3, #4
 8003f56:	2b06      	cmp	r3, #6
 8003f58:	d902      	bls.n	8003f60 <NVIC_EncodePriority+0x30>
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3b03      	subs	r3, #3
 8003f5e:	e000      	b.n	8003f62 <NVIC_EncodePriority+0x32>
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	401a      	ands	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f78:	f04f 31ff 	mov.w	r1, #4294967295
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f82:	43d9      	mvns	r1, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f88:	4313      	orrs	r3, r2
         );
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3724      	adds	r7, #36	; 0x24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fa4:	d301      	bcc.n	8003faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e00f      	b.n	8003fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <SysTick_Config+0x40>)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fb2:	210f      	movs	r1, #15
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	f7ff ff90 	bl	8003edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <SysTick_Config+0x40>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fc2:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <SysTick_Config+0x40>)
 8003fc4:	2207      	movs	r2, #7
 8003fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	e000e010 	.word	0xe000e010

08003fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff ff2d 	bl	8003e40 <__NVIC_SetPriorityGrouping>
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b086      	sub	sp, #24
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004000:	f7ff ff42 	bl	8003e88 <__NVIC_GetPriorityGrouping>
 8004004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	6978      	ldr	r0, [r7, #20]
 800400c:	f7ff ff90 	bl	8003f30 <NVIC_EncodePriority>
 8004010:	4602      	mov	r2, r0
 8004012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff5f 	bl	8003edc <__NVIC_SetPriority>
}
 800401e:	bf00      	nop
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	4603      	mov	r3, r0
 800402e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ff35 	bl	8003ea4 <__NVIC_EnableIRQ>
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff ffa2 	bl	8003f94 <SysTick_Config>
 8004050:	4603      	mov	r3, r0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d005      	beq.n	800407e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2204      	movs	r2, #4
 8004076:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
 800407c:	e029      	b.n	80040d2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 020e 	bic.w	r2, r2, #14
 800408c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f003 021c 	and.w	r2, r3, #28
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	2101      	movs	r1, #1
 80040ac:	fa01 f202 	lsl.w	r2, r1, r2
 80040b0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
    }
  }
  return status;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80040e4:	f7ff fe80 	bl	8003de8 <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80040ea:	e010      	b.n	800410e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d00c      	beq.n	800410e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <FLASH_WaitForLastOperation+0x2e>
 80040fa:	f7ff fe75 	bl	8003de8 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	d201      	bcs.n	800410e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e02f      	b.n	800416e <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800410e:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <FLASH_WaitForLastOperation+0x9c>)
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b01      	cmp	r3, #1
 8004118:	d0e8      	beq.n	80040ec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800411a:	4b17      	ldr	r3, [pc, #92]	; (8004178 <FLASH_WaitForLastOperation+0x9c>)
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d102      	bne.n	800412c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <FLASH_WaitForLastOperation+0x9c>)
 8004128:	2202      	movs	r2, #2
 800412a:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <FLASH_WaitForLastOperation+0x9c>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004138:	d014      	beq.n	8004164 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800413a:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <FLASH_WaitForLastOperation+0x9c>)
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004146:	d00d      	beq.n	8004164 <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <FLASH_WaitForLastOperation+0x9c>)
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004154:	d006      	beq.n	8004164 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8004156:	4b08      	ldr	r3, [pc, #32]	; (8004178 <FLASH_WaitForLastOperation+0x9c>)
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800415e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004162:	d103      	bne.n	800416c <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004164:	f000 f80a 	bl	800417c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40023c00 	.word	0x40023c00

0800417c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <FLASH_SetErrorCode+0xa4>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d109      	bne.n	80041a8 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004194:	4b23      	ldr	r3, [pc, #140]	; (8004224 <FLASH_SetErrorCode+0xa8>)
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f043 0302 	orr.w	r3, r3, #2
 800419c:	4a21      	ldr	r2, [pc, #132]	; (8004224 <FLASH_SetErrorCode+0xa8>)
 800419e:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80041a8:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <FLASH_SetErrorCode+0xa4>)
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b4:	d109      	bne.n	80041ca <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80041b6:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <FLASH_SetErrorCode+0xa8>)
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	4a19      	ldr	r2, [pc, #100]	; (8004224 <FLASH_SetErrorCode+0xa8>)
 80041c0:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <FLASH_SetErrorCode+0xa4>)
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d6:	d109      	bne.n	80041ec <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80041d8:	4b12      	ldr	r3, [pc, #72]	; (8004224 <FLASH_SetErrorCode+0xa8>)
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	4a10      	ldr	r2, [pc, #64]	; (8004224 <FLASH_SetErrorCode+0xa8>)
 80041e2:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041ea:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <FLASH_SetErrorCode+0xa4>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f8:	d109      	bne.n	800420e <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <FLASH_SetErrorCode+0xa8>)
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f043 0308 	orr.w	r3, r3, #8
 8004202:	4a08      	ldr	r2, [pc, #32]	; (8004224 <FLASH_SetErrorCode+0xa8>)
 8004204:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800420c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800420e:	4a04      	ldr	r2, [pc, #16]	; (8004220 <FLASH_SetErrorCode+0xa4>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6193      	str	r3, [r2, #24]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40023c00 	.word	0x40023c00
 8004224:	20000a24 	.word	0x20000a24

08004228 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800422c:	4b09      	ldr	r3, [pc, #36]	; (8004254 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800423a:	4a07      	ldr	r2, [pc, #28]	; (8004258 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 800423c:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8004240:	4a06      	ldr	r2, [pc, #24]	; (800425c <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 8004242:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	e000      	b.n	800424a <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
}
 800424a:	4618      	mov	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40023c00 	.word	0x40023c00
 8004258:	89abcdef 	.word	0x89abcdef
 800425c:	02030405 	.word	0x02030405

08004260 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40023c00 	.word	0x40023c00

08004280 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800428e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004292:	f7ff ff23 	bl	80040dc <FLASH_WaitForLastOperation>
 8004296:	4603      	mov	r3, r0
 8004298:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d11a      	bne.n	80042d6 <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d102      	bne.n	80042b2 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d102      	bne.n	80042be <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80042ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042ce:	f7ff ff05 	bl	80040dc <FLASH_WaitForLastOperation>
 80042d2:	4603      	mov	r3, r0
 80042d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000a24 	.word	0x20000a24

080042e4 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80042f4:	4b31      	ldr	r3, [pc, #196]	; (80043bc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 80042f6:	7c1b      	ldrb	r3, [r3, #16]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e058      	b.n	80043b2 <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 8004300:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004302:	2201      	movs	r2, #1
 8004304:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004306:	f24c 3050 	movw	r0, #50000	; 0xc350
 800430a:	f7ff fee7 	bl	80040dc <FLASH_WaitForLastOperation>
 800430e:	4603      	mov	r3, r0
 8004310:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d148      	bne.n	80043aa <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004318:	4b28      	ldr	r3, [pc, #160]	; (80043bc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800431a:	2200      	movs	r2, #0
 800431c:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d106      	bne.n	8004332 <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	68b8      	ldr	r0, [r7, #8]
 8004328:	f000 fa18 	bl	800475c <FLASH_DATAEEPROM_ProgramWord>
 800432c:	4603      	mov	r3, r0
 800432e:	75fb      	strb	r3, [r7, #23]
 8004330:	e03b      	b.n	80043aa <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d108      	bne.n	800434a <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	b29b      	uxth	r3, r3
 800433c:	4619      	mov	r1, r3
 800433e:	68b8      	ldr	r0, [r7, #8]
 8004340:	f000 f99c 	bl	800467c <FLASH_DATAEEPROM_ProgramHalfWord>
 8004344:	4603      	mov	r3, r0
 8004346:	75fb      	strb	r3, [r7, #23]
 8004348:	e02f      	b.n	80043aa <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d108      	bne.n	8004362 <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	4619      	mov	r1, r3
 8004356:	68b8      	ldr	r0, [r7, #8]
 8004358:	f000 f934 	bl	80045c4 <FLASH_DATAEEPROM_ProgramByte>
 800435c:	4603      	mov	r3, r0
 800435e:	75fb      	strb	r3, [r7, #23]
 8004360:	e023      	b.n	80043aa <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d108      	bne.n	800437a <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	4619      	mov	r1, r3
 800436e:	68b8      	ldr	r0, [r7, #8]
 8004370:	f000 f826 	bl	80043c0 <FLASH_DATAEEPROM_FastProgramByte>
 8004374:	4603      	mov	r3, r0
 8004376:	75fb      	strb	r3, [r7, #23]
 8004378:	e017      	b.n	80043aa <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d108      	bne.n	8004392 <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	b29b      	uxth	r3, r3
 8004384:	4619      	mov	r1, r3
 8004386:	68b8      	ldr	r0, [r7, #8]
 8004388:	f000 f87e 	bl	8004488 <FLASH_DATAEEPROM_FastProgramHalfWord>
 800438c:	4603      	mov	r3, r0
 800438e:	75fb      	strb	r3, [r7, #23]
 8004390:	e00b      	b.n	80043aa <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b10      	cmp	r3, #16
 8004396:	d106      	bne.n	80043a6 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f000 f8ec 	bl	8004578 <FLASH_DATAEEPROM_FastProgramWord>
 80043a0:	4603      	mov	r3, r0
 80043a2:	75fb      	strb	r3, [r7, #23]
 80043a4:	e001      	b.n	80043aa <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80043aa:	4b04      	ldr	r3, [pc, #16]	; (80043bc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	741a      	strb	r2, [r3, #16]

  return status;
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000a24 	.word	0x20000a24

080043c0 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80043d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043dc:	f7ff fe7e 	bl	80040dc <FLASH_WaitForLastOperation>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d145      	bne.n	8004476 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80043ea:	4b25      	ldr	r3, [pc, #148]	; (8004480 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4a24      	ldr	r2, [pc, #144]	; (8004480 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 80043f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f4:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d009      	beq.n	8004410 <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004402:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004406:	f7ff fe69 	bl	80040dc <FLASH_WaitForLastOperation>
 800440a:	4603      	mov	r3, r0
 800440c:	75fb      	strb	r3, [r7, #23]
 800440e:	e032      	b.n	8004476 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f023 0303 	bic.w	r3, r3, #3
 8004416:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	22ff      	movs	r2, #255	; 0xff
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	43db      	mvns	r3, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f023 0303 	bic.w	r3, r3, #3
 800443e:	4619      	mov	r1, r3
 8004440:	2002      	movs	r0, #2
 8004442:	f7ff ff1d 	bl	8004280 <HAL_FLASHEx_DATAEEPROM_Erase>
 8004446:	4603      	mov	r3, r0
 8004448:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800444a:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 800444c:	2200      	movs	r2, #0
 800444e:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f023 0303 	bic.w	r3, r3, #3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4619      	mov	r1, r3
 800445a:	2010      	movs	r0, #16
 800445c:	f7ff ff42 	bl	80042e4 <HAL_FLASHEx_DATAEEPROM_Program>
 8004460:	4603      	mov	r3, r0
 8004462:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8004464:	4b07      	ldr	r3, [pc, #28]	; (8004484 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8004466:	7c1b      	ldrb	r3, [r3, #16]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 800446c:	2302      	movs	r3, #2
 800446e:	e003      	b.n	8004478 <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 8004470:	4b04      	ldr	r3, [pc, #16]	; (8004484 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8004472:	2201      	movs	r2, #1
 8004474:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023c00 	.word	0x40023c00
 8004484:	20000a24 	.word	0x20000a24

08004488 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044a4:	f7ff fe1a 	bl	80040dc <FLASH_WaitForLastOperation>
 80044a8:	4603      	mov	r3, r0
 80044aa:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d158      	bne.n	8004564 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80044b2:	4b2f      	ldr	r3, [pc, #188]	; (8004570 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	4a2e      	ldr	r2, [pc, #184]	; (8004570 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 80044b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044bc:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	887a      	ldrh	r2, [r7, #2]
 80044c8:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044ce:	f7ff fe05 	bl	80040dc <FLASH_WaitForLastOperation>
 80044d2:	4603      	mov	r3, r0
 80044d4:	75fb      	strb	r3, [r7, #23]
 80044d6:	e045      	b.n	8004564 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80044d8:	4b26      	ldr	r3, [pc, #152]	; (8004574 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 80044da:	2200      	movs	r2, #0
 80044dc:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d028      	beq.n	800453a <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f023 0303 	bic.w	r3, r3, #3
 8004518:	4619      	mov	r1, r3
 800451a:	2002      	movs	r0, #2
 800451c:	f7ff feb0 	bl	8004280 <HAL_FLASHEx_DATAEEPROM_Erase>
 8004520:	4603      	mov	r3, r0
 8004522:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f023 0303 	bic.w	r3, r3, #3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4619      	mov	r1, r3
 800452e:	2010      	movs	r0, #16
 8004530:	f7ff fed8 	bl	80042e4 <HAL_FLASHEx_DATAEEPROM_Program>
 8004534:	4603      	mov	r3, r0
 8004536:	75fb      	strb	r3, [r7, #23]
 8004538:	e00b      	b.n	8004552 <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 800453a:	2200      	movs	r2, #0
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	2004      	movs	r0, #4
 8004540:	f7ff fed0 	bl	80042e4 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3301      	adds	r3, #1
 8004548:	2200      	movs	r2, #0
 800454a:	4619      	mov	r1, r3
 800454c:	2004      	movs	r0, #4
 800454e:	f7ff fec9 	bl	80042e4 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8004554:	7c1b      	ldrb	r3, [r3, #16]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 800455a:	2302      	movs	r3, #2
 800455c:	e003      	b.n	8004566 <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8004560:	2201      	movs	r2, #1
 8004562:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8004564:	7dfb      	ldrb	r3, [r7, #23]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023c00 	.word	0x40023c00
 8004574:	20000a24 	.word	0x20000a24

08004578 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004586:	f24c 3050 	movw	r0, #50000	; 0xc350
 800458a:	f7ff fda7 	bl	80040dc <FLASH_WaitForLastOperation>
 800458e:	4603      	mov	r3, r0
 8004590:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10e      	bne.n	80045b6 <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 800459e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a2:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045ae:	f7ff fd95 	bl	80040dc <FLASH_WaitForLastOperation>
 80045b2:	4603      	mov	r3, r0
 80045b4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023c00 	.word	0x40023c00

080045c4 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045e0:	f7ff fd7c 	bl	80040dc <FLASH_WaitForLastOperation>
 80045e4:	4603      	mov	r3, r0
 80045e6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d13f      	bne.n	800466e <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d009      	beq.n	8004608 <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045fe:	f7ff fd6d 	bl	80040dc <FLASH_WaitForLastOperation>
 8004602:	4603      	mov	r3, r0
 8004604:	75fb      	strb	r3, [r7, #23]
 8004606:	e032      	b.n	800466e <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	22ff      	movs	r2, #255	; 0xff
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	43db      	mvns	r3, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4013      	ands	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f023 0303 	bic.w	r3, r3, #3
 8004636:	4619      	mov	r1, r3
 8004638:	2002      	movs	r0, #2
 800463a:	f7ff fe21 	bl	8004280 <HAL_FLASHEx_DATAEEPROM_Erase>
 800463e:	4603      	mov	r3, r0
 8004640:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8004642:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8004644:	2200      	movs	r2, #0
 8004646:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4619      	mov	r1, r3
 8004652:	2010      	movs	r0, #16
 8004654:	f7ff fe46 	bl	80042e4 <HAL_FLASHEx_DATAEEPROM_Program>
 8004658:	4603      	mov	r3, r0
 800465a:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 800465e:	7c1b      	ldrb	r3, [r3, #16]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <FLASH_DATAEEPROM_ProgramByte+0xa4>
 8004664:	2302      	movs	r3, #2
 8004666:	e003      	b.n	8004670 <FLASH_DATAEEPROM_ProgramByte+0xac>
 8004668:	4b03      	ldr	r3, [pc, #12]	; (8004678 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 800466a:	2201      	movs	r2, #1
 800466c:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800466e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000a24 	.word	0x20000a24

0800467c <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004694:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004698:	f7ff fd20 	bl	80040dc <FLASH_WaitForLastOperation>
 800469c:	4603      	mov	r3, r0
 800469e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d152      	bne.n	800474c <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 80046a6:	887b      	ldrh	r3, [r7, #2]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	887a      	ldrh	r2, [r7, #2]
 80046b0:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046b6:	f7ff fd11 	bl	80040dc <FLASH_WaitForLastOperation>
 80046ba:	4603      	mov	r3, r0
 80046bc:	75fb      	strb	r3, [r7, #23]
 80046be:	e045      	b.n	800474c <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80046c0:	4b25      	ldr	r3, [pc, #148]	; (8004758 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d028      	beq.n	8004722 <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	43db      	mvns	r3, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4013      	ands	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f023 0303 	bic.w	r3, r3, #3
 8004700:	4619      	mov	r1, r3
 8004702:	2002      	movs	r0, #2
 8004704:	f7ff fdbc 	bl	8004280 <HAL_FLASHEx_DATAEEPROM_Erase>
 8004708:	4603      	mov	r3, r0
 800470a:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f023 0303 	bic.w	r3, r3, #3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4619      	mov	r1, r3
 8004716:	2010      	movs	r0, #16
 8004718:	f7ff fde4 	bl	80042e4 <HAL_FLASHEx_DATAEEPROM_Program>
 800471c:	4603      	mov	r3, r0
 800471e:	75fb      	strb	r3, [r7, #23]
 8004720:	e00b      	b.n	800473a <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 8004722:	2200      	movs	r2, #0
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	2004      	movs	r0, #4
 8004728:	f7ff fddc 	bl	80042e4 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3301      	adds	r3, #1
 8004730:	2200      	movs	r2, #0
 8004732:	4619      	mov	r1, r3
 8004734:	2004      	movs	r0, #4
 8004736:	f7ff fdd5 	bl	80042e4 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 800473c:	7c1b      	ldrb	r3, [r3, #16]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 8004742:	2302      	movs	r3, #2
 8004744:	e003      	b.n	800474e <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 8004746:	4b04      	ldr	r3, [pc, #16]	; (8004758 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8004748:	2201      	movs	r2, #1
 800474a:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800474c:	7dfb      	ldrb	r3, [r7, #23]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000a24 	.word	0x20000a24

0800475c <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800476a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800476e:	f7ff fcb5 	bl	80040dc <FLASH_WaitForLastOperation>
 8004772:	4603      	mov	r3, r0
 8004774:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d108      	bne.n	800478e <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004782:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004786:	f7ff fca9 	bl	80040dc <FLASH_WaitForLastOperation>
 800478a:	4603      	mov	r3, r0
 800478c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 800478e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80047ae:	e154      	b.n	8004a5a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	2101      	movs	r1, #1
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	4013      	ands	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 8146 	beq.w	8004a54 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d005      	beq.n	80047e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d130      	bne.n	8004842 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	2203      	movs	r2, #3
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4013      	ands	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004816:	2201      	movs	r2, #1
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4013      	ands	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 0201 	and.w	r2, r3, #1
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b03      	cmp	r3, #3
 800484c:	d017      	beq.n	800487e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2203      	movs	r2, #3
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4013      	ands	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d123      	bne.n	80048d2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	08da      	lsrs	r2, r3, #3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3208      	adds	r2, #8
 8004892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004896:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	220f      	movs	r2, #15
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	08da      	lsrs	r2, r3, #3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3208      	adds	r2, #8
 80048cc:	6939      	ldr	r1, [r7, #16]
 80048ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	2203      	movs	r2, #3
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43db      	mvns	r3, r3
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4013      	ands	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 0203 	and.w	r2, r3, #3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80a0 	beq.w	8004a54 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004914:	4b58      	ldr	r3, [pc, #352]	; (8004a78 <HAL_GPIO_Init+0x2e0>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	4a57      	ldr	r2, [pc, #348]	; (8004a78 <HAL_GPIO_Init+0x2e0>)
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	6213      	str	r3, [r2, #32]
 8004920:	4b55      	ldr	r3, [pc, #340]	; (8004a78 <HAL_GPIO_Init+0x2e0>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800492c:	4a53      	ldr	r2, [pc, #332]	; (8004a7c <HAL_GPIO_Init+0x2e4>)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	3302      	adds	r3, #2
 8004934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004938:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	220f      	movs	r2, #15
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4013      	ands	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a4b      	ldr	r2, [pc, #300]	; (8004a80 <HAL_GPIO_Init+0x2e8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d019      	beq.n	800498c <HAL_GPIO_Init+0x1f4>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a4a      	ldr	r2, [pc, #296]	; (8004a84 <HAL_GPIO_Init+0x2ec>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <HAL_GPIO_Init+0x1f0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a49      	ldr	r2, [pc, #292]	; (8004a88 <HAL_GPIO_Init+0x2f0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00d      	beq.n	8004984 <HAL_GPIO_Init+0x1ec>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a48      	ldr	r2, [pc, #288]	; (8004a8c <HAL_GPIO_Init+0x2f4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d007      	beq.n	8004980 <HAL_GPIO_Init+0x1e8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a47      	ldr	r2, [pc, #284]	; (8004a90 <HAL_GPIO_Init+0x2f8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d101      	bne.n	800497c <HAL_GPIO_Init+0x1e4>
 8004978:	2304      	movs	r3, #4
 800497a:	e008      	b.n	800498e <HAL_GPIO_Init+0x1f6>
 800497c:	2305      	movs	r3, #5
 800497e:	e006      	b.n	800498e <HAL_GPIO_Init+0x1f6>
 8004980:	2303      	movs	r3, #3
 8004982:	e004      	b.n	800498e <HAL_GPIO_Init+0x1f6>
 8004984:	2302      	movs	r3, #2
 8004986:	e002      	b.n	800498e <HAL_GPIO_Init+0x1f6>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <HAL_GPIO_Init+0x1f6>
 800498c:	2300      	movs	r3, #0
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	f002 0203 	and.w	r2, r2, #3
 8004994:	0092      	lsls	r2, r2, #2
 8004996:	4093      	lsls	r3, r2
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800499e:	4937      	ldr	r1, [pc, #220]	; (8004a7c <HAL_GPIO_Init+0x2e4>)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3302      	adds	r3, #2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049ac:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_GPIO_Init+0x2fc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4013      	ands	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80049d0:	4a30      	ldr	r2, [pc, #192]	; (8004a94 <HAL_GPIO_Init+0x2fc>)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049d6:	4b2f      	ldr	r3, [pc, #188]	; (8004a94 <HAL_GPIO_Init+0x2fc>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	43db      	mvns	r3, r3
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4013      	ands	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80049fa:	4a26      	ldr	r2, [pc, #152]	; (8004a94 <HAL_GPIO_Init+0x2fc>)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a00:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <HAL_GPIO_Init+0x2fc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a24:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <HAL_GPIO_Init+0x2fc>)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a2a:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <HAL_GPIO_Init+0x2fc>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <HAL_GPIO_Init+0x2fc>)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3301      	adds	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f47f aea3 	bne.w	80047b0 <HAL_GPIO_Init+0x18>
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	40020000 	.word	0x40020000
 8004a84:	40020400 	.word	0x40020400
 8004a88:	40020800 	.word	0x40020800
 8004a8c:	40020c00 	.word	0x40020c00
 8004a90:	40021000 	.word	0x40021000
 8004a94:	40010400 	.word	0x40010400

08004a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	887b      	ldrh	r3, [r7, #2]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
 8004ab4:	e001      	b.n	8004aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	807b      	strh	r3, [r7, #2]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ad6:	787b      	ldrb	r3, [r7, #1]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004adc:	887a      	ldrh	r2, [r7, #2]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004ae2:	e003      	b.n	8004aec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004ae4:	887b      	ldrh	r3, [r7, #2]
 8004ae6:	041a      	lsls	r2, r3, #16
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	619a      	str	r2, [r3, #24]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
	...

08004af8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b04:	695a      	ldr	r2, [r3, #20]
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d006      	beq.n	8004b1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b0e:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b14:	88fb      	ldrh	r3, [r7, #6]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe f9cc 	bl	8002eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40010400 	.word	0x40010400

08004b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e12b      	b.n	8004d92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fd fffe 	bl	8002b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2224      	movs	r2, #36	; 0x24
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0201 	bic.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b8c:	f002 fdb0 	bl	80076f0 <HAL_RCC_GetPCLK1Freq>
 8004b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4a81      	ldr	r2, [pc, #516]	; (8004d9c <HAL_I2C_Init+0x274>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d807      	bhi.n	8004bac <HAL_I2C_Init+0x84>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4a80      	ldr	r2, [pc, #512]	; (8004da0 <HAL_I2C_Init+0x278>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	bf94      	ite	ls
 8004ba4:	2301      	movls	r3, #1
 8004ba6:	2300      	movhi	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	e006      	b.n	8004bba <HAL_I2C_Init+0x92>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a7d      	ldr	r2, [pc, #500]	; (8004da4 <HAL_I2C_Init+0x27c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	bf94      	ite	ls
 8004bb4:	2301      	movls	r3, #1
 8004bb6:	2300      	movhi	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e0e7      	b.n	8004d92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a78      	ldr	r2, [pc, #480]	; (8004da8 <HAL_I2C_Init+0x280>)
 8004bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bca:	0c9b      	lsrs	r3, r3, #18
 8004bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4a6a      	ldr	r2, [pc, #424]	; (8004d9c <HAL_I2C_Init+0x274>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d802      	bhi.n	8004bfc <HAL_I2C_Init+0xd4>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	e009      	b.n	8004c10 <HAL_I2C_Init+0xe8>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	4a69      	ldr	r2, [pc, #420]	; (8004dac <HAL_I2C_Init+0x284>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	099b      	lsrs	r3, r3, #6
 8004c0e:	3301      	adds	r3, #1
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	430b      	orrs	r3, r1
 8004c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	495c      	ldr	r1, [pc, #368]	; (8004d9c <HAL_I2C_Init+0x274>)
 8004c2c:	428b      	cmp	r3, r1
 8004c2e:	d819      	bhi.n	8004c64 <HAL_I2C_Init+0x13c>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	1e59      	subs	r1, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c3e:	1c59      	adds	r1, r3, #1
 8004c40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c44:	400b      	ands	r3, r1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_I2C_Init+0x138>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1e59      	subs	r1, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5e:	e051      	b.n	8004d04 <HAL_I2C_Init+0x1dc>
 8004c60:	2304      	movs	r3, #4
 8004c62:	e04f      	b.n	8004d04 <HAL_I2C_Init+0x1dc>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d111      	bne.n	8004c90 <HAL_I2C_Init+0x168>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1e58      	subs	r0, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6859      	ldr	r1, [r3, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	440b      	add	r3, r1
 8004c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	e012      	b.n	8004cb6 <HAL_I2C_Init+0x18e>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1e58      	subs	r0, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	0099      	lsls	r1, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_I2C_Init+0x196>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e022      	b.n	8004d04 <HAL_I2C_Init+0x1dc>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_I2C_Init+0x1bc>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1e58      	subs	r0, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6859      	ldr	r1, [r3, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	440b      	add	r3, r1
 8004cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd8:	3301      	adds	r3, #1
 8004cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce2:	e00f      	b.n	8004d04 <HAL_I2C_Init+0x1dc>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1e58      	subs	r0, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	0099      	lsls	r1, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	6809      	ldr	r1, [r1, #0]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69da      	ldr	r2, [r3, #28]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6911      	ldr	r1, [r2, #16]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68d2      	ldr	r2, [r2, #12]
 8004d3e:	4311      	orrs	r1, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695a      	ldr	r2, [r3, #20]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	000186a0 	.word	0x000186a0
 8004da0:	001e847f 	.word	0x001e847f
 8004da4:	003d08ff 	.word	0x003d08ff
 8004da8:	431bde83 	.word	0x431bde83
 8004dac:	10624dd3 	.word	0x10624dd3

08004db0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	817b      	strh	r3, [r7, #10]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dc4:	f7ff f810 	bl	8003de8 <HAL_GetTick>
 8004dc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	f040 80e0 	bne.w	8004f98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2319      	movs	r3, #25
 8004dde:	2201      	movs	r2, #1
 8004de0:	4970      	ldr	r1, [pc, #448]	; (8004fa4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f964 	bl	80050b0 <I2C_WaitOnFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
 8004df0:	e0d3      	b.n	8004f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_I2C_Master_Transmit+0x50>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e0cc      	b.n	8004f9a <HAL_I2C_Master_Transmit+0x1ea>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d007      	beq.n	8004e26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0201 	orr.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2221      	movs	r2, #33	; 0x21
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2210      	movs	r2, #16
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	893a      	ldrh	r2, [r7, #8]
 8004e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4a50      	ldr	r2, [pc, #320]	; (8004fa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e68:	8979      	ldrh	r1, [r7, #10]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	6a3a      	ldr	r2, [r7, #32]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f89c 	bl	8004fac <I2C_MasterRequestWrite>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e08d      	b.n	8004f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e94:	e066      	b.n	8004f64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	6a39      	ldr	r1, [r7, #32]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f9de 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d107      	bne.n	8004ebe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ebc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e06b      	b.n	8004f9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	781a      	ldrb	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d11b      	bne.n	8004f38 <HAL_I2C_Master_Transmit+0x188>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d017      	beq.n	8004f38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	6a39      	ldr	r1, [r7, #32]
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 f9ce 	bl	80052de <I2C_WaitOnBTFFlagUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00d      	beq.n	8004f64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d107      	bne.n	8004f60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e01a      	b.n	8004f9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d194      	bne.n	8004e96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	e000      	b.n	8004f9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f98:	2302      	movs	r3, #2
  }
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	00100002 	.word	0x00100002
 8004fa8:	ffff0000 	.word	0xffff0000

08004fac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d006      	beq.n	8004fd6 <I2C_MasterRequestWrite+0x2a>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d003      	beq.n	8004fd6 <I2C_MasterRequestWrite+0x2a>
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fd4:	d108      	bne.n	8004fe8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e00b      	b.n	8005000 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fec:	2b12      	cmp	r3, #18
 8004fee:	d107      	bne.n	8005000 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ffe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 f84f 	bl	80050b0 <I2C_WaitOnFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00d      	beq.n	8005034 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005026:	d103      	bne.n	8005030 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800502e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e035      	b.n	80050a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800503c:	d108      	bne.n	8005050 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800503e:	897b      	ldrh	r3, [r7, #10]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800504c:	611a      	str	r2, [r3, #16]
 800504e:	e01b      	b.n	8005088 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005050:	897b      	ldrh	r3, [r7, #10]
 8005052:	11db      	asrs	r3, r3, #7
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f003 0306 	and.w	r3, r3, #6
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f063 030f 	orn	r3, r3, #15
 8005060:	b2da      	uxtb	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	490e      	ldr	r1, [pc, #56]	; (80050a8 <I2C_MasterRequestWrite+0xfc>)
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f875 	bl	800515e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e010      	b.n	80050a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800507e:	897b      	ldrh	r3, [r7, #10]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	4907      	ldr	r1, [pc, #28]	; (80050ac <I2C_MasterRequestWrite+0x100>)
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 f865 	bl	800515e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	00010008 	.word	0x00010008
 80050ac:	00010002 	.word	0x00010002

080050b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050c0:	e025      	b.n	800510e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d021      	beq.n	800510e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fe fe8d 	bl	8003de8 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d116      	bne.n	800510e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e023      	b.n	8005156 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10d      	bne.n	8005134 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	e00c      	b.n	800514e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	43da      	mvns	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	bf0c      	ite	eq
 8005146:	2301      	moveq	r3, #1
 8005148:	2300      	movne	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	429a      	cmp	r2, r3
 8005152:	d0b6      	beq.n	80050c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800516c:	e051      	b.n	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517c:	d123      	bne.n	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005196:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f043 0204 	orr.w	r2, r3, #4
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e046      	b.n	8005254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d021      	beq.n	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ce:	f7fe fe0b 	bl	8003de8 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d302      	bcc.n	80051e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d116      	bne.n	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f043 0220 	orr.w	r2, r3, #32
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e020      	b.n	8005254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	0c1b      	lsrs	r3, r3, #16
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	d10c      	bne.n	8005236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	43da      	mvns	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4013      	ands	r3, r2
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	bf14      	ite	ne
 800522e:	2301      	movne	r3, #1
 8005230:	2300      	moveq	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	e00b      	b.n	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	43da      	mvns	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4013      	ands	r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d18d      	bne.n	800516e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005268:	e02d      	b.n	80052c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f878 	bl	8005360 <I2C_IsAcknowledgeFailed>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e02d      	b.n	80052d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d021      	beq.n	80052c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005282:	f7fe fdb1 	bl	8003de8 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d116      	bne.n	80052c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e007      	b.n	80052d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b80      	cmp	r3, #128	; 0x80
 80052d2:	d1ca      	bne.n	800526a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052ea:	e02d      	b.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f837 	bl	8005360 <I2C_IsAcknowledgeFailed>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e02d      	b.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005302:	d021      	beq.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005304:	f7fe fd70 	bl	8003de8 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	429a      	cmp	r2, r3
 8005312:	d302      	bcc.n	800531a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d116      	bne.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e007      	b.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d1ca      	bne.n	80052ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	d11b      	bne.n	80053b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005380:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	f043 0204 	orr.w	r2, r3, #4
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053be:	b08b      	sub	sp, #44	; 0x2c
 80053c0:	af06      	add	r7, sp, #24
 80053c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e0d0      	b.n	8005570 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f008 f85c 	bl	800d4a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2203      	movs	r2, #3
 80053ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f003 fd7d 	bl	8008ef4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]
 80053fe:	e04c      	b.n	800549a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	440b      	add	r3, r1
 8005410:	3301      	adds	r3, #1
 8005412:	2201      	movs	r2, #1
 8005414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005416:	7bfb      	ldrb	r3, [r7, #15]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	440b      	add	r3, r1
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800542a:	7bfa      	ldrb	r2, [r7, #15]
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	b298      	uxth	r0, r3
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	440b      	add	r3, r1
 800543c:	3336      	adds	r3, #54	; 0x36
 800543e:	4602      	mov	r2, r0
 8005440:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	440b      	add	r3, r1
 8005452:	3303      	adds	r3, #3
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005458:	7bfa      	ldrb	r2, [r7, #15]
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	440b      	add	r3, r1
 8005466:	3338      	adds	r3, #56	; 0x38
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800546c:	7bfa      	ldrb	r2, [r7, #15]
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	440b      	add	r3, r1
 800547a:	333c      	adds	r3, #60	; 0x3c
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005480:	7bfa      	ldrb	r2, [r7, #15]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	440b      	add	r3, r1
 800548e:	3340      	adds	r3, #64	; 0x40
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	3301      	adds	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
 800549a:	7bfa      	ldrb	r2, [r7, #15]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d3ad      	bcc.n	8005400 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054a4:	2300      	movs	r3, #0
 80054a6:	73fb      	strb	r3, [r7, #15]
 80054a8:	e044      	b.n	8005534 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054aa:	7bfa      	ldrb	r2, [r7, #15]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80054c0:	7bfa      	ldrb	r2, [r7, #15]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	440b      	add	r3, r1
 80054ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054d2:	7bfa      	ldrb	r2, [r7, #15]
 80054d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054d6:	7bfa      	ldrb	r2, [r7, #15]
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	440b      	add	r3, r1
 80054e4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054ec:	7bfa      	ldrb	r2, [r7, #15]
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	440b      	add	r3, r1
 80054fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005502:	7bfa      	ldrb	r2, [r7, #15]
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	440b      	add	r3, r1
 8005510:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005518:	7bfa      	ldrb	r2, [r7, #15]
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	440b      	add	r3, r1
 8005526:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	3301      	adds	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	429a      	cmp	r2, r3
 800553c:	d3b5      	bcc.n	80054aa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	687e      	ldr	r6, [r7, #4]
 8005546:	466d      	mov	r5, sp
 8005548:	f106 0410 	add.w	r4, r6, #16
 800554c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800554e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	602b      	str	r3, [r5, #0]
 8005554:	1d33      	adds	r3, r6, #4
 8005556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005558:	6838      	ldr	r0, [r7, #0]
 800555a:	f003 fce5 	bl	8008f28 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005578 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_PCD_Start+0x16>
 800558a:	2302      	movs	r3, #2
 800558c:	e016      	b.n	80055bc <HAL_PCD_Start+0x44>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f003 fc94 	bl	8008ec8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80055a0:	2101      	movs	r1, #1
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f007 ff5e 	bl	800d464 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f006 f979 	bl	800b8a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f006 f971 	bl	800b8b8 <USB_ReadInterrupts>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e0:	d102      	bne.n	80055e8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 faf5 	bl	8005bd2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f006 f963 	bl	800b8b8 <USB_ReadInterrupts>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055fc:	d112      	bne.n	8005624 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005606:	b29a      	uxth	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005610:	b292      	uxth	r2, r2
 8005612:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f007 ffbd 	bl	800d596 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800561c:	2100      	movs	r1, #0
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8c7 	bl	80057b2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f006 f945 	bl	800b8b8 <USB_ReadInterrupts>
 800562e:	4603      	mov	r3, r0
 8005630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005638:	d10b      	bne.n	8005652 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005642:	b29a      	uxth	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800564c:	b292      	uxth	r2, r2
 800564e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f006 f92e 	bl	800b8b8 <USB_ReadInterrupts>
 800565c:	4603      	mov	r3, r0
 800565e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005666:	d10b      	bne.n	8005680 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005670:	b29a      	uxth	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800567a:	b292      	uxth	r2, r2
 800567c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f006 f917 	bl	800b8b8 <USB_ReadInterrupts>
 800568a:	4603      	mov	r3, r0
 800568c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005694:	d126      	bne.n	80056e4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800569e:	b29a      	uxth	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0204 	bic.w	r2, r2, #4
 80056a8:	b292      	uxth	r2, r2
 80056aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0208 	bic.w	r2, r2, #8
 80056c0:	b292      	uxth	r2, r2
 80056c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f007 ff9e 	bl	800d608 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056de:	b292      	uxth	r2, r2
 80056e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f006 f8e5 	bl	800b8b8 <USB_ReadInterrupts>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f8:	d126      	bne.n	8005748 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005702:	b29a      	uxth	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0208 	orr.w	r2, r2, #8
 800570c:	b292      	uxth	r2, r2
 800570e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800571a:	b29a      	uxth	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005724:	b292      	uxth	r2, r2
 8005726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005732:	b29a      	uxth	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0204 	orr.w	r2, r2, #4
 800573c:	b292      	uxth	r2, r2
 800573e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f007 ff46 	bl	800d5d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f006 f8b3 	bl	800b8b8 <USB_ReadInterrupts>
 8005752:	4603      	mov	r3, r0
 8005754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575c:	d10e      	bne.n	800577c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005770:	b292      	uxth	r2, r2
 8005772:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f007 feff 	bl	800d57a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4618      	mov	r0, r3
 8005782:	f006 f899 	bl	800b8b8 <USB_ReadInterrupts>
 8005786:	4603      	mov	r3, r0
 8005788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005790:	d10b      	bne.n	80057aa <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800579a:	b29a      	uxth	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057a4:	b292      	uxth	r2, r2
 80057a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	460b      	mov	r3, r1
 80057bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_PCD_SetAddress+0x1a>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e013      	b.n	80057f4 <HAL_PCD_SetAddress+0x42>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	78fa      	ldrb	r2, [r7, #3]
 80057e2:	4611      	mov	r1, r2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f006 f84a 	bl	800b87e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	4608      	mov	r0, r1
 8005806:	4611      	mov	r1, r2
 8005808:	461a      	mov	r2, r3
 800580a:	4603      	mov	r3, r0
 800580c:	70fb      	strb	r3, [r7, #3]
 800580e:	460b      	mov	r3, r1
 8005810:	803b      	strh	r3, [r7, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800581a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800581e:	2b00      	cmp	r3, #0
 8005820:	da0e      	bge.n	8005840 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4413      	add	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	705a      	strb	r2, [r3, #1]
 800583e:	e00e      	b.n	800585e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	f003 0207 	and.w	r2, r3, #7
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	4413      	add	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	b2da      	uxtb	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800586a:	883a      	ldrh	r2, [r7, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	78ba      	ldrb	r2, [r7, #2]
 8005874:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005888:	78bb      	ldrb	r3, [r7, #2]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d102      	bne.n	8005894 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_PCD_EP_Open+0xa6>
 800589e:	2302      	movs	r3, #2
 80058a0:	e00e      	b.n	80058c0 <HAL_PCD_EP_Open+0xc4>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f003 fb59 	bl	8008f68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80058be:	7afb      	ldrb	r3, [r7, #11]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	da0e      	bge.n	80058fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4413      	add	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	705a      	strb	r2, [r3, #1]
 80058f8:	e00e      	b.n	8005918 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	f003 0207 	and.w	r2, r3, #7
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4413      	add	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	b2da      	uxtb	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_PCD_EP_Close+0x6a>
 800592e:	2302      	movs	r3, #2
 8005930:	e00e      	b.n	8005950 <HAL_PCD_EP_Close+0x88>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	4618      	mov	r0, r3
 8005942:	f003 fe7b 	bl	800963c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	607a      	str	r2, [r7, #4]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	460b      	mov	r3, r1
 8005966:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005968:	7afb      	ldrb	r3, [r7, #11]
 800596a:	f003 0207 	and.w	r2, r3, #7
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4413      	add	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2200      	movs	r2, #0
 8005990:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2200      	movs	r2, #0
 8005996:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005998:	7afb      	ldrb	r3, [r7, #11]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059a4:	7afb      	ldrb	r3, [r7, #11]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6979      	ldr	r1, [r7, #20]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f004 f82d 	bl	8009a14 <USB_EPStartXfer>
 80059ba:	e005      	b.n	80059c8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6979      	ldr	r1, [r7, #20]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f004 f826 	bl	8009a14 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	460b      	mov	r3, r1
 80059dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	f003 0207 	and.w	r2, r3, #7
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	440b      	add	r3, r1
 80059f0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80059f4:	681b      	ldr	r3, [r3, #0]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a10:	7afb      	ldrb	r3, [r7, #11]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2200      	movs	r2, #0
 8005a44:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a4c:	7afb      	ldrb	r3, [r7, #11]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a58:	7afb      	ldrb	r3, [r7, #11]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6979      	ldr	r1, [r7, #20]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f003 ffd3 	bl	8009a14 <USB_EPStartXfer>
 8005a6e:	e005      	b.n	8005a7c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6979      	ldr	r1, [r7, #20]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f003 ffcc 	bl	8009a14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	f003 0207 	and.w	r2, r3, #7
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d901      	bls.n	8005aa4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e03e      	b.n	8005b22 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	da0e      	bge.n	8005aca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	4413      	add	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	705a      	strb	r2, [r3, #1]
 8005ac8:	e00c      	b.n	8005ae4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4413      	add	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_PCD_EP_SetStall+0x7e>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e00e      	b.n	8005b22 <HAL_PCD_EP_SetStall+0x9c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68f9      	ldr	r1, [r7, #12]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f005 fdb6 	bl	800b684 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	f003 020f 	and.w	r2, r3, #15
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d901      	bls.n	8005b48 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e040      	b.n	8005bca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	da0e      	bge.n	8005b6e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	4413      	add	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	705a      	strb	r2, [r3, #1]
 8005b6c:	e00e      	b.n	8005b8c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	f003 0207 	and.w	r2, r3, #7
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	4413      	add	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_PCD_EP_ClrStall+0x82>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e00e      	b.n	8005bca <HAL_PCD_EP_ClrStall+0xa0>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68f9      	ldr	r1, [r7, #12]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f005 fdb2 	bl	800b724 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b08e      	sub	sp, #56	; 0x38
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005bda:	e2ec      	b.n	80061b6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005be4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005be6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005bf2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f040 8161 	bne.w	8005ebe <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005bfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d152      	bne.n	8005cac <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	81fb      	strh	r3, [r7, #14]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	89fb      	ldrh	r3, [r7, #14]
 8005c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3328      	adds	r3, #40	; 0x28
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4413      	add	r3, r2
 8005c44:	3302      	adds	r3, #2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6812      	ldr	r2, [r2, #0]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	441a      	add	r2, r3
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f007 fc6a 	bl	800d546 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 829b 	beq.w	80061b6 <PCD_EP_ISR_Handler+0x5e4>
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f040 8296 	bne.w	80061b6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	b292      	uxth	r2, r2
 8005c9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005caa:	e284      	b.n	80061b6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005cbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d034      	beq.n	8005d30 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4413      	add	r3, r2
 8005cda:	3306      	adds	r3, #6
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f005 fe2b 	bl	800b960 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005d16:	4013      	ands	r3, r2
 8005d18:	823b      	strh	r3, [r7, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	8a3a      	ldrh	r2, [r7, #16]
 8005d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d24:	b292      	uxth	r2, r2
 8005d26:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f007 fbdf 	bl	800d4ec <HAL_PCD_SetupStageCallback>
 8005d2e:	e242      	b.n	80061b6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d30:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f280 823e 	bge.w	80061b6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005d46:	4013      	ands	r3, r2
 8005d48:	83bb      	strh	r3, [r7, #28]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	8bba      	ldrh	r2, [r7, #28]
 8005d50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d54:	b292      	uxth	r2, r2
 8005d56:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3306      	adds	r3, #6
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6812      	ldr	r2, [r2, #0]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d019      	beq.n	8005dc0 <PCD_EP_ISR_Handler+0x1ee>
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d015      	beq.n	8005dc0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	6959      	ldr	r1, [r3, #20]
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f005 fddb 	bl	800b960 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	695a      	ldr	r2, [r3, #20]
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	441a      	add	r2, r3
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005db8:	2100      	movs	r1, #0
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f007 fba8 	bl	800d510 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f040 81f2 	bne.w	80061b6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	4413      	add	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d112      	bne.n	8005e20 <PCD_EP_ISR_Handler+0x24e>
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e02f      	b.n	8005e80 <PCD_EP_ISR_Handler+0x2ae>
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b3e      	cmp	r3, #62	; 0x3e
 8005e26:	d813      	bhi.n	8005e50 <PCD_EP_ISR_Handler+0x27e>
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <PCD_EP_ISR_Handler+0x270>
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	3301      	adds	r3, #1
 8005e40:	633b      	str	r3, [r7, #48]	; 0x30
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	029b      	lsls	r3, r3, #10
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	e017      	b.n	8005e80 <PCD_EP_ISR_Handler+0x2ae>
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	633b      	str	r3, [r7, #48]	; 0x30
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f003 031f 	and.w	r3, r3, #31
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <PCD_EP_ISR_Handler+0x298>
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	3b01      	subs	r3, #1
 8005e68:	633b      	str	r3, [r7, #48]	; 0x30
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	029b      	lsls	r3, r3, #10
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e90:	827b      	strh	r3, [r7, #18]
 8005e92:	8a7b      	ldrh	r3, [r7, #18]
 8005e94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e98:	827b      	strh	r3, [r7, #18]
 8005e9a:	8a7b      	ldrh	r3, [r7, #18]
 8005e9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ea0:	827b      	strh	r3, [r7, #18]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	8a7b      	ldrh	r3, [r7, #18]
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]
 8005ebc:	e17b      	b.n	80061b6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ed0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f280 80ea 	bge.w	80060ae <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	853b      	strh	r3, [r7, #40]	; 0x28
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f08:	b292      	uxth	r2, r2
 8005f0a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005f0c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	4413      	add	r3, r2
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	7b1b      	ldrb	r3, [r3, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d122      	bne.n	8005f70 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3306      	adds	r3, #6
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6812      	ldr	r2, [r2, #0]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f52:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005f54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 8087 	beq.w	800606a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	6959      	ldr	r1, [r3, #20]
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	88da      	ldrh	r2, [r3, #6]
 8005f68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f6a:	f005 fcf9 	bl	800b960 <USB_ReadPMA>
 8005f6e:	e07c      	b.n	800606a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	78db      	ldrb	r3, [r3, #3]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d108      	bne.n	8005f8a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005f78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f927 	bl	80061d2 <HAL_PCD_EP_DB_Receive>
 8005f84:	4603      	mov	r3, r0
 8005f86:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f88:	e06f      	b.n	800606a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa4:	847b      	strh	r3, [r7, #34]	; 0x22
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	441a      	add	r2, r3
 8005fb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d021      	beq.n	8006028 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	461a      	mov	r2, r3
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800600c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800600e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006010:	2b00      	cmp	r3, #0
 8006012:	d02a      	beq.n	800606a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	6959      	ldr	r1, [r3, #20]
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	891a      	ldrh	r2, [r3, #8]
 8006020:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006022:	f005 fc9d 	bl	800b960 <USB_ReadPMA>
 8006026:	e020      	b.n	800606a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006030:	b29b      	uxth	r3, r3
 8006032:	461a      	mov	r2, r3
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	4413      	add	r3, r2
 800603c:	3306      	adds	r3, #6
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6812      	ldr	r2, [r2, #0]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006050:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006052:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006054:	2b00      	cmp	r3, #0
 8006056:	d008      	beq.n	800606a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	6959      	ldr	r1, [r3, #20]
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	895a      	ldrh	r2, [r3, #10]
 8006064:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006066:	f005 fc7b 	bl	800b960 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	69da      	ldr	r2, [r3, #28]
 800606e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006070:	441a      	add	r2, r3
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	695a      	ldr	r2, [r3, #20]
 800607a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800607c:	441a      	add	r2, r3
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <PCD_EP_ISR_Handler+0x4c2>
 800608a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	429a      	cmp	r2, r3
 8006092:	d206      	bcs.n	80060a2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f007 fa38 	bl	800d510 <HAL_PCD_DataOutStageCallback>
 80060a0:	e005      	b.n	80060ae <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060a8:	4618      	mov	r0, r3
 80060aa:	f003 fcb3 	bl	8009a14 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80060ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d07e      	beq.n	80061b6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80060b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	4413      	add	r3, r2
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	843b      	strh	r3, [r7, #32]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	441a      	add	r2, r3
 80060f6:	8c3b      	ldrh	r3, [r7, #32]
 80060f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006100:	b29b      	uxth	r3, r3
 8006102:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	78db      	ldrb	r3, [r3, #3]
 8006108:	2b03      	cmp	r3, #3
 800610a:	d00c      	beq.n	8006126 <PCD_EP_ISR_Handler+0x554>
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	78db      	ldrb	r3, [r3, #3]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006118:	2b02      	cmp	r3, #2
 800611a:	d146      	bne.n	80061aa <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800611c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d141      	bne.n	80061aa <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800612e:	b29b      	uxth	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	4413      	add	r3, r2
 800613a:	3302      	adds	r3, #2
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800614e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	699a      	ldr	r2, [r3, #24]
 8006154:	8bfb      	ldrh	r3, [r7, #30]
 8006156:	429a      	cmp	r2, r3
 8006158:	d906      	bls.n	8006168 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	8bfb      	ldrh	r3, [r7, #30]
 8006160:	1ad2      	subs	r2, r2, r3
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	619a      	str	r2, [r3, #24]
 8006166:	e002      	b.n	800616e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	2200      	movs	r2, #0
 800616c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f007 f9e2 	bl	800d546 <HAL_PCD_DataInStageCallback>
 8006182:	e018      	b.n	80061b6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	8bfb      	ldrh	r3, [r7, #30]
 800618a:	441a      	add	r2, r3
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	8bfb      	ldrh	r3, [r7, #30]
 8006196:	441a      	add	r2, r3
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061a2:	4618      	mov	r0, r3
 80061a4:	f003 fc36 	bl	8009a14 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80061a8:	e005      	b.n	80061b6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80061aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061ac:	461a      	mov	r2, r3
 80061ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f91b 	bl	80063ec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061be:	b29b      	uxth	r3, r3
 80061c0:	b21b      	sxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f6ff ad0a 	blt.w	8005bdc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3738      	adds	r7, #56	; 0x38
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b088      	sub	sp, #32
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	4613      	mov	r3, r2
 80061de:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80061e0:	88fb      	ldrh	r3, [r7, #6]
 80061e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d07e      	beq.n	80062e8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	4413      	add	r3, r2
 80061fe:	3302      	adds	r3, #2
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	6812      	ldr	r2, [r2, #0]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006212:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	699a      	ldr	r2, [r3, #24]
 8006218:	8b7b      	ldrh	r3, [r7, #26]
 800621a:	429a      	cmp	r2, r3
 800621c:	d306      	bcc.n	800622c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	8b7b      	ldrh	r3, [r7, #26]
 8006224:	1ad2      	subs	r2, r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	619a      	str	r2, [r3, #24]
 800622a:	e002      	b.n	8006232 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2200      	movs	r2, #0
 8006230:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d123      	bne.n	8006282 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006254:	833b      	strh	r3, [r7, #24]
 8006256:	8b3b      	ldrh	r3, [r7, #24]
 8006258:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800625c:	833b      	strh	r3, [r7, #24]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	441a      	add	r2, r3
 800626c:	8b3b      	ldrh	r3, [r7, #24]
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01f      	beq.n	80062cc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	82fb      	strh	r3, [r7, #22]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	8afb      	ldrh	r3, [r7, #22]
 80062b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80062cc:	8b7b      	ldrh	r3, [r7, #26]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8087 	beq.w	80063e2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	6959      	ldr	r1, [r3, #20]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	891a      	ldrh	r2, [r3, #8]
 80062e0:	8b7b      	ldrh	r3, [r7, #26]
 80062e2:	f005 fb3d 	bl	800b960 <USB_ReadPMA>
 80062e6:	e07c      	b.n	80063e2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	4413      	add	r3, r2
 80062fc:	3306      	adds	r3, #6
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	6812      	ldr	r2, [r2, #0]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006310:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	8b7b      	ldrh	r3, [r7, #26]
 8006318:	429a      	cmp	r2, r3
 800631a:	d306      	bcc.n	800632a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	699a      	ldr	r2, [r3, #24]
 8006320:	8b7b      	ldrh	r3, [r7, #26]
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	619a      	str	r2, [r3, #24]
 8006328:	e002      	b.n	8006330 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2200      	movs	r2, #0
 800632e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d123      	bne.n	8006380 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	83fb      	strh	r3, [r7, #30]
 8006354:	8bfb      	ldrh	r3, [r7, #30]
 8006356:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800635a:	83fb      	strh	r3, [r7, #30]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	441a      	add	r2, r3
 800636a:	8bfb      	ldrh	r3, [r7, #30]
 800636c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637c:	b29b      	uxth	r3, r3
 800637e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d11f      	bne.n	80063ca <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	83bb      	strh	r3, [r7, #28]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	441a      	add	r2, r3
 80063b4:	8bbb      	ldrh	r3, [r7, #28]
 80063b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80063ca:	8b7b      	ldrh	r3, [r7, #26]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	6959      	ldr	r1, [r3, #20]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	895a      	ldrh	r2, [r3, #10]
 80063dc:	8b7b      	ldrh	r3, [r7, #26]
 80063de:	f005 fabf 	bl	800b960 <USB_ReadPMA>
    }
  }

  return count;
 80063e2:	8b7b      	ldrh	r3, [r7, #26]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b0a2      	sub	sp, #136	; 0x88
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 81c7 	beq.w	8006794 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800640e:	b29b      	uxth	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4413      	add	r3, r2
 800641a:	3302      	adds	r3, #2
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800642e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800643a:	429a      	cmp	r2, r3
 800643c:	d907      	bls.n	800644e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006446:	1ad2      	subs	r2, r2, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	619a      	str	r2, [r3, #24]
 800644c:	e002      	b.n	8006454 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2200      	movs	r2, #0
 8006452:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	f040 80b9 	bne.w	80065d0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	785b      	ldrb	r3, [r3, #1]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d126      	bne.n	80064b4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006474:	b29b      	uxth	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	4413      	add	r3, r2
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	011a      	lsls	r2, r3, #4
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	4413      	add	r3, r2
 8006488:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006498:	b29a      	uxth	r2, r3
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	801a      	strh	r2, [r3, #0]
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	e01a      	b.n	80064ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d116      	bne.n	80064ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	633b      	str	r3, [r7, #48]	; 0x30
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	4413      	add	r3, r2
 80064d2:	633b      	str	r3, [r7, #48]	; 0x30
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	011a      	lsls	r2, r3, #4
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	4413      	add	r3, r2
 80064de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	2200      	movs	r2, #0
 80064e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	623b      	str	r3, [r7, #32]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d126      	bne.n	8006546 <HAL_PCD_EP_DB_Transmit+0x15a>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006506:	b29b      	uxth	r3, r3
 8006508:	461a      	mov	r2, r3
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	4413      	add	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	011a      	lsls	r2, r3, #4
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	4413      	add	r3, r2
 800651a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800652a:	b29a      	uxth	r2, r3
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	b29b      	uxth	r3, r3
 8006536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653e:	b29a      	uxth	r2, r3
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e017      	b.n	8006576 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	785b      	ldrb	r3, [r3, #1]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d113      	bne.n	8006576 <HAL_PCD_EP_DB_Transmit+0x18a>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006556:	b29b      	uxth	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	4413      	add	r3, r2
 800655e:	623b      	str	r3, [r7, #32]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	011a      	lsls	r2, r3, #4
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	4413      	add	r3, r2
 800656a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	2200      	movs	r2, #0
 8006574:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	4619      	mov	r1, r3
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f006 ffe2 	bl	800d546 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 82d4 	beq.w	8006b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a8:	827b      	strh	r3, [r7, #18]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	441a      	add	r2, r3
 80065b8:	8a7b      	ldrh	r3, [r7, #18]
 80065ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	8013      	strh	r3, [r2, #0]
 80065ce:	e2b2      	b.n	8006b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80065d0:	88fb      	ldrh	r3, [r7, #6]
 80065d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d021      	beq.n	800661e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	441a      	add	r2, r3
 8006606:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800660a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	b29b      	uxth	r3, r3
 800661c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006624:	2b01      	cmp	r3, #1
 8006626:	f040 8286 	bne.w	8006b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	695a      	ldr	r2, [r3, #20]
 800662e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006632:	441a      	add	r2, r3
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	69da      	ldr	r2, [r3, #28]
 800663c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006640:	441a      	add	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	429a      	cmp	r2, r3
 8006650:	d309      	bcc.n	8006666 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6a1a      	ldr	r2, [r3, #32]
 800665c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	621a      	str	r2, [r3, #32]
 8006664:	e015      	b.n	8006692 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d107      	bne.n	800667e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800666e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006672:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800667c:	e009      	b.n	8006692 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d155      	bne.n	8006746 <HAL_PCD_EP_DB_Transmit+0x35a>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	63bb      	str	r3, [r7, #56]	; 0x38
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	4413      	add	r3, r2
 80066b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	011a      	lsls	r2, r3, #4
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	4413      	add	r3, r2
 80066bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
 80066c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d112      	bne.n	80066ee <HAL_PCD_EP_DB_Transmit+0x302>
 80066c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	e047      	b.n	800677e <HAL_PCD_EP_DB_Transmit+0x392>
 80066ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f0:	2b3e      	cmp	r3, #62	; 0x3e
 80066f2:	d811      	bhi.n	8006718 <HAL_PCD_EP_DB_Transmit+0x32c>
 80066f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f6:	085b      	lsrs	r3, r3, #1
 80066f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <HAL_PCD_EP_DB_Transmit+0x31e>
 8006704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006706:	3301      	adds	r3, #1
 8006708:	64bb      	str	r3, [r7, #72]	; 0x48
 800670a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800670c:	b29b      	uxth	r3, r3
 800670e:	029b      	lsls	r3, r3, #10
 8006710:	b29a      	uxth	r2, r3
 8006712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e032      	b.n	800677e <HAL_PCD_EP_DB_Transmit+0x392>
 8006718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	64bb      	str	r3, [r7, #72]	; 0x48
 800671e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006720:	f003 031f 	and.w	r3, r3, #31
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <HAL_PCD_EP_DB_Transmit+0x342>
 8006728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800672a:	3b01      	subs	r3, #1
 800672c:	64bb      	str	r3, [r7, #72]	; 0x48
 800672e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006730:	b29b      	uxth	r3, r3
 8006732:	029b      	lsls	r3, r3, #10
 8006734:	b29b      	uxth	r3, r3
 8006736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673e:	b29a      	uxth	r2, r3
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	e01b      	b.n	800677e <HAL_PCD_EP_DB_Transmit+0x392>
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d117      	bne.n	800677e <HAL_PCD_EP_DB_Transmit+0x392>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	643b      	str	r3, [r7, #64]	; 0x40
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675c:	b29b      	uxth	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006762:	4413      	add	r3, r2
 8006764:	643b      	str	r3, [r7, #64]	; 0x40
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	011a      	lsls	r2, r3, #4
 800676c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800676e:	4413      	add	r3, r2
 8006770:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006778:	b29a      	uxth	r2, r3
 800677a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6959      	ldr	r1, [r3, #20]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	891a      	ldrh	r2, [r3, #8]
 800678a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800678c:	b29b      	uxth	r3, r3
 800678e:	f005 f8a2 	bl	800b8d6 <USB_WritePMA>
 8006792:	e1d0      	b.n	8006b36 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679c:	b29b      	uxth	r3, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	4413      	add	r3, r2
 80067a8:	3306      	adds	r3, #6
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	6812      	ldr	r2, [r2, #0]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	699a      	ldr	r2, [r3, #24]
 80067c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d307      	bcc.n	80067dc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067d4:	1ad2      	subs	r2, r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	619a      	str	r2, [r3, #24]
 80067da:	e002      	b.n	80067e2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f040 80c4 	bne.w	8006974 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	785b      	ldrb	r3, [r3, #1]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d126      	bne.n	8006842 <HAL_PCD_EP_DB_Transmit+0x456>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006802:	b29b      	uxth	r3, r3
 8006804:	461a      	mov	r2, r3
 8006806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006808:	4413      	add	r3, r2
 800680a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	011a      	lsls	r2, r3, #4
 8006812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006814:	4413      	add	r3, r2
 8006816:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800681a:	66bb      	str	r3, [r7, #104]	; 0x68
 800681c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	b29b      	uxth	r3, r3
 8006822:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006826:	b29a      	uxth	r2, r3
 8006828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800682a:	801a      	strh	r2, [r3, #0]
 800682c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683a:	b29a      	uxth	r2, r3
 800683c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	e01a      	b.n	8006878 <HAL_PCD_EP_DB_Transmit+0x48c>
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	785b      	ldrb	r3, [r3, #1]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d116      	bne.n	8006878 <HAL_PCD_EP_DB_Transmit+0x48c>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	677b      	str	r3, [r7, #116]	; 0x74
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006858:	b29b      	uxth	r3, r3
 800685a:	461a      	mov	r2, r3
 800685c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685e:	4413      	add	r3, r2
 8006860:	677b      	str	r3, [r7, #116]	; 0x74
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	011a      	lsls	r2, r3, #4
 8006868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800686a:	4413      	add	r3, r2
 800686c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006870:	673b      	str	r3, [r7, #112]	; 0x70
 8006872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006874:	2200      	movs	r2, #0
 8006876:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	67bb      	str	r3, [r7, #120]	; 0x78
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d12f      	bne.n	80068e6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006896:	b29b      	uxth	r3, r3
 8006898:	461a      	mov	r2, r3
 800689a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800689e:	4413      	add	r3, r2
 80068a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	011a      	lsls	r2, r3, #4
 80068aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068ae:	4413      	add	r3, r2
 80068b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068ca:	801a      	strh	r2, [r3, #0]
 80068cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068dc:	b29a      	uxth	r2, r3
 80068de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068e2:	801a      	strh	r2, [r3, #0]
 80068e4:	e017      	b.n	8006916 <HAL_PCD_EP_DB_Transmit+0x52a>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	785b      	ldrb	r3, [r3, #1]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d113      	bne.n	8006916 <HAL_PCD_EP_DB_Transmit+0x52a>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	461a      	mov	r2, r3
 80068fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068fc:	4413      	add	r3, r2
 80068fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	011a      	lsls	r2, r3, #4
 8006906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006908:	4413      	add	r3, r2
 800690a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800690e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006912:	2200      	movs	r2, #0
 8006914:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	4619      	mov	r1, r3
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f006 fe12 	bl	800d546 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006922:	88fb      	ldrh	r3, [r7, #6]
 8006924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006928:	2b00      	cmp	r3, #0
 800692a:	f040 8104 	bne.w	8006b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006948:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	441a      	add	r2, r3
 800695a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800695e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800696a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696e:	b29b      	uxth	r3, r3
 8006970:	8013      	strh	r3, [r2, #0]
 8006972:	e0e0      	b.n	8006b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d121      	bne.n	80069c2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006998:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80069ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069be:	b29b      	uxth	r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	f040 80b4 	bne.w	8006b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	695a      	ldr	r2, [r3, #20]
 80069d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80069d6:	441a      	add	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80069e4:	441a      	add	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6a1a      	ldr	r2, [r3, #32]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d309      	bcc.n	8006a0a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6a1a      	ldr	r2, [r3, #32]
 8006a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a02:	1ad2      	subs	r2, r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	621a      	str	r2, [r3, #32]
 8006a08:	e015      	b.n	8006a36 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d107      	bne.n	8006a22 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006a12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006a20:	e009      	b.n	8006a36 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	667b      	str	r3, [r7, #100]	; 0x64
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d155      	bne.n	8006af0 <HAL_PCD_EP_DB_Transmit+0x704>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a58:	4413      	add	r3, r2
 8006a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	011a      	lsls	r2, r3, #4
 8006a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a64:	4413      	add	r3, r2
 8006a66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d112      	bne.n	8006a98 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	e044      	b.n	8006b22 <HAL_PCD_EP_DB_Transmit+0x736>
 8006a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a9a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a9c:	d811      	bhi.n	8006ac2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa0:	085b      	lsrs	r3, r3, #1
 8006aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8006aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	029b      	lsls	r3, r3, #10
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006abe:	801a      	strh	r2, [r3, #0]
 8006ac0:	e02f      	b.n	8006b22 <HAL_PCD_EP_DB_Transmit+0x736>
 8006ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	029b      	lsls	r3, r3, #10
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aec:	801a      	strh	r2, [r3, #0]
 8006aee:	e018      	b.n	8006b22 <HAL_PCD_EP_DB_Transmit+0x736>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d114      	bne.n	8006b22 <HAL_PCD_EP_DB_Transmit+0x736>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b06:	4413      	add	r3, r2
 8006b08:	667b      	str	r3, [r7, #100]	; 0x64
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	011a      	lsls	r2, r3, #4
 8006b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b12:	4413      	add	r3, r2
 8006b14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b18:	663b      	str	r3, [r7, #96]	; 0x60
 8006b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b20:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6959      	ldr	r1, [r3, #20]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	895a      	ldrh	r2, [r3, #10]
 8006b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f004 fed0 	bl	800b8d6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b50:	823b      	strh	r3, [r7, #16]
 8006b52:	8a3b      	ldrh	r3, [r7, #16]
 8006b54:	f083 0310 	eor.w	r3, r3, #16
 8006b58:	823b      	strh	r3, [r7, #16]
 8006b5a:	8a3b      	ldrh	r3, [r7, #16]
 8006b5c:	f083 0320 	eor.w	r3, r3, #32
 8006b60:	823b      	strh	r3, [r7, #16]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	441a      	add	r2, r3
 8006b70:	8a3b      	ldrh	r3, [r7, #16]
 8006b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3788      	adds	r7, #136	; 0x88
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	607b      	str	r3, [r7, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	817b      	strh	r3, [r7, #10]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006ba2:	897b      	ldrh	r3, [r7, #10]
 8006ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bae:	897b      	ldrh	r3, [r7, #10]
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e009      	b.n	8006bda <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bc6:	897a      	ldrh	r2, [r7, #10]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006bda:	893b      	ldrh	r3, [r7, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d107      	bne.n	8006bf0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2200      	movs	r2, #0
 8006be4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	80da      	strh	r2, [r3, #6]
 8006bee:	e00b      	b.n	8006c08 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	0c1b      	lsrs	r3, r3, #16
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e31d      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c26:	4b94      	ldr	r3, [pc, #592]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 030c 	and.w	r3, r3, #12
 8006c2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c30:	4b91      	ldr	r3, [pc, #580]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c38:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d07b      	beq.n	8006d3e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d006      	beq.n	8006c5a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b0c      	cmp	r3, #12
 8006c50:	d10f      	bne.n	8006c72 <HAL_RCC_OscConfig+0x5e>
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c58:	d10b      	bne.n	8006c72 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c5a:	4b87      	ldr	r3, [pc, #540]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d06a      	beq.n	8006d3c <HAL_RCC_OscConfig+0x128>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d166      	bne.n	8006d3c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e2f7      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d106      	bne.n	8006c88 <HAL_RCC_OscConfig+0x74>
 8006c7a:	4b7f      	ldr	r3, [pc, #508]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a7e      	ldr	r2, [pc, #504]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e02d      	b.n	8006ce4 <HAL_RCC_OscConfig+0xd0>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10c      	bne.n	8006caa <HAL_RCC_OscConfig+0x96>
 8006c90:	4b79      	ldr	r3, [pc, #484]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a78      	ldr	r2, [pc, #480]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	4b76      	ldr	r3, [pc, #472]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a75      	ldr	r2, [pc, #468]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	e01c      	b.n	8006ce4 <HAL_RCC_OscConfig+0xd0>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b05      	cmp	r3, #5
 8006cb0:	d10c      	bne.n	8006ccc <HAL_RCC_OscConfig+0xb8>
 8006cb2:	4b71      	ldr	r3, [pc, #452]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a70      	ldr	r2, [pc, #448]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	4b6e      	ldr	r3, [pc, #440]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a6d      	ldr	r2, [pc, #436]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	e00b      	b.n	8006ce4 <HAL_RCC_OscConfig+0xd0>
 8006ccc:	4b6a      	ldr	r3, [pc, #424]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a69      	ldr	r2, [pc, #420]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	4b67      	ldr	r3, [pc, #412]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a66      	ldr	r2, [pc, #408]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d013      	beq.n	8006d14 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cec:	f7fd f87c 	bl	8003de8 <HAL_GetTick>
 8006cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cf4:	f7fd f878 	bl	8003de8 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b64      	cmp	r3, #100	; 0x64
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e2ad      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d06:	4b5c      	ldr	r3, [pc, #368]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0f0      	beq.n	8006cf4 <HAL_RCC_OscConfig+0xe0>
 8006d12:	e014      	b.n	8006d3e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d14:	f7fd f868 	bl	8003de8 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d1c:	f7fd f864 	bl	8003de8 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b64      	cmp	r3, #100	; 0x64
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e299      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d2e:	4b52      	ldr	r3, [pc, #328]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f0      	bne.n	8006d1c <HAL_RCC_OscConfig+0x108>
 8006d3a:	e000      	b.n	8006d3e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d05a      	beq.n	8006e00 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d005      	beq.n	8006d5c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	2b0c      	cmp	r3, #12
 8006d54:	d119      	bne.n	8006d8a <HAL_RCC_OscConfig+0x176>
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d116      	bne.n	8006d8a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d5c:	4b46      	ldr	r3, [pc, #280]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <HAL_RCC_OscConfig+0x160>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d001      	beq.n	8006d74 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e276      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d74:	4b40      	ldr	r3, [pc, #256]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	493d      	ldr	r1, [pc, #244]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d88:	e03a      	b.n	8006e00 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d020      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d92:	4b3a      	ldr	r3, [pc, #232]	; (8006e7c <HAL_RCC_OscConfig+0x268>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d98:	f7fd f826 	bl	8003de8 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006da0:	f7fd f822 	bl	8003de8 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e257      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006db2:	4b31      	ldr	r3, [pc, #196]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f0      	beq.n	8006da0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dbe:	4b2e      	ldr	r3, [pc, #184]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	021b      	lsls	r3, r3, #8
 8006dcc:	492a      	ldr	r1, [pc, #168]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	604b      	str	r3, [r1, #4]
 8006dd2:	e015      	b.n	8006e00 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dd4:	4b29      	ldr	r3, [pc, #164]	; (8006e7c <HAL_RCC_OscConfig+0x268>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dda:	f7fd f805 	bl	8003de8 <HAL_GetTick>
 8006dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006de0:	e008      	b.n	8006df4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006de2:	f7fd f801 	bl	8003de8 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e236      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006df4:	4b20      	ldr	r3, [pc, #128]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1f0      	bne.n	8006de2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 80b8 	beq.w	8006f7e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d170      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e14:	4b18      	ldr	r3, [pc, #96]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_RCC_OscConfig+0x218>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e21a      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1a      	ldr	r2, [r3, #32]
 8006e30:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d921      	bls.n	8006e80 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fc69 	bl	8007718 <RCC_SetFlashLatencyFromMSIRange>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e208      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	4906      	ldr	r1, [pc, #24]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	061b      	lsls	r3, r3, #24
 8006e70:	4901      	ldr	r1, [pc, #4]	; (8006e78 <HAL_RCC_OscConfig+0x264>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	604b      	str	r3, [r1, #4]
 8006e76:	e020      	b.n	8006eba <HAL_RCC_OscConfig+0x2a6>
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e80:	4b99      	ldr	r3, [pc, #612]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	4996      	ldr	r1, [pc, #600]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e92:	4b95      	ldr	r3, [pc, #596]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	061b      	lsls	r3, r3, #24
 8006ea0:	4991      	ldr	r1, [pc, #580]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fc34 	bl	8007718 <RCC_SetFlashLatencyFromMSIRange>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e1d3      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	0b5b      	lsrs	r3, r3, #13
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006ec6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006eca:	4a87      	ldr	r2, [pc, #540]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006ecc:	6892      	ldr	r2, [r2, #8]
 8006ece:	0912      	lsrs	r2, r2, #4
 8006ed0:	f002 020f 	and.w	r2, r2, #15
 8006ed4:	4985      	ldr	r1, [pc, #532]	; (80070ec <HAL_RCC_OscConfig+0x4d8>)
 8006ed6:	5c8a      	ldrb	r2, [r1, r2]
 8006ed8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006eda:	4a85      	ldr	r2, [pc, #532]	; (80070f0 <HAL_RCC_OscConfig+0x4dc>)
 8006edc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ede:	4b85      	ldr	r3, [pc, #532]	; (80070f4 <HAL_RCC_OscConfig+0x4e0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fc ff34 	bl	8003d50 <HAL_InitTick>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d045      	beq.n	8006f7e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	e1b5      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d029      	beq.n	8006f52 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006efe:	4b7e      	ldr	r3, [pc, #504]	; (80070f8 <HAL_RCC_OscConfig+0x4e4>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f04:	f7fc ff70 	bl	8003de8 <HAL_GetTick>
 8006f08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f0c:	f7fc ff6c 	bl	8003de8 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e1a1      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006f1e:	4b72      	ldr	r3, [pc, #456]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0f0      	beq.n	8006f0c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f2a:	4b6f      	ldr	r3, [pc, #444]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	496c      	ldr	r1, [pc, #432]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f3c:	4b6a      	ldr	r3, [pc, #424]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	061b      	lsls	r3, r3, #24
 8006f4a:	4967      	ldr	r1, [pc, #412]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	604b      	str	r3, [r1, #4]
 8006f50:	e015      	b.n	8006f7e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f52:	4b69      	ldr	r3, [pc, #420]	; (80070f8 <HAL_RCC_OscConfig+0x4e4>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f58:	f7fc ff46 	bl	8003de8 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f60:	f7fc ff42 	bl	8003de8 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e177      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006f72:	4b5d      	ldr	r3, [pc, #372]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d030      	beq.n	8006fec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d016      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f92:	4b5a      	ldr	r3, [pc, #360]	; (80070fc <HAL_RCC_OscConfig+0x4e8>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f98:	f7fc ff26 	bl	8003de8 <HAL_GetTick>
 8006f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fa0:	f7fc ff22 	bl	8003de8 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e157      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006fb2:	4b4d      	ldr	r3, [pc, #308]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0f0      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x38c>
 8006fbe:	e015      	b.n	8006fec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fc0:	4b4e      	ldr	r3, [pc, #312]	; (80070fc <HAL_RCC_OscConfig+0x4e8>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fc6:	f7fc ff0f 	bl	8003de8 <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fce:	f7fc ff0b 	bl	8003de8 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e140      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fe0:	4b41      	ldr	r3, [pc, #260]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8006fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f0      	bne.n	8006fce <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 80b5 	beq.w	8007164 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ffe:	4b3a      	ldr	r3, [pc, #232]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10d      	bne.n	8007026 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800700a:	4b37      	ldr	r3, [pc, #220]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	4a36      	ldr	r2, [pc, #216]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8007010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007014:	6253      	str	r3, [r2, #36]	; 0x24
 8007016:	4b34      	ldr	r3, [pc, #208]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701e:	60bb      	str	r3, [r7, #8]
 8007020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007022:	2301      	movs	r3, #1
 8007024:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007026:	4b36      	ldr	r3, [pc, #216]	; (8007100 <HAL_RCC_OscConfig+0x4ec>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702e:	2b00      	cmp	r3, #0
 8007030:	d118      	bne.n	8007064 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007032:	4b33      	ldr	r3, [pc, #204]	; (8007100 <HAL_RCC_OscConfig+0x4ec>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a32      	ldr	r2, [pc, #200]	; (8007100 <HAL_RCC_OscConfig+0x4ec>)
 8007038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800703e:	f7fc fed3 	bl	8003de8 <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007046:	f7fc fecf 	bl	8003de8 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b64      	cmp	r3, #100	; 0x64
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e104      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007058:	4b29      	ldr	r3, [pc, #164]	; (8007100 <HAL_RCC_OscConfig+0x4ec>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f0      	beq.n	8007046 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d106      	bne.n	800707a <HAL_RCC_OscConfig+0x466>
 800706c:	4b1e      	ldr	r3, [pc, #120]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 800706e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007070:	4a1d      	ldr	r2, [pc, #116]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8007072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007076:	6353      	str	r3, [r2, #52]	; 0x34
 8007078:	e02d      	b.n	80070d6 <HAL_RCC_OscConfig+0x4c2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10c      	bne.n	800709c <HAL_RCC_OscConfig+0x488>
 8007082:	4b19      	ldr	r3, [pc, #100]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	4a18      	ldr	r2, [pc, #96]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8007088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800708c:	6353      	str	r3, [r2, #52]	; 0x34
 800708e:	4b16      	ldr	r3, [pc, #88]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8007090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007092:	4a15      	ldr	r2, [pc, #84]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 8007094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007098:	6353      	str	r3, [r2, #52]	; 0x34
 800709a:	e01c      	b.n	80070d6 <HAL_RCC_OscConfig+0x4c2>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	2b05      	cmp	r3, #5
 80070a2:	d10c      	bne.n	80070be <HAL_RCC_OscConfig+0x4aa>
 80070a4:	4b10      	ldr	r3, [pc, #64]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 80070a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a8:	4a0f      	ldr	r2, [pc, #60]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 80070aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070ae:	6353      	str	r3, [r2, #52]	; 0x34
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 80070b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b4:	4a0c      	ldr	r2, [pc, #48]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 80070b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ba:	6353      	str	r3, [r2, #52]	; 0x34
 80070bc:	e00b      	b.n	80070d6 <HAL_RCC_OscConfig+0x4c2>
 80070be:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 80070c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c2:	4a09      	ldr	r2, [pc, #36]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 80070c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c8:	6353      	str	r3, [r2, #52]	; 0x34
 80070ca:	4b07      	ldr	r3, [pc, #28]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 80070cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ce:	4a06      	ldr	r2, [pc, #24]	; (80070e8 <HAL_RCC_OscConfig+0x4d4>)
 80070d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070d4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d024      	beq.n	8007128 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070de:	f7fc fe83 	bl	8003de8 <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070e4:	e019      	b.n	800711a <HAL_RCC_OscConfig+0x506>
 80070e6:	bf00      	nop
 80070e8:	40023800 	.word	0x40023800
 80070ec:	08011bdc 	.word	0x08011bdc
 80070f0:	20000394 	.word	0x20000394
 80070f4:	2000039c 	.word	0x2000039c
 80070f8:	42470020 	.word	0x42470020
 80070fc:	42470680 	.word	0x42470680
 8007100:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007104:	f7fc fe70 	bl	8003de8 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007112:	4293      	cmp	r3, r2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e0a3      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800711a:	4b54      	ldr	r3, [pc, #336]	; (800726c <HAL_RCC_OscConfig+0x658>)
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0ee      	beq.n	8007104 <HAL_RCC_OscConfig+0x4f0>
 8007126:	e014      	b.n	8007152 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007128:	f7fc fe5e 	bl	8003de8 <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800712e:	e00a      	b.n	8007146 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007130:	f7fc fe5a 	bl	8003de8 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	f241 3288 	movw	r2, #5000	; 0x1388
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e08d      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007146:	4b49      	ldr	r3, [pc, #292]	; (800726c <HAL_RCC_OscConfig+0x658>)
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1ee      	bne.n	8007130 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007152:	7ffb      	ldrb	r3, [r7, #31]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d105      	bne.n	8007164 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007158:	4b44      	ldr	r3, [pc, #272]	; (800726c <HAL_RCC_OscConfig+0x658>)
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	4a43      	ldr	r2, [pc, #268]	; (800726c <HAL_RCC_OscConfig+0x658>)
 800715e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007162:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	2b00      	cmp	r3, #0
 800716a:	d079      	beq.n	8007260 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b0c      	cmp	r3, #12
 8007170:	d056      	beq.n	8007220 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	2b02      	cmp	r3, #2
 8007178:	d13b      	bne.n	80071f2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800717a:	4b3d      	ldr	r3, [pc, #244]	; (8007270 <HAL_RCC_OscConfig+0x65c>)
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007180:	f7fc fe32 	bl	8003de8 <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007188:	f7fc fe2e 	bl	8003de8 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e063      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800719a:	4b34      	ldr	r3, [pc, #208]	; (800726c <HAL_RCC_OscConfig+0x658>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f0      	bne.n	8007188 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071a6:	4b31      	ldr	r3, [pc, #196]	; (800726c <HAL_RCC_OscConfig+0x658>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	4319      	orrs	r1, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	430b      	orrs	r3, r1
 80071be:	492b      	ldr	r1, [pc, #172]	; (800726c <HAL_RCC_OscConfig+0x658>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071c4:	4b2a      	ldr	r3, [pc, #168]	; (8007270 <HAL_RCC_OscConfig+0x65c>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ca:	f7fc fe0d 	bl	8003de8 <HAL_GetTick>
 80071ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071d0:	e008      	b.n	80071e4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071d2:	f7fc fe09 	bl	8003de8 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e03e      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071e4:	4b21      	ldr	r3, [pc, #132]	; (800726c <HAL_RCC_OscConfig+0x658>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0f0      	beq.n	80071d2 <HAL_RCC_OscConfig+0x5be>
 80071f0:	e036      	b.n	8007260 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f2:	4b1f      	ldr	r3, [pc, #124]	; (8007270 <HAL_RCC_OscConfig+0x65c>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f8:	f7fc fdf6 	bl	8003de8 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007200:	f7fc fdf2 	bl	8003de8 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e027      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <HAL_RCC_OscConfig+0x658>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1f0      	bne.n	8007200 <HAL_RCC_OscConfig+0x5ec>
 800721e:	e01f      	b.n	8007260 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e01a      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800722c:	4b0f      	ldr	r3, [pc, #60]	; (800726c <HAL_RCC_OscConfig+0x658>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	429a      	cmp	r2, r3
 800723e:	d10d      	bne.n	800725c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800724a:	429a      	cmp	r2, r3
 800724c:	d106      	bne.n	800725c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007258:	429a      	cmp	r2, r3
 800725a:	d001      	beq.n	8007260 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40023800 	.word	0x40023800
 8007270:	42470060 	.word	0x42470060

08007274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e11a      	b.n	80074be <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007288:	4b8f      	ldr	r3, [pc, #572]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d919      	bls.n	80072ca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d105      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x34>
 800729c:	4b8a      	ldr	r3, [pc, #552]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a89      	ldr	r2, [pc, #548]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 80072a2:	f043 0304 	orr.w	r3, r3, #4
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	4b87      	ldr	r3, [pc, #540]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f023 0201 	bic.w	r2, r3, #1
 80072b0:	4985      	ldr	r1, [pc, #532]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072b8:	4b83      	ldr	r3, [pc, #524]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d001      	beq.n	80072ca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e0f9      	b.n	80074be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d008      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072d6:	4b7d      	ldr	r3, [pc, #500]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	497a      	ldr	r1, [pc, #488]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 808e 	beq.w	8007412 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d107      	bne.n	800730e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072fe:	4b73      	ldr	r3, [pc, #460]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d121      	bne.n	800734e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e0d7      	b.n	80074be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2b03      	cmp	r3, #3
 8007314:	d107      	bne.n	8007326 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007316:	4b6d      	ldr	r3, [pc, #436]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d115      	bne.n	800734e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e0cb      	b.n	80074be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d107      	bne.n	800733e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800732e:	4b67      	ldr	r3, [pc, #412]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e0bf      	b.n	80074be <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800733e:	4b63      	ldr	r3, [pc, #396]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e0b7      	b.n	80074be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800734e:	4b5f      	ldr	r3, [pc, #380]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f023 0203 	bic.w	r2, r3, #3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	495c      	ldr	r1, [pc, #368]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 800735c:	4313      	orrs	r3, r2
 800735e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007360:	f7fc fd42 	bl	8003de8 <HAL_GetTick>
 8007364:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d112      	bne.n	8007394 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800736e:	e00a      	b.n	8007386 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007370:	f7fc fd3a 	bl	8003de8 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	f241 3288 	movw	r2, #5000	; 0x1388
 800737e:	4293      	cmp	r3, r2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e09b      	b.n	80074be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007386:	4b51      	ldr	r3, [pc, #324]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 030c 	and.w	r3, r3, #12
 800738e:	2b08      	cmp	r3, #8
 8007390:	d1ee      	bne.n	8007370 <HAL_RCC_ClockConfig+0xfc>
 8007392:	e03e      	b.n	8007412 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b03      	cmp	r3, #3
 800739a:	d112      	bne.n	80073c2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800739c:	e00a      	b.n	80073b4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800739e:	f7fc fd23 	bl	8003de8 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e084      	b.n	80074be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073b4:	4b45      	ldr	r3, [pc, #276]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 030c 	and.w	r3, r3, #12
 80073bc:	2b0c      	cmp	r3, #12
 80073be:	d1ee      	bne.n	800739e <HAL_RCC_ClockConfig+0x12a>
 80073c0:	e027      	b.n	8007412 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d11d      	bne.n	8007406 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80073ca:	e00a      	b.n	80073e2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073cc:	f7fc fd0c 	bl	8003de8 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073da:	4293      	cmp	r3, r2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e06d      	b.n	80074be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80073e2:	4b3a      	ldr	r3, [pc, #232]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 030c 	and.w	r3, r3, #12
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d1ee      	bne.n	80073cc <HAL_RCC_ClockConfig+0x158>
 80073ee:	e010      	b.n	8007412 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073f0:	f7fc fcfa 	bl	8003de8 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80073fe:	4293      	cmp	r3, r2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e05b      	b.n	80074be <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007406:	4b31      	ldr	r3, [pc, #196]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 030c 	and.w	r3, r3, #12
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1ee      	bne.n	80073f0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007412:	4b2d      	ldr	r3, [pc, #180]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d219      	bcs.n	8007454 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d105      	bne.n	8007432 <HAL_RCC_ClockConfig+0x1be>
 8007426:	4b28      	ldr	r3, [pc, #160]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a27      	ldr	r2, [pc, #156]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 800742c:	f043 0304 	orr.w	r3, r3, #4
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	4b25      	ldr	r3, [pc, #148]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f023 0201 	bic.w	r2, r3, #1
 800743a:	4923      	ldr	r1, [pc, #140]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	4313      	orrs	r3, r2
 8007440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007442:	4b21      	ldr	r3, [pc, #132]	; (80074c8 <HAL_RCC_ClockConfig+0x254>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d001      	beq.n	8007454 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e034      	b.n	80074be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d008      	beq.n	8007472 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007460:	4b1a      	ldr	r3, [pc, #104]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4917      	ldr	r1, [pc, #92]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 800746e:	4313      	orrs	r3, r2
 8007470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d009      	beq.n	8007492 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800747e:	4b13      	ldr	r3, [pc, #76]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	490f      	ldr	r1, [pc, #60]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 800748e:	4313      	orrs	r3, r2
 8007490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007492:	f000 f823 	bl	80074dc <HAL_RCC_GetSysClockFreq>
 8007496:	4602      	mov	r2, r0
 8007498:	4b0c      	ldr	r3, [pc, #48]	; (80074cc <HAL_RCC_ClockConfig+0x258>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	091b      	lsrs	r3, r3, #4
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	490b      	ldr	r1, [pc, #44]	; (80074d0 <HAL_RCC_ClockConfig+0x25c>)
 80074a4:	5ccb      	ldrb	r3, [r1, r3]
 80074a6:	fa22 f303 	lsr.w	r3, r2, r3
 80074aa:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80074ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80074ae:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fc fc4c 	bl	8003d50 <HAL_InitTick>
 80074b8:	4603      	mov	r3, r0
 80074ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80074bc:	7afb      	ldrb	r3, [r7, #11]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	40023c00 	.word	0x40023c00
 80074cc:	40023800 	.word	0x40023800
 80074d0:	08011bdc 	.word	0x08011bdc
 80074d4:	20000394 	.word	0x20000394
 80074d8:	2000039c 	.word	0x2000039c

080074dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074e0:	b092      	sub	sp, #72	; 0x48
 80074e2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80074e4:	4b79      	ldr	r3, [pc, #484]	; (80076cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80074ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ec:	f003 030c 	and.w	r3, r3, #12
 80074f0:	2b0c      	cmp	r3, #12
 80074f2:	d00d      	beq.n	8007510 <HAL_RCC_GetSysClockFreq+0x34>
 80074f4:	2b0c      	cmp	r3, #12
 80074f6:	f200 80d5 	bhi.w	80076a4 <HAL_RCC_GetSysClockFreq+0x1c8>
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d002      	beq.n	8007504 <HAL_RCC_GetSysClockFreq+0x28>
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d003      	beq.n	800750a <HAL_RCC_GetSysClockFreq+0x2e>
 8007502:	e0cf      	b.n	80076a4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007504:	4b72      	ldr	r3, [pc, #456]	; (80076d0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007506:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007508:	e0da      	b.n	80076c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800750a:	4b72      	ldr	r3, [pc, #456]	; (80076d4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800750c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800750e:	e0d7      	b.n	80076c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007512:	0c9b      	lsrs	r3, r3, #18
 8007514:	f003 020f 	and.w	r2, r3, #15
 8007518:	4b6f      	ldr	r3, [pc, #444]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800751a:	5c9b      	ldrb	r3, [r3, r2]
 800751c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800751e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007520:	0d9b      	lsrs	r3, r3, #22
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	3301      	adds	r3, #1
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800752a:	4b68      	ldr	r3, [pc, #416]	; (80076cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d05d      	beq.n	80075f2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	2200      	movs	r2, #0
 800753a:	4618      	mov	r0, r3
 800753c:	4611      	mov	r1, r2
 800753e:	4604      	mov	r4, r0
 8007540:	460d      	mov	r5, r1
 8007542:	4622      	mov	r2, r4
 8007544:	462b      	mov	r3, r5
 8007546:	f04f 0000 	mov.w	r0, #0
 800754a:	f04f 0100 	mov.w	r1, #0
 800754e:	0159      	lsls	r1, r3, #5
 8007550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007554:	0150      	lsls	r0, r2, #5
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	4621      	mov	r1, r4
 800755c:	1a51      	subs	r1, r2, r1
 800755e:	6139      	str	r1, [r7, #16]
 8007560:	4629      	mov	r1, r5
 8007562:	eb63 0301 	sbc.w	r3, r3, r1
 8007566:	617b      	str	r3, [r7, #20]
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007574:	4659      	mov	r1, fp
 8007576:	018b      	lsls	r3, r1, #6
 8007578:	4651      	mov	r1, sl
 800757a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800757e:	4651      	mov	r1, sl
 8007580:	018a      	lsls	r2, r1, #6
 8007582:	46d4      	mov	ip, sl
 8007584:	ebb2 080c 	subs.w	r8, r2, ip
 8007588:	4659      	mov	r1, fp
 800758a:	eb63 0901 	sbc.w	r9, r3, r1
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	f04f 0300 	mov.w	r3, #0
 8007596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800759a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800759e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075a2:	4690      	mov	r8, r2
 80075a4:	4699      	mov	r9, r3
 80075a6:	4623      	mov	r3, r4
 80075a8:	eb18 0303 	adds.w	r3, r8, r3
 80075ac:	60bb      	str	r3, [r7, #8]
 80075ae:	462b      	mov	r3, r5
 80075b0:	eb49 0303 	adc.w	r3, r9, r3
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	f04f 0200 	mov.w	r2, #0
 80075ba:	f04f 0300 	mov.w	r3, #0
 80075be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80075c2:	4629      	mov	r1, r5
 80075c4:	024b      	lsls	r3, r1, #9
 80075c6:	4620      	mov	r0, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	4604      	mov	r4, r0
 80075cc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80075d0:	4601      	mov	r1, r0
 80075d2:	024a      	lsls	r2, r1, #9
 80075d4:	4610      	mov	r0, r2
 80075d6:	4619      	mov	r1, r3
 80075d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075da:	2200      	movs	r2, #0
 80075dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80075de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075e4:	f7f9 fdd6 	bl	8001194 <__aeabi_uldivmod>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4613      	mov	r3, r2
 80075ee:	647b      	str	r3, [r7, #68]	; 0x44
 80075f0:	e055      	b.n	800769e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	2200      	movs	r2, #0
 80075f6:	623b      	str	r3, [r7, #32]
 80075f8:	627a      	str	r2, [r7, #36]	; 0x24
 80075fa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80075fe:	4642      	mov	r2, r8
 8007600:	464b      	mov	r3, r9
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f04f 0100 	mov.w	r1, #0
 800760a:	0159      	lsls	r1, r3, #5
 800760c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007610:	0150      	lsls	r0, r2, #5
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	46c4      	mov	ip, r8
 8007618:	ebb2 0a0c 	subs.w	sl, r2, ip
 800761c:	4640      	mov	r0, r8
 800761e:	4649      	mov	r1, r9
 8007620:	468c      	mov	ip, r1
 8007622:	eb63 0b0c 	sbc.w	fp, r3, ip
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	f04f 0300 	mov.w	r3, #0
 800762e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007632:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007636:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800763a:	ebb2 040a 	subs.w	r4, r2, sl
 800763e:	eb63 050b 	sbc.w	r5, r3, fp
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	00eb      	lsls	r3, r5, #3
 800764c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007650:	00e2      	lsls	r2, r4, #3
 8007652:	4614      	mov	r4, r2
 8007654:	461d      	mov	r5, r3
 8007656:	4603      	mov	r3, r0
 8007658:	18e3      	adds	r3, r4, r3
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	460b      	mov	r3, r1
 800765e:	eb45 0303 	adc.w	r3, r5, r3
 8007662:	607b      	str	r3, [r7, #4]
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007670:	4629      	mov	r1, r5
 8007672:	028b      	lsls	r3, r1, #10
 8007674:	4620      	mov	r0, r4
 8007676:	4629      	mov	r1, r5
 8007678:	4604      	mov	r4, r0
 800767a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800767e:	4601      	mov	r1, r0
 8007680:	028a      	lsls	r2, r1, #10
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007688:	2200      	movs	r2, #0
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	61fa      	str	r2, [r7, #28]
 800768e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007692:	f7f9 fd7f 	bl	8001194 <__aeabi_uldivmod>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4613      	mov	r3, r2
 800769c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800769e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80076a2:	e00d      	b.n	80076c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80076a4:	4b09      	ldr	r3, [pc, #36]	; (80076cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	0b5b      	lsrs	r3, r3, #13
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	3301      	adds	r3, #1
 80076b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80076be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3748      	adds	r7, #72	; 0x48
 80076c6:	46bd      	mov	sp, r7
 80076c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076cc:	40023800 	.word	0x40023800
 80076d0:	00f42400 	.word	0x00f42400
 80076d4:	007a1200 	.word	0x007a1200
 80076d8:	08011bd0 	.word	0x08011bd0

080076dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076e0:	4b02      	ldr	r3, [pc, #8]	; (80076ec <HAL_RCC_GetHCLKFreq+0x10>)
 80076e2:	681b      	ldr	r3, [r3, #0]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bc80      	pop	{r7}
 80076ea:	4770      	bx	lr
 80076ec:	20000394 	.word	0x20000394

080076f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076f4:	f7ff fff2 	bl	80076dc <HAL_RCC_GetHCLKFreq>
 80076f8:	4602      	mov	r2, r0
 80076fa:	4b05      	ldr	r3, [pc, #20]	; (8007710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	0a1b      	lsrs	r3, r3, #8
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	4903      	ldr	r1, [pc, #12]	; (8007714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007706:	5ccb      	ldrb	r3, [r1, r3]
 8007708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800770c:	4618      	mov	r0, r3
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40023800 	.word	0x40023800
 8007714:	08011bec 	.word	0x08011bec

08007718 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007720:	2300      	movs	r3, #0
 8007722:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007724:	4b29      	ldr	r3, [pc, #164]	; (80077cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d12c      	bne.n	800778a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007730:	4b26      	ldr	r3, [pc, #152]	; (80077cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800773c:	4b24      	ldr	r3, [pc, #144]	; (80077d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	e016      	b.n	8007776 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007748:	4b20      	ldr	r3, [pc, #128]	; (80077cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	4a1f      	ldr	r2, [pc, #124]	; (80077cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800774e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007752:	6253      	str	r3, [r2, #36]	; 0x24
 8007754:	4b1d      	ldr	r3, [pc, #116]	; (80077cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007760:	4b1b      	ldr	r3, [pc, #108]	; (80077d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007768:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800776a:	4b18      	ldr	r3, [pc, #96]	; (80077cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	4a17      	ldr	r2, [pc, #92]	; (80077cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007774:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800777c:	d105      	bne.n	800778a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007784:	d101      	bne.n	800778a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8007786:	2301      	movs	r3, #1
 8007788:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d105      	bne.n	800779c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8007790:	4b10      	ldr	r3, [pc, #64]	; (80077d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a0f      	ldr	r2, [pc, #60]	; (80077d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007796:	f043 0304 	orr.w	r3, r3, #4
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f023 0201 	bic.w	r2, r3, #1
 80077a4:	490b      	ldr	r1, [pc, #44]	; (80077d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80077ac:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d001      	beq.n	80077be <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	371c      	adds	r7, #28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bc80      	pop	{r7}
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40023800 	.word	0x40023800
 80077d0:	40007000 	.word	0x40007000
 80077d4:	40023c00 	.word	0x40023c00

080077d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e06e      	b.n	80078c8 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d108      	bne.n	8007804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077fa:	d009      	beq.n	8007810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	61da      	str	r2, [r3, #28]
 8007802:	e005      	b.n	8007810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d106      	bne.n	8007830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fb fe88 	bl	8003540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007846:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007894:	ea42 0103 	orr.w	r1, r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	0c1a      	lsrs	r2, r3, #16
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f002 0204 	and.w	r2, r2, #4
 80078b6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	4613      	mov	r3, r2
 80078de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d101      	bne.n	80078f2 <HAL_SPI_Transmit+0x22>
 80078ee:	2302      	movs	r3, #2
 80078f0:	e126      	b.n	8007b40 <HAL_SPI_Transmit+0x270>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078fa:	f7fc fa75 	bl	8003de8 <HAL_GetTick>
 80078fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b01      	cmp	r3, #1
 800790e:	d002      	beq.n	8007916 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007910:	2302      	movs	r3, #2
 8007912:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007914:	e10b      	b.n	8007b2e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_SPI_Transmit+0x52>
 800791c:	88fb      	ldrh	r3, [r7, #6]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d102      	bne.n	8007928 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007926:	e102      	b.n	8007b2e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2203      	movs	r2, #3
 800792c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	88fa      	ldrh	r2, [r7, #6]
 8007946:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800796e:	d10f      	bne.n	8007990 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800798e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799a:	2b40      	cmp	r3, #64	; 0x40
 800799c:	d007      	beq.n	80079ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b6:	d14b      	bne.n	8007a50 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_SPI_Transmit+0xf6>
 80079c0:	8afb      	ldrh	r3, [r7, #22]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d13e      	bne.n	8007a44 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	881a      	ldrh	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	1c9a      	adds	r2, r3, #2
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079ea:	e02b      	b.n	8007a44 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d112      	bne.n	8007a20 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	881a      	ldrh	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0a:	1c9a      	adds	r2, r3, #2
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a1e:	e011      	b.n	8007a44 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a20:	f7fc f9e2 	bl	8003de8 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d803      	bhi.n	8007a38 <HAL_SPI_Transmit+0x168>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a36:	d102      	bne.n	8007a3e <HAL_SPI_Transmit+0x16e>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d102      	bne.n	8007a44 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a42:	e074      	b.n	8007b2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1ce      	bne.n	80079ec <HAL_SPI_Transmit+0x11c>
 8007a4e:	e04c      	b.n	8007aea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HAL_SPI_Transmit+0x18e>
 8007a58:	8afb      	ldrh	r3, [r7, #22]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d140      	bne.n	8007ae0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	7812      	ldrb	r2, [r2, #0]
 8007a6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a84:	e02c      	b.n	8007ae0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d113      	bne.n	8007abc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	330c      	adds	r3, #12
 8007a9e:	7812      	ldrb	r2, [r2, #0]
 8007aa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	86da      	strh	r2, [r3, #54]	; 0x36
 8007aba:	e011      	b.n	8007ae0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007abc:	f7fc f994 	bl	8003de8 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d803      	bhi.n	8007ad4 <HAL_SPI_Transmit+0x204>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad2:	d102      	bne.n	8007ada <HAL_SPI_Transmit+0x20a>
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ade:	e026      	b.n	8007b2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1cd      	bne.n	8007a86 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fcd0 	bl	8008494 <SPI_EndRxTxTransaction>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2220      	movs	r2, #32
 8007afe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b08:	2300      	movs	r3, #0
 8007b0a:	613b      	str	r3, [r7, #16]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	613b      	str	r3, [r7, #16]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	77fb      	strb	r3, [r7, #31]
 8007b2a:	e000      	b.n	8007b2e <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3720      	adds	r7, #32
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b64:	d112      	bne.n	8007b8c <HAL_SPI_Receive+0x44>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10e      	bne.n	8007b8c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2204      	movs	r2, #4
 8007b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b76:	88fa      	ldrh	r2, [r7, #6]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	68b9      	ldr	r1, [r7, #8]
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 f8f1 	bl	8007d6a <HAL_SPI_TransmitReceive>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	e0ea      	b.n	8007d62 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d101      	bne.n	8007b9a <HAL_SPI_Receive+0x52>
 8007b96:	2302      	movs	r3, #2
 8007b98:	e0e3      	b.n	8007d62 <HAL_SPI_Receive+0x21a>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ba2:	f7fc f921 	bl	8003de8 <HAL_GetTick>
 8007ba6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d002      	beq.n	8007bba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bb8:	e0ca      	b.n	8007d50 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <HAL_SPI_Receive+0x7e>
 8007bc0:	88fb      	ldrh	r3, [r7, #6]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d102      	bne.n	8007bcc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bca:	e0c1      	b.n	8007d50 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2204      	movs	r2, #4
 8007bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	88fa      	ldrh	r2, [r7, #6]
 8007be4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	88fa      	ldrh	r2, [r7, #6]
 8007bea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c12:	d10f      	bne.n	8007c34 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c32:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3e:	2b40      	cmp	r3, #64	; 0x40
 8007c40:	d007      	beq.n	8007c52 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c50:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d162      	bne.n	8007d20 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c5a:	e02e      	b.n	8007cba <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d115      	bne.n	8007c96 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f103 020c 	add.w	r2, r3, #12
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	7812      	ldrb	r2, [r2, #0]
 8007c78:	b2d2      	uxtb	r2, r2
 8007c7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c94:	e011      	b.n	8007cba <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c96:	f7fc f8a7 	bl	8003de8 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d803      	bhi.n	8007cae <HAL_SPI_Receive+0x166>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cac:	d102      	bne.n	8007cb4 <HAL_SPI_Receive+0x16c>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d102      	bne.n	8007cba <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007cb8:	e04a      	b.n	8007d50 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1cb      	bne.n	8007c5c <HAL_SPI_Receive+0x114>
 8007cc4:	e031      	b.n	8007d2a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d113      	bne.n	8007cfc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	b292      	uxth	r2, r2
 8007ce0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce6:	1c9a      	adds	r2, r3, #2
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cfa:	e011      	b.n	8007d20 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cfc:	f7fc f874 	bl	8003de8 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d803      	bhi.n	8007d14 <HAL_SPI_Receive+0x1cc>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d12:	d102      	bne.n	8007d1a <HAL_SPI_Receive+0x1d2>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d102      	bne.n	8007d20 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d1e:	e017      	b.n	8007d50 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1cd      	bne.n	8007cc6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 fb4a 	bl	80083c8 <SPI_EndRxTransaction>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	75fb      	strb	r3, [r7, #23]
 8007d4c:	e000      	b.n	8007d50 <HAL_SPI_Receive+0x208>
  }

error :
 8007d4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b08c      	sub	sp, #48	; 0x30
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d101      	bne.n	8007d90 <HAL_SPI_TransmitReceive+0x26>
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e18a      	b.n	80080a6 <HAL_SPI_TransmitReceive+0x33c>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d98:	f7fc f826 	bl	8003de8 <HAL_GetTick>
 8007d9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007dae:	887b      	ldrh	r3, [r7, #2]
 8007db0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007db2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d00f      	beq.n	8007dda <HAL_SPI_TransmitReceive+0x70>
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dc0:	d107      	bne.n	8007dd2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d103      	bne.n	8007dd2 <HAL_SPI_TransmitReceive+0x68>
 8007dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d003      	beq.n	8007dda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007dd8:	e15b      	b.n	8008092 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <HAL_SPI_TransmitReceive+0x82>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <HAL_SPI_TransmitReceive+0x82>
 8007de6:	887b      	ldrh	r3, [r7, #2]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d103      	bne.n	8007df4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007df2:	e14e      	b.n	8008092 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	d003      	beq.n	8007e08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2205      	movs	r2, #5
 8007e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	887a      	ldrh	r2, [r7, #2]
 8007e18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	887a      	ldrh	r2, [r7, #2]
 8007e1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	887a      	ldrh	r2, [r7, #2]
 8007e2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	887a      	ldrh	r2, [r7, #2]
 8007e30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e48:	2b40      	cmp	r3, #64	; 0x40
 8007e4a:	d007      	beq.n	8007e5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e64:	d178      	bne.n	8007f58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <HAL_SPI_TransmitReceive+0x10a>
 8007e6e:	8b7b      	ldrh	r3, [r7, #26]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d166      	bne.n	8007f42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	881a      	ldrh	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	1c9a      	adds	r2, r3, #2
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e98:	e053      	b.n	8007f42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d11b      	bne.n	8007ee0 <HAL_SPI_TransmitReceive+0x176>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d016      	beq.n	8007ee0 <HAL_SPI_TransmitReceive+0x176>
 8007eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d113      	bne.n	8007ee0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebc:	881a      	ldrh	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec8:	1c9a      	adds	r2, r3, #2
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d119      	bne.n	8007f22 <HAL_SPI_TransmitReceive+0x1b8>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d014      	beq.n	8007f22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	b292      	uxth	r2, r2
 8007f04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0a:	1c9a      	adds	r2, r3, #2
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f22:	f7fb ff61 	bl	8003de8 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d807      	bhi.n	8007f42 <HAL_SPI_TransmitReceive+0x1d8>
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f38:	d003      	beq.n	8007f42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f40:	e0a7      	b.n	8008092 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1a6      	bne.n	8007e9a <HAL_SPI_TransmitReceive+0x130>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1a1      	bne.n	8007e9a <HAL_SPI_TransmitReceive+0x130>
 8007f56:	e07c      	b.n	8008052 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <HAL_SPI_TransmitReceive+0x1fc>
 8007f60:	8b7b      	ldrh	r3, [r7, #26]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d16b      	bne.n	800803e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	330c      	adds	r3, #12
 8007f70:	7812      	ldrb	r2, [r2, #0]
 8007f72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f8c:	e057      	b.n	800803e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d11c      	bne.n	8007fd6 <HAL_SPI_TransmitReceive+0x26c>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d017      	beq.n	8007fd6 <HAL_SPI_TransmitReceive+0x26c>
 8007fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d114      	bne.n	8007fd6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	330c      	adds	r3, #12
 8007fb6:	7812      	ldrb	r2, [r2, #0]
 8007fb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d119      	bne.n	8008018 <HAL_SPI_TransmitReceive+0x2ae>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d014      	beq.n	8008018 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	b2d2      	uxtb	r2, r2
 8007ffa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800800a:	b29b      	uxth	r3, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008014:	2301      	movs	r3, #1
 8008016:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008018:	f7fb fee6 	bl	8003de8 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008024:	429a      	cmp	r2, r3
 8008026:	d803      	bhi.n	8008030 <HAL_SPI_TransmitReceive+0x2c6>
 8008028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d102      	bne.n	8008036 <HAL_SPI_TransmitReceive+0x2cc>
 8008030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008032:	2b00      	cmp	r3, #0
 8008034:	d103      	bne.n	800803e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800803c:	e029      	b.n	8008092 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008042:	b29b      	uxth	r3, r3
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1a2      	bne.n	8007f8e <HAL_SPI_TransmitReceive+0x224>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d19d      	bne.n	8007f8e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 fa1c 	bl	8008494 <SPI_EndRxTxTransaction>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d006      	beq.n	8008070 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2220      	movs	r2, #32
 800806c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800806e:	e010      	b.n	8008092 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10b      	bne.n	8008090 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	e000      	b.n	8008092 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008090:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80080a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3730      	adds	r7, #48	; 0x30
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
	...

080080b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	099b      	lsrs	r3, r3, #6
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10f      	bne.n	80080f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	099b      	lsrs	r3, r3, #6
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d004      	beq.n	80080f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
    return;
 80080f2:	e0be      	b.n	8008272 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	085b      	lsrs	r3, r3, #1
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <HAL_SPI_IRQHandler+0x66>
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	09db      	lsrs	r3, r3, #7
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d004      	beq.n	8008116 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
    return;
 8008114:	e0ad      	b.n	8008272 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <HAL_SPI_IRQHandler+0x80>
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	099b      	lsrs	r3, r3, #6
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80a1 	beq.w	8008272 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 809a 	beq.w	8008272 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	099b      	lsrs	r3, r3, #6
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d023      	beq.n	8008192 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b03      	cmp	r3, #3
 8008154:	d011      	beq.n	800817a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815a:	f043 0204 	orr.w	r2, r3, #4
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	e00b      	b.n	8008192 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800817a:	2300      	movs	r3, #0
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	693b      	ldr	r3, [r7, #16]
        return;
 8008190:	e06f      	b.n	8008272 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d014      	beq.n	80081c8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a2:	f043 0201 	orr.w	r2, r3, #1
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081aa:	2300      	movs	r3, #0
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d04f      	beq.n	8008270 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d104      	bne.n	80081fc <HAL_SPI_IRQHandler+0x14c>
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d034      	beq.n	8008266 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0203 	bic.w	r2, r2, #3
 800820a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d011      	beq.n	8008238 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008218:	4a17      	ldr	r2, [pc, #92]	; (8008278 <HAL_SPI_IRQHandler+0x1c8>)
 800821a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008220:	4618      	mov	r0, r3
 8008222:	f7fb ff1a 	bl	800405a <HAL_DMA_Abort_IT>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008230:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800823c:	2b00      	cmp	r3, #0
 800823e:	d016      	beq.n	800826e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008244:	4a0c      	ldr	r2, [pc, #48]	; (8008278 <HAL_SPI_IRQHandler+0x1c8>)
 8008246:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800824c:	4618      	mov	r0, r3
 800824e:	f7fb ff04 	bl	800405a <HAL_DMA_Abort_IT>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008264:	e003      	b.n	800826e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f808 	bl	800827c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800826c:	e000      	b.n	8008270 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800826e:	bf00      	nop
    return;
 8008270:	bf00      	nop
  }
}
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	0800828f 	.word	0x0800828f

0800827c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr

0800828e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f7ff ffe7 	bl	800827c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b088      	sub	sp, #32
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	4613      	mov	r3, r2
 80082c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082c8:	f7fb fd8e 	bl	8003de8 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	1a9b      	subs	r3, r3, r2
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	4413      	add	r3, r2
 80082d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082d8:	f7fb fd86 	bl	8003de8 <HAL_GetTick>
 80082dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082de:	4b39      	ldr	r3, [pc, #228]	; (80083c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	015b      	lsls	r3, r3, #5
 80082e4:	0d1b      	lsrs	r3, r3, #20
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	fb02 f303 	mul.w	r3, r2, r3
 80082ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082ee:	e054      	b.n	800839a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d050      	beq.n	800839a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082f8:	f7fb fd76 	bl	8003de8 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	429a      	cmp	r2, r3
 8008306:	d902      	bls.n	800830e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d13d      	bne.n	800838a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800831c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008326:	d111      	bne.n	800834c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008330:	d004      	beq.n	800833c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800833a:	d107      	bne.n	800834c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800834a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008354:	d10f      	bne.n	8008376 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e017      	b.n	80083ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	3b01      	subs	r3, #1
 8008398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	4013      	ands	r3, r2
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	bf0c      	ite	eq
 80083aa:	2301      	moveq	r3, #1
 80083ac:	2300      	movne	r3, #0
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	461a      	mov	r2, r3
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d19b      	bne.n	80082f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3720      	adds	r7, #32
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000394 	.word	0x20000394

080083c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083dc:	d111      	bne.n	8008402 <SPI_EndRxTransaction+0x3a>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083e6:	d004      	beq.n	80083f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083f0:	d107      	bne.n	8008402 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008400:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800840a:	d12a      	bne.n	8008462 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008414:	d012      	beq.n	800843c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2200      	movs	r2, #0
 800841e:	2180      	movs	r1, #128	; 0x80
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7ff ff49 	bl	80082b8 <SPI_WaitFlagStateUntilTimeout>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d02d      	beq.n	8008488 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008430:	f043 0220 	orr.w	r2, r3, #32
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e026      	b.n	800848a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2200      	movs	r2, #0
 8008444:	2101      	movs	r1, #1
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff ff36 	bl	80082b8 <SPI_WaitFlagStateUntilTimeout>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01a      	beq.n	8008488 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008456:	f043 0220 	orr.w	r2, r3, #32
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e013      	b.n	800848a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2200      	movs	r2, #0
 800846a:	2101      	movs	r1, #1
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f7ff ff23 	bl	80082b8 <SPI_WaitFlagStateUntilTimeout>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d007      	beq.n	8008488 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847c:	f043 0220 	orr.w	r2, r3, #32
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e000      	b.n	800848a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af02      	add	r7, sp, #8
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80084a0:	4b1b      	ldr	r3, [pc, #108]	; (8008510 <SPI_EndRxTxTransaction+0x7c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a1b      	ldr	r2, [pc, #108]	; (8008514 <SPI_EndRxTxTransaction+0x80>)
 80084a6:	fba2 2303 	umull	r2, r3, r2, r3
 80084aa:	0d5b      	lsrs	r3, r3, #21
 80084ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80084b0:	fb02 f303 	mul.w	r3, r2, r3
 80084b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084be:	d112      	bne.n	80084e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2200      	movs	r2, #0
 80084c8:	2180      	movs	r1, #128	; 0x80
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7ff fef4 	bl	80082b8 <SPI_WaitFlagStateUntilTimeout>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d016      	beq.n	8008504 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084da:	f043 0220 	orr.w	r2, r3, #32
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e00f      	b.n	8008506 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fc:	2b80      	cmp	r3, #128	; 0x80
 80084fe:	d0f2      	beq.n	80084e6 <SPI_EndRxTxTransaction+0x52>
 8008500:	e000      	b.n	8008504 <SPI_EndRxTxTransaction+0x70>
        break;
 8008502:	bf00      	nop
  }

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000394 	.word	0x20000394
 8008514:	165e9f81 	.word	0x165e9f81

08008518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e031      	b.n	800858e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d106      	bne.n	8008544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fb fae6 	bl	8003b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3304      	adds	r3, #4
 8008554:	4619      	mov	r1, r3
 8008556:	4610      	mov	r0, r2
 8008558:	f000 fb3c 	bl	8008bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d001      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e03a      	b.n	8008626 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0201 	orr.w	r2, r2, #1
 80085c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d0:	d00e      	beq.n	80085f0 <HAL_TIM_Base_Start_IT+0x58>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a16      	ldr	r2, [pc, #88]	; (8008630 <HAL_TIM_Base_Start_IT+0x98>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d009      	beq.n	80085f0 <HAL_TIM_Base_Start_IT+0x58>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a14      	ldr	r2, [pc, #80]	; (8008634 <HAL_TIM_Base_Start_IT+0x9c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d004      	beq.n	80085f0 <HAL_TIM_Base_Start_IT+0x58>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a13      	ldr	r2, [pc, #76]	; (8008638 <HAL_TIM_Base_Start_IT+0xa0>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d111      	bne.n	8008614 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b06      	cmp	r3, #6
 8008600:	d010      	beq.n	8008624 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f042 0201 	orr.w	r2, r2, #1
 8008610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008612:	e007      	b.n	8008624 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f042 0201 	orr.w	r2, r2, #1
 8008622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr
 8008630:	40000400 	.word	0x40000400
 8008634:	40000800 	.word	0x40000800
 8008638:	40010800 	.word	0x40010800

0800863c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e08f      	b.n	8008770 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d106      	bne.n	800866a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7fb fa93 	bl	8003b90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2202      	movs	r2, #2
 800866e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	6812      	ldr	r2, [r2, #0]
 800867c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008680:	f023 0307 	bic.w	r3, r3, #7
 8008684:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3304      	adds	r3, #4
 800868e:	4619      	mov	r1, r3
 8008690:	4610      	mov	r0, r2
 8008692:	f000 fa9f 	bl	8008bd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086be:	f023 0303 	bic.w	r3, r3, #3
 80086c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	021b      	lsls	r3, r3, #8
 80086ce:	4313      	orrs	r3, r2
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80086dc:	f023 030c 	bic.w	r3, r3, #12
 80086e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	68da      	ldr	r2, [r3, #12]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	4313      	orrs	r3, r2
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	011a      	lsls	r2, r3, #4
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	031b      	lsls	r3, r3, #12
 800870c:	4313      	orrs	r3, r2
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	4313      	orrs	r3, r2
 8008712:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800871a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008722:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	4313      	orrs	r3, r2
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008788:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8008790:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d109      	bne.n	80087ac <HAL_TIM_Encoder_Start+0x34>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d001      	beq.n	80087a2 <HAL_TIM_Encoder_Start+0x2a>
    {
      return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e050      	b.n	8008844 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2202      	movs	r2, #2
 80087a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80087aa:	e01c      	b.n	80087e6 <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	d109      	bne.n	80087c6 <HAL_TIM_Encoder_Start+0x4e>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d001      	beq.n	80087bc <HAL_TIM_Encoder_Start+0x44>
    {
      return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e043      	b.n	8008844 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80087c4:	e00f      	b.n	80087e6 <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d102      	bne.n	80087d2 <HAL_TIM_Encoder_Start+0x5a>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d001      	beq.n	80087d6 <HAL_TIM_Encoder_Start+0x5e>
    {
      return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e036      	b.n	8008844 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2202      	movs	r2, #2
 80087da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <HAL_TIM_Encoder_Start+0x7c>
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d008      	beq.n	8008804 <HAL_TIM_Encoder_Start+0x8c>
 80087f2:	e00f      	b.n	8008814 <HAL_TIM_Encoder_Start+0x9c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2201      	movs	r2, #1
 80087fa:	2100      	movs	r1, #0
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 fae1 	bl	8008dc4 <TIM_CCxChannelCmd>
      break;
 8008802:	e016      	b.n	8008832 <HAL_TIM_Encoder_Start+0xba>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2201      	movs	r2, #1
 800880a:	2104      	movs	r1, #4
 800880c:	4618      	mov	r0, r3
 800880e:	f000 fad9 	bl	8008dc4 <TIM_CCxChannelCmd>
      break;
 8008812:	e00e      	b.n	8008832 <HAL_TIM_Encoder_Start+0xba>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2201      	movs	r2, #1
 800881a:	2100      	movs	r1, #0
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fad1 	bl	8008dc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2201      	movs	r2, #1
 8008828:	2104      	movs	r1, #4
 800882a:	4618      	mov	r0, r3
 800882c:	f000 faca 	bl	8008dc4 <TIM_CCxChannelCmd>
      break;
 8008830:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 0201 	orr.w	r2, r2, #1
 8008840:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b02      	cmp	r3, #2
 8008860:	d122      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f003 0302 	and.w	r3, r3, #2
 800886c:	2b02      	cmp	r3, #2
 800886e:	d11b      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f06f 0202 	mvn.w	r2, #2
 8008878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	f003 0303 	and.w	r3, r3, #3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f985 	bl	8008b9e <HAL_TIM_IC_CaptureCallback>
 8008894:	e005      	b.n	80088a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f978 	bl	8008b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f987 	bl	8008bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0304 	and.w	r3, r3, #4
 80088b2:	2b04      	cmp	r3, #4
 80088b4:	d122      	bne.n	80088fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0304 	and.w	r3, r3, #4
 80088c0:	2b04      	cmp	r3, #4
 80088c2:	d11b      	bne.n	80088fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f06f 0204 	mvn.w	r2, #4
 80088cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2202      	movs	r2, #2
 80088d2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f95b 	bl	8008b9e <HAL_TIM_IC_CaptureCallback>
 80088e8:	e005      	b.n	80088f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f94e 	bl	8008b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f95d 	bl	8008bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	f003 0308 	and.w	r3, r3, #8
 8008906:	2b08      	cmp	r3, #8
 8008908:	d122      	bne.n	8008950 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f003 0308 	and.w	r3, r3, #8
 8008914:	2b08      	cmp	r3, #8
 8008916:	d11b      	bne.n	8008950 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f06f 0208 	mvn.w	r2, #8
 8008920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2204      	movs	r2, #4
 8008926:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f931 	bl	8008b9e <HAL_TIM_IC_CaptureCallback>
 800893c:	e005      	b.n	800894a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f924 	bl	8008b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f933 	bl	8008bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	f003 0310 	and.w	r3, r3, #16
 800895a:	2b10      	cmp	r3, #16
 800895c:	d122      	bne.n	80089a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f003 0310 	and.w	r3, r3, #16
 8008968:	2b10      	cmp	r3, #16
 800896a:	d11b      	bne.n	80089a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f06f 0210 	mvn.w	r2, #16
 8008974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2208      	movs	r2, #8
 800897a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f907 	bl	8008b9e <HAL_TIM_IC_CaptureCallback>
 8008990:	e005      	b.n	800899e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f8fa 	bl	8008b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f909 	bl	8008bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d10e      	bne.n	80089d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d107      	bne.n	80089d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f06f 0201 	mvn.w	r2, #1
 80089c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7fa fa4c 	bl	8002e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d10e      	bne.n	80089fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b40      	cmp	r3, #64	; 0x40
 80089ea:	d107      	bne.n	80089fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8e3 	bl	8008bc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <HAL_TIM_ConfigClockSource+0x18>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e0b3      	b.n	8008b84 <HAL_TIM_ConfigClockSource+0x180>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a54:	d03e      	beq.n	8008ad4 <HAL_TIM_ConfigClockSource+0xd0>
 8008a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a5a:	f200 8087 	bhi.w	8008b6c <HAL_TIM_ConfigClockSource+0x168>
 8008a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a62:	f000 8085 	beq.w	8008b70 <HAL_TIM_ConfigClockSource+0x16c>
 8008a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a6a:	d87f      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x168>
 8008a6c:	2b70      	cmp	r3, #112	; 0x70
 8008a6e:	d01a      	beq.n	8008aa6 <HAL_TIM_ConfigClockSource+0xa2>
 8008a70:	2b70      	cmp	r3, #112	; 0x70
 8008a72:	d87b      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x168>
 8008a74:	2b60      	cmp	r3, #96	; 0x60
 8008a76:	d050      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0x116>
 8008a78:	2b60      	cmp	r3, #96	; 0x60
 8008a7a:	d877      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x168>
 8008a7c:	2b50      	cmp	r3, #80	; 0x50
 8008a7e:	d03c      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0xf6>
 8008a80:	2b50      	cmp	r3, #80	; 0x50
 8008a82:	d873      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x168>
 8008a84:	2b40      	cmp	r3, #64	; 0x40
 8008a86:	d058      	beq.n	8008b3a <HAL_TIM_ConfigClockSource+0x136>
 8008a88:	2b40      	cmp	r3, #64	; 0x40
 8008a8a:	d86f      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x168>
 8008a8c:	2b30      	cmp	r3, #48	; 0x30
 8008a8e:	d064      	beq.n	8008b5a <HAL_TIM_ConfigClockSource+0x156>
 8008a90:	2b30      	cmp	r3, #48	; 0x30
 8008a92:	d86b      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x168>
 8008a94:	2b20      	cmp	r3, #32
 8008a96:	d060      	beq.n	8008b5a <HAL_TIM_ConfigClockSource+0x156>
 8008a98:	2b20      	cmp	r3, #32
 8008a9a:	d867      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x168>
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d05c      	beq.n	8008b5a <HAL_TIM_ConfigClockSource+0x156>
 8008aa0:	2b10      	cmp	r3, #16
 8008aa2:	d05a      	beq.n	8008b5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008aa4:	e062      	b.n	8008b6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6818      	ldr	r0, [r3, #0]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	6899      	ldr	r1, [r3, #8]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	f000 f966 	bl	8008d86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ac8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	609a      	str	r2, [r3, #8]
      break;
 8008ad2:	e04e      	b.n	8008b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6818      	ldr	r0, [r3, #0]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	6899      	ldr	r1, [r3, #8]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f000 f94f 	bl	8008d86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689a      	ldr	r2, [r3, #8]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008af6:	609a      	str	r2, [r3, #8]
      break;
 8008af8:	e03b      	b.n	8008b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	6859      	ldr	r1, [r3, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	461a      	mov	r2, r3
 8008b08:	f000 f8c6 	bl	8008c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2150      	movs	r1, #80	; 0x50
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 f91d 	bl	8008d52 <TIM_ITRx_SetConfig>
      break;
 8008b18:	e02b      	b.n	8008b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6818      	ldr	r0, [r3, #0]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	6859      	ldr	r1, [r3, #4]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	461a      	mov	r2, r3
 8008b28:	f000 f8e4 	bl	8008cf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2160      	movs	r1, #96	; 0x60
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f90d 	bl	8008d52 <TIM_ITRx_SetConfig>
      break;
 8008b38:	e01b      	b.n	8008b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6818      	ldr	r0, [r3, #0]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	6859      	ldr	r1, [r3, #4]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	461a      	mov	r2, r3
 8008b48:	f000 f8a6 	bl	8008c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2140      	movs	r1, #64	; 0x40
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f8fd 	bl	8008d52 <TIM_ITRx_SetConfig>
      break;
 8008b58:	e00b      	b.n	8008b72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4619      	mov	r1, r3
 8008b64:	4610      	mov	r0, r2
 8008b66:	f000 f8f4 	bl	8008d52 <TIM_ITRx_SetConfig>
        break;
 8008b6a:	e002      	b.n	8008b72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008b6c:	bf00      	nop
 8008b6e:	e000      	b.n	8008b72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008b70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bc80      	pop	{r7}
 8008b9c:	4770      	bx	lr

08008b9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bc80      	pop	{r7}
 8008bae:	4770      	bx	lr

08008bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bc80      	pop	{r7}
 8008bc0:	4770      	bx	lr

08008bc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr

08008bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bea:	d007      	beq.n	8008bfc <TIM_Base_SetConfig+0x28>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a25      	ldr	r2, [pc, #148]	; (8008c84 <TIM_Base_SetConfig+0xb0>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d003      	beq.n	8008bfc <TIM_Base_SetConfig+0x28>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a24      	ldr	r2, [pc, #144]	; (8008c88 <TIM_Base_SetConfig+0xb4>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d108      	bne.n	8008c0e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c14:	d013      	beq.n	8008c3e <TIM_Base_SetConfig+0x6a>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a1a      	ldr	r2, [pc, #104]	; (8008c84 <TIM_Base_SetConfig+0xb0>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00f      	beq.n	8008c3e <TIM_Base_SetConfig+0x6a>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a19      	ldr	r2, [pc, #100]	; (8008c88 <TIM_Base_SetConfig+0xb4>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00b      	beq.n	8008c3e <TIM_Base_SetConfig+0x6a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a18      	ldr	r2, [pc, #96]	; (8008c8c <TIM_Base_SetConfig+0xb8>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d007      	beq.n	8008c3e <TIM_Base_SetConfig+0x6a>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a17      	ldr	r2, [pc, #92]	; (8008c90 <TIM_Base_SetConfig+0xbc>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d003      	beq.n	8008c3e <TIM_Base_SetConfig+0x6a>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a16      	ldr	r2, [pc, #88]	; (8008c94 <TIM_Base_SetConfig+0xc0>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d108      	bne.n	8008c50 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	615a      	str	r2, [r3, #20]
}
 8008c7a:	bf00      	nop
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40010800 	.word	0x40010800
 8008c90:	40010c00 	.word	0x40010c00
 8008c94:	40011000 	.word	0x40011000

08008c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	f023 0201 	bic.w	r2, r3, #1
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	011b      	lsls	r3, r3, #4
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f023 030a 	bic.w	r3, r3, #10
 8008cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	621a      	str	r2, [r3, #32]
}
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bc80      	pop	{r7}
 8008cf2:	4770      	bx	lr

08008cf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	f023 0210 	bic.w	r2, r3, #16
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	031b      	lsls	r3, r3, #12
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	011b      	lsls	r3, r3, #4
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	621a      	str	r2, [r3, #32]
}
 8008d48:	bf00      	nop
 8008d4a:	371c      	adds	r7, #28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr

08008d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	f043 0307 	orr.w	r3, r3, #7
 8008d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	609a      	str	r2, [r3, #8]
}
 8008d7c:	bf00      	nop
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bc80      	pop	{r7}
 8008d84:	4770      	bx	lr

08008d86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b087      	sub	sp, #28
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	607a      	str	r2, [r7, #4]
 8008d92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008da0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	021a      	lsls	r2, r3, #8
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	431a      	orrs	r2, r3
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	609a      	str	r2, [r3, #8]
}
 8008dba:	bf00      	nop
 8008dbc:	371c      	adds	r7, #28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr

08008dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	f003 031f 	and.w	r3, r3, #31
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6a1a      	ldr	r2, [r3, #32]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	43db      	mvns	r3, r3
 8008de6:	401a      	ands	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a1a      	ldr	r2, [r3, #32]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f003 031f 	and.w	r3, r3, #31
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	621a      	str	r2, [r3, #32]
}
 8008e02:	bf00      	nop
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bc80      	pop	{r7}
 8008e0a:	4770      	bx	lr

08008e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d101      	bne.n	8008e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e20:	2302      	movs	r3, #2
 8008e22:	e046      	b.n	8008eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e66:	d00e      	beq.n	8008e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a13      	ldr	r2, [pc, #76]	; (8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d009      	beq.n	8008e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a12      	ldr	r2, [pc, #72]	; (8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d004      	beq.n	8008e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a10      	ldr	r2, [pc, #64]	; (8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d10c      	bne.n	8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr
 8008ebc:	40000400 	.word	0x40000400
 8008ec0:	40000800 	.word	0x40000800
 8008ec4:	40010800 	.word	0x40010800

08008ec8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ed8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008edc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr

08008ef4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008efc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008f00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	43db      	mvns	r3, r3
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	4013      	ands	r3, r2
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bc80      	pop	{r7}
 8008f26:	4770      	bx	lr

08008f28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008f28:	b084      	sub	sp, #16
 8008f2a:	b480      	push	{r7}
 8008f2c:	b083      	sub	sp, #12
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	f107 0014 	add.w	r0, r7, #20
 8008f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bc80      	pop	{r7}
 8008f64:	b004      	add	sp, #16
 8008f66:	4770      	bx	lr

08008f68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b09b      	sub	sp, #108	; 0x6c
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	78db      	ldrb	r3, [r3, #3]
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d81f      	bhi.n	8008fda <USB_ActivateEndpoint+0x72>
 8008f9a:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <USB_ActivateEndpoint+0x38>)
 8008f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa0:	08008fb1 	.word	0x08008fb1
 8008fa4:	08008fcd 	.word	0x08008fcd
 8008fa8:	08008fe3 	.word	0x08008fe3
 8008fac:	08008fbf 	.word	0x08008fbf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008fb0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008fb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fb8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008fbc:	e012      	b.n	8008fe4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008fbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008fc2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008fc6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008fca:	e00b      	b.n	8008fe4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008fcc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008fd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008fd4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008fd8:	e004      	b.n	8008fe4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008fe0:	e000      	b.n	8008fe4 <USB_ActivateEndpoint+0x7c>
      break;
 8008fe2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	441a      	add	r2, r3
 8008fee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009002:	b29b      	uxth	r3, r3
 8009004:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	b29b      	uxth	r3, r3
 8009014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901c:	b29a      	uxth	r2, r3
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	b29b      	uxth	r3, r3
 8009024:	4313      	orrs	r3, r2
 8009026:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	441a      	add	r2, r3
 8009034:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800903c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009048:	b29b      	uxth	r3, r3
 800904a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	7b1b      	ldrb	r3, [r3, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	f040 8149 	bne.w	80092e8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	785b      	ldrb	r3, [r3, #1]
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 8084 	beq.w	8009168 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800906a:	b29b      	uxth	r3, r3
 800906c:	461a      	mov	r2, r3
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	4413      	add	r3, r2
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	011a      	lsls	r2, r3, #4
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009082:	613b      	str	r3, [r7, #16]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	88db      	ldrh	r3, [r3, #6]
 8009088:	085b      	lsrs	r3, r3, #1
 800908a:	b29b      	uxth	r3, r3
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	b29a      	uxth	r2, r3
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	81fb      	strh	r3, [r7, #14]
 80090a2:	89fb      	ldrh	r3, [r7, #14]
 80090a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d01b      	beq.n	80090e4 <USB_ActivateEndpoint+0x17c>
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c2:	81bb      	strh	r3, [r7, #12]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	441a      	add	r2, r3
 80090ce:	89bb      	ldrh	r3, [r7, #12]
 80090d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	78db      	ldrb	r3, [r3, #3]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d020      	beq.n	800912e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009102:	813b      	strh	r3, [r7, #8]
 8009104:	893b      	ldrh	r3, [r7, #8]
 8009106:	f083 0320 	eor.w	r3, r3, #32
 800910a:	813b      	strh	r3, [r7, #8]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	441a      	add	r2, r3
 8009116:	893b      	ldrh	r3, [r7, #8]
 8009118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800911c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009128:	b29b      	uxth	r3, r3
 800912a:	8013      	strh	r3, [r2, #0]
 800912c:	e27f      	b.n	800962e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009144:	817b      	strh	r3, [r7, #10]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	441a      	add	r2, r3
 8009150:	897b      	ldrh	r3, [r7, #10]
 8009152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800915a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800915e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009162:	b29b      	uxth	r3, r3
 8009164:	8013      	strh	r3, [r2, #0]
 8009166:	e262      	b.n	800962e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009172:	b29b      	uxth	r3, r3
 8009174:	461a      	mov	r2, r3
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	4413      	add	r3, r2
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	011a      	lsls	r2, r3, #4
 8009182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009184:	4413      	add	r3, r2
 8009186:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800918a:	62bb      	str	r3, [r7, #40]	; 0x28
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	88db      	ldrh	r3, [r3, #6]
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	b29a      	uxth	r2, r3
 8009198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	461a      	mov	r2, r3
 80091aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ac:	4413      	add	r3, r2
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	011a      	lsls	r2, r3, #4
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	4413      	add	r3, r2
 80091ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091be:	623b      	str	r3, [r7, #32]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d112      	bne.n	80091ee <USB_ActivateEndpoint+0x286>
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	801a      	strh	r2, [r3, #0]
 80091d8:	6a3b      	ldr	r3, [r7, #32]
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	801a      	strh	r2, [r3, #0]
 80091ec:	e02f      	b.n	800924e <USB_ActivateEndpoint+0x2e6>
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b3e      	cmp	r3, #62	; 0x3e
 80091f4:	d813      	bhi.n	800921e <USB_ActivateEndpoint+0x2b6>
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	085b      	lsrs	r3, r3, #1
 80091fc:	663b      	str	r3, [r7, #96]	; 0x60
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <USB_ActivateEndpoint+0x2a8>
 800920a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800920c:	3301      	adds	r3, #1
 800920e:	663b      	str	r3, [r7, #96]	; 0x60
 8009210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009212:	b29b      	uxth	r3, r3
 8009214:	029b      	lsls	r3, r3, #10
 8009216:	b29a      	uxth	r2, r3
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	801a      	strh	r2, [r3, #0]
 800921c:	e017      	b.n	800924e <USB_ActivateEndpoint+0x2e6>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	095b      	lsrs	r3, r3, #5
 8009224:	663b      	str	r3, [r7, #96]	; 0x60
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	f003 031f 	and.w	r3, r3, #31
 800922e:	2b00      	cmp	r3, #0
 8009230:	d102      	bne.n	8009238 <USB_ActivateEndpoint+0x2d0>
 8009232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009234:	3b01      	subs	r3, #1
 8009236:	663b      	str	r3, [r7, #96]	; 0x60
 8009238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800923a:	b29b      	uxth	r3, r3
 800923c:	029b      	lsls	r3, r3, #10
 800923e:	b29b      	uxth	r3, r3
 8009240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009248:	b29a      	uxth	r2, r3
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	83fb      	strh	r3, [r7, #30]
 800925c:	8bfb      	ldrh	r3, [r7, #30]
 800925e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d01b      	beq.n	800929e <USB_ActivateEndpoint+0x336>
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927c:	83bb      	strh	r3, [r7, #28]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	441a      	add	r2, r3
 8009288:	8bbb      	ldrh	r3, [r7, #28]
 800928a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800928e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800929a:	b29b      	uxth	r3, r3
 800929c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b4:	837b      	strh	r3, [r7, #26]
 80092b6:	8b7b      	ldrh	r3, [r7, #26]
 80092b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80092bc:	837b      	strh	r3, [r7, #26]
 80092be:	8b7b      	ldrh	r3, [r7, #26]
 80092c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80092c4:	837b      	strh	r3, [r7, #26]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	441a      	add	r2, r3
 80092d0:	8b7b      	ldrh	r3, [r7, #26]
 80092d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	8013      	strh	r3, [r2, #0]
 80092e6:	e1a2      	b.n	800962e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	441a      	add	r2, r3
 800930c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009318:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800931c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009320:	b29b      	uxth	r3, r3
 8009322:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	65bb      	str	r3, [r7, #88]	; 0x58
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800932e:	b29b      	uxth	r3, r3
 8009330:	461a      	mov	r2, r3
 8009332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009334:	4413      	add	r3, r2
 8009336:	65bb      	str	r3, [r7, #88]	; 0x58
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	011a      	lsls	r2, r3, #4
 800933e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009340:	4413      	add	r3, r2
 8009342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009346:	657b      	str	r3, [r7, #84]	; 0x54
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	891b      	ldrh	r3, [r3, #8]
 800934c:	085b      	lsrs	r3, r3, #1
 800934e:	b29b      	uxth	r3, r3
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	b29a      	uxth	r2, r3
 8009354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009356:	801a      	strh	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	653b      	str	r3, [r7, #80]	; 0x50
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009362:	b29b      	uxth	r3, r3
 8009364:	461a      	mov	r2, r3
 8009366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009368:	4413      	add	r3, r2
 800936a:	653b      	str	r3, [r7, #80]	; 0x50
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	011a      	lsls	r2, r3, #4
 8009372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009374:	4413      	add	r3, r2
 8009376:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800937a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	895b      	ldrh	r3, [r3, #10]
 8009380:	085b      	lsrs	r3, r3, #1
 8009382:	b29b      	uxth	r3, r3
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	b29a      	uxth	r2, r3
 8009388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	785b      	ldrb	r3, [r3, #1]
 8009390:	2b00      	cmp	r3, #0
 8009392:	f040 8091 	bne.w	80094b8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80093a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80093a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d01b      	beq.n	80093e6 <USB_ActivateEndpoint+0x47e>
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	441a      	add	r2, r3
 80093d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80093d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	873b      	strh	r3, [r7, #56]	; 0x38
 80093f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d01b      	beq.n	8009436 <USB_ActivateEndpoint+0x4ce>
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	b29b      	uxth	r3, r3
 800940c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009414:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	441a      	add	r2, r3
 8009420:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800942a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800942e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009432:	b29b      	uxth	r3, r3
 8009434:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	b29b      	uxth	r3, r3
 8009444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800944c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800944e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009450:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009454:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009456:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009458:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800945c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	441a      	add	r2, r3
 8009468:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800946a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800946e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800947a:	b29b      	uxth	r3, r3
 800947c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	b29b      	uxth	r3, r3
 800948c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009494:	867b      	strh	r3, [r7, #50]	; 0x32
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	441a      	add	r2, r3
 80094a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80094a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	8013      	strh	r3, [r2, #0]
 80094b6:	e0ba      	b.n	800962e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80094c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80094cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d01d      	beq.n	8009510 <USB_ActivateEndpoint+0x5a8>
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	441a      	add	r2, r3
 80094f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80094fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800950c:	b29b      	uxth	r3, r3
 800950e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009520:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01d      	beq.n	8009568 <USB_ActivateEndpoint+0x600>
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	b29b      	uxth	r3, r3
 800953a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800953e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009542:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	441a      	add	r2, r3
 8009550:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800955c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009564:	b29b      	uxth	r3, r3
 8009566:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	78db      	ldrb	r3, [r3, #3]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d024      	beq.n	80095ba <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	b29b      	uxth	r3, r3
 800957e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009586:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800958a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800958e:	f083 0320 	eor.w	r3, r3, #32
 8009592:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	441a      	add	r2, r3
 80095a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80095a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	8013      	strh	r3, [r2, #0]
 80095b8:	e01d      	b.n	80095f6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	441a      	add	r2, r3
 80095de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80095e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	b29b      	uxth	r3, r3
 8009604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800960c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	441a      	add	r2, r3
 8009618:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800961a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800961e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800962a:	b29b      	uxth	r3, r3
 800962c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800962e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009632:	4618      	mov	r0, r3
 8009634:	376c      	adds	r7, #108	; 0x6c
 8009636:	46bd      	mov	sp, r7
 8009638:	bc80      	pop	{r7}
 800963a:	4770      	bx	lr

0800963c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800963c:	b480      	push	{r7}
 800963e:	b08d      	sub	sp, #52	; 0x34
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	7b1b      	ldrb	r3, [r3, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	f040 808e 	bne.w	800976c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	785b      	ldrb	r3, [r3, #1]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d044      	beq.n	80096e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	81bb      	strh	r3, [r7, #12]
 8009666:	89bb      	ldrh	r3, [r7, #12]
 8009668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01b      	beq.n	80096a8 <USB_DeactivateEndpoint+0x6c>
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	b29b      	uxth	r3, r3
 800967e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009686:	817b      	strh	r3, [r7, #10]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	441a      	add	r2, r3
 8009692:	897b      	ldrh	r3, [r7, #10]
 8009694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800969c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096be:	813b      	strh	r3, [r7, #8]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	441a      	add	r2, r3
 80096ca:	893b      	ldrh	r3, [r7, #8]
 80096cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096dc:	b29b      	uxth	r3, r3
 80096de:	8013      	strh	r3, [r2, #0]
 80096e0:	e192      	b.n	8009a08 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	827b      	strh	r3, [r7, #18]
 80096f0:	8a7b      	ldrh	r3, [r7, #18]
 80096f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01b      	beq.n	8009732 <USB_DeactivateEndpoint+0xf6>
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	b29b      	uxth	r3, r3
 8009708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800970c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009710:	823b      	strh	r3, [r7, #16]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	441a      	add	r2, r3
 800971c:	8a3b      	ldrh	r3, [r7, #16]
 800971e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800972a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800972e:	b29b      	uxth	r3, r3
 8009730:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4413      	add	r3, r2
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	b29b      	uxth	r3, r3
 8009740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009748:	81fb      	strh	r3, [r7, #14]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	441a      	add	r2, r3
 8009754:	89fb      	ldrh	r3, [r7, #14]
 8009756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800975a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800975e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009766:	b29b      	uxth	r3, r3
 8009768:	8013      	strh	r3, [r2, #0]
 800976a:	e14d      	b.n	8009a08 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f040 80a5 	bne.w	80098c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	843b      	strh	r3, [r7, #32]
 8009784:	8c3b      	ldrh	r3, [r7, #32]
 8009786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d01b      	beq.n	80097c6 <USB_DeactivateEndpoint+0x18a>
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	b29b      	uxth	r3, r3
 800979c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a4:	83fb      	strh	r3, [r7, #30]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	441a      	add	r2, r3
 80097b0:	8bfb      	ldrh	r3, [r7, #30]
 80097b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	881b      	ldrh	r3, [r3, #0]
 80097d2:	83bb      	strh	r3, [r7, #28]
 80097d4:	8bbb      	ldrh	r3, [r7, #28]
 80097d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d01b      	beq.n	8009816 <USB_DeactivateEndpoint+0x1da>
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f4:	837b      	strh	r3, [r7, #26]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	441a      	add	r2, r3
 8009800:	8b7b      	ldrh	r3, [r7, #26]
 8009802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800980a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800980e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009812:	b29b      	uxth	r3, r3
 8009814:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29b      	uxth	r3, r3
 8009824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982c:	833b      	strh	r3, [r7, #24]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	441a      	add	r2, r3
 8009838:	8b3b      	ldrh	r3, [r7, #24]
 800983a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800983e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009846:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800984a:	b29b      	uxth	r3, r3
 800984c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	b29b      	uxth	r3, r3
 800985c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009864:	82fb      	strh	r3, [r7, #22]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	441a      	add	r2, r3
 8009870:	8afb      	ldrh	r3, [r7, #22]
 8009872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800987a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800987e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009882:	b29b      	uxth	r3, r3
 8009884:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	b29b      	uxth	r3, r3
 8009894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800989c:	82bb      	strh	r3, [r7, #20]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	441a      	add	r2, r3
 80098a8:	8abb      	ldrh	r3, [r7, #20]
 80098aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	8013      	strh	r3, [r2, #0]
 80098be:	e0a3      	b.n	8009a08 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80098ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80098d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d01b      	beq.n	8009910 <USB_DeactivateEndpoint+0x2d4>
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	441a      	add	r2, r3
 80098fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80098fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800990c:	b29b      	uxth	r3, r3
 800990e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800991e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009924:	2b00      	cmp	r3, #0
 8009926:	d01b      	beq.n	8009960 <USB_DeactivateEndpoint+0x324>
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29b      	uxth	r3, r3
 8009936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800993a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800993e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	441a      	add	r2, r3
 800994a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800994c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009958:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800995c:	b29b      	uxth	r3, r3
 800995e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009976:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	441a      	add	r2, r3
 8009982:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800998c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009994:	b29b      	uxth	r3, r3
 8009996:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	441a      	add	r2, r3
 80099ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	b29b      	uxth	r3, r3
 80099de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	441a      	add	r2, r3
 80099f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3734      	adds	r7, #52	; 0x34
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bc80      	pop	{r7}
 8009a12:	4770      	bx	lr

08009a14 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b0cc      	sub	sp, #304	; 0x130
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a22:	6018      	str	r0, [r3, #0]
 8009a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a2c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	785b      	ldrb	r3, [r3, #1]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	f041 817d 	bne.w	800ad3a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	699a      	ldr	r2, [r3, #24]
 8009a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d908      	bls.n	8009a6e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009a6c:	e007      	b.n	8009a7e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	7b1b      	ldrb	r3, [r3, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d152      	bne.n	8009b34 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6959      	ldr	r1, [r3, #20]
 8009a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	88da      	ldrh	r2, [r3, #6]
 8009aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009ab0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009ab4:	6800      	ldr	r0, [r0, #0]
 8009ab6:	f001 ff0e 	bl	800b8d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009abe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009ac2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ac6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009aca:	6812      	ldr	r2, [r2, #0]
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	4619      	mov	r1, r3
 8009ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ae4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009ae8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009aec:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8009af0:	6812      	ldr	r2, [r2, #0]
 8009af2:	440a      	add	r2, r1
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	011a      	lsls	r2, r3, #4
 8009b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	801a      	strh	r2, [r3, #0]
 8009b30:	f001 b8b5 	b.w	800ac9e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	78db      	ldrb	r3, [r3, #3]
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	f040 84c6 	bne.w	800a4d2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6a1a      	ldr	r2, [r3, #32]
 8009b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	f240 8443 	bls.w	800a3ea <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	441a      	add	r2, r3
 8009ba8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6a1a      	ldr	r2, [r3, #32]
 8009bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bd0:	1ad2      	subs	r2, r2, r3
 8009bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009be2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 823e 	beq.w	800a082 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009c0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c12:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009c16:	6812      	ldr	r2, [r2, #0]
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	785b      	ldrb	r3, [r3, #1]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f040 809a 	bne.w	8009d60 <USB_EPStartXfer+0x34c>
 8009c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c38:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009c3c:	6812      	ldr	r2, [r2, #0]
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	4619      	mov	r1, r3
 8009c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c5e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8009c62:	6812      	ldr	r2, [r2, #0]
 8009c64:	440a      	add	r2, r1
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	011a      	lsls	r2, r3, #4
 8009c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4413      	add	r3, r2
 8009c82:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d122      	bne.n	8009cde <USB_EPStartXfer+0x2ca>
 8009c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	881b      	ldrh	r3, [r3, #0]
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	801a      	strh	r2, [r3, #0]
 8009cdc:	e079      	b.n	8009dd2 <USB_EPStartXfer+0x3be>
 8009cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ce2:	2b3e      	cmp	r3, #62	; 0x3e
 8009ce4:	d81b      	bhi.n	8009d1e <USB_EPStartXfer+0x30a>
 8009ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cea:	085b      	lsrs	r3, r3, #1
 8009cec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d004      	beq.n	8009d06 <USB_EPStartXfer+0x2f2>
 8009cfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d00:	3301      	adds	r3, #1
 8009d02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	029b      	lsls	r3, r3, #10
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	801a      	strh	r2, [r3, #0]
 8009d1c:	e059      	b.n	8009dd2 <USB_EPStartXfer+0x3be>
 8009d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d22:	095b      	lsrs	r3, r3, #5
 8009d24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d2c:	f003 031f 	and.w	r3, r3, #31
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d104      	bne.n	8009d3e <USB_EPStartXfer+0x32a>
 8009d34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009d3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	029b      	lsls	r3, r3, #10
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	801a      	strh	r2, [r3, #0]
 8009d5e:	e038      	b.n	8009dd2 <USB_EPStartXfer+0x3be>
 8009d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	785b      	ldrb	r3, [r3, #1]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d130      	bne.n	8009dd2 <USB_EPStartXfer+0x3be>
 8009d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	4619      	mov	r1, r3
 8009d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d86:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009d8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d8e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	440a      	add	r2, r1
 8009d96:	601a      	str	r2, [r3, #0]
 8009d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	011a      	lsls	r2, r3, #4
 8009da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009daa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4413      	add	r3, r2
 8009db2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	895b      	ldrh	r3, [r3, #10]
 8009dde:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6959      	ldr	r1, [r3, #20]
 8009dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009df8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009dfc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009e00:	6800      	ldr	r0, [r0, #0]
 8009e02:	f001 fd68 	bl	800b8d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	695a      	ldr	r2, [r3, #20]
 8009e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e16:	441a      	add	r2, r3
 8009e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6a1a      	ldr	r2, [r3, #32]
 8009e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d90f      	bls.n	8009e60 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8009e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6a1a      	ldr	r2, [r3, #32]
 8009e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e50:	1ad2      	subs	r2, r2, r3
 8009e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	621a      	str	r2, [r3, #32]
 8009e5e:	e00e      	b.n	8009e7e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8009e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6a1b      	ldr	r3, [r3, #32]
 8009e6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f040 809a 	bne.w	8009fc4 <USB_EPStartXfer+0x5b0>
 8009e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009e98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009e9c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009ea0:	6812      	ldr	r2, [r2, #0]
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009ebe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ec2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8009ec6:	6812      	ldr	r2, [r2, #0]
 8009ec8:	440a      	add	r2, r1
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	011a      	lsls	r2, r3, #4
 8009eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ede:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d122      	bne.n	8009f42 <USB_EPStartXfer+0x52e>
 8009efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	801a      	strh	r2, [r3, #0]
 8009f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f20:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	801a      	strh	r2, [r3, #0]
 8009f40:	e083      	b.n	800a04a <USB_EPStartXfer+0x636>
 8009f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f46:	2b3e      	cmp	r3, #62	; 0x3e
 8009f48:	d81b      	bhi.n	8009f82 <USB_EPStartXfer+0x56e>
 8009f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f4e:	085b      	lsrs	r3, r3, #1
 8009f50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d004      	beq.n	8009f6a <USB_EPStartXfer+0x556>
 8009f60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009f64:	3301      	adds	r3, #1
 8009f66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009f6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	029b      	lsls	r3, r3, #10
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	801a      	strh	r2, [r3, #0]
 8009f80:	e063      	b.n	800a04a <USB_EPStartXfer+0x636>
 8009f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f86:	095b      	lsrs	r3, r3, #5
 8009f88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f90:	f003 031f 	and.w	r3, r3, #31
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d104      	bne.n	8009fa2 <USB_EPStartXfer+0x58e>
 8009f98:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009fa2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	029b      	lsls	r3, r3, #10
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	801a      	strh	r2, [r3, #0]
 8009fc2:	e042      	b.n	800a04a <USB_EPStartXfer+0x636>
 8009fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	785b      	ldrb	r3, [r3, #1]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d13a      	bne.n	800a04a <USB_EPStartXfer+0x636>
 8009fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009fdc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009fe0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009fe4:	6812      	ldr	r2, [r2, #0]
 8009fe6:	601a      	str	r2, [r3, #0]
 8009fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ffe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a002:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a006:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800a00a:	6812      	ldr	r2, [r2, #0]
 800a00c:	440a      	add	r2, r1
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	011a      	lsls	r2, r3, #4
 800a01e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a022:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4413      	add	r3, r2
 800a02a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a02e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a032:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a042:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a04a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a04e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	891b      	ldrh	r3, [r3, #8]
 800a056:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a05a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a05e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6959      	ldr	r1, [r3, #20]
 800a066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a070:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a074:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a078:	6800      	ldr	r0, [r0, #0]
 800a07a:	f001 fc2c 	bl	800b8d6 <USB_WritePMA>
 800a07e:	f000 be0e 	b.w	800ac9e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	785b      	ldrb	r3, [r3, #1]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d16d      	bne.n	800a16e <USB_EPStartXfer+0x75a>
 800a092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a09e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0b2:	4413      	add	r3, r2
 800a0b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	011a      	lsls	r2, r3, #4
 800a0c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a0cc:	647b      	str	r3, [r7, #68]	; 0x44
 800a0ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d112      	bne.n	800a0fc <USB_EPStartXfer+0x6e8>
 800a0d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0e4:	801a      	strh	r2, [r3, #0]
 800a0e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0e8:	881b      	ldrh	r3, [r3, #0]
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0f8:	801a      	strh	r2, [r3, #0]
 800a0fa:	e063      	b.n	800a1c4 <USB_EPStartXfer+0x7b0>
 800a0fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a100:	2b3e      	cmp	r3, #62	; 0x3e
 800a102:	d817      	bhi.n	800a134 <USB_EPStartXfer+0x720>
 800a104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a108:	085b      	lsrs	r3, r3, #1
 800a10a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a10e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	2b00      	cmp	r3, #0
 800a118:	d004      	beq.n	800a124 <USB_EPStartXfer+0x710>
 800a11a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a11e:	3301      	adds	r3, #1
 800a120:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a124:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a128:	b29b      	uxth	r3, r3
 800a12a:	029b      	lsls	r3, r3, #10
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a130:	801a      	strh	r2, [r3, #0]
 800a132:	e047      	b.n	800a1c4 <USB_EPStartXfer+0x7b0>
 800a134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a138:	095b      	lsrs	r3, r3, #5
 800a13a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a13e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a142:	f003 031f 	and.w	r3, r3, #31
 800a146:	2b00      	cmp	r3, #0
 800a148:	d104      	bne.n	800a154 <USB_EPStartXfer+0x740>
 800a14a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a14e:	3b01      	subs	r3, #1
 800a150:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a154:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a158:	b29b      	uxth	r3, r3
 800a15a:	029b      	lsls	r3, r3, #10
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a166:	b29a      	uxth	r2, r3
 800a168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a16a:	801a      	strh	r2, [r3, #0]
 800a16c:	e02a      	b.n	800a1c4 <USB_EPStartXfer+0x7b0>
 800a16e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	785b      	ldrb	r3, [r3, #1]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d122      	bne.n	800a1c4 <USB_EPStartXfer+0x7b0>
 800a17e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	653b      	str	r3, [r7, #80]	; 0x50
 800a18a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a18e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a198:	b29b      	uxth	r3, r3
 800a19a:	461a      	mov	r2, r3
 800a19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a19e:	4413      	add	r3, r2
 800a1a0:	653b      	str	r3, [r7, #80]	; 0x50
 800a1a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	011a      	lsls	r2, r3, #4
 800a1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a1b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a1c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	891b      	ldrh	r3, [r3, #8]
 800a1d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a1d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6959      	ldr	r1, [r3, #20]
 800a1e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a1ea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a1ee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a1f2:	6800      	ldr	r0, [r0, #0]
 800a1f4:	f001 fb6f 	bl	800b8d6 <USB_WritePMA>
            ep->xfer_buff += len;
 800a1f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	695a      	ldr	r2, [r3, #20]
 800a204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a208:	441a      	add	r2, r3
 800a20a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a20e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a21a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6a1a      	ldr	r2, [r3, #32]
 800a222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d90f      	bls.n	800a252 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800a232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6a1a      	ldr	r2, [r3, #32]
 800a23e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a242:	1ad2      	subs	r2, r2, r3
 800a244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	621a      	str	r2, [r3, #32]
 800a250:	e00e      	b.n	800a270 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800a252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800a262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2200      	movs	r2, #0
 800a26e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a274:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	643b      	str	r3, [r7, #64]	; 0x40
 800a27c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	785b      	ldrb	r3, [r3, #1]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d16d      	bne.n	800a368 <USB_EPStartXfer+0x954>
 800a28c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a290:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	63bb      	str	r3, [r7, #56]	; 0x38
 800a298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a29c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ac:	4413      	add	r3, r2
 800a2ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	011a      	lsls	r2, r3, #4
 800a2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a2c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a2c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d112      	bne.n	800a2f6 <USB_EPStartXfer+0x8e2>
 800a2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2de:	801a      	strh	r2, [r3, #0]
 800a2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e2:	881b      	ldrh	r3, [r3, #0]
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f2:	801a      	strh	r2, [r3, #0]
 800a2f4:	e05d      	b.n	800a3b2 <USB_EPStartXfer+0x99e>
 800a2f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2fa:	2b3e      	cmp	r3, #62	; 0x3e
 800a2fc:	d817      	bhi.n	800a32e <USB_EPStartXfer+0x91a>
 800a2fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a302:	085b      	lsrs	r3, r3, #1
 800a304:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	2b00      	cmp	r3, #0
 800a312:	d004      	beq.n	800a31e <USB_EPStartXfer+0x90a>
 800a314:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a318:	3301      	adds	r3, #1
 800a31a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a31e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a322:	b29b      	uxth	r3, r3
 800a324:	029b      	lsls	r3, r3, #10
 800a326:	b29a      	uxth	r2, r3
 800a328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a32a:	801a      	strh	r2, [r3, #0]
 800a32c:	e041      	b.n	800a3b2 <USB_EPStartXfer+0x99e>
 800a32e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a332:	095b      	lsrs	r3, r3, #5
 800a334:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a33c:	f003 031f 	and.w	r3, r3, #31
 800a340:	2b00      	cmp	r3, #0
 800a342:	d104      	bne.n	800a34e <USB_EPStartXfer+0x93a>
 800a344:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a348:	3b01      	subs	r3, #1
 800a34a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a34e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a352:	b29b      	uxth	r3, r3
 800a354:	029b      	lsls	r3, r3, #10
 800a356:	b29b      	uxth	r3, r3
 800a358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a35c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a360:	b29a      	uxth	r2, r3
 800a362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a364:	801a      	strh	r2, [r3, #0]
 800a366:	e024      	b.n	800a3b2 <USB_EPStartXfer+0x99e>
 800a368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a36c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	785b      	ldrb	r3, [r3, #1]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d11c      	bne.n	800a3b2 <USB_EPStartXfer+0x99e>
 800a378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a386:	b29b      	uxth	r3, r3
 800a388:	461a      	mov	r2, r3
 800a38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a38c:	4413      	add	r3, r2
 800a38e:	643b      	str	r3, [r7, #64]	; 0x40
 800a390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	011a      	lsls	r2, r3, #4
 800a39e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a3b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	895b      	ldrh	r3, [r3, #10]
 800a3be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6959      	ldr	r1, [r3, #20]
 800a3ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a3d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a3dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a3e0:	6800      	ldr	r0, [r0, #0]
 800a3e2:	f001 fa78 	bl	800b8d6 <USB_WritePMA>
 800a3e6:	f000 bc5a 	b.w	800ac9e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a3ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a3fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	b29b      	uxth	r3, r3
 800a418:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a41c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a420:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	441a      	add	r2, r3
 800a43e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a44a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a452:	b29b      	uxth	r3, r3
 800a454:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a45a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a466:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a470:	b29b      	uxth	r3, r3
 800a472:	461a      	mov	r2, r3
 800a474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a476:	4413      	add	r3, r2
 800a478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a47a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a47e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	011a      	lsls	r2, r3, #4
 800a488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a48a:	4413      	add	r3, r2
 800a48c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a490:	65bb      	str	r3, [r7, #88]	; 0x58
 800a492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a496:	b29a      	uxth	r2, r3
 800a498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a49a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a49c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	891b      	ldrh	r3, [r3, #8]
 800a4a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6959      	ldr	r1, [r3, #20]
 800a4b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a4c2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a4c6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a4ca:	6800      	ldr	r0, [r0, #0]
 800a4cc:	f001 fa03 	bl	800b8d6 <USB_WritePMA>
 800a4d0:	e3e5      	b.n	800ac9e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800a4d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800a4fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a500:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a50a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	441a      	add	r2, r3
 800a516:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a51a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a51e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a522:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a52e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6a1a      	ldr	r2, [r3, #32]
 800a53a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a53e:	1ad2      	subs	r2, r2, r3
 800a540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a544:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a54c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a55a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	b29b      	uxth	r3, r3
 800a56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f000 81bc 	beq.w	800a8ec <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a578:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	785b      	ldrb	r3, [r3, #1]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d16d      	bne.n	800a66e <USB_EPStartXfer+0xc5a>
 800a592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a596:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a59e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5b2:	4413      	add	r3, r2
 800a5b4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	011a      	lsls	r2, r3, #4
 800a5c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a5cc:	677b      	str	r3, [r7, #116]	; 0x74
 800a5ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d112      	bne.n	800a5fc <USB_EPStartXfer+0xbe8>
 800a5d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5e4:	801a      	strh	r2, [r3, #0]
 800a5e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5f8:	801a      	strh	r2, [r3, #0]
 800a5fa:	e060      	b.n	800a6be <USB_EPStartXfer+0xcaa>
 800a5fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a600:	2b3e      	cmp	r3, #62	; 0x3e
 800a602:	d817      	bhi.n	800a634 <USB_EPStartXfer+0xc20>
 800a604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a608:	085b      	lsrs	r3, r3, #1
 800a60a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a60e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	2b00      	cmp	r3, #0
 800a618:	d004      	beq.n	800a624 <USB_EPStartXfer+0xc10>
 800a61a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a61e:	3301      	adds	r3, #1
 800a620:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a624:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a628:	b29b      	uxth	r3, r3
 800a62a:	029b      	lsls	r3, r3, #10
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a630:	801a      	strh	r2, [r3, #0]
 800a632:	e044      	b.n	800a6be <USB_EPStartXfer+0xcaa>
 800a634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a638:	095b      	lsrs	r3, r3, #5
 800a63a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a63e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a642:	f003 031f 	and.w	r3, r3, #31
 800a646:	2b00      	cmp	r3, #0
 800a648:	d104      	bne.n	800a654 <USB_EPStartXfer+0xc40>
 800a64a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a64e:	3b01      	subs	r3, #1
 800a650:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a654:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a658:	b29b      	uxth	r3, r3
 800a65a:	029b      	lsls	r3, r3, #10
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a666:	b29a      	uxth	r2, r3
 800a668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a66a:	801a      	strh	r2, [r3, #0]
 800a66c:	e027      	b.n	800a6be <USB_EPStartXfer+0xcaa>
 800a66e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d11f      	bne.n	800a6be <USB_EPStartXfer+0xcaa>
 800a67e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a682:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	461a      	mov	r2, r3
 800a690:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a694:	4413      	add	r3, r2
 800a696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a69a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a69e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	011a      	lsls	r2, r3, #4
 800a6a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a6b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a6be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	895b      	ldrh	r3, [r3, #10]
 800a6ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6959      	ldr	r1, [r3, #20]
 800a6da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a6e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a6e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a6ec:	6800      	ldr	r0, [r0, #0]
 800a6ee:	f001 f8f2 	bl	800b8d6 <USB_WritePMA>
          ep->xfer_buff += len;
 800a6f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	695a      	ldr	r2, [r3, #20]
 800a6fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a702:	441a      	add	r2, r3
 800a704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800a710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6a1a      	ldr	r2, [r3, #32]
 800a71c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d90f      	bls.n	800a74c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800a72c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6a1a      	ldr	r2, [r3, #32]
 800a738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a73c:	1ad2      	subs	r2, r2, r3
 800a73e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	621a      	str	r2, [r3, #32]
 800a74a:	e00e      	b.n	800a76a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800a74c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a750:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6a1b      	ldr	r3, [r3, #32]
 800a758:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800a75c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2200      	movs	r2, #0
 800a768:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800a76a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f000 8295 	beq.w	800ac9e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	785b      	ldrb	r3, [r3, #1]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d16d      	bne.n	800a860 <USB_EPStartXfer+0xe4c>
 800a784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a788:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7a4:	4413      	add	r3, r2
 800a7a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	011a      	lsls	r2, r3, #4
 800a7b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a7be:	667b      	str	r3, [r7, #100]	; 0x64
 800a7c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d112      	bne.n	800a7ee <USB_EPStartXfer+0xdda>
 800a7c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7ca:	881b      	ldrh	r3, [r3, #0]
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7d6:	801a      	strh	r2, [r3, #0]
 800a7d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7ea:	801a      	strh	r2, [r3, #0]
 800a7ec:	e063      	b.n	800a8b6 <USB_EPStartXfer+0xea2>
 800a7ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7f2:	2b3e      	cmp	r3, #62	; 0x3e
 800a7f4:	d817      	bhi.n	800a826 <USB_EPStartXfer+0xe12>
 800a7f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7fa:	085b      	lsrs	r3, r3, #1
 800a7fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d004      	beq.n	800a816 <USB_EPStartXfer+0xe02>
 800a80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a810:	3301      	adds	r3, #1
 800a812:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	029b      	lsls	r3, r3, #10
 800a81e:	b29a      	uxth	r2, r3
 800a820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a822:	801a      	strh	r2, [r3, #0]
 800a824:	e047      	b.n	800a8b6 <USB_EPStartXfer+0xea2>
 800a826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a82a:	095b      	lsrs	r3, r3, #5
 800a82c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a834:	f003 031f 	and.w	r3, r3, #31
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d104      	bne.n	800a846 <USB_EPStartXfer+0xe32>
 800a83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a840:	3b01      	subs	r3, #1
 800a842:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	029b      	lsls	r3, r3, #10
 800a84e:	b29b      	uxth	r3, r3
 800a850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a858:	b29a      	uxth	r2, r3
 800a85a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a85c:	801a      	strh	r2, [r3, #0]
 800a85e:	e02a      	b.n	800a8b6 <USB_EPStartXfer+0xea2>
 800a860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	785b      	ldrb	r3, [r3, #1]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d122      	bne.n	800a8b6 <USB_EPStartXfer+0xea2>
 800a870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	673b      	str	r3, [r7, #112]	; 0x70
 800a87c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	461a      	mov	r2, r3
 800a88e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a890:	4413      	add	r3, r2
 800a892:	673b      	str	r3, [r7, #112]	; 0x70
 800a894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	011a      	lsls	r2, r3, #4
 800a8a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a8b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	891b      	ldrh	r3, [r3, #8]
 800a8c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6959      	ldr	r1, [r3, #20]
 800a8d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a8dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a8e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a8e4:	6800      	ldr	r0, [r0, #0]
 800a8e6:	f000 fff6 	bl	800b8d6 <USB_WritePMA>
 800a8ea:	e1d8      	b.n	800ac9e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a8ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	785b      	ldrb	r3, [r3, #1]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d178      	bne.n	800a9ee <USB_EPStartXfer+0xfda>
 800a8fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a900:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a90a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a90e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a918:	b29b      	uxth	r3, r3
 800a91a:	461a      	mov	r2, r3
 800a91c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a920:	4413      	add	r3, r2
 800a922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a92a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	011a      	lsls	r2, r3, #4
 800a934:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a938:	4413      	add	r3, r2
 800a93a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a93e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d116      	bne.n	800a978 <USB_EPStartXfer+0xf64>
 800a94a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a94e:	881b      	ldrh	r3, [r3, #0]
 800a950:	b29b      	uxth	r3, r3
 800a952:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a956:	b29a      	uxth	r2, r3
 800a958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a95c:	801a      	strh	r2, [r3, #0]
 800a95e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a962:	881b      	ldrh	r3, [r3, #0]
 800a964:	b29b      	uxth	r3, r3
 800a966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a96a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a96e:	b29a      	uxth	r2, r3
 800a970:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a974:	801a      	strh	r2, [r3, #0]
 800a976:	e06b      	b.n	800aa50 <USB_EPStartXfer+0x103c>
 800a978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a97c:	2b3e      	cmp	r3, #62	; 0x3e
 800a97e:	d818      	bhi.n	800a9b2 <USB_EPStartXfer+0xf9e>
 800a980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a984:	085b      	lsrs	r3, r3, #1
 800a986:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a98a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	2b00      	cmp	r3, #0
 800a994:	d004      	beq.n	800a9a0 <USB_EPStartXfer+0xf8c>
 800a996:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a99a:	3301      	adds	r3, #1
 800a99c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a9a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	029b      	lsls	r3, r3, #10
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9ae:	801a      	strh	r2, [r3, #0]
 800a9b0:	e04e      	b.n	800aa50 <USB_EPStartXfer+0x103c>
 800a9b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9b6:	095b      	lsrs	r3, r3, #5
 800a9b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a9bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9c0:	f003 031f 	and.w	r3, r3, #31
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d104      	bne.n	800a9d2 <USB_EPStartXfer+0xfbe>
 800a9c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a9d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	029b      	lsls	r3, r3, #10
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9ea:	801a      	strh	r2, [r3, #0]
 800a9ec:	e030      	b.n	800aa50 <USB_EPStartXfer+0x103c>
 800a9ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	785b      	ldrb	r3, [r3, #1]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d128      	bne.n	800aa50 <USB_EPStartXfer+0x103c>
 800a9fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aa0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa22:	4413      	add	r3, r2
 800aa24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aa28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	011a      	lsls	r2, r3, #4
 800aa36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aa50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	891b      	ldrh	r3, [r3, #8]
 800aa5c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6959      	ldr	r1, [r3, #20]
 800aa6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800aa76:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800aa7a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800aa7e:	6800      	ldr	r0, [r0, #0]
 800aa80:	f000 ff29 	bl	800b8d6 <USB_WritePMA>
          ep->xfer_buff += len;
 800aa84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	695a      	ldr	r2, [r3, #20]
 800aa90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa94:	441a      	add	r2, r3
 800aa96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800aaa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6a1a      	ldr	r2, [r3, #32]
 800aaae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d90f      	bls.n	800aade <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800aabe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6a1a      	ldr	r2, [r3, #32]
 800aaca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aace:	1ad2      	subs	r2, r2, r3
 800aad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	621a      	str	r2, [r3, #32]
 800aadc:	e00e      	b.n	800aafc <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800aade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800aaee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800aafc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 80cc 	beq.w	800ac9e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	785b      	ldrb	r3, [r3, #1]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d178      	bne.n	800ac16 <USB_EPStartXfer+0x1202>
 800ab24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	461a      	mov	r2, r3
 800ab44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab48:	4413      	add	r3, r2
 800ab4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	011a      	lsls	r2, r3, #4
 800ab5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab60:	4413      	add	r3, r2
 800ab62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d116      	bne.n	800aba0 <USB_EPStartXfer+0x118c>
 800ab72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab76:	881b      	ldrh	r3, [r3, #0]
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab84:	801a      	strh	r2, [r3, #0]
 800ab86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab9c:	801a      	strh	r2, [r3, #0]
 800ab9e:	e064      	b.n	800ac6a <USB_EPStartXfer+0x1256>
 800aba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aba4:	2b3e      	cmp	r3, #62	; 0x3e
 800aba6:	d818      	bhi.n	800abda <USB_EPStartXfer+0x11c6>
 800aba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abac:	085b      	lsrs	r3, r3, #1
 800abae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800abb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d004      	beq.n	800abc8 <USB_EPStartXfer+0x11b4>
 800abbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800abc2:	3301      	adds	r3, #1
 800abc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800abc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800abcc:	b29b      	uxth	r3, r3
 800abce:	029b      	lsls	r3, r3, #10
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abd6:	801a      	strh	r2, [r3, #0]
 800abd8:	e047      	b.n	800ac6a <USB_EPStartXfer+0x1256>
 800abda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abde:	095b      	lsrs	r3, r3, #5
 800abe0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800abe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abe8:	f003 031f 	and.w	r3, r3, #31
 800abec:	2b00      	cmp	r3, #0
 800abee:	d104      	bne.n	800abfa <USB_EPStartXfer+0x11e6>
 800abf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800abf4:	3b01      	subs	r3, #1
 800abf6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800abfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	029b      	lsls	r3, r3, #10
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac12:	801a      	strh	r2, [r3, #0]
 800ac14:	e029      	b.n	800ac6a <USB_EPStartXfer+0x1256>
 800ac16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	785b      	ldrb	r3, [r3, #1]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d121      	bne.n	800ac6a <USB_EPStartXfer+0x1256>
 800ac26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	461a      	mov	r2, r3
 800ac38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	011a      	lsls	r2, r3, #4
 800ac50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac54:	4413      	add	r3, r2
 800ac56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ac5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ac6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	895b      	ldrh	r3, [r3, #10]
 800ac76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6959      	ldr	r1, [r3, #20]
 800ac86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ac90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ac94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ac98:	6800      	ldr	r0, [r0, #0]
 800ac9a:	f000 fe1c 	bl	800b8d6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ac9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aca2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	4413      	add	r3, r2
 800acb8:	881b      	ldrh	r3, [r3, #0]
 800acba:	b29b      	uxth	r3, r3
 800acbc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acc0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800acc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800accc:	8013      	strh	r3, [r2, #0]
 800acce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acd2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800acd6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acda:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800acde:	8812      	ldrh	r2, [r2, #0]
 800ace0:	f082 0210 	eor.w	r2, r2, #16
 800ace4:	801a      	strh	r2, [r3, #0]
 800ace6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acea:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800acee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acf2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800acf6:	8812      	ldrh	r2, [r2, #0]
 800acf8:	f082 0220 	eor.w	r2, r2, #32
 800acfc:	801a      	strh	r2, [r3, #0]
 800acfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	441a      	add	r2, r3
 800ad18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad1c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800ad20:	881b      	ldrh	r3, [r3, #0]
 800ad22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	8013      	strh	r3, [r2, #0]
 800ad36:	f000 bc9f 	b.w	800b678 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ad3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	7b1b      	ldrb	r3, [r3, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f040 80ae 	bne.w	800aea8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ad4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	699a      	ldr	r2, [r3, #24]
 800ad58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d917      	bls.n	800ad98 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800ad68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800ad78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	699a      	ldr	r2, [r3, #24]
 800ad84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad88:	1ad2      	subs	r2, r2, r3
 800ad8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	619a      	str	r2, [r3, #24]
 800ad96:	e00e      	b.n	800adb6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800ad98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800ada8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2200      	movs	r2, #0
 800adb4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800adb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800adc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800add2:	b29b      	uxth	r3, r3
 800add4:	461a      	mov	r2, r3
 800add6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800adda:	4413      	add	r3, r2
 800addc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ade0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ade4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	011a      	lsls	r2, r3, #4
 800adee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800adf2:	4413      	add	r3, r2
 800adf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800adf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800adfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d116      	bne.n	800ae32 <USB_EPStartXfer+0x141e>
 800ae04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae16:	801a      	strh	r2, [r3, #0]
 800ae18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae1c:	881b      	ldrh	r3, [r3, #0]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae2e:	801a      	strh	r2, [r3, #0]
 800ae30:	e3e8      	b.n	800b604 <USB_EPStartXfer+0x1bf0>
 800ae32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae36:	2b3e      	cmp	r3, #62	; 0x3e
 800ae38:	d818      	bhi.n	800ae6c <USB_EPStartXfer+0x1458>
 800ae3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae3e:	085b      	lsrs	r3, r3, #1
 800ae40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ae44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae48:	f003 0301 	and.w	r3, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d004      	beq.n	800ae5a <USB_EPStartXfer+0x1446>
 800ae50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ae54:	3301      	adds	r3, #1
 800ae56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ae5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	029b      	lsls	r3, r3, #10
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae68:	801a      	strh	r2, [r3, #0]
 800ae6a:	e3cb      	b.n	800b604 <USB_EPStartXfer+0x1bf0>
 800ae6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae70:	095b      	lsrs	r3, r3, #5
 800ae72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ae76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae7a:	f003 031f 	and.w	r3, r3, #31
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d104      	bne.n	800ae8c <USB_EPStartXfer+0x1478>
 800ae82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ae86:	3b01      	subs	r3, #1
 800ae88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ae8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	029b      	lsls	r3, r3, #10
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aea4:	801a      	strh	r2, [r3, #0]
 800aea6:	e3ad      	b.n	800b604 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800aea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aeac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	78db      	ldrb	r3, [r3, #3]
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	f040 8200 	bne.w	800b2ba <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800aeba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	785b      	ldrb	r3, [r3, #1]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f040 8091 	bne.w	800afee <USB_EPStartXfer+0x15da>
 800aecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aed0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aeda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	461a      	mov	r2, r3
 800aeec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aef0:	4413      	add	r3, r2
 800aef2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aefa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	011a      	lsls	r2, r3, #4
 800af04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af08:	4413      	add	r3, r2
 800af0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800af0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d116      	bne.n	800af50 <USB_EPStartXfer+0x153c>
 800af22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	b29b      	uxth	r3, r3
 800af2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af2e:	b29a      	uxth	r2, r3
 800af30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af34:	801a      	strh	r2, [r3, #0]
 800af36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af3a:	881b      	ldrh	r3, [r3, #0]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af46:	b29a      	uxth	r2, r3
 800af48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af4c:	801a      	strh	r2, [r3, #0]
 800af4e:	e083      	b.n	800b058 <USB_EPStartXfer+0x1644>
 800af50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	2b3e      	cmp	r3, #62	; 0x3e
 800af5e:	d820      	bhi.n	800afa2 <USB_EPStartXfer+0x158e>
 800af60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	085b      	lsrs	r3, r3, #1
 800af6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800af72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d004      	beq.n	800af90 <USB_EPStartXfer+0x157c>
 800af86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8a:	3301      	adds	r3, #1
 800af8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800af90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af94:	b29b      	uxth	r3, r3
 800af96:	029b      	lsls	r3, r3, #10
 800af98:	b29a      	uxth	r2, r3
 800af9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af9e:	801a      	strh	r2, [r3, #0]
 800afa0:	e05a      	b.n	800b058 <USB_EPStartXfer+0x1644>
 800afa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	095b      	lsrs	r3, r3, #5
 800afb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800afb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	f003 031f 	and.w	r3, r3, #31
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d104      	bne.n	800afd2 <USB_EPStartXfer+0x15be>
 800afc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afcc:	3b01      	subs	r3, #1
 800afce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800afd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	029b      	lsls	r3, r3, #10
 800afda:	b29b      	uxth	r3, r3
 800afdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800afea:	801a      	strh	r2, [r3, #0]
 800afec:	e034      	b.n	800b058 <USB_EPStartXfer+0x1644>
 800afee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	785b      	ldrb	r3, [r3, #1]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d12c      	bne.n	800b058 <USB_EPStartXfer+0x1644>
 800affe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b002:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b00c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	461a      	mov	r2, r3
 800b01e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b022:	4413      	add	r3, r2
 800b024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b02c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	011a      	lsls	r2, r3, #4
 800b036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b03a:	4413      	add	r3, r2
 800b03c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	b29a      	uxth	r2, r3
 800b052:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b056:	801a      	strh	r2, [r3, #0]
 800b058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b05c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b06a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	785b      	ldrb	r3, [r3, #1]
 800b072:	2b00      	cmp	r3, #0
 800b074:	f040 8091 	bne.w	800b19a <USB_EPStartXfer+0x1786>
 800b078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b07c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b08a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b094:	b29b      	uxth	r3, r3
 800b096:	461a      	mov	r2, r3
 800b098:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b09c:	4413      	add	r3, r2
 800b09e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b0a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	011a      	lsls	r2, r3, #4
 800b0b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b0b4:	4413      	add	r3, r2
 800b0b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b0ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d116      	bne.n	800b0fc <USB_EPStartXfer+0x16e8>
 800b0ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0e0:	801a      	strh	r2, [r3, #0]
 800b0e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0f8:	801a      	strh	r2, [r3, #0]
 800b0fa:	e07c      	b.n	800b1f6 <USB_EPStartXfer+0x17e2>
 800b0fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	2b3e      	cmp	r3, #62	; 0x3e
 800b10a:	d820      	bhi.n	800b14e <USB_EPStartXfer+0x173a>
 800b10c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	085b      	lsrs	r3, r3, #1
 800b11a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b11e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d004      	beq.n	800b13c <USB_EPStartXfer+0x1728>
 800b132:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b136:	3301      	adds	r3, #1
 800b138:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b13c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b140:	b29b      	uxth	r3, r3
 800b142:	029b      	lsls	r3, r3, #10
 800b144:	b29a      	uxth	r2, r3
 800b146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b14a:	801a      	strh	r2, [r3, #0]
 800b14c:	e053      	b.n	800b1f6 <USB_EPStartXfer+0x17e2>
 800b14e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	095b      	lsrs	r3, r3, #5
 800b15c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	f003 031f 	and.w	r3, r3, #31
 800b170:	2b00      	cmp	r3, #0
 800b172:	d104      	bne.n	800b17e <USB_EPStartXfer+0x176a>
 800b174:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b178:	3b01      	subs	r3, #1
 800b17a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b17e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b182:	b29b      	uxth	r3, r3
 800b184:	029b      	lsls	r3, r3, #10
 800b186:	b29b      	uxth	r3, r3
 800b188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b18c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b190:	b29a      	uxth	r2, r3
 800b192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b196:	801a      	strh	r2, [r3, #0]
 800b198:	e02d      	b.n	800b1f6 <USB_EPStartXfer+0x17e2>
 800b19a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b19e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	785b      	ldrb	r3, [r3, #1]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d125      	bne.n	800b1f6 <USB_EPStartXfer+0x17e2>
 800b1aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	011a      	lsls	r2, r3, #4
 800b1d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b1d8:	4413      	add	r3, r2
 800b1da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b1de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b1e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b1f4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b1f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	69db      	ldr	r3, [r3, #28]
 800b202:	2b00      	cmp	r3, #0
 800b204:	f000 81fe 	beq.w	800b604 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b20c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b228:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b22c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d005      	beq.n	800b240 <USB_EPStartXfer+0x182c>
 800b234:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10d      	bne.n	800b25c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b240:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f040 81db 	bne.w	800b604 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b24e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b256:	2b00      	cmp	r3, #0
 800b258:	f040 81d4 	bne.w	800b604 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800b25c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b260:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b26a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	881b      	ldrh	r3, [r3, #0]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b27e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b282:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800b286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b28a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	441a      	add	r2, r3
 800b2a0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b2a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	8013      	strh	r3, [r2, #0]
 800b2b8:	e1a4      	b.n	800b604 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b2ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	78db      	ldrb	r3, [r3, #3]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	f040 819a 	bne.w	800b600 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b2cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	699a      	ldr	r2, [r3, #24]
 800b2d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d917      	bls.n	800b318 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800b2e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	691b      	ldr	r3, [r3, #16]
 800b2f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800b2f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	699a      	ldr	r2, [r3, #24]
 800b304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b308:	1ad2      	subs	r2, r2, r3
 800b30a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b30e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	619a      	str	r2, [r3, #24]
 800b316:	e00e      	b.n	800b336 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800b318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b31c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800b328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b32c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2200      	movs	r2, #0
 800b334:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b33a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	785b      	ldrb	r3, [r3, #1]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d178      	bne.n	800b438 <USB_EPStartXfer+0x1a24>
 800b346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b34a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b358:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b362:	b29b      	uxth	r3, r3
 800b364:	461a      	mov	r2, r3
 800b366:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b36a:	4413      	add	r3, r2
 800b36c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	011a      	lsls	r2, r3, #4
 800b37e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b382:	4413      	add	r3, r2
 800b384:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b388:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b38c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b390:	2b00      	cmp	r3, #0
 800b392:	d116      	bne.n	800b3c2 <USB_EPStartXfer+0x19ae>
 800b394:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b398:	881b      	ldrh	r3, [r3, #0]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3a6:	801a      	strh	r2, [r3, #0]
 800b3a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3be:	801a      	strh	r2, [r3, #0]
 800b3c0:	e06b      	b.n	800b49a <USB_EPStartXfer+0x1a86>
 800b3c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3c6:	2b3e      	cmp	r3, #62	; 0x3e
 800b3c8:	d818      	bhi.n	800b3fc <USB_EPStartXfer+0x19e8>
 800b3ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3ce:	085b      	lsrs	r3, r3, #1
 800b3d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b3d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3d8:	f003 0301 	and.w	r3, r3, #1
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <USB_EPStartXfer+0x19d6>
 800b3e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b3ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	029b      	lsls	r3, r3, #10
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3f8:	801a      	strh	r2, [r3, #0]
 800b3fa:	e04e      	b.n	800b49a <USB_EPStartXfer+0x1a86>
 800b3fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b400:	095b      	lsrs	r3, r3, #5
 800b402:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b40a:	f003 031f 	and.w	r3, r3, #31
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d104      	bne.n	800b41c <USB_EPStartXfer+0x1a08>
 800b412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b416:	3b01      	subs	r3, #1
 800b418:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b41c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b420:	b29b      	uxth	r3, r3
 800b422:	029b      	lsls	r3, r3, #10
 800b424:	b29b      	uxth	r3, r3
 800b426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b42a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b42e:	b29a      	uxth	r2, r3
 800b430:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b434:	801a      	strh	r2, [r3, #0]
 800b436:	e030      	b.n	800b49a <USB_EPStartXfer+0x1a86>
 800b438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b43c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	785b      	ldrb	r3, [r3, #1]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d128      	bne.n	800b49a <USB_EPStartXfer+0x1a86>
 800b448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b44c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b45a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b464:	b29b      	uxth	r3, r3
 800b466:	461a      	mov	r2, r3
 800b468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b46c:	4413      	add	r3, r2
 800b46e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	011a      	lsls	r2, r3, #4
 800b480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b484:	4413      	add	r3, r2
 800b486:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b48a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b48e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b492:	b29a      	uxth	r2, r3
 800b494:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b498:	801a      	strh	r2, [r3, #0]
 800b49a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b49e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	785b      	ldrb	r3, [r3, #1]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d178      	bne.n	800b5aa <USB_EPStartXfer+0x1b96>
 800b4b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4dc:	4413      	add	r3, r2
 800b4de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	011a      	lsls	r2, r3, #4
 800b4f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b4fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b502:	2b00      	cmp	r3, #0
 800b504:	d116      	bne.n	800b534 <USB_EPStartXfer+0x1b20>
 800b506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b50a:	881b      	ldrh	r3, [r3, #0]
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b512:	b29a      	uxth	r2, r3
 800b514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b518:	801a      	strh	r2, [r3, #0]
 800b51a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	b29b      	uxth	r3, r3
 800b522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b530:	801a      	strh	r2, [r3, #0]
 800b532:	e067      	b.n	800b604 <USB_EPStartXfer+0x1bf0>
 800b534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b538:	2b3e      	cmp	r3, #62	; 0x3e
 800b53a:	d818      	bhi.n	800b56e <USB_EPStartXfer+0x1b5a>
 800b53c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b540:	085b      	lsrs	r3, r3, #1
 800b542:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b54a:	f003 0301 	and.w	r3, r3, #1
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d004      	beq.n	800b55c <USB_EPStartXfer+0x1b48>
 800b552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b556:	3301      	adds	r3, #1
 800b558:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b55c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b560:	b29b      	uxth	r3, r3
 800b562:	029b      	lsls	r3, r3, #10
 800b564:	b29a      	uxth	r2, r3
 800b566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b56a:	801a      	strh	r2, [r3, #0]
 800b56c:	e04a      	b.n	800b604 <USB_EPStartXfer+0x1bf0>
 800b56e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b572:	095b      	lsrs	r3, r3, #5
 800b574:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b57c:	f003 031f 	and.w	r3, r3, #31
 800b580:	2b00      	cmp	r3, #0
 800b582:	d104      	bne.n	800b58e <USB_EPStartXfer+0x1b7a>
 800b584:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b588:	3b01      	subs	r3, #1
 800b58a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b58e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b592:	b29b      	uxth	r3, r3
 800b594:	029b      	lsls	r3, r3, #10
 800b596:	b29b      	uxth	r3, r3
 800b598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b59c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5a6:	801a      	strh	r2, [r3, #0]
 800b5a8:	e02c      	b.n	800b604 <USB_EPStartXfer+0x1bf0>
 800b5aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	785b      	ldrb	r3, [r3, #1]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d124      	bne.n	800b604 <USB_EPStartXfer+0x1bf0>
 800b5ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b5d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	011a      	lsls	r2, r3, #4
 800b5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b5ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5fc:	801a      	strh	r2, [r3, #0]
 800b5fe:	e001      	b.n	800b604 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	e03a      	b.n	800b67a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b608:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	881b      	ldrh	r3, [r3, #0]
 800b620:	b29b      	uxth	r3, r3
 800b622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b62a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800b62e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b632:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b636:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800b63a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b63e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b642:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800b646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b64a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	441a      	add	r2, r3
 800b660:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b66c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b674:	b29b      	uxth	r3, r3
 800b676:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	785b      	ldrb	r3, [r3, #1]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d020      	beq.n	800b6d8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6ac:	81bb      	strh	r3, [r7, #12]
 800b6ae:	89bb      	ldrh	r3, [r7, #12]
 800b6b0:	f083 0310 	eor.w	r3, r3, #16
 800b6b4:	81bb      	strh	r3, [r7, #12]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	441a      	add	r2, r3
 800b6c0:	89bb      	ldrh	r3, [r7, #12]
 800b6c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	8013      	strh	r3, [r2, #0]
 800b6d6:	e01f      	b.n	800b718 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	881b      	ldrh	r3, [r3, #0]
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ee:	81fb      	strh	r3, [r7, #14]
 800b6f0:	89fb      	ldrh	r3, [r7, #14]
 800b6f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b6f6:	81fb      	strh	r3, [r7, #14]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	441a      	add	r2, r3
 800b702:	89fb      	ldrh	r3, [r7, #14]
 800b704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b70c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b714:	b29b      	uxth	r3, r3
 800b716:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	bc80      	pop	{r7}
 800b722:	4770      	bx	lr

0800b724 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	7b1b      	ldrb	r3, [r3, #12]
 800b732:	2b00      	cmp	r3, #0
 800b734:	f040 809d 	bne.w	800b872 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	785b      	ldrb	r3, [r3, #1]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d04c      	beq.n	800b7da <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	823b      	strh	r3, [r7, #16]
 800b74e:	8a3b      	ldrh	r3, [r7, #16]
 800b750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b754:	2b00      	cmp	r3, #0
 800b756:	d01b      	beq.n	800b790 <USB_EPClearStall+0x6c>
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4413      	add	r3, r2
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	b29b      	uxth	r3, r3
 800b766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b76e:	81fb      	strh	r3, [r7, #14]
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	441a      	add	r2, r3
 800b77a:	89fb      	ldrh	r3, [r7, #14]
 800b77c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b788:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	78db      	ldrb	r3, [r3, #3]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d06c      	beq.n	800b872 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4413      	add	r3, r2
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7ae:	81bb      	strh	r3, [r7, #12]
 800b7b0:	89bb      	ldrh	r3, [r7, #12]
 800b7b2:	f083 0320 	eor.w	r3, r3, #32
 800b7b6:	81bb      	strh	r3, [r7, #12]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	441a      	add	r2, r3
 800b7c2:	89bb      	ldrh	r3, [r7, #12]
 800b7c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	8013      	strh	r3, [r2, #0]
 800b7d8:	e04b      	b.n	800b872 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	4413      	add	r3, r2
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	82fb      	strh	r3, [r7, #22]
 800b7e8:	8afb      	ldrh	r3, [r7, #22]
 800b7ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d01b      	beq.n	800b82a <USB_EPClearStall+0x106>
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	4413      	add	r3, r2
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b808:	82bb      	strh	r3, [r7, #20]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	441a      	add	r2, r3
 800b814:	8abb      	ldrh	r3, [r7, #20]
 800b816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b81a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b81e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b826:	b29b      	uxth	r3, r3
 800b828:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	4413      	add	r3, r2
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	b29b      	uxth	r3, r3
 800b838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b83c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b840:	827b      	strh	r3, [r7, #18]
 800b842:	8a7b      	ldrh	r3, [r7, #18]
 800b844:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b848:	827b      	strh	r3, [r7, #18]
 800b84a:	8a7b      	ldrh	r3, [r7, #18]
 800b84c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b850:	827b      	strh	r3, [r7, #18]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	441a      	add	r2, r3
 800b85c:	8a7b      	ldrh	r3, [r7, #18]
 800b85e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b86a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b86e:	b29b      	uxth	r3, r3
 800b870:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	371c      	adds	r7, #28
 800b878:	46bd      	mov	sp, r7
 800b87a:	bc80      	pop	{r7}
 800b87c:	4770      	bx	lr

0800b87e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b87e:	b480      	push	{r7}
 800b880:	b083      	sub	sp, #12
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	460b      	mov	r3, r1
 800b888:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b88a:	78fb      	ldrb	r3, [r7, #3]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d103      	bne.n	800b898 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2280      	movs	r2, #128	; 0x80
 800b894:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	370c      	adds	r7, #12
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bc80      	pop	{r7}
 800b8a2:	4770      	bx	lr

0800b8a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	370c      	adds	r7, #12
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bc80      	pop	{r7}
 800b8b6:	4770      	bx	lr

0800b8b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bc80      	pop	{r7}
 800b8d4:	4770      	bx	lr

0800b8d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b08d      	sub	sp, #52	; 0x34
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	60f8      	str	r0, [r7, #12]
 800b8de:	60b9      	str	r1, [r7, #8]
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	80fb      	strh	r3, [r7, #6]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b8ec:	88bb      	ldrh	r3, [r7, #4]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	085b      	lsrs	r3, r3, #1
 800b8f2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b8fc:	88fb      	ldrh	r3, [r7, #6]
 800b8fe:	005a      	lsls	r2, r3, #1
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	4413      	add	r3, r2
 800b904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b908:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b90a:	6a3b      	ldr	r3, [r7, #32]
 800b90c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b90e:	e01e      	b.n	800b94e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	3301      	adds	r3, #1
 800b91a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	b29b      	uxth	r3, r3
 800b922:	021b      	lsls	r3, r3, #8
 800b924:	b29b      	uxth	r3, r3
 800b926:	461a      	mov	r2, r3
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	b29a      	uxth	r2, r3
 800b932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b934:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b938:	3302      	adds	r3, #2
 800b93a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	3302      	adds	r3, #2
 800b940:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800b942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b944:	3301      	adds	r3, #1
 800b946:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94a:	3b01      	subs	r3, #1
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1dd      	bne.n	800b910 <USB_WritePMA+0x3a>
  }
}
 800b954:	bf00      	nop
 800b956:	bf00      	nop
 800b958:	3734      	adds	r7, #52	; 0x34
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bc80      	pop	{r7}
 800b95e:	4770      	bx	lr

0800b960 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b960:	b480      	push	{r7}
 800b962:	b08b      	sub	sp, #44	; 0x2c
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	4611      	mov	r1, r2
 800b96c:	461a      	mov	r2, r3
 800b96e:	460b      	mov	r3, r1
 800b970:	80fb      	strh	r3, [r7, #6]
 800b972:	4613      	mov	r3, r2
 800b974:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b976:	88bb      	ldrh	r3, [r7, #4]
 800b978:	085b      	lsrs	r3, r3, #1
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b986:	88fb      	ldrh	r3, [r7, #6]
 800b988:	005a      	lsls	r2, r3, #1
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	4413      	add	r3, r2
 800b98e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b992:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	627b      	str	r3, [r7, #36]	; 0x24
 800b998:	e01b      	b.n	800b9d2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b9a2:	6a3b      	ldr	r3, [r7, #32]
 800b9a4:	3302      	adds	r3, #2
 800b9a6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	0a1b      	lsrs	r3, r3, #8
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	3302      	adds	r3, #2
 800b9ca:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e0      	bne.n	800b99a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b9d8:	88bb      	ldrh	r3, [r7, #4]
 800b9da:	f003 0301 	and.w	r3, r3, #1
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d007      	beq.n	800b9f4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	701a      	strb	r2, [r3, #0]
  }
}
 800b9f4:	bf00      	nop
 800b9f6:	372c      	adds	r7, #44	; 0x2c
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bc80      	pop	{r7}
 800b9fc:	4770      	bx	lr

0800b9fe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b084      	sub	sp, #16
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	460b      	mov	r3, r1
 800ba08:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	7c1b      	ldrb	r3, [r3, #16]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d115      	bne.n	800ba42 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	2181      	movs	r1, #129	; 0x81
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f001 fe75 	bl	800d70e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ba2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba2e:	2202      	movs	r2, #2
 800ba30:	2101      	movs	r1, #1
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f001 fe6b 	bl	800d70e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800ba40:	e012      	b.n	800ba68 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba42:	2340      	movs	r3, #64	; 0x40
 800ba44:	2202      	movs	r2, #2
 800ba46:	2181      	movs	r1, #129	; 0x81
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f001 fe60 	bl	800d70e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ba54:	2340      	movs	r3, #64	; 0x40
 800ba56:	2202      	movs	r2, #2
 800ba58:	2101      	movs	r1, #1
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f001 fe57 	bl	800d70e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ba68:	2308      	movs	r3, #8
 800ba6a:	2203      	movs	r2, #3
 800ba6c:	2182      	movs	r1, #130	; 0x82
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f001 fe4d 	bl	800d70e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800ba7a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ba7e:	f001 ff6d 	bl	800d95c <USBD_static_malloc>
 800ba82:	4602      	mov	r2, r0
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d102      	bne.n	800ba9a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800ba94:	2301      	movs	r3, #1
 800ba96:	73fb      	strb	r3, [r7, #15]
 800ba98:	e026      	b.n	800bae8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800baa0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	2200      	movs	r2, #0
 800bab0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	7c1b      	ldrb	r3, [r3, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d109      	bne.n	800bad8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800baca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bace:	2101      	movs	r1, #1
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f001 ff0d 	bl	800d8f0 <USBD_LL_PrepareReceive>
 800bad6:	e007      	b.n	800bae8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bade:	2340      	movs	r3, #64	; 0x40
 800bae0:	2101      	movs	r1, #1
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f001 ff04 	bl	800d8f0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	460b      	mov	r3, r1
 800bafc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bb02:	2181      	movs	r1, #129	; 0x81
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f001 fe28 	bl	800d75a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bb10:	2101      	movs	r1, #1
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f001 fe21 	bl	800d75a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bb20:	2182      	movs	r1, #130	; 0x82
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f001 fe19 	bl	800d75a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00e      	beq.n	800bb56 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f001 ff13 	bl	800d974 <USBD_static_free>
    pdev->pClassData = NULL;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb70:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bb72:	2300      	movs	r3, #0
 800bb74:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bb76:	2300      	movs	r3, #0
 800bb78:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d039      	beq.n	800bbfe <USBD_CDC_Setup+0x9e>
 800bb8a:	2b20      	cmp	r3, #32
 800bb8c:	d17f      	bne.n	800bc8e <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	88db      	ldrh	r3, [r3, #6]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d029      	beq.n	800bbea <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	b25b      	sxtb	r3, r3
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	da11      	bge.n	800bbc4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800bbac:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	88d2      	ldrh	r2, [r2, #6]
 800bbb2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bbb4:	6939      	ldr	r1, [r7, #16]
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	88db      	ldrh	r3, [r3, #6]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f001 f994 	bl	800ceea <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800bbc2:	e06b      	b.n	800bc9c <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	785a      	ldrb	r2, [r3, #1]
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	88db      	ldrh	r3, [r3, #6]
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bbda:	6939      	ldr	r1, [r7, #16]
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	88db      	ldrh	r3, [r3, #6]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f001 f9af 	bl	800cf46 <USBD_CtlPrepareRx>
    break;
 800bbe8:	e058      	b.n	800bc9c <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	7850      	ldrb	r0, [r2, #1]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	4798      	blx	r3
    break;
 800bbfc:	e04e      	b.n	800bc9c <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	785b      	ldrb	r3, [r3, #1]
 800bc02:	2b0b      	cmp	r3, #11
 800bc04:	d02e      	beq.n	800bc64 <USBD_CDC_Setup+0x104>
 800bc06:	2b0b      	cmp	r3, #11
 800bc08:	dc38      	bgt.n	800bc7c <USBD_CDC_Setup+0x11c>
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <USBD_CDC_Setup+0xb4>
 800bc0e:	2b0a      	cmp	r3, #10
 800bc10:	d014      	beq.n	800bc3c <USBD_CDC_Setup+0xdc>
 800bc12:	e033      	b.n	800bc7c <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bc1a:	2b03      	cmp	r3, #3
 800bc1c:	d107      	bne.n	800bc2e <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800bc1e:	f107 030c 	add.w	r3, r7, #12
 800bc22:	2202      	movs	r2, #2
 800bc24:	4619      	mov	r1, r3
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f001 f95f 	bl	800ceea <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800bc2c:	e02e      	b.n	800bc8c <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f001 f8f0 	bl	800ce16 <USBD_CtlError>
			  ret = USBD_FAIL;
 800bc36:	2302      	movs	r3, #2
 800bc38:	75fb      	strb	r3, [r7, #23]
      break;
 800bc3a:	e027      	b.n	800bc8c <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d107      	bne.n	800bc56 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800bc46:	f107 030f 	add.w	r3, r7, #15
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f001 f94b 	bl	800ceea <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800bc54:	e01a      	b.n	800bc8c <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 f8dc 	bl	800ce16 <USBD_CtlError>
			  ret = USBD_FAIL;
 800bc5e:	2302      	movs	r3, #2
 800bc60:	75fb      	strb	r3, [r7, #23]
      break;
 800bc62:	e013      	b.n	800bc8c <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bc6a:	2b03      	cmp	r3, #3
 800bc6c:	d00d      	beq.n	800bc8a <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800bc6e:	6839      	ldr	r1, [r7, #0]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f001 f8d0 	bl	800ce16 <USBD_CtlError>
			  ret = USBD_FAIL;
 800bc76:	2302      	movs	r3, #2
 800bc78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bc7a:	e006      	b.n	800bc8a <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f001 f8c9 	bl	800ce16 <USBD_CtlError>
      ret = USBD_FAIL;
 800bc84:	2302      	movs	r3, #2
 800bc86:	75fb      	strb	r3, [r7, #23]
      break;
 800bc88:	e000      	b.n	800bc8c <USBD_CDC_Setup+0x12c>
      break;
 800bc8a:	bf00      	nop
    }
    break;
 800bc8c:	e006      	b.n	800bc9c <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 f8c0 	bl	800ce16 <USBD_CtlError>
    ret = USBD_FAIL;
 800bc96:	2302      	movs	r3, #2
 800bc98:	75fb      	strb	r3, [r7, #23]
    break;
 800bc9a:	bf00      	nop
  }

  return ret;
 800bc9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b084      	sub	sp, #16
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bcb8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bcc0:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d03a      	beq.n	800bd42 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bccc:	78fa      	ldrb	r2, [r7, #3]
 800bcce:	6879      	ldr	r1, [r7, #4]
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4413      	add	r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	440b      	add	r3, r1
 800bcda:	331c      	adds	r3, #28
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d029      	beq.n	800bd36 <USBD_CDC_DataIn+0x90>
 800bce2:	78fa      	ldrb	r2, [r7, #3]
 800bce4:	6879      	ldr	r1, [r7, #4]
 800bce6:	4613      	mov	r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	440b      	add	r3, r1
 800bcf0:	331c      	adds	r3, #28
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	78f9      	ldrb	r1, [r7, #3]
 800bcf6:	68b8      	ldr	r0, [r7, #8]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	440b      	add	r3, r1
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	4403      	add	r3, r0
 800bd02:	3338      	adds	r3, #56	; 0x38
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd0a:	fb01 f303 	mul.w	r3, r1, r3
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d110      	bne.n	800bd36 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bd14:	78fa      	ldrb	r2, [r7, #3]
 800bd16:	6879      	ldr	r1, [r7, #4]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	440b      	add	r3, r1
 800bd22:	331c      	adds	r3, #28
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800bd28:	78f9      	ldrb	r1, [r7, #3]
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f001 fdbb 	bl	800d8aa <USBD_LL_Transmit>
 800bd34:	e003      	b.n	800bd3e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e000      	b.n	800bd44 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800bd42:	2302      	movs	r3, #2
  }
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd5e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800bd60:	78fb      	ldrb	r3, [r7, #3]
 800bd62:	4619      	mov	r1, r3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f001 fde6 	bl	800d936 <USBD_LL_GetRxDataSize>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00d      	beq.n	800bd98 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bd90:	4611      	mov	r1, r2
 800bd92:	4798      	blx	r3

    return USBD_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	e000      	b.n	800bd9a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bd98:	2302      	movs	r3, #2
  }
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b084      	sub	sp, #16
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bdb0:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d015      	beq.n	800bde8 <USBD_CDC_EP0_RxReady+0x46>
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bdc2:	2bff      	cmp	r3, #255	; 0xff
 800bdc4:	d010      	beq.n	800bde8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bdd4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bddc:	b292      	uxth	r2, r2
 800bdde:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	22ff      	movs	r2, #255	; 0xff
 800bde4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
	...

0800bdf4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2243      	movs	r2, #67	; 0x43
 800be00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800be02:	4b03      	ldr	r3, [pc, #12]	; (800be10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800be04:	4618      	mov	r0, r3
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	bc80      	pop	{r7}
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	2000042c 	.word	0x2000042c

0800be14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2243      	movs	r2, #67	; 0x43
 800be20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800be22:	4b03      	ldr	r3, [pc, #12]	; (800be30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800be24:	4618      	mov	r0, r3
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	bc80      	pop	{r7}
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	200003e8 	.word	0x200003e8

0800be34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2243      	movs	r2, #67	; 0x43
 800be40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800be42:	4b03      	ldr	r3, [pc, #12]	; (800be50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800be44:	4618      	mov	r0, r3
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	bc80      	pop	{r7}
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	20000470 	.word	0x20000470

0800be54 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	220a      	movs	r2, #10
 800be60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800be62:	4b03      	ldr	r3, [pc, #12]	; (800be70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800be64:	4618      	mov	r0, r3
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	bc80      	pop	{r7}
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	200003a4 	.word	0x200003a4

0800be74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800be7e:	2302      	movs	r3, #2
 800be80:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d005      	beq.n	800be94 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800be94:	7bfb      	ldrb	r3, [r7, #15]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bc80      	pop	{r7}
 800be9e:	4770      	bx	lr

0800bea0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b087      	sub	sp, #28
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	4613      	mov	r3, r2
 800beac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800beb4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	68ba      	ldr	r2, [r7, #8]
 800beba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bebe:	88fa      	ldrh	r2, [r7, #6]
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	371c      	adds	r7, #28
 800becc:	46bd      	mov	sp, r7
 800bece:	bc80      	pop	{r7}
 800bed0:	4770      	bx	lr

0800bed2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b085      	sub	sp, #20
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bee2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3714      	adds	r7, #20
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bc80      	pop	{r7}
 800bef6:	4770      	bx	lr

0800bef8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf06:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d01c      	beq.n	800bf4c <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d115      	bne.n	800bf48 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	2181      	movs	r1, #129	; 0x81
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f001 fcb3 	bl	800d8aa <USBD_LL_Transmit>

      return USBD_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	e002      	b.n	800bf4e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e000      	b.n	800bf4e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800bf4c:	2302      	movs	r3, #2
  }
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b084      	sub	sp, #16
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf64:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d017      	beq.n	800bfa0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	7c1b      	ldrb	r3, [r3, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d109      	bne.n	800bf8c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf82:	2101      	movs	r1, #1
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f001 fcb3 	bl	800d8f0 <USBD_LL_PrepareReceive>
 800bf8a:	e007      	b.n	800bf9c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf92:	2340      	movs	r3, #64	; 0x40
 800bf94:	2101      	movs	r1, #1
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f001 fcaa 	bl	800d8f0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	e000      	b.n	800bfa2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bfa0:	2302      	movs	r3, #2
  }
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b084      	sub	sp, #16
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	60f8      	str	r0, [r7, #12]
 800bfb2:	60b9      	str	r1, [r7, #8]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	e01a      	b.n	800bff8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d003      	beq.n	800bfd4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d003      	beq.n	800bfe2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	79fa      	ldrb	r2, [r7, #7]
 800bfee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f001 fb17 	bl	800d624 <USBD_LL_Init>

  return USBD_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c00a:	2300      	movs	r3, #0
 800c00c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d006      	beq.n	800c022 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73fb      	strb	r3, [r7, #15]
 800c020:	e001      	b.n	800c026 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c022:	2302      	movs	r3, #2
 800c024:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c026:	7bfb      	ldrb	r3, [r7, #15]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3714      	adds	r7, #20
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bc80      	pop	{r7}
 800c030:	4770      	bx	lr

0800c032 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f001 fb4c 	bl	800d6d8 <USBD_LL_Start>

  return USBD_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800c04a:	b480      	push	{r7}
 800c04c:	b083      	sub	sp, #12
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	bc80      	pop	{r7}
 800c05c:	4770      	bx	lr

0800c05e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b084      	sub	sp, #16
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	460b      	mov	r3, r1
 800c068:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c06a:	2302      	movs	r3, #2
 800c06c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00c      	beq.n	800c092 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	78fa      	ldrb	r2, [r7, #3]
 800c082:	4611      	mov	r1, r2
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	4798      	blx	r3
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d101      	bne.n	800c092 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c092:	7bfb      	ldrb	r3, [r7, #15]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3710      	adds	r7, #16
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	78fa      	ldrb	r2, [r7, #3]
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	4798      	blx	r3
  return USBD_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b082      	sub	sp, #8
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 fe62 	bl	800cd9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c0f6:	f003 031f 	and.w	r3, r3, #31
 800c0fa:	2b02      	cmp	r3, #2
 800c0fc:	d016      	beq.n	800c12c <USBD_LL_SetupStage+0x6a>
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d81c      	bhi.n	800c13c <USBD_LL_SetupStage+0x7a>
 800c102:	2b00      	cmp	r3, #0
 800c104:	d002      	beq.n	800c10c <USBD_LL_SetupStage+0x4a>
 800c106:	2b01      	cmp	r3, #1
 800c108:	d008      	beq.n	800c11c <USBD_LL_SetupStage+0x5a>
 800c10a:	e017      	b.n	800c13c <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 f9c5 	bl	800c4a4 <USBD_StdDevReq>
    break;
 800c11a:	e01a      	b.n	800c152 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c122:	4619      	mov	r1, r3
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fa27 	bl	800c578 <USBD_StdItfReq>
    break;
 800c12a:	e012      	b.n	800c152 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 fa67 	bl	800c608 <USBD_StdEPReq>
    break;
 800c13a:	e00a      	b.n	800c152 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c142:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c146:	b2db      	uxtb	r3, r3
 800c148:	4619      	mov	r1, r3
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f001 fb24 	bl	800d798 <USBD_LL_StallEP>
    break;
 800c150:	bf00      	nop
  }

  return USBD_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	460b      	mov	r3, r1
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c16a:	7afb      	ldrb	r3, [r7, #11]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d14b      	bne.n	800c208 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c176:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d134      	bne.n	800c1ec <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	68da      	ldr	r2, [r3, #12]
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d919      	bls.n	800c1c2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	68da      	ldr	r2, [r3, #12]
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	1ad2      	subs	r2, r2, r3
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	68da      	ldr	r2, [r3, #12]
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d203      	bcs.n	800c1b0 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	e002      	b.n	800c1b6 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	f000 fee1 	bl	800cf82 <USBD_CtlContinueRx>
 800c1c0:	e038      	b.n	800c234 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00a      	beq.n	800c1e4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d105      	bne.n	800c1e4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f000 fede 	bl	800cfa6 <USBD_CtlSendStatus>
 800c1ea:	e023      	b.n	800c234 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c1f2:	2b05      	cmp	r3, #5
 800c1f4:	d11e      	bne.n	800c234 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c1fe:	2100      	movs	r1, #0
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f001 fac9 	bl	800d798 <USBD_LL_StallEP>
 800c206:	e015      	b.n	800c234 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00d      	beq.n	800c230 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d108      	bne.n	800c230 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	7afa      	ldrb	r2, [r7, #11]
 800c228:	4611      	mov	r1, r2
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	4798      	blx	r3
 800c22e:	e001      	b.n	800c234 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c230:	2302      	movs	r3, #2
 800c232:	e000      	b.n	800c236 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3718      	adds	r7, #24
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b086      	sub	sp, #24
 800c242:	af00      	add	r7, sp, #0
 800c244:	60f8      	str	r0, [r7, #12]
 800c246:	460b      	mov	r3, r1
 800c248:	607a      	str	r2, [r7, #4]
 800c24a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c24c:	7afb      	ldrb	r3, [r7, #11]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d17f      	bne.n	800c352 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3314      	adds	r3, #20
 800c256:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c25e:	2b02      	cmp	r3, #2
 800c260:	d15c      	bne.n	800c31c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	68da      	ldr	r2, [r3, #12]
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d915      	bls.n	800c29a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	68da      	ldr	r2, [r3, #12]
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	691b      	ldr	r3, [r3, #16]
 800c276:	1ad2      	subs	r2, r2, r3
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	b29b      	uxth	r3, r3
 800c282:	461a      	mov	r2, r3
 800c284:	6879      	ldr	r1, [r7, #4]
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f000 fe4b 	bl	800cf22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c28c:	2300      	movs	r3, #0
 800c28e:	2200      	movs	r2, #0
 800c290:	2100      	movs	r1, #0
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f001 fb2c 	bl	800d8f0 <USBD_LL_PrepareReceive>
 800c298:	e04e      	b.n	800c338 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	6912      	ldr	r2, [r2, #16]
 800c2a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2a6:	fb01 f202 	mul.w	r2, r1, r2
 800c2aa:	1a9b      	subs	r3, r3, r2
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d11c      	bne.n	800c2ea <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	689a      	ldr	r2, [r3, #8]
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d316      	bcc.n	800c2ea <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	689a      	ldr	r2, [r3, #8]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d20f      	bcs.n	800c2ea <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f000 fe27 	bl	800cf22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c2dc:	2300      	movs	r3, #0
 800c2de:	2200      	movs	r2, #0
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f001 fb04 	bl	800d8f0 <USBD_LL_PrepareReceive>
 800c2e8:	e026      	b.n	800c338 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00a      	beq.n	800c30c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c2fc:	2b03      	cmp	r3, #3
 800c2fe:	d105      	bne.n	800c30c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c30c:	2180      	movs	r1, #128	; 0x80
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f001 fa42 	bl	800d798 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f000 fe59 	bl	800cfcc <USBD_CtlReceiveStatus>
 800c31a:	e00d      	b.n	800c338 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c322:	2b04      	cmp	r3, #4
 800c324:	d004      	beq.n	800c330 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d103      	bne.n	800c338 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c330:	2180      	movs	r1, #128	; 0x80
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	f001 fa30 	bl	800d798 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d11d      	bne.n	800c37e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f7ff fe81 	bl	800c04a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800c350:	e015      	b.n	800c37e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c358:	695b      	ldr	r3, [r3, #20]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00d      	beq.n	800c37a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800c364:	2b03      	cmp	r3, #3
 800c366:	d108      	bne.n	800c37a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c36e:	695b      	ldr	r3, [r3, #20]
 800c370:	7afa      	ldrb	r2, [r7, #11]
 800c372:	4611      	mov	r1, r2
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	4798      	blx	r3
 800c378:	e001      	b.n	800c37e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c37a:	2302      	movs	r3, #2
 800c37c:	e000      	b.n	800c380 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c390:	2340      	movs	r3, #64	; 0x40
 800c392:	2200      	movs	r2, #0
 800c394:	2100      	movs	r1, #0
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f001 f9b9 	bl	800d70e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2240      	movs	r2, #64	; 0x40
 800c3a8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3ac:	2340      	movs	r3, #64	; 0x40
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	2180      	movs	r1, #128	; 0x80
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f001 f9ab 	bl	800d70e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2240      	movs	r2, #64	; 0x40
 800c3c2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d009      	beq.n	800c400 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	6852      	ldr	r2, [r2, #4]
 800c3f8:	b2d2      	uxtb	r2, r2
 800c3fa:	4611      	mov	r1, r2
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	4798      	blx	r3
  }

  return USBD_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c40a:	b480      	push	{r7}
 800c40c:	b083      	sub	sp, #12
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	460b      	mov	r3, r1
 800c414:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	78fa      	ldrb	r2, [r7, #3]
 800c41a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	370c      	adds	r7, #12
 800c422:	46bd      	mov	sp, r7
 800c424:	bc80      	pop	{r7}
 800c426:	4770      	bx	lr

0800c428 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2204      	movs	r2, #4
 800c440:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bc80      	pop	{r7}
 800c44e:	4770      	bx	lr

0800c450 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	370c      	adds	r7, #12
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bc80      	pop	{r7}
 800c46e:	4770      	bx	lr

0800c470 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c47e:	2b03      	cmp	r3, #3
 800c480:	d10b      	bne.n	800c49a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c488:	69db      	ldr	r3, [r3, #28]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d005      	beq.n	800c49a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c494:	69db      	ldr	r3, [r3, #28]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4ba:	2b40      	cmp	r3, #64	; 0x40
 800c4bc:	d005      	beq.n	800c4ca <USBD_StdDevReq+0x26>
 800c4be:	2b40      	cmp	r3, #64	; 0x40
 800c4c0:	d84f      	bhi.n	800c562 <USBD_StdDevReq+0xbe>
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d009      	beq.n	800c4da <USBD_StdDevReq+0x36>
 800c4c6:	2b20      	cmp	r3, #32
 800c4c8:	d14b      	bne.n	800c562 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	6839      	ldr	r1, [r7, #0]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	4798      	blx	r3
    break;
 800c4d8:	e048      	b.n	800c56c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	785b      	ldrb	r3, [r3, #1]
 800c4de:	2b09      	cmp	r3, #9
 800c4e0:	d839      	bhi.n	800c556 <USBD_StdDevReq+0xb2>
 800c4e2:	a201      	add	r2, pc, #4	; (adr r2, 800c4e8 <USBD_StdDevReq+0x44>)
 800c4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e8:	0800c539 	.word	0x0800c539
 800c4ec:	0800c54d 	.word	0x0800c54d
 800c4f0:	0800c557 	.word	0x0800c557
 800c4f4:	0800c543 	.word	0x0800c543
 800c4f8:	0800c557 	.word	0x0800c557
 800c4fc:	0800c51b 	.word	0x0800c51b
 800c500:	0800c511 	.word	0x0800c511
 800c504:	0800c557 	.word	0x0800c557
 800c508:	0800c52f 	.word	0x0800c52f
 800c50c:	0800c525 	.word	0x0800c525
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f9da 	bl	800c8cc <USBD_GetDescriptor>
      break;
 800c518:	e022      	b.n	800c560 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 facf 	bl	800cac0 <USBD_SetAddress>
      break;
 800c522:	e01d      	b.n	800c560 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fb0e 	bl	800cb48 <USBD_SetConfig>
      break;
 800c52c:	e018      	b.n	800c560 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 fb97 	bl	800cc64 <USBD_GetConfig>
      break;
 800c536:	e013      	b.n	800c560 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fbc7 	bl	800ccce <USBD_GetStatus>
      break;
 800c540:	e00e      	b.n	800c560 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800c542:	6839      	ldr	r1, [r7, #0]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fbf5 	bl	800cd34 <USBD_SetFeature>
      break;
 800c54a:	e009      	b.n	800c560 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800c54c:	6839      	ldr	r1, [r7, #0]
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 fc04 	bl	800cd5c <USBD_ClrFeature>
      break;
 800c554:	e004      	b.n	800c560 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fc5c 	bl	800ce16 <USBD_CtlError>
      break;
 800c55e:	bf00      	nop
    }
    break;
 800c560:	e004      	b.n	800c56c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fc56 	bl	800ce16 <USBD_CtlError>
    break;
 800c56a:	bf00      	nop
  }

  return ret;
 800c56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop

0800c578 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c582:	2300      	movs	r3, #0
 800c584:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c58e:	2b40      	cmp	r3, #64	; 0x40
 800c590:	d005      	beq.n	800c59e <USBD_StdItfReq+0x26>
 800c592:	2b40      	cmp	r3, #64	; 0x40
 800c594:	d82e      	bhi.n	800c5f4 <USBD_StdItfReq+0x7c>
 800c596:	2b00      	cmp	r3, #0
 800c598:	d001      	beq.n	800c59e <USBD_StdItfReq+0x26>
 800c59a:	2b20      	cmp	r3, #32
 800c59c:	d12a      	bne.n	800c5f4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	d81d      	bhi.n	800c5e6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	889b      	ldrh	r3, [r3, #4]
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d813      	bhi.n	800c5dc <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	6839      	ldr	r1, [r7, #0]
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	4798      	blx	r3
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	88db      	ldrh	r3, [r3, #6]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d110      	bne.n	800c5f0 <USBD_StdItfReq+0x78>
 800c5ce:	7bfb      	ldrb	r3, [r7, #15]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10d      	bne.n	800c5f0 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fce6 	bl	800cfa6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c5da:	e009      	b.n	800c5f0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fc19 	bl	800ce16 <USBD_CtlError>
      break;
 800c5e4:	e004      	b.n	800c5f0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fc14 	bl	800ce16 <USBD_CtlError>
      break;
 800c5ee:	e000      	b.n	800c5f2 <USBD_StdItfReq+0x7a>
      break;
 800c5f0:	bf00      	nop
    }
    break;
 800c5f2:	e004      	b.n	800c5fe <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fc0d 	bl	800ce16 <USBD_CtlError>
    break;
 800c5fc:	bf00      	nop
  }

  return USBD_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c612:	2300      	movs	r3, #0
 800c614:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	889b      	ldrh	r3, [r3, #4]
 800c61a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c624:	2b40      	cmp	r3, #64	; 0x40
 800c626:	d007      	beq.n	800c638 <USBD_StdEPReq+0x30>
 800c628:	2b40      	cmp	r3, #64	; 0x40
 800c62a:	f200 8144 	bhi.w	800c8b6 <USBD_StdEPReq+0x2ae>
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00a      	beq.n	800c648 <USBD_StdEPReq+0x40>
 800c632:	2b20      	cmp	r3, #32
 800c634:	f040 813f 	bne.w	800c8b6 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	6839      	ldr	r1, [r7, #0]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	4798      	blx	r3
    break;
 800c646:	e13b      	b.n	800c8c0 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c650:	2b20      	cmp	r3, #32
 800c652:	d10a      	bne.n	800c66a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	6839      	ldr	r1, [r7, #0]
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	4798      	blx	r3
 800c662:	4603      	mov	r3, r0
 800c664:	73fb      	strb	r3, [r7, #15]

      return ret;
 800c666:	7bfb      	ldrb	r3, [r7, #15]
 800c668:	e12b      	b.n	800c8c2 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	785b      	ldrb	r3, [r3, #1]
 800c66e:	2b03      	cmp	r3, #3
 800c670:	d007      	beq.n	800c682 <USBD_StdEPReq+0x7a>
 800c672:	2b03      	cmp	r3, #3
 800c674:	f300 8119 	bgt.w	800c8aa <USBD_StdEPReq+0x2a2>
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d072      	beq.n	800c762 <USBD_StdEPReq+0x15a>
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d03a      	beq.n	800c6f6 <USBD_StdEPReq+0xee>
 800c680:	e113      	b.n	800c8aa <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d002      	beq.n	800c692 <USBD_StdEPReq+0x8a>
 800c68c:	2b03      	cmp	r3, #3
 800c68e:	d015      	beq.n	800c6bc <USBD_StdEPReq+0xb4>
 800c690:	e02b      	b.n	800c6ea <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c692:	7bbb      	ldrb	r3, [r7, #14]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00c      	beq.n	800c6b2 <USBD_StdEPReq+0xaa>
 800c698:	7bbb      	ldrb	r3, [r7, #14]
 800c69a:	2b80      	cmp	r3, #128	; 0x80
 800c69c:	d009      	beq.n	800c6b2 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c69e:	7bbb      	ldrb	r3, [r7, #14]
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f001 f878 	bl	800d798 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c6a8:	2180      	movs	r1, #128	; 0x80
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f001 f874 	bl	800d798 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c6b0:	e020      	b.n	800c6f4 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800c6b2:	6839      	ldr	r1, [r7, #0]
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fbae 	bl	800ce16 <USBD_CtlError>
        break;
 800c6ba:	e01b      	b.n	800c6f4 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	885b      	ldrh	r3, [r3, #2]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d10e      	bne.n	800c6e2 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00b      	beq.n	800c6e2 <USBD_StdEPReq+0xda>
 800c6ca:	7bbb      	ldrb	r3, [r7, #14]
 800c6cc:	2b80      	cmp	r3, #128	; 0x80
 800c6ce:	d008      	beq.n	800c6e2 <USBD_StdEPReq+0xda>
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	88db      	ldrh	r3, [r3, #6]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d104      	bne.n	800c6e2 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800c6d8:	7bbb      	ldrb	r3, [r7, #14]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f001 f85b 	bl	800d798 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fc5f 	bl	800cfa6 <USBD_CtlSendStatus>

        break;
 800c6e8:	e004      	b.n	800c6f4 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 fb92 	bl	800ce16 <USBD_CtlError>
        break;
 800c6f2:	bf00      	nop
      }
      break;
 800c6f4:	e0de      	b.n	800c8b4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d002      	beq.n	800c706 <USBD_StdEPReq+0xfe>
 800c700:	2b03      	cmp	r3, #3
 800c702:	d015      	beq.n	800c730 <USBD_StdEPReq+0x128>
 800c704:	e026      	b.n	800c754 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c706:	7bbb      	ldrb	r3, [r7, #14]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00c      	beq.n	800c726 <USBD_StdEPReq+0x11e>
 800c70c:	7bbb      	ldrb	r3, [r7, #14]
 800c70e:	2b80      	cmp	r3, #128	; 0x80
 800c710:	d009      	beq.n	800c726 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c712:	7bbb      	ldrb	r3, [r7, #14]
 800c714:	4619      	mov	r1, r3
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f001 f83e 	bl	800d798 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c71c:	2180      	movs	r1, #128	; 0x80
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f001 f83a 	bl	800d798 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c724:	e01c      	b.n	800c760 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 fb74 	bl	800ce16 <USBD_CtlError>
        break;
 800c72e:	e017      	b.n	800c760 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	885b      	ldrh	r3, [r3, #2]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d112      	bne.n	800c75e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c738:	7bbb      	ldrb	r3, [r7, #14]
 800c73a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d004      	beq.n	800c74c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800c742:	7bbb      	ldrb	r3, [r7, #14]
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f001 f845 	bl	800d7d6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 fc2a 	bl	800cfa6 <USBD_CtlSendStatus>
        }
        break;
 800c752:	e004      	b.n	800c75e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800c754:	6839      	ldr	r1, [r7, #0]
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 fb5d 	bl	800ce16 <USBD_CtlError>
        break;
 800c75c:	e000      	b.n	800c760 <USBD_StdEPReq+0x158>
        break;
 800c75e:	bf00      	nop
      }
      break;
 800c760:	e0a8      	b.n	800c8b4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d002      	beq.n	800c772 <USBD_StdEPReq+0x16a>
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	d031      	beq.n	800c7d4 <USBD_StdEPReq+0x1cc>
 800c770:	e095      	b.n	800c89e <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c772:	7bbb      	ldrb	r3, [r7, #14]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d007      	beq.n	800c788 <USBD_StdEPReq+0x180>
 800c778:	7bbb      	ldrb	r3, [r7, #14]
 800c77a:	2b80      	cmp	r3, #128	; 0x80
 800c77c:	d004      	beq.n	800c788 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fb48 	bl	800ce16 <USBD_CtlError>
          break;
 800c786:	e08f      	b.n	800c8a8 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	da0b      	bge.n	800c7a8 <USBD_StdEPReq+0x1a0>
 800c790:	7bbb      	ldrb	r3, [r7, #14]
 800c792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c796:	4613      	mov	r3, r2
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	4413      	add	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	3310      	adds	r3, #16
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	e00a      	b.n	800c7be <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c7a8:	7bbb      	ldrb	r3, [r7, #14]
 800c7aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	4413      	add	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	4413      	add	r3, r2
 800c7be:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 fb8c 	bl	800ceea <USBD_CtlSendData>
          break;
 800c7d2:	e069      	b.n	800c8a8 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800c7d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	da11      	bge.n	800c800 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c7dc:	7bbb      	ldrb	r3, [r7, #14]
 800c7de:	f003 020f 	and.w	r2, r3, #15
 800c7e2:	6879      	ldr	r1, [r7, #4]
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	440b      	add	r3, r1
 800c7ee:	3318      	adds	r3, #24
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d117      	bne.n	800c826 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 fb0c 	bl	800ce16 <USBD_CtlError>
            break;
 800c7fe:	e053      	b.n	800c8a8 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c800:	7bbb      	ldrb	r3, [r7, #14]
 800c802:	f003 020f 	and.w	r2, r3, #15
 800c806:	6879      	ldr	r1, [r7, #4]
 800c808:	4613      	mov	r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	4413      	add	r3, r2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	440b      	add	r3, r1
 800c812:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d104      	bne.n	800c826 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 faf9 	bl	800ce16 <USBD_CtlError>
            break;
 800c824:	e040      	b.n	800c8a8 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c826:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	da0b      	bge.n	800c846 <USBD_StdEPReq+0x23e>
 800c82e:	7bbb      	ldrb	r3, [r7, #14]
 800c830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c834:	4613      	mov	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4413      	add	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	3310      	adds	r3, #16
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	4413      	add	r3, r2
 800c842:	3304      	adds	r3, #4
 800c844:	e00a      	b.n	800c85c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c846:	7bbb      	ldrb	r3, [r7, #14]
 800c848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c84c:	4613      	mov	r3, r2
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	4413      	add	r3, r2
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	4413      	add	r3, r2
 800c85c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c85e:	7bbb      	ldrb	r3, [r7, #14]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <USBD_StdEPReq+0x262>
 800c864:	7bbb      	ldrb	r3, [r7, #14]
 800c866:	2b80      	cmp	r3, #128	; 0x80
 800c868:	d103      	bne.n	800c872 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	2200      	movs	r2, #0
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	e00e      	b.n	800c890 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800c872:	7bbb      	ldrb	r3, [r7, #14]
 800c874:	4619      	mov	r1, r3
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 ffcc 	bl	800d814 <USBD_LL_IsStallEP>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d003      	beq.n	800c88a <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	2201      	movs	r2, #1
 800c886:	601a      	str	r2, [r3, #0]
 800c888:	e002      	b.n	800c890 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	2200      	movs	r2, #0
 800c88e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2202      	movs	r2, #2
 800c894:	4619      	mov	r1, r3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fb27 	bl	800ceea <USBD_CtlSendData>
          break;
 800c89c:	e004      	b.n	800c8a8 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800c89e:	6839      	ldr	r1, [r7, #0]
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 fab8 	bl	800ce16 <USBD_CtlError>
        break;
 800c8a6:	bf00      	nop
      }
      break;
 800c8a8:	e004      	b.n	800c8b4 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800c8aa:	6839      	ldr	r1, [r7, #0]
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 fab2 	bl	800ce16 <USBD_CtlError>
      break;
 800c8b2:	bf00      	nop
    }
    break;
 800c8b4:	e004      	b.n	800c8c0 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 faac 	bl	800ce16 <USBD_CtlError>
    break;
 800c8be:	bf00      	nop
  }

  return ret;
 800c8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
	...

0800c8cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	885b      	ldrh	r3, [r3, #2]
 800c8da:	0a1b      	lsrs	r3, r3, #8
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	2b06      	cmp	r3, #6
 800c8e2:	f200 80c9 	bhi.w	800ca78 <USBD_GetDescriptor+0x1ac>
 800c8e6:	a201      	add	r2, pc, #4	; (adr r2, 800c8ec <USBD_GetDescriptor+0x20>)
 800c8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ec:	0800c909 	.word	0x0800c909
 800c8f0:	0800c921 	.word	0x0800c921
 800c8f4:	0800c961 	.word	0x0800c961
 800c8f8:	0800ca79 	.word	0x0800ca79
 800c8fc:	0800ca79 	.word	0x0800ca79
 800c900:	0800ca25 	.word	0x0800ca25
 800c904:	0800ca4b 	.word	0x0800ca4b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	7c12      	ldrb	r2, [r2, #16]
 800c914:	f107 010a 	add.w	r1, r7, #10
 800c918:	4610      	mov	r0, r2
 800c91a:	4798      	blx	r3
 800c91c:	60f8      	str	r0, [r7, #12]
    break;
 800c91e:	e0b0      	b.n	800ca82 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	7c1b      	ldrb	r3, [r3, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10d      	bne.n	800c944 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c930:	f107 020a 	add.w	r2, r7, #10
 800c934:	4610      	mov	r0, r2
 800c936:	4798      	blx	r3
 800c938:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	3301      	adds	r3, #1
 800c93e:	2202      	movs	r2, #2
 800c940:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c942:	e09e      	b.n	800ca82 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c94c:	f107 020a 	add.w	r2, r7, #10
 800c950:	4610      	mov	r0, r2
 800c952:	4798      	blx	r3
 800c954:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	3301      	adds	r3, #1
 800c95a:	2202      	movs	r2, #2
 800c95c:	701a      	strb	r2, [r3, #0]
    break;
 800c95e:	e090      	b.n	800ca82 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	885b      	ldrh	r3, [r3, #2]
 800c964:	b2db      	uxtb	r3, r3
 800c966:	2b05      	cmp	r3, #5
 800c968:	d856      	bhi.n	800ca18 <USBD_GetDescriptor+0x14c>
 800c96a:	a201      	add	r2, pc, #4	; (adr r2, 800c970 <USBD_GetDescriptor+0xa4>)
 800c96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c970:	0800c989 	.word	0x0800c989
 800c974:	0800c9a1 	.word	0x0800c9a1
 800c978:	0800c9b9 	.word	0x0800c9b9
 800c97c:	0800c9d1 	.word	0x0800c9d1
 800c980:	0800c9e9 	.word	0x0800c9e9
 800c984:	0800ca01 	.word	0x0800ca01
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	7c12      	ldrb	r2, [r2, #16]
 800c994:	f107 010a 	add.w	r1, r7, #10
 800c998:	4610      	mov	r0, r2
 800c99a:	4798      	blx	r3
 800c99c:	60f8      	str	r0, [r7, #12]
      break;
 800c99e:	e040      	b.n	800ca22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	7c12      	ldrb	r2, [r2, #16]
 800c9ac:	f107 010a 	add.w	r1, r7, #10
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	4798      	blx	r3
 800c9b4:	60f8      	str	r0, [r7, #12]
      break;
 800c9b6:	e034      	b.n	800ca22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	7c12      	ldrb	r2, [r2, #16]
 800c9c4:	f107 010a 	add.w	r1, r7, #10
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	4798      	blx	r3
 800c9cc:	60f8      	str	r0, [r7, #12]
      break;
 800c9ce:	e028      	b.n	800ca22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	7c12      	ldrb	r2, [r2, #16]
 800c9dc:	f107 010a 	add.w	r1, r7, #10
 800c9e0:	4610      	mov	r0, r2
 800c9e2:	4798      	blx	r3
 800c9e4:	60f8      	str	r0, [r7, #12]
      break;
 800c9e6:	e01c      	b.n	800ca22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c9ee:	695b      	ldr	r3, [r3, #20]
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	7c12      	ldrb	r2, [r2, #16]
 800c9f4:	f107 010a 	add.w	r1, r7, #10
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	4798      	blx	r3
 800c9fc:	60f8      	str	r0, [r7, #12]
      break;
 800c9fe:	e010      	b.n	800ca22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ca06:	699b      	ldr	r3, [r3, #24]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	7c12      	ldrb	r2, [r2, #16]
 800ca0c:	f107 010a 	add.w	r1, r7, #10
 800ca10:	4610      	mov	r0, r2
 800ca12:	4798      	blx	r3
 800ca14:	60f8      	str	r0, [r7, #12]
      break;
 800ca16:	e004      	b.n	800ca22 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800ca18:	6839      	ldr	r1, [r7, #0]
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 f9fb 	bl	800ce16 <USBD_CtlError>
      return;
 800ca20:	e04b      	b.n	800caba <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800ca22:	e02e      	b.n	800ca82 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	7c1b      	ldrb	r3, [r3, #16]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d109      	bne.n	800ca40 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca34:	f107 020a 	add.w	r2, r7, #10
 800ca38:	4610      	mov	r0, r2
 800ca3a:	4798      	blx	r3
 800ca3c:	60f8      	str	r0, [r7, #12]
      break;
 800ca3e:	e020      	b.n	800ca82 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ca40:	6839      	ldr	r1, [r7, #0]
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f9e7 	bl	800ce16 <USBD_CtlError>
      return;
 800ca48:	e037      	b.n	800caba <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	7c1b      	ldrb	r3, [r3, #16]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d10d      	bne.n	800ca6e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca5a:	f107 020a 	add.w	r2, r7, #10
 800ca5e:	4610      	mov	r0, r2
 800ca60:	4798      	blx	r3
 800ca62:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3301      	adds	r3, #1
 800ca68:	2207      	movs	r2, #7
 800ca6a:	701a      	strb	r2, [r3, #0]
      break;
 800ca6c:	e009      	b.n	800ca82 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ca6e:	6839      	ldr	r1, [r7, #0]
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 f9d0 	bl	800ce16 <USBD_CtlError>
      return;
 800ca76:	e020      	b.n	800caba <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800ca78:	6839      	ldr	r1, [r7, #0]
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 f9cb 	bl	800ce16 <USBD_CtlError>
    return;
 800ca80:	e01b      	b.n	800caba <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800ca82:	897b      	ldrh	r3, [r7, #10]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d011      	beq.n	800caac <USBD_GetDescriptor+0x1e0>
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	88db      	ldrh	r3, [r3, #6]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00d      	beq.n	800caac <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	88da      	ldrh	r2, [r3, #6]
 800ca94:	897b      	ldrh	r3, [r7, #10]
 800ca96:	4293      	cmp	r3, r2
 800ca98:	bf28      	it	cs
 800ca9a:	4613      	movcs	r3, r2
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800caa0:	897b      	ldrh	r3, [r7, #10]
 800caa2:	461a      	mov	r2, r3
 800caa4:	68f9      	ldr	r1, [r7, #12]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fa1f 	bl	800ceea <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	88db      	ldrh	r3, [r3, #6]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d102      	bne.n	800caba <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fa76 	bl	800cfa6 <USBD_CtlSendStatus>
  }
}
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	889b      	ldrh	r3, [r3, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d130      	bne.n	800cb34 <USBD_SetAddress+0x74>
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	88db      	ldrh	r3, [r3, #6]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d12c      	bne.n	800cb34 <USBD_SetAddress+0x74>
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	885b      	ldrh	r3, [r3, #2]
 800cade:	2b7f      	cmp	r3, #127	; 0x7f
 800cae0:	d828      	bhi.n	800cb34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	885b      	ldrh	r3, [r3, #2]
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800caf4:	2b03      	cmp	r3, #3
 800caf6:	d104      	bne.n	800cb02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800caf8:	6839      	ldr	r1, [r7, #0]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f98b 	bl	800ce16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb00:	e01d      	b.n	800cb3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	7bfa      	ldrb	r2, [r7, #15]
 800cb06:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 feac 	bl	800d86c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fa46 	bl	800cfa6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cb1a:	7bfb      	ldrb	r3, [r7, #15]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d004      	beq.n	800cb2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2202      	movs	r2, #2
 800cb24:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb28:	e009      	b.n	800cb3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb32:	e004      	b.n	800cb3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb34:	6839      	ldr	r1, [r7, #0]
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f96d 	bl	800ce16 <USBD_CtlError>
  }
}
 800cb3c:	bf00      	nop
 800cb3e:	bf00      	nop
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	885b      	ldrh	r3, [r3, #2]
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	4b41      	ldr	r3, [pc, #260]	; (800cc60 <USBD_SetConfig+0x118>)
 800cb5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb5c:	4b40      	ldr	r3, [pc, #256]	; (800cc60 <USBD_SetConfig+0x118>)
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d904      	bls.n	800cb6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800cb64:	6839      	ldr	r1, [r7, #0]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f955 	bl	800ce16 <USBD_CtlError>
 800cb6c:	e075      	b.n	800cc5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	d002      	beq.n	800cb7e <USBD_SetConfig+0x36>
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d023      	beq.n	800cbc4 <USBD_SetConfig+0x7c>
 800cb7c:	e062      	b.n	800cc44 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800cb7e:	4b38      	ldr	r3, [pc, #224]	; (800cc60 <USBD_SetConfig+0x118>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d01a      	beq.n	800cbbc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800cb86:	4b36      	ldr	r3, [pc, #216]	; (800cc60 <USBD_SetConfig+0x118>)
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2203      	movs	r2, #3
 800cb94:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cb98:	4b31      	ldr	r3, [pc, #196]	; (800cc60 <USBD_SetConfig+0x118>)
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f7ff fa5d 	bl	800c05e <USBD_SetClassConfig>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d104      	bne.n	800cbb4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800cbaa:	6839      	ldr	r1, [r7, #0]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f932 	bl	800ce16 <USBD_CtlError>
          return;
 800cbb2:	e052      	b.n	800cc5a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f9f6 	bl	800cfa6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800cbba:	e04e      	b.n	800cc5a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f9f2 	bl	800cfa6 <USBD_CtlSendStatus>
      break;
 800cbc2:	e04a      	b.n	800cc5a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cbc4:	4b26      	ldr	r3, [pc, #152]	; (800cc60 <USBD_SetConfig+0x118>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d112      	bne.n	800cbf2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2202      	movs	r2, #2
 800cbd0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800cbd4:	4b22      	ldr	r3, [pc, #136]	; (800cc60 <USBD_SetConfig+0x118>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	461a      	mov	r2, r3
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800cbde:	4b20      	ldr	r3, [pc, #128]	; (800cc60 <USBD_SetConfig+0x118>)
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7ff fa59 	bl	800c09c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f9db 	bl	800cfa6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800cbf0:	e033      	b.n	800cc5a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800cbf2:	4b1b      	ldr	r3, [pc, #108]	; (800cc60 <USBD_SetConfig+0x118>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d01d      	beq.n	800cc3c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	4619      	mov	r1, r3
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff fa47 	bl	800c09c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cc0e:	4b14      	ldr	r3, [pc, #80]	; (800cc60 <USBD_SetConfig+0x118>)
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	461a      	mov	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cc18:	4b11      	ldr	r3, [pc, #68]	; (800cc60 <USBD_SetConfig+0x118>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7ff fa1d 	bl	800c05e <USBD_SetClassConfig>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d104      	bne.n	800cc34 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800cc2a:	6839      	ldr	r1, [r7, #0]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 f8f2 	bl	800ce16 <USBD_CtlError>
          return;
 800cc32:	e012      	b.n	800cc5a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f9b6 	bl	800cfa6 <USBD_CtlSendStatus>
      break;
 800cc3a:	e00e      	b.n	800cc5a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f9b2 	bl	800cfa6 <USBD_CtlSendStatus>
      break;
 800cc42:	e00a      	b.n	800cc5a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f8e5 	bl	800ce16 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800cc4c:	4b04      	ldr	r3, [pc, #16]	; (800cc60 <USBD_SetConfig+0x118>)
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	4619      	mov	r1, r3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff fa22 	bl	800c09c <USBD_ClrClassConfig>
      break;
 800cc58:	bf00      	nop
    }
  }
}
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	20000a3c 	.word	0x20000a3c

0800cc64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	88db      	ldrh	r3, [r3, #6]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d004      	beq.n	800cc80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f8cc 	bl	800ce16 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800cc7e:	e022      	b.n	800ccc6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	dc02      	bgt.n	800cc90 <USBD_GetConfig+0x2c>
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dc03      	bgt.n	800cc96 <USBD_GetConfig+0x32>
 800cc8e:	e015      	b.n	800ccbc <USBD_GetConfig+0x58>
 800cc90:	2b03      	cmp	r3, #3
 800cc92:	d00b      	beq.n	800ccac <USBD_GetConfig+0x48>
 800cc94:	e012      	b.n	800ccbc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3308      	adds	r3, #8
 800cca0:	2201      	movs	r2, #1
 800cca2:	4619      	mov	r1, r3
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f920 	bl	800ceea <USBD_CtlSendData>
      break;
 800ccaa:	e00c      	b.n	800ccc6 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	3304      	adds	r3, #4
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 f918 	bl	800ceea <USBD_CtlSendData>
      break;
 800ccba:	e004      	b.n	800ccc6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f8a9 	bl	800ce16 <USBD_CtlError>
      break;
 800ccc4:	bf00      	nop
}
 800ccc6:	bf00      	nop
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b082      	sub	sp, #8
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
 800ccd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ccde:	3b01      	subs	r3, #1
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d81e      	bhi.n	800cd22 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	88db      	ldrh	r3, [r3, #6]
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d004      	beq.n	800ccf6 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ccec:	6839      	ldr	r1, [r7, #0]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f891 	bl	800ce16 <USBD_CtlError>
      break;
 800ccf4:	e01a      	b.n	800cd2c <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d005      	beq.n	800cd12 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	f043 0202 	orr.w	r2, r3, #2
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	330c      	adds	r3, #12
 800cd16:	2202      	movs	r2, #2
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f8e5 	bl	800ceea <USBD_CtlSendData>
    break;
 800cd20:	e004      	b.n	800cd2c <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 f876 	bl	800ce16 <USBD_CtlError>
    break;
 800cd2a:	bf00      	nop
  }
}
 800cd2c:	bf00      	nop
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	885b      	ldrh	r3, [r3, #2]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d106      	bne.n	800cd54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2201      	movs	r2, #1
 800cd4a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 f929 	bl	800cfa6 <USBD_CtlSendStatus>
  }

}
 800cd54:	bf00      	nop
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d80b      	bhi.n	800cd8a <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	885b      	ldrh	r3, [r3, #2]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d10c      	bne.n	800cd94 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 f90f 	bl	800cfa6 <USBD_CtlSendStatus>
    }
    break;
 800cd88:	e004      	b.n	800cd94 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f842 	bl	800ce16 <USBD_CtlError>
    break;
 800cd92:	e000      	b.n	800cd96 <USBD_ClrFeature+0x3a>
    break;
 800cd94:	bf00      	nop
  }
}
 800cd96:	bf00      	nop
 800cd98:	3708      	adds	r7, #8
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd9e:	b480      	push	{r7}
 800cda0:	b083      	sub	sp, #12
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	781a      	ldrb	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	785a      	ldrb	r2, [r3, #1]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	3302      	adds	r3, #2
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	3303      	adds	r3, #3
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	021b      	lsls	r3, r3, #8
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	4413      	add	r3, r2
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	3305      	adds	r3, #5
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	021b      	lsls	r3, r3, #8
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	4413      	add	r3, r2
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	3306      	adds	r3, #6
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	3307      	adds	r3, #7
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	021b      	lsls	r3, r3, #8
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	4413      	add	r3, r2
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	80da      	strh	r2, [r3, #6]

}
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bc80      	pop	{r7}
 800ce14:	4770      	bx	lr

0800ce16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
 800ce1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800ce20:	2180      	movs	r1, #128	; 0x80
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fcb8 	bl	800d798 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800ce28:	2100      	movs	r1, #0
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 fcb4 	bl	800d798 <USBD_LL_StallEP>
}
 800ce30:	bf00      	nop
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce44:	2300      	movs	r3, #0
 800ce46:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d032      	beq.n	800ceb4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ce4e:	68f8      	ldr	r0, [r7, #12]
 800ce50:	f000 f834 	bl	800cebc <USBD_GetLen>
 800ce54:	4603      	mov	r3, r0
 800ce56:	3301      	adds	r3, #1
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	1c5a      	adds	r2, r3, #1
 800ce66:	75fa      	strb	r2, [r7, #23]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	7812      	ldrb	r2, [r2, #0]
 800ce72:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ce74:	7dfb      	ldrb	r3, [r7, #23]
 800ce76:	1c5a      	adds	r2, r3, #1
 800ce78:	75fa      	strb	r2, [r7, #23]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	4413      	add	r3, r2
 800ce80:	2203      	movs	r2, #3
 800ce82:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ce84:	e012      	b.n	800ceac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	1c5a      	adds	r2, r3, #1
 800ce8a:	60fa      	str	r2, [r7, #12]
 800ce8c:	7dfa      	ldrb	r2, [r7, #23]
 800ce8e:	1c51      	adds	r1, r2, #1
 800ce90:	75f9      	strb	r1, [r7, #23]
 800ce92:	4611      	mov	r1, r2
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	440a      	add	r2, r1
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
 800ce9e:	1c5a      	adds	r2, r3, #1
 800cea0:	75fa      	strb	r2, [r7, #23]
 800cea2:	461a      	mov	r2, r3
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	4413      	add	r3, r2
 800cea8:	2200      	movs	r2, #0
 800ceaa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1e8      	bne.n	800ce86 <USBD_GetString+0x4e>
    }
  }
}
 800ceb4:	bf00      	nop
 800ceb6:	3718      	adds	r7, #24
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800cec4:	2300      	movs	r3, #0
 800cec6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800cec8:	e005      	b.n	800ced6 <USBD_GetLen+0x1a>
    {
        len++;
 800ceca:	7bfb      	ldrb	r3, [r7, #15]
 800cecc:	3301      	adds	r3, #1
 800cece:	73fb      	strb	r3, [r7, #15]
        buf++;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	3301      	adds	r3, #1
 800ced4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1f5      	bne.n	800ceca <USBD_GetLen+0xe>
    }

    return len;
 800cede:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3714      	adds	r7, #20
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bc80      	pop	{r7}
 800cee8:	4770      	bx	lr

0800ceea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	4613      	mov	r3, r2
 800cef6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2202      	movs	r2, #2
 800cefc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800cf00:	88fa      	ldrh	r2, [r7, #6]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cf06:	88fa      	ldrh	r2, [r7, #6]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cf0c:	88fb      	ldrh	r3, [r7, #6]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	2100      	movs	r1, #0
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f000 fcc9 	bl	800d8aa <USBD_LL_Transmit>

  return USBD_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b084      	sub	sp, #16
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	60f8      	str	r0, [r7, #12]
 800cf2a:	60b9      	str	r1, [r7, #8]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cf30:	88fb      	ldrh	r3, [r7, #6]
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	2100      	movs	r1, #0
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f000 fcb7 	bl	800d8aa <USBD_LL_Transmit>

  return USBD_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	60f8      	str	r0, [r7, #12]
 800cf4e:	60b9      	str	r1, [r7, #8]
 800cf50:	4613      	mov	r3, r2
 800cf52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2203      	movs	r2, #3
 800cf58:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800cf5c:	88fa      	ldrh	r2, [r7, #6]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800cf64:	88fa      	ldrh	r2, [r7, #6]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800cf6c:	88fb      	ldrh	r3, [r7, #6]
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	2100      	movs	r1, #0
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f000 fcbc 	bl	800d8f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b084      	sub	sp, #16
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	60b9      	str	r1, [r7, #8]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf90:	88fb      	ldrh	r3, [r7, #6]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	2100      	movs	r1, #0
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f000 fcaa 	bl	800d8f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2204      	movs	r2, #4
 800cfb2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	2200      	movs	r2, #0
 800cfba:	2100      	movs	r1, #0
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fc74 	bl	800d8aa <USBD_LL_Transmit>

  return USBD_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2205      	movs	r2, #5
 800cfd8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cfdc:	2300      	movs	r3, #0
 800cfde:	2200      	movs	r2, #0
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 fc84 	bl	800d8f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cff8:	2200      	movs	r2, #0
 800cffa:	4912      	ldr	r1, [pc, #72]	; (800d044 <MX_USB_DEVICE_Init+0x50>)
 800cffc:	4812      	ldr	r0, [pc, #72]	; (800d048 <MX_USB_DEVICE_Init+0x54>)
 800cffe:	f7fe ffd4 	bl	800bfaa <USBD_Init>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d008:	f7f6 fa2c 	bl	8003464 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d00c:	490f      	ldr	r1, [pc, #60]	; (800d04c <MX_USB_DEVICE_Init+0x58>)
 800d00e:	480e      	ldr	r0, [pc, #56]	; (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d010:	f7fe fff6 	bl	800c000 <USBD_RegisterClass>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d01a:	f7f6 fa23 	bl	8003464 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d01e:	490c      	ldr	r1, [pc, #48]	; (800d050 <MX_USB_DEVICE_Init+0x5c>)
 800d020:	4809      	ldr	r0, [pc, #36]	; (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d022:	f7fe ff27 	bl	800be74 <USBD_CDC_RegisterInterface>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d02c:	f7f6 fa1a 	bl	8003464 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d030:	4805      	ldr	r0, [pc, #20]	; (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d032:	f7fe fffe 	bl	800c032 <USBD_Start>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d03c:	f7f6 fa12 	bl	8003464 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d040:	bf00      	nop
 800d042:	bd80      	pop	{r7, pc}
 800d044:	200004c4 	.word	0x200004c4
 800d048:	20000a40 	.word	0x20000a40
 800d04c:	200003b0 	.word	0x200003b0
 800d050:	200004b4 	.word	0x200004b4

0800d054 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d058:	2200      	movs	r2, #0
 800d05a:	4905      	ldr	r1, [pc, #20]	; (800d070 <CDC_Init_FS+0x1c>)
 800d05c:	4805      	ldr	r0, [pc, #20]	; (800d074 <CDC_Init_FS+0x20>)
 800d05e:	f7fe ff1f 	bl	800bea0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d062:	4905      	ldr	r1, [pc, #20]	; (800d078 <CDC_Init_FS+0x24>)
 800d064:	4803      	ldr	r0, [pc, #12]	; (800d074 <CDC_Init_FS+0x20>)
 800d066:	f7fe ff34 	bl	800bed2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d06a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	20000d5c 	.word	0x20000d5c
 800d074:	20000a40 	.word	0x20000a40
 800d078:	20000cdc 	.word	0x20000cdc

0800d07c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d07c:	b480      	push	{r7}
 800d07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d080:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d082:	4618      	mov	r0, r3
 800d084:	46bd      	mov	sp, r7
 800d086:	bc80      	pop	{r7}
 800d088:	4770      	bx	lr
	...

0800d08c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	6039      	str	r1, [r7, #0]
 800d096:	71fb      	strb	r3, [r7, #7]
 800d098:	4613      	mov	r3, r2
 800d09a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	2b23      	cmp	r3, #35	; 0x23
 800d0a0:	d866      	bhi.n	800d170 <CDC_Control_FS+0xe4>
 800d0a2:	a201      	add	r2, pc, #4	; (adr r2, 800d0a8 <CDC_Control_FS+0x1c>)
 800d0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a8:	0800d171 	.word	0x0800d171
 800d0ac:	0800d171 	.word	0x0800d171
 800d0b0:	0800d171 	.word	0x0800d171
 800d0b4:	0800d171 	.word	0x0800d171
 800d0b8:	0800d171 	.word	0x0800d171
 800d0bc:	0800d171 	.word	0x0800d171
 800d0c0:	0800d171 	.word	0x0800d171
 800d0c4:	0800d171 	.word	0x0800d171
 800d0c8:	0800d171 	.word	0x0800d171
 800d0cc:	0800d171 	.word	0x0800d171
 800d0d0:	0800d171 	.word	0x0800d171
 800d0d4:	0800d171 	.word	0x0800d171
 800d0d8:	0800d171 	.word	0x0800d171
 800d0dc:	0800d171 	.word	0x0800d171
 800d0e0:	0800d171 	.word	0x0800d171
 800d0e4:	0800d171 	.word	0x0800d171
 800d0e8:	0800d171 	.word	0x0800d171
 800d0ec:	0800d171 	.word	0x0800d171
 800d0f0:	0800d171 	.word	0x0800d171
 800d0f4:	0800d171 	.word	0x0800d171
 800d0f8:	0800d171 	.word	0x0800d171
 800d0fc:	0800d171 	.word	0x0800d171
 800d100:	0800d171 	.word	0x0800d171
 800d104:	0800d171 	.word	0x0800d171
 800d108:	0800d171 	.word	0x0800d171
 800d10c:	0800d171 	.word	0x0800d171
 800d110:	0800d171 	.word	0x0800d171
 800d114:	0800d171 	.word	0x0800d171
 800d118:	0800d171 	.word	0x0800d171
 800d11c:	0800d171 	.word	0x0800d171
 800d120:	0800d171 	.word	0x0800d171
 800d124:	0800d171 	.word	0x0800d171
 800d128:	0800d171 	.word	0x0800d171
 800d12c:	0800d139 	.word	0x0800d139
 800d130:	0800d171 	.word	0x0800d171
 800d134:	0800d171 	.word	0x0800d171
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	2220      	movs	r2, #32
 800d13c:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	3301      	adds	r3, #1
 800d142:	22c2      	movs	r2, #194	; 0xc2
 800d144:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	3302      	adds	r3, #2
 800d14a:	2201      	movs	r2, #1
 800d14c:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	3303      	adds	r3, #3
 800d152:	2200      	movs	r2, #0
 800d154:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	3304      	adds	r3, #4
 800d15a:	2200      	movs	r2, #0
 800d15c:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	3305      	adds	r3, #5
 800d162:	2200      	movs	r2, #0
 800d164:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	3306      	adds	r3, #6
 800d16a:	2208      	movs	r2, #8
 800d16c:	701a      	strb	r2, [r3, #0]
    break;
 800d16e:	e000      	b.n	800d172 <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d170:	bf00      	nop
  }

  return (USBD_OK);
 800d172:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d174:	4618      	mov	r0, r3
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	bc80      	pop	{r7}
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop

0800d180 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800d18e:	e018      	b.n	800d1c2 <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	4413      	add	r3, r2
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	2b0a      	cmp	r3, #10
 800d19a:	d005      	beq.n	800d1a8 <CDC_Receive_FS+0x28>
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	2b0d      	cmp	r3, #13
 800d1a6:	d102      	bne.n	800d1ae <CDC_Receive_FS+0x2e>
 800d1a8:	4b12      	ldr	r3, [pc, #72]	; (800d1f4 <CDC_Receive_FS+0x74>)
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7f6 f93c 	bl	8003434 <Write_to_circ_buffer>
	  i++;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d3e1      	bcc.n	800d190 <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 f811 	bl	800d1fc <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d1da:	6879      	ldr	r1, [r7, #4]
 800d1dc:	4806      	ldr	r0, [pc, #24]	; (800d1f8 <CDC_Receive_FS+0x78>)
 800d1de:	f7fe fe78 	bl	800bed2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d1e2:	4805      	ldr	r0, [pc, #20]	; (800d1f8 <CDC_Receive_FS+0x78>)
 800d1e4:	f7fe feb7 	bl	800bf56 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d1e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	200007d8 	.word	0x200007d8
 800d1f8:	20000a40 	.word	0x20000a40

0800d1fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	460b      	mov	r3, r1
 800d206:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d208:	2300      	movs	r3, #0
 800d20a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d20c:	4b0d      	ldr	r3, [pc, #52]	; (800d244 <CDC_Transmit_FS+0x48>)
 800d20e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d212:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d21e:	2301      	movs	r3, #1
 800d220:	e00b      	b.n	800d23a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d222:	887b      	ldrh	r3, [r7, #2]
 800d224:	461a      	mov	r2, r3
 800d226:	6879      	ldr	r1, [r7, #4]
 800d228:	4806      	ldr	r0, [pc, #24]	; (800d244 <CDC_Transmit_FS+0x48>)
 800d22a:	f7fe fe39 	bl	800bea0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d22e:	4805      	ldr	r0, [pc, #20]	; (800d244 <CDC_Transmit_FS+0x48>)
 800d230:	f7fe fe62 	bl	800bef8 <USBD_CDC_TransmitPacket>
 800d234:	4603      	mov	r3, r0
 800d236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d238:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	20000a40 	.word	0x20000a40

0800d248 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	4603      	mov	r3, r0
 800d250:	6039      	str	r1, [r7, #0]
 800d252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	2212      	movs	r2, #18
 800d258:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d25a:	4b03      	ldr	r3, [pc, #12]	; (800d268 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	bc80      	pop	{r7}
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	200004e0 	.word	0x200004e0

0800d26c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	4603      	mov	r3, r0
 800d274:	6039      	str	r1, [r7, #0]
 800d276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	2204      	movs	r2, #4
 800d27c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d27e:	4b03      	ldr	r3, [pc, #12]	; (800d28c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d280:	4618      	mov	r0, r3
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	bc80      	pop	{r7}
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	200004f4 	.word	0x200004f4

0800d290 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	4603      	mov	r3, r0
 800d298:	6039      	str	r1, [r7, #0]
 800d29a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d29c:	79fb      	ldrb	r3, [r7, #7]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d105      	bne.n	800d2ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2a2:	683a      	ldr	r2, [r7, #0]
 800d2a4:	4907      	ldr	r1, [pc, #28]	; (800d2c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d2a6:	4808      	ldr	r0, [pc, #32]	; (800d2c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d2a8:	f7ff fdc6 	bl	800ce38 <USBD_GetString>
 800d2ac:	e004      	b.n	800d2b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	4904      	ldr	r1, [pc, #16]	; (800d2c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d2b2:	4805      	ldr	r0, [pc, #20]	; (800d2c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d2b4:	f7ff fdc0 	bl	800ce38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2b8:	4b02      	ldr	r3, [pc, #8]	; (800d2c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	20000e5c 	.word	0x20000e5c
 800d2c8:	08011b98 	.word	0x08011b98

0800d2cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	6039      	str	r1, [r7, #0]
 800d2d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d2d8:	683a      	ldr	r2, [r7, #0]
 800d2da:	4904      	ldr	r1, [pc, #16]	; (800d2ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d2dc:	4804      	ldr	r0, [pc, #16]	; (800d2f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d2de:	f7ff fdab 	bl	800ce38 <USBD_GetString>
  return USBD_StrDesc;
 800d2e2:	4b02      	ldr	r3, [pc, #8]	; (800d2ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	20000e5c 	.word	0x20000e5c
 800d2f0:	08011ba4 	.word	0x08011ba4

0800d2f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	6039      	str	r1, [r7, #0]
 800d2fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	221a      	movs	r2, #26
 800d304:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d306:	f000 f843 	bl	800d390 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d30a:	4b02      	ldr	r3, [pc, #8]	; (800d314 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	200004f8 	.word	0x200004f8

0800d318 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	4603      	mov	r3, r0
 800d320:	6039      	str	r1, [r7, #0]
 800d322:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d324:	79fb      	ldrb	r3, [r7, #7]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d105      	bne.n	800d336 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d32a:	683a      	ldr	r2, [r7, #0]
 800d32c:	4907      	ldr	r1, [pc, #28]	; (800d34c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d32e:	4808      	ldr	r0, [pc, #32]	; (800d350 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d330:	f7ff fd82 	bl	800ce38 <USBD_GetString>
 800d334:	e004      	b.n	800d340 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d336:	683a      	ldr	r2, [r7, #0]
 800d338:	4904      	ldr	r1, [pc, #16]	; (800d34c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d33a:	4805      	ldr	r0, [pc, #20]	; (800d350 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d33c:	f7ff fd7c 	bl	800ce38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d340:	4b02      	ldr	r3, [pc, #8]	; (800d34c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d342:	4618      	mov	r0, r3
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	20000e5c 	.word	0x20000e5c
 800d350:	08011bb4 	.word	0x08011bb4

0800d354 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	6039      	str	r1, [r7, #0]
 800d35e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d360:	79fb      	ldrb	r3, [r7, #7]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d105      	bne.n	800d372 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	4907      	ldr	r1, [pc, #28]	; (800d388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d36a:	4808      	ldr	r0, [pc, #32]	; (800d38c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d36c:	f7ff fd64 	bl	800ce38 <USBD_GetString>
 800d370:	e004      	b.n	800d37c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d372:	683a      	ldr	r2, [r7, #0]
 800d374:	4904      	ldr	r1, [pc, #16]	; (800d388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d376:	4805      	ldr	r0, [pc, #20]	; (800d38c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d378:	f7ff fd5e 	bl	800ce38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d37c:	4b02      	ldr	r3, [pc, #8]	; (800d388 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20000e5c 	.word	0x20000e5c
 800d38c:	08011bc0 	.word	0x08011bc0

0800d390 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d396:	4b0f      	ldr	r3, [pc, #60]	; (800d3d4 <Get_SerialNum+0x44>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d39c:	4b0e      	ldr	r3, [pc, #56]	; (800d3d8 <Get_SerialNum+0x48>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d3a2:	4b0e      	ldr	r3, [pc, #56]	; (800d3dc <Get_SerialNum+0x4c>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d009      	beq.n	800d3ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d3b6:	2208      	movs	r2, #8
 800d3b8:	4909      	ldr	r1, [pc, #36]	; (800d3e0 <Get_SerialNum+0x50>)
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f000 f814 	bl	800d3e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d3c0:	2204      	movs	r2, #4
 800d3c2:	4908      	ldr	r1, [pc, #32]	; (800d3e4 <Get_SerialNum+0x54>)
 800d3c4:	68b8      	ldr	r0, [r7, #8]
 800d3c6:	f000 f80f 	bl	800d3e8 <IntToUnicode>
  }
}
 800d3ca:	bf00      	nop
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	1ff80050 	.word	0x1ff80050
 800d3d8:	1ff80054 	.word	0x1ff80054
 800d3dc:	1ff80058 	.word	0x1ff80058
 800d3e0:	200004fa 	.word	0x200004fa
 800d3e4:	2000050a 	.word	0x2000050a

0800d3e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b087      	sub	sp, #28
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	75fb      	strb	r3, [r7, #23]
 800d3fe:	e027      	b.n	800d450 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	0f1b      	lsrs	r3, r3, #28
 800d404:	2b09      	cmp	r3, #9
 800d406:	d80b      	bhi.n	800d420 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	0f1b      	lsrs	r3, r3, #28
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	7dfb      	ldrb	r3, [r7, #23]
 800d410:	005b      	lsls	r3, r3, #1
 800d412:	4619      	mov	r1, r3
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	440b      	add	r3, r1
 800d418:	3230      	adds	r2, #48	; 0x30
 800d41a:	b2d2      	uxtb	r2, r2
 800d41c:	701a      	strb	r2, [r3, #0]
 800d41e:	e00a      	b.n	800d436 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	0f1b      	lsrs	r3, r3, #28
 800d424:	b2da      	uxtb	r2, r3
 800d426:	7dfb      	ldrb	r3, [r7, #23]
 800d428:	005b      	lsls	r3, r3, #1
 800d42a:	4619      	mov	r1, r3
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	440b      	add	r3, r1
 800d430:	3237      	adds	r2, #55	; 0x37
 800d432:	b2d2      	uxtb	r2, r2
 800d434:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	011b      	lsls	r3, r3, #4
 800d43a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d43c:	7dfb      	ldrb	r3, [r7, #23]
 800d43e:	005b      	lsls	r3, r3, #1
 800d440:	3301      	adds	r3, #1
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	4413      	add	r3, r2
 800d446:	2200      	movs	r2, #0
 800d448:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	3301      	adds	r3, #1
 800d44e:	75fb      	strb	r3, [r7, #23]
 800d450:	7dfa      	ldrb	r2, [r7, #23]
 800d452:	79fb      	ldrb	r3, [r7, #7]
 800d454:	429a      	cmp	r2, r3
 800d456:	d3d3      	bcc.n	800d400 <IntToUnicode+0x18>
  }
}
 800d458:	bf00      	nop
 800d45a:	bf00      	nop
 800d45c:	371c      	adds	r7, #28
 800d45e:	46bd      	mov	sp, r7
 800d460:	bc80      	pop	{r7}
 800d462:	4770      	bx	lr

0800d464 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	460b      	mov	r3, r1
 800d46e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800d470:	78fb      	ldrb	r3, [r7, #3]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d106      	bne.n	800d484 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800d476:	4b09      	ldr	r3, [pc, #36]	; (800d49c <HAL_PCDEx_SetConnectionState+0x38>)
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	4a08      	ldr	r2, [pc, #32]	; (800d49c <HAL_PCDEx_SetConnectionState+0x38>)
 800d47c:	f043 0301 	orr.w	r3, r3, #1
 800d480:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800d482:	e005      	b.n	800d490 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800d484:	4b05      	ldr	r3, [pc, #20]	; (800d49c <HAL_PCDEx_SetConnectionState+0x38>)
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	4a04      	ldr	r2, [pc, #16]	; (800d49c <HAL_PCDEx_SetConnectionState+0x38>)
 800d48a:	f023 0301 	bic.w	r3, r3, #1
 800d48e:	6053      	str	r3, [r2, #4]
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	bc80      	pop	{r7}
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	40010000 	.word	0x40010000

0800d4a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a0d      	ldr	r2, [pc, #52]	; (800d4e4 <HAL_PCD_MspInit+0x44>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d113      	bne.n	800d4da <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d4b2:	4b0d      	ldr	r3, [pc, #52]	; (800d4e8 <HAL_PCD_MspInit+0x48>)
 800d4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b6:	4a0c      	ldr	r2, [pc, #48]	; (800d4e8 <HAL_PCD_MspInit+0x48>)
 800d4b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d4bc:	6253      	str	r3, [r2, #36]	; 0x24
 800d4be:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <HAL_PCD_MspInit+0x48>)
 800d4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4c6:	60fb      	str	r3, [r7, #12]
 800d4c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	2101      	movs	r1, #1
 800d4ce:	2014      	movs	r0, #20
 800d4d0:	f7f6 fd8d 	bl	8003fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d4d4:	2014      	movs	r0, #20
 800d4d6:	f7f6 fda6 	bl	8004026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d4da:	bf00      	nop
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	40005c00 	.word	0x40005c00
 800d4e8:	40023800 	.word	0x40023800

0800d4ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d500:	4619      	mov	r1, r3
 800d502:	4610      	mov	r0, r2
 800d504:	f7fe fddd 	bl	800c0c2 <USBD_LL_SetupStage>
}
 800d508:	bf00      	nop
 800d50a:	3708      	adds	r7, #8
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	460b      	mov	r3, r1
 800d51a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d522:	78fa      	ldrb	r2, [r7, #3]
 800d524:	6879      	ldr	r1, [r7, #4]
 800d526:	4613      	mov	r3, r2
 800d528:	009b      	lsls	r3, r3, #2
 800d52a:	4413      	add	r3, r2
 800d52c:	00db      	lsls	r3, r3, #3
 800d52e:	440b      	add	r3, r1
 800d530:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	78fb      	ldrb	r3, [r7, #3]
 800d538:	4619      	mov	r1, r3
 800d53a:	f7fe fe0f 	bl	800c15c <USBD_LL_DataOutStage>
}
 800d53e:	bf00      	nop
 800d540:	3708      	adds	r7, #8
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b082      	sub	sp, #8
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
 800d54e:	460b      	mov	r3, r1
 800d550:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d558:	78fa      	ldrb	r2, [r7, #3]
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	4613      	mov	r3, r2
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	4413      	add	r3, r2
 800d562:	00db      	lsls	r3, r3, #3
 800d564:	440b      	add	r3, r1
 800d566:	333c      	adds	r3, #60	; 0x3c
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	78fb      	ldrb	r3, [r7, #3]
 800d56c:	4619      	mov	r1, r3
 800d56e:	f7fe fe66 	bl	800c23e <USBD_LL_DataInStage>
}
 800d572:	bf00      	nop
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b082      	sub	sp, #8
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fe ff71 	bl	800c470 <USBD_LL_SOF>
}
 800d58e:	bf00      	nop
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b084      	sub	sp, #16
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	2b02      	cmp	r3, #2
 800d5a8:	d001      	beq.n	800d5ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d5aa:	f7f5 ff5b 	bl	8003464 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d5b4:	7bfa      	ldrb	r2, [r7, #15]
 800d5b6:	4611      	mov	r1, r2
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fe ff26 	bl	800c40a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7fe fedf 	bl	800c388 <USBD_LL_Reset>
}
 800d5ca:	bf00      	nop
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
	...

0800d5d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fe ff20 	bl	800c428 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	699b      	ldr	r3, [r3, #24]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d005      	beq.n	800d5fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5f0:	4b04      	ldr	r3, [pc, #16]	; (800d604 <HAL_PCD_SuspendCallback+0x30>)
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	4a03      	ldr	r2, [pc, #12]	; (800d604 <HAL_PCD_SuspendCallback+0x30>)
 800d5f6:	f043 0306 	orr.w	r3, r3, #6
 800d5fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d5fc:	bf00      	nop
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	e000ed00 	.word	0xe000ed00

0800d608 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe ff1a 	bl	800c450 <USBD_LL_Resume>
}
 800d61c:	bf00      	nop
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d62c:	4a28      	ldr	r2, [pc, #160]	; (800d6d0 <USBD_LL_Init+0xac>)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4a26      	ldr	r2, [pc, #152]	; (800d6d0 <USBD_LL_Init+0xac>)
 800d638:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800d63c:	4b24      	ldr	r3, [pc, #144]	; (800d6d0 <USBD_LL_Init+0xac>)
 800d63e:	4a25      	ldr	r2, [pc, #148]	; (800d6d4 <USBD_LL_Init+0xb0>)
 800d640:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d642:	4b23      	ldr	r3, [pc, #140]	; (800d6d0 <USBD_LL_Init+0xac>)
 800d644:	2208      	movs	r2, #8
 800d646:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d648:	4b21      	ldr	r3, [pc, #132]	; (800d6d0 <USBD_LL_Init+0xac>)
 800d64a:	2202      	movs	r2, #2
 800d64c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d64e:	4b20      	ldr	r3, [pc, #128]	; (800d6d0 <USBD_LL_Init+0xac>)
 800d650:	2202      	movs	r2, #2
 800d652:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d654:	4b1e      	ldr	r3, [pc, #120]	; (800d6d0 <USBD_LL_Init+0xac>)
 800d656:	2200      	movs	r2, #0
 800d658:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d65a:	4b1d      	ldr	r3, [pc, #116]	; (800d6d0 <USBD_LL_Init+0xac>)
 800d65c:	2200      	movs	r2, #0
 800d65e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d660:	481b      	ldr	r0, [pc, #108]	; (800d6d0 <USBD_LL_Init+0xac>)
 800d662:	f7f7 feab 	bl	80053bc <HAL_PCD_Init>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d66c:	f7f5 fefa 	bl	8003464 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d676:	2318      	movs	r3, #24
 800d678:	2200      	movs	r2, #0
 800d67a:	2100      	movs	r1, #0
 800d67c:	f7f9 fa88 	bl	8006b90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d686:	2358      	movs	r3, #88	; 0x58
 800d688:	2200      	movs	r2, #0
 800d68a:	2180      	movs	r1, #128	; 0x80
 800d68c:	f7f9 fa80 	bl	8006b90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d696:	23c0      	movs	r3, #192	; 0xc0
 800d698:	2200      	movs	r2, #0
 800d69a:	2181      	movs	r1, #129	; 0x81
 800d69c:	f7f9 fa78 	bl	8006b90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d6a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	2101      	movs	r1, #1
 800d6ae:	f7f9 fa6f 	bl	8006b90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d6b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6bc:	2200      	movs	r2, #0
 800d6be:	2182      	movs	r1, #130	; 0x82
 800d6c0:	f7f9 fa66 	bl	8006b90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3708      	adds	r7, #8
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	2000105c 	.word	0x2000105c
 800d6d4:	40005c00 	.word	0x40005c00

0800d6d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7f7 ff42 	bl	8005578 <HAL_PCD_Start>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f000 f944 	bl	800d988 <USBD_Get_USB_Status>
 800d700:	4603      	mov	r3, r0
 800d702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d704:	7bbb      	ldrb	r3, [r7, #14]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b084      	sub	sp, #16
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	4608      	mov	r0, r1
 800d718:	4611      	mov	r1, r2
 800d71a:	461a      	mov	r2, r3
 800d71c:	4603      	mov	r3, r0
 800d71e:	70fb      	strb	r3, [r7, #3]
 800d720:	460b      	mov	r3, r1
 800d722:	70bb      	strb	r3, [r7, #2]
 800d724:	4613      	mov	r3, r2
 800d726:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d72c:	2300      	movs	r3, #0
 800d72e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d736:	78bb      	ldrb	r3, [r7, #2]
 800d738:	883a      	ldrh	r2, [r7, #0]
 800d73a:	78f9      	ldrb	r1, [r7, #3]
 800d73c:	f7f8 f85e 	bl	80057fc <HAL_PCD_EP_Open>
 800d740:	4603      	mov	r3, r0
 800d742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d744:	7bfb      	ldrb	r3, [r7, #15]
 800d746:	4618      	mov	r0, r3
 800d748:	f000 f91e 	bl	800d988 <USBD_Get_USB_Status>
 800d74c:	4603      	mov	r3, r0
 800d74e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d750:	7bbb      	ldrb	r3, [r7, #14]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b084      	sub	sp, #16
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
 800d762:	460b      	mov	r3, r1
 800d764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d766:	2300      	movs	r3, #0
 800d768:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d76a:	2300      	movs	r3, #0
 800d76c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d774:	78fa      	ldrb	r2, [r7, #3]
 800d776:	4611      	mov	r1, r2
 800d778:	4618      	mov	r0, r3
 800d77a:	f7f8 f8a5 	bl	80058c8 <HAL_PCD_EP_Close>
 800d77e:	4603      	mov	r3, r0
 800d780:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d782:	7bfb      	ldrb	r3, [r7, #15]
 800d784:	4618      	mov	r0, r3
 800d786:	f000 f8ff 	bl	800d988 <USBD_Get_USB_Status>
 800d78a:	4603      	mov	r3, r0
 800d78c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d78e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d7b2:	78fa      	ldrb	r2, [r7, #3]
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7f8 f965 	bl	8005a86 <HAL_PCD_EP_SetStall>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7c0:	7bfb      	ldrb	r3, [r7, #15]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 f8e0 	bl	800d988 <USBD_Get_USB_Status>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b084      	sub	sp, #16
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
 800d7de:	460b      	mov	r3, r1
 800d7e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d7f0:	78fa      	ldrb	r2, [r7, #3]
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7f8 f998 	bl	8005b2a <HAL_PCD_EP_ClrStall>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7fe:	7bfb      	ldrb	r3, [r7, #15]
 800d800:	4618      	mov	r0, r3
 800d802:	f000 f8c1 	bl	800d988 <USBD_Get_USB_Status>
 800d806:	4603      	mov	r3, r0
 800d808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d80a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d814:	b480      	push	{r7}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	460b      	mov	r3, r1
 800d81e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d826:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	da0c      	bge.n	800d84a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d830:	78fb      	ldrb	r3, [r7, #3]
 800d832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d836:	68f9      	ldr	r1, [r7, #12]
 800d838:	1c5a      	adds	r2, r3, #1
 800d83a:	4613      	mov	r3, r2
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4413      	add	r3, r2
 800d840:	00db      	lsls	r3, r3, #3
 800d842:	440b      	add	r3, r1
 800d844:	3302      	adds	r3, #2
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	e00b      	b.n	800d862 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d84a:	78fb      	ldrb	r3, [r7, #3]
 800d84c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d850:	68f9      	ldr	r1, [r7, #12]
 800d852:	4613      	mov	r3, r2
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	00db      	lsls	r3, r3, #3
 800d85a:	440b      	add	r3, r1
 800d85c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d860:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d862:	4618      	mov	r0, r3
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	bc80      	pop	{r7}
 800d86a:	4770      	bx	lr

0800d86c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	460b      	mov	r3, r1
 800d876:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d878:	2300      	movs	r3, #0
 800d87a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d886:	78fa      	ldrb	r2, [r7, #3]
 800d888:	4611      	mov	r1, r2
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7f7 ff91 	bl	80057b2 <HAL_PCD_SetAddress>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d894:	7bfb      	ldrb	r3, [r7, #15]
 800d896:	4618      	mov	r0, r3
 800d898:	f000 f876 	bl	800d988 <USBD_Get_USB_Status>
 800d89c:	4603      	mov	r3, r0
 800d89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b086      	sub	sp, #24
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	60f8      	str	r0, [r7, #12]
 800d8b2:	607a      	str	r2, [r7, #4]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	72fb      	strb	r3, [r7, #11]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d8cc:	893b      	ldrh	r3, [r7, #8]
 800d8ce:	7af9      	ldrb	r1, [r7, #11]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	f7f8 f895 	bl	8005a00 <HAL_PCD_EP_Transmit>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8da:	7dfb      	ldrb	r3, [r7, #23]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 f853 	bl	800d988 <USBD_Get_USB_Status>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d8e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3718      	adds	r7, #24
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	607a      	str	r2, [r7, #4]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	72fb      	strb	r3, [r7, #11]
 800d900:	4613      	mov	r3, r2
 800d902:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d904:	2300      	movs	r3, #0
 800d906:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d908:	2300      	movs	r3, #0
 800d90a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d912:	893b      	ldrh	r3, [r7, #8]
 800d914:	7af9      	ldrb	r1, [r7, #11]
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	f7f8 f81e 	bl	8005958 <HAL_PCD_EP_Receive>
 800d91c:	4603      	mov	r3, r0
 800d91e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d920:	7dfb      	ldrb	r3, [r7, #23]
 800d922:	4618      	mov	r0, r3
 800d924:	f000 f830 	bl	800d988 <USBD_Get_USB_Status>
 800d928:	4603      	mov	r3, r0
 800d92a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d92c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3718      	adds	r7, #24
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	460b      	mov	r3, r1
 800d940:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d948:	78fa      	ldrb	r2, [r7, #3]
 800d94a:	4611      	mov	r1, r2
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7f8 f840 	bl	80059d2 <HAL_PCD_EP_GetRxCount>
 800d952:	4603      	mov	r3, r0
}
 800d954:	4618      	mov	r0, r3
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d964:	4b02      	ldr	r3, [pc, #8]	; (800d970 <USBD_static_malloc+0x14>)
}
 800d966:	4618      	mov	r0, r3
 800d968:	370c      	adds	r7, #12
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bc80      	pop	{r7}
 800d96e:	4770      	bx	lr
 800d970:	20001348 	.word	0x20001348

0800d974 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]

}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	bc80      	pop	{r7}
 800d984:	4770      	bx	lr
	...

0800d988 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	4603      	mov	r3, r0
 800d990:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d992:	2300      	movs	r3, #0
 800d994:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d996:	79fb      	ldrb	r3, [r7, #7]
 800d998:	2b03      	cmp	r3, #3
 800d99a:	d817      	bhi.n	800d9cc <USBD_Get_USB_Status+0x44>
 800d99c:	a201      	add	r2, pc, #4	; (adr r2, 800d9a4 <USBD_Get_USB_Status+0x1c>)
 800d99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a2:	bf00      	nop
 800d9a4:	0800d9b5 	.word	0x0800d9b5
 800d9a8:	0800d9bb 	.word	0x0800d9bb
 800d9ac:	0800d9c1 	.word	0x0800d9c1
 800d9b0:	0800d9c7 	.word	0x0800d9c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d9b8:	e00b      	b.n	800d9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9ba:	2302      	movs	r3, #2
 800d9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800d9be:	e008      	b.n	800d9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d9c4:	e005      	b.n	800d9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d9c6:	2302      	movs	r3, #2
 800d9c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d9ca:	e002      	b.n	800d9d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d9cc:	2302      	movs	r3, #2
 800d9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d9d0:	bf00      	nop
  }
  return usb_status;
 800d9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3714      	adds	r7, #20
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bc80      	pop	{r7}
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop

0800d9e0 <atof>:
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	f001 bab5 	b.w	800ef50 <strtod>
	...

0800d9e8 <__errno>:
 800d9e8:	4b01      	ldr	r3, [pc, #4]	; (800d9f0 <__errno+0x8>)
 800d9ea:	6818      	ldr	r0, [r3, #0]
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	20000514 	.word	0x20000514

0800d9f4 <__libc_init_array>:
 800d9f4:	b570      	push	{r4, r5, r6, lr}
 800d9f6:	2600      	movs	r6, #0
 800d9f8:	4d0c      	ldr	r5, [pc, #48]	; (800da2c <__libc_init_array+0x38>)
 800d9fa:	4c0d      	ldr	r4, [pc, #52]	; (800da30 <__libc_init_array+0x3c>)
 800d9fc:	1b64      	subs	r4, r4, r5
 800d9fe:	10a4      	asrs	r4, r4, #2
 800da00:	42a6      	cmp	r6, r4
 800da02:	d109      	bne.n	800da18 <__libc_init_array+0x24>
 800da04:	f004 f862 	bl	8011acc <_init>
 800da08:	2600      	movs	r6, #0
 800da0a:	4d0a      	ldr	r5, [pc, #40]	; (800da34 <__libc_init_array+0x40>)
 800da0c:	4c0a      	ldr	r4, [pc, #40]	; (800da38 <__libc_init_array+0x44>)
 800da0e:	1b64      	subs	r4, r4, r5
 800da10:	10a4      	asrs	r4, r4, #2
 800da12:	42a6      	cmp	r6, r4
 800da14:	d105      	bne.n	800da22 <__libc_init_array+0x2e>
 800da16:	bd70      	pop	{r4, r5, r6, pc}
 800da18:	f855 3b04 	ldr.w	r3, [r5], #4
 800da1c:	4798      	blx	r3
 800da1e:	3601      	adds	r6, #1
 800da20:	e7ee      	b.n	800da00 <__libc_init_array+0xc>
 800da22:	f855 3b04 	ldr.w	r3, [r5], #4
 800da26:	4798      	blx	r3
 800da28:	3601      	adds	r6, #1
 800da2a:	e7f2      	b.n	800da12 <__libc_init_array+0x1e>
 800da2c:	080120f8 	.word	0x080120f8
 800da30:	080120f8 	.word	0x080120f8
 800da34:	080120f8 	.word	0x080120f8
 800da38:	080120fc 	.word	0x080120fc

0800da3c <memcpy>:
 800da3c:	440a      	add	r2, r1
 800da3e:	4291      	cmp	r1, r2
 800da40:	f100 33ff 	add.w	r3, r0, #4294967295
 800da44:	d100      	bne.n	800da48 <memcpy+0xc>
 800da46:	4770      	bx	lr
 800da48:	b510      	push	{r4, lr}
 800da4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da4e:	4291      	cmp	r1, r2
 800da50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da54:	d1f9      	bne.n	800da4a <memcpy+0xe>
 800da56:	bd10      	pop	{r4, pc}

0800da58 <memset>:
 800da58:	4603      	mov	r3, r0
 800da5a:	4402      	add	r2, r0
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d100      	bne.n	800da62 <memset+0xa>
 800da60:	4770      	bx	lr
 800da62:	f803 1b01 	strb.w	r1, [r3], #1
 800da66:	e7f9      	b.n	800da5c <memset+0x4>

0800da68 <__cvt>:
 800da68:	2b00      	cmp	r3, #0
 800da6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da6e:	461f      	mov	r7, r3
 800da70:	bfbb      	ittet	lt
 800da72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800da76:	461f      	movlt	r7, r3
 800da78:	2300      	movge	r3, #0
 800da7a:	232d      	movlt	r3, #45	; 0x2d
 800da7c:	b088      	sub	sp, #32
 800da7e:	4614      	mov	r4, r2
 800da80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800da84:	7013      	strb	r3, [r2, #0]
 800da86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da88:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800da8c:	f023 0820 	bic.w	r8, r3, #32
 800da90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da94:	d005      	beq.n	800daa2 <__cvt+0x3a>
 800da96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800da9a:	d100      	bne.n	800da9e <__cvt+0x36>
 800da9c:	3501      	adds	r5, #1
 800da9e:	2302      	movs	r3, #2
 800daa0:	e000      	b.n	800daa4 <__cvt+0x3c>
 800daa2:	2303      	movs	r3, #3
 800daa4:	aa07      	add	r2, sp, #28
 800daa6:	9204      	str	r2, [sp, #16]
 800daa8:	aa06      	add	r2, sp, #24
 800daaa:	e9cd a202 	strd	sl, r2, [sp, #8]
 800daae:	e9cd 3500 	strd	r3, r5, [sp]
 800dab2:	4622      	mov	r2, r4
 800dab4:	463b      	mov	r3, r7
 800dab6:	f001 fb5f 	bl	800f178 <_dtoa_r>
 800daba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dabe:	4606      	mov	r6, r0
 800dac0:	d102      	bne.n	800dac8 <__cvt+0x60>
 800dac2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dac4:	07db      	lsls	r3, r3, #31
 800dac6:	d522      	bpl.n	800db0e <__cvt+0xa6>
 800dac8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dacc:	eb06 0905 	add.w	r9, r6, r5
 800dad0:	d110      	bne.n	800daf4 <__cvt+0x8c>
 800dad2:	7833      	ldrb	r3, [r6, #0]
 800dad4:	2b30      	cmp	r3, #48	; 0x30
 800dad6:	d10a      	bne.n	800daee <__cvt+0x86>
 800dad8:	2200      	movs	r2, #0
 800dada:	2300      	movs	r3, #0
 800dadc:	4620      	mov	r0, r4
 800dade:	4639      	mov	r1, r7
 800dae0:	f7f2 ff84 	bl	80009ec <__aeabi_dcmpeq>
 800dae4:	b918      	cbnz	r0, 800daee <__cvt+0x86>
 800dae6:	f1c5 0501 	rsb	r5, r5, #1
 800daea:	f8ca 5000 	str.w	r5, [sl]
 800daee:	f8da 3000 	ldr.w	r3, [sl]
 800daf2:	4499      	add	r9, r3
 800daf4:	2200      	movs	r2, #0
 800daf6:	2300      	movs	r3, #0
 800daf8:	4620      	mov	r0, r4
 800dafa:	4639      	mov	r1, r7
 800dafc:	f7f2 ff76 	bl	80009ec <__aeabi_dcmpeq>
 800db00:	b108      	cbz	r0, 800db06 <__cvt+0x9e>
 800db02:	f8cd 901c 	str.w	r9, [sp, #28]
 800db06:	2230      	movs	r2, #48	; 0x30
 800db08:	9b07      	ldr	r3, [sp, #28]
 800db0a:	454b      	cmp	r3, r9
 800db0c:	d307      	bcc.n	800db1e <__cvt+0xb6>
 800db0e:	4630      	mov	r0, r6
 800db10:	9b07      	ldr	r3, [sp, #28]
 800db12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800db14:	1b9b      	subs	r3, r3, r6
 800db16:	6013      	str	r3, [r2, #0]
 800db18:	b008      	add	sp, #32
 800db1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db1e:	1c59      	adds	r1, r3, #1
 800db20:	9107      	str	r1, [sp, #28]
 800db22:	701a      	strb	r2, [r3, #0]
 800db24:	e7f0      	b.n	800db08 <__cvt+0xa0>

0800db26 <__exponent>:
 800db26:	4603      	mov	r3, r0
 800db28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db2a:	2900      	cmp	r1, #0
 800db2c:	f803 2b02 	strb.w	r2, [r3], #2
 800db30:	bfb6      	itet	lt
 800db32:	222d      	movlt	r2, #45	; 0x2d
 800db34:	222b      	movge	r2, #43	; 0x2b
 800db36:	4249      	neglt	r1, r1
 800db38:	2909      	cmp	r1, #9
 800db3a:	7042      	strb	r2, [r0, #1]
 800db3c:	dd2b      	ble.n	800db96 <__exponent+0x70>
 800db3e:	f10d 0407 	add.w	r4, sp, #7
 800db42:	46a4      	mov	ip, r4
 800db44:	270a      	movs	r7, #10
 800db46:	fb91 f6f7 	sdiv	r6, r1, r7
 800db4a:	460a      	mov	r2, r1
 800db4c:	46a6      	mov	lr, r4
 800db4e:	fb07 1516 	mls	r5, r7, r6, r1
 800db52:	2a63      	cmp	r2, #99	; 0x63
 800db54:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800db58:	4631      	mov	r1, r6
 800db5a:	f104 34ff 	add.w	r4, r4, #4294967295
 800db5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800db62:	dcf0      	bgt.n	800db46 <__exponent+0x20>
 800db64:	3130      	adds	r1, #48	; 0x30
 800db66:	f1ae 0502 	sub.w	r5, lr, #2
 800db6a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800db6e:	4629      	mov	r1, r5
 800db70:	1c44      	adds	r4, r0, #1
 800db72:	4561      	cmp	r1, ip
 800db74:	d30a      	bcc.n	800db8c <__exponent+0x66>
 800db76:	f10d 0209 	add.w	r2, sp, #9
 800db7a:	eba2 020e 	sub.w	r2, r2, lr
 800db7e:	4565      	cmp	r5, ip
 800db80:	bf88      	it	hi
 800db82:	2200      	movhi	r2, #0
 800db84:	4413      	add	r3, r2
 800db86:	1a18      	subs	r0, r3, r0
 800db88:	b003      	add	sp, #12
 800db8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db90:	f804 2f01 	strb.w	r2, [r4, #1]!
 800db94:	e7ed      	b.n	800db72 <__exponent+0x4c>
 800db96:	2330      	movs	r3, #48	; 0x30
 800db98:	3130      	adds	r1, #48	; 0x30
 800db9a:	7083      	strb	r3, [r0, #2]
 800db9c:	70c1      	strb	r1, [r0, #3]
 800db9e:	1d03      	adds	r3, r0, #4
 800dba0:	e7f1      	b.n	800db86 <__exponent+0x60>
	...

0800dba4 <_printf_float>:
 800dba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba8:	b091      	sub	sp, #68	; 0x44
 800dbaa:	460c      	mov	r4, r1
 800dbac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800dbb0:	4616      	mov	r6, r2
 800dbb2:	461f      	mov	r7, r3
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	f002 fc45 	bl	8010444 <_localeconv_r>
 800dbba:	6803      	ldr	r3, [r0, #0]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc0:	f7f2 fae8 	bl	8000194 <strlen>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	930e      	str	r3, [sp, #56]	; 0x38
 800dbc8:	f8d8 3000 	ldr.w	r3, [r8]
 800dbcc:	900a      	str	r0, [sp, #40]	; 0x28
 800dbce:	3307      	adds	r3, #7
 800dbd0:	f023 0307 	bic.w	r3, r3, #7
 800dbd4:	f103 0208 	add.w	r2, r3, #8
 800dbd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dbdc:	f8d4 b000 	ldr.w	fp, [r4]
 800dbe0:	f8c8 2000 	str.w	r2, [r8]
 800dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dbec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800dbf0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800dbf4:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbf6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbfa:	4640      	mov	r0, r8
 800dbfc:	4b9c      	ldr	r3, [pc, #624]	; (800de70 <_printf_float+0x2cc>)
 800dbfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc00:	f7f2 ff26 	bl	8000a50 <__aeabi_dcmpun>
 800dc04:	bb70      	cbnz	r0, 800dc64 <_printf_float+0xc0>
 800dc06:	f04f 32ff 	mov.w	r2, #4294967295
 800dc0a:	4640      	mov	r0, r8
 800dc0c:	4b98      	ldr	r3, [pc, #608]	; (800de70 <_printf_float+0x2cc>)
 800dc0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc10:	f7f2 ff00 	bl	8000a14 <__aeabi_dcmple>
 800dc14:	bb30      	cbnz	r0, 800dc64 <_printf_float+0xc0>
 800dc16:	2200      	movs	r2, #0
 800dc18:	2300      	movs	r3, #0
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	4651      	mov	r1, sl
 800dc1e:	f7f2 feef 	bl	8000a00 <__aeabi_dcmplt>
 800dc22:	b110      	cbz	r0, 800dc2a <_printf_float+0x86>
 800dc24:	232d      	movs	r3, #45	; 0x2d
 800dc26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc2a:	4b92      	ldr	r3, [pc, #584]	; (800de74 <_printf_float+0x2d0>)
 800dc2c:	4892      	ldr	r0, [pc, #584]	; (800de78 <_printf_float+0x2d4>)
 800dc2e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800dc32:	bf94      	ite	ls
 800dc34:	4698      	movls	r8, r3
 800dc36:	4680      	movhi	r8, r0
 800dc38:	2303      	movs	r3, #3
 800dc3a:	f04f 0a00 	mov.w	sl, #0
 800dc3e:	6123      	str	r3, [r4, #16]
 800dc40:	f02b 0304 	bic.w	r3, fp, #4
 800dc44:	6023      	str	r3, [r4, #0]
 800dc46:	4633      	mov	r3, r6
 800dc48:	4621      	mov	r1, r4
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	9700      	str	r7, [sp, #0]
 800dc4e:	aa0f      	add	r2, sp, #60	; 0x3c
 800dc50:	f000 f9d4 	bl	800dffc <_printf_common>
 800dc54:	3001      	adds	r0, #1
 800dc56:	f040 8090 	bne.w	800dd7a <_printf_float+0x1d6>
 800dc5a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5e:	b011      	add	sp, #68	; 0x44
 800dc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc64:	4642      	mov	r2, r8
 800dc66:	4653      	mov	r3, sl
 800dc68:	4640      	mov	r0, r8
 800dc6a:	4651      	mov	r1, sl
 800dc6c:	f7f2 fef0 	bl	8000a50 <__aeabi_dcmpun>
 800dc70:	b148      	cbz	r0, 800dc86 <_printf_float+0xe2>
 800dc72:	f1ba 0f00 	cmp.w	sl, #0
 800dc76:	bfb8      	it	lt
 800dc78:	232d      	movlt	r3, #45	; 0x2d
 800dc7a:	4880      	ldr	r0, [pc, #512]	; (800de7c <_printf_float+0x2d8>)
 800dc7c:	bfb8      	it	lt
 800dc7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc82:	4b7f      	ldr	r3, [pc, #508]	; (800de80 <_printf_float+0x2dc>)
 800dc84:	e7d3      	b.n	800dc2e <_printf_float+0x8a>
 800dc86:	6863      	ldr	r3, [r4, #4]
 800dc88:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800dc8c:	1c5a      	adds	r2, r3, #1
 800dc8e:	d142      	bne.n	800dd16 <_printf_float+0x172>
 800dc90:	2306      	movs	r3, #6
 800dc92:	6063      	str	r3, [r4, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	9206      	str	r2, [sp, #24]
 800dc98:	aa0e      	add	r2, sp, #56	; 0x38
 800dc9a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800dc9e:	aa0d      	add	r2, sp, #52	; 0x34
 800dca0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800dca4:	9203      	str	r2, [sp, #12]
 800dca6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800dcaa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dcae:	6023      	str	r3, [r4, #0]
 800dcb0:	6863      	ldr	r3, [r4, #4]
 800dcb2:	4642      	mov	r2, r8
 800dcb4:	9300      	str	r3, [sp, #0]
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	4653      	mov	r3, sl
 800dcba:	910b      	str	r1, [sp, #44]	; 0x2c
 800dcbc:	f7ff fed4 	bl	800da68 <__cvt>
 800dcc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcc2:	4680      	mov	r8, r0
 800dcc4:	2947      	cmp	r1, #71	; 0x47
 800dcc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dcc8:	d108      	bne.n	800dcdc <_printf_float+0x138>
 800dcca:	1cc8      	adds	r0, r1, #3
 800dccc:	db02      	blt.n	800dcd4 <_printf_float+0x130>
 800dcce:	6863      	ldr	r3, [r4, #4]
 800dcd0:	4299      	cmp	r1, r3
 800dcd2:	dd40      	ble.n	800dd56 <_printf_float+0x1b2>
 800dcd4:	f1a9 0902 	sub.w	r9, r9, #2
 800dcd8:	fa5f f989 	uxtb.w	r9, r9
 800dcdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dce0:	d81f      	bhi.n	800dd22 <_printf_float+0x17e>
 800dce2:	464a      	mov	r2, r9
 800dce4:	3901      	subs	r1, #1
 800dce6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dcea:	910d      	str	r1, [sp, #52]	; 0x34
 800dcec:	f7ff ff1b 	bl	800db26 <__exponent>
 800dcf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcf2:	4682      	mov	sl, r0
 800dcf4:	1813      	adds	r3, r2, r0
 800dcf6:	2a01      	cmp	r2, #1
 800dcf8:	6123      	str	r3, [r4, #16]
 800dcfa:	dc02      	bgt.n	800dd02 <_printf_float+0x15e>
 800dcfc:	6822      	ldr	r2, [r4, #0]
 800dcfe:	07d2      	lsls	r2, r2, #31
 800dd00:	d501      	bpl.n	800dd06 <_printf_float+0x162>
 800dd02:	3301      	adds	r3, #1
 800dd04:	6123      	str	r3, [r4, #16]
 800dd06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d09b      	beq.n	800dc46 <_printf_float+0xa2>
 800dd0e:	232d      	movs	r3, #45	; 0x2d
 800dd10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd14:	e797      	b.n	800dc46 <_printf_float+0xa2>
 800dd16:	2947      	cmp	r1, #71	; 0x47
 800dd18:	d1bc      	bne.n	800dc94 <_printf_float+0xf0>
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1ba      	bne.n	800dc94 <_printf_float+0xf0>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	e7b7      	b.n	800dc92 <_printf_float+0xee>
 800dd22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800dd26:	d118      	bne.n	800dd5a <_printf_float+0x1b6>
 800dd28:	2900      	cmp	r1, #0
 800dd2a:	6863      	ldr	r3, [r4, #4]
 800dd2c:	dd0b      	ble.n	800dd46 <_printf_float+0x1a2>
 800dd2e:	6121      	str	r1, [r4, #16]
 800dd30:	b913      	cbnz	r3, 800dd38 <_printf_float+0x194>
 800dd32:	6822      	ldr	r2, [r4, #0]
 800dd34:	07d0      	lsls	r0, r2, #31
 800dd36:	d502      	bpl.n	800dd3e <_printf_float+0x19a>
 800dd38:	3301      	adds	r3, #1
 800dd3a:	440b      	add	r3, r1
 800dd3c:	6123      	str	r3, [r4, #16]
 800dd3e:	f04f 0a00 	mov.w	sl, #0
 800dd42:	65a1      	str	r1, [r4, #88]	; 0x58
 800dd44:	e7df      	b.n	800dd06 <_printf_float+0x162>
 800dd46:	b913      	cbnz	r3, 800dd4e <_printf_float+0x1aa>
 800dd48:	6822      	ldr	r2, [r4, #0]
 800dd4a:	07d2      	lsls	r2, r2, #31
 800dd4c:	d501      	bpl.n	800dd52 <_printf_float+0x1ae>
 800dd4e:	3302      	adds	r3, #2
 800dd50:	e7f4      	b.n	800dd3c <_printf_float+0x198>
 800dd52:	2301      	movs	r3, #1
 800dd54:	e7f2      	b.n	800dd3c <_printf_float+0x198>
 800dd56:	f04f 0967 	mov.w	r9, #103	; 0x67
 800dd5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd5c:	4299      	cmp	r1, r3
 800dd5e:	db05      	blt.n	800dd6c <_printf_float+0x1c8>
 800dd60:	6823      	ldr	r3, [r4, #0]
 800dd62:	6121      	str	r1, [r4, #16]
 800dd64:	07d8      	lsls	r0, r3, #31
 800dd66:	d5ea      	bpl.n	800dd3e <_printf_float+0x19a>
 800dd68:	1c4b      	adds	r3, r1, #1
 800dd6a:	e7e7      	b.n	800dd3c <_printf_float+0x198>
 800dd6c:	2900      	cmp	r1, #0
 800dd6e:	bfcc      	ite	gt
 800dd70:	2201      	movgt	r2, #1
 800dd72:	f1c1 0202 	rsble	r2, r1, #2
 800dd76:	4413      	add	r3, r2
 800dd78:	e7e0      	b.n	800dd3c <_printf_float+0x198>
 800dd7a:	6823      	ldr	r3, [r4, #0]
 800dd7c:	055a      	lsls	r2, r3, #21
 800dd7e:	d407      	bmi.n	800dd90 <_printf_float+0x1ec>
 800dd80:	6923      	ldr	r3, [r4, #16]
 800dd82:	4642      	mov	r2, r8
 800dd84:	4631      	mov	r1, r6
 800dd86:	4628      	mov	r0, r5
 800dd88:	47b8      	blx	r7
 800dd8a:	3001      	adds	r0, #1
 800dd8c:	d12b      	bne.n	800dde6 <_printf_float+0x242>
 800dd8e:	e764      	b.n	800dc5a <_printf_float+0xb6>
 800dd90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dd94:	f240 80dd 	bls.w	800df52 <_printf_float+0x3ae>
 800dd98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	2300      	movs	r3, #0
 800dda0:	f7f2 fe24 	bl	80009ec <__aeabi_dcmpeq>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d033      	beq.n	800de10 <_printf_float+0x26c>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	4631      	mov	r1, r6
 800ddac:	4628      	mov	r0, r5
 800ddae:	4a35      	ldr	r2, [pc, #212]	; (800de84 <_printf_float+0x2e0>)
 800ddb0:	47b8      	blx	r7
 800ddb2:	3001      	adds	r0, #1
 800ddb4:	f43f af51 	beq.w	800dc5a <_printf_float+0xb6>
 800ddb8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	db02      	blt.n	800ddc6 <_printf_float+0x222>
 800ddc0:	6823      	ldr	r3, [r4, #0]
 800ddc2:	07d8      	lsls	r0, r3, #31
 800ddc4:	d50f      	bpl.n	800dde6 <_printf_float+0x242>
 800ddc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddca:	4631      	mov	r1, r6
 800ddcc:	4628      	mov	r0, r5
 800ddce:	47b8      	blx	r7
 800ddd0:	3001      	adds	r0, #1
 800ddd2:	f43f af42 	beq.w	800dc5a <_printf_float+0xb6>
 800ddd6:	f04f 0800 	mov.w	r8, #0
 800ddda:	f104 091a 	add.w	r9, r4, #26
 800ddde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dde0:	3b01      	subs	r3, #1
 800dde2:	4543      	cmp	r3, r8
 800dde4:	dc09      	bgt.n	800ddfa <_printf_float+0x256>
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	079b      	lsls	r3, r3, #30
 800ddea:	f100 8102 	bmi.w	800dff2 <_printf_float+0x44e>
 800ddee:	68e0      	ldr	r0, [r4, #12]
 800ddf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddf2:	4298      	cmp	r0, r3
 800ddf4:	bfb8      	it	lt
 800ddf6:	4618      	movlt	r0, r3
 800ddf8:	e731      	b.n	800dc5e <_printf_float+0xba>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	464a      	mov	r2, r9
 800ddfe:	4631      	mov	r1, r6
 800de00:	4628      	mov	r0, r5
 800de02:	47b8      	blx	r7
 800de04:	3001      	adds	r0, #1
 800de06:	f43f af28 	beq.w	800dc5a <_printf_float+0xb6>
 800de0a:	f108 0801 	add.w	r8, r8, #1
 800de0e:	e7e6      	b.n	800ddde <_printf_float+0x23a>
 800de10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de12:	2b00      	cmp	r3, #0
 800de14:	dc38      	bgt.n	800de88 <_printf_float+0x2e4>
 800de16:	2301      	movs	r3, #1
 800de18:	4631      	mov	r1, r6
 800de1a:	4628      	mov	r0, r5
 800de1c:	4a19      	ldr	r2, [pc, #100]	; (800de84 <_printf_float+0x2e0>)
 800de1e:	47b8      	blx	r7
 800de20:	3001      	adds	r0, #1
 800de22:	f43f af1a 	beq.w	800dc5a <_printf_float+0xb6>
 800de26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800de2a:	4313      	orrs	r3, r2
 800de2c:	d102      	bne.n	800de34 <_printf_float+0x290>
 800de2e:	6823      	ldr	r3, [r4, #0]
 800de30:	07d9      	lsls	r1, r3, #31
 800de32:	d5d8      	bpl.n	800dde6 <_printf_float+0x242>
 800de34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de38:	4631      	mov	r1, r6
 800de3a:	4628      	mov	r0, r5
 800de3c:	47b8      	blx	r7
 800de3e:	3001      	adds	r0, #1
 800de40:	f43f af0b 	beq.w	800dc5a <_printf_float+0xb6>
 800de44:	f04f 0900 	mov.w	r9, #0
 800de48:	f104 0a1a 	add.w	sl, r4, #26
 800de4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de4e:	425b      	negs	r3, r3
 800de50:	454b      	cmp	r3, r9
 800de52:	dc01      	bgt.n	800de58 <_printf_float+0x2b4>
 800de54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de56:	e794      	b.n	800dd82 <_printf_float+0x1de>
 800de58:	2301      	movs	r3, #1
 800de5a:	4652      	mov	r2, sl
 800de5c:	4631      	mov	r1, r6
 800de5e:	4628      	mov	r0, r5
 800de60:	47b8      	blx	r7
 800de62:	3001      	adds	r0, #1
 800de64:	f43f aef9 	beq.w	800dc5a <_printf_float+0xb6>
 800de68:	f109 0901 	add.w	r9, r9, #1
 800de6c:	e7ee      	b.n	800de4c <_printf_float+0x2a8>
 800de6e:	bf00      	nop
 800de70:	7fefffff 	.word	0x7fefffff
 800de74:	08011bf8 	.word	0x08011bf8
 800de78:	08011bfc 	.word	0x08011bfc
 800de7c:	08011c04 	.word	0x08011c04
 800de80:	08011c00 	.word	0x08011c00
 800de84:	08011c08 	.word	0x08011c08
 800de88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de8c:	429a      	cmp	r2, r3
 800de8e:	bfa8      	it	ge
 800de90:	461a      	movge	r2, r3
 800de92:	2a00      	cmp	r2, #0
 800de94:	4691      	mov	r9, r2
 800de96:	dc37      	bgt.n	800df08 <_printf_float+0x364>
 800de98:	f04f 0b00 	mov.w	fp, #0
 800de9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dea0:	f104 021a 	add.w	r2, r4, #26
 800dea4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800dea8:	ebaa 0309 	sub.w	r3, sl, r9
 800deac:	455b      	cmp	r3, fp
 800deae:	dc33      	bgt.n	800df18 <_printf_float+0x374>
 800deb0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800deb4:	429a      	cmp	r2, r3
 800deb6:	db3b      	blt.n	800df30 <_printf_float+0x38c>
 800deb8:	6823      	ldr	r3, [r4, #0]
 800deba:	07da      	lsls	r2, r3, #31
 800debc:	d438      	bmi.n	800df30 <_printf_float+0x38c>
 800debe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dec0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dec2:	eba3 020a 	sub.w	r2, r3, sl
 800dec6:	eba3 0901 	sub.w	r9, r3, r1
 800deca:	4591      	cmp	r9, r2
 800decc:	bfa8      	it	ge
 800dece:	4691      	movge	r9, r2
 800ded0:	f1b9 0f00 	cmp.w	r9, #0
 800ded4:	dc34      	bgt.n	800df40 <_printf_float+0x39c>
 800ded6:	f04f 0800 	mov.w	r8, #0
 800deda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dede:	f104 0a1a 	add.w	sl, r4, #26
 800dee2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dee6:	1a9b      	subs	r3, r3, r2
 800dee8:	eba3 0309 	sub.w	r3, r3, r9
 800deec:	4543      	cmp	r3, r8
 800deee:	f77f af7a 	ble.w	800dde6 <_printf_float+0x242>
 800def2:	2301      	movs	r3, #1
 800def4:	4652      	mov	r2, sl
 800def6:	4631      	mov	r1, r6
 800def8:	4628      	mov	r0, r5
 800defa:	47b8      	blx	r7
 800defc:	3001      	adds	r0, #1
 800defe:	f43f aeac 	beq.w	800dc5a <_printf_float+0xb6>
 800df02:	f108 0801 	add.w	r8, r8, #1
 800df06:	e7ec      	b.n	800dee2 <_printf_float+0x33e>
 800df08:	4613      	mov	r3, r2
 800df0a:	4631      	mov	r1, r6
 800df0c:	4642      	mov	r2, r8
 800df0e:	4628      	mov	r0, r5
 800df10:	47b8      	blx	r7
 800df12:	3001      	adds	r0, #1
 800df14:	d1c0      	bne.n	800de98 <_printf_float+0x2f4>
 800df16:	e6a0      	b.n	800dc5a <_printf_float+0xb6>
 800df18:	2301      	movs	r3, #1
 800df1a:	4631      	mov	r1, r6
 800df1c:	4628      	mov	r0, r5
 800df1e:	920b      	str	r2, [sp, #44]	; 0x2c
 800df20:	47b8      	blx	r7
 800df22:	3001      	adds	r0, #1
 800df24:	f43f ae99 	beq.w	800dc5a <_printf_float+0xb6>
 800df28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df2a:	f10b 0b01 	add.w	fp, fp, #1
 800df2e:	e7b9      	b.n	800dea4 <_printf_float+0x300>
 800df30:	4631      	mov	r1, r6
 800df32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df36:	4628      	mov	r0, r5
 800df38:	47b8      	blx	r7
 800df3a:	3001      	adds	r0, #1
 800df3c:	d1bf      	bne.n	800debe <_printf_float+0x31a>
 800df3e:	e68c      	b.n	800dc5a <_printf_float+0xb6>
 800df40:	464b      	mov	r3, r9
 800df42:	4631      	mov	r1, r6
 800df44:	4628      	mov	r0, r5
 800df46:	eb08 020a 	add.w	r2, r8, sl
 800df4a:	47b8      	blx	r7
 800df4c:	3001      	adds	r0, #1
 800df4e:	d1c2      	bne.n	800ded6 <_printf_float+0x332>
 800df50:	e683      	b.n	800dc5a <_printf_float+0xb6>
 800df52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df54:	2a01      	cmp	r2, #1
 800df56:	dc01      	bgt.n	800df5c <_printf_float+0x3b8>
 800df58:	07db      	lsls	r3, r3, #31
 800df5a:	d537      	bpl.n	800dfcc <_printf_float+0x428>
 800df5c:	2301      	movs	r3, #1
 800df5e:	4642      	mov	r2, r8
 800df60:	4631      	mov	r1, r6
 800df62:	4628      	mov	r0, r5
 800df64:	47b8      	blx	r7
 800df66:	3001      	adds	r0, #1
 800df68:	f43f ae77 	beq.w	800dc5a <_printf_float+0xb6>
 800df6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df70:	4631      	mov	r1, r6
 800df72:	4628      	mov	r0, r5
 800df74:	47b8      	blx	r7
 800df76:	3001      	adds	r0, #1
 800df78:	f43f ae6f 	beq.w	800dc5a <_printf_float+0xb6>
 800df7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df80:	2200      	movs	r2, #0
 800df82:	2300      	movs	r3, #0
 800df84:	f7f2 fd32 	bl	80009ec <__aeabi_dcmpeq>
 800df88:	b9d8      	cbnz	r0, 800dfc2 <_printf_float+0x41e>
 800df8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df8c:	f108 0201 	add.w	r2, r8, #1
 800df90:	3b01      	subs	r3, #1
 800df92:	4631      	mov	r1, r6
 800df94:	4628      	mov	r0, r5
 800df96:	47b8      	blx	r7
 800df98:	3001      	adds	r0, #1
 800df9a:	d10e      	bne.n	800dfba <_printf_float+0x416>
 800df9c:	e65d      	b.n	800dc5a <_printf_float+0xb6>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	464a      	mov	r2, r9
 800dfa2:	4631      	mov	r1, r6
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	47b8      	blx	r7
 800dfa8:	3001      	adds	r0, #1
 800dfaa:	f43f ae56 	beq.w	800dc5a <_printf_float+0xb6>
 800dfae:	f108 0801 	add.w	r8, r8, #1
 800dfb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	4543      	cmp	r3, r8
 800dfb8:	dcf1      	bgt.n	800df9e <_printf_float+0x3fa>
 800dfba:	4653      	mov	r3, sl
 800dfbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dfc0:	e6e0      	b.n	800dd84 <_printf_float+0x1e0>
 800dfc2:	f04f 0800 	mov.w	r8, #0
 800dfc6:	f104 091a 	add.w	r9, r4, #26
 800dfca:	e7f2      	b.n	800dfb2 <_printf_float+0x40e>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	4642      	mov	r2, r8
 800dfd0:	e7df      	b.n	800df92 <_printf_float+0x3ee>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	464a      	mov	r2, r9
 800dfd6:	4631      	mov	r1, r6
 800dfd8:	4628      	mov	r0, r5
 800dfda:	47b8      	blx	r7
 800dfdc:	3001      	adds	r0, #1
 800dfde:	f43f ae3c 	beq.w	800dc5a <_printf_float+0xb6>
 800dfe2:	f108 0801 	add.w	r8, r8, #1
 800dfe6:	68e3      	ldr	r3, [r4, #12]
 800dfe8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dfea:	1a5b      	subs	r3, r3, r1
 800dfec:	4543      	cmp	r3, r8
 800dfee:	dcf0      	bgt.n	800dfd2 <_printf_float+0x42e>
 800dff0:	e6fd      	b.n	800ddee <_printf_float+0x24a>
 800dff2:	f04f 0800 	mov.w	r8, #0
 800dff6:	f104 0919 	add.w	r9, r4, #25
 800dffa:	e7f4      	b.n	800dfe6 <_printf_float+0x442>

0800dffc <_printf_common>:
 800dffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e000:	4616      	mov	r6, r2
 800e002:	4699      	mov	r9, r3
 800e004:	688a      	ldr	r2, [r1, #8]
 800e006:	690b      	ldr	r3, [r1, #16]
 800e008:	4607      	mov	r7, r0
 800e00a:	4293      	cmp	r3, r2
 800e00c:	bfb8      	it	lt
 800e00e:	4613      	movlt	r3, r2
 800e010:	6033      	str	r3, [r6, #0]
 800e012:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e016:	460c      	mov	r4, r1
 800e018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e01c:	b10a      	cbz	r2, 800e022 <_printf_common+0x26>
 800e01e:	3301      	adds	r3, #1
 800e020:	6033      	str	r3, [r6, #0]
 800e022:	6823      	ldr	r3, [r4, #0]
 800e024:	0699      	lsls	r1, r3, #26
 800e026:	bf42      	ittt	mi
 800e028:	6833      	ldrmi	r3, [r6, #0]
 800e02a:	3302      	addmi	r3, #2
 800e02c:	6033      	strmi	r3, [r6, #0]
 800e02e:	6825      	ldr	r5, [r4, #0]
 800e030:	f015 0506 	ands.w	r5, r5, #6
 800e034:	d106      	bne.n	800e044 <_printf_common+0x48>
 800e036:	f104 0a19 	add.w	sl, r4, #25
 800e03a:	68e3      	ldr	r3, [r4, #12]
 800e03c:	6832      	ldr	r2, [r6, #0]
 800e03e:	1a9b      	subs	r3, r3, r2
 800e040:	42ab      	cmp	r3, r5
 800e042:	dc28      	bgt.n	800e096 <_printf_common+0x9a>
 800e044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e048:	1e13      	subs	r3, r2, #0
 800e04a:	6822      	ldr	r2, [r4, #0]
 800e04c:	bf18      	it	ne
 800e04e:	2301      	movne	r3, #1
 800e050:	0692      	lsls	r2, r2, #26
 800e052:	d42d      	bmi.n	800e0b0 <_printf_common+0xb4>
 800e054:	4649      	mov	r1, r9
 800e056:	4638      	mov	r0, r7
 800e058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e05c:	47c0      	blx	r8
 800e05e:	3001      	adds	r0, #1
 800e060:	d020      	beq.n	800e0a4 <_printf_common+0xa8>
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	68e5      	ldr	r5, [r4, #12]
 800e066:	f003 0306 	and.w	r3, r3, #6
 800e06a:	2b04      	cmp	r3, #4
 800e06c:	bf18      	it	ne
 800e06e:	2500      	movne	r5, #0
 800e070:	6832      	ldr	r2, [r6, #0]
 800e072:	f04f 0600 	mov.w	r6, #0
 800e076:	68a3      	ldr	r3, [r4, #8]
 800e078:	bf08      	it	eq
 800e07a:	1aad      	subeq	r5, r5, r2
 800e07c:	6922      	ldr	r2, [r4, #16]
 800e07e:	bf08      	it	eq
 800e080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e084:	4293      	cmp	r3, r2
 800e086:	bfc4      	itt	gt
 800e088:	1a9b      	subgt	r3, r3, r2
 800e08a:	18ed      	addgt	r5, r5, r3
 800e08c:	341a      	adds	r4, #26
 800e08e:	42b5      	cmp	r5, r6
 800e090:	d11a      	bne.n	800e0c8 <_printf_common+0xcc>
 800e092:	2000      	movs	r0, #0
 800e094:	e008      	b.n	800e0a8 <_printf_common+0xac>
 800e096:	2301      	movs	r3, #1
 800e098:	4652      	mov	r2, sl
 800e09a:	4649      	mov	r1, r9
 800e09c:	4638      	mov	r0, r7
 800e09e:	47c0      	blx	r8
 800e0a0:	3001      	adds	r0, #1
 800e0a2:	d103      	bne.n	800e0ac <_printf_common+0xb0>
 800e0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0ac:	3501      	adds	r5, #1
 800e0ae:	e7c4      	b.n	800e03a <_printf_common+0x3e>
 800e0b0:	2030      	movs	r0, #48	; 0x30
 800e0b2:	18e1      	adds	r1, r4, r3
 800e0b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e0b8:	1c5a      	adds	r2, r3, #1
 800e0ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e0be:	4422      	add	r2, r4
 800e0c0:	3302      	adds	r3, #2
 800e0c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e0c6:	e7c5      	b.n	800e054 <_printf_common+0x58>
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	4622      	mov	r2, r4
 800e0cc:	4649      	mov	r1, r9
 800e0ce:	4638      	mov	r0, r7
 800e0d0:	47c0      	blx	r8
 800e0d2:	3001      	adds	r0, #1
 800e0d4:	d0e6      	beq.n	800e0a4 <_printf_common+0xa8>
 800e0d6:	3601      	adds	r6, #1
 800e0d8:	e7d9      	b.n	800e08e <_printf_common+0x92>
	...

0800e0dc <_printf_i>:
 800e0dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0e0:	7e0f      	ldrb	r7, [r1, #24]
 800e0e2:	4691      	mov	r9, r2
 800e0e4:	2f78      	cmp	r7, #120	; 0x78
 800e0e6:	4680      	mov	r8, r0
 800e0e8:	460c      	mov	r4, r1
 800e0ea:	469a      	mov	sl, r3
 800e0ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e0ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e0f2:	d807      	bhi.n	800e104 <_printf_i+0x28>
 800e0f4:	2f62      	cmp	r7, #98	; 0x62
 800e0f6:	d80a      	bhi.n	800e10e <_printf_i+0x32>
 800e0f8:	2f00      	cmp	r7, #0
 800e0fa:	f000 80d9 	beq.w	800e2b0 <_printf_i+0x1d4>
 800e0fe:	2f58      	cmp	r7, #88	; 0x58
 800e100:	f000 80a4 	beq.w	800e24c <_printf_i+0x170>
 800e104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e10c:	e03a      	b.n	800e184 <_printf_i+0xa8>
 800e10e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e112:	2b15      	cmp	r3, #21
 800e114:	d8f6      	bhi.n	800e104 <_printf_i+0x28>
 800e116:	a101      	add	r1, pc, #4	; (adr r1, 800e11c <_printf_i+0x40>)
 800e118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e11c:	0800e175 	.word	0x0800e175
 800e120:	0800e189 	.word	0x0800e189
 800e124:	0800e105 	.word	0x0800e105
 800e128:	0800e105 	.word	0x0800e105
 800e12c:	0800e105 	.word	0x0800e105
 800e130:	0800e105 	.word	0x0800e105
 800e134:	0800e189 	.word	0x0800e189
 800e138:	0800e105 	.word	0x0800e105
 800e13c:	0800e105 	.word	0x0800e105
 800e140:	0800e105 	.word	0x0800e105
 800e144:	0800e105 	.word	0x0800e105
 800e148:	0800e297 	.word	0x0800e297
 800e14c:	0800e1b9 	.word	0x0800e1b9
 800e150:	0800e279 	.word	0x0800e279
 800e154:	0800e105 	.word	0x0800e105
 800e158:	0800e105 	.word	0x0800e105
 800e15c:	0800e2b9 	.word	0x0800e2b9
 800e160:	0800e105 	.word	0x0800e105
 800e164:	0800e1b9 	.word	0x0800e1b9
 800e168:	0800e105 	.word	0x0800e105
 800e16c:	0800e105 	.word	0x0800e105
 800e170:	0800e281 	.word	0x0800e281
 800e174:	682b      	ldr	r3, [r5, #0]
 800e176:	1d1a      	adds	r2, r3, #4
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	602a      	str	r2, [r5, #0]
 800e17c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e184:	2301      	movs	r3, #1
 800e186:	e0a4      	b.n	800e2d2 <_printf_i+0x1f6>
 800e188:	6820      	ldr	r0, [r4, #0]
 800e18a:	6829      	ldr	r1, [r5, #0]
 800e18c:	0606      	lsls	r6, r0, #24
 800e18e:	f101 0304 	add.w	r3, r1, #4
 800e192:	d50a      	bpl.n	800e1aa <_printf_i+0xce>
 800e194:	680e      	ldr	r6, [r1, #0]
 800e196:	602b      	str	r3, [r5, #0]
 800e198:	2e00      	cmp	r6, #0
 800e19a:	da03      	bge.n	800e1a4 <_printf_i+0xc8>
 800e19c:	232d      	movs	r3, #45	; 0x2d
 800e19e:	4276      	negs	r6, r6
 800e1a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1a4:	230a      	movs	r3, #10
 800e1a6:	485e      	ldr	r0, [pc, #376]	; (800e320 <_printf_i+0x244>)
 800e1a8:	e019      	b.n	800e1de <_printf_i+0x102>
 800e1aa:	680e      	ldr	r6, [r1, #0]
 800e1ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e1b0:	602b      	str	r3, [r5, #0]
 800e1b2:	bf18      	it	ne
 800e1b4:	b236      	sxthne	r6, r6
 800e1b6:	e7ef      	b.n	800e198 <_printf_i+0xbc>
 800e1b8:	682b      	ldr	r3, [r5, #0]
 800e1ba:	6820      	ldr	r0, [r4, #0]
 800e1bc:	1d19      	adds	r1, r3, #4
 800e1be:	6029      	str	r1, [r5, #0]
 800e1c0:	0601      	lsls	r1, r0, #24
 800e1c2:	d501      	bpl.n	800e1c8 <_printf_i+0xec>
 800e1c4:	681e      	ldr	r6, [r3, #0]
 800e1c6:	e002      	b.n	800e1ce <_printf_i+0xf2>
 800e1c8:	0646      	lsls	r6, r0, #25
 800e1ca:	d5fb      	bpl.n	800e1c4 <_printf_i+0xe8>
 800e1cc:	881e      	ldrh	r6, [r3, #0]
 800e1ce:	2f6f      	cmp	r7, #111	; 0x6f
 800e1d0:	bf0c      	ite	eq
 800e1d2:	2308      	moveq	r3, #8
 800e1d4:	230a      	movne	r3, #10
 800e1d6:	4852      	ldr	r0, [pc, #328]	; (800e320 <_printf_i+0x244>)
 800e1d8:	2100      	movs	r1, #0
 800e1da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1de:	6865      	ldr	r5, [r4, #4]
 800e1e0:	2d00      	cmp	r5, #0
 800e1e2:	bfa8      	it	ge
 800e1e4:	6821      	ldrge	r1, [r4, #0]
 800e1e6:	60a5      	str	r5, [r4, #8]
 800e1e8:	bfa4      	itt	ge
 800e1ea:	f021 0104 	bicge.w	r1, r1, #4
 800e1ee:	6021      	strge	r1, [r4, #0]
 800e1f0:	b90e      	cbnz	r6, 800e1f6 <_printf_i+0x11a>
 800e1f2:	2d00      	cmp	r5, #0
 800e1f4:	d04d      	beq.n	800e292 <_printf_i+0x1b6>
 800e1f6:	4615      	mov	r5, r2
 800e1f8:	fbb6 f1f3 	udiv	r1, r6, r3
 800e1fc:	fb03 6711 	mls	r7, r3, r1, r6
 800e200:	5dc7      	ldrb	r7, [r0, r7]
 800e202:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e206:	4637      	mov	r7, r6
 800e208:	42bb      	cmp	r3, r7
 800e20a:	460e      	mov	r6, r1
 800e20c:	d9f4      	bls.n	800e1f8 <_printf_i+0x11c>
 800e20e:	2b08      	cmp	r3, #8
 800e210:	d10b      	bne.n	800e22a <_printf_i+0x14e>
 800e212:	6823      	ldr	r3, [r4, #0]
 800e214:	07de      	lsls	r6, r3, #31
 800e216:	d508      	bpl.n	800e22a <_printf_i+0x14e>
 800e218:	6923      	ldr	r3, [r4, #16]
 800e21a:	6861      	ldr	r1, [r4, #4]
 800e21c:	4299      	cmp	r1, r3
 800e21e:	bfde      	ittt	le
 800e220:	2330      	movle	r3, #48	; 0x30
 800e222:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e226:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e22a:	1b52      	subs	r2, r2, r5
 800e22c:	6122      	str	r2, [r4, #16]
 800e22e:	464b      	mov	r3, r9
 800e230:	4621      	mov	r1, r4
 800e232:	4640      	mov	r0, r8
 800e234:	f8cd a000 	str.w	sl, [sp]
 800e238:	aa03      	add	r2, sp, #12
 800e23a:	f7ff fedf 	bl	800dffc <_printf_common>
 800e23e:	3001      	adds	r0, #1
 800e240:	d14c      	bne.n	800e2dc <_printf_i+0x200>
 800e242:	f04f 30ff 	mov.w	r0, #4294967295
 800e246:	b004      	add	sp, #16
 800e248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e24c:	4834      	ldr	r0, [pc, #208]	; (800e320 <_printf_i+0x244>)
 800e24e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e252:	6829      	ldr	r1, [r5, #0]
 800e254:	6823      	ldr	r3, [r4, #0]
 800e256:	f851 6b04 	ldr.w	r6, [r1], #4
 800e25a:	6029      	str	r1, [r5, #0]
 800e25c:	061d      	lsls	r5, r3, #24
 800e25e:	d514      	bpl.n	800e28a <_printf_i+0x1ae>
 800e260:	07df      	lsls	r7, r3, #31
 800e262:	bf44      	itt	mi
 800e264:	f043 0320 	orrmi.w	r3, r3, #32
 800e268:	6023      	strmi	r3, [r4, #0]
 800e26a:	b91e      	cbnz	r6, 800e274 <_printf_i+0x198>
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	f023 0320 	bic.w	r3, r3, #32
 800e272:	6023      	str	r3, [r4, #0]
 800e274:	2310      	movs	r3, #16
 800e276:	e7af      	b.n	800e1d8 <_printf_i+0xfc>
 800e278:	6823      	ldr	r3, [r4, #0]
 800e27a:	f043 0320 	orr.w	r3, r3, #32
 800e27e:	6023      	str	r3, [r4, #0]
 800e280:	2378      	movs	r3, #120	; 0x78
 800e282:	4828      	ldr	r0, [pc, #160]	; (800e324 <_printf_i+0x248>)
 800e284:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e288:	e7e3      	b.n	800e252 <_printf_i+0x176>
 800e28a:	0659      	lsls	r1, r3, #25
 800e28c:	bf48      	it	mi
 800e28e:	b2b6      	uxthmi	r6, r6
 800e290:	e7e6      	b.n	800e260 <_printf_i+0x184>
 800e292:	4615      	mov	r5, r2
 800e294:	e7bb      	b.n	800e20e <_printf_i+0x132>
 800e296:	682b      	ldr	r3, [r5, #0]
 800e298:	6826      	ldr	r6, [r4, #0]
 800e29a:	1d18      	adds	r0, r3, #4
 800e29c:	6961      	ldr	r1, [r4, #20]
 800e29e:	6028      	str	r0, [r5, #0]
 800e2a0:	0635      	lsls	r5, r6, #24
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	d501      	bpl.n	800e2aa <_printf_i+0x1ce>
 800e2a6:	6019      	str	r1, [r3, #0]
 800e2a8:	e002      	b.n	800e2b0 <_printf_i+0x1d4>
 800e2aa:	0670      	lsls	r0, r6, #25
 800e2ac:	d5fb      	bpl.n	800e2a6 <_printf_i+0x1ca>
 800e2ae:	8019      	strh	r1, [r3, #0]
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	4615      	mov	r5, r2
 800e2b4:	6123      	str	r3, [r4, #16]
 800e2b6:	e7ba      	b.n	800e22e <_printf_i+0x152>
 800e2b8:	682b      	ldr	r3, [r5, #0]
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	1d1a      	adds	r2, r3, #4
 800e2be:	602a      	str	r2, [r5, #0]
 800e2c0:	681d      	ldr	r5, [r3, #0]
 800e2c2:	6862      	ldr	r2, [r4, #4]
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	f002 f8db 	bl	8010480 <memchr>
 800e2ca:	b108      	cbz	r0, 800e2d0 <_printf_i+0x1f4>
 800e2cc:	1b40      	subs	r0, r0, r5
 800e2ce:	6060      	str	r0, [r4, #4]
 800e2d0:	6863      	ldr	r3, [r4, #4]
 800e2d2:	6123      	str	r3, [r4, #16]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2da:	e7a8      	b.n	800e22e <_printf_i+0x152>
 800e2dc:	462a      	mov	r2, r5
 800e2de:	4649      	mov	r1, r9
 800e2e0:	4640      	mov	r0, r8
 800e2e2:	6923      	ldr	r3, [r4, #16]
 800e2e4:	47d0      	blx	sl
 800e2e6:	3001      	adds	r0, #1
 800e2e8:	d0ab      	beq.n	800e242 <_printf_i+0x166>
 800e2ea:	6823      	ldr	r3, [r4, #0]
 800e2ec:	079b      	lsls	r3, r3, #30
 800e2ee:	d413      	bmi.n	800e318 <_printf_i+0x23c>
 800e2f0:	68e0      	ldr	r0, [r4, #12]
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	4298      	cmp	r0, r3
 800e2f6:	bfb8      	it	lt
 800e2f8:	4618      	movlt	r0, r3
 800e2fa:	e7a4      	b.n	800e246 <_printf_i+0x16a>
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	4632      	mov	r2, r6
 800e300:	4649      	mov	r1, r9
 800e302:	4640      	mov	r0, r8
 800e304:	47d0      	blx	sl
 800e306:	3001      	adds	r0, #1
 800e308:	d09b      	beq.n	800e242 <_printf_i+0x166>
 800e30a:	3501      	adds	r5, #1
 800e30c:	68e3      	ldr	r3, [r4, #12]
 800e30e:	9903      	ldr	r1, [sp, #12]
 800e310:	1a5b      	subs	r3, r3, r1
 800e312:	42ab      	cmp	r3, r5
 800e314:	dcf2      	bgt.n	800e2fc <_printf_i+0x220>
 800e316:	e7eb      	b.n	800e2f0 <_printf_i+0x214>
 800e318:	2500      	movs	r5, #0
 800e31a:	f104 0619 	add.w	r6, r4, #25
 800e31e:	e7f5      	b.n	800e30c <_printf_i+0x230>
 800e320:	08011c0a 	.word	0x08011c0a
 800e324:	08011c1b 	.word	0x08011c1b

0800e328 <strcpy>:
 800e328:	4603      	mov	r3, r0
 800e32a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e32e:	f803 2b01 	strb.w	r2, [r3], #1
 800e332:	2a00      	cmp	r2, #0
 800e334:	d1f9      	bne.n	800e32a <strcpy+0x2>
 800e336:	4770      	bx	lr

0800e338 <sulp>:
 800e338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e33c:	460f      	mov	r7, r1
 800e33e:	4690      	mov	r8, r2
 800e340:	f002 fc1c 	bl	8010b7c <__ulp>
 800e344:	4604      	mov	r4, r0
 800e346:	460d      	mov	r5, r1
 800e348:	f1b8 0f00 	cmp.w	r8, #0
 800e34c:	d011      	beq.n	800e372 <sulp+0x3a>
 800e34e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800e352:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e356:	2b00      	cmp	r3, #0
 800e358:	dd0b      	ble.n	800e372 <sulp+0x3a>
 800e35a:	2400      	movs	r4, #0
 800e35c:	051b      	lsls	r3, r3, #20
 800e35e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e362:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e366:	4622      	mov	r2, r4
 800e368:	462b      	mov	r3, r5
 800e36a:	f7f2 f8d7 	bl	800051c <__aeabi_dmul>
 800e36e:	4604      	mov	r4, r0
 800e370:	460d      	mov	r5, r1
 800e372:	4620      	mov	r0, r4
 800e374:	4629      	mov	r1, r5
 800e376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e37a:	0000      	movs	r0, r0
 800e37c:	0000      	movs	r0, r0
	...

0800e380 <_strtod_l>:
 800e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e384:	469b      	mov	fp, r3
 800e386:	2300      	movs	r3, #0
 800e388:	b09f      	sub	sp, #124	; 0x7c
 800e38a:	931a      	str	r3, [sp, #104]	; 0x68
 800e38c:	4b9e      	ldr	r3, [pc, #632]	; (800e608 <_strtod_l+0x288>)
 800e38e:	4682      	mov	sl, r0
 800e390:	681f      	ldr	r7, [r3, #0]
 800e392:	460e      	mov	r6, r1
 800e394:	4638      	mov	r0, r7
 800e396:	9215      	str	r2, [sp, #84]	; 0x54
 800e398:	f7f1 fefc 	bl	8000194 <strlen>
 800e39c:	f04f 0800 	mov.w	r8, #0
 800e3a0:	4604      	mov	r4, r0
 800e3a2:	f04f 0900 	mov.w	r9, #0
 800e3a6:	9619      	str	r6, [sp, #100]	; 0x64
 800e3a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e3aa:	781a      	ldrb	r2, [r3, #0]
 800e3ac:	2a2b      	cmp	r2, #43	; 0x2b
 800e3ae:	d04c      	beq.n	800e44a <_strtod_l+0xca>
 800e3b0:	d83a      	bhi.n	800e428 <_strtod_l+0xa8>
 800e3b2:	2a0d      	cmp	r2, #13
 800e3b4:	d833      	bhi.n	800e41e <_strtod_l+0x9e>
 800e3b6:	2a08      	cmp	r2, #8
 800e3b8:	d833      	bhi.n	800e422 <_strtod_l+0xa2>
 800e3ba:	2a00      	cmp	r2, #0
 800e3bc:	d03d      	beq.n	800e43a <_strtod_l+0xba>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	930a      	str	r3, [sp, #40]	; 0x28
 800e3c2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800e3c4:	782b      	ldrb	r3, [r5, #0]
 800e3c6:	2b30      	cmp	r3, #48	; 0x30
 800e3c8:	f040 80aa 	bne.w	800e520 <_strtod_l+0x1a0>
 800e3cc:	786b      	ldrb	r3, [r5, #1]
 800e3ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e3d2:	2b58      	cmp	r3, #88	; 0x58
 800e3d4:	d166      	bne.n	800e4a4 <_strtod_l+0x124>
 800e3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3d8:	4650      	mov	r0, sl
 800e3da:	9301      	str	r3, [sp, #4]
 800e3dc:	ab1a      	add	r3, sp, #104	; 0x68
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	4a8a      	ldr	r2, [pc, #552]	; (800e60c <_strtod_l+0x28c>)
 800e3e2:	f8cd b008 	str.w	fp, [sp, #8]
 800e3e6:	ab1b      	add	r3, sp, #108	; 0x6c
 800e3e8:	a919      	add	r1, sp, #100	; 0x64
 800e3ea:	f001 fd2d 	bl	800fe48 <__gethex>
 800e3ee:	f010 0607 	ands.w	r6, r0, #7
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	d005      	beq.n	800e402 <_strtod_l+0x82>
 800e3f6:	2e06      	cmp	r6, #6
 800e3f8:	d129      	bne.n	800e44e <_strtod_l+0xce>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	3501      	adds	r5, #1
 800e3fe:	9519      	str	r5, [sp, #100]	; 0x64
 800e400:	930a      	str	r3, [sp, #40]	; 0x28
 800e402:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e404:	2b00      	cmp	r3, #0
 800e406:	f040 858a 	bne.w	800ef1e <_strtod_l+0xb9e>
 800e40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e40c:	b1d3      	cbz	r3, 800e444 <_strtod_l+0xc4>
 800e40e:	4642      	mov	r2, r8
 800e410:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e414:	4610      	mov	r0, r2
 800e416:	4619      	mov	r1, r3
 800e418:	b01f      	add	sp, #124	; 0x7c
 800e41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e41e:	2a20      	cmp	r2, #32
 800e420:	d1cd      	bne.n	800e3be <_strtod_l+0x3e>
 800e422:	3301      	adds	r3, #1
 800e424:	9319      	str	r3, [sp, #100]	; 0x64
 800e426:	e7bf      	b.n	800e3a8 <_strtod_l+0x28>
 800e428:	2a2d      	cmp	r2, #45	; 0x2d
 800e42a:	d1c8      	bne.n	800e3be <_strtod_l+0x3e>
 800e42c:	2201      	movs	r2, #1
 800e42e:	920a      	str	r2, [sp, #40]	; 0x28
 800e430:	1c5a      	adds	r2, r3, #1
 800e432:	9219      	str	r2, [sp, #100]	; 0x64
 800e434:	785b      	ldrb	r3, [r3, #1]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1c3      	bne.n	800e3c2 <_strtod_l+0x42>
 800e43a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e43c:	9619      	str	r6, [sp, #100]	; 0x64
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f040 856b 	bne.w	800ef1a <_strtod_l+0xb9a>
 800e444:	4642      	mov	r2, r8
 800e446:	464b      	mov	r3, r9
 800e448:	e7e4      	b.n	800e414 <_strtod_l+0x94>
 800e44a:	2200      	movs	r2, #0
 800e44c:	e7ef      	b.n	800e42e <_strtod_l+0xae>
 800e44e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e450:	b13a      	cbz	r2, 800e462 <_strtod_l+0xe2>
 800e452:	2135      	movs	r1, #53	; 0x35
 800e454:	a81c      	add	r0, sp, #112	; 0x70
 800e456:	f002 fc95 	bl	8010d84 <__copybits>
 800e45a:	4650      	mov	r0, sl
 800e45c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e45e:	f002 f85d 	bl	801051c <_Bfree>
 800e462:	3e01      	subs	r6, #1
 800e464:	2e04      	cmp	r6, #4
 800e466:	d806      	bhi.n	800e476 <_strtod_l+0xf6>
 800e468:	e8df f006 	tbb	[pc, r6]
 800e46c:	1714030a 	.word	0x1714030a
 800e470:	0a          	.byte	0x0a
 800e471:	00          	.byte	0x00
 800e472:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800e476:	0721      	lsls	r1, r4, #28
 800e478:	d5c3      	bpl.n	800e402 <_strtod_l+0x82>
 800e47a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e47e:	e7c0      	b.n	800e402 <_strtod_l+0x82>
 800e480:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e482:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800e486:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e48a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e48e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e492:	e7f0      	b.n	800e476 <_strtod_l+0xf6>
 800e494:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e610 <_strtod_l+0x290>
 800e498:	e7ed      	b.n	800e476 <_strtod_l+0xf6>
 800e49a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e49e:	f04f 38ff 	mov.w	r8, #4294967295
 800e4a2:	e7e8      	b.n	800e476 <_strtod_l+0xf6>
 800e4a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4a6:	1c5a      	adds	r2, r3, #1
 800e4a8:	9219      	str	r2, [sp, #100]	; 0x64
 800e4aa:	785b      	ldrb	r3, [r3, #1]
 800e4ac:	2b30      	cmp	r3, #48	; 0x30
 800e4ae:	d0f9      	beq.n	800e4a4 <_strtod_l+0x124>
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d0a6      	beq.n	800e402 <_strtod_l+0x82>
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	9307      	str	r3, [sp, #28]
 800e4b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4ba:	220a      	movs	r2, #10
 800e4bc:	9308      	str	r3, [sp, #32]
 800e4be:	2300      	movs	r3, #0
 800e4c0:	469b      	mov	fp, r3
 800e4c2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e4c6:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e4c8:	7805      	ldrb	r5, [r0, #0]
 800e4ca:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800e4ce:	b2d9      	uxtb	r1, r3
 800e4d0:	2909      	cmp	r1, #9
 800e4d2:	d927      	bls.n	800e524 <_strtod_l+0x1a4>
 800e4d4:	4622      	mov	r2, r4
 800e4d6:	4639      	mov	r1, r7
 800e4d8:	f002 fef6 	bl	80112c8 <strncmp>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d033      	beq.n	800e548 <_strtod_l+0x1c8>
 800e4e0:	2000      	movs	r0, #0
 800e4e2:	462a      	mov	r2, r5
 800e4e4:	465c      	mov	r4, fp
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	9004      	str	r0, [sp, #16]
 800e4ea:	2a65      	cmp	r2, #101	; 0x65
 800e4ec:	d001      	beq.n	800e4f2 <_strtod_l+0x172>
 800e4ee:	2a45      	cmp	r2, #69	; 0x45
 800e4f0:	d114      	bne.n	800e51c <_strtod_l+0x19c>
 800e4f2:	b91c      	cbnz	r4, 800e4fc <_strtod_l+0x17c>
 800e4f4:	9a07      	ldr	r2, [sp, #28]
 800e4f6:	4302      	orrs	r2, r0
 800e4f8:	d09f      	beq.n	800e43a <_strtod_l+0xba>
 800e4fa:	2400      	movs	r4, #0
 800e4fc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800e4fe:	1c72      	adds	r2, r6, #1
 800e500:	9219      	str	r2, [sp, #100]	; 0x64
 800e502:	7872      	ldrb	r2, [r6, #1]
 800e504:	2a2b      	cmp	r2, #43	; 0x2b
 800e506:	d079      	beq.n	800e5fc <_strtod_l+0x27c>
 800e508:	2a2d      	cmp	r2, #45	; 0x2d
 800e50a:	f000 8083 	beq.w	800e614 <_strtod_l+0x294>
 800e50e:	2700      	movs	r7, #0
 800e510:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e514:	2909      	cmp	r1, #9
 800e516:	f240 8083 	bls.w	800e620 <_strtod_l+0x2a0>
 800e51a:	9619      	str	r6, [sp, #100]	; 0x64
 800e51c:	2500      	movs	r5, #0
 800e51e:	e09f      	b.n	800e660 <_strtod_l+0x2e0>
 800e520:	2300      	movs	r3, #0
 800e522:	e7c8      	b.n	800e4b6 <_strtod_l+0x136>
 800e524:	f1bb 0f08 	cmp.w	fp, #8
 800e528:	bfd5      	itete	le
 800e52a:	9906      	ldrle	r1, [sp, #24]
 800e52c:	9905      	ldrgt	r1, [sp, #20]
 800e52e:	fb02 3301 	mlale	r3, r2, r1, r3
 800e532:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e536:	f100 0001 	add.w	r0, r0, #1
 800e53a:	bfd4      	ite	le
 800e53c:	9306      	strle	r3, [sp, #24]
 800e53e:	9305      	strgt	r3, [sp, #20]
 800e540:	f10b 0b01 	add.w	fp, fp, #1
 800e544:	9019      	str	r0, [sp, #100]	; 0x64
 800e546:	e7be      	b.n	800e4c6 <_strtod_l+0x146>
 800e548:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e54a:	191a      	adds	r2, r3, r4
 800e54c:	9219      	str	r2, [sp, #100]	; 0x64
 800e54e:	5d1a      	ldrb	r2, [r3, r4]
 800e550:	f1bb 0f00 	cmp.w	fp, #0
 800e554:	d036      	beq.n	800e5c4 <_strtod_l+0x244>
 800e556:	465c      	mov	r4, fp
 800e558:	9004      	str	r0, [sp, #16]
 800e55a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e55e:	2b09      	cmp	r3, #9
 800e560:	d912      	bls.n	800e588 <_strtod_l+0x208>
 800e562:	2301      	movs	r3, #1
 800e564:	e7c1      	b.n	800e4ea <_strtod_l+0x16a>
 800e566:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e568:	3001      	adds	r0, #1
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	9219      	str	r2, [sp, #100]	; 0x64
 800e56e:	785a      	ldrb	r2, [r3, #1]
 800e570:	2a30      	cmp	r2, #48	; 0x30
 800e572:	d0f8      	beq.n	800e566 <_strtod_l+0x1e6>
 800e574:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e578:	2b08      	cmp	r3, #8
 800e57a:	f200 84d5 	bhi.w	800ef28 <_strtod_l+0xba8>
 800e57e:	9004      	str	r0, [sp, #16]
 800e580:	2000      	movs	r0, #0
 800e582:	4604      	mov	r4, r0
 800e584:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e586:	9308      	str	r3, [sp, #32]
 800e588:	3a30      	subs	r2, #48	; 0x30
 800e58a:	f100 0301 	add.w	r3, r0, #1
 800e58e:	d013      	beq.n	800e5b8 <_strtod_l+0x238>
 800e590:	9904      	ldr	r1, [sp, #16]
 800e592:	1905      	adds	r5, r0, r4
 800e594:	4419      	add	r1, r3
 800e596:	9104      	str	r1, [sp, #16]
 800e598:	4623      	mov	r3, r4
 800e59a:	210a      	movs	r1, #10
 800e59c:	42ab      	cmp	r3, r5
 800e59e:	d113      	bne.n	800e5c8 <_strtod_l+0x248>
 800e5a0:	1823      	adds	r3, r4, r0
 800e5a2:	2b08      	cmp	r3, #8
 800e5a4:	f104 0401 	add.w	r4, r4, #1
 800e5a8:	4404      	add	r4, r0
 800e5aa:	dc1b      	bgt.n	800e5e4 <_strtod_l+0x264>
 800e5ac:	230a      	movs	r3, #10
 800e5ae:	9906      	ldr	r1, [sp, #24]
 800e5b0:	fb03 2301 	mla	r3, r3, r1, r2
 800e5b4:	9306      	str	r3, [sp, #24]
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	1c51      	adds	r1, r2, #1
 800e5be:	9119      	str	r1, [sp, #100]	; 0x64
 800e5c0:	7852      	ldrb	r2, [r2, #1]
 800e5c2:	e7ca      	b.n	800e55a <_strtod_l+0x1da>
 800e5c4:	4658      	mov	r0, fp
 800e5c6:	e7d3      	b.n	800e570 <_strtod_l+0x1f0>
 800e5c8:	2b08      	cmp	r3, #8
 800e5ca:	dc04      	bgt.n	800e5d6 <_strtod_l+0x256>
 800e5cc:	9f06      	ldr	r7, [sp, #24]
 800e5ce:	434f      	muls	r7, r1
 800e5d0:	9706      	str	r7, [sp, #24]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	e7e2      	b.n	800e59c <_strtod_l+0x21c>
 800e5d6:	1c5f      	adds	r7, r3, #1
 800e5d8:	2f10      	cmp	r7, #16
 800e5da:	bfde      	ittt	le
 800e5dc:	9f05      	ldrle	r7, [sp, #20]
 800e5de:	434f      	mulle	r7, r1
 800e5e0:	9705      	strle	r7, [sp, #20]
 800e5e2:	e7f6      	b.n	800e5d2 <_strtod_l+0x252>
 800e5e4:	2c10      	cmp	r4, #16
 800e5e6:	bfdf      	itttt	le
 800e5e8:	230a      	movle	r3, #10
 800e5ea:	9905      	ldrle	r1, [sp, #20]
 800e5ec:	fb03 2301 	mlale	r3, r3, r1, r2
 800e5f0:	9305      	strle	r3, [sp, #20]
 800e5f2:	e7e0      	b.n	800e5b6 <_strtod_l+0x236>
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	9304      	str	r3, [sp, #16]
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	e77b      	b.n	800e4f4 <_strtod_l+0x174>
 800e5fc:	2700      	movs	r7, #0
 800e5fe:	1cb2      	adds	r2, r6, #2
 800e600:	9219      	str	r2, [sp, #100]	; 0x64
 800e602:	78b2      	ldrb	r2, [r6, #2]
 800e604:	e784      	b.n	800e510 <_strtod_l+0x190>
 800e606:	bf00      	nop
 800e608:	08011e10 	.word	0x08011e10
 800e60c:	08011c2c 	.word	0x08011c2c
 800e610:	7ff00000 	.word	0x7ff00000
 800e614:	2701      	movs	r7, #1
 800e616:	e7f2      	b.n	800e5fe <_strtod_l+0x27e>
 800e618:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e61a:	1c51      	adds	r1, r2, #1
 800e61c:	9119      	str	r1, [sp, #100]	; 0x64
 800e61e:	7852      	ldrb	r2, [r2, #1]
 800e620:	2a30      	cmp	r2, #48	; 0x30
 800e622:	d0f9      	beq.n	800e618 <_strtod_l+0x298>
 800e624:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e628:	2908      	cmp	r1, #8
 800e62a:	f63f af77 	bhi.w	800e51c <_strtod_l+0x19c>
 800e62e:	f04f 0e0a 	mov.w	lr, #10
 800e632:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e636:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e638:	9209      	str	r2, [sp, #36]	; 0x24
 800e63a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e63c:	1c51      	adds	r1, r2, #1
 800e63e:	9119      	str	r1, [sp, #100]	; 0x64
 800e640:	7852      	ldrb	r2, [r2, #1]
 800e642:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e646:	2d09      	cmp	r5, #9
 800e648:	d935      	bls.n	800e6b6 <_strtod_l+0x336>
 800e64a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e64c:	1b49      	subs	r1, r1, r5
 800e64e:	2908      	cmp	r1, #8
 800e650:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e654:	dc02      	bgt.n	800e65c <_strtod_l+0x2dc>
 800e656:	4565      	cmp	r5, ip
 800e658:	bfa8      	it	ge
 800e65a:	4665      	movge	r5, ip
 800e65c:	b107      	cbz	r7, 800e660 <_strtod_l+0x2e0>
 800e65e:	426d      	negs	r5, r5
 800e660:	2c00      	cmp	r4, #0
 800e662:	d14c      	bne.n	800e6fe <_strtod_l+0x37e>
 800e664:	9907      	ldr	r1, [sp, #28]
 800e666:	4301      	orrs	r1, r0
 800e668:	f47f aecb 	bne.w	800e402 <_strtod_l+0x82>
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f47f aee4 	bne.w	800e43a <_strtod_l+0xba>
 800e672:	2a69      	cmp	r2, #105	; 0x69
 800e674:	d026      	beq.n	800e6c4 <_strtod_l+0x344>
 800e676:	dc23      	bgt.n	800e6c0 <_strtod_l+0x340>
 800e678:	2a49      	cmp	r2, #73	; 0x49
 800e67a:	d023      	beq.n	800e6c4 <_strtod_l+0x344>
 800e67c:	2a4e      	cmp	r2, #78	; 0x4e
 800e67e:	f47f aedc 	bne.w	800e43a <_strtod_l+0xba>
 800e682:	499d      	ldr	r1, [pc, #628]	; (800e8f8 <_strtod_l+0x578>)
 800e684:	a819      	add	r0, sp, #100	; 0x64
 800e686:	f001 fe2d 	bl	80102e4 <__match>
 800e68a:	2800      	cmp	r0, #0
 800e68c:	f43f aed5 	beq.w	800e43a <_strtod_l+0xba>
 800e690:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	2b28      	cmp	r3, #40	; 0x28
 800e696:	d12c      	bne.n	800e6f2 <_strtod_l+0x372>
 800e698:	4998      	ldr	r1, [pc, #608]	; (800e8fc <_strtod_l+0x57c>)
 800e69a:	aa1c      	add	r2, sp, #112	; 0x70
 800e69c:	a819      	add	r0, sp, #100	; 0x64
 800e69e:	f001 fe35 	bl	801030c <__hexnan>
 800e6a2:	2805      	cmp	r0, #5
 800e6a4:	d125      	bne.n	800e6f2 <_strtod_l+0x372>
 800e6a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6a8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800e6ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e6b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e6b4:	e6a5      	b.n	800e402 <_strtod_l+0x82>
 800e6b6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800e6ba:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800e6be:	e7bc      	b.n	800e63a <_strtod_l+0x2ba>
 800e6c0:	2a6e      	cmp	r2, #110	; 0x6e
 800e6c2:	e7dc      	b.n	800e67e <_strtod_l+0x2fe>
 800e6c4:	498e      	ldr	r1, [pc, #568]	; (800e900 <_strtod_l+0x580>)
 800e6c6:	a819      	add	r0, sp, #100	; 0x64
 800e6c8:	f001 fe0c 	bl	80102e4 <__match>
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	f43f aeb4 	beq.w	800e43a <_strtod_l+0xba>
 800e6d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e6d4:	498b      	ldr	r1, [pc, #556]	; (800e904 <_strtod_l+0x584>)
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	a819      	add	r0, sp, #100	; 0x64
 800e6da:	9319      	str	r3, [sp, #100]	; 0x64
 800e6dc:	f001 fe02 	bl	80102e4 <__match>
 800e6e0:	b910      	cbnz	r0, 800e6e8 <_strtod_l+0x368>
 800e6e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	9319      	str	r3, [sp, #100]	; 0x64
 800e6e8:	f04f 0800 	mov.w	r8, #0
 800e6ec:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800e908 <_strtod_l+0x588>
 800e6f0:	e687      	b.n	800e402 <_strtod_l+0x82>
 800e6f2:	4886      	ldr	r0, [pc, #536]	; (800e90c <_strtod_l+0x58c>)
 800e6f4:	f002 fdd2 	bl	801129c <nan>
 800e6f8:	4680      	mov	r8, r0
 800e6fa:	4689      	mov	r9, r1
 800e6fc:	e681      	b.n	800e402 <_strtod_l+0x82>
 800e6fe:	9b04      	ldr	r3, [sp, #16]
 800e700:	f1bb 0f00 	cmp.w	fp, #0
 800e704:	bf08      	it	eq
 800e706:	46a3      	moveq	fp, r4
 800e708:	1aeb      	subs	r3, r5, r3
 800e70a:	2c10      	cmp	r4, #16
 800e70c:	9806      	ldr	r0, [sp, #24]
 800e70e:	4626      	mov	r6, r4
 800e710:	9307      	str	r3, [sp, #28]
 800e712:	bfa8      	it	ge
 800e714:	2610      	movge	r6, #16
 800e716:	f7f1 fe87 	bl	8000428 <__aeabi_ui2d>
 800e71a:	2c09      	cmp	r4, #9
 800e71c:	4680      	mov	r8, r0
 800e71e:	4689      	mov	r9, r1
 800e720:	dd13      	ble.n	800e74a <_strtod_l+0x3ca>
 800e722:	4b7b      	ldr	r3, [pc, #492]	; (800e910 <_strtod_l+0x590>)
 800e724:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e728:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e72c:	f7f1 fef6 	bl	800051c <__aeabi_dmul>
 800e730:	4680      	mov	r8, r0
 800e732:	9805      	ldr	r0, [sp, #20]
 800e734:	4689      	mov	r9, r1
 800e736:	f7f1 fe77 	bl	8000428 <__aeabi_ui2d>
 800e73a:	4602      	mov	r2, r0
 800e73c:	460b      	mov	r3, r1
 800e73e:	4640      	mov	r0, r8
 800e740:	4649      	mov	r1, r9
 800e742:	f7f1 fd35 	bl	80001b0 <__adddf3>
 800e746:	4680      	mov	r8, r0
 800e748:	4689      	mov	r9, r1
 800e74a:	2c0f      	cmp	r4, #15
 800e74c:	dc36      	bgt.n	800e7bc <_strtod_l+0x43c>
 800e74e:	9b07      	ldr	r3, [sp, #28]
 800e750:	2b00      	cmp	r3, #0
 800e752:	f43f ae56 	beq.w	800e402 <_strtod_l+0x82>
 800e756:	dd22      	ble.n	800e79e <_strtod_l+0x41e>
 800e758:	2b16      	cmp	r3, #22
 800e75a:	dc09      	bgt.n	800e770 <_strtod_l+0x3f0>
 800e75c:	496c      	ldr	r1, [pc, #432]	; (800e910 <_strtod_l+0x590>)
 800e75e:	4642      	mov	r2, r8
 800e760:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e764:	464b      	mov	r3, r9
 800e766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e76a:	f7f1 fed7 	bl	800051c <__aeabi_dmul>
 800e76e:	e7c3      	b.n	800e6f8 <_strtod_l+0x378>
 800e770:	9a07      	ldr	r2, [sp, #28]
 800e772:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e776:	4293      	cmp	r3, r2
 800e778:	db20      	blt.n	800e7bc <_strtod_l+0x43c>
 800e77a:	4d65      	ldr	r5, [pc, #404]	; (800e910 <_strtod_l+0x590>)
 800e77c:	f1c4 040f 	rsb	r4, r4, #15
 800e780:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e784:	4642      	mov	r2, r8
 800e786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e78a:	464b      	mov	r3, r9
 800e78c:	f7f1 fec6 	bl	800051c <__aeabi_dmul>
 800e790:	9b07      	ldr	r3, [sp, #28]
 800e792:	1b1c      	subs	r4, r3, r4
 800e794:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e798:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e79c:	e7e5      	b.n	800e76a <_strtod_l+0x3ea>
 800e79e:	9b07      	ldr	r3, [sp, #28]
 800e7a0:	3316      	adds	r3, #22
 800e7a2:	db0b      	blt.n	800e7bc <_strtod_l+0x43c>
 800e7a4:	9b04      	ldr	r3, [sp, #16]
 800e7a6:	4640      	mov	r0, r8
 800e7a8:	1b5d      	subs	r5, r3, r5
 800e7aa:	4b59      	ldr	r3, [pc, #356]	; (800e910 <_strtod_l+0x590>)
 800e7ac:	4649      	mov	r1, r9
 800e7ae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e7b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e7b6:	f7f1 ffdb 	bl	8000770 <__aeabi_ddiv>
 800e7ba:	e79d      	b.n	800e6f8 <_strtod_l+0x378>
 800e7bc:	9b07      	ldr	r3, [sp, #28]
 800e7be:	1ba6      	subs	r6, r4, r6
 800e7c0:	441e      	add	r6, r3
 800e7c2:	2e00      	cmp	r6, #0
 800e7c4:	dd74      	ble.n	800e8b0 <_strtod_l+0x530>
 800e7c6:	f016 030f 	ands.w	r3, r6, #15
 800e7ca:	d00a      	beq.n	800e7e2 <_strtod_l+0x462>
 800e7cc:	4950      	ldr	r1, [pc, #320]	; (800e910 <_strtod_l+0x590>)
 800e7ce:	4642      	mov	r2, r8
 800e7d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e7d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7d8:	464b      	mov	r3, r9
 800e7da:	f7f1 fe9f 	bl	800051c <__aeabi_dmul>
 800e7de:	4680      	mov	r8, r0
 800e7e0:	4689      	mov	r9, r1
 800e7e2:	f036 060f 	bics.w	r6, r6, #15
 800e7e6:	d052      	beq.n	800e88e <_strtod_l+0x50e>
 800e7e8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800e7ec:	dd27      	ble.n	800e83e <_strtod_l+0x4be>
 800e7ee:	f04f 0b00 	mov.w	fp, #0
 800e7f2:	f8cd b010 	str.w	fp, [sp, #16]
 800e7f6:	f8cd b020 	str.w	fp, [sp, #32]
 800e7fa:	f8cd b018 	str.w	fp, [sp, #24]
 800e7fe:	2322      	movs	r3, #34	; 0x22
 800e800:	f04f 0800 	mov.w	r8, #0
 800e804:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800e908 <_strtod_l+0x588>
 800e808:	f8ca 3000 	str.w	r3, [sl]
 800e80c:	9b08      	ldr	r3, [sp, #32]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f43f adf7 	beq.w	800e402 <_strtod_l+0x82>
 800e814:	4650      	mov	r0, sl
 800e816:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e818:	f001 fe80 	bl	801051c <_Bfree>
 800e81c:	4650      	mov	r0, sl
 800e81e:	9906      	ldr	r1, [sp, #24]
 800e820:	f001 fe7c 	bl	801051c <_Bfree>
 800e824:	4650      	mov	r0, sl
 800e826:	9904      	ldr	r1, [sp, #16]
 800e828:	f001 fe78 	bl	801051c <_Bfree>
 800e82c:	4650      	mov	r0, sl
 800e82e:	9908      	ldr	r1, [sp, #32]
 800e830:	f001 fe74 	bl	801051c <_Bfree>
 800e834:	4659      	mov	r1, fp
 800e836:	4650      	mov	r0, sl
 800e838:	f001 fe70 	bl	801051c <_Bfree>
 800e83c:	e5e1      	b.n	800e402 <_strtod_l+0x82>
 800e83e:	4b35      	ldr	r3, [pc, #212]	; (800e914 <_strtod_l+0x594>)
 800e840:	4640      	mov	r0, r8
 800e842:	9305      	str	r3, [sp, #20]
 800e844:	2300      	movs	r3, #0
 800e846:	4649      	mov	r1, r9
 800e848:	461f      	mov	r7, r3
 800e84a:	1136      	asrs	r6, r6, #4
 800e84c:	2e01      	cmp	r6, #1
 800e84e:	dc21      	bgt.n	800e894 <_strtod_l+0x514>
 800e850:	b10b      	cbz	r3, 800e856 <_strtod_l+0x4d6>
 800e852:	4680      	mov	r8, r0
 800e854:	4689      	mov	r9, r1
 800e856:	4b2f      	ldr	r3, [pc, #188]	; (800e914 <_strtod_l+0x594>)
 800e858:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e85c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e860:	4642      	mov	r2, r8
 800e862:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e866:	464b      	mov	r3, r9
 800e868:	f7f1 fe58 	bl	800051c <__aeabi_dmul>
 800e86c:	4b26      	ldr	r3, [pc, #152]	; (800e908 <_strtod_l+0x588>)
 800e86e:	460a      	mov	r2, r1
 800e870:	400b      	ands	r3, r1
 800e872:	4929      	ldr	r1, [pc, #164]	; (800e918 <_strtod_l+0x598>)
 800e874:	4680      	mov	r8, r0
 800e876:	428b      	cmp	r3, r1
 800e878:	d8b9      	bhi.n	800e7ee <_strtod_l+0x46e>
 800e87a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e87e:	428b      	cmp	r3, r1
 800e880:	bf86      	itte	hi
 800e882:	f04f 38ff 	movhi.w	r8, #4294967295
 800e886:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800e91c <_strtod_l+0x59c>
 800e88a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e88e:	2300      	movs	r3, #0
 800e890:	9305      	str	r3, [sp, #20]
 800e892:	e07f      	b.n	800e994 <_strtod_l+0x614>
 800e894:	07f2      	lsls	r2, r6, #31
 800e896:	d505      	bpl.n	800e8a4 <_strtod_l+0x524>
 800e898:	9b05      	ldr	r3, [sp, #20]
 800e89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89e:	f7f1 fe3d 	bl	800051c <__aeabi_dmul>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	9a05      	ldr	r2, [sp, #20]
 800e8a6:	3701      	adds	r7, #1
 800e8a8:	3208      	adds	r2, #8
 800e8aa:	1076      	asrs	r6, r6, #1
 800e8ac:	9205      	str	r2, [sp, #20]
 800e8ae:	e7cd      	b.n	800e84c <_strtod_l+0x4cc>
 800e8b0:	d0ed      	beq.n	800e88e <_strtod_l+0x50e>
 800e8b2:	4276      	negs	r6, r6
 800e8b4:	f016 020f 	ands.w	r2, r6, #15
 800e8b8:	d00a      	beq.n	800e8d0 <_strtod_l+0x550>
 800e8ba:	4b15      	ldr	r3, [pc, #84]	; (800e910 <_strtod_l+0x590>)
 800e8bc:	4640      	mov	r0, r8
 800e8be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8c2:	4649      	mov	r1, r9
 800e8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c8:	f7f1 ff52 	bl	8000770 <__aeabi_ddiv>
 800e8cc:	4680      	mov	r8, r0
 800e8ce:	4689      	mov	r9, r1
 800e8d0:	1136      	asrs	r6, r6, #4
 800e8d2:	d0dc      	beq.n	800e88e <_strtod_l+0x50e>
 800e8d4:	2e1f      	cmp	r6, #31
 800e8d6:	dd23      	ble.n	800e920 <_strtod_l+0x5a0>
 800e8d8:	f04f 0b00 	mov.w	fp, #0
 800e8dc:	f8cd b010 	str.w	fp, [sp, #16]
 800e8e0:	f8cd b020 	str.w	fp, [sp, #32]
 800e8e4:	f8cd b018 	str.w	fp, [sp, #24]
 800e8e8:	2322      	movs	r3, #34	; 0x22
 800e8ea:	f04f 0800 	mov.w	r8, #0
 800e8ee:	f04f 0900 	mov.w	r9, #0
 800e8f2:	f8ca 3000 	str.w	r3, [sl]
 800e8f6:	e789      	b.n	800e80c <_strtod_l+0x48c>
 800e8f8:	08011c05 	.word	0x08011c05
 800e8fc:	08011c40 	.word	0x08011c40
 800e900:	08011bfd 	.word	0x08011bfd
 800e904:	08011d33 	.word	0x08011d33
 800e908:	7ff00000 	.word	0x7ff00000
 800e90c:	08011d2f 	.word	0x08011d2f
 800e910:	08011ea8 	.word	0x08011ea8
 800e914:	08011e80 	.word	0x08011e80
 800e918:	7ca00000 	.word	0x7ca00000
 800e91c:	7fefffff 	.word	0x7fefffff
 800e920:	f016 0310 	ands.w	r3, r6, #16
 800e924:	bf18      	it	ne
 800e926:	236a      	movne	r3, #106	; 0x6a
 800e928:	4640      	mov	r0, r8
 800e92a:	9305      	str	r3, [sp, #20]
 800e92c:	4649      	mov	r1, r9
 800e92e:	2300      	movs	r3, #0
 800e930:	4fb0      	ldr	r7, [pc, #704]	; (800ebf4 <_strtod_l+0x874>)
 800e932:	07f2      	lsls	r2, r6, #31
 800e934:	d504      	bpl.n	800e940 <_strtod_l+0x5c0>
 800e936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e93a:	f7f1 fdef 	bl	800051c <__aeabi_dmul>
 800e93e:	2301      	movs	r3, #1
 800e940:	1076      	asrs	r6, r6, #1
 800e942:	f107 0708 	add.w	r7, r7, #8
 800e946:	d1f4      	bne.n	800e932 <_strtod_l+0x5b2>
 800e948:	b10b      	cbz	r3, 800e94e <_strtod_l+0x5ce>
 800e94a:	4680      	mov	r8, r0
 800e94c:	4689      	mov	r9, r1
 800e94e:	9b05      	ldr	r3, [sp, #20]
 800e950:	b1c3      	cbz	r3, 800e984 <_strtod_l+0x604>
 800e952:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e956:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	4649      	mov	r1, r9
 800e95e:	dd11      	ble.n	800e984 <_strtod_l+0x604>
 800e960:	2b1f      	cmp	r3, #31
 800e962:	f340 8127 	ble.w	800ebb4 <_strtod_l+0x834>
 800e966:	2b34      	cmp	r3, #52	; 0x34
 800e968:	bfd8      	it	le
 800e96a:	f04f 33ff 	movle.w	r3, #4294967295
 800e96e:	f04f 0800 	mov.w	r8, #0
 800e972:	bfcf      	iteee	gt
 800e974:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e978:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e97c:	fa03 f202 	lslle.w	r2, r3, r2
 800e980:	ea02 0901 	andle.w	r9, r2, r1
 800e984:	2200      	movs	r2, #0
 800e986:	2300      	movs	r3, #0
 800e988:	4640      	mov	r0, r8
 800e98a:	4649      	mov	r1, r9
 800e98c:	f7f2 f82e 	bl	80009ec <__aeabi_dcmpeq>
 800e990:	2800      	cmp	r0, #0
 800e992:	d1a1      	bne.n	800e8d8 <_strtod_l+0x558>
 800e994:	9b06      	ldr	r3, [sp, #24]
 800e996:	465a      	mov	r2, fp
 800e998:	9300      	str	r3, [sp, #0]
 800e99a:	4650      	mov	r0, sl
 800e99c:	4623      	mov	r3, r4
 800e99e:	9908      	ldr	r1, [sp, #32]
 800e9a0:	f001 fe24 	bl	80105ec <__s2b>
 800e9a4:	9008      	str	r0, [sp, #32]
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	f43f af21 	beq.w	800e7ee <_strtod_l+0x46e>
 800e9ac:	9b04      	ldr	r3, [sp, #16]
 800e9ae:	f04f 0b00 	mov.w	fp, #0
 800e9b2:	1b5d      	subs	r5, r3, r5
 800e9b4:	9b07      	ldr	r3, [sp, #28]
 800e9b6:	f8cd b010 	str.w	fp, [sp, #16]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	bfb4      	ite	lt
 800e9be:	462b      	movlt	r3, r5
 800e9c0:	2300      	movge	r3, #0
 800e9c2:	930e      	str	r3, [sp, #56]	; 0x38
 800e9c4:	9b07      	ldr	r3, [sp, #28]
 800e9c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e9ca:	9314      	str	r3, [sp, #80]	; 0x50
 800e9cc:	9b08      	ldr	r3, [sp, #32]
 800e9ce:	4650      	mov	r0, sl
 800e9d0:	6859      	ldr	r1, [r3, #4]
 800e9d2:	f001 fd63 	bl	801049c <_Balloc>
 800e9d6:	9006      	str	r0, [sp, #24]
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	f43f af10 	beq.w	800e7fe <_strtod_l+0x47e>
 800e9de:	9b08      	ldr	r3, [sp, #32]
 800e9e0:	300c      	adds	r0, #12
 800e9e2:	691a      	ldr	r2, [r3, #16]
 800e9e4:	f103 010c 	add.w	r1, r3, #12
 800e9e8:	3202      	adds	r2, #2
 800e9ea:	0092      	lsls	r2, r2, #2
 800e9ec:	f7ff f826 	bl	800da3c <memcpy>
 800e9f0:	ab1c      	add	r3, sp, #112	; 0x70
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	ab1b      	add	r3, sp, #108	; 0x6c
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	4642      	mov	r2, r8
 800e9fa:	464b      	mov	r3, r9
 800e9fc:	4650      	mov	r0, sl
 800e9fe:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800ea02:	f002 f935 	bl	8010c70 <__d2b>
 800ea06:	901a      	str	r0, [sp, #104]	; 0x68
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	f43f aef8 	beq.w	800e7fe <_strtod_l+0x47e>
 800ea0e:	2101      	movs	r1, #1
 800ea10:	4650      	mov	r0, sl
 800ea12:	f001 fe83 	bl	801071c <__i2b>
 800ea16:	4603      	mov	r3, r0
 800ea18:	9004      	str	r0, [sp, #16]
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	f43f aeef 	beq.w	800e7fe <_strtod_l+0x47e>
 800ea20:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ea22:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ea24:	2d00      	cmp	r5, #0
 800ea26:	bfab      	itete	ge
 800ea28:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ea2a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800ea2c:	18ee      	addge	r6, r5, r3
 800ea2e:	1b5c      	sublt	r4, r3, r5
 800ea30:	9b05      	ldr	r3, [sp, #20]
 800ea32:	bfa8      	it	ge
 800ea34:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800ea36:	eba5 0503 	sub.w	r5, r5, r3
 800ea3a:	4415      	add	r5, r2
 800ea3c:	4b6e      	ldr	r3, [pc, #440]	; (800ebf8 <_strtod_l+0x878>)
 800ea3e:	f105 35ff 	add.w	r5, r5, #4294967295
 800ea42:	bfb8      	it	lt
 800ea44:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800ea46:	429d      	cmp	r5, r3
 800ea48:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ea4c:	f280 80c4 	bge.w	800ebd8 <_strtod_l+0x858>
 800ea50:	1b5b      	subs	r3, r3, r5
 800ea52:	2b1f      	cmp	r3, #31
 800ea54:	f04f 0701 	mov.w	r7, #1
 800ea58:	eba2 0203 	sub.w	r2, r2, r3
 800ea5c:	f300 80b1 	bgt.w	800ebc2 <_strtod_l+0x842>
 800ea60:	2500      	movs	r5, #0
 800ea62:	fa07 f303 	lsl.w	r3, r7, r3
 800ea66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea68:	18b7      	adds	r7, r6, r2
 800ea6a:	9b05      	ldr	r3, [sp, #20]
 800ea6c:	42be      	cmp	r6, r7
 800ea6e:	4414      	add	r4, r2
 800ea70:	441c      	add	r4, r3
 800ea72:	4633      	mov	r3, r6
 800ea74:	bfa8      	it	ge
 800ea76:	463b      	movge	r3, r7
 800ea78:	42a3      	cmp	r3, r4
 800ea7a:	bfa8      	it	ge
 800ea7c:	4623      	movge	r3, r4
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	bfc2      	ittt	gt
 800ea82:	1aff      	subgt	r7, r7, r3
 800ea84:	1ae4      	subgt	r4, r4, r3
 800ea86:	1af6      	subgt	r6, r6, r3
 800ea88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	dd17      	ble.n	800eabe <_strtod_l+0x73e>
 800ea8e:	461a      	mov	r2, r3
 800ea90:	4650      	mov	r0, sl
 800ea92:	9904      	ldr	r1, [sp, #16]
 800ea94:	f001 ff00 	bl	8010898 <__pow5mult>
 800ea98:	9004      	str	r0, [sp, #16]
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	f43f aeaf 	beq.w	800e7fe <_strtod_l+0x47e>
 800eaa0:	4601      	mov	r1, r0
 800eaa2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eaa4:	4650      	mov	r0, sl
 800eaa6:	f001 fe4f 	bl	8010748 <__multiply>
 800eaaa:	9009      	str	r0, [sp, #36]	; 0x24
 800eaac:	2800      	cmp	r0, #0
 800eaae:	f43f aea6 	beq.w	800e7fe <_strtod_l+0x47e>
 800eab2:	4650      	mov	r0, sl
 800eab4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800eab6:	f001 fd31 	bl	801051c <_Bfree>
 800eaba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eabc:	931a      	str	r3, [sp, #104]	; 0x68
 800eabe:	2f00      	cmp	r7, #0
 800eac0:	f300 808e 	bgt.w	800ebe0 <_strtod_l+0x860>
 800eac4:	9b07      	ldr	r3, [sp, #28]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	dd08      	ble.n	800eadc <_strtod_l+0x75c>
 800eaca:	4650      	mov	r0, sl
 800eacc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eace:	9906      	ldr	r1, [sp, #24]
 800ead0:	f001 fee2 	bl	8010898 <__pow5mult>
 800ead4:	9006      	str	r0, [sp, #24]
 800ead6:	2800      	cmp	r0, #0
 800ead8:	f43f ae91 	beq.w	800e7fe <_strtod_l+0x47e>
 800eadc:	2c00      	cmp	r4, #0
 800eade:	dd08      	ble.n	800eaf2 <_strtod_l+0x772>
 800eae0:	4622      	mov	r2, r4
 800eae2:	4650      	mov	r0, sl
 800eae4:	9906      	ldr	r1, [sp, #24]
 800eae6:	f001 ff31 	bl	801094c <__lshift>
 800eaea:	9006      	str	r0, [sp, #24]
 800eaec:	2800      	cmp	r0, #0
 800eaee:	f43f ae86 	beq.w	800e7fe <_strtod_l+0x47e>
 800eaf2:	2e00      	cmp	r6, #0
 800eaf4:	dd08      	ble.n	800eb08 <_strtod_l+0x788>
 800eaf6:	4632      	mov	r2, r6
 800eaf8:	4650      	mov	r0, sl
 800eafa:	9904      	ldr	r1, [sp, #16]
 800eafc:	f001 ff26 	bl	801094c <__lshift>
 800eb00:	9004      	str	r0, [sp, #16]
 800eb02:	2800      	cmp	r0, #0
 800eb04:	f43f ae7b 	beq.w	800e7fe <_strtod_l+0x47e>
 800eb08:	4650      	mov	r0, sl
 800eb0a:	9a06      	ldr	r2, [sp, #24]
 800eb0c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800eb0e:	f001 ffa9 	bl	8010a64 <__mdiff>
 800eb12:	4683      	mov	fp, r0
 800eb14:	2800      	cmp	r0, #0
 800eb16:	f43f ae72 	beq.w	800e7fe <_strtod_l+0x47e>
 800eb1a:	2400      	movs	r4, #0
 800eb1c:	68c3      	ldr	r3, [r0, #12]
 800eb1e:	9904      	ldr	r1, [sp, #16]
 800eb20:	60c4      	str	r4, [r0, #12]
 800eb22:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb24:	f001 ff82 	bl	8010a2c <__mcmp>
 800eb28:	42a0      	cmp	r0, r4
 800eb2a:	da6b      	bge.n	800ec04 <_strtod_l+0x884>
 800eb2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb2e:	ea53 0308 	orrs.w	r3, r3, r8
 800eb32:	f040 8091 	bne.w	800ec58 <_strtod_l+0x8d8>
 800eb36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f040 808c 	bne.w	800ec58 <_strtod_l+0x8d8>
 800eb40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb44:	0d1b      	lsrs	r3, r3, #20
 800eb46:	051b      	lsls	r3, r3, #20
 800eb48:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800eb4c:	f240 8084 	bls.w	800ec58 <_strtod_l+0x8d8>
 800eb50:	f8db 3014 	ldr.w	r3, [fp, #20]
 800eb54:	b91b      	cbnz	r3, 800eb5e <_strtod_l+0x7de>
 800eb56:	f8db 3010 	ldr.w	r3, [fp, #16]
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	dd7c      	ble.n	800ec58 <_strtod_l+0x8d8>
 800eb5e:	4659      	mov	r1, fp
 800eb60:	2201      	movs	r2, #1
 800eb62:	4650      	mov	r0, sl
 800eb64:	f001 fef2 	bl	801094c <__lshift>
 800eb68:	9904      	ldr	r1, [sp, #16]
 800eb6a:	4683      	mov	fp, r0
 800eb6c:	f001 ff5e 	bl	8010a2c <__mcmp>
 800eb70:	2800      	cmp	r0, #0
 800eb72:	dd71      	ble.n	800ec58 <_strtod_l+0x8d8>
 800eb74:	9905      	ldr	r1, [sp, #20]
 800eb76:	464b      	mov	r3, r9
 800eb78:	4a20      	ldr	r2, [pc, #128]	; (800ebfc <_strtod_l+0x87c>)
 800eb7a:	2900      	cmp	r1, #0
 800eb7c:	f000 808c 	beq.w	800ec98 <_strtod_l+0x918>
 800eb80:	ea02 0109 	and.w	r1, r2, r9
 800eb84:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eb88:	f300 8086 	bgt.w	800ec98 <_strtod_l+0x918>
 800eb8c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eb90:	f77f aeaa 	ble.w	800e8e8 <_strtod_l+0x568>
 800eb94:	4640      	mov	r0, r8
 800eb96:	4649      	mov	r1, r9
 800eb98:	4b19      	ldr	r3, [pc, #100]	; (800ec00 <_strtod_l+0x880>)
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f7f1 fcbe 	bl	800051c <__aeabi_dmul>
 800eba0:	460b      	mov	r3, r1
 800eba2:	4303      	orrs	r3, r0
 800eba4:	bf08      	it	eq
 800eba6:	2322      	moveq	r3, #34	; 0x22
 800eba8:	4680      	mov	r8, r0
 800ebaa:	4689      	mov	r9, r1
 800ebac:	bf08      	it	eq
 800ebae:	f8ca 3000 	streq.w	r3, [sl]
 800ebb2:	e62f      	b.n	800e814 <_strtod_l+0x494>
 800ebb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebbc:	ea03 0808 	and.w	r8, r3, r8
 800ebc0:	e6e0      	b.n	800e984 <_strtod_l+0x604>
 800ebc2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ebc6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ebca:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ebce:	35e2      	adds	r5, #226	; 0xe2
 800ebd0:	fa07 f505 	lsl.w	r5, r7, r5
 800ebd4:	970f      	str	r7, [sp, #60]	; 0x3c
 800ebd6:	e747      	b.n	800ea68 <_strtod_l+0x6e8>
 800ebd8:	2301      	movs	r3, #1
 800ebda:	2500      	movs	r5, #0
 800ebdc:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebde:	e743      	b.n	800ea68 <_strtod_l+0x6e8>
 800ebe0:	463a      	mov	r2, r7
 800ebe2:	4650      	mov	r0, sl
 800ebe4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ebe6:	f001 feb1 	bl	801094c <__lshift>
 800ebea:	901a      	str	r0, [sp, #104]	; 0x68
 800ebec:	2800      	cmp	r0, #0
 800ebee:	f47f af69 	bne.w	800eac4 <_strtod_l+0x744>
 800ebf2:	e604      	b.n	800e7fe <_strtod_l+0x47e>
 800ebf4:	08011c58 	.word	0x08011c58
 800ebf8:	fffffc02 	.word	0xfffffc02
 800ebfc:	7ff00000 	.word	0x7ff00000
 800ec00:	39500000 	.word	0x39500000
 800ec04:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ec08:	d165      	bne.n	800ecd6 <_strtod_l+0x956>
 800ec0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec10:	b35a      	cbz	r2, 800ec6a <_strtod_l+0x8ea>
 800ec12:	4a99      	ldr	r2, [pc, #612]	; (800ee78 <_strtod_l+0xaf8>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d12b      	bne.n	800ec70 <_strtod_l+0x8f0>
 800ec18:	9b05      	ldr	r3, [sp, #20]
 800ec1a:	4641      	mov	r1, r8
 800ec1c:	b303      	cbz	r3, 800ec60 <_strtod_l+0x8e0>
 800ec1e:	464a      	mov	r2, r9
 800ec20:	4b96      	ldr	r3, [pc, #600]	; (800ee7c <_strtod_l+0xafc>)
 800ec22:	4013      	ands	r3, r2
 800ec24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ec28:	f04f 32ff 	mov.w	r2, #4294967295
 800ec2c:	d81b      	bhi.n	800ec66 <_strtod_l+0x8e6>
 800ec2e:	0d1b      	lsrs	r3, r3, #20
 800ec30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec34:	fa02 f303 	lsl.w	r3, r2, r3
 800ec38:	4299      	cmp	r1, r3
 800ec3a:	d119      	bne.n	800ec70 <_strtod_l+0x8f0>
 800ec3c:	4b90      	ldr	r3, [pc, #576]	; (800ee80 <_strtod_l+0xb00>)
 800ec3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d102      	bne.n	800ec4a <_strtod_l+0x8ca>
 800ec44:	3101      	adds	r1, #1
 800ec46:	f43f adda 	beq.w	800e7fe <_strtod_l+0x47e>
 800ec4a:	f04f 0800 	mov.w	r8, #0
 800ec4e:	4b8b      	ldr	r3, [pc, #556]	; (800ee7c <_strtod_l+0xafc>)
 800ec50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec52:	401a      	ands	r2, r3
 800ec54:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800ec58:	9b05      	ldr	r3, [sp, #20]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d19a      	bne.n	800eb94 <_strtod_l+0x814>
 800ec5e:	e5d9      	b.n	800e814 <_strtod_l+0x494>
 800ec60:	f04f 33ff 	mov.w	r3, #4294967295
 800ec64:	e7e8      	b.n	800ec38 <_strtod_l+0x8b8>
 800ec66:	4613      	mov	r3, r2
 800ec68:	e7e6      	b.n	800ec38 <_strtod_l+0x8b8>
 800ec6a:	ea53 0308 	orrs.w	r3, r3, r8
 800ec6e:	d081      	beq.n	800eb74 <_strtod_l+0x7f4>
 800ec70:	b1e5      	cbz	r5, 800ecac <_strtod_l+0x92c>
 800ec72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec74:	421d      	tst	r5, r3
 800ec76:	d0ef      	beq.n	800ec58 <_strtod_l+0x8d8>
 800ec78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec7a:	4640      	mov	r0, r8
 800ec7c:	4649      	mov	r1, r9
 800ec7e:	9a05      	ldr	r2, [sp, #20]
 800ec80:	b1c3      	cbz	r3, 800ecb4 <_strtod_l+0x934>
 800ec82:	f7ff fb59 	bl	800e338 <sulp>
 800ec86:	4602      	mov	r2, r0
 800ec88:	460b      	mov	r3, r1
 800ec8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec8e:	f7f1 fa8f 	bl	80001b0 <__adddf3>
 800ec92:	4680      	mov	r8, r0
 800ec94:	4689      	mov	r9, r1
 800ec96:	e7df      	b.n	800ec58 <_strtod_l+0x8d8>
 800ec98:	4013      	ands	r3, r2
 800ec9a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ec9e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800eca2:	f04f 38ff 	mov.w	r8, #4294967295
 800eca6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ecaa:	e7d5      	b.n	800ec58 <_strtod_l+0x8d8>
 800ecac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecae:	ea13 0f08 	tst.w	r3, r8
 800ecb2:	e7e0      	b.n	800ec76 <_strtod_l+0x8f6>
 800ecb4:	f7ff fb40 	bl	800e338 <sulp>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ecc0:	f7f1 fa74 	bl	80001ac <__aeabi_dsub>
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	4680      	mov	r8, r0
 800ecca:	4689      	mov	r9, r1
 800eccc:	f7f1 fe8e 	bl	80009ec <__aeabi_dcmpeq>
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	d0c1      	beq.n	800ec58 <_strtod_l+0x8d8>
 800ecd4:	e608      	b.n	800e8e8 <_strtod_l+0x568>
 800ecd6:	4658      	mov	r0, fp
 800ecd8:	9904      	ldr	r1, [sp, #16]
 800ecda:	f002 f825 	bl	8010d28 <__ratio>
 800ecde:	2200      	movs	r2, #0
 800ece0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ece4:	4606      	mov	r6, r0
 800ece6:	460f      	mov	r7, r1
 800ece8:	f7f1 fe94 	bl	8000a14 <__aeabi_dcmple>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d070      	beq.n	800edd2 <_strtod_l+0xa52>
 800ecf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d042      	beq.n	800ed7c <_strtod_l+0x9fc>
 800ecf6:	2600      	movs	r6, #0
 800ecf8:	4f62      	ldr	r7, [pc, #392]	; (800ee84 <_strtod_l+0xb04>)
 800ecfa:	4d62      	ldr	r5, [pc, #392]	; (800ee84 <_strtod_l+0xb04>)
 800ecfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed02:	0d1b      	lsrs	r3, r3, #20
 800ed04:	051b      	lsls	r3, r3, #20
 800ed06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed0a:	4b5f      	ldr	r3, [pc, #380]	; (800ee88 <_strtod_l+0xb08>)
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	f040 80c3 	bne.w	800ee98 <_strtod_l+0xb18>
 800ed12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed14:	4640      	mov	r0, r8
 800ed16:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800ed1a:	4649      	mov	r1, r9
 800ed1c:	f001 ff2e 	bl	8010b7c <__ulp>
 800ed20:	4602      	mov	r2, r0
 800ed22:	460b      	mov	r3, r1
 800ed24:	4630      	mov	r0, r6
 800ed26:	4639      	mov	r1, r7
 800ed28:	f7f1 fbf8 	bl	800051c <__aeabi_dmul>
 800ed2c:	4642      	mov	r2, r8
 800ed2e:	464b      	mov	r3, r9
 800ed30:	f7f1 fa3e 	bl	80001b0 <__adddf3>
 800ed34:	460b      	mov	r3, r1
 800ed36:	4951      	ldr	r1, [pc, #324]	; (800ee7c <_strtod_l+0xafc>)
 800ed38:	4a54      	ldr	r2, [pc, #336]	; (800ee8c <_strtod_l+0xb0c>)
 800ed3a:	4019      	ands	r1, r3
 800ed3c:	4291      	cmp	r1, r2
 800ed3e:	4680      	mov	r8, r0
 800ed40:	d95d      	bls.n	800edfe <_strtod_l+0xa7e>
 800ed42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed44:	4b4e      	ldr	r3, [pc, #312]	; (800ee80 <_strtod_l+0xb00>)
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d103      	bne.n	800ed52 <_strtod_l+0x9d2>
 800ed4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	f43f ad56 	beq.w	800e7fe <_strtod_l+0x47e>
 800ed52:	f04f 38ff 	mov.w	r8, #4294967295
 800ed56:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800ee80 <_strtod_l+0xb00>
 800ed5a:	4650      	mov	r0, sl
 800ed5c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ed5e:	f001 fbdd 	bl	801051c <_Bfree>
 800ed62:	4650      	mov	r0, sl
 800ed64:	9906      	ldr	r1, [sp, #24]
 800ed66:	f001 fbd9 	bl	801051c <_Bfree>
 800ed6a:	4650      	mov	r0, sl
 800ed6c:	9904      	ldr	r1, [sp, #16]
 800ed6e:	f001 fbd5 	bl	801051c <_Bfree>
 800ed72:	4659      	mov	r1, fp
 800ed74:	4650      	mov	r0, sl
 800ed76:	f001 fbd1 	bl	801051c <_Bfree>
 800ed7a:	e627      	b.n	800e9cc <_strtod_l+0x64c>
 800ed7c:	f1b8 0f00 	cmp.w	r8, #0
 800ed80:	d119      	bne.n	800edb6 <_strtod_l+0xa36>
 800ed82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed88:	b9e3      	cbnz	r3, 800edc4 <_strtod_l+0xa44>
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	4639      	mov	r1, r7
 800ed90:	4b3c      	ldr	r3, [pc, #240]	; (800ee84 <_strtod_l+0xb04>)
 800ed92:	f7f1 fe35 	bl	8000a00 <__aeabi_dcmplt>
 800ed96:	b9c8      	cbnz	r0, 800edcc <_strtod_l+0xa4c>
 800ed98:	2200      	movs	r2, #0
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	4639      	mov	r1, r7
 800ed9e:	4b3c      	ldr	r3, [pc, #240]	; (800ee90 <_strtod_l+0xb10>)
 800eda0:	f7f1 fbbc 	bl	800051c <__aeabi_dmul>
 800eda4:	4604      	mov	r4, r0
 800eda6:	460d      	mov	r5, r1
 800eda8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800edac:	9416      	str	r4, [sp, #88]	; 0x58
 800edae:	9317      	str	r3, [sp, #92]	; 0x5c
 800edb0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800edb4:	e7a2      	b.n	800ecfc <_strtod_l+0x97c>
 800edb6:	f1b8 0f01 	cmp.w	r8, #1
 800edba:	d103      	bne.n	800edc4 <_strtod_l+0xa44>
 800edbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f43f ad92 	beq.w	800e8e8 <_strtod_l+0x568>
 800edc4:	2600      	movs	r6, #0
 800edc6:	2400      	movs	r4, #0
 800edc8:	4f32      	ldr	r7, [pc, #200]	; (800ee94 <_strtod_l+0xb14>)
 800edca:	e796      	b.n	800ecfa <_strtod_l+0x97a>
 800edcc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800edce:	4d30      	ldr	r5, [pc, #192]	; (800ee90 <_strtod_l+0xb10>)
 800edd0:	e7ea      	b.n	800eda8 <_strtod_l+0xa28>
 800edd2:	4b2f      	ldr	r3, [pc, #188]	; (800ee90 <_strtod_l+0xb10>)
 800edd4:	2200      	movs	r2, #0
 800edd6:	4630      	mov	r0, r6
 800edd8:	4639      	mov	r1, r7
 800edda:	f7f1 fb9f 	bl	800051c <__aeabi_dmul>
 800edde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ede0:	4604      	mov	r4, r0
 800ede2:	460d      	mov	r5, r1
 800ede4:	b933      	cbnz	r3, 800edf4 <_strtod_l+0xa74>
 800ede6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edea:	9010      	str	r0, [sp, #64]	; 0x40
 800edec:	9311      	str	r3, [sp, #68]	; 0x44
 800edee:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800edf2:	e783      	b.n	800ecfc <_strtod_l+0x97c>
 800edf4:	4602      	mov	r2, r0
 800edf6:	460b      	mov	r3, r1
 800edf8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800edfc:	e7f7      	b.n	800edee <_strtod_l+0xa6e>
 800edfe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ee02:	9b05      	ldr	r3, [sp, #20]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d1a8      	bne.n	800ed5a <_strtod_l+0x9da>
 800ee08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ee0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee0e:	0d1b      	lsrs	r3, r3, #20
 800ee10:	051b      	lsls	r3, r3, #20
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d1a1      	bne.n	800ed5a <_strtod_l+0x9da>
 800ee16:	4620      	mov	r0, r4
 800ee18:	4629      	mov	r1, r5
 800ee1a:	f7f2 f9d3 	bl	80011c4 <__aeabi_d2lz>
 800ee1e:	f7f1 fb4f 	bl	80004c0 <__aeabi_l2d>
 800ee22:	4602      	mov	r2, r0
 800ee24:	460b      	mov	r3, r1
 800ee26:	4620      	mov	r0, r4
 800ee28:	4629      	mov	r1, r5
 800ee2a:	f7f1 f9bf 	bl	80001ac <__aeabi_dsub>
 800ee2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee34:	ea43 0308 	orr.w	r3, r3, r8
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	460d      	mov	r5, r1
 800ee3e:	d066      	beq.n	800ef0e <_strtod_l+0xb8e>
 800ee40:	a309      	add	r3, pc, #36	; (adr r3, 800ee68 <_strtod_l+0xae8>)
 800ee42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee46:	f7f1 fddb 	bl	8000a00 <__aeabi_dcmplt>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	f47f ace2 	bne.w	800e814 <_strtod_l+0x494>
 800ee50:	a307      	add	r3, pc, #28	; (adr r3, 800ee70 <_strtod_l+0xaf0>)
 800ee52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee56:	4620      	mov	r0, r4
 800ee58:	4629      	mov	r1, r5
 800ee5a:	f7f1 fdef 	bl	8000a3c <__aeabi_dcmpgt>
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	f43f af7b 	beq.w	800ed5a <_strtod_l+0x9da>
 800ee64:	e4d6      	b.n	800e814 <_strtod_l+0x494>
 800ee66:	bf00      	nop
 800ee68:	94a03595 	.word	0x94a03595
 800ee6c:	3fdfffff 	.word	0x3fdfffff
 800ee70:	35afe535 	.word	0x35afe535
 800ee74:	3fe00000 	.word	0x3fe00000
 800ee78:	000fffff 	.word	0x000fffff
 800ee7c:	7ff00000 	.word	0x7ff00000
 800ee80:	7fefffff 	.word	0x7fefffff
 800ee84:	3ff00000 	.word	0x3ff00000
 800ee88:	7fe00000 	.word	0x7fe00000
 800ee8c:	7c9fffff 	.word	0x7c9fffff
 800ee90:	3fe00000 	.word	0x3fe00000
 800ee94:	bff00000 	.word	0xbff00000
 800ee98:	9b05      	ldr	r3, [sp, #20]
 800ee9a:	b313      	cbz	r3, 800eee2 <_strtod_l+0xb62>
 800ee9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eea2:	d81e      	bhi.n	800eee2 <_strtod_l+0xb62>
 800eea4:	a326      	add	r3, pc, #152	; (adr r3, 800ef40 <_strtod_l+0xbc0>)
 800eea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeaa:	4620      	mov	r0, r4
 800eeac:	4629      	mov	r1, r5
 800eeae:	f7f1 fdb1 	bl	8000a14 <__aeabi_dcmple>
 800eeb2:	b190      	cbz	r0, 800eeda <_strtod_l+0xb5a>
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	f7f1 fe08 	bl	8000acc <__aeabi_d2uiz>
 800eebc:	2801      	cmp	r0, #1
 800eebe:	bf38      	it	cc
 800eec0:	2001      	movcc	r0, #1
 800eec2:	f7f1 fab1 	bl	8000428 <__aeabi_ui2d>
 800eec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eec8:	4604      	mov	r4, r0
 800eeca:	460d      	mov	r5, r1
 800eecc:	b9d3      	cbnz	r3, 800ef04 <_strtod_l+0xb84>
 800eece:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eed2:	9012      	str	r0, [sp, #72]	; 0x48
 800eed4:	9313      	str	r3, [sp, #76]	; 0x4c
 800eed6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800eeda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eedc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800eee0:	1a9f      	subs	r7, r3, r2
 800eee2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eee6:	f001 fe49 	bl	8010b7c <__ulp>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	4630      	mov	r0, r6
 800eef0:	4639      	mov	r1, r7
 800eef2:	f7f1 fb13 	bl	800051c <__aeabi_dmul>
 800eef6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eefa:	f7f1 f959 	bl	80001b0 <__adddf3>
 800eefe:	4680      	mov	r8, r0
 800ef00:	4689      	mov	r9, r1
 800ef02:	e77e      	b.n	800ee02 <_strtod_l+0xa82>
 800ef04:	4602      	mov	r2, r0
 800ef06:	460b      	mov	r3, r1
 800ef08:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800ef0c:	e7e3      	b.n	800eed6 <_strtod_l+0xb56>
 800ef0e:	a30e      	add	r3, pc, #56	; (adr r3, 800ef48 <_strtod_l+0xbc8>)
 800ef10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef14:	f7f1 fd74 	bl	8000a00 <__aeabi_dcmplt>
 800ef18:	e7a1      	b.n	800ee5e <_strtod_l+0xade>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	930a      	str	r3, [sp, #40]	; 0x28
 800ef1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ef22:	6013      	str	r3, [r2, #0]
 800ef24:	f7ff ba71 	b.w	800e40a <_strtod_l+0x8a>
 800ef28:	2a65      	cmp	r2, #101	; 0x65
 800ef2a:	f43f ab63 	beq.w	800e5f4 <_strtod_l+0x274>
 800ef2e:	2a45      	cmp	r2, #69	; 0x45
 800ef30:	f43f ab60 	beq.w	800e5f4 <_strtod_l+0x274>
 800ef34:	2301      	movs	r3, #1
 800ef36:	f7ff bb95 	b.w	800e664 <_strtod_l+0x2e4>
 800ef3a:	bf00      	nop
 800ef3c:	f3af 8000 	nop.w
 800ef40:	ffc00000 	.word	0xffc00000
 800ef44:	41dfffff 	.word	0x41dfffff
 800ef48:	94a03595 	.word	0x94a03595
 800ef4c:	3fcfffff 	.word	0x3fcfffff

0800ef50 <strtod>:
 800ef50:	460a      	mov	r2, r1
 800ef52:	4601      	mov	r1, r0
 800ef54:	4802      	ldr	r0, [pc, #8]	; (800ef60 <strtod+0x10>)
 800ef56:	4b03      	ldr	r3, [pc, #12]	; (800ef64 <strtod+0x14>)
 800ef58:	6800      	ldr	r0, [r0, #0]
 800ef5a:	f7ff ba11 	b.w	800e380 <_strtod_l>
 800ef5e:	bf00      	nop
 800ef60:	20000514 	.word	0x20000514
 800ef64:	2000057c 	.word	0x2000057c

0800ef68 <strtok>:
 800ef68:	4b16      	ldr	r3, [pc, #88]	; (800efc4 <strtok+0x5c>)
 800ef6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef6e:	681f      	ldr	r7, [r3, #0]
 800ef70:	4605      	mov	r5, r0
 800ef72:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800ef74:	460e      	mov	r6, r1
 800ef76:	b9ec      	cbnz	r4, 800efb4 <strtok+0x4c>
 800ef78:	2050      	movs	r0, #80	; 0x50
 800ef7a:	f001 fa67 	bl	801044c <malloc>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	65b8      	str	r0, [r7, #88]	; 0x58
 800ef82:	b920      	cbnz	r0, 800ef8e <strtok+0x26>
 800ef84:	2157      	movs	r1, #87	; 0x57
 800ef86:	4b10      	ldr	r3, [pc, #64]	; (800efc8 <strtok+0x60>)
 800ef88:	4810      	ldr	r0, [pc, #64]	; (800efcc <strtok+0x64>)
 800ef8a:	f000 f849 	bl	800f020 <__assert_func>
 800ef8e:	e9c0 4400 	strd	r4, r4, [r0]
 800ef92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ef96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ef9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ef9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800efa2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800efa6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800efaa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800efae:	6184      	str	r4, [r0, #24]
 800efb0:	7704      	strb	r4, [r0, #28]
 800efb2:	6244      	str	r4, [r0, #36]	; 0x24
 800efb4:	4631      	mov	r1, r6
 800efb6:	4628      	mov	r0, r5
 800efb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800efba:	2301      	movs	r3, #1
 800efbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efc0:	f000 b806 	b.w	800efd0 <__strtok_r>
 800efc4:	20000514 	.word	0x20000514
 800efc8:	08011c80 	.word	0x08011c80
 800efcc:	08011c97 	.word	0x08011c97

0800efd0 <__strtok_r>:
 800efd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efd2:	b908      	cbnz	r0, 800efd8 <__strtok_r+0x8>
 800efd4:	6810      	ldr	r0, [r2, #0]
 800efd6:	b188      	cbz	r0, 800effc <__strtok_r+0x2c>
 800efd8:	4604      	mov	r4, r0
 800efda:	460f      	mov	r7, r1
 800efdc:	4620      	mov	r0, r4
 800efde:	f814 5b01 	ldrb.w	r5, [r4], #1
 800efe2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800efe6:	b91e      	cbnz	r6, 800eff0 <__strtok_r+0x20>
 800efe8:	b965      	cbnz	r5, 800f004 <__strtok_r+0x34>
 800efea:	4628      	mov	r0, r5
 800efec:	6015      	str	r5, [r2, #0]
 800efee:	e005      	b.n	800effc <__strtok_r+0x2c>
 800eff0:	42b5      	cmp	r5, r6
 800eff2:	d1f6      	bne.n	800efe2 <__strtok_r+0x12>
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1f0      	bne.n	800efda <__strtok_r+0xa>
 800eff8:	6014      	str	r4, [r2, #0]
 800effa:	7003      	strb	r3, [r0, #0]
 800effc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800effe:	461c      	mov	r4, r3
 800f000:	e00c      	b.n	800f01c <__strtok_r+0x4c>
 800f002:	b915      	cbnz	r5, 800f00a <__strtok_r+0x3a>
 800f004:	460e      	mov	r6, r1
 800f006:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f00a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f00e:	42ab      	cmp	r3, r5
 800f010:	d1f7      	bne.n	800f002 <__strtok_r+0x32>
 800f012:	2b00      	cmp	r3, #0
 800f014:	d0f3      	beq.n	800effe <__strtok_r+0x2e>
 800f016:	2300      	movs	r3, #0
 800f018:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f01c:	6014      	str	r4, [r2, #0]
 800f01e:	e7ed      	b.n	800effc <__strtok_r+0x2c>

0800f020 <__assert_func>:
 800f020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f022:	4614      	mov	r4, r2
 800f024:	461a      	mov	r2, r3
 800f026:	4b09      	ldr	r3, [pc, #36]	; (800f04c <__assert_func+0x2c>)
 800f028:	4605      	mov	r5, r0
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	68d8      	ldr	r0, [r3, #12]
 800f02e:	b14c      	cbz	r4, 800f044 <__assert_func+0x24>
 800f030:	4b07      	ldr	r3, [pc, #28]	; (800f050 <__assert_func+0x30>)
 800f032:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f036:	9100      	str	r1, [sp, #0]
 800f038:	462b      	mov	r3, r5
 800f03a:	4906      	ldr	r1, [pc, #24]	; (800f054 <__assert_func+0x34>)
 800f03c:	f000 fe8a 	bl	800fd54 <fiprintf>
 800f040:	f002 fa24 	bl	801148c <abort>
 800f044:	4b04      	ldr	r3, [pc, #16]	; (800f058 <__assert_func+0x38>)
 800f046:	461c      	mov	r4, r3
 800f048:	e7f3      	b.n	800f032 <__assert_func+0x12>
 800f04a:	bf00      	nop
 800f04c:	20000514 	.word	0x20000514
 800f050:	08011cf4 	.word	0x08011cf4
 800f054:	08011d01 	.word	0x08011d01
 800f058:	08011d2f 	.word	0x08011d2f

0800f05c <quorem>:
 800f05c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f060:	6903      	ldr	r3, [r0, #16]
 800f062:	690c      	ldr	r4, [r1, #16]
 800f064:	4607      	mov	r7, r0
 800f066:	42a3      	cmp	r3, r4
 800f068:	f2c0 8082 	blt.w	800f170 <quorem+0x114>
 800f06c:	3c01      	subs	r4, #1
 800f06e:	f100 0514 	add.w	r5, r0, #20
 800f072:	f101 0814 	add.w	r8, r1, #20
 800f076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f07a:	9301      	str	r3, [sp, #4]
 800f07c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f084:	3301      	adds	r3, #1
 800f086:	429a      	cmp	r2, r3
 800f088:	fbb2 f6f3 	udiv	r6, r2, r3
 800f08c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f090:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f094:	d331      	bcc.n	800f0fa <quorem+0x9e>
 800f096:	f04f 0e00 	mov.w	lr, #0
 800f09a:	4640      	mov	r0, r8
 800f09c:	46ac      	mov	ip, r5
 800f09e:	46f2      	mov	sl, lr
 800f0a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800f0a4:	b293      	uxth	r3, r2
 800f0a6:	fb06 e303 	mla	r3, r6, r3, lr
 800f0aa:	0c12      	lsrs	r2, r2, #16
 800f0ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	fb06 e202 	mla	r2, r6, r2, lr
 800f0b6:	ebaa 0303 	sub.w	r3, sl, r3
 800f0ba:	f8dc a000 	ldr.w	sl, [ip]
 800f0be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f0c2:	fa1f fa8a 	uxth.w	sl, sl
 800f0c6:	4453      	add	r3, sl
 800f0c8:	f8dc a000 	ldr.w	sl, [ip]
 800f0cc:	b292      	uxth	r2, r2
 800f0ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f0d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0dc:	4581      	cmp	r9, r0
 800f0de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f0e2:	f84c 3b04 	str.w	r3, [ip], #4
 800f0e6:	d2db      	bcs.n	800f0a0 <quorem+0x44>
 800f0e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800f0ec:	b92b      	cbnz	r3, 800f0fa <quorem+0x9e>
 800f0ee:	9b01      	ldr	r3, [sp, #4]
 800f0f0:	3b04      	subs	r3, #4
 800f0f2:	429d      	cmp	r5, r3
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	d32f      	bcc.n	800f158 <quorem+0xfc>
 800f0f8:	613c      	str	r4, [r7, #16]
 800f0fa:	4638      	mov	r0, r7
 800f0fc:	f001 fc96 	bl	8010a2c <__mcmp>
 800f100:	2800      	cmp	r0, #0
 800f102:	db25      	blt.n	800f150 <quorem+0xf4>
 800f104:	4628      	mov	r0, r5
 800f106:	f04f 0c00 	mov.w	ip, #0
 800f10a:	3601      	adds	r6, #1
 800f10c:	f858 1b04 	ldr.w	r1, [r8], #4
 800f110:	f8d0 e000 	ldr.w	lr, [r0]
 800f114:	b28b      	uxth	r3, r1
 800f116:	ebac 0303 	sub.w	r3, ip, r3
 800f11a:	fa1f f28e 	uxth.w	r2, lr
 800f11e:	4413      	add	r3, r2
 800f120:	0c0a      	lsrs	r2, r1, #16
 800f122:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f126:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f130:	45c1      	cmp	r9, r8
 800f132:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f136:	f840 3b04 	str.w	r3, [r0], #4
 800f13a:	d2e7      	bcs.n	800f10c <quorem+0xb0>
 800f13c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f140:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f144:	b922      	cbnz	r2, 800f150 <quorem+0xf4>
 800f146:	3b04      	subs	r3, #4
 800f148:	429d      	cmp	r5, r3
 800f14a:	461a      	mov	r2, r3
 800f14c:	d30a      	bcc.n	800f164 <quorem+0x108>
 800f14e:	613c      	str	r4, [r7, #16]
 800f150:	4630      	mov	r0, r6
 800f152:	b003      	add	sp, #12
 800f154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f158:	6812      	ldr	r2, [r2, #0]
 800f15a:	3b04      	subs	r3, #4
 800f15c:	2a00      	cmp	r2, #0
 800f15e:	d1cb      	bne.n	800f0f8 <quorem+0x9c>
 800f160:	3c01      	subs	r4, #1
 800f162:	e7c6      	b.n	800f0f2 <quorem+0x96>
 800f164:	6812      	ldr	r2, [r2, #0]
 800f166:	3b04      	subs	r3, #4
 800f168:	2a00      	cmp	r2, #0
 800f16a:	d1f0      	bne.n	800f14e <quorem+0xf2>
 800f16c:	3c01      	subs	r4, #1
 800f16e:	e7eb      	b.n	800f148 <quorem+0xec>
 800f170:	2000      	movs	r0, #0
 800f172:	e7ee      	b.n	800f152 <quorem+0xf6>
 800f174:	0000      	movs	r0, r0
	...

0800f178 <_dtoa_r>:
 800f178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f17c:	4616      	mov	r6, r2
 800f17e:	461f      	mov	r7, r3
 800f180:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f182:	b099      	sub	sp, #100	; 0x64
 800f184:	4605      	mov	r5, r0
 800f186:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f18a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800f18e:	b974      	cbnz	r4, 800f1ae <_dtoa_r+0x36>
 800f190:	2010      	movs	r0, #16
 800f192:	f001 f95b 	bl	801044c <malloc>
 800f196:	4602      	mov	r2, r0
 800f198:	6268      	str	r0, [r5, #36]	; 0x24
 800f19a:	b920      	cbnz	r0, 800f1a6 <_dtoa_r+0x2e>
 800f19c:	21ea      	movs	r1, #234	; 0xea
 800f19e:	4ba8      	ldr	r3, [pc, #672]	; (800f440 <_dtoa_r+0x2c8>)
 800f1a0:	48a8      	ldr	r0, [pc, #672]	; (800f444 <_dtoa_r+0x2cc>)
 800f1a2:	f7ff ff3d 	bl	800f020 <__assert_func>
 800f1a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f1aa:	6004      	str	r4, [r0, #0]
 800f1ac:	60c4      	str	r4, [r0, #12]
 800f1ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f1b0:	6819      	ldr	r1, [r3, #0]
 800f1b2:	b151      	cbz	r1, 800f1ca <_dtoa_r+0x52>
 800f1b4:	685a      	ldr	r2, [r3, #4]
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	4093      	lsls	r3, r2
 800f1ba:	604a      	str	r2, [r1, #4]
 800f1bc:	608b      	str	r3, [r1, #8]
 800f1be:	4628      	mov	r0, r5
 800f1c0:	f001 f9ac 	bl	801051c <_Bfree>
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f1c8:	601a      	str	r2, [r3, #0]
 800f1ca:	1e3b      	subs	r3, r7, #0
 800f1cc:	bfaf      	iteee	ge
 800f1ce:	2300      	movge	r3, #0
 800f1d0:	2201      	movlt	r2, #1
 800f1d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f1d6:	9305      	strlt	r3, [sp, #20]
 800f1d8:	bfa8      	it	ge
 800f1da:	f8c8 3000 	strge.w	r3, [r8]
 800f1de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f1e2:	4b99      	ldr	r3, [pc, #612]	; (800f448 <_dtoa_r+0x2d0>)
 800f1e4:	bfb8      	it	lt
 800f1e6:	f8c8 2000 	strlt.w	r2, [r8]
 800f1ea:	ea33 0309 	bics.w	r3, r3, r9
 800f1ee:	d119      	bne.n	800f224 <_dtoa_r+0xac>
 800f1f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800f1f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f1f6:	6013      	str	r3, [r2, #0]
 800f1f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f1fc:	4333      	orrs	r3, r6
 800f1fe:	f000 857f 	beq.w	800fd00 <_dtoa_r+0xb88>
 800f202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f204:	b953      	cbnz	r3, 800f21c <_dtoa_r+0xa4>
 800f206:	4b91      	ldr	r3, [pc, #580]	; (800f44c <_dtoa_r+0x2d4>)
 800f208:	e022      	b.n	800f250 <_dtoa_r+0xd8>
 800f20a:	4b91      	ldr	r3, [pc, #580]	; (800f450 <_dtoa_r+0x2d8>)
 800f20c:	9303      	str	r3, [sp, #12]
 800f20e:	3308      	adds	r3, #8
 800f210:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f212:	6013      	str	r3, [r2, #0]
 800f214:	9803      	ldr	r0, [sp, #12]
 800f216:	b019      	add	sp, #100	; 0x64
 800f218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f21c:	4b8b      	ldr	r3, [pc, #556]	; (800f44c <_dtoa_r+0x2d4>)
 800f21e:	9303      	str	r3, [sp, #12]
 800f220:	3303      	adds	r3, #3
 800f222:	e7f5      	b.n	800f210 <_dtoa_r+0x98>
 800f224:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f228:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800f22c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f230:	2200      	movs	r2, #0
 800f232:	2300      	movs	r3, #0
 800f234:	f7f1 fbda 	bl	80009ec <__aeabi_dcmpeq>
 800f238:	4680      	mov	r8, r0
 800f23a:	b158      	cbz	r0, 800f254 <_dtoa_r+0xdc>
 800f23c:	2301      	movs	r3, #1
 800f23e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f240:	6013      	str	r3, [r2, #0]
 800f242:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f244:	2b00      	cmp	r3, #0
 800f246:	f000 8558 	beq.w	800fcfa <_dtoa_r+0xb82>
 800f24a:	4882      	ldr	r0, [pc, #520]	; (800f454 <_dtoa_r+0x2dc>)
 800f24c:	6018      	str	r0, [r3, #0]
 800f24e:	1e43      	subs	r3, r0, #1
 800f250:	9303      	str	r3, [sp, #12]
 800f252:	e7df      	b.n	800f214 <_dtoa_r+0x9c>
 800f254:	ab16      	add	r3, sp, #88	; 0x58
 800f256:	9301      	str	r3, [sp, #4]
 800f258:	ab17      	add	r3, sp, #92	; 0x5c
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	4628      	mov	r0, r5
 800f25e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f262:	f001 fd05 	bl	8010c70 <__d2b>
 800f266:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f26a:	4683      	mov	fp, r0
 800f26c:	2c00      	cmp	r4, #0
 800f26e:	d07f      	beq.n	800f370 <_dtoa_r+0x1f8>
 800f270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f276:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f27a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f27e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800f282:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f286:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800f28a:	2200      	movs	r2, #0
 800f28c:	4b72      	ldr	r3, [pc, #456]	; (800f458 <_dtoa_r+0x2e0>)
 800f28e:	f7f0 ff8d 	bl	80001ac <__aeabi_dsub>
 800f292:	a365      	add	r3, pc, #404	; (adr r3, 800f428 <_dtoa_r+0x2b0>)
 800f294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f298:	f7f1 f940 	bl	800051c <__aeabi_dmul>
 800f29c:	a364      	add	r3, pc, #400	; (adr r3, 800f430 <_dtoa_r+0x2b8>)
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	f7f0 ff85 	bl	80001b0 <__adddf3>
 800f2a6:	4606      	mov	r6, r0
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	460f      	mov	r7, r1
 800f2ac:	f7f1 f8cc 	bl	8000448 <__aeabi_i2d>
 800f2b0:	a361      	add	r3, pc, #388	; (adr r3, 800f438 <_dtoa_r+0x2c0>)
 800f2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b6:	f7f1 f931 	bl	800051c <__aeabi_dmul>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	460b      	mov	r3, r1
 800f2be:	4630      	mov	r0, r6
 800f2c0:	4639      	mov	r1, r7
 800f2c2:	f7f0 ff75 	bl	80001b0 <__adddf3>
 800f2c6:	4606      	mov	r6, r0
 800f2c8:	460f      	mov	r7, r1
 800f2ca:	f7f1 fbd7 	bl	8000a7c <__aeabi_d2iz>
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	4682      	mov	sl, r0
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	4630      	mov	r0, r6
 800f2d6:	4639      	mov	r1, r7
 800f2d8:	f7f1 fb92 	bl	8000a00 <__aeabi_dcmplt>
 800f2dc:	b148      	cbz	r0, 800f2f2 <_dtoa_r+0x17a>
 800f2de:	4650      	mov	r0, sl
 800f2e0:	f7f1 f8b2 	bl	8000448 <__aeabi_i2d>
 800f2e4:	4632      	mov	r2, r6
 800f2e6:	463b      	mov	r3, r7
 800f2e8:	f7f1 fb80 	bl	80009ec <__aeabi_dcmpeq>
 800f2ec:	b908      	cbnz	r0, 800f2f2 <_dtoa_r+0x17a>
 800f2ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2f2:	f1ba 0f16 	cmp.w	sl, #22
 800f2f6:	d858      	bhi.n	800f3aa <_dtoa_r+0x232>
 800f2f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f2fc:	4b57      	ldr	r3, [pc, #348]	; (800f45c <_dtoa_r+0x2e4>)
 800f2fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f306:	f7f1 fb7b 	bl	8000a00 <__aeabi_dcmplt>
 800f30a:	2800      	cmp	r0, #0
 800f30c:	d04f      	beq.n	800f3ae <_dtoa_r+0x236>
 800f30e:	2300      	movs	r3, #0
 800f310:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f314:	930f      	str	r3, [sp, #60]	; 0x3c
 800f316:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f318:	1b1c      	subs	r4, r3, r4
 800f31a:	1e63      	subs	r3, r4, #1
 800f31c:	9309      	str	r3, [sp, #36]	; 0x24
 800f31e:	bf49      	itett	mi
 800f320:	f1c4 0301 	rsbmi	r3, r4, #1
 800f324:	2300      	movpl	r3, #0
 800f326:	9306      	strmi	r3, [sp, #24]
 800f328:	2300      	movmi	r3, #0
 800f32a:	bf54      	ite	pl
 800f32c:	9306      	strpl	r3, [sp, #24]
 800f32e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800f330:	f1ba 0f00 	cmp.w	sl, #0
 800f334:	db3d      	blt.n	800f3b2 <_dtoa_r+0x23a>
 800f336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f338:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f33c:	4453      	add	r3, sl
 800f33e:	9309      	str	r3, [sp, #36]	; 0x24
 800f340:	2300      	movs	r3, #0
 800f342:	930a      	str	r3, [sp, #40]	; 0x28
 800f344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f346:	2b09      	cmp	r3, #9
 800f348:	f200 808c 	bhi.w	800f464 <_dtoa_r+0x2ec>
 800f34c:	2b05      	cmp	r3, #5
 800f34e:	bfc4      	itt	gt
 800f350:	3b04      	subgt	r3, #4
 800f352:	9322      	strgt	r3, [sp, #136]	; 0x88
 800f354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f356:	bfc8      	it	gt
 800f358:	2400      	movgt	r4, #0
 800f35a:	f1a3 0302 	sub.w	r3, r3, #2
 800f35e:	bfd8      	it	le
 800f360:	2401      	movle	r4, #1
 800f362:	2b03      	cmp	r3, #3
 800f364:	f200 808a 	bhi.w	800f47c <_dtoa_r+0x304>
 800f368:	e8df f003 	tbb	[pc, r3]
 800f36c:	5b4d4f2d 	.word	0x5b4d4f2d
 800f370:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800f374:	441c      	add	r4, r3
 800f376:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800f37a:	2b20      	cmp	r3, #32
 800f37c:	bfc3      	ittte	gt
 800f37e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f382:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800f386:	fa09 f303 	lslgt.w	r3, r9, r3
 800f38a:	f1c3 0320 	rsble	r3, r3, #32
 800f38e:	bfc6      	itte	gt
 800f390:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f394:	4318      	orrgt	r0, r3
 800f396:	fa06 f003 	lslle.w	r0, r6, r3
 800f39a:	f7f1 f845 	bl	8000428 <__aeabi_ui2d>
 800f39e:	2301      	movs	r3, #1
 800f3a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f3a4:	3c01      	subs	r4, #1
 800f3a6:	9313      	str	r3, [sp, #76]	; 0x4c
 800f3a8:	e76f      	b.n	800f28a <_dtoa_r+0x112>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e7b2      	b.n	800f314 <_dtoa_r+0x19c>
 800f3ae:	900f      	str	r0, [sp, #60]	; 0x3c
 800f3b0:	e7b1      	b.n	800f316 <_dtoa_r+0x19e>
 800f3b2:	9b06      	ldr	r3, [sp, #24]
 800f3b4:	eba3 030a 	sub.w	r3, r3, sl
 800f3b8:	9306      	str	r3, [sp, #24]
 800f3ba:	f1ca 0300 	rsb	r3, sl, #0
 800f3be:	930a      	str	r3, [sp, #40]	; 0x28
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	930e      	str	r3, [sp, #56]	; 0x38
 800f3c4:	e7be      	b.n	800f344 <_dtoa_r+0x1cc>
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	dc58      	bgt.n	800f482 <_dtoa_r+0x30a>
 800f3d0:	f04f 0901 	mov.w	r9, #1
 800f3d4:	464b      	mov	r3, r9
 800f3d6:	f8cd 9020 	str.w	r9, [sp, #32]
 800f3da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800f3de:	2200      	movs	r2, #0
 800f3e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f3e2:	6042      	str	r2, [r0, #4]
 800f3e4:	2204      	movs	r2, #4
 800f3e6:	f102 0614 	add.w	r6, r2, #20
 800f3ea:	429e      	cmp	r6, r3
 800f3ec:	6841      	ldr	r1, [r0, #4]
 800f3ee:	d94e      	bls.n	800f48e <_dtoa_r+0x316>
 800f3f0:	4628      	mov	r0, r5
 800f3f2:	f001 f853 	bl	801049c <_Balloc>
 800f3f6:	9003      	str	r0, [sp, #12]
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	d14c      	bne.n	800f496 <_dtoa_r+0x31e>
 800f3fc:	4602      	mov	r2, r0
 800f3fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f402:	4b17      	ldr	r3, [pc, #92]	; (800f460 <_dtoa_r+0x2e8>)
 800f404:	e6cc      	b.n	800f1a0 <_dtoa_r+0x28>
 800f406:	2301      	movs	r3, #1
 800f408:	e7de      	b.n	800f3c8 <_dtoa_r+0x250>
 800f40a:	2300      	movs	r3, #0
 800f40c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f40e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f410:	eb0a 0903 	add.w	r9, sl, r3
 800f414:	f109 0301 	add.w	r3, r9, #1
 800f418:	2b01      	cmp	r3, #1
 800f41a:	9308      	str	r3, [sp, #32]
 800f41c:	bfb8      	it	lt
 800f41e:	2301      	movlt	r3, #1
 800f420:	e7dd      	b.n	800f3de <_dtoa_r+0x266>
 800f422:	2301      	movs	r3, #1
 800f424:	e7f2      	b.n	800f40c <_dtoa_r+0x294>
 800f426:	bf00      	nop
 800f428:	636f4361 	.word	0x636f4361
 800f42c:	3fd287a7 	.word	0x3fd287a7
 800f430:	8b60c8b3 	.word	0x8b60c8b3
 800f434:	3fc68a28 	.word	0x3fc68a28
 800f438:	509f79fb 	.word	0x509f79fb
 800f43c:	3fd34413 	.word	0x3fd34413
 800f440:	08011c80 	.word	0x08011c80
 800f444:	08011d3d 	.word	0x08011d3d
 800f448:	7ff00000 	.word	0x7ff00000
 800f44c:	08011d39 	.word	0x08011d39
 800f450:	08011d30 	.word	0x08011d30
 800f454:	08011c09 	.word	0x08011c09
 800f458:	3ff80000 	.word	0x3ff80000
 800f45c:	08011ea8 	.word	0x08011ea8
 800f460:	08011d98 	.word	0x08011d98
 800f464:	2401      	movs	r4, #1
 800f466:	2300      	movs	r3, #0
 800f468:	940b      	str	r4, [sp, #44]	; 0x2c
 800f46a:	9322      	str	r3, [sp, #136]	; 0x88
 800f46c:	f04f 39ff 	mov.w	r9, #4294967295
 800f470:	2200      	movs	r2, #0
 800f472:	2312      	movs	r3, #18
 800f474:	f8cd 9020 	str.w	r9, [sp, #32]
 800f478:	9223      	str	r2, [sp, #140]	; 0x8c
 800f47a:	e7b0      	b.n	800f3de <_dtoa_r+0x266>
 800f47c:	2301      	movs	r3, #1
 800f47e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f480:	e7f4      	b.n	800f46c <_dtoa_r+0x2f4>
 800f482:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800f486:	464b      	mov	r3, r9
 800f488:	f8cd 9020 	str.w	r9, [sp, #32]
 800f48c:	e7a7      	b.n	800f3de <_dtoa_r+0x266>
 800f48e:	3101      	adds	r1, #1
 800f490:	6041      	str	r1, [r0, #4]
 800f492:	0052      	lsls	r2, r2, #1
 800f494:	e7a7      	b.n	800f3e6 <_dtoa_r+0x26e>
 800f496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f498:	9a03      	ldr	r2, [sp, #12]
 800f49a:	601a      	str	r2, [r3, #0]
 800f49c:	9b08      	ldr	r3, [sp, #32]
 800f49e:	2b0e      	cmp	r3, #14
 800f4a0:	f200 80a8 	bhi.w	800f5f4 <_dtoa_r+0x47c>
 800f4a4:	2c00      	cmp	r4, #0
 800f4a6:	f000 80a5 	beq.w	800f5f4 <_dtoa_r+0x47c>
 800f4aa:	f1ba 0f00 	cmp.w	sl, #0
 800f4ae:	dd34      	ble.n	800f51a <_dtoa_r+0x3a2>
 800f4b0:	4a9a      	ldr	r2, [pc, #616]	; (800f71c <_dtoa_r+0x5a4>)
 800f4b2:	f00a 030f 	and.w	r3, sl, #15
 800f4b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f4ba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f4be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f4c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f4c6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800f4ca:	d016      	beq.n	800f4fa <_dtoa_r+0x382>
 800f4cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f4d0:	4b93      	ldr	r3, [pc, #588]	; (800f720 <_dtoa_r+0x5a8>)
 800f4d2:	2703      	movs	r7, #3
 800f4d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f4d8:	f7f1 f94a 	bl	8000770 <__aeabi_ddiv>
 800f4dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4e0:	f004 040f 	and.w	r4, r4, #15
 800f4e4:	4e8e      	ldr	r6, [pc, #568]	; (800f720 <_dtoa_r+0x5a8>)
 800f4e6:	b954      	cbnz	r4, 800f4fe <_dtoa_r+0x386>
 800f4e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f4ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f4f0:	f7f1 f93e 	bl	8000770 <__aeabi_ddiv>
 800f4f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4f8:	e029      	b.n	800f54e <_dtoa_r+0x3d6>
 800f4fa:	2702      	movs	r7, #2
 800f4fc:	e7f2      	b.n	800f4e4 <_dtoa_r+0x36c>
 800f4fe:	07e1      	lsls	r1, r4, #31
 800f500:	d508      	bpl.n	800f514 <_dtoa_r+0x39c>
 800f502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f506:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f50a:	f7f1 f807 	bl	800051c <__aeabi_dmul>
 800f50e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f512:	3701      	adds	r7, #1
 800f514:	1064      	asrs	r4, r4, #1
 800f516:	3608      	adds	r6, #8
 800f518:	e7e5      	b.n	800f4e6 <_dtoa_r+0x36e>
 800f51a:	f000 80a5 	beq.w	800f668 <_dtoa_r+0x4f0>
 800f51e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f522:	f1ca 0400 	rsb	r4, sl, #0
 800f526:	4b7d      	ldr	r3, [pc, #500]	; (800f71c <_dtoa_r+0x5a4>)
 800f528:	f004 020f 	and.w	r2, r4, #15
 800f52c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f534:	f7f0 fff2 	bl	800051c <__aeabi_dmul>
 800f538:	2702      	movs	r7, #2
 800f53a:	2300      	movs	r3, #0
 800f53c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f540:	4e77      	ldr	r6, [pc, #476]	; (800f720 <_dtoa_r+0x5a8>)
 800f542:	1124      	asrs	r4, r4, #4
 800f544:	2c00      	cmp	r4, #0
 800f546:	f040 8084 	bne.w	800f652 <_dtoa_r+0x4da>
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d1d2      	bne.n	800f4f4 <_dtoa_r+0x37c>
 800f54e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f550:	2b00      	cmp	r3, #0
 800f552:	f000 808b 	beq.w	800f66c <_dtoa_r+0x4f4>
 800f556:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f55a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f55e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f562:	2200      	movs	r2, #0
 800f564:	4b6f      	ldr	r3, [pc, #444]	; (800f724 <_dtoa_r+0x5ac>)
 800f566:	f7f1 fa4b 	bl	8000a00 <__aeabi_dcmplt>
 800f56a:	2800      	cmp	r0, #0
 800f56c:	d07e      	beq.n	800f66c <_dtoa_r+0x4f4>
 800f56e:	9b08      	ldr	r3, [sp, #32]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d07b      	beq.n	800f66c <_dtoa_r+0x4f4>
 800f574:	f1b9 0f00 	cmp.w	r9, #0
 800f578:	dd38      	ble.n	800f5ec <_dtoa_r+0x474>
 800f57a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f57e:	2200      	movs	r2, #0
 800f580:	4b69      	ldr	r3, [pc, #420]	; (800f728 <_dtoa_r+0x5b0>)
 800f582:	f7f0 ffcb 	bl	800051c <__aeabi_dmul>
 800f586:	464c      	mov	r4, r9
 800f588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f58c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800f590:	3701      	adds	r7, #1
 800f592:	4638      	mov	r0, r7
 800f594:	f7f0 ff58 	bl	8000448 <__aeabi_i2d>
 800f598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f59c:	f7f0 ffbe 	bl	800051c <__aeabi_dmul>
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	4b62      	ldr	r3, [pc, #392]	; (800f72c <_dtoa_r+0x5b4>)
 800f5a4:	f7f0 fe04 	bl	80001b0 <__adddf3>
 800f5a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f5ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f5b0:	9611      	str	r6, [sp, #68]	; 0x44
 800f5b2:	2c00      	cmp	r4, #0
 800f5b4:	d15d      	bne.n	800f672 <_dtoa_r+0x4fa>
 800f5b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	4b5c      	ldr	r3, [pc, #368]	; (800f730 <_dtoa_r+0x5b8>)
 800f5be:	f7f0 fdf5 	bl	80001ac <__aeabi_dsub>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f5ca:	4633      	mov	r3, r6
 800f5cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f5ce:	f7f1 fa35 	bl	8000a3c <__aeabi_dcmpgt>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	f040 829c 	bne.w	800fb10 <_dtoa_r+0x998>
 800f5d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f5de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f5e2:	f7f1 fa0d 	bl	8000a00 <__aeabi_dcmplt>
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	f040 8290 	bne.w	800fb0c <_dtoa_r+0x994>
 800f5ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800f5f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f5f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	f2c0 8152 	blt.w	800f8a0 <_dtoa_r+0x728>
 800f5fc:	f1ba 0f0e 	cmp.w	sl, #14
 800f600:	f300 814e 	bgt.w	800f8a0 <_dtoa_r+0x728>
 800f604:	4b45      	ldr	r3, [pc, #276]	; (800f71c <_dtoa_r+0x5a4>)
 800f606:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f60a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f60e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800f612:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f614:	2b00      	cmp	r3, #0
 800f616:	f280 80db 	bge.w	800f7d0 <_dtoa_r+0x658>
 800f61a:	9b08      	ldr	r3, [sp, #32]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	f300 80d7 	bgt.w	800f7d0 <_dtoa_r+0x658>
 800f622:	f040 8272 	bne.w	800fb0a <_dtoa_r+0x992>
 800f626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f62a:	2200      	movs	r2, #0
 800f62c:	4b40      	ldr	r3, [pc, #256]	; (800f730 <_dtoa_r+0x5b8>)
 800f62e:	f7f0 ff75 	bl	800051c <__aeabi_dmul>
 800f632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f636:	f7f1 f9f7 	bl	8000a28 <__aeabi_dcmpge>
 800f63a:	9c08      	ldr	r4, [sp, #32]
 800f63c:	4626      	mov	r6, r4
 800f63e:	2800      	cmp	r0, #0
 800f640:	f040 8248 	bne.w	800fad4 <_dtoa_r+0x95c>
 800f644:	2331      	movs	r3, #49	; 0x31
 800f646:	9f03      	ldr	r7, [sp, #12]
 800f648:	f10a 0a01 	add.w	sl, sl, #1
 800f64c:	f807 3b01 	strb.w	r3, [r7], #1
 800f650:	e244      	b.n	800fadc <_dtoa_r+0x964>
 800f652:	07e2      	lsls	r2, r4, #31
 800f654:	d505      	bpl.n	800f662 <_dtoa_r+0x4ea>
 800f656:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f65a:	f7f0 ff5f 	bl	800051c <__aeabi_dmul>
 800f65e:	2301      	movs	r3, #1
 800f660:	3701      	adds	r7, #1
 800f662:	1064      	asrs	r4, r4, #1
 800f664:	3608      	adds	r6, #8
 800f666:	e76d      	b.n	800f544 <_dtoa_r+0x3cc>
 800f668:	2702      	movs	r7, #2
 800f66a:	e770      	b.n	800f54e <_dtoa_r+0x3d6>
 800f66c:	46d0      	mov	r8, sl
 800f66e:	9c08      	ldr	r4, [sp, #32]
 800f670:	e78f      	b.n	800f592 <_dtoa_r+0x41a>
 800f672:	9903      	ldr	r1, [sp, #12]
 800f674:	4b29      	ldr	r3, [pc, #164]	; (800f71c <_dtoa_r+0x5a4>)
 800f676:	4421      	add	r1, r4
 800f678:	9112      	str	r1, [sp, #72]	; 0x48
 800f67a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f67c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f680:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f684:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f688:	2900      	cmp	r1, #0
 800f68a:	d055      	beq.n	800f738 <_dtoa_r+0x5c0>
 800f68c:	2000      	movs	r0, #0
 800f68e:	4929      	ldr	r1, [pc, #164]	; (800f734 <_dtoa_r+0x5bc>)
 800f690:	f7f1 f86e 	bl	8000770 <__aeabi_ddiv>
 800f694:	463b      	mov	r3, r7
 800f696:	4632      	mov	r2, r6
 800f698:	f7f0 fd88 	bl	80001ac <__aeabi_dsub>
 800f69c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f6a0:	9f03      	ldr	r7, [sp, #12]
 800f6a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6a6:	f7f1 f9e9 	bl	8000a7c <__aeabi_d2iz>
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	f7f0 fecc 	bl	8000448 <__aeabi_i2d>
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6b8:	f7f0 fd78 	bl	80001ac <__aeabi_dsub>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	3430      	adds	r4, #48	; 0x30
 800f6c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f6c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6ca:	f807 4b01 	strb.w	r4, [r7], #1
 800f6ce:	f7f1 f997 	bl	8000a00 <__aeabi_dcmplt>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d174      	bne.n	800f7c0 <_dtoa_r+0x648>
 800f6d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6da:	2000      	movs	r0, #0
 800f6dc:	4911      	ldr	r1, [pc, #68]	; (800f724 <_dtoa_r+0x5ac>)
 800f6de:	f7f0 fd65 	bl	80001ac <__aeabi_dsub>
 800f6e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6e6:	f7f1 f98b 	bl	8000a00 <__aeabi_dcmplt>
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	f040 80b7 	bne.w	800f85e <_dtoa_r+0x6e6>
 800f6f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f6f2:	429f      	cmp	r7, r3
 800f6f4:	f43f af7a 	beq.w	800f5ec <_dtoa_r+0x474>
 800f6f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	4b0a      	ldr	r3, [pc, #40]	; (800f728 <_dtoa_r+0x5b0>)
 800f700:	f7f0 ff0c 	bl	800051c <__aeabi_dmul>
 800f704:	2200      	movs	r2, #0
 800f706:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f70a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f70e:	4b06      	ldr	r3, [pc, #24]	; (800f728 <_dtoa_r+0x5b0>)
 800f710:	f7f0 ff04 	bl	800051c <__aeabi_dmul>
 800f714:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f718:	e7c3      	b.n	800f6a2 <_dtoa_r+0x52a>
 800f71a:	bf00      	nop
 800f71c:	08011ea8 	.word	0x08011ea8
 800f720:	08011e80 	.word	0x08011e80
 800f724:	3ff00000 	.word	0x3ff00000
 800f728:	40240000 	.word	0x40240000
 800f72c:	401c0000 	.word	0x401c0000
 800f730:	40140000 	.word	0x40140000
 800f734:	3fe00000 	.word	0x3fe00000
 800f738:	4630      	mov	r0, r6
 800f73a:	4639      	mov	r1, r7
 800f73c:	f7f0 feee 	bl	800051c <__aeabi_dmul>
 800f740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f742:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f746:	9c03      	ldr	r4, [sp, #12]
 800f748:	9314      	str	r3, [sp, #80]	; 0x50
 800f74a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f74e:	f7f1 f995 	bl	8000a7c <__aeabi_d2iz>
 800f752:	9015      	str	r0, [sp, #84]	; 0x54
 800f754:	f7f0 fe78 	bl	8000448 <__aeabi_i2d>
 800f758:	4602      	mov	r2, r0
 800f75a:	460b      	mov	r3, r1
 800f75c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f760:	f7f0 fd24 	bl	80001ac <__aeabi_dsub>
 800f764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f766:	4606      	mov	r6, r0
 800f768:	3330      	adds	r3, #48	; 0x30
 800f76a:	f804 3b01 	strb.w	r3, [r4], #1
 800f76e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f770:	460f      	mov	r7, r1
 800f772:	429c      	cmp	r4, r3
 800f774:	f04f 0200 	mov.w	r2, #0
 800f778:	d124      	bne.n	800f7c4 <_dtoa_r+0x64c>
 800f77a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f77e:	4bb0      	ldr	r3, [pc, #704]	; (800fa40 <_dtoa_r+0x8c8>)
 800f780:	f7f0 fd16 	bl	80001b0 <__adddf3>
 800f784:	4602      	mov	r2, r0
 800f786:	460b      	mov	r3, r1
 800f788:	4630      	mov	r0, r6
 800f78a:	4639      	mov	r1, r7
 800f78c:	f7f1 f956 	bl	8000a3c <__aeabi_dcmpgt>
 800f790:	2800      	cmp	r0, #0
 800f792:	d163      	bne.n	800f85c <_dtoa_r+0x6e4>
 800f794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f798:	2000      	movs	r0, #0
 800f79a:	49a9      	ldr	r1, [pc, #676]	; (800fa40 <_dtoa_r+0x8c8>)
 800f79c:	f7f0 fd06 	bl	80001ac <__aeabi_dsub>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	460b      	mov	r3, r1
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	f7f1 f92a 	bl	8000a00 <__aeabi_dcmplt>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	f43f af1d 	beq.w	800f5ec <_dtoa_r+0x474>
 800f7b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f7b4:	1e7b      	subs	r3, r7, #1
 800f7b6:	9314      	str	r3, [sp, #80]	; 0x50
 800f7b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f7bc:	2b30      	cmp	r3, #48	; 0x30
 800f7be:	d0f8      	beq.n	800f7b2 <_dtoa_r+0x63a>
 800f7c0:	46c2      	mov	sl, r8
 800f7c2:	e03b      	b.n	800f83c <_dtoa_r+0x6c4>
 800f7c4:	4b9f      	ldr	r3, [pc, #636]	; (800fa44 <_dtoa_r+0x8cc>)
 800f7c6:	f7f0 fea9 	bl	800051c <__aeabi_dmul>
 800f7ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7ce:	e7bc      	b.n	800f74a <_dtoa_r+0x5d2>
 800f7d0:	9f03      	ldr	r7, [sp, #12]
 800f7d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f7d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7da:	4640      	mov	r0, r8
 800f7dc:	4649      	mov	r1, r9
 800f7de:	f7f0 ffc7 	bl	8000770 <__aeabi_ddiv>
 800f7e2:	f7f1 f94b 	bl	8000a7c <__aeabi_d2iz>
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	f7f0 fe2e 	bl	8000448 <__aeabi_i2d>
 800f7ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7f0:	f7f0 fe94 	bl	800051c <__aeabi_dmul>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	4640      	mov	r0, r8
 800f7fa:	4649      	mov	r1, r9
 800f7fc:	f7f0 fcd6 	bl	80001ac <__aeabi_dsub>
 800f800:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f804:	f807 6b01 	strb.w	r6, [r7], #1
 800f808:	9e03      	ldr	r6, [sp, #12]
 800f80a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f80e:	1bbe      	subs	r6, r7, r6
 800f810:	45b4      	cmp	ip, r6
 800f812:	4602      	mov	r2, r0
 800f814:	460b      	mov	r3, r1
 800f816:	d136      	bne.n	800f886 <_dtoa_r+0x70e>
 800f818:	f7f0 fcca 	bl	80001b0 <__adddf3>
 800f81c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f820:	4680      	mov	r8, r0
 800f822:	4689      	mov	r9, r1
 800f824:	f7f1 f90a 	bl	8000a3c <__aeabi_dcmpgt>
 800f828:	bb58      	cbnz	r0, 800f882 <_dtoa_r+0x70a>
 800f82a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f82e:	4640      	mov	r0, r8
 800f830:	4649      	mov	r1, r9
 800f832:	f7f1 f8db 	bl	80009ec <__aeabi_dcmpeq>
 800f836:	b108      	cbz	r0, 800f83c <_dtoa_r+0x6c4>
 800f838:	07e1      	lsls	r1, r4, #31
 800f83a:	d422      	bmi.n	800f882 <_dtoa_r+0x70a>
 800f83c:	4628      	mov	r0, r5
 800f83e:	4659      	mov	r1, fp
 800f840:	f000 fe6c 	bl	801051c <_Bfree>
 800f844:	2300      	movs	r3, #0
 800f846:	703b      	strb	r3, [r7, #0]
 800f848:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f84a:	f10a 0001 	add.w	r0, sl, #1
 800f84e:	6018      	str	r0, [r3, #0]
 800f850:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f852:	2b00      	cmp	r3, #0
 800f854:	f43f acde 	beq.w	800f214 <_dtoa_r+0x9c>
 800f858:	601f      	str	r7, [r3, #0]
 800f85a:	e4db      	b.n	800f214 <_dtoa_r+0x9c>
 800f85c:	4627      	mov	r7, r4
 800f85e:	463b      	mov	r3, r7
 800f860:	461f      	mov	r7, r3
 800f862:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f866:	2a39      	cmp	r2, #57	; 0x39
 800f868:	d107      	bne.n	800f87a <_dtoa_r+0x702>
 800f86a:	9a03      	ldr	r2, [sp, #12]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d1f7      	bne.n	800f860 <_dtoa_r+0x6e8>
 800f870:	2230      	movs	r2, #48	; 0x30
 800f872:	9903      	ldr	r1, [sp, #12]
 800f874:	f108 0801 	add.w	r8, r8, #1
 800f878:	700a      	strb	r2, [r1, #0]
 800f87a:	781a      	ldrb	r2, [r3, #0]
 800f87c:	3201      	adds	r2, #1
 800f87e:	701a      	strb	r2, [r3, #0]
 800f880:	e79e      	b.n	800f7c0 <_dtoa_r+0x648>
 800f882:	46d0      	mov	r8, sl
 800f884:	e7eb      	b.n	800f85e <_dtoa_r+0x6e6>
 800f886:	2200      	movs	r2, #0
 800f888:	4b6e      	ldr	r3, [pc, #440]	; (800fa44 <_dtoa_r+0x8cc>)
 800f88a:	f7f0 fe47 	bl	800051c <__aeabi_dmul>
 800f88e:	2200      	movs	r2, #0
 800f890:	2300      	movs	r3, #0
 800f892:	4680      	mov	r8, r0
 800f894:	4689      	mov	r9, r1
 800f896:	f7f1 f8a9 	bl	80009ec <__aeabi_dcmpeq>
 800f89a:	2800      	cmp	r0, #0
 800f89c:	d09b      	beq.n	800f7d6 <_dtoa_r+0x65e>
 800f89e:	e7cd      	b.n	800f83c <_dtoa_r+0x6c4>
 800f8a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8a2:	2a00      	cmp	r2, #0
 800f8a4:	f000 80d0 	beq.w	800fa48 <_dtoa_r+0x8d0>
 800f8a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f8aa:	2a01      	cmp	r2, #1
 800f8ac:	f300 80ae 	bgt.w	800fa0c <_dtoa_r+0x894>
 800f8b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f8b2:	2a00      	cmp	r2, #0
 800f8b4:	f000 80a6 	beq.w	800fa04 <_dtoa_r+0x88c>
 800f8b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f8bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f8be:	9f06      	ldr	r7, [sp, #24]
 800f8c0:	9a06      	ldr	r2, [sp, #24]
 800f8c2:	2101      	movs	r1, #1
 800f8c4:	441a      	add	r2, r3
 800f8c6:	9206      	str	r2, [sp, #24]
 800f8c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	441a      	add	r2, r3
 800f8ce:	9209      	str	r2, [sp, #36]	; 0x24
 800f8d0:	f000 ff24 	bl	801071c <__i2b>
 800f8d4:	4606      	mov	r6, r0
 800f8d6:	2f00      	cmp	r7, #0
 800f8d8:	dd0c      	ble.n	800f8f4 <_dtoa_r+0x77c>
 800f8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	dd09      	ble.n	800f8f4 <_dtoa_r+0x77c>
 800f8e0:	42bb      	cmp	r3, r7
 800f8e2:	bfa8      	it	ge
 800f8e4:	463b      	movge	r3, r7
 800f8e6:	9a06      	ldr	r2, [sp, #24]
 800f8e8:	1aff      	subs	r7, r7, r3
 800f8ea:	1ad2      	subs	r2, r2, r3
 800f8ec:	9206      	str	r2, [sp, #24]
 800f8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8f0:	1ad3      	subs	r3, r2, r3
 800f8f2:	9309      	str	r3, [sp, #36]	; 0x24
 800f8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8f6:	b1f3      	cbz	r3, 800f936 <_dtoa_r+0x7be>
 800f8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	f000 80a8 	beq.w	800fa50 <_dtoa_r+0x8d8>
 800f900:	2c00      	cmp	r4, #0
 800f902:	dd10      	ble.n	800f926 <_dtoa_r+0x7ae>
 800f904:	4631      	mov	r1, r6
 800f906:	4622      	mov	r2, r4
 800f908:	4628      	mov	r0, r5
 800f90a:	f000 ffc5 	bl	8010898 <__pow5mult>
 800f90e:	465a      	mov	r2, fp
 800f910:	4601      	mov	r1, r0
 800f912:	4606      	mov	r6, r0
 800f914:	4628      	mov	r0, r5
 800f916:	f000 ff17 	bl	8010748 <__multiply>
 800f91a:	4680      	mov	r8, r0
 800f91c:	4659      	mov	r1, fp
 800f91e:	4628      	mov	r0, r5
 800f920:	f000 fdfc 	bl	801051c <_Bfree>
 800f924:	46c3      	mov	fp, r8
 800f926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f928:	1b1a      	subs	r2, r3, r4
 800f92a:	d004      	beq.n	800f936 <_dtoa_r+0x7be>
 800f92c:	4659      	mov	r1, fp
 800f92e:	4628      	mov	r0, r5
 800f930:	f000 ffb2 	bl	8010898 <__pow5mult>
 800f934:	4683      	mov	fp, r0
 800f936:	2101      	movs	r1, #1
 800f938:	4628      	mov	r0, r5
 800f93a:	f000 feef 	bl	801071c <__i2b>
 800f93e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f940:	4604      	mov	r4, r0
 800f942:	2b00      	cmp	r3, #0
 800f944:	f340 8086 	ble.w	800fa54 <_dtoa_r+0x8dc>
 800f948:	461a      	mov	r2, r3
 800f94a:	4601      	mov	r1, r0
 800f94c:	4628      	mov	r0, r5
 800f94e:	f000 ffa3 	bl	8010898 <__pow5mult>
 800f952:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f954:	4604      	mov	r4, r0
 800f956:	2b01      	cmp	r3, #1
 800f958:	dd7f      	ble.n	800fa5a <_dtoa_r+0x8e2>
 800f95a:	f04f 0800 	mov.w	r8, #0
 800f95e:	6923      	ldr	r3, [r4, #16]
 800f960:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f964:	6918      	ldr	r0, [r3, #16]
 800f966:	f000 fe8b 	bl	8010680 <__hi0bits>
 800f96a:	f1c0 0020 	rsb	r0, r0, #32
 800f96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f970:	4418      	add	r0, r3
 800f972:	f010 001f 	ands.w	r0, r0, #31
 800f976:	f000 8092 	beq.w	800fa9e <_dtoa_r+0x926>
 800f97a:	f1c0 0320 	rsb	r3, r0, #32
 800f97e:	2b04      	cmp	r3, #4
 800f980:	f340 808a 	ble.w	800fa98 <_dtoa_r+0x920>
 800f984:	f1c0 001c 	rsb	r0, r0, #28
 800f988:	9b06      	ldr	r3, [sp, #24]
 800f98a:	4407      	add	r7, r0
 800f98c:	4403      	add	r3, r0
 800f98e:	9306      	str	r3, [sp, #24]
 800f990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f992:	4403      	add	r3, r0
 800f994:	9309      	str	r3, [sp, #36]	; 0x24
 800f996:	9b06      	ldr	r3, [sp, #24]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	dd05      	ble.n	800f9a8 <_dtoa_r+0x830>
 800f99c:	4659      	mov	r1, fp
 800f99e:	461a      	mov	r2, r3
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	f000 ffd3 	bl	801094c <__lshift>
 800f9a6:	4683      	mov	fp, r0
 800f9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	dd05      	ble.n	800f9ba <_dtoa_r+0x842>
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	f000 ffca 	bl	801094c <__lshift>
 800f9b8:	4604      	mov	r4, r0
 800f9ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d070      	beq.n	800faa2 <_dtoa_r+0x92a>
 800f9c0:	4621      	mov	r1, r4
 800f9c2:	4658      	mov	r0, fp
 800f9c4:	f001 f832 	bl	8010a2c <__mcmp>
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	da6a      	bge.n	800faa2 <_dtoa_r+0x92a>
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	4659      	mov	r1, fp
 800f9d0:	220a      	movs	r2, #10
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	f000 fdc4 	bl	8010560 <__multadd>
 800f9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9da:	4683      	mov	fp, r0
 800f9dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	f000 8194 	beq.w	800fd0e <_dtoa_r+0xb96>
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	220a      	movs	r2, #10
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	f000 fdb7 	bl	8010560 <__multadd>
 800f9f2:	f1b9 0f00 	cmp.w	r9, #0
 800f9f6:	4606      	mov	r6, r0
 800f9f8:	f300 8093 	bgt.w	800fb22 <_dtoa_r+0x9aa>
 800f9fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f9fe:	2b02      	cmp	r3, #2
 800fa00:	dc57      	bgt.n	800fab2 <_dtoa_r+0x93a>
 800fa02:	e08e      	b.n	800fb22 <_dtoa_r+0x9aa>
 800fa04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fa06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fa0a:	e757      	b.n	800f8bc <_dtoa_r+0x744>
 800fa0c:	9b08      	ldr	r3, [sp, #32]
 800fa0e:	1e5c      	subs	r4, r3, #1
 800fa10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa12:	42a3      	cmp	r3, r4
 800fa14:	bfb7      	itett	lt
 800fa16:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fa18:	1b1c      	subge	r4, r3, r4
 800fa1a:	1ae2      	sublt	r2, r4, r3
 800fa1c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fa1e:	bfbe      	ittt	lt
 800fa20:	940a      	strlt	r4, [sp, #40]	; 0x28
 800fa22:	189b      	addlt	r3, r3, r2
 800fa24:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fa26:	9b08      	ldr	r3, [sp, #32]
 800fa28:	bfb8      	it	lt
 800fa2a:	2400      	movlt	r4, #0
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	bfbb      	ittet	lt
 800fa30:	9b06      	ldrlt	r3, [sp, #24]
 800fa32:	9a08      	ldrlt	r2, [sp, #32]
 800fa34:	9f06      	ldrge	r7, [sp, #24]
 800fa36:	1a9f      	sublt	r7, r3, r2
 800fa38:	bfac      	ite	ge
 800fa3a:	9b08      	ldrge	r3, [sp, #32]
 800fa3c:	2300      	movlt	r3, #0
 800fa3e:	e73f      	b.n	800f8c0 <_dtoa_r+0x748>
 800fa40:	3fe00000 	.word	0x3fe00000
 800fa44:	40240000 	.word	0x40240000
 800fa48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fa4a:	9f06      	ldr	r7, [sp, #24]
 800fa4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800fa4e:	e742      	b.n	800f8d6 <_dtoa_r+0x75e>
 800fa50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa52:	e76b      	b.n	800f92c <_dtoa_r+0x7b4>
 800fa54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	dc19      	bgt.n	800fa8e <_dtoa_r+0x916>
 800fa5a:	9b04      	ldr	r3, [sp, #16]
 800fa5c:	b9bb      	cbnz	r3, 800fa8e <_dtoa_r+0x916>
 800fa5e:	9b05      	ldr	r3, [sp, #20]
 800fa60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa64:	b99b      	cbnz	r3, 800fa8e <_dtoa_r+0x916>
 800fa66:	9b05      	ldr	r3, [sp, #20]
 800fa68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa6c:	0d1b      	lsrs	r3, r3, #20
 800fa6e:	051b      	lsls	r3, r3, #20
 800fa70:	b183      	cbz	r3, 800fa94 <_dtoa_r+0x91c>
 800fa72:	f04f 0801 	mov.w	r8, #1
 800fa76:	9b06      	ldr	r3, [sp, #24]
 800fa78:	3301      	adds	r3, #1
 800fa7a:	9306      	str	r3, [sp, #24]
 800fa7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa7e:	3301      	adds	r3, #1
 800fa80:	9309      	str	r3, [sp, #36]	; 0x24
 800fa82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	f47f af6a 	bne.w	800f95e <_dtoa_r+0x7e6>
 800fa8a:	2001      	movs	r0, #1
 800fa8c:	e76f      	b.n	800f96e <_dtoa_r+0x7f6>
 800fa8e:	f04f 0800 	mov.w	r8, #0
 800fa92:	e7f6      	b.n	800fa82 <_dtoa_r+0x90a>
 800fa94:	4698      	mov	r8, r3
 800fa96:	e7f4      	b.n	800fa82 <_dtoa_r+0x90a>
 800fa98:	f43f af7d 	beq.w	800f996 <_dtoa_r+0x81e>
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	301c      	adds	r0, #28
 800faa0:	e772      	b.n	800f988 <_dtoa_r+0x810>
 800faa2:	9b08      	ldr	r3, [sp, #32]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	dc36      	bgt.n	800fb16 <_dtoa_r+0x99e>
 800faa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800faaa:	2b02      	cmp	r3, #2
 800faac:	dd33      	ble.n	800fb16 <_dtoa_r+0x99e>
 800faae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fab2:	f1b9 0f00 	cmp.w	r9, #0
 800fab6:	d10d      	bne.n	800fad4 <_dtoa_r+0x95c>
 800fab8:	4621      	mov	r1, r4
 800faba:	464b      	mov	r3, r9
 800fabc:	2205      	movs	r2, #5
 800fabe:	4628      	mov	r0, r5
 800fac0:	f000 fd4e 	bl	8010560 <__multadd>
 800fac4:	4601      	mov	r1, r0
 800fac6:	4604      	mov	r4, r0
 800fac8:	4658      	mov	r0, fp
 800faca:	f000 ffaf 	bl	8010a2c <__mcmp>
 800face:	2800      	cmp	r0, #0
 800fad0:	f73f adb8 	bgt.w	800f644 <_dtoa_r+0x4cc>
 800fad4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fad6:	9f03      	ldr	r7, [sp, #12]
 800fad8:	ea6f 0a03 	mvn.w	sl, r3
 800fadc:	f04f 0800 	mov.w	r8, #0
 800fae0:	4621      	mov	r1, r4
 800fae2:	4628      	mov	r0, r5
 800fae4:	f000 fd1a 	bl	801051c <_Bfree>
 800fae8:	2e00      	cmp	r6, #0
 800faea:	f43f aea7 	beq.w	800f83c <_dtoa_r+0x6c4>
 800faee:	f1b8 0f00 	cmp.w	r8, #0
 800faf2:	d005      	beq.n	800fb00 <_dtoa_r+0x988>
 800faf4:	45b0      	cmp	r8, r6
 800faf6:	d003      	beq.n	800fb00 <_dtoa_r+0x988>
 800faf8:	4641      	mov	r1, r8
 800fafa:	4628      	mov	r0, r5
 800fafc:	f000 fd0e 	bl	801051c <_Bfree>
 800fb00:	4631      	mov	r1, r6
 800fb02:	4628      	mov	r0, r5
 800fb04:	f000 fd0a 	bl	801051c <_Bfree>
 800fb08:	e698      	b.n	800f83c <_dtoa_r+0x6c4>
 800fb0a:	2400      	movs	r4, #0
 800fb0c:	4626      	mov	r6, r4
 800fb0e:	e7e1      	b.n	800fad4 <_dtoa_r+0x95c>
 800fb10:	46c2      	mov	sl, r8
 800fb12:	4626      	mov	r6, r4
 800fb14:	e596      	b.n	800f644 <_dtoa_r+0x4cc>
 800fb16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	f000 80fd 	beq.w	800fd1c <_dtoa_r+0xba4>
 800fb22:	2f00      	cmp	r7, #0
 800fb24:	dd05      	ble.n	800fb32 <_dtoa_r+0x9ba>
 800fb26:	4631      	mov	r1, r6
 800fb28:	463a      	mov	r2, r7
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	f000 ff0e 	bl	801094c <__lshift>
 800fb30:	4606      	mov	r6, r0
 800fb32:	f1b8 0f00 	cmp.w	r8, #0
 800fb36:	d05c      	beq.n	800fbf2 <_dtoa_r+0xa7a>
 800fb38:	4628      	mov	r0, r5
 800fb3a:	6871      	ldr	r1, [r6, #4]
 800fb3c:	f000 fcae 	bl	801049c <_Balloc>
 800fb40:	4607      	mov	r7, r0
 800fb42:	b928      	cbnz	r0, 800fb50 <_dtoa_r+0x9d8>
 800fb44:	4602      	mov	r2, r0
 800fb46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fb4a:	4b7f      	ldr	r3, [pc, #508]	; (800fd48 <_dtoa_r+0xbd0>)
 800fb4c:	f7ff bb28 	b.w	800f1a0 <_dtoa_r+0x28>
 800fb50:	6932      	ldr	r2, [r6, #16]
 800fb52:	f106 010c 	add.w	r1, r6, #12
 800fb56:	3202      	adds	r2, #2
 800fb58:	0092      	lsls	r2, r2, #2
 800fb5a:	300c      	adds	r0, #12
 800fb5c:	f7fd ff6e 	bl	800da3c <memcpy>
 800fb60:	2201      	movs	r2, #1
 800fb62:	4639      	mov	r1, r7
 800fb64:	4628      	mov	r0, r5
 800fb66:	f000 fef1 	bl	801094c <__lshift>
 800fb6a:	46b0      	mov	r8, r6
 800fb6c:	4606      	mov	r6, r0
 800fb6e:	9b03      	ldr	r3, [sp, #12]
 800fb70:	3301      	adds	r3, #1
 800fb72:	9308      	str	r3, [sp, #32]
 800fb74:	9b03      	ldr	r3, [sp, #12]
 800fb76:	444b      	add	r3, r9
 800fb78:	930a      	str	r3, [sp, #40]	; 0x28
 800fb7a:	9b04      	ldr	r3, [sp, #16]
 800fb7c:	f003 0301 	and.w	r3, r3, #1
 800fb80:	9309      	str	r3, [sp, #36]	; 0x24
 800fb82:	9b08      	ldr	r3, [sp, #32]
 800fb84:	4621      	mov	r1, r4
 800fb86:	3b01      	subs	r3, #1
 800fb88:	4658      	mov	r0, fp
 800fb8a:	9304      	str	r3, [sp, #16]
 800fb8c:	f7ff fa66 	bl	800f05c <quorem>
 800fb90:	4603      	mov	r3, r0
 800fb92:	4641      	mov	r1, r8
 800fb94:	3330      	adds	r3, #48	; 0x30
 800fb96:	9006      	str	r0, [sp, #24]
 800fb98:	4658      	mov	r0, fp
 800fb9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb9c:	f000 ff46 	bl	8010a2c <__mcmp>
 800fba0:	4632      	mov	r2, r6
 800fba2:	4681      	mov	r9, r0
 800fba4:	4621      	mov	r1, r4
 800fba6:	4628      	mov	r0, r5
 800fba8:	f000 ff5c 	bl	8010a64 <__mdiff>
 800fbac:	68c2      	ldr	r2, [r0, #12]
 800fbae:	4607      	mov	r7, r0
 800fbb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbb2:	bb02      	cbnz	r2, 800fbf6 <_dtoa_r+0xa7e>
 800fbb4:	4601      	mov	r1, r0
 800fbb6:	4658      	mov	r0, fp
 800fbb8:	f000 ff38 	bl	8010a2c <__mcmp>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbc0:	4639      	mov	r1, r7
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800fbc8:	f000 fca8 	bl	801051c <_Bfree>
 800fbcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fbce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbd0:	9f08      	ldr	r7, [sp, #32]
 800fbd2:	ea43 0102 	orr.w	r1, r3, r2
 800fbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbd8:	430b      	orrs	r3, r1
 800fbda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbdc:	d10d      	bne.n	800fbfa <_dtoa_r+0xa82>
 800fbde:	2b39      	cmp	r3, #57	; 0x39
 800fbe0:	d029      	beq.n	800fc36 <_dtoa_r+0xabe>
 800fbe2:	f1b9 0f00 	cmp.w	r9, #0
 800fbe6:	dd01      	ble.n	800fbec <_dtoa_r+0xa74>
 800fbe8:	9b06      	ldr	r3, [sp, #24]
 800fbea:	3331      	adds	r3, #49	; 0x31
 800fbec:	9a04      	ldr	r2, [sp, #16]
 800fbee:	7013      	strb	r3, [r2, #0]
 800fbf0:	e776      	b.n	800fae0 <_dtoa_r+0x968>
 800fbf2:	4630      	mov	r0, r6
 800fbf4:	e7b9      	b.n	800fb6a <_dtoa_r+0x9f2>
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	e7e2      	b.n	800fbc0 <_dtoa_r+0xa48>
 800fbfa:	f1b9 0f00 	cmp.w	r9, #0
 800fbfe:	db06      	blt.n	800fc0e <_dtoa_r+0xa96>
 800fc00:	9922      	ldr	r1, [sp, #136]	; 0x88
 800fc02:	ea41 0909 	orr.w	r9, r1, r9
 800fc06:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc08:	ea59 0101 	orrs.w	r1, r9, r1
 800fc0c:	d120      	bne.n	800fc50 <_dtoa_r+0xad8>
 800fc0e:	2a00      	cmp	r2, #0
 800fc10:	ddec      	ble.n	800fbec <_dtoa_r+0xa74>
 800fc12:	4659      	mov	r1, fp
 800fc14:	2201      	movs	r2, #1
 800fc16:	4628      	mov	r0, r5
 800fc18:	9308      	str	r3, [sp, #32]
 800fc1a:	f000 fe97 	bl	801094c <__lshift>
 800fc1e:	4621      	mov	r1, r4
 800fc20:	4683      	mov	fp, r0
 800fc22:	f000 ff03 	bl	8010a2c <__mcmp>
 800fc26:	2800      	cmp	r0, #0
 800fc28:	9b08      	ldr	r3, [sp, #32]
 800fc2a:	dc02      	bgt.n	800fc32 <_dtoa_r+0xaba>
 800fc2c:	d1de      	bne.n	800fbec <_dtoa_r+0xa74>
 800fc2e:	07da      	lsls	r2, r3, #31
 800fc30:	d5dc      	bpl.n	800fbec <_dtoa_r+0xa74>
 800fc32:	2b39      	cmp	r3, #57	; 0x39
 800fc34:	d1d8      	bne.n	800fbe8 <_dtoa_r+0xa70>
 800fc36:	2339      	movs	r3, #57	; 0x39
 800fc38:	9a04      	ldr	r2, [sp, #16]
 800fc3a:	7013      	strb	r3, [r2, #0]
 800fc3c:	463b      	mov	r3, r7
 800fc3e:	461f      	mov	r7, r3
 800fc40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800fc44:	3b01      	subs	r3, #1
 800fc46:	2a39      	cmp	r2, #57	; 0x39
 800fc48:	d050      	beq.n	800fcec <_dtoa_r+0xb74>
 800fc4a:	3201      	adds	r2, #1
 800fc4c:	701a      	strb	r2, [r3, #0]
 800fc4e:	e747      	b.n	800fae0 <_dtoa_r+0x968>
 800fc50:	2a00      	cmp	r2, #0
 800fc52:	dd03      	ble.n	800fc5c <_dtoa_r+0xae4>
 800fc54:	2b39      	cmp	r3, #57	; 0x39
 800fc56:	d0ee      	beq.n	800fc36 <_dtoa_r+0xabe>
 800fc58:	3301      	adds	r3, #1
 800fc5a:	e7c7      	b.n	800fbec <_dtoa_r+0xa74>
 800fc5c:	9a08      	ldr	r2, [sp, #32]
 800fc5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fc60:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fc64:	428a      	cmp	r2, r1
 800fc66:	d02a      	beq.n	800fcbe <_dtoa_r+0xb46>
 800fc68:	4659      	mov	r1, fp
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	220a      	movs	r2, #10
 800fc6e:	4628      	mov	r0, r5
 800fc70:	f000 fc76 	bl	8010560 <__multadd>
 800fc74:	45b0      	cmp	r8, r6
 800fc76:	4683      	mov	fp, r0
 800fc78:	f04f 0300 	mov.w	r3, #0
 800fc7c:	f04f 020a 	mov.w	r2, #10
 800fc80:	4641      	mov	r1, r8
 800fc82:	4628      	mov	r0, r5
 800fc84:	d107      	bne.n	800fc96 <_dtoa_r+0xb1e>
 800fc86:	f000 fc6b 	bl	8010560 <__multadd>
 800fc8a:	4680      	mov	r8, r0
 800fc8c:	4606      	mov	r6, r0
 800fc8e:	9b08      	ldr	r3, [sp, #32]
 800fc90:	3301      	adds	r3, #1
 800fc92:	9308      	str	r3, [sp, #32]
 800fc94:	e775      	b.n	800fb82 <_dtoa_r+0xa0a>
 800fc96:	f000 fc63 	bl	8010560 <__multadd>
 800fc9a:	4631      	mov	r1, r6
 800fc9c:	4680      	mov	r8, r0
 800fc9e:	2300      	movs	r3, #0
 800fca0:	220a      	movs	r2, #10
 800fca2:	4628      	mov	r0, r5
 800fca4:	f000 fc5c 	bl	8010560 <__multadd>
 800fca8:	4606      	mov	r6, r0
 800fcaa:	e7f0      	b.n	800fc8e <_dtoa_r+0xb16>
 800fcac:	f1b9 0f00 	cmp.w	r9, #0
 800fcb0:	bfcc      	ite	gt
 800fcb2:	464f      	movgt	r7, r9
 800fcb4:	2701      	movle	r7, #1
 800fcb6:	f04f 0800 	mov.w	r8, #0
 800fcba:	9a03      	ldr	r2, [sp, #12]
 800fcbc:	4417      	add	r7, r2
 800fcbe:	4659      	mov	r1, fp
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	9308      	str	r3, [sp, #32]
 800fcc6:	f000 fe41 	bl	801094c <__lshift>
 800fcca:	4621      	mov	r1, r4
 800fccc:	4683      	mov	fp, r0
 800fcce:	f000 fead 	bl	8010a2c <__mcmp>
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	dcb2      	bgt.n	800fc3c <_dtoa_r+0xac4>
 800fcd6:	d102      	bne.n	800fcde <_dtoa_r+0xb66>
 800fcd8:	9b08      	ldr	r3, [sp, #32]
 800fcda:	07db      	lsls	r3, r3, #31
 800fcdc:	d4ae      	bmi.n	800fc3c <_dtoa_r+0xac4>
 800fcde:	463b      	mov	r3, r7
 800fce0:	461f      	mov	r7, r3
 800fce2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fce6:	2a30      	cmp	r2, #48	; 0x30
 800fce8:	d0fa      	beq.n	800fce0 <_dtoa_r+0xb68>
 800fcea:	e6f9      	b.n	800fae0 <_dtoa_r+0x968>
 800fcec:	9a03      	ldr	r2, [sp, #12]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d1a5      	bne.n	800fc3e <_dtoa_r+0xac6>
 800fcf2:	2331      	movs	r3, #49	; 0x31
 800fcf4:	f10a 0a01 	add.w	sl, sl, #1
 800fcf8:	e779      	b.n	800fbee <_dtoa_r+0xa76>
 800fcfa:	4b14      	ldr	r3, [pc, #80]	; (800fd4c <_dtoa_r+0xbd4>)
 800fcfc:	f7ff baa8 	b.w	800f250 <_dtoa_r+0xd8>
 800fd00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f47f aa81 	bne.w	800f20a <_dtoa_r+0x92>
 800fd08:	4b11      	ldr	r3, [pc, #68]	; (800fd50 <_dtoa_r+0xbd8>)
 800fd0a:	f7ff baa1 	b.w	800f250 <_dtoa_r+0xd8>
 800fd0e:	f1b9 0f00 	cmp.w	r9, #0
 800fd12:	dc03      	bgt.n	800fd1c <_dtoa_r+0xba4>
 800fd14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd16:	2b02      	cmp	r3, #2
 800fd18:	f73f aecb 	bgt.w	800fab2 <_dtoa_r+0x93a>
 800fd1c:	9f03      	ldr	r7, [sp, #12]
 800fd1e:	4621      	mov	r1, r4
 800fd20:	4658      	mov	r0, fp
 800fd22:	f7ff f99b 	bl	800f05c <quorem>
 800fd26:	9a03      	ldr	r2, [sp, #12]
 800fd28:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fd2c:	f807 3b01 	strb.w	r3, [r7], #1
 800fd30:	1aba      	subs	r2, r7, r2
 800fd32:	4591      	cmp	r9, r2
 800fd34:	ddba      	ble.n	800fcac <_dtoa_r+0xb34>
 800fd36:	4659      	mov	r1, fp
 800fd38:	2300      	movs	r3, #0
 800fd3a:	220a      	movs	r2, #10
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	f000 fc0f 	bl	8010560 <__multadd>
 800fd42:	4683      	mov	fp, r0
 800fd44:	e7eb      	b.n	800fd1e <_dtoa_r+0xba6>
 800fd46:	bf00      	nop
 800fd48:	08011d98 	.word	0x08011d98
 800fd4c:	08011c08 	.word	0x08011c08
 800fd50:	08011d30 	.word	0x08011d30

0800fd54 <fiprintf>:
 800fd54:	b40e      	push	{r1, r2, r3}
 800fd56:	b503      	push	{r0, r1, lr}
 800fd58:	4601      	mov	r1, r0
 800fd5a:	ab03      	add	r3, sp, #12
 800fd5c:	4805      	ldr	r0, [pc, #20]	; (800fd74 <fiprintf+0x20>)
 800fd5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd62:	6800      	ldr	r0, [r0, #0]
 800fd64:	9301      	str	r3, [sp, #4]
 800fd66:	f001 f969 	bl	801103c <_vfiprintf_r>
 800fd6a:	b002      	add	sp, #8
 800fd6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd70:	b003      	add	sp, #12
 800fd72:	4770      	bx	lr
 800fd74:	20000514 	.word	0x20000514

0800fd78 <rshift>:
 800fd78:	6903      	ldr	r3, [r0, #16]
 800fd7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fd82:	f100 0414 	add.w	r4, r0, #20
 800fd86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fd8a:	dd46      	ble.n	800fe1a <rshift+0xa2>
 800fd8c:	f011 011f 	ands.w	r1, r1, #31
 800fd90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fd94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd98:	d10c      	bne.n	800fdb4 <rshift+0x3c>
 800fd9a:	4629      	mov	r1, r5
 800fd9c:	f100 0710 	add.w	r7, r0, #16
 800fda0:	42b1      	cmp	r1, r6
 800fda2:	d335      	bcc.n	800fe10 <rshift+0x98>
 800fda4:	1a9b      	subs	r3, r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	1eea      	subs	r2, r5, #3
 800fdaa:	4296      	cmp	r6, r2
 800fdac:	bf38      	it	cc
 800fdae:	2300      	movcc	r3, #0
 800fdb0:	4423      	add	r3, r4
 800fdb2:	e015      	b.n	800fde0 <rshift+0x68>
 800fdb4:	46a1      	mov	r9, r4
 800fdb6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fdba:	f1c1 0820 	rsb	r8, r1, #32
 800fdbe:	40cf      	lsrs	r7, r1
 800fdc0:	f105 0e04 	add.w	lr, r5, #4
 800fdc4:	4576      	cmp	r6, lr
 800fdc6:	46f4      	mov	ip, lr
 800fdc8:	d816      	bhi.n	800fdf8 <rshift+0x80>
 800fdca:	1a9a      	subs	r2, r3, r2
 800fdcc:	0092      	lsls	r2, r2, #2
 800fdce:	3a04      	subs	r2, #4
 800fdd0:	3501      	adds	r5, #1
 800fdd2:	42ae      	cmp	r6, r5
 800fdd4:	bf38      	it	cc
 800fdd6:	2200      	movcc	r2, #0
 800fdd8:	18a3      	adds	r3, r4, r2
 800fdda:	50a7      	str	r7, [r4, r2]
 800fddc:	b107      	cbz	r7, 800fde0 <rshift+0x68>
 800fdde:	3304      	adds	r3, #4
 800fde0:	42a3      	cmp	r3, r4
 800fde2:	eba3 0204 	sub.w	r2, r3, r4
 800fde6:	bf08      	it	eq
 800fde8:	2300      	moveq	r3, #0
 800fdea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fdee:	6102      	str	r2, [r0, #16]
 800fdf0:	bf08      	it	eq
 800fdf2:	6143      	streq	r3, [r0, #20]
 800fdf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdf8:	f8dc c000 	ldr.w	ip, [ip]
 800fdfc:	fa0c fc08 	lsl.w	ip, ip, r8
 800fe00:	ea4c 0707 	orr.w	r7, ip, r7
 800fe04:	f849 7b04 	str.w	r7, [r9], #4
 800fe08:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe0c:	40cf      	lsrs	r7, r1
 800fe0e:	e7d9      	b.n	800fdc4 <rshift+0x4c>
 800fe10:	f851 cb04 	ldr.w	ip, [r1], #4
 800fe14:	f847 cf04 	str.w	ip, [r7, #4]!
 800fe18:	e7c2      	b.n	800fda0 <rshift+0x28>
 800fe1a:	4623      	mov	r3, r4
 800fe1c:	e7e0      	b.n	800fde0 <rshift+0x68>

0800fe1e <__hexdig_fun>:
 800fe1e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fe22:	2b09      	cmp	r3, #9
 800fe24:	d802      	bhi.n	800fe2c <__hexdig_fun+0xe>
 800fe26:	3820      	subs	r0, #32
 800fe28:	b2c0      	uxtb	r0, r0
 800fe2a:	4770      	bx	lr
 800fe2c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fe30:	2b05      	cmp	r3, #5
 800fe32:	d801      	bhi.n	800fe38 <__hexdig_fun+0x1a>
 800fe34:	3847      	subs	r0, #71	; 0x47
 800fe36:	e7f7      	b.n	800fe28 <__hexdig_fun+0xa>
 800fe38:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fe3c:	2b05      	cmp	r3, #5
 800fe3e:	d801      	bhi.n	800fe44 <__hexdig_fun+0x26>
 800fe40:	3827      	subs	r0, #39	; 0x27
 800fe42:	e7f1      	b.n	800fe28 <__hexdig_fun+0xa>
 800fe44:	2000      	movs	r0, #0
 800fe46:	4770      	bx	lr

0800fe48 <__gethex>:
 800fe48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe4c:	b08b      	sub	sp, #44	; 0x2c
 800fe4e:	9305      	str	r3, [sp, #20]
 800fe50:	4bb2      	ldr	r3, [pc, #712]	; (801011c <__gethex+0x2d4>)
 800fe52:	9002      	str	r0, [sp, #8]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	468b      	mov	fp, r1
 800fe58:	4618      	mov	r0, r3
 800fe5a:	4690      	mov	r8, r2
 800fe5c:	9303      	str	r3, [sp, #12]
 800fe5e:	f7f0 f999 	bl	8000194 <strlen>
 800fe62:	4682      	mov	sl, r0
 800fe64:	9b03      	ldr	r3, [sp, #12]
 800fe66:	f8db 2000 	ldr.w	r2, [fp]
 800fe6a:	4403      	add	r3, r0
 800fe6c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fe70:	9306      	str	r3, [sp, #24]
 800fe72:	1c93      	adds	r3, r2, #2
 800fe74:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fe78:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fe7c:	32fe      	adds	r2, #254	; 0xfe
 800fe7e:	18d1      	adds	r1, r2, r3
 800fe80:	461f      	mov	r7, r3
 800fe82:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fe86:	9101      	str	r1, [sp, #4]
 800fe88:	2830      	cmp	r0, #48	; 0x30
 800fe8a:	d0f8      	beq.n	800fe7e <__gethex+0x36>
 800fe8c:	f7ff ffc7 	bl	800fe1e <__hexdig_fun>
 800fe90:	4604      	mov	r4, r0
 800fe92:	2800      	cmp	r0, #0
 800fe94:	d13a      	bne.n	800ff0c <__gethex+0xc4>
 800fe96:	4652      	mov	r2, sl
 800fe98:	4638      	mov	r0, r7
 800fe9a:	9903      	ldr	r1, [sp, #12]
 800fe9c:	f001 fa14 	bl	80112c8 <strncmp>
 800fea0:	4605      	mov	r5, r0
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d166      	bne.n	800ff74 <__gethex+0x12c>
 800fea6:	f817 000a 	ldrb.w	r0, [r7, sl]
 800feaa:	eb07 060a 	add.w	r6, r7, sl
 800feae:	f7ff ffb6 	bl	800fe1e <__hexdig_fun>
 800feb2:	2800      	cmp	r0, #0
 800feb4:	d060      	beq.n	800ff78 <__gethex+0x130>
 800feb6:	4633      	mov	r3, r6
 800feb8:	7818      	ldrb	r0, [r3, #0]
 800feba:	461f      	mov	r7, r3
 800febc:	2830      	cmp	r0, #48	; 0x30
 800febe:	f103 0301 	add.w	r3, r3, #1
 800fec2:	d0f9      	beq.n	800feb8 <__gethex+0x70>
 800fec4:	f7ff ffab 	bl	800fe1e <__hexdig_fun>
 800fec8:	2301      	movs	r3, #1
 800feca:	fab0 f480 	clz	r4, r0
 800fece:	4635      	mov	r5, r6
 800fed0:	0964      	lsrs	r4, r4, #5
 800fed2:	9301      	str	r3, [sp, #4]
 800fed4:	463a      	mov	r2, r7
 800fed6:	4616      	mov	r6, r2
 800fed8:	7830      	ldrb	r0, [r6, #0]
 800feda:	3201      	adds	r2, #1
 800fedc:	f7ff ff9f 	bl	800fe1e <__hexdig_fun>
 800fee0:	2800      	cmp	r0, #0
 800fee2:	d1f8      	bne.n	800fed6 <__gethex+0x8e>
 800fee4:	4652      	mov	r2, sl
 800fee6:	4630      	mov	r0, r6
 800fee8:	9903      	ldr	r1, [sp, #12]
 800feea:	f001 f9ed 	bl	80112c8 <strncmp>
 800feee:	b980      	cbnz	r0, 800ff12 <__gethex+0xca>
 800fef0:	b94d      	cbnz	r5, 800ff06 <__gethex+0xbe>
 800fef2:	eb06 050a 	add.w	r5, r6, sl
 800fef6:	462a      	mov	r2, r5
 800fef8:	4616      	mov	r6, r2
 800fefa:	7830      	ldrb	r0, [r6, #0]
 800fefc:	3201      	adds	r2, #1
 800fefe:	f7ff ff8e 	bl	800fe1e <__hexdig_fun>
 800ff02:	2800      	cmp	r0, #0
 800ff04:	d1f8      	bne.n	800fef8 <__gethex+0xb0>
 800ff06:	1bad      	subs	r5, r5, r6
 800ff08:	00ad      	lsls	r5, r5, #2
 800ff0a:	e004      	b.n	800ff16 <__gethex+0xce>
 800ff0c:	2400      	movs	r4, #0
 800ff0e:	4625      	mov	r5, r4
 800ff10:	e7e0      	b.n	800fed4 <__gethex+0x8c>
 800ff12:	2d00      	cmp	r5, #0
 800ff14:	d1f7      	bne.n	800ff06 <__gethex+0xbe>
 800ff16:	7833      	ldrb	r3, [r6, #0]
 800ff18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ff1c:	2b50      	cmp	r3, #80	; 0x50
 800ff1e:	d139      	bne.n	800ff94 <__gethex+0x14c>
 800ff20:	7873      	ldrb	r3, [r6, #1]
 800ff22:	2b2b      	cmp	r3, #43	; 0x2b
 800ff24:	d02a      	beq.n	800ff7c <__gethex+0x134>
 800ff26:	2b2d      	cmp	r3, #45	; 0x2d
 800ff28:	d02c      	beq.n	800ff84 <__gethex+0x13c>
 800ff2a:	f04f 0900 	mov.w	r9, #0
 800ff2e:	1c71      	adds	r1, r6, #1
 800ff30:	7808      	ldrb	r0, [r1, #0]
 800ff32:	f7ff ff74 	bl	800fe1e <__hexdig_fun>
 800ff36:	1e43      	subs	r3, r0, #1
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	2b18      	cmp	r3, #24
 800ff3c:	d82a      	bhi.n	800ff94 <__gethex+0x14c>
 800ff3e:	f1a0 0210 	sub.w	r2, r0, #16
 800ff42:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ff46:	f7ff ff6a 	bl	800fe1e <__hexdig_fun>
 800ff4a:	1e43      	subs	r3, r0, #1
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	2b18      	cmp	r3, #24
 800ff50:	d91b      	bls.n	800ff8a <__gethex+0x142>
 800ff52:	f1b9 0f00 	cmp.w	r9, #0
 800ff56:	d000      	beq.n	800ff5a <__gethex+0x112>
 800ff58:	4252      	negs	r2, r2
 800ff5a:	4415      	add	r5, r2
 800ff5c:	f8cb 1000 	str.w	r1, [fp]
 800ff60:	b1d4      	cbz	r4, 800ff98 <__gethex+0x150>
 800ff62:	9b01      	ldr	r3, [sp, #4]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	bf14      	ite	ne
 800ff68:	2700      	movne	r7, #0
 800ff6a:	2706      	moveq	r7, #6
 800ff6c:	4638      	mov	r0, r7
 800ff6e:	b00b      	add	sp, #44	; 0x2c
 800ff70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff74:	463e      	mov	r6, r7
 800ff76:	4625      	mov	r5, r4
 800ff78:	2401      	movs	r4, #1
 800ff7a:	e7cc      	b.n	800ff16 <__gethex+0xce>
 800ff7c:	f04f 0900 	mov.w	r9, #0
 800ff80:	1cb1      	adds	r1, r6, #2
 800ff82:	e7d5      	b.n	800ff30 <__gethex+0xe8>
 800ff84:	f04f 0901 	mov.w	r9, #1
 800ff88:	e7fa      	b.n	800ff80 <__gethex+0x138>
 800ff8a:	230a      	movs	r3, #10
 800ff8c:	fb03 0202 	mla	r2, r3, r2, r0
 800ff90:	3a10      	subs	r2, #16
 800ff92:	e7d6      	b.n	800ff42 <__gethex+0xfa>
 800ff94:	4631      	mov	r1, r6
 800ff96:	e7e1      	b.n	800ff5c <__gethex+0x114>
 800ff98:	4621      	mov	r1, r4
 800ff9a:	1bf3      	subs	r3, r6, r7
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	2b07      	cmp	r3, #7
 800ffa0:	dc0a      	bgt.n	800ffb8 <__gethex+0x170>
 800ffa2:	9802      	ldr	r0, [sp, #8]
 800ffa4:	f000 fa7a 	bl	801049c <_Balloc>
 800ffa8:	4604      	mov	r4, r0
 800ffaa:	b940      	cbnz	r0, 800ffbe <__gethex+0x176>
 800ffac:	4602      	mov	r2, r0
 800ffae:	21de      	movs	r1, #222	; 0xde
 800ffb0:	4b5b      	ldr	r3, [pc, #364]	; (8010120 <__gethex+0x2d8>)
 800ffb2:	485c      	ldr	r0, [pc, #368]	; (8010124 <__gethex+0x2dc>)
 800ffb4:	f7ff f834 	bl	800f020 <__assert_func>
 800ffb8:	3101      	adds	r1, #1
 800ffba:	105b      	asrs	r3, r3, #1
 800ffbc:	e7ef      	b.n	800ff9e <__gethex+0x156>
 800ffbe:	f04f 0b00 	mov.w	fp, #0
 800ffc2:	f100 0914 	add.w	r9, r0, #20
 800ffc6:	f1ca 0301 	rsb	r3, sl, #1
 800ffca:	f8cd 9010 	str.w	r9, [sp, #16]
 800ffce:	f8cd b004 	str.w	fp, [sp, #4]
 800ffd2:	9308      	str	r3, [sp, #32]
 800ffd4:	42b7      	cmp	r7, r6
 800ffd6:	d33f      	bcc.n	8010058 <__gethex+0x210>
 800ffd8:	9f04      	ldr	r7, [sp, #16]
 800ffda:	9b01      	ldr	r3, [sp, #4]
 800ffdc:	f847 3b04 	str.w	r3, [r7], #4
 800ffe0:	eba7 0709 	sub.w	r7, r7, r9
 800ffe4:	10bf      	asrs	r7, r7, #2
 800ffe6:	6127      	str	r7, [r4, #16]
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f000 fb49 	bl	8010680 <__hi0bits>
 800ffee:	017f      	lsls	r7, r7, #5
 800fff0:	f8d8 6000 	ldr.w	r6, [r8]
 800fff4:	1a3f      	subs	r7, r7, r0
 800fff6:	42b7      	cmp	r7, r6
 800fff8:	dd62      	ble.n	80100c0 <__gethex+0x278>
 800fffa:	1bbf      	subs	r7, r7, r6
 800fffc:	4639      	mov	r1, r7
 800fffe:	4620      	mov	r0, r4
 8010000:	f000 fee3 	bl	8010dca <__any_on>
 8010004:	4682      	mov	sl, r0
 8010006:	b1a8      	cbz	r0, 8010034 <__gethex+0x1ec>
 8010008:	f04f 0a01 	mov.w	sl, #1
 801000c:	1e7b      	subs	r3, r7, #1
 801000e:	1159      	asrs	r1, r3, #5
 8010010:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010014:	f003 021f 	and.w	r2, r3, #31
 8010018:	fa0a f202 	lsl.w	r2, sl, r2
 801001c:	420a      	tst	r2, r1
 801001e:	d009      	beq.n	8010034 <__gethex+0x1ec>
 8010020:	4553      	cmp	r3, sl
 8010022:	dd05      	ble.n	8010030 <__gethex+0x1e8>
 8010024:	4620      	mov	r0, r4
 8010026:	1eb9      	subs	r1, r7, #2
 8010028:	f000 fecf 	bl	8010dca <__any_on>
 801002c:	2800      	cmp	r0, #0
 801002e:	d144      	bne.n	80100ba <__gethex+0x272>
 8010030:	f04f 0a02 	mov.w	sl, #2
 8010034:	4639      	mov	r1, r7
 8010036:	4620      	mov	r0, r4
 8010038:	f7ff fe9e 	bl	800fd78 <rshift>
 801003c:	443d      	add	r5, r7
 801003e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010042:	42ab      	cmp	r3, r5
 8010044:	da4a      	bge.n	80100dc <__gethex+0x294>
 8010046:	4621      	mov	r1, r4
 8010048:	9802      	ldr	r0, [sp, #8]
 801004a:	f000 fa67 	bl	801051c <_Bfree>
 801004e:	2300      	movs	r3, #0
 8010050:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010052:	27a3      	movs	r7, #163	; 0xa3
 8010054:	6013      	str	r3, [r2, #0]
 8010056:	e789      	b.n	800ff6c <__gethex+0x124>
 8010058:	1e73      	subs	r3, r6, #1
 801005a:	9a06      	ldr	r2, [sp, #24]
 801005c:	9307      	str	r3, [sp, #28]
 801005e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010062:	4293      	cmp	r3, r2
 8010064:	d019      	beq.n	801009a <__gethex+0x252>
 8010066:	f1bb 0f20 	cmp.w	fp, #32
 801006a:	d107      	bne.n	801007c <__gethex+0x234>
 801006c:	9b04      	ldr	r3, [sp, #16]
 801006e:	9a01      	ldr	r2, [sp, #4]
 8010070:	f843 2b04 	str.w	r2, [r3], #4
 8010074:	9304      	str	r3, [sp, #16]
 8010076:	2300      	movs	r3, #0
 8010078:	469b      	mov	fp, r3
 801007a:	9301      	str	r3, [sp, #4]
 801007c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010080:	f7ff fecd 	bl	800fe1e <__hexdig_fun>
 8010084:	9b01      	ldr	r3, [sp, #4]
 8010086:	f000 000f 	and.w	r0, r0, #15
 801008a:	fa00 f00b 	lsl.w	r0, r0, fp
 801008e:	4303      	orrs	r3, r0
 8010090:	9301      	str	r3, [sp, #4]
 8010092:	f10b 0b04 	add.w	fp, fp, #4
 8010096:	9b07      	ldr	r3, [sp, #28]
 8010098:	e00d      	b.n	80100b6 <__gethex+0x26e>
 801009a:	9a08      	ldr	r2, [sp, #32]
 801009c:	1e73      	subs	r3, r6, #1
 801009e:	4413      	add	r3, r2
 80100a0:	42bb      	cmp	r3, r7
 80100a2:	d3e0      	bcc.n	8010066 <__gethex+0x21e>
 80100a4:	4618      	mov	r0, r3
 80100a6:	4652      	mov	r2, sl
 80100a8:	9903      	ldr	r1, [sp, #12]
 80100aa:	9309      	str	r3, [sp, #36]	; 0x24
 80100ac:	f001 f90c 	bl	80112c8 <strncmp>
 80100b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d1d7      	bne.n	8010066 <__gethex+0x21e>
 80100b6:	461e      	mov	r6, r3
 80100b8:	e78c      	b.n	800ffd4 <__gethex+0x18c>
 80100ba:	f04f 0a03 	mov.w	sl, #3
 80100be:	e7b9      	b.n	8010034 <__gethex+0x1ec>
 80100c0:	da09      	bge.n	80100d6 <__gethex+0x28e>
 80100c2:	1bf7      	subs	r7, r6, r7
 80100c4:	4621      	mov	r1, r4
 80100c6:	463a      	mov	r2, r7
 80100c8:	9802      	ldr	r0, [sp, #8]
 80100ca:	f000 fc3f 	bl	801094c <__lshift>
 80100ce:	4604      	mov	r4, r0
 80100d0:	1bed      	subs	r5, r5, r7
 80100d2:	f100 0914 	add.w	r9, r0, #20
 80100d6:	f04f 0a00 	mov.w	sl, #0
 80100da:	e7b0      	b.n	801003e <__gethex+0x1f6>
 80100dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80100e0:	42a8      	cmp	r0, r5
 80100e2:	dd72      	ble.n	80101ca <__gethex+0x382>
 80100e4:	1b45      	subs	r5, r0, r5
 80100e6:	42ae      	cmp	r6, r5
 80100e8:	dc35      	bgt.n	8010156 <__gethex+0x30e>
 80100ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	d029      	beq.n	8010146 <__gethex+0x2fe>
 80100f2:	2b03      	cmp	r3, #3
 80100f4:	d02b      	beq.n	801014e <__gethex+0x306>
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d11c      	bne.n	8010134 <__gethex+0x2ec>
 80100fa:	42ae      	cmp	r6, r5
 80100fc:	d11a      	bne.n	8010134 <__gethex+0x2ec>
 80100fe:	2e01      	cmp	r6, #1
 8010100:	d112      	bne.n	8010128 <__gethex+0x2e0>
 8010102:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010106:	9a05      	ldr	r2, [sp, #20]
 8010108:	2762      	movs	r7, #98	; 0x62
 801010a:	6013      	str	r3, [r2, #0]
 801010c:	2301      	movs	r3, #1
 801010e:	6123      	str	r3, [r4, #16]
 8010110:	f8c9 3000 	str.w	r3, [r9]
 8010114:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010116:	601c      	str	r4, [r3, #0]
 8010118:	e728      	b.n	800ff6c <__gethex+0x124>
 801011a:	bf00      	nop
 801011c:	08011e10 	.word	0x08011e10
 8010120:	08011d98 	.word	0x08011d98
 8010124:	08011da9 	.word	0x08011da9
 8010128:	4620      	mov	r0, r4
 801012a:	1e71      	subs	r1, r6, #1
 801012c:	f000 fe4d 	bl	8010dca <__any_on>
 8010130:	2800      	cmp	r0, #0
 8010132:	d1e6      	bne.n	8010102 <__gethex+0x2ba>
 8010134:	4621      	mov	r1, r4
 8010136:	9802      	ldr	r0, [sp, #8]
 8010138:	f000 f9f0 	bl	801051c <_Bfree>
 801013c:	2300      	movs	r3, #0
 801013e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010140:	2750      	movs	r7, #80	; 0x50
 8010142:	6013      	str	r3, [r2, #0]
 8010144:	e712      	b.n	800ff6c <__gethex+0x124>
 8010146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010148:	2b00      	cmp	r3, #0
 801014a:	d1f3      	bne.n	8010134 <__gethex+0x2ec>
 801014c:	e7d9      	b.n	8010102 <__gethex+0x2ba>
 801014e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010150:	2b00      	cmp	r3, #0
 8010152:	d1d6      	bne.n	8010102 <__gethex+0x2ba>
 8010154:	e7ee      	b.n	8010134 <__gethex+0x2ec>
 8010156:	1e6f      	subs	r7, r5, #1
 8010158:	f1ba 0f00 	cmp.w	sl, #0
 801015c:	d132      	bne.n	80101c4 <__gethex+0x37c>
 801015e:	b127      	cbz	r7, 801016a <__gethex+0x322>
 8010160:	4639      	mov	r1, r7
 8010162:	4620      	mov	r0, r4
 8010164:	f000 fe31 	bl	8010dca <__any_on>
 8010168:	4682      	mov	sl, r0
 801016a:	2101      	movs	r1, #1
 801016c:	117b      	asrs	r3, r7, #5
 801016e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010172:	f007 071f 	and.w	r7, r7, #31
 8010176:	fa01 f707 	lsl.w	r7, r1, r7
 801017a:	421f      	tst	r7, r3
 801017c:	f04f 0702 	mov.w	r7, #2
 8010180:	4629      	mov	r1, r5
 8010182:	4620      	mov	r0, r4
 8010184:	bf18      	it	ne
 8010186:	f04a 0a02 	orrne.w	sl, sl, #2
 801018a:	1b76      	subs	r6, r6, r5
 801018c:	f7ff fdf4 	bl	800fd78 <rshift>
 8010190:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010194:	f1ba 0f00 	cmp.w	sl, #0
 8010198:	d048      	beq.n	801022c <__gethex+0x3e4>
 801019a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801019e:	2b02      	cmp	r3, #2
 80101a0:	d015      	beq.n	80101ce <__gethex+0x386>
 80101a2:	2b03      	cmp	r3, #3
 80101a4:	d017      	beq.n	80101d6 <__gethex+0x38e>
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d109      	bne.n	80101be <__gethex+0x376>
 80101aa:	f01a 0f02 	tst.w	sl, #2
 80101ae:	d006      	beq.n	80101be <__gethex+0x376>
 80101b0:	f8d9 0000 	ldr.w	r0, [r9]
 80101b4:	ea4a 0a00 	orr.w	sl, sl, r0
 80101b8:	f01a 0f01 	tst.w	sl, #1
 80101bc:	d10e      	bne.n	80101dc <__gethex+0x394>
 80101be:	f047 0710 	orr.w	r7, r7, #16
 80101c2:	e033      	b.n	801022c <__gethex+0x3e4>
 80101c4:	f04f 0a01 	mov.w	sl, #1
 80101c8:	e7cf      	b.n	801016a <__gethex+0x322>
 80101ca:	2701      	movs	r7, #1
 80101cc:	e7e2      	b.n	8010194 <__gethex+0x34c>
 80101ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101d0:	f1c3 0301 	rsb	r3, r3, #1
 80101d4:	9315      	str	r3, [sp, #84]	; 0x54
 80101d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d0f0      	beq.n	80101be <__gethex+0x376>
 80101dc:	f04f 0c00 	mov.w	ip, #0
 80101e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80101e4:	f104 0314 	add.w	r3, r4, #20
 80101e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80101ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80101f0:	4618      	mov	r0, r3
 80101f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80101f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80101fa:	d01c      	beq.n	8010236 <__gethex+0x3ee>
 80101fc:	3201      	adds	r2, #1
 80101fe:	6002      	str	r2, [r0, #0]
 8010200:	2f02      	cmp	r7, #2
 8010202:	f104 0314 	add.w	r3, r4, #20
 8010206:	d13d      	bne.n	8010284 <__gethex+0x43c>
 8010208:	f8d8 2000 	ldr.w	r2, [r8]
 801020c:	3a01      	subs	r2, #1
 801020e:	42b2      	cmp	r2, r6
 8010210:	d10a      	bne.n	8010228 <__gethex+0x3e0>
 8010212:	2201      	movs	r2, #1
 8010214:	1171      	asrs	r1, r6, #5
 8010216:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801021a:	f006 061f 	and.w	r6, r6, #31
 801021e:	fa02 f606 	lsl.w	r6, r2, r6
 8010222:	421e      	tst	r6, r3
 8010224:	bf18      	it	ne
 8010226:	4617      	movne	r7, r2
 8010228:	f047 0720 	orr.w	r7, r7, #32
 801022c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801022e:	601c      	str	r4, [r3, #0]
 8010230:	9b05      	ldr	r3, [sp, #20]
 8010232:	601d      	str	r5, [r3, #0]
 8010234:	e69a      	b.n	800ff6c <__gethex+0x124>
 8010236:	4299      	cmp	r1, r3
 8010238:	f843 cc04 	str.w	ip, [r3, #-4]
 801023c:	d8d8      	bhi.n	80101f0 <__gethex+0x3a8>
 801023e:	68a3      	ldr	r3, [r4, #8]
 8010240:	459b      	cmp	fp, r3
 8010242:	db17      	blt.n	8010274 <__gethex+0x42c>
 8010244:	6861      	ldr	r1, [r4, #4]
 8010246:	9802      	ldr	r0, [sp, #8]
 8010248:	3101      	adds	r1, #1
 801024a:	f000 f927 	bl	801049c <_Balloc>
 801024e:	4681      	mov	r9, r0
 8010250:	b918      	cbnz	r0, 801025a <__gethex+0x412>
 8010252:	4602      	mov	r2, r0
 8010254:	2184      	movs	r1, #132	; 0x84
 8010256:	4b19      	ldr	r3, [pc, #100]	; (80102bc <__gethex+0x474>)
 8010258:	e6ab      	b.n	800ffb2 <__gethex+0x16a>
 801025a:	6922      	ldr	r2, [r4, #16]
 801025c:	f104 010c 	add.w	r1, r4, #12
 8010260:	3202      	adds	r2, #2
 8010262:	0092      	lsls	r2, r2, #2
 8010264:	300c      	adds	r0, #12
 8010266:	f7fd fbe9 	bl	800da3c <memcpy>
 801026a:	4621      	mov	r1, r4
 801026c:	9802      	ldr	r0, [sp, #8]
 801026e:	f000 f955 	bl	801051c <_Bfree>
 8010272:	464c      	mov	r4, r9
 8010274:	6923      	ldr	r3, [r4, #16]
 8010276:	1c5a      	adds	r2, r3, #1
 8010278:	6122      	str	r2, [r4, #16]
 801027a:	2201      	movs	r2, #1
 801027c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010280:	615a      	str	r2, [r3, #20]
 8010282:	e7bd      	b.n	8010200 <__gethex+0x3b8>
 8010284:	6922      	ldr	r2, [r4, #16]
 8010286:	455a      	cmp	r2, fp
 8010288:	dd0b      	ble.n	80102a2 <__gethex+0x45a>
 801028a:	2101      	movs	r1, #1
 801028c:	4620      	mov	r0, r4
 801028e:	f7ff fd73 	bl	800fd78 <rshift>
 8010292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010296:	3501      	adds	r5, #1
 8010298:	42ab      	cmp	r3, r5
 801029a:	f6ff aed4 	blt.w	8010046 <__gethex+0x1fe>
 801029e:	2701      	movs	r7, #1
 80102a0:	e7c2      	b.n	8010228 <__gethex+0x3e0>
 80102a2:	f016 061f 	ands.w	r6, r6, #31
 80102a6:	d0fa      	beq.n	801029e <__gethex+0x456>
 80102a8:	4453      	add	r3, sl
 80102aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80102ae:	f000 f9e7 	bl	8010680 <__hi0bits>
 80102b2:	f1c6 0620 	rsb	r6, r6, #32
 80102b6:	42b0      	cmp	r0, r6
 80102b8:	dbe7      	blt.n	801028a <__gethex+0x442>
 80102ba:	e7f0      	b.n	801029e <__gethex+0x456>
 80102bc:	08011d98 	.word	0x08011d98

080102c0 <L_shift>:
 80102c0:	f1c2 0208 	rsb	r2, r2, #8
 80102c4:	0092      	lsls	r2, r2, #2
 80102c6:	b570      	push	{r4, r5, r6, lr}
 80102c8:	f1c2 0620 	rsb	r6, r2, #32
 80102cc:	6843      	ldr	r3, [r0, #4]
 80102ce:	6804      	ldr	r4, [r0, #0]
 80102d0:	fa03 f506 	lsl.w	r5, r3, r6
 80102d4:	432c      	orrs	r4, r5
 80102d6:	40d3      	lsrs	r3, r2
 80102d8:	6004      	str	r4, [r0, #0]
 80102da:	f840 3f04 	str.w	r3, [r0, #4]!
 80102de:	4288      	cmp	r0, r1
 80102e0:	d3f4      	bcc.n	80102cc <L_shift+0xc>
 80102e2:	bd70      	pop	{r4, r5, r6, pc}

080102e4 <__match>:
 80102e4:	b530      	push	{r4, r5, lr}
 80102e6:	6803      	ldr	r3, [r0, #0]
 80102e8:	3301      	adds	r3, #1
 80102ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102ee:	b914      	cbnz	r4, 80102f6 <__match+0x12>
 80102f0:	6003      	str	r3, [r0, #0]
 80102f2:	2001      	movs	r0, #1
 80102f4:	bd30      	pop	{r4, r5, pc}
 80102f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80102fe:	2d19      	cmp	r5, #25
 8010300:	bf98      	it	ls
 8010302:	3220      	addls	r2, #32
 8010304:	42a2      	cmp	r2, r4
 8010306:	d0f0      	beq.n	80102ea <__match+0x6>
 8010308:	2000      	movs	r0, #0
 801030a:	e7f3      	b.n	80102f4 <__match+0x10>

0801030c <__hexnan>:
 801030c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010310:	2500      	movs	r5, #0
 8010312:	680b      	ldr	r3, [r1, #0]
 8010314:	4682      	mov	sl, r0
 8010316:	115e      	asrs	r6, r3, #5
 8010318:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801031c:	f013 031f 	ands.w	r3, r3, #31
 8010320:	bf18      	it	ne
 8010322:	3604      	addne	r6, #4
 8010324:	1f37      	subs	r7, r6, #4
 8010326:	46b9      	mov	r9, r7
 8010328:	463c      	mov	r4, r7
 801032a:	46ab      	mov	fp, r5
 801032c:	b087      	sub	sp, #28
 801032e:	4690      	mov	r8, r2
 8010330:	6802      	ldr	r2, [r0, #0]
 8010332:	9301      	str	r3, [sp, #4]
 8010334:	f846 5c04 	str.w	r5, [r6, #-4]
 8010338:	9502      	str	r5, [sp, #8]
 801033a:	7851      	ldrb	r1, [r2, #1]
 801033c:	1c53      	adds	r3, r2, #1
 801033e:	9303      	str	r3, [sp, #12]
 8010340:	b341      	cbz	r1, 8010394 <__hexnan+0x88>
 8010342:	4608      	mov	r0, r1
 8010344:	9205      	str	r2, [sp, #20]
 8010346:	9104      	str	r1, [sp, #16]
 8010348:	f7ff fd69 	bl	800fe1e <__hexdig_fun>
 801034c:	2800      	cmp	r0, #0
 801034e:	d14f      	bne.n	80103f0 <__hexnan+0xe4>
 8010350:	9904      	ldr	r1, [sp, #16]
 8010352:	9a05      	ldr	r2, [sp, #20]
 8010354:	2920      	cmp	r1, #32
 8010356:	d818      	bhi.n	801038a <__hexnan+0x7e>
 8010358:	9b02      	ldr	r3, [sp, #8]
 801035a:	459b      	cmp	fp, r3
 801035c:	dd13      	ble.n	8010386 <__hexnan+0x7a>
 801035e:	454c      	cmp	r4, r9
 8010360:	d206      	bcs.n	8010370 <__hexnan+0x64>
 8010362:	2d07      	cmp	r5, #7
 8010364:	dc04      	bgt.n	8010370 <__hexnan+0x64>
 8010366:	462a      	mov	r2, r5
 8010368:	4649      	mov	r1, r9
 801036a:	4620      	mov	r0, r4
 801036c:	f7ff ffa8 	bl	80102c0 <L_shift>
 8010370:	4544      	cmp	r4, r8
 8010372:	d950      	bls.n	8010416 <__hexnan+0x10a>
 8010374:	2300      	movs	r3, #0
 8010376:	f1a4 0904 	sub.w	r9, r4, #4
 801037a:	f844 3c04 	str.w	r3, [r4, #-4]
 801037e:	461d      	mov	r5, r3
 8010380:	464c      	mov	r4, r9
 8010382:	f8cd b008 	str.w	fp, [sp, #8]
 8010386:	9a03      	ldr	r2, [sp, #12]
 8010388:	e7d7      	b.n	801033a <__hexnan+0x2e>
 801038a:	2929      	cmp	r1, #41	; 0x29
 801038c:	d156      	bne.n	801043c <__hexnan+0x130>
 801038e:	3202      	adds	r2, #2
 8010390:	f8ca 2000 	str.w	r2, [sl]
 8010394:	f1bb 0f00 	cmp.w	fp, #0
 8010398:	d050      	beq.n	801043c <__hexnan+0x130>
 801039a:	454c      	cmp	r4, r9
 801039c:	d206      	bcs.n	80103ac <__hexnan+0xa0>
 801039e:	2d07      	cmp	r5, #7
 80103a0:	dc04      	bgt.n	80103ac <__hexnan+0xa0>
 80103a2:	462a      	mov	r2, r5
 80103a4:	4649      	mov	r1, r9
 80103a6:	4620      	mov	r0, r4
 80103a8:	f7ff ff8a 	bl	80102c0 <L_shift>
 80103ac:	4544      	cmp	r4, r8
 80103ae:	d934      	bls.n	801041a <__hexnan+0x10e>
 80103b0:	4623      	mov	r3, r4
 80103b2:	f1a8 0204 	sub.w	r2, r8, #4
 80103b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80103ba:	429f      	cmp	r7, r3
 80103bc:	f842 1f04 	str.w	r1, [r2, #4]!
 80103c0:	d2f9      	bcs.n	80103b6 <__hexnan+0xaa>
 80103c2:	1b3b      	subs	r3, r7, r4
 80103c4:	f023 0303 	bic.w	r3, r3, #3
 80103c8:	3304      	adds	r3, #4
 80103ca:	3401      	adds	r4, #1
 80103cc:	3e03      	subs	r6, #3
 80103ce:	42b4      	cmp	r4, r6
 80103d0:	bf88      	it	hi
 80103d2:	2304      	movhi	r3, #4
 80103d4:	2200      	movs	r2, #0
 80103d6:	4443      	add	r3, r8
 80103d8:	f843 2b04 	str.w	r2, [r3], #4
 80103dc:	429f      	cmp	r7, r3
 80103de:	d2fb      	bcs.n	80103d8 <__hexnan+0xcc>
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	b91b      	cbnz	r3, 80103ec <__hexnan+0xe0>
 80103e4:	4547      	cmp	r7, r8
 80103e6:	d127      	bne.n	8010438 <__hexnan+0x12c>
 80103e8:	2301      	movs	r3, #1
 80103ea:	603b      	str	r3, [r7, #0]
 80103ec:	2005      	movs	r0, #5
 80103ee:	e026      	b.n	801043e <__hexnan+0x132>
 80103f0:	3501      	adds	r5, #1
 80103f2:	2d08      	cmp	r5, #8
 80103f4:	f10b 0b01 	add.w	fp, fp, #1
 80103f8:	dd06      	ble.n	8010408 <__hexnan+0xfc>
 80103fa:	4544      	cmp	r4, r8
 80103fc:	d9c3      	bls.n	8010386 <__hexnan+0x7a>
 80103fe:	2300      	movs	r3, #0
 8010400:	2501      	movs	r5, #1
 8010402:	f844 3c04 	str.w	r3, [r4, #-4]
 8010406:	3c04      	subs	r4, #4
 8010408:	6822      	ldr	r2, [r4, #0]
 801040a:	f000 000f 	and.w	r0, r0, #15
 801040e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010412:	6022      	str	r2, [r4, #0]
 8010414:	e7b7      	b.n	8010386 <__hexnan+0x7a>
 8010416:	2508      	movs	r5, #8
 8010418:	e7b5      	b.n	8010386 <__hexnan+0x7a>
 801041a:	9b01      	ldr	r3, [sp, #4]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d0df      	beq.n	80103e0 <__hexnan+0xd4>
 8010420:	f04f 32ff 	mov.w	r2, #4294967295
 8010424:	f1c3 0320 	rsb	r3, r3, #32
 8010428:	fa22 f303 	lsr.w	r3, r2, r3
 801042c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010430:	401a      	ands	r2, r3
 8010432:	f846 2c04 	str.w	r2, [r6, #-4]
 8010436:	e7d3      	b.n	80103e0 <__hexnan+0xd4>
 8010438:	3f04      	subs	r7, #4
 801043a:	e7d1      	b.n	80103e0 <__hexnan+0xd4>
 801043c:	2004      	movs	r0, #4
 801043e:	b007      	add	sp, #28
 8010440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010444 <_localeconv_r>:
 8010444:	4800      	ldr	r0, [pc, #0]	; (8010448 <_localeconv_r+0x4>)
 8010446:	4770      	bx	lr
 8010448:	2000066c 	.word	0x2000066c

0801044c <malloc>:
 801044c:	4b02      	ldr	r3, [pc, #8]	; (8010458 <malloc+0xc>)
 801044e:	4601      	mov	r1, r0
 8010450:	6818      	ldr	r0, [r3, #0]
 8010452:	f000 bd57 	b.w	8010f04 <_malloc_r>
 8010456:	bf00      	nop
 8010458:	20000514 	.word	0x20000514

0801045c <__ascii_mbtowc>:
 801045c:	b082      	sub	sp, #8
 801045e:	b901      	cbnz	r1, 8010462 <__ascii_mbtowc+0x6>
 8010460:	a901      	add	r1, sp, #4
 8010462:	b142      	cbz	r2, 8010476 <__ascii_mbtowc+0x1a>
 8010464:	b14b      	cbz	r3, 801047a <__ascii_mbtowc+0x1e>
 8010466:	7813      	ldrb	r3, [r2, #0]
 8010468:	600b      	str	r3, [r1, #0]
 801046a:	7812      	ldrb	r2, [r2, #0]
 801046c:	1e10      	subs	r0, r2, #0
 801046e:	bf18      	it	ne
 8010470:	2001      	movne	r0, #1
 8010472:	b002      	add	sp, #8
 8010474:	4770      	bx	lr
 8010476:	4610      	mov	r0, r2
 8010478:	e7fb      	b.n	8010472 <__ascii_mbtowc+0x16>
 801047a:	f06f 0001 	mvn.w	r0, #1
 801047e:	e7f8      	b.n	8010472 <__ascii_mbtowc+0x16>

08010480 <memchr>:
 8010480:	4603      	mov	r3, r0
 8010482:	b510      	push	{r4, lr}
 8010484:	b2c9      	uxtb	r1, r1
 8010486:	4402      	add	r2, r0
 8010488:	4293      	cmp	r3, r2
 801048a:	4618      	mov	r0, r3
 801048c:	d101      	bne.n	8010492 <memchr+0x12>
 801048e:	2000      	movs	r0, #0
 8010490:	e003      	b.n	801049a <memchr+0x1a>
 8010492:	7804      	ldrb	r4, [r0, #0]
 8010494:	3301      	adds	r3, #1
 8010496:	428c      	cmp	r4, r1
 8010498:	d1f6      	bne.n	8010488 <memchr+0x8>
 801049a:	bd10      	pop	{r4, pc}

0801049c <_Balloc>:
 801049c:	b570      	push	{r4, r5, r6, lr}
 801049e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80104a0:	4604      	mov	r4, r0
 80104a2:	460d      	mov	r5, r1
 80104a4:	b976      	cbnz	r6, 80104c4 <_Balloc+0x28>
 80104a6:	2010      	movs	r0, #16
 80104a8:	f7ff ffd0 	bl	801044c <malloc>
 80104ac:	4602      	mov	r2, r0
 80104ae:	6260      	str	r0, [r4, #36]	; 0x24
 80104b0:	b920      	cbnz	r0, 80104bc <_Balloc+0x20>
 80104b2:	2166      	movs	r1, #102	; 0x66
 80104b4:	4b17      	ldr	r3, [pc, #92]	; (8010514 <_Balloc+0x78>)
 80104b6:	4818      	ldr	r0, [pc, #96]	; (8010518 <_Balloc+0x7c>)
 80104b8:	f7fe fdb2 	bl	800f020 <__assert_func>
 80104bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104c0:	6006      	str	r6, [r0, #0]
 80104c2:	60c6      	str	r6, [r0, #12]
 80104c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80104c6:	68f3      	ldr	r3, [r6, #12]
 80104c8:	b183      	cbz	r3, 80104ec <_Balloc+0x50>
 80104ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104cc:	68db      	ldr	r3, [r3, #12]
 80104ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104d2:	b9b8      	cbnz	r0, 8010504 <_Balloc+0x68>
 80104d4:	2101      	movs	r1, #1
 80104d6:	fa01 f605 	lsl.w	r6, r1, r5
 80104da:	1d72      	adds	r2, r6, #5
 80104dc:	4620      	mov	r0, r4
 80104de:	0092      	lsls	r2, r2, #2
 80104e0:	f000 fc94 	bl	8010e0c <_calloc_r>
 80104e4:	b160      	cbz	r0, 8010500 <_Balloc+0x64>
 80104e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80104ea:	e00e      	b.n	801050a <_Balloc+0x6e>
 80104ec:	2221      	movs	r2, #33	; 0x21
 80104ee:	2104      	movs	r1, #4
 80104f0:	4620      	mov	r0, r4
 80104f2:	f000 fc8b 	bl	8010e0c <_calloc_r>
 80104f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104f8:	60f0      	str	r0, [r6, #12]
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1e4      	bne.n	80104ca <_Balloc+0x2e>
 8010500:	2000      	movs	r0, #0
 8010502:	bd70      	pop	{r4, r5, r6, pc}
 8010504:	6802      	ldr	r2, [r0, #0]
 8010506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801050a:	2300      	movs	r3, #0
 801050c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010510:	e7f7      	b.n	8010502 <_Balloc+0x66>
 8010512:	bf00      	nop
 8010514:	08011c80 	.word	0x08011c80
 8010518:	08011e24 	.word	0x08011e24

0801051c <_Bfree>:
 801051c:	b570      	push	{r4, r5, r6, lr}
 801051e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010520:	4605      	mov	r5, r0
 8010522:	460c      	mov	r4, r1
 8010524:	b976      	cbnz	r6, 8010544 <_Bfree+0x28>
 8010526:	2010      	movs	r0, #16
 8010528:	f7ff ff90 	bl	801044c <malloc>
 801052c:	4602      	mov	r2, r0
 801052e:	6268      	str	r0, [r5, #36]	; 0x24
 8010530:	b920      	cbnz	r0, 801053c <_Bfree+0x20>
 8010532:	218a      	movs	r1, #138	; 0x8a
 8010534:	4b08      	ldr	r3, [pc, #32]	; (8010558 <_Bfree+0x3c>)
 8010536:	4809      	ldr	r0, [pc, #36]	; (801055c <_Bfree+0x40>)
 8010538:	f7fe fd72 	bl	800f020 <__assert_func>
 801053c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010540:	6006      	str	r6, [r0, #0]
 8010542:	60c6      	str	r6, [r0, #12]
 8010544:	b13c      	cbz	r4, 8010556 <_Bfree+0x3a>
 8010546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010548:	6862      	ldr	r2, [r4, #4]
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010550:	6021      	str	r1, [r4, #0]
 8010552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010556:	bd70      	pop	{r4, r5, r6, pc}
 8010558:	08011c80 	.word	0x08011c80
 801055c:	08011e24 	.word	0x08011e24

08010560 <__multadd>:
 8010560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010564:	4607      	mov	r7, r0
 8010566:	460c      	mov	r4, r1
 8010568:	461e      	mov	r6, r3
 801056a:	2000      	movs	r0, #0
 801056c:	690d      	ldr	r5, [r1, #16]
 801056e:	f101 0c14 	add.w	ip, r1, #20
 8010572:	f8dc 3000 	ldr.w	r3, [ip]
 8010576:	3001      	adds	r0, #1
 8010578:	b299      	uxth	r1, r3
 801057a:	fb02 6101 	mla	r1, r2, r1, r6
 801057e:	0c1e      	lsrs	r6, r3, #16
 8010580:	0c0b      	lsrs	r3, r1, #16
 8010582:	fb02 3306 	mla	r3, r2, r6, r3
 8010586:	b289      	uxth	r1, r1
 8010588:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801058c:	4285      	cmp	r5, r0
 801058e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010592:	f84c 1b04 	str.w	r1, [ip], #4
 8010596:	dcec      	bgt.n	8010572 <__multadd+0x12>
 8010598:	b30e      	cbz	r6, 80105de <__multadd+0x7e>
 801059a:	68a3      	ldr	r3, [r4, #8]
 801059c:	42ab      	cmp	r3, r5
 801059e:	dc19      	bgt.n	80105d4 <__multadd+0x74>
 80105a0:	6861      	ldr	r1, [r4, #4]
 80105a2:	4638      	mov	r0, r7
 80105a4:	3101      	adds	r1, #1
 80105a6:	f7ff ff79 	bl	801049c <_Balloc>
 80105aa:	4680      	mov	r8, r0
 80105ac:	b928      	cbnz	r0, 80105ba <__multadd+0x5a>
 80105ae:	4602      	mov	r2, r0
 80105b0:	21b5      	movs	r1, #181	; 0xb5
 80105b2:	4b0c      	ldr	r3, [pc, #48]	; (80105e4 <__multadd+0x84>)
 80105b4:	480c      	ldr	r0, [pc, #48]	; (80105e8 <__multadd+0x88>)
 80105b6:	f7fe fd33 	bl	800f020 <__assert_func>
 80105ba:	6922      	ldr	r2, [r4, #16]
 80105bc:	f104 010c 	add.w	r1, r4, #12
 80105c0:	3202      	adds	r2, #2
 80105c2:	0092      	lsls	r2, r2, #2
 80105c4:	300c      	adds	r0, #12
 80105c6:	f7fd fa39 	bl	800da3c <memcpy>
 80105ca:	4621      	mov	r1, r4
 80105cc:	4638      	mov	r0, r7
 80105ce:	f7ff ffa5 	bl	801051c <_Bfree>
 80105d2:	4644      	mov	r4, r8
 80105d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80105d8:	3501      	adds	r5, #1
 80105da:	615e      	str	r6, [r3, #20]
 80105dc:	6125      	str	r5, [r4, #16]
 80105de:	4620      	mov	r0, r4
 80105e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105e4:	08011d98 	.word	0x08011d98
 80105e8:	08011e24 	.word	0x08011e24

080105ec <__s2b>:
 80105ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105f0:	4615      	mov	r5, r2
 80105f2:	2209      	movs	r2, #9
 80105f4:	461f      	mov	r7, r3
 80105f6:	3308      	adds	r3, #8
 80105f8:	460c      	mov	r4, r1
 80105fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80105fe:	4606      	mov	r6, r0
 8010600:	2201      	movs	r2, #1
 8010602:	2100      	movs	r1, #0
 8010604:	429a      	cmp	r2, r3
 8010606:	db09      	blt.n	801061c <__s2b+0x30>
 8010608:	4630      	mov	r0, r6
 801060a:	f7ff ff47 	bl	801049c <_Balloc>
 801060e:	b940      	cbnz	r0, 8010622 <__s2b+0x36>
 8010610:	4602      	mov	r2, r0
 8010612:	21ce      	movs	r1, #206	; 0xce
 8010614:	4b18      	ldr	r3, [pc, #96]	; (8010678 <__s2b+0x8c>)
 8010616:	4819      	ldr	r0, [pc, #100]	; (801067c <__s2b+0x90>)
 8010618:	f7fe fd02 	bl	800f020 <__assert_func>
 801061c:	0052      	lsls	r2, r2, #1
 801061e:	3101      	adds	r1, #1
 8010620:	e7f0      	b.n	8010604 <__s2b+0x18>
 8010622:	9b08      	ldr	r3, [sp, #32]
 8010624:	2d09      	cmp	r5, #9
 8010626:	6143      	str	r3, [r0, #20]
 8010628:	f04f 0301 	mov.w	r3, #1
 801062c:	6103      	str	r3, [r0, #16]
 801062e:	dd16      	ble.n	801065e <__s2b+0x72>
 8010630:	f104 0909 	add.w	r9, r4, #9
 8010634:	46c8      	mov	r8, r9
 8010636:	442c      	add	r4, r5
 8010638:	f818 3b01 	ldrb.w	r3, [r8], #1
 801063c:	4601      	mov	r1, r0
 801063e:	220a      	movs	r2, #10
 8010640:	4630      	mov	r0, r6
 8010642:	3b30      	subs	r3, #48	; 0x30
 8010644:	f7ff ff8c 	bl	8010560 <__multadd>
 8010648:	45a0      	cmp	r8, r4
 801064a:	d1f5      	bne.n	8010638 <__s2b+0x4c>
 801064c:	f1a5 0408 	sub.w	r4, r5, #8
 8010650:	444c      	add	r4, r9
 8010652:	1b2d      	subs	r5, r5, r4
 8010654:	1963      	adds	r3, r4, r5
 8010656:	42bb      	cmp	r3, r7
 8010658:	db04      	blt.n	8010664 <__s2b+0x78>
 801065a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801065e:	2509      	movs	r5, #9
 8010660:	340a      	adds	r4, #10
 8010662:	e7f6      	b.n	8010652 <__s2b+0x66>
 8010664:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010668:	4601      	mov	r1, r0
 801066a:	220a      	movs	r2, #10
 801066c:	4630      	mov	r0, r6
 801066e:	3b30      	subs	r3, #48	; 0x30
 8010670:	f7ff ff76 	bl	8010560 <__multadd>
 8010674:	e7ee      	b.n	8010654 <__s2b+0x68>
 8010676:	bf00      	nop
 8010678:	08011d98 	.word	0x08011d98
 801067c:	08011e24 	.word	0x08011e24

08010680 <__hi0bits>:
 8010680:	0c02      	lsrs	r2, r0, #16
 8010682:	0412      	lsls	r2, r2, #16
 8010684:	4603      	mov	r3, r0
 8010686:	b9ca      	cbnz	r2, 80106bc <__hi0bits+0x3c>
 8010688:	0403      	lsls	r3, r0, #16
 801068a:	2010      	movs	r0, #16
 801068c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010690:	bf04      	itt	eq
 8010692:	021b      	lsleq	r3, r3, #8
 8010694:	3008      	addeq	r0, #8
 8010696:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801069a:	bf04      	itt	eq
 801069c:	011b      	lsleq	r3, r3, #4
 801069e:	3004      	addeq	r0, #4
 80106a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80106a4:	bf04      	itt	eq
 80106a6:	009b      	lsleq	r3, r3, #2
 80106a8:	3002      	addeq	r0, #2
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	db05      	blt.n	80106ba <__hi0bits+0x3a>
 80106ae:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80106b2:	f100 0001 	add.w	r0, r0, #1
 80106b6:	bf08      	it	eq
 80106b8:	2020      	moveq	r0, #32
 80106ba:	4770      	bx	lr
 80106bc:	2000      	movs	r0, #0
 80106be:	e7e5      	b.n	801068c <__hi0bits+0xc>

080106c0 <__lo0bits>:
 80106c0:	6803      	ldr	r3, [r0, #0]
 80106c2:	4602      	mov	r2, r0
 80106c4:	f013 0007 	ands.w	r0, r3, #7
 80106c8:	d00b      	beq.n	80106e2 <__lo0bits+0x22>
 80106ca:	07d9      	lsls	r1, r3, #31
 80106cc:	d421      	bmi.n	8010712 <__lo0bits+0x52>
 80106ce:	0798      	lsls	r0, r3, #30
 80106d0:	bf49      	itett	mi
 80106d2:	085b      	lsrmi	r3, r3, #1
 80106d4:	089b      	lsrpl	r3, r3, #2
 80106d6:	2001      	movmi	r0, #1
 80106d8:	6013      	strmi	r3, [r2, #0]
 80106da:	bf5c      	itt	pl
 80106dc:	2002      	movpl	r0, #2
 80106de:	6013      	strpl	r3, [r2, #0]
 80106e0:	4770      	bx	lr
 80106e2:	b299      	uxth	r1, r3
 80106e4:	b909      	cbnz	r1, 80106ea <__lo0bits+0x2a>
 80106e6:	2010      	movs	r0, #16
 80106e8:	0c1b      	lsrs	r3, r3, #16
 80106ea:	b2d9      	uxtb	r1, r3
 80106ec:	b909      	cbnz	r1, 80106f2 <__lo0bits+0x32>
 80106ee:	3008      	adds	r0, #8
 80106f0:	0a1b      	lsrs	r3, r3, #8
 80106f2:	0719      	lsls	r1, r3, #28
 80106f4:	bf04      	itt	eq
 80106f6:	091b      	lsreq	r3, r3, #4
 80106f8:	3004      	addeq	r0, #4
 80106fa:	0799      	lsls	r1, r3, #30
 80106fc:	bf04      	itt	eq
 80106fe:	089b      	lsreq	r3, r3, #2
 8010700:	3002      	addeq	r0, #2
 8010702:	07d9      	lsls	r1, r3, #31
 8010704:	d403      	bmi.n	801070e <__lo0bits+0x4e>
 8010706:	085b      	lsrs	r3, r3, #1
 8010708:	f100 0001 	add.w	r0, r0, #1
 801070c:	d003      	beq.n	8010716 <__lo0bits+0x56>
 801070e:	6013      	str	r3, [r2, #0]
 8010710:	4770      	bx	lr
 8010712:	2000      	movs	r0, #0
 8010714:	4770      	bx	lr
 8010716:	2020      	movs	r0, #32
 8010718:	4770      	bx	lr
	...

0801071c <__i2b>:
 801071c:	b510      	push	{r4, lr}
 801071e:	460c      	mov	r4, r1
 8010720:	2101      	movs	r1, #1
 8010722:	f7ff febb 	bl	801049c <_Balloc>
 8010726:	4602      	mov	r2, r0
 8010728:	b928      	cbnz	r0, 8010736 <__i2b+0x1a>
 801072a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801072e:	4b04      	ldr	r3, [pc, #16]	; (8010740 <__i2b+0x24>)
 8010730:	4804      	ldr	r0, [pc, #16]	; (8010744 <__i2b+0x28>)
 8010732:	f7fe fc75 	bl	800f020 <__assert_func>
 8010736:	2301      	movs	r3, #1
 8010738:	6144      	str	r4, [r0, #20]
 801073a:	6103      	str	r3, [r0, #16]
 801073c:	bd10      	pop	{r4, pc}
 801073e:	bf00      	nop
 8010740:	08011d98 	.word	0x08011d98
 8010744:	08011e24 	.word	0x08011e24

08010748 <__multiply>:
 8010748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801074c:	4691      	mov	r9, r2
 801074e:	690a      	ldr	r2, [r1, #16]
 8010750:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010754:	460c      	mov	r4, r1
 8010756:	429a      	cmp	r2, r3
 8010758:	bfbe      	ittt	lt
 801075a:	460b      	movlt	r3, r1
 801075c:	464c      	movlt	r4, r9
 801075e:	4699      	movlt	r9, r3
 8010760:	6927      	ldr	r7, [r4, #16]
 8010762:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010766:	68a3      	ldr	r3, [r4, #8]
 8010768:	6861      	ldr	r1, [r4, #4]
 801076a:	eb07 060a 	add.w	r6, r7, sl
 801076e:	42b3      	cmp	r3, r6
 8010770:	b085      	sub	sp, #20
 8010772:	bfb8      	it	lt
 8010774:	3101      	addlt	r1, #1
 8010776:	f7ff fe91 	bl	801049c <_Balloc>
 801077a:	b930      	cbnz	r0, 801078a <__multiply+0x42>
 801077c:	4602      	mov	r2, r0
 801077e:	f240 115d 	movw	r1, #349	; 0x15d
 8010782:	4b43      	ldr	r3, [pc, #268]	; (8010890 <__multiply+0x148>)
 8010784:	4843      	ldr	r0, [pc, #268]	; (8010894 <__multiply+0x14c>)
 8010786:	f7fe fc4b 	bl	800f020 <__assert_func>
 801078a:	f100 0514 	add.w	r5, r0, #20
 801078e:	462b      	mov	r3, r5
 8010790:	2200      	movs	r2, #0
 8010792:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010796:	4543      	cmp	r3, r8
 8010798:	d321      	bcc.n	80107de <__multiply+0x96>
 801079a:	f104 0314 	add.w	r3, r4, #20
 801079e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80107a2:	f109 0314 	add.w	r3, r9, #20
 80107a6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80107aa:	9202      	str	r2, [sp, #8]
 80107ac:	1b3a      	subs	r2, r7, r4
 80107ae:	3a15      	subs	r2, #21
 80107b0:	f022 0203 	bic.w	r2, r2, #3
 80107b4:	3204      	adds	r2, #4
 80107b6:	f104 0115 	add.w	r1, r4, #21
 80107ba:	428f      	cmp	r7, r1
 80107bc:	bf38      	it	cc
 80107be:	2204      	movcc	r2, #4
 80107c0:	9201      	str	r2, [sp, #4]
 80107c2:	9a02      	ldr	r2, [sp, #8]
 80107c4:	9303      	str	r3, [sp, #12]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d80c      	bhi.n	80107e4 <__multiply+0x9c>
 80107ca:	2e00      	cmp	r6, #0
 80107cc:	dd03      	ble.n	80107d6 <__multiply+0x8e>
 80107ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d059      	beq.n	801088a <__multiply+0x142>
 80107d6:	6106      	str	r6, [r0, #16]
 80107d8:	b005      	add	sp, #20
 80107da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107de:	f843 2b04 	str.w	r2, [r3], #4
 80107e2:	e7d8      	b.n	8010796 <__multiply+0x4e>
 80107e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80107e8:	f1ba 0f00 	cmp.w	sl, #0
 80107ec:	d023      	beq.n	8010836 <__multiply+0xee>
 80107ee:	46a9      	mov	r9, r5
 80107f0:	f04f 0c00 	mov.w	ip, #0
 80107f4:	f104 0e14 	add.w	lr, r4, #20
 80107f8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80107fc:	f8d9 1000 	ldr.w	r1, [r9]
 8010800:	fa1f fb82 	uxth.w	fp, r2
 8010804:	b289      	uxth	r1, r1
 8010806:	fb0a 110b 	mla	r1, sl, fp, r1
 801080a:	4461      	add	r1, ip
 801080c:	f8d9 c000 	ldr.w	ip, [r9]
 8010810:	0c12      	lsrs	r2, r2, #16
 8010812:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010816:	fb0a c202 	mla	r2, sl, r2, ip
 801081a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801081e:	b289      	uxth	r1, r1
 8010820:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010824:	4577      	cmp	r7, lr
 8010826:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801082a:	f849 1b04 	str.w	r1, [r9], #4
 801082e:	d8e3      	bhi.n	80107f8 <__multiply+0xb0>
 8010830:	9a01      	ldr	r2, [sp, #4]
 8010832:	f845 c002 	str.w	ip, [r5, r2]
 8010836:	9a03      	ldr	r2, [sp, #12]
 8010838:	3304      	adds	r3, #4
 801083a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801083e:	f1b9 0f00 	cmp.w	r9, #0
 8010842:	d020      	beq.n	8010886 <__multiply+0x13e>
 8010844:	46ae      	mov	lr, r5
 8010846:	f04f 0a00 	mov.w	sl, #0
 801084a:	6829      	ldr	r1, [r5, #0]
 801084c:	f104 0c14 	add.w	ip, r4, #20
 8010850:	f8bc b000 	ldrh.w	fp, [ip]
 8010854:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010858:	b289      	uxth	r1, r1
 801085a:	fb09 220b 	mla	r2, r9, fp, r2
 801085e:	4492      	add	sl, r2
 8010860:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010864:	f84e 1b04 	str.w	r1, [lr], #4
 8010868:	f85c 2b04 	ldr.w	r2, [ip], #4
 801086c:	f8be 1000 	ldrh.w	r1, [lr]
 8010870:	0c12      	lsrs	r2, r2, #16
 8010872:	fb09 1102 	mla	r1, r9, r2, r1
 8010876:	4567      	cmp	r7, ip
 8010878:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801087c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010880:	d8e6      	bhi.n	8010850 <__multiply+0x108>
 8010882:	9a01      	ldr	r2, [sp, #4]
 8010884:	50a9      	str	r1, [r5, r2]
 8010886:	3504      	adds	r5, #4
 8010888:	e79b      	b.n	80107c2 <__multiply+0x7a>
 801088a:	3e01      	subs	r6, #1
 801088c:	e79d      	b.n	80107ca <__multiply+0x82>
 801088e:	bf00      	nop
 8010890:	08011d98 	.word	0x08011d98
 8010894:	08011e24 	.word	0x08011e24

08010898 <__pow5mult>:
 8010898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801089c:	4615      	mov	r5, r2
 801089e:	f012 0203 	ands.w	r2, r2, #3
 80108a2:	4606      	mov	r6, r0
 80108a4:	460f      	mov	r7, r1
 80108a6:	d007      	beq.n	80108b8 <__pow5mult+0x20>
 80108a8:	4c25      	ldr	r4, [pc, #148]	; (8010940 <__pow5mult+0xa8>)
 80108aa:	3a01      	subs	r2, #1
 80108ac:	2300      	movs	r3, #0
 80108ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108b2:	f7ff fe55 	bl	8010560 <__multadd>
 80108b6:	4607      	mov	r7, r0
 80108b8:	10ad      	asrs	r5, r5, #2
 80108ba:	d03d      	beq.n	8010938 <__pow5mult+0xa0>
 80108bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80108be:	b97c      	cbnz	r4, 80108e0 <__pow5mult+0x48>
 80108c0:	2010      	movs	r0, #16
 80108c2:	f7ff fdc3 	bl	801044c <malloc>
 80108c6:	4602      	mov	r2, r0
 80108c8:	6270      	str	r0, [r6, #36]	; 0x24
 80108ca:	b928      	cbnz	r0, 80108d8 <__pow5mult+0x40>
 80108cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80108d0:	4b1c      	ldr	r3, [pc, #112]	; (8010944 <__pow5mult+0xac>)
 80108d2:	481d      	ldr	r0, [pc, #116]	; (8010948 <__pow5mult+0xb0>)
 80108d4:	f7fe fba4 	bl	800f020 <__assert_func>
 80108d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108dc:	6004      	str	r4, [r0, #0]
 80108de:	60c4      	str	r4, [r0, #12]
 80108e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80108e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80108e8:	b94c      	cbnz	r4, 80108fe <__pow5mult+0x66>
 80108ea:	f240 2171 	movw	r1, #625	; 0x271
 80108ee:	4630      	mov	r0, r6
 80108f0:	f7ff ff14 	bl	801071c <__i2b>
 80108f4:	2300      	movs	r3, #0
 80108f6:	4604      	mov	r4, r0
 80108f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80108fc:	6003      	str	r3, [r0, #0]
 80108fe:	f04f 0900 	mov.w	r9, #0
 8010902:	07eb      	lsls	r3, r5, #31
 8010904:	d50a      	bpl.n	801091c <__pow5mult+0x84>
 8010906:	4639      	mov	r1, r7
 8010908:	4622      	mov	r2, r4
 801090a:	4630      	mov	r0, r6
 801090c:	f7ff ff1c 	bl	8010748 <__multiply>
 8010910:	4680      	mov	r8, r0
 8010912:	4639      	mov	r1, r7
 8010914:	4630      	mov	r0, r6
 8010916:	f7ff fe01 	bl	801051c <_Bfree>
 801091a:	4647      	mov	r7, r8
 801091c:	106d      	asrs	r5, r5, #1
 801091e:	d00b      	beq.n	8010938 <__pow5mult+0xa0>
 8010920:	6820      	ldr	r0, [r4, #0]
 8010922:	b938      	cbnz	r0, 8010934 <__pow5mult+0x9c>
 8010924:	4622      	mov	r2, r4
 8010926:	4621      	mov	r1, r4
 8010928:	4630      	mov	r0, r6
 801092a:	f7ff ff0d 	bl	8010748 <__multiply>
 801092e:	6020      	str	r0, [r4, #0]
 8010930:	f8c0 9000 	str.w	r9, [r0]
 8010934:	4604      	mov	r4, r0
 8010936:	e7e4      	b.n	8010902 <__pow5mult+0x6a>
 8010938:	4638      	mov	r0, r7
 801093a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801093e:	bf00      	nop
 8010940:	08011f70 	.word	0x08011f70
 8010944:	08011c80 	.word	0x08011c80
 8010948:	08011e24 	.word	0x08011e24

0801094c <__lshift>:
 801094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010950:	460c      	mov	r4, r1
 8010952:	4607      	mov	r7, r0
 8010954:	4691      	mov	r9, r2
 8010956:	6923      	ldr	r3, [r4, #16]
 8010958:	6849      	ldr	r1, [r1, #4]
 801095a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801095e:	68a3      	ldr	r3, [r4, #8]
 8010960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010964:	f108 0601 	add.w	r6, r8, #1
 8010968:	42b3      	cmp	r3, r6
 801096a:	db0b      	blt.n	8010984 <__lshift+0x38>
 801096c:	4638      	mov	r0, r7
 801096e:	f7ff fd95 	bl	801049c <_Balloc>
 8010972:	4605      	mov	r5, r0
 8010974:	b948      	cbnz	r0, 801098a <__lshift+0x3e>
 8010976:	4602      	mov	r2, r0
 8010978:	f240 11d9 	movw	r1, #473	; 0x1d9
 801097c:	4b29      	ldr	r3, [pc, #164]	; (8010a24 <__lshift+0xd8>)
 801097e:	482a      	ldr	r0, [pc, #168]	; (8010a28 <__lshift+0xdc>)
 8010980:	f7fe fb4e 	bl	800f020 <__assert_func>
 8010984:	3101      	adds	r1, #1
 8010986:	005b      	lsls	r3, r3, #1
 8010988:	e7ee      	b.n	8010968 <__lshift+0x1c>
 801098a:	2300      	movs	r3, #0
 801098c:	f100 0114 	add.w	r1, r0, #20
 8010990:	f100 0210 	add.w	r2, r0, #16
 8010994:	4618      	mov	r0, r3
 8010996:	4553      	cmp	r3, sl
 8010998:	db37      	blt.n	8010a0a <__lshift+0xbe>
 801099a:	6920      	ldr	r0, [r4, #16]
 801099c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109a0:	f104 0314 	add.w	r3, r4, #20
 80109a4:	f019 091f 	ands.w	r9, r9, #31
 80109a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80109b0:	d02f      	beq.n	8010a12 <__lshift+0xc6>
 80109b2:	468a      	mov	sl, r1
 80109b4:	f04f 0c00 	mov.w	ip, #0
 80109b8:	f1c9 0e20 	rsb	lr, r9, #32
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	fa02 f209 	lsl.w	r2, r2, r9
 80109c2:	ea42 020c 	orr.w	r2, r2, ip
 80109c6:	f84a 2b04 	str.w	r2, [sl], #4
 80109ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80109ce:	4298      	cmp	r0, r3
 80109d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80109d4:	d8f2      	bhi.n	80109bc <__lshift+0x70>
 80109d6:	1b03      	subs	r3, r0, r4
 80109d8:	3b15      	subs	r3, #21
 80109da:	f023 0303 	bic.w	r3, r3, #3
 80109de:	3304      	adds	r3, #4
 80109e0:	f104 0215 	add.w	r2, r4, #21
 80109e4:	4290      	cmp	r0, r2
 80109e6:	bf38      	it	cc
 80109e8:	2304      	movcc	r3, #4
 80109ea:	f841 c003 	str.w	ip, [r1, r3]
 80109ee:	f1bc 0f00 	cmp.w	ip, #0
 80109f2:	d001      	beq.n	80109f8 <__lshift+0xac>
 80109f4:	f108 0602 	add.w	r6, r8, #2
 80109f8:	3e01      	subs	r6, #1
 80109fa:	4638      	mov	r0, r7
 80109fc:	4621      	mov	r1, r4
 80109fe:	612e      	str	r6, [r5, #16]
 8010a00:	f7ff fd8c 	bl	801051c <_Bfree>
 8010a04:	4628      	mov	r0, r5
 8010a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a0e:	3301      	adds	r3, #1
 8010a10:	e7c1      	b.n	8010996 <__lshift+0x4a>
 8010a12:	3904      	subs	r1, #4
 8010a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a18:	4298      	cmp	r0, r3
 8010a1a:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a1e:	d8f9      	bhi.n	8010a14 <__lshift+0xc8>
 8010a20:	e7ea      	b.n	80109f8 <__lshift+0xac>
 8010a22:	bf00      	nop
 8010a24:	08011d98 	.word	0x08011d98
 8010a28:	08011e24 	.word	0x08011e24

08010a2c <__mcmp>:
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	690a      	ldr	r2, [r1, #16]
 8010a30:	6900      	ldr	r0, [r0, #16]
 8010a32:	b530      	push	{r4, r5, lr}
 8010a34:	1a80      	subs	r0, r0, r2
 8010a36:	d10d      	bne.n	8010a54 <__mcmp+0x28>
 8010a38:	3314      	adds	r3, #20
 8010a3a:	3114      	adds	r1, #20
 8010a3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010a40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010a44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010a48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010a4c:	4295      	cmp	r5, r2
 8010a4e:	d002      	beq.n	8010a56 <__mcmp+0x2a>
 8010a50:	d304      	bcc.n	8010a5c <__mcmp+0x30>
 8010a52:	2001      	movs	r0, #1
 8010a54:	bd30      	pop	{r4, r5, pc}
 8010a56:	42a3      	cmp	r3, r4
 8010a58:	d3f4      	bcc.n	8010a44 <__mcmp+0x18>
 8010a5a:	e7fb      	b.n	8010a54 <__mcmp+0x28>
 8010a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a60:	e7f8      	b.n	8010a54 <__mcmp+0x28>
	...

08010a64 <__mdiff>:
 8010a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a68:	460d      	mov	r5, r1
 8010a6a:	4607      	mov	r7, r0
 8010a6c:	4611      	mov	r1, r2
 8010a6e:	4628      	mov	r0, r5
 8010a70:	4614      	mov	r4, r2
 8010a72:	f7ff ffdb 	bl	8010a2c <__mcmp>
 8010a76:	1e06      	subs	r6, r0, #0
 8010a78:	d111      	bne.n	8010a9e <__mdiff+0x3a>
 8010a7a:	4631      	mov	r1, r6
 8010a7c:	4638      	mov	r0, r7
 8010a7e:	f7ff fd0d 	bl	801049c <_Balloc>
 8010a82:	4602      	mov	r2, r0
 8010a84:	b928      	cbnz	r0, 8010a92 <__mdiff+0x2e>
 8010a86:	f240 2132 	movw	r1, #562	; 0x232
 8010a8a:	4b3a      	ldr	r3, [pc, #232]	; (8010b74 <__mdiff+0x110>)
 8010a8c:	483a      	ldr	r0, [pc, #232]	; (8010b78 <__mdiff+0x114>)
 8010a8e:	f7fe fac7 	bl	800f020 <__assert_func>
 8010a92:	2301      	movs	r3, #1
 8010a94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010a98:	4610      	mov	r0, r2
 8010a9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9e:	bfa4      	itt	ge
 8010aa0:	4623      	movge	r3, r4
 8010aa2:	462c      	movge	r4, r5
 8010aa4:	4638      	mov	r0, r7
 8010aa6:	6861      	ldr	r1, [r4, #4]
 8010aa8:	bfa6      	itte	ge
 8010aaa:	461d      	movge	r5, r3
 8010aac:	2600      	movge	r6, #0
 8010aae:	2601      	movlt	r6, #1
 8010ab0:	f7ff fcf4 	bl	801049c <_Balloc>
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	b918      	cbnz	r0, 8010ac0 <__mdiff+0x5c>
 8010ab8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010abc:	4b2d      	ldr	r3, [pc, #180]	; (8010b74 <__mdiff+0x110>)
 8010abe:	e7e5      	b.n	8010a8c <__mdiff+0x28>
 8010ac0:	f102 0814 	add.w	r8, r2, #20
 8010ac4:	46c2      	mov	sl, r8
 8010ac6:	f04f 0c00 	mov.w	ip, #0
 8010aca:	6927      	ldr	r7, [r4, #16]
 8010acc:	60c6      	str	r6, [r0, #12]
 8010ace:	692e      	ldr	r6, [r5, #16]
 8010ad0:	f104 0014 	add.w	r0, r4, #20
 8010ad4:	f105 0914 	add.w	r9, r5, #20
 8010ad8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8010adc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010ae0:	3410      	adds	r4, #16
 8010ae2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8010ae6:	f859 3b04 	ldr.w	r3, [r9], #4
 8010aea:	fa1f f18b 	uxth.w	r1, fp
 8010aee:	448c      	add	ip, r1
 8010af0:	b299      	uxth	r1, r3
 8010af2:	0c1b      	lsrs	r3, r3, #16
 8010af4:	ebac 0101 	sub.w	r1, ip, r1
 8010af8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010afc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010b00:	b289      	uxth	r1, r1
 8010b02:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8010b06:	454e      	cmp	r6, r9
 8010b08:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010b0c:	f84a 3b04 	str.w	r3, [sl], #4
 8010b10:	d8e7      	bhi.n	8010ae2 <__mdiff+0x7e>
 8010b12:	1b73      	subs	r3, r6, r5
 8010b14:	3b15      	subs	r3, #21
 8010b16:	f023 0303 	bic.w	r3, r3, #3
 8010b1a:	3515      	adds	r5, #21
 8010b1c:	3304      	adds	r3, #4
 8010b1e:	42ae      	cmp	r6, r5
 8010b20:	bf38      	it	cc
 8010b22:	2304      	movcc	r3, #4
 8010b24:	4418      	add	r0, r3
 8010b26:	4443      	add	r3, r8
 8010b28:	461e      	mov	r6, r3
 8010b2a:	4605      	mov	r5, r0
 8010b2c:	4575      	cmp	r5, lr
 8010b2e:	d30e      	bcc.n	8010b4e <__mdiff+0xea>
 8010b30:	f10e 0103 	add.w	r1, lr, #3
 8010b34:	1a09      	subs	r1, r1, r0
 8010b36:	f021 0103 	bic.w	r1, r1, #3
 8010b3a:	3803      	subs	r0, #3
 8010b3c:	4586      	cmp	lr, r0
 8010b3e:	bf38      	it	cc
 8010b40:	2100      	movcc	r1, #0
 8010b42:	4419      	add	r1, r3
 8010b44:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8010b48:	b18b      	cbz	r3, 8010b6e <__mdiff+0x10a>
 8010b4a:	6117      	str	r7, [r2, #16]
 8010b4c:	e7a4      	b.n	8010a98 <__mdiff+0x34>
 8010b4e:	f855 8b04 	ldr.w	r8, [r5], #4
 8010b52:	fa1f f188 	uxth.w	r1, r8
 8010b56:	4461      	add	r1, ip
 8010b58:	140c      	asrs	r4, r1, #16
 8010b5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010b5e:	b289      	uxth	r1, r1
 8010b60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010b64:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8010b68:	f846 1b04 	str.w	r1, [r6], #4
 8010b6c:	e7de      	b.n	8010b2c <__mdiff+0xc8>
 8010b6e:	3f01      	subs	r7, #1
 8010b70:	e7e8      	b.n	8010b44 <__mdiff+0xe0>
 8010b72:	bf00      	nop
 8010b74:	08011d98 	.word	0x08011d98
 8010b78:	08011e24 	.word	0x08011e24

08010b7c <__ulp>:
 8010b7c:	4b11      	ldr	r3, [pc, #68]	; (8010bc4 <__ulp+0x48>)
 8010b7e:	400b      	ands	r3, r1
 8010b80:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	dd02      	ble.n	8010b8e <__ulp+0x12>
 8010b88:	2000      	movs	r0, #0
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	4770      	bx	lr
 8010b8e:	425b      	negs	r3, r3
 8010b90:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010b94:	f04f 0000 	mov.w	r0, #0
 8010b98:	f04f 0100 	mov.w	r1, #0
 8010b9c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010ba0:	da04      	bge.n	8010bac <__ulp+0x30>
 8010ba2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010ba6:	fa43 f102 	asr.w	r1, r3, r2
 8010baa:	4770      	bx	lr
 8010bac:	f1a2 0314 	sub.w	r3, r2, #20
 8010bb0:	2b1e      	cmp	r3, #30
 8010bb2:	bfd6      	itet	le
 8010bb4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010bb8:	2301      	movgt	r3, #1
 8010bba:	fa22 f303 	lsrle.w	r3, r2, r3
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	4770      	bx	lr
 8010bc2:	bf00      	nop
 8010bc4:	7ff00000 	.word	0x7ff00000

08010bc8 <__b2d>:
 8010bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bcc:	6907      	ldr	r7, [r0, #16]
 8010bce:	f100 0914 	add.w	r9, r0, #20
 8010bd2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8010bd6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8010bda:	f1a7 0804 	sub.w	r8, r7, #4
 8010bde:	4630      	mov	r0, r6
 8010be0:	f7ff fd4e 	bl	8010680 <__hi0bits>
 8010be4:	f1c0 0320 	rsb	r3, r0, #32
 8010be8:	280a      	cmp	r0, #10
 8010bea:	600b      	str	r3, [r1, #0]
 8010bec:	491f      	ldr	r1, [pc, #124]	; (8010c6c <__b2d+0xa4>)
 8010bee:	dc17      	bgt.n	8010c20 <__b2d+0x58>
 8010bf0:	45c1      	cmp	r9, r8
 8010bf2:	bf28      	it	cs
 8010bf4:	2200      	movcs	r2, #0
 8010bf6:	f1c0 0c0b 	rsb	ip, r0, #11
 8010bfa:	fa26 f30c 	lsr.w	r3, r6, ip
 8010bfe:	bf38      	it	cc
 8010c00:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010c04:	ea43 0501 	orr.w	r5, r3, r1
 8010c08:	f100 0315 	add.w	r3, r0, #21
 8010c0c:	fa06 f303 	lsl.w	r3, r6, r3
 8010c10:	fa22 f20c 	lsr.w	r2, r2, ip
 8010c14:	ea43 0402 	orr.w	r4, r3, r2
 8010c18:	4620      	mov	r0, r4
 8010c1a:	4629      	mov	r1, r5
 8010c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c20:	45c1      	cmp	r9, r8
 8010c22:	bf2e      	itee	cs
 8010c24:	2200      	movcs	r2, #0
 8010c26:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010c2a:	f1a7 0808 	subcc.w	r8, r7, #8
 8010c2e:	f1b0 030b 	subs.w	r3, r0, #11
 8010c32:	d016      	beq.n	8010c62 <__b2d+0x9a>
 8010c34:	f1c3 0720 	rsb	r7, r3, #32
 8010c38:	fa22 f107 	lsr.w	r1, r2, r7
 8010c3c:	45c8      	cmp	r8, r9
 8010c3e:	fa06 f603 	lsl.w	r6, r6, r3
 8010c42:	ea46 0601 	orr.w	r6, r6, r1
 8010c46:	bf94      	ite	ls
 8010c48:	2100      	movls	r1, #0
 8010c4a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8010c4e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8010c52:	fa02 f003 	lsl.w	r0, r2, r3
 8010c56:	40f9      	lsrs	r1, r7
 8010c58:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010c5c:	ea40 0401 	orr.w	r4, r0, r1
 8010c60:	e7da      	b.n	8010c18 <__b2d+0x50>
 8010c62:	4614      	mov	r4, r2
 8010c64:	ea46 0501 	orr.w	r5, r6, r1
 8010c68:	e7d6      	b.n	8010c18 <__b2d+0x50>
 8010c6a:	bf00      	nop
 8010c6c:	3ff00000 	.word	0x3ff00000

08010c70 <__d2b>:
 8010c70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010c74:	2101      	movs	r1, #1
 8010c76:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010c7a:	4690      	mov	r8, r2
 8010c7c:	461d      	mov	r5, r3
 8010c7e:	f7ff fc0d 	bl	801049c <_Balloc>
 8010c82:	4604      	mov	r4, r0
 8010c84:	b930      	cbnz	r0, 8010c94 <__d2b+0x24>
 8010c86:	4602      	mov	r2, r0
 8010c88:	f240 310a 	movw	r1, #778	; 0x30a
 8010c8c:	4b24      	ldr	r3, [pc, #144]	; (8010d20 <__d2b+0xb0>)
 8010c8e:	4825      	ldr	r0, [pc, #148]	; (8010d24 <__d2b+0xb4>)
 8010c90:	f7fe f9c6 	bl	800f020 <__assert_func>
 8010c94:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010c98:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8010c9c:	bb2d      	cbnz	r5, 8010cea <__d2b+0x7a>
 8010c9e:	9301      	str	r3, [sp, #4]
 8010ca0:	f1b8 0300 	subs.w	r3, r8, #0
 8010ca4:	d026      	beq.n	8010cf4 <__d2b+0x84>
 8010ca6:	4668      	mov	r0, sp
 8010ca8:	9300      	str	r3, [sp, #0]
 8010caa:	f7ff fd09 	bl	80106c0 <__lo0bits>
 8010cae:	9900      	ldr	r1, [sp, #0]
 8010cb0:	b1f0      	cbz	r0, 8010cf0 <__d2b+0x80>
 8010cb2:	9a01      	ldr	r2, [sp, #4]
 8010cb4:	f1c0 0320 	rsb	r3, r0, #32
 8010cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8010cbc:	430b      	orrs	r3, r1
 8010cbe:	40c2      	lsrs	r2, r0
 8010cc0:	6163      	str	r3, [r4, #20]
 8010cc2:	9201      	str	r2, [sp, #4]
 8010cc4:	9b01      	ldr	r3, [sp, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	bf14      	ite	ne
 8010cca:	2102      	movne	r1, #2
 8010ccc:	2101      	moveq	r1, #1
 8010cce:	61a3      	str	r3, [r4, #24]
 8010cd0:	6121      	str	r1, [r4, #16]
 8010cd2:	b1c5      	cbz	r5, 8010d06 <__d2b+0x96>
 8010cd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010cd8:	4405      	add	r5, r0
 8010cda:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010cde:	603d      	str	r5, [r7, #0]
 8010ce0:	6030      	str	r0, [r6, #0]
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	b002      	add	sp, #8
 8010ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010cee:	e7d6      	b.n	8010c9e <__d2b+0x2e>
 8010cf0:	6161      	str	r1, [r4, #20]
 8010cf2:	e7e7      	b.n	8010cc4 <__d2b+0x54>
 8010cf4:	a801      	add	r0, sp, #4
 8010cf6:	f7ff fce3 	bl	80106c0 <__lo0bits>
 8010cfa:	2101      	movs	r1, #1
 8010cfc:	9b01      	ldr	r3, [sp, #4]
 8010cfe:	6121      	str	r1, [r4, #16]
 8010d00:	6163      	str	r3, [r4, #20]
 8010d02:	3020      	adds	r0, #32
 8010d04:	e7e5      	b.n	8010cd2 <__d2b+0x62>
 8010d06:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010d0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010d0e:	6038      	str	r0, [r7, #0]
 8010d10:	6918      	ldr	r0, [r3, #16]
 8010d12:	f7ff fcb5 	bl	8010680 <__hi0bits>
 8010d16:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010d1a:	6031      	str	r1, [r6, #0]
 8010d1c:	e7e1      	b.n	8010ce2 <__d2b+0x72>
 8010d1e:	bf00      	nop
 8010d20:	08011d98 	.word	0x08011d98
 8010d24:	08011e24 	.word	0x08011e24

08010d28 <__ratio>:
 8010d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2c:	4688      	mov	r8, r1
 8010d2e:	4669      	mov	r1, sp
 8010d30:	4681      	mov	r9, r0
 8010d32:	f7ff ff49 	bl	8010bc8 <__b2d>
 8010d36:	460f      	mov	r7, r1
 8010d38:	4604      	mov	r4, r0
 8010d3a:	460d      	mov	r5, r1
 8010d3c:	4640      	mov	r0, r8
 8010d3e:	a901      	add	r1, sp, #4
 8010d40:	f7ff ff42 	bl	8010bc8 <__b2d>
 8010d44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d48:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010d4c:	468b      	mov	fp, r1
 8010d4e:	eba3 0c02 	sub.w	ip, r3, r2
 8010d52:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010d56:	1a9b      	subs	r3, r3, r2
 8010d58:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	bfd5      	itete	le
 8010d60:	460a      	movle	r2, r1
 8010d62:	462a      	movgt	r2, r5
 8010d64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010d68:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010d6c:	bfd8      	it	le
 8010d6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010d72:	465b      	mov	r3, fp
 8010d74:	4602      	mov	r2, r0
 8010d76:	4639      	mov	r1, r7
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f7ef fcf9 	bl	8000770 <__aeabi_ddiv>
 8010d7e:	b003      	add	sp, #12
 8010d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d84 <__copybits>:
 8010d84:	3901      	subs	r1, #1
 8010d86:	b570      	push	{r4, r5, r6, lr}
 8010d88:	1149      	asrs	r1, r1, #5
 8010d8a:	6914      	ldr	r4, [r2, #16]
 8010d8c:	3101      	adds	r1, #1
 8010d8e:	f102 0314 	add.w	r3, r2, #20
 8010d92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010d96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d9a:	1f05      	subs	r5, r0, #4
 8010d9c:	42a3      	cmp	r3, r4
 8010d9e:	d30c      	bcc.n	8010dba <__copybits+0x36>
 8010da0:	1aa3      	subs	r3, r4, r2
 8010da2:	3b11      	subs	r3, #17
 8010da4:	f023 0303 	bic.w	r3, r3, #3
 8010da8:	3211      	adds	r2, #17
 8010daa:	42a2      	cmp	r2, r4
 8010dac:	bf88      	it	hi
 8010dae:	2300      	movhi	r3, #0
 8010db0:	4418      	add	r0, r3
 8010db2:	2300      	movs	r3, #0
 8010db4:	4288      	cmp	r0, r1
 8010db6:	d305      	bcc.n	8010dc4 <__copybits+0x40>
 8010db8:	bd70      	pop	{r4, r5, r6, pc}
 8010dba:	f853 6b04 	ldr.w	r6, [r3], #4
 8010dbe:	f845 6f04 	str.w	r6, [r5, #4]!
 8010dc2:	e7eb      	b.n	8010d9c <__copybits+0x18>
 8010dc4:	f840 3b04 	str.w	r3, [r0], #4
 8010dc8:	e7f4      	b.n	8010db4 <__copybits+0x30>

08010dca <__any_on>:
 8010dca:	f100 0214 	add.w	r2, r0, #20
 8010dce:	6900      	ldr	r0, [r0, #16]
 8010dd0:	114b      	asrs	r3, r1, #5
 8010dd2:	4298      	cmp	r0, r3
 8010dd4:	b510      	push	{r4, lr}
 8010dd6:	db11      	blt.n	8010dfc <__any_on+0x32>
 8010dd8:	dd0a      	ble.n	8010df0 <__any_on+0x26>
 8010dda:	f011 011f 	ands.w	r1, r1, #31
 8010dde:	d007      	beq.n	8010df0 <__any_on+0x26>
 8010de0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010de4:	fa24 f001 	lsr.w	r0, r4, r1
 8010de8:	fa00 f101 	lsl.w	r1, r0, r1
 8010dec:	428c      	cmp	r4, r1
 8010dee:	d10b      	bne.n	8010e08 <__any_on+0x3e>
 8010df0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d803      	bhi.n	8010e00 <__any_on+0x36>
 8010df8:	2000      	movs	r0, #0
 8010dfa:	bd10      	pop	{r4, pc}
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	e7f7      	b.n	8010df0 <__any_on+0x26>
 8010e00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e04:	2900      	cmp	r1, #0
 8010e06:	d0f5      	beq.n	8010df4 <__any_on+0x2a>
 8010e08:	2001      	movs	r0, #1
 8010e0a:	e7f6      	b.n	8010dfa <__any_on+0x30>

08010e0c <_calloc_r>:
 8010e0c:	b570      	push	{r4, r5, r6, lr}
 8010e0e:	fba1 5402 	umull	r5, r4, r1, r2
 8010e12:	b934      	cbnz	r4, 8010e22 <_calloc_r+0x16>
 8010e14:	4629      	mov	r1, r5
 8010e16:	f000 f875 	bl	8010f04 <_malloc_r>
 8010e1a:	4606      	mov	r6, r0
 8010e1c:	b928      	cbnz	r0, 8010e2a <_calloc_r+0x1e>
 8010e1e:	4630      	mov	r0, r6
 8010e20:	bd70      	pop	{r4, r5, r6, pc}
 8010e22:	220c      	movs	r2, #12
 8010e24:	2600      	movs	r6, #0
 8010e26:	6002      	str	r2, [r0, #0]
 8010e28:	e7f9      	b.n	8010e1e <_calloc_r+0x12>
 8010e2a:	462a      	mov	r2, r5
 8010e2c:	4621      	mov	r1, r4
 8010e2e:	f7fc fe13 	bl	800da58 <memset>
 8010e32:	e7f4      	b.n	8010e1e <_calloc_r+0x12>

08010e34 <_free_r>:
 8010e34:	b538      	push	{r3, r4, r5, lr}
 8010e36:	4605      	mov	r5, r0
 8010e38:	2900      	cmp	r1, #0
 8010e3a:	d040      	beq.n	8010ebe <_free_r+0x8a>
 8010e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e40:	1f0c      	subs	r4, r1, #4
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	bfb8      	it	lt
 8010e46:	18e4      	addlt	r4, r4, r3
 8010e48:	f000 fd44 	bl	80118d4 <__malloc_lock>
 8010e4c:	4a1c      	ldr	r2, [pc, #112]	; (8010ec0 <_free_r+0x8c>)
 8010e4e:	6813      	ldr	r3, [r2, #0]
 8010e50:	b933      	cbnz	r3, 8010e60 <_free_r+0x2c>
 8010e52:	6063      	str	r3, [r4, #4]
 8010e54:	6014      	str	r4, [r2, #0]
 8010e56:	4628      	mov	r0, r5
 8010e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e5c:	f000 bd40 	b.w	80118e0 <__malloc_unlock>
 8010e60:	42a3      	cmp	r3, r4
 8010e62:	d908      	bls.n	8010e76 <_free_r+0x42>
 8010e64:	6820      	ldr	r0, [r4, #0]
 8010e66:	1821      	adds	r1, r4, r0
 8010e68:	428b      	cmp	r3, r1
 8010e6a:	bf01      	itttt	eq
 8010e6c:	6819      	ldreq	r1, [r3, #0]
 8010e6e:	685b      	ldreq	r3, [r3, #4]
 8010e70:	1809      	addeq	r1, r1, r0
 8010e72:	6021      	streq	r1, [r4, #0]
 8010e74:	e7ed      	b.n	8010e52 <_free_r+0x1e>
 8010e76:	461a      	mov	r2, r3
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	b10b      	cbz	r3, 8010e80 <_free_r+0x4c>
 8010e7c:	42a3      	cmp	r3, r4
 8010e7e:	d9fa      	bls.n	8010e76 <_free_r+0x42>
 8010e80:	6811      	ldr	r1, [r2, #0]
 8010e82:	1850      	adds	r0, r2, r1
 8010e84:	42a0      	cmp	r0, r4
 8010e86:	d10b      	bne.n	8010ea0 <_free_r+0x6c>
 8010e88:	6820      	ldr	r0, [r4, #0]
 8010e8a:	4401      	add	r1, r0
 8010e8c:	1850      	adds	r0, r2, r1
 8010e8e:	4283      	cmp	r3, r0
 8010e90:	6011      	str	r1, [r2, #0]
 8010e92:	d1e0      	bne.n	8010e56 <_free_r+0x22>
 8010e94:	6818      	ldr	r0, [r3, #0]
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	4401      	add	r1, r0
 8010e9a:	6011      	str	r1, [r2, #0]
 8010e9c:	6053      	str	r3, [r2, #4]
 8010e9e:	e7da      	b.n	8010e56 <_free_r+0x22>
 8010ea0:	d902      	bls.n	8010ea8 <_free_r+0x74>
 8010ea2:	230c      	movs	r3, #12
 8010ea4:	602b      	str	r3, [r5, #0]
 8010ea6:	e7d6      	b.n	8010e56 <_free_r+0x22>
 8010ea8:	6820      	ldr	r0, [r4, #0]
 8010eaa:	1821      	adds	r1, r4, r0
 8010eac:	428b      	cmp	r3, r1
 8010eae:	bf01      	itttt	eq
 8010eb0:	6819      	ldreq	r1, [r3, #0]
 8010eb2:	685b      	ldreq	r3, [r3, #4]
 8010eb4:	1809      	addeq	r1, r1, r0
 8010eb6:	6021      	streq	r1, [r4, #0]
 8010eb8:	6063      	str	r3, [r4, #4]
 8010eba:	6054      	str	r4, [r2, #4]
 8010ebc:	e7cb      	b.n	8010e56 <_free_r+0x22>
 8010ebe:	bd38      	pop	{r3, r4, r5, pc}
 8010ec0:	20001568 	.word	0x20001568

08010ec4 <sbrk_aligned>:
 8010ec4:	b570      	push	{r4, r5, r6, lr}
 8010ec6:	4e0e      	ldr	r6, [pc, #56]	; (8010f00 <sbrk_aligned+0x3c>)
 8010ec8:	460c      	mov	r4, r1
 8010eca:	6831      	ldr	r1, [r6, #0]
 8010ecc:	4605      	mov	r5, r0
 8010ece:	b911      	cbnz	r1, 8010ed6 <sbrk_aligned+0x12>
 8010ed0:	f000 f9ea 	bl	80112a8 <_sbrk_r>
 8010ed4:	6030      	str	r0, [r6, #0]
 8010ed6:	4621      	mov	r1, r4
 8010ed8:	4628      	mov	r0, r5
 8010eda:	f000 f9e5 	bl	80112a8 <_sbrk_r>
 8010ede:	1c43      	adds	r3, r0, #1
 8010ee0:	d00a      	beq.n	8010ef8 <sbrk_aligned+0x34>
 8010ee2:	1cc4      	adds	r4, r0, #3
 8010ee4:	f024 0403 	bic.w	r4, r4, #3
 8010ee8:	42a0      	cmp	r0, r4
 8010eea:	d007      	beq.n	8010efc <sbrk_aligned+0x38>
 8010eec:	1a21      	subs	r1, r4, r0
 8010eee:	4628      	mov	r0, r5
 8010ef0:	f000 f9da 	bl	80112a8 <_sbrk_r>
 8010ef4:	3001      	adds	r0, #1
 8010ef6:	d101      	bne.n	8010efc <sbrk_aligned+0x38>
 8010ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8010efc:	4620      	mov	r0, r4
 8010efe:	bd70      	pop	{r4, r5, r6, pc}
 8010f00:	2000156c 	.word	0x2000156c

08010f04 <_malloc_r>:
 8010f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f08:	1ccd      	adds	r5, r1, #3
 8010f0a:	f025 0503 	bic.w	r5, r5, #3
 8010f0e:	3508      	adds	r5, #8
 8010f10:	2d0c      	cmp	r5, #12
 8010f12:	bf38      	it	cc
 8010f14:	250c      	movcc	r5, #12
 8010f16:	2d00      	cmp	r5, #0
 8010f18:	4607      	mov	r7, r0
 8010f1a:	db01      	blt.n	8010f20 <_malloc_r+0x1c>
 8010f1c:	42a9      	cmp	r1, r5
 8010f1e:	d905      	bls.n	8010f2c <_malloc_r+0x28>
 8010f20:	230c      	movs	r3, #12
 8010f22:	2600      	movs	r6, #0
 8010f24:	603b      	str	r3, [r7, #0]
 8010f26:	4630      	mov	r0, r6
 8010f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f2c:	4e2e      	ldr	r6, [pc, #184]	; (8010fe8 <_malloc_r+0xe4>)
 8010f2e:	f000 fcd1 	bl	80118d4 <__malloc_lock>
 8010f32:	6833      	ldr	r3, [r6, #0]
 8010f34:	461c      	mov	r4, r3
 8010f36:	bb34      	cbnz	r4, 8010f86 <_malloc_r+0x82>
 8010f38:	4629      	mov	r1, r5
 8010f3a:	4638      	mov	r0, r7
 8010f3c:	f7ff ffc2 	bl	8010ec4 <sbrk_aligned>
 8010f40:	1c43      	adds	r3, r0, #1
 8010f42:	4604      	mov	r4, r0
 8010f44:	d14d      	bne.n	8010fe2 <_malloc_r+0xde>
 8010f46:	6834      	ldr	r4, [r6, #0]
 8010f48:	4626      	mov	r6, r4
 8010f4a:	2e00      	cmp	r6, #0
 8010f4c:	d140      	bne.n	8010fd0 <_malloc_r+0xcc>
 8010f4e:	6823      	ldr	r3, [r4, #0]
 8010f50:	4631      	mov	r1, r6
 8010f52:	4638      	mov	r0, r7
 8010f54:	eb04 0803 	add.w	r8, r4, r3
 8010f58:	f000 f9a6 	bl	80112a8 <_sbrk_r>
 8010f5c:	4580      	cmp	r8, r0
 8010f5e:	d13a      	bne.n	8010fd6 <_malloc_r+0xd2>
 8010f60:	6821      	ldr	r1, [r4, #0]
 8010f62:	3503      	adds	r5, #3
 8010f64:	1a6d      	subs	r5, r5, r1
 8010f66:	f025 0503 	bic.w	r5, r5, #3
 8010f6a:	3508      	adds	r5, #8
 8010f6c:	2d0c      	cmp	r5, #12
 8010f6e:	bf38      	it	cc
 8010f70:	250c      	movcc	r5, #12
 8010f72:	4638      	mov	r0, r7
 8010f74:	4629      	mov	r1, r5
 8010f76:	f7ff ffa5 	bl	8010ec4 <sbrk_aligned>
 8010f7a:	3001      	adds	r0, #1
 8010f7c:	d02b      	beq.n	8010fd6 <_malloc_r+0xd2>
 8010f7e:	6823      	ldr	r3, [r4, #0]
 8010f80:	442b      	add	r3, r5
 8010f82:	6023      	str	r3, [r4, #0]
 8010f84:	e00e      	b.n	8010fa4 <_malloc_r+0xa0>
 8010f86:	6822      	ldr	r2, [r4, #0]
 8010f88:	1b52      	subs	r2, r2, r5
 8010f8a:	d41e      	bmi.n	8010fca <_malloc_r+0xc6>
 8010f8c:	2a0b      	cmp	r2, #11
 8010f8e:	d916      	bls.n	8010fbe <_malloc_r+0xba>
 8010f90:	1961      	adds	r1, r4, r5
 8010f92:	42a3      	cmp	r3, r4
 8010f94:	6025      	str	r5, [r4, #0]
 8010f96:	bf18      	it	ne
 8010f98:	6059      	strne	r1, [r3, #4]
 8010f9a:	6863      	ldr	r3, [r4, #4]
 8010f9c:	bf08      	it	eq
 8010f9e:	6031      	streq	r1, [r6, #0]
 8010fa0:	5162      	str	r2, [r4, r5]
 8010fa2:	604b      	str	r3, [r1, #4]
 8010fa4:	4638      	mov	r0, r7
 8010fa6:	f104 060b 	add.w	r6, r4, #11
 8010faa:	f000 fc99 	bl	80118e0 <__malloc_unlock>
 8010fae:	f026 0607 	bic.w	r6, r6, #7
 8010fb2:	1d23      	adds	r3, r4, #4
 8010fb4:	1af2      	subs	r2, r6, r3
 8010fb6:	d0b6      	beq.n	8010f26 <_malloc_r+0x22>
 8010fb8:	1b9b      	subs	r3, r3, r6
 8010fba:	50a3      	str	r3, [r4, r2]
 8010fbc:	e7b3      	b.n	8010f26 <_malloc_r+0x22>
 8010fbe:	6862      	ldr	r2, [r4, #4]
 8010fc0:	42a3      	cmp	r3, r4
 8010fc2:	bf0c      	ite	eq
 8010fc4:	6032      	streq	r2, [r6, #0]
 8010fc6:	605a      	strne	r2, [r3, #4]
 8010fc8:	e7ec      	b.n	8010fa4 <_malloc_r+0xa0>
 8010fca:	4623      	mov	r3, r4
 8010fcc:	6864      	ldr	r4, [r4, #4]
 8010fce:	e7b2      	b.n	8010f36 <_malloc_r+0x32>
 8010fd0:	4634      	mov	r4, r6
 8010fd2:	6876      	ldr	r6, [r6, #4]
 8010fd4:	e7b9      	b.n	8010f4a <_malloc_r+0x46>
 8010fd6:	230c      	movs	r3, #12
 8010fd8:	4638      	mov	r0, r7
 8010fda:	603b      	str	r3, [r7, #0]
 8010fdc:	f000 fc80 	bl	80118e0 <__malloc_unlock>
 8010fe0:	e7a1      	b.n	8010f26 <_malloc_r+0x22>
 8010fe2:	6025      	str	r5, [r4, #0]
 8010fe4:	e7de      	b.n	8010fa4 <_malloc_r+0xa0>
 8010fe6:	bf00      	nop
 8010fe8:	20001568 	.word	0x20001568

08010fec <__sfputc_r>:
 8010fec:	6893      	ldr	r3, [r2, #8]
 8010fee:	b410      	push	{r4}
 8010ff0:	3b01      	subs	r3, #1
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	6093      	str	r3, [r2, #8]
 8010ff6:	da07      	bge.n	8011008 <__sfputc_r+0x1c>
 8010ff8:	6994      	ldr	r4, [r2, #24]
 8010ffa:	42a3      	cmp	r3, r4
 8010ffc:	db01      	blt.n	8011002 <__sfputc_r+0x16>
 8010ffe:	290a      	cmp	r1, #10
 8011000:	d102      	bne.n	8011008 <__sfputc_r+0x1c>
 8011002:	bc10      	pop	{r4}
 8011004:	f000 b974 	b.w	80112f0 <__swbuf_r>
 8011008:	6813      	ldr	r3, [r2, #0]
 801100a:	1c58      	adds	r0, r3, #1
 801100c:	6010      	str	r0, [r2, #0]
 801100e:	7019      	strb	r1, [r3, #0]
 8011010:	4608      	mov	r0, r1
 8011012:	bc10      	pop	{r4}
 8011014:	4770      	bx	lr

08011016 <__sfputs_r>:
 8011016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011018:	4606      	mov	r6, r0
 801101a:	460f      	mov	r7, r1
 801101c:	4614      	mov	r4, r2
 801101e:	18d5      	adds	r5, r2, r3
 8011020:	42ac      	cmp	r4, r5
 8011022:	d101      	bne.n	8011028 <__sfputs_r+0x12>
 8011024:	2000      	movs	r0, #0
 8011026:	e007      	b.n	8011038 <__sfputs_r+0x22>
 8011028:	463a      	mov	r2, r7
 801102a:	4630      	mov	r0, r6
 801102c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011030:	f7ff ffdc 	bl	8010fec <__sfputc_r>
 8011034:	1c43      	adds	r3, r0, #1
 8011036:	d1f3      	bne.n	8011020 <__sfputs_r+0xa>
 8011038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801103c <_vfiprintf_r>:
 801103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011040:	460d      	mov	r5, r1
 8011042:	4614      	mov	r4, r2
 8011044:	4698      	mov	r8, r3
 8011046:	4606      	mov	r6, r0
 8011048:	b09d      	sub	sp, #116	; 0x74
 801104a:	b118      	cbz	r0, 8011054 <_vfiprintf_r+0x18>
 801104c:	6983      	ldr	r3, [r0, #24]
 801104e:	b90b      	cbnz	r3, 8011054 <_vfiprintf_r+0x18>
 8011050:	f000 fb3a 	bl	80116c8 <__sinit>
 8011054:	4b89      	ldr	r3, [pc, #548]	; (801127c <_vfiprintf_r+0x240>)
 8011056:	429d      	cmp	r5, r3
 8011058:	d11b      	bne.n	8011092 <_vfiprintf_r+0x56>
 801105a:	6875      	ldr	r5, [r6, #4]
 801105c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801105e:	07d9      	lsls	r1, r3, #31
 8011060:	d405      	bmi.n	801106e <_vfiprintf_r+0x32>
 8011062:	89ab      	ldrh	r3, [r5, #12]
 8011064:	059a      	lsls	r2, r3, #22
 8011066:	d402      	bmi.n	801106e <_vfiprintf_r+0x32>
 8011068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801106a:	f000 fbcb 	bl	8011804 <__retarget_lock_acquire_recursive>
 801106e:	89ab      	ldrh	r3, [r5, #12]
 8011070:	071b      	lsls	r3, r3, #28
 8011072:	d501      	bpl.n	8011078 <_vfiprintf_r+0x3c>
 8011074:	692b      	ldr	r3, [r5, #16]
 8011076:	b9eb      	cbnz	r3, 80110b4 <_vfiprintf_r+0x78>
 8011078:	4629      	mov	r1, r5
 801107a:	4630      	mov	r0, r6
 801107c:	f000 f998 	bl	80113b0 <__swsetup_r>
 8011080:	b1c0      	cbz	r0, 80110b4 <_vfiprintf_r+0x78>
 8011082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011084:	07dc      	lsls	r4, r3, #31
 8011086:	d50e      	bpl.n	80110a6 <_vfiprintf_r+0x6a>
 8011088:	f04f 30ff 	mov.w	r0, #4294967295
 801108c:	b01d      	add	sp, #116	; 0x74
 801108e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011092:	4b7b      	ldr	r3, [pc, #492]	; (8011280 <_vfiprintf_r+0x244>)
 8011094:	429d      	cmp	r5, r3
 8011096:	d101      	bne.n	801109c <_vfiprintf_r+0x60>
 8011098:	68b5      	ldr	r5, [r6, #8]
 801109a:	e7df      	b.n	801105c <_vfiprintf_r+0x20>
 801109c:	4b79      	ldr	r3, [pc, #484]	; (8011284 <_vfiprintf_r+0x248>)
 801109e:	429d      	cmp	r5, r3
 80110a0:	bf08      	it	eq
 80110a2:	68f5      	ldreq	r5, [r6, #12]
 80110a4:	e7da      	b.n	801105c <_vfiprintf_r+0x20>
 80110a6:	89ab      	ldrh	r3, [r5, #12]
 80110a8:	0598      	lsls	r0, r3, #22
 80110aa:	d4ed      	bmi.n	8011088 <_vfiprintf_r+0x4c>
 80110ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110ae:	f000 fbaa 	bl	8011806 <__retarget_lock_release_recursive>
 80110b2:	e7e9      	b.n	8011088 <_vfiprintf_r+0x4c>
 80110b4:	2300      	movs	r3, #0
 80110b6:	9309      	str	r3, [sp, #36]	; 0x24
 80110b8:	2320      	movs	r3, #32
 80110ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110be:	2330      	movs	r3, #48	; 0x30
 80110c0:	f04f 0901 	mov.w	r9, #1
 80110c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80110c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011288 <_vfiprintf_r+0x24c>
 80110cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110d0:	4623      	mov	r3, r4
 80110d2:	469a      	mov	sl, r3
 80110d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110d8:	b10a      	cbz	r2, 80110de <_vfiprintf_r+0xa2>
 80110da:	2a25      	cmp	r2, #37	; 0x25
 80110dc:	d1f9      	bne.n	80110d2 <_vfiprintf_r+0x96>
 80110de:	ebba 0b04 	subs.w	fp, sl, r4
 80110e2:	d00b      	beq.n	80110fc <_vfiprintf_r+0xc0>
 80110e4:	465b      	mov	r3, fp
 80110e6:	4622      	mov	r2, r4
 80110e8:	4629      	mov	r1, r5
 80110ea:	4630      	mov	r0, r6
 80110ec:	f7ff ff93 	bl	8011016 <__sfputs_r>
 80110f0:	3001      	adds	r0, #1
 80110f2:	f000 80aa 	beq.w	801124a <_vfiprintf_r+0x20e>
 80110f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110f8:	445a      	add	r2, fp
 80110fa:	9209      	str	r2, [sp, #36]	; 0x24
 80110fc:	f89a 3000 	ldrb.w	r3, [sl]
 8011100:	2b00      	cmp	r3, #0
 8011102:	f000 80a2 	beq.w	801124a <_vfiprintf_r+0x20e>
 8011106:	2300      	movs	r3, #0
 8011108:	f04f 32ff 	mov.w	r2, #4294967295
 801110c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011110:	f10a 0a01 	add.w	sl, sl, #1
 8011114:	9304      	str	r3, [sp, #16]
 8011116:	9307      	str	r3, [sp, #28]
 8011118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801111c:	931a      	str	r3, [sp, #104]	; 0x68
 801111e:	4654      	mov	r4, sl
 8011120:	2205      	movs	r2, #5
 8011122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011126:	4858      	ldr	r0, [pc, #352]	; (8011288 <_vfiprintf_r+0x24c>)
 8011128:	f7ff f9aa 	bl	8010480 <memchr>
 801112c:	9a04      	ldr	r2, [sp, #16]
 801112e:	b9d8      	cbnz	r0, 8011168 <_vfiprintf_r+0x12c>
 8011130:	06d1      	lsls	r1, r2, #27
 8011132:	bf44      	itt	mi
 8011134:	2320      	movmi	r3, #32
 8011136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801113a:	0713      	lsls	r3, r2, #28
 801113c:	bf44      	itt	mi
 801113e:	232b      	movmi	r3, #43	; 0x2b
 8011140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011144:	f89a 3000 	ldrb.w	r3, [sl]
 8011148:	2b2a      	cmp	r3, #42	; 0x2a
 801114a:	d015      	beq.n	8011178 <_vfiprintf_r+0x13c>
 801114c:	4654      	mov	r4, sl
 801114e:	2000      	movs	r0, #0
 8011150:	f04f 0c0a 	mov.w	ip, #10
 8011154:	9a07      	ldr	r2, [sp, #28]
 8011156:	4621      	mov	r1, r4
 8011158:	f811 3b01 	ldrb.w	r3, [r1], #1
 801115c:	3b30      	subs	r3, #48	; 0x30
 801115e:	2b09      	cmp	r3, #9
 8011160:	d94e      	bls.n	8011200 <_vfiprintf_r+0x1c4>
 8011162:	b1b0      	cbz	r0, 8011192 <_vfiprintf_r+0x156>
 8011164:	9207      	str	r2, [sp, #28]
 8011166:	e014      	b.n	8011192 <_vfiprintf_r+0x156>
 8011168:	eba0 0308 	sub.w	r3, r0, r8
 801116c:	fa09 f303 	lsl.w	r3, r9, r3
 8011170:	4313      	orrs	r3, r2
 8011172:	46a2      	mov	sl, r4
 8011174:	9304      	str	r3, [sp, #16]
 8011176:	e7d2      	b.n	801111e <_vfiprintf_r+0xe2>
 8011178:	9b03      	ldr	r3, [sp, #12]
 801117a:	1d19      	adds	r1, r3, #4
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	9103      	str	r1, [sp, #12]
 8011180:	2b00      	cmp	r3, #0
 8011182:	bfbb      	ittet	lt
 8011184:	425b      	neglt	r3, r3
 8011186:	f042 0202 	orrlt.w	r2, r2, #2
 801118a:	9307      	strge	r3, [sp, #28]
 801118c:	9307      	strlt	r3, [sp, #28]
 801118e:	bfb8      	it	lt
 8011190:	9204      	strlt	r2, [sp, #16]
 8011192:	7823      	ldrb	r3, [r4, #0]
 8011194:	2b2e      	cmp	r3, #46	; 0x2e
 8011196:	d10c      	bne.n	80111b2 <_vfiprintf_r+0x176>
 8011198:	7863      	ldrb	r3, [r4, #1]
 801119a:	2b2a      	cmp	r3, #42	; 0x2a
 801119c:	d135      	bne.n	801120a <_vfiprintf_r+0x1ce>
 801119e:	9b03      	ldr	r3, [sp, #12]
 80111a0:	3402      	adds	r4, #2
 80111a2:	1d1a      	adds	r2, r3, #4
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	9203      	str	r2, [sp, #12]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	bfb8      	it	lt
 80111ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80111b0:	9305      	str	r3, [sp, #20]
 80111b2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801128c <_vfiprintf_r+0x250>
 80111b6:	2203      	movs	r2, #3
 80111b8:	4650      	mov	r0, sl
 80111ba:	7821      	ldrb	r1, [r4, #0]
 80111bc:	f7ff f960 	bl	8010480 <memchr>
 80111c0:	b140      	cbz	r0, 80111d4 <_vfiprintf_r+0x198>
 80111c2:	2340      	movs	r3, #64	; 0x40
 80111c4:	eba0 000a 	sub.w	r0, r0, sl
 80111c8:	fa03 f000 	lsl.w	r0, r3, r0
 80111cc:	9b04      	ldr	r3, [sp, #16]
 80111ce:	3401      	adds	r4, #1
 80111d0:	4303      	orrs	r3, r0
 80111d2:	9304      	str	r3, [sp, #16]
 80111d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111d8:	2206      	movs	r2, #6
 80111da:	482d      	ldr	r0, [pc, #180]	; (8011290 <_vfiprintf_r+0x254>)
 80111dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111e0:	f7ff f94e 	bl	8010480 <memchr>
 80111e4:	2800      	cmp	r0, #0
 80111e6:	d03f      	beq.n	8011268 <_vfiprintf_r+0x22c>
 80111e8:	4b2a      	ldr	r3, [pc, #168]	; (8011294 <_vfiprintf_r+0x258>)
 80111ea:	bb1b      	cbnz	r3, 8011234 <_vfiprintf_r+0x1f8>
 80111ec:	9b03      	ldr	r3, [sp, #12]
 80111ee:	3307      	adds	r3, #7
 80111f0:	f023 0307 	bic.w	r3, r3, #7
 80111f4:	3308      	adds	r3, #8
 80111f6:	9303      	str	r3, [sp, #12]
 80111f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111fa:	443b      	add	r3, r7
 80111fc:	9309      	str	r3, [sp, #36]	; 0x24
 80111fe:	e767      	b.n	80110d0 <_vfiprintf_r+0x94>
 8011200:	460c      	mov	r4, r1
 8011202:	2001      	movs	r0, #1
 8011204:	fb0c 3202 	mla	r2, ip, r2, r3
 8011208:	e7a5      	b.n	8011156 <_vfiprintf_r+0x11a>
 801120a:	2300      	movs	r3, #0
 801120c:	f04f 0c0a 	mov.w	ip, #10
 8011210:	4619      	mov	r1, r3
 8011212:	3401      	adds	r4, #1
 8011214:	9305      	str	r3, [sp, #20]
 8011216:	4620      	mov	r0, r4
 8011218:	f810 2b01 	ldrb.w	r2, [r0], #1
 801121c:	3a30      	subs	r2, #48	; 0x30
 801121e:	2a09      	cmp	r2, #9
 8011220:	d903      	bls.n	801122a <_vfiprintf_r+0x1ee>
 8011222:	2b00      	cmp	r3, #0
 8011224:	d0c5      	beq.n	80111b2 <_vfiprintf_r+0x176>
 8011226:	9105      	str	r1, [sp, #20]
 8011228:	e7c3      	b.n	80111b2 <_vfiprintf_r+0x176>
 801122a:	4604      	mov	r4, r0
 801122c:	2301      	movs	r3, #1
 801122e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011232:	e7f0      	b.n	8011216 <_vfiprintf_r+0x1da>
 8011234:	ab03      	add	r3, sp, #12
 8011236:	9300      	str	r3, [sp, #0]
 8011238:	462a      	mov	r2, r5
 801123a:	4630      	mov	r0, r6
 801123c:	4b16      	ldr	r3, [pc, #88]	; (8011298 <_vfiprintf_r+0x25c>)
 801123e:	a904      	add	r1, sp, #16
 8011240:	f7fc fcb0 	bl	800dba4 <_printf_float>
 8011244:	4607      	mov	r7, r0
 8011246:	1c78      	adds	r0, r7, #1
 8011248:	d1d6      	bne.n	80111f8 <_vfiprintf_r+0x1bc>
 801124a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801124c:	07d9      	lsls	r1, r3, #31
 801124e:	d405      	bmi.n	801125c <_vfiprintf_r+0x220>
 8011250:	89ab      	ldrh	r3, [r5, #12]
 8011252:	059a      	lsls	r2, r3, #22
 8011254:	d402      	bmi.n	801125c <_vfiprintf_r+0x220>
 8011256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011258:	f000 fad5 	bl	8011806 <__retarget_lock_release_recursive>
 801125c:	89ab      	ldrh	r3, [r5, #12]
 801125e:	065b      	lsls	r3, r3, #25
 8011260:	f53f af12 	bmi.w	8011088 <_vfiprintf_r+0x4c>
 8011264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011266:	e711      	b.n	801108c <_vfiprintf_r+0x50>
 8011268:	ab03      	add	r3, sp, #12
 801126a:	9300      	str	r3, [sp, #0]
 801126c:	462a      	mov	r2, r5
 801126e:	4630      	mov	r0, r6
 8011270:	4b09      	ldr	r3, [pc, #36]	; (8011298 <_vfiprintf_r+0x25c>)
 8011272:	a904      	add	r1, sp, #16
 8011274:	f7fc ff32 	bl	800e0dc <_printf_i>
 8011278:	e7e4      	b.n	8011244 <_vfiprintf_r+0x208>
 801127a:	bf00      	nop
 801127c:	080120b0 	.word	0x080120b0
 8011280:	080120d0 	.word	0x080120d0
 8011284:	08012090 	.word	0x08012090
 8011288:	08011f7c 	.word	0x08011f7c
 801128c:	08011f82 	.word	0x08011f82
 8011290:	08011f86 	.word	0x08011f86
 8011294:	0800dba5 	.word	0x0800dba5
 8011298:	08011017 	.word	0x08011017

0801129c <nan>:
 801129c:	2000      	movs	r0, #0
 801129e:	4901      	ldr	r1, [pc, #4]	; (80112a4 <nan+0x8>)
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	7ff80000 	.word	0x7ff80000

080112a8 <_sbrk_r>:
 80112a8:	b538      	push	{r3, r4, r5, lr}
 80112aa:	2300      	movs	r3, #0
 80112ac:	4d05      	ldr	r5, [pc, #20]	; (80112c4 <_sbrk_r+0x1c>)
 80112ae:	4604      	mov	r4, r0
 80112b0:	4608      	mov	r0, r1
 80112b2:	602b      	str	r3, [r5, #0]
 80112b4:	f7f2 fb02 	bl	80038bc <_sbrk>
 80112b8:	1c43      	adds	r3, r0, #1
 80112ba:	d102      	bne.n	80112c2 <_sbrk_r+0x1a>
 80112bc:	682b      	ldr	r3, [r5, #0]
 80112be:	b103      	cbz	r3, 80112c2 <_sbrk_r+0x1a>
 80112c0:	6023      	str	r3, [r4, #0]
 80112c2:	bd38      	pop	{r3, r4, r5, pc}
 80112c4:	20001574 	.word	0x20001574

080112c8 <strncmp>:
 80112c8:	4603      	mov	r3, r0
 80112ca:	b510      	push	{r4, lr}
 80112cc:	b172      	cbz	r2, 80112ec <strncmp+0x24>
 80112ce:	3901      	subs	r1, #1
 80112d0:	1884      	adds	r4, r0, r2
 80112d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80112d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80112da:	4290      	cmp	r0, r2
 80112dc:	d101      	bne.n	80112e2 <strncmp+0x1a>
 80112de:	42a3      	cmp	r3, r4
 80112e0:	d101      	bne.n	80112e6 <strncmp+0x1e>
 80112e2:	1a80      	subs	r0, r0, r2
 80112e4:	bd10      	pop	{r4, pc}
 80112e6:	2800      	cmp	r0, #0
 80112e8:	d1f3      	bne.n	80112d2 <strncmp+0xa>
 80112ea:	e7fa      	b.n	80112e2 <strncmp+0x1a>
 80112ec:	4610      	mov	r0, r2
 80112ee:	e7f9      	b.n	80112e4 <strncmp+0x1c>

080112f0 <__swbuf_r>:
 80112f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f2:	460e      	mov	r6, r1
 80112f4:	4614      	mov	r4, r2
 80112f6:	4605      	mov	r5, r0
 80112f8:	b118      	cbz	r0, 8011302 <__swbuf_r+0x12>
 80112fa:	6983      	ldr	r3, [r0, #24]
 80112fc:	b90b      	cbnz	r3, 8011302 <__swbuf_r+0x12>
 80112fe:	f000 f9e3 	bl	80116c8 <__sinit>
 8011302:	4b21      	ldr	r3, [pc, #132]	; (8011388 <__swbuf_r+0x98>)
 8011304:	429c      	cmp	r4, r3
 8011306:	d12b      	bne.n	8011360 <__swbuf_r+0x70>
 8011308:	686c      	ldr	r4, [r5, #4]
 801130a:	69a3      	ldr	r3, [r4, #24]
 801130c:	60a3      	str	r3, [r4, #8]
 801130e:	89a3      	ldrh	r3, [r4, #12]
 8011310:	071a      	lsls	r2, r3, #28
 8011312:	d52f      	bpl.n	8011374 <__swbuf_r+0x84>
 8011314:	6923      	ldr	r3, [r4, #16]
 8011316:	b36b      	cbz	r3, 8011374 <__swbuf_r+0x84>
 8011318:	6923      	ldr	r3, [r4, #16]
 801131a:	6820      	ldr	r0, [r4, #0]
 801131c:	b2f6      	uxtb	r6, r6
 801131e:	1ac0      	subs	r0, r0, r3
 8011320:	6963      	ldr	r3, [r4, #20]
 8011322:	4637      	mov	r7, r6
 8011324:	4283      	cmp	r3, r0
 8011326:	dc04      	bgt.n	8011332 <__swbuf_r+0x42>
 8011328:	4621      	mov	r1, r4
 801132a:	4628      	mov	r0, r5
 801132c:	f000 f938 	bl	80115a0 <_fflush_r>
 8011330:	bb30      	cbnz	r0, 8011380 <__swbuf_r+0x90>
 8011332:	68a3      	ldr	r3, [r4, #8]
 8011334:	3001      	adds	r0, #1
 8011336:	3b01      	subs	r3, #1
 8011338:	60a3      	str	r3, [r4, #8]
 801133a:	6823      	ldr	r3, [r4, #0]
 801133c:	1c5a      	adds	r2, r3, #1
 801133e:	6022      	str	r2, [r4, #0]
 8011340:	701e      	strb	r6, [r3, #0]
 8011342:	6963      	ldr	r3, [r4, #20]
 8011344:	4283      	cmp	r3, r0
 8011346:	d004      	beq.n	8011352 <__swbuf_r+0x62>
 8011348:	89a3      	ldrh	r3, [r4, #12]
 801134a:	07db      	lsls	r3, r3, #31
 801134c:	d506      	bpl.n	801135c <__swbuf_r+0x6c>
 801134e:	2e0a      	cmp	r6, #10
 8011350:	d104      	bne.n	801135c <__swbuf_r+0x6c>
 8011352:	4621      	mov	r1, r4
 8011354:	4628      	mov	r0, r5
 8011356:	f000 f923 	bl	80115a0 <_fflush_r>
 801135a:	b988      	cbnz	r0, 8011380 <__swbuf_r+0x90>
 801135c:	4638      	mov	r0, r7
 801135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011360:	4b0a      	ldr	r3, [pc, #40]	; (801138c <__swbuf_r+0x9c>)
 8011362:	429c      	cmp	r4, r3
 8011364:	d101      	bne.n	801136a <__swbuf_r+0x7a>
 8011366:	68ac      	ldr	r4, [r5, #8]
 8011368:	e7cf      	b.n	801130a <__swbuf_r+0x1a>
 801136a:	4b09      	ldr	r3, [pc, #36]	; (8011390 <__swbuf_r+0xa0>)
 801136c:	429c      	cmp	r4, r3
 801136e:	bf08      	it	eq
 8011370:	68ec      	ldreq	r4, [r5, #12]
 8011372:	e7ca      	b.n	801130a <__swbuf_r+0x1a>
 8011374:	4621      	mov	r1, r4
 8011376:	4628      	mov	r0, r5
 8011378:	f000 f81a 	bl	80113b0 <__swsetup_r>
 801137c:	2800      	cmp	r0, #0
 801137e:	d0cb      	beq.n	8011318 <__swbuf_r+0x28>
 8011380:	f04f 37ff 	mov.w	r7, #4294967295
 8011384:	e7ea      	b.n	801135c <__swbuf_r+0x6c>
 8011386:	bf00      	nop
 8011388:	080120b0 	.word	0x080120b0
 801138c:	080120d0 	.word	0x080120d0
 8011390:	08012090 	.word	0x08012090

08011394 <__ascii_wctomb>:
 8011394:	4603      	mov	r3, r0
 8011396:	4608      	mov	r0, r1
 8011398:	b141      	cbz	r1, 80113ac <__ascii_wctomb+0x18>
 801139a:	2aff      	cmp	r2, #255	; 0xff
 801139c:	d904      	bls.n	80113a8 <__ascii_wctomb+0x14>
 801139e:	228a      	movs	r2, #138	; 0x8a
 80113a0:	f04f 30ff 	mov.w	r0, #4294967295
 80113a4:	601a      	str	r2, [r3, #0]
 80113a6:	4770      	bx	lr
 80113a8:	2001      	movs	r0, #1
 80113aa:	700a      	strb	r2, [r1, #0]
 80113ac:	4770      	bx	lr
	...

080113b0 <__swsetup_r>:
 80113b0:	4b32      	ldr	r3, [pc, #200]	; (801147c <__swsetup_r+0xcc>)
 80113b2:	b570      	push	{r4, r5, r6, lr}
 80113b4:	681d      	ldr	r5, [r3, #0]
 80113b6:	4606      	mov	r6, r0
 80113b8:	460c      	mov	r4, r1
 80113ba:	b125      	cbz	r5, 80113c6 <__swsetup_r+0x16>
 80113bc:	69ab      	ldr	r3, [r5, #24]
 80113be:	b913      	cbnz	r3, 80113c6 <__swsetup_r+0x16>
 80113c0:	4628      	mov	r0, r5
 80113c2:	f000 f981 	bl	80116c8 <__sinit>
 80113c6:	4b2e      	ldr	r3, [pc, #184]	; (8011480 <__swsetup_r+0xd0>)
 80113c8:	429c      	cmp	r4, r3
 80113ca:	d10f      	bne.n	80113ec <__swsetup_r+0x3c>
 80113cc:	686c      	ldr	r4, [r5, #4]
 80113ce:	89a3      	ldrh	r3, [r4, #12]
 80113d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113d4:	0719      	lsls	r1, r3, #28
 80113d6:	d42c      	bmi.n	8011432 <__swsetup_r+0x82>
 80113d8:	06dd      	lsls	r5, r3, #27
 80113da:	d411      	bmi.n	8011400 <__swsetup_r+0x50>
 80113dc:	2309      	movs	r3, #9
 80113de:	6033      	str	r3, [r6, #0]
 80113e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80113e4:	f04f 30ff 	mov.w	r0, #4294967295
 80113e8:	81a3      	strh	r3, [r4, #12]
 80113ea:	e03e      	b.n	801146a <__swsetup_r+0xba>
 80113ec:	4b25      	ldr	r3, [pc, #148]	; (8011484 <__swsetup_r+0xd4>)
 80113ee:	429c      	cmp	r4, r3
 80113f0:	d101      	bne.n	80113f6 <__swsetup_r+0x46>
 80113f2:	68ac      	ldr	r4, [r5, #8]
 80113f4:	e7eb      	b.n	80113ce <__swsetup_r+0x1e>
 80113f6:	4b24      	ldr	r3, [pc, #144]	; (8011488 <__swsetup_r+0xd8>)
 80113f8:	429c      	cmp	r4, r3
 80113fa:	bf08      	it	eq
 80113fc:	68ec      	ldreq	r4, [r5, #12]
 80113fe:	e7e6      	b.n	80113ce <__swsetup_r+0x1e>
 8011400:	0758      	lsls	r0, r3, #29
 8011402:	d512      	bpl.n	801142a <__swsetup_r+0x7a>
 8011404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011406:	b141      	cbz	r1, 801141a <__swsetup_r+0x6a>
 8011408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801140c:	4299      	cmp	r1, r3
 801140e:	d002      	beq.n	8011416 <__swsetup_r+0x66>
 8011410:	4630      	mov	r0, r6
 8011412:	f7ff fd0f 	bl	8010e34 <_free_r>
 8011416:	2300      	movs	r3, #0
 8011418:	6363      	str	r3, [r4, #52]	; 0x34
 801141a:	89a3      	ldrh	r3, [r4, #12]
 801141c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011420:	81a3      	strh	r3, [r4, #12]
 8011422:	2300      	movs	r3, #0
 8011424:	6063      	str	r3, [r4, #4]
 8011426:	6923      	ldr	r3, [r4, #16]
 8011428:	6023      	str	r3, [r4, #0]
 801142a:	89a3      	ldrh	r3, [r4, #12]
 801142c:	f043 0308 	orr.w	r3, r3, #8
 8011430:	81a3      	strh	r3, [r4, #12]
 8011432:	6923      	ldr	r3, [r4, #16]
 8011434:	b94b      	cbnz	r3, 801144a <__swsetup_r+0x9a>
 8011436:	89a3      	ldrh	r3, [r4, #12]
 8011438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801143c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011440:	d003      	beq.n	801144a <__swsetup_r+0x9a>
 8011442:	4621      	mov	r1, r4
 8011444:	4630      	mov	r0, r6
 8011446:	f000 fa05 	bl	8011854 <__smakebuf_r>
 801144a:	89a0      	ldrh	r0, [r4, #12]
 801144c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011450:	f010 0301 	ands.w	r3, r0, #1
 8011454:	d00a      	beq.n	801146c <__swsetup_r+0xbc>
 8011456:	2300      	movs	r3, #0
 8011458:	60a3      	str	r3, [r4, #8]
 801145a:	6963      	ldr	r3, [r4, #20]
 801145c:	425b      	negs	r3, r3
 801145e:	61a3      	str	r3, [r4, #24]
 8011460:	6923      	ldr	r3, [r4, #16]
 8011462:	b943      	cbnz	r3, 8011476 <__swsetup_r+0xc6>
 8011464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011468:	d1ba      	bne.n	80113e0 <__swsetup_r+0x30>
 801146a:	bd70      	pop	{r4, r5, r6, pc}
 801146c:	0781      	lsls	r1, r0, #30
 801146e:	bf58      	it	pl
 8011470:	6963      	ldrpl	r3, [r4, #20]
 8011472:	60a3      	str	r3, [r4, #8]
 8011474:	e7f4      	b.n	8011460 <__swsetup_r+0xb0>
 8011476:	2000      	movs	r0, #0
 8011478:	e7f7      	b.n	801146a <__swsetup_r+0xba>
 801147a:	bf00      	nop
 801147c:	20000514 	.word	0x20000514
 8011480:	080120b0 	.word	0x080120b0
 8011484:	080120d0 	.word	0x080120d0
 8011488:	08012090 	.word	0x08012090

0801148c <abort>:
 801148c:	2006      	movs	r0, #6
 801148e:	b508      	push	{r3, lr}
 8011490:	f000 fa54 	bl	801193c <raise>
 8011494:	2001      	movs	r0, #1
 8011496:	f7f2 f99e 	bl	80037d6 <_exit>
	...

0801149c <__sflush_r>:
 801149c:	898a      	ldrh	r2, [r1, #12]
 801149e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114a0:	4605      	mov	r5, r0
 80114a2:	0710      	lsls	r0, r2, #28
 80114a4:	460c      	mov	r4, r1
 80114a6:	d457      	bmi.n	8011558 <__sflush_r+0xbc>
 80114a8:	684b      	ldr	r3, [r1, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	dc04      	bgt.n	80114b8 <__sflush_r+0x1c>
 80114ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	dc01      	bgt.n	80114b8 <__sflush_r+0x1c>
 80114b4:	2000      	movs	r0, #0
 80114b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114ba:	2e00      	cmp	r6, #0
 80114bc:	d0fa      	beq.n	80114b4 <__sflush_r+0x18>
 80114be:	2300      	movs	r3, #0
 80114c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80114c4:	682f      	ldr	r7, [r5, #0]
 80114c6:	602b      	str	r3, [r5, #0]
 80114c8:	d032      	beq.n	8011530 <__sflush_r+0x94>
 80114ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80114cc:	89a3      	ldrh	r3, [r4, #12]
 80114ce:	075a      	lsls	r2, r3, #29
 80114d0:	d505      	bpl.n	80114de <__sflush_r+0x42>
 80114d2:	6863      	ldr	r3, [r4, #4]
 80114d4:	1ac0      	subs	r0, r0, r3
 80114d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114d8:	b10b      	cbz	r3, 80114de <__sflush_r+0x42>
 80114da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80114dc:	1ac0      	subs	r0, r0, r3
 80114de:	2300      	movs	r3, #0
 80114e0:	4602      	mov	r2, r0
 80114e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114e4:	4628      	mov	r0, r5
 80114e6:	6a21      	ldr	r1, [r4, #32]
 80114e8:	47b0      	blx	r6
 80114ea:	1c43      	adds	r3, r0, #1
 80114ec:	89a3      	ldrh	r3, [r4, #12]
 80114ee:	d106      	bne.n	80114fe <__sflush_r+0x62>
 80114f0:	6829      	ldr	r1, [r5, #0]
 80114f2:	291d      	cmp	r1, #29
 80114f4:	d82c      	bhi.n	8011550 <__sflush_r+0xb4>
 80114f6:	4a29      	ldr	r2, [pc, #164]	; (801159c <__sflush_r+0x100>)
 80114f8:	40ca      	lsrs	r2, r1
 80114fa:	07d6      	lsls	r6, r2, #31
 80114fc:	d528      	bpl.n	8011550 <__sflush_r+0xb4>
 80114fe:	2200      	movs	r2, #0
 8011500:	6062      	str	r2, [r4, #4]
 8011502:	6922      	ldr	r2, [r4, #16]
 8011504:	04d9      	lsls	r1, r3, #19
 8011506:	6022      	str	r2, [r4, #0]
 8011508:	d504      	bpl.n	8011514 <__sflush_r+0x78>
 801150a:	1c42      	adds	r2, r0, #1
 801150c:	d101      	bne.n	8011512 <__sflush_r+0x76>
 801150e:	682b      	ldr	r3, [r5, #0]
 8011510:	b903      	cbnz	r3, 8011514 <__sflush_r+0x78>
 8011512:	6560      	str	r0, [r4, #84]	; 0x54
 8011514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011516:	602f      	str	r7, [r5, #0]
 8011518:	2900      	cmp	r1, #0
 801151a:	d0cb      	beq.n	80114b4 <__sflush_r+0x18>
 801151c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011520:	4299      	cmp	r1, r3
 8011522:	d002      	beq.n	801152a <__sflush_r+0x8e>
 8011524:	4628      	mov	r0, r5
 8011526:	f7ff fc85 	bl	8010e34 <_free_r>
 801152a:	2000      	movs	r0, #0
 801152c:	6360      	str	r0, [r4, #52]	; 0x34
 801152e:	e7c2      	b.n	80114b6 <__sflush_r+0x1a>
 8011530:	6a21      	ldr	r1, [r4, #32]
 8011532:	2301      	movs	r3, #1
 8011534:	4628      	mov	r0, r5
 8011536:	47b0      	blx	r6
 8011538:	1c41      	adds	r1, r0, #1
 801153a:	d1c7      	bne.n	80114cc <__sflush_r+0x30>
 801153c:	682b      	ldr	r3, [r5, #0]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d0c4      	beq.n	80114cc <__sflush_r+0x30>
 8011542:	2b1d      	cmp	r3, #29
 8011544:	d001      	beq.n	801154a <__sflush_r+0xae>
 8011546:	2b16      	cmp	r3, #22
 8011548:	d101      	bne.n	801154e <__sflush_r+0xb2>
 801154a:	602f      	str	r7, [r5, #0]
 801154c:	e7b2      	b.n	80114b4 <__sflush_r+0x18>
 801154e:	89a3      	ldrh	r3, [r4, #12]
 8011550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011554:	81a3      	strh	r3, [r4, #12]
 8011556:	e7ae      	b.n	80114b6 <__sflush_r+0x1a>
 8011558:	690f      	ldr	r7, [r1, #16]
 801155a:	2f00      	cmp	r7, #0
 801155c:	d0aa      	beq.n	80114b4 <__sflush_r+0x18>
 801155e:	0793      	lsls	r3, r2, #30
 8011560:	bf18      	it	ne
 8011562:	2300      	movne	r3, #0
 8011564:	680e      	ldr	r6, [r1, #0]
 8011566:	bf08      	it	eq
 8011568:	694b      	ldreq	r3, [r1, #20]
 801156a:	1bf6      	subs	r6, r6, r7
 801156c:	600f      	str	r7, [r1, #0]
 801156e:	608b      	str	r3, [r1, #8]
 8011570:	2e00      	cmp	r6, #0
 8011572:	dd9f      	ble.n	80114b4 <__sflush_r+0x18>
 8011574:	4633      	mov	r3, r6
 8011576:	463a      	mov	r2, r7
 8011578:	4628      	mov	r0, r5
 801157a:	6a21      	ldr	r1, [r4, #32]
 801157c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8011580:	47e0      	blx	ip
 8011582:	2800      	cmp	r0, #0
 8011584:	dc06      	bgt.n	8011594 <__sflush_r+0xf8>
 8011586:	89a3      	ldrh	r3, [r4, #12]
 8011588:	f04f 30ff 	mov.w	r0, #4294967295
 801158c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011590:	81a3      	strh	r3, [r4, #12]
 8011592:	e790      	b.n	80114b6 <__sflush_r+0x1a>
 8011594:	4407      	add	r7, r0
 8011596:	1a36      	subs	r6, r6, r0
 8011598:	e7ea      	b.n	8011570 <__sflush_r+0xd4>
 801159a:	bf00      	nop
 801159c:	20400001 	.word	0x20400001

080115a0 <_fflush_r>:
 80115a0:	b538      	push	{r3, r4, r5, lr}
 80115a2:	690b      	ldr	r3, [r1, #16]
 80115a4:	4605      	mov	r5, r0
 80115a6:	460c      	mov	r4, r1
 80115a8:	b913      	cbnz	r3, 80115b0 <_fflush_r+0x10>
 80115aa:	2500      	movs	r5, #0
 80115ac:	4628      	mov	r0, r5
 80115ae:	bd38      	pop	{r3, r4, r5, pc}
 80115b0:	b118      	cbz	r0, 80115ba <_fflush_r+0x1a>
 80115b2:	6983      	ldr	r3, [r0, #24]
 80115b4:	b90b      	cbnz	r3, 80115ba <_fflush_r+0x1a>
 80115b6:	f000 f887 	bl	80116c8 <__sinit>
 80115ba:	4b14      	ldr	r3, [pc, #80]	; (801160c <_fflush_r+0x6c>)
 80115bc:	429c      	cmp	r4, r3
 80115be:	d11b      	bne.n	80115f8 <_fflush_r+0x58>
 80115c0:	686c      	ldr	r4, [r5, #4]
 80115c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d0ef      	beq.n	80115aa <_fflush_r+0xa>
 80115ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80115cc:	07d0      	lsls	r0, r2, #31
 80115ce:	d404      	bmi.n	80115da <_fflush_r+0x3a>
 80115d0:	0599      	lsls	r1, r3, #22
 80115d2:	d402      	bmi.n	80115da <_fflush_r+0x3a>
 80115d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115d6:	f000 f915 	bl	8011804 <__retarget_lock_acquire_recursive>
 80115da:	4628      	mov	r0, r5
 80115dc:	4621      	mov	r1, r4
 80115de:	f7ff ff5d 	bl	801149c <__sflush_r>
 80115e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115e4:	4605      	mov	r5, r0
 80115e6:	07da      	lsls	r2, r3, #31
 80115e8:	d4e0      	bmi.n	80115ac <_fflush_r+0xc>
 80115ea:	89a3      	ldrh	r3, [r4, #12]
 80115ec:	059b      	lsls	r3, r3, #22
 80115ee:	d4dd      	bmi.n	80115ac <_fflush_r+0xc>
 80115f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115f2:	f000 f908 	bl	8011806 <__retarget_lock_release_recursive>
 80115f6:	e7d9      	b.n	80115ac <_fflush_r+0xc>
 80115f8:	4b05      	ldr	r3, [pc, #20]	; (8011610 <_fflush_r+0x70>)
 80115fa:	429c      	cmp	r4, r3
 80115fc:	d101      	bne.n	8011602 <_fflush_r+0x62>
 80115fe:	68ac      	ldr	r4, [r5, #8]
 8011600:	e7df      	b.n	80115c2 <_fflush_r+0x22>
 8011602:	4b04      	ldr	r3, [pc, #16]	; (8011614 <_fflush_r+0x74>)
 8011604:	429c      	cmp	r4, r3
 8011606:	bf08      	it	eq
 8011608:	68ec      	ldreq	r4, [r5, #12]
 801160a:	e7da      	b.n	80115c2 <_fflush_r+0x22>
 801160c:	080120b0 	.word	0x080120b0
 8011610:	080120d0 	.word	0x080120d0
 8011614:	08012090 	.word	0x08012090

08011618 <std>:
 8011618:	2300      	movs	r3, #0
 801161a:	b510      	push	{r4, lr}
 801161c:	4604      	mov	r4, r0
 801161e:	e9c0 3300 	strd	r3, r3, [r0]
 8011622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011626:	6083      	str	r3, [r0, #8]
 8011628:	8181      	strh	r1, [r0, #12]
 801162a:	6643      	str	r3, [r0, #100]	; 0x64
 801162c:	81c2      	strh	r2, [r0, #14]
 801162e:	6183      	str	r3, [r0, #24]
 8011630:	4619      	mov	r1, r3
 8011632:	2208      	movs	r2, #8
 8011634:	305c      	adds	r0, #92	; 0x5c
 8011636:	f7fc fa0f 	bl	800da58 <memset>
 801163a:	4b05      	ldr	r3, [pc, #20]	; (8011650 <std+0x38>)
 801163c:	6224      	str	r4, [r4, #32]
 801163e:	6263      	str	r3, [r4, #36]	; 0x24
 8011640:	4b04      	ldr	r3, [pc, #16]	; (8011654 <std+0x3c>)
 8011642:	62a3      	str	r3, [r4, #40]	; 0x28
 8011644:	4b04      	ldr	r3, [pc, #16]	; (8011658 <std+0x40>)
 8011646:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011648:	4b04      	ldr	r3, [pc, #16]	; (801165c <std+0x44>)
 801164a:	6323      	str	r3, [r4, #48]	; 0x30
 801164c:	bd10      	pop	{r4, pc}
 801164e:	bf00      	nop
 8011650:	08011975 	.word	0x08011975
 8011654:	08011997 	.word	0x08011997
 8011658:	080119cf 	.word	0x080119cf
 801165c:	080119f3 	.word	0x080119f3

08011660 <_cleanup_r>:
 8011660:	4901      	ldr	r1, [pc, #4]	; (8011668 <_cleanup_r+0x8>)
 8011662:	f000 b8af 	b.w	80117c4 <_fwalk_reent>
 8011666:	bf00      	nop
 8011668:	080115a1 	.word	0x080115a1

0801166c <__sfmoreglue>:
 801166c:	2268      	movs	r2, #104	; 0x68
 801166e:	b570      	push	{r4, r5, r6, lr}
 8011670:	1e4d      	subs	r5, r1, #1
 8011672:	4355      	muls	r5, r2
 8011674:	460e      	mov	r6, r1
 8011676:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801167a:	f7ff fc43 	bl	8010f04 <_malloc_r>
 801167e:	4604      	mov	r4, r0
 8011680:	b140      	cbz	r0, 8011694 <__sfmoreglue+0x28>
 8011682:	2100      	movs	r1, #0
 8011684:	e9c0 1600 	strd	r1, r6, [r0]
 8011688:	300c      	adds	r0, #12
 801168a:	60a0      	str	r0, [r4, #8]
 801168c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011690:	f7fc f9e2 	bl	800da58 <memset>
 8011694:	4620      	mov	r0, r4
 8011696:	bd70      	pop	{r4, r5, r6, pc}

08011698 <__sfp_lock_acquire>:
 8011698:	4801      	ldr	r0, [pc, #4]	; (80116a0 <__sfp_lock_acquire+0x8>)
 801169a:	f000 b8b3 	b.w	8011804 <__retarget_lock_acquire_recursive>
 801169e:	bf00      	nop
 80116a0:	20001571 	.word	0x20001571

080116a4 <__sfp_lock_release>:
 80116a4:	4801      	ldr	r0, [pc, #4]	; (80116ac <__sfp_lock_release+0x8>)
 80116a6:	f000 b8ae 	b.w	8011806 <__retarget_lock_release_recursive>
 80116aa:	bf00      	nop
 80116ac:	20001571 	.word	0x20001571

080116b0 <__sinit_lock_acquire>:
 80116b0:	4801      	ldr	r0, [pc, #4]	; (80116b8 <__sinit_lock_acquire+0x8>)
 80116b2:	f000 b8a7 	b.w	8011804 <__retarget_lock_acquire_recursive>
 80116b6:	bf00      	nop
 80116b8:	20001572 	.word	0x20001572

080116bc <__sinit_lock_release>:
 80116bc:	4801      	ldr	r0, [pc, #4]	; (80116c4 <__sinit_lock_release+0x8>)
 80116be:	f000 b8a2 	b.w	8011806 <__retarget_lock_release_recursive>
 80116c2:	bf00      	nop
 80116c4:	20001572 	.word	0x20001572

080116c8 <__sinit>:
 80116c8:	b510      	push	{r4, lr}
 80116ca:	4604      	mov	r4, r0
 80116cc:	f7ff fff0 	bl	80116b0 <__sinit_lock_acquire>
 80116d0:	69a3      	ldr	r3, [r4, #24]
 80116d2:	b11b      	cbz	r3, 80116dc <__sinit+0x14>
 80116d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116d8:	f7ff bff0 	b.w	80116bc <__sinit_lock_release>
 80116dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80116e0:	6523      	str	r3, [r4, #80]	; 0x50
 80116e2:	4b13      	ldr	r3, [pc, #76]	; (8011730 <__sinit+0x68>)
 80116e4:	4a13      	ldr	r2, [pc, #76]	; (8011734 <__sinit+0x6c>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80116ea:	42a3      	cmp	r3, r4
 80116ec:	bf08      	it	eq
 80116ee:	2301      	moveq	r3, #1
 80116f0:	4620      	mov	r0, r4
 80116f2:	bf08      	it	eq
 80116f4:	61a3      	streq	r3, [r4, #24]
 80116f6:	f000 f81f 	bl	8011738 <__sfp>
 80116fa:	6060      	str	r0, [r4, #4]
 80116fc:	4620      	mov	r0, r4
 80116fe:	f000 f81b 	bl	8011738 <__sfp>
 8011702:	60a0      	str	r0, [r4, #8]
 8011704:	4620      	mov	r0, r4
 8011706:	f000 f817 	bl	8011738 <__sfp>
 801170a:	2200      	movs	r2, #0
 801170c:	2104      	movs	r1, #4
 801170e:	60e0      	str	r0, [r4, #12]
 8011710:	6860      	ldr	r0, [r4, #4]
 8011712:	f7ff ff81 	bl	8011618 <std>
 8011716:	2201      	movs	r2, #1
 8011718:	2109      	movs	r1, #9
 801171a:	68a0      	ldr	r0, [r4, #8]
 801171c:	f7ff ff7c 	bl	8011618 <std>
 8011720:	2202      	movs	r2, #2
 8011722:	2112      	movs	r1, #18
 8011724:	68e0      	ldr	r0, [r4, #12]
 8011726:	f7ff ff77 	bl	8011618 <std>
 801172a:	2301      	movs	r3, #1
 801172c:	61a3      	str	r3, [r4, #24]
 801172e:	e7d1      	b.n	80116d4 <__sinit+0xc>
 8011730:	08011bf4 	.word	0x08011bf4
 8011734:	08011661 	.word	0x08011661

08011738 <__sfp>:
 8011738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801173a:	4607      	mov	r7, r0
 801173c:	f7ff ffac 	bl	8011698 <__sfp_lock_acquire>
 8011740:	4b1e      	ldr	r3, [pc, #120]	; (80117bc <__sfp+0x84>)
 8011742:	681e      	ldr	r6, [r3, #0]
 8011744:	69b3      	ldr	r3, [r6, #24]
 8011746:	b913      	cbnz	r3, 801174e <__sfp+0x16>
 8011748:	4630      	mov	r0, r6
 801174a:	f7ff ffbd 	bl	80116c8 <__sinit>
 801174e:	3648      	adds	r6, #72	; 0x48
 8011750:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011754:	3b01      	subs	r3, #1
 8011756:	d503      	bpl.n	8011760 <__sfp+0x28>
 8011758:	6833      	ldr	r3, [r6, #0]
 801175a:	b30b      	cbz	r3, 80117a0 <__sfp+0x68>
 801175c:	6836      	ldr	r6, [r6, #0]
 801175e:	e7f7      	b.n	8011750 <__sfp+0x18>
 8011760:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011764:	b9d5      	cbnz	r5, 801179c <__sfp+0x64>
 8011766:	4b16      	ldr	r3, [pc, #88]	; (80117c0 <__sfp+0x88>)
 8011768:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801176c:	60e3      	str	r3, [r4, #12]
 801176e:	6665      	str	r5, [r4, #100]	; 0x64
 8011770:	f000 f847 	bl	8011802 <__retarget_lock_init_recursive>
 8011774:	f7ff ff96 	bl	80116a4 <__sfp_lock_release>
 8011778:	2208      	movs	r2, #8
 801177a:	4629      	mov	r1, r5
 801177c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011784:	6025      	str	r5, [r4, #0]
 8011786:	61a5      	str	r5, [r4, #24]
 8011788:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801178c:	f7fc f964 	bl	800da58 <memset>
 8011790:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011794:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011798:	4620      	mov	r0, r4
 801179a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801179c:	3468      	adds	r4, #104	; 0x68
 801179e:	e7d9      	b.n	8011754 <__sfp+0x1c>
 80117a0:	2104      	movs	r1, #4
 80117a2:	4638      	mov	r0, r7
 80117a4:	f7ff ff62 	bl	801166c <__sfmoreglue>
 80117a8:	4604      	mov	r4, r0
 80117aa:	6030      	str	r0, [r6, #0]
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d1d5      	bne.n	801175c <__sfp+0x24>
 80117b0:	f7ff ff78 	bl	80116a4 <__sfp_lock_release>
 80117b4:	230c      	movs	r3, #12
 80117b6:	603b      	str	r3, [r7, #0]
 80117b8:	e7ee      	b.n	8011798 <__sfp+0x60>
 80117ba:	bf00      	nop
 80117bc:	08011bf4 	.word	0x08011bf4
 80117c0:	ffff0001 	.word	0xffff0001

080117c4 <_fwalk_reent>:
 80117c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117c8:	4606      	mov	r6, r0
 80117ca:	4688      	mov	r8, r1
 80117cc:	2700      	movs	r7, #0
 80117ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80117d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80117d6:	f1b9 0901 	subs.w	r9, r9, #1
 80117da:	d505      	bpl.n	80117e8 <_fwalk_reent+0x24>
 80117dc:	6824      	ldr	r4, [r4, #0]
 80117de:	2c00      	cmp	r4, #0
 80117e0:	d1f7      	bne.n	80117d2 <_fwalk_reent+0xe>
 80117e2:	4638      	mov	r0, r7
 80117e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117e8:	89ab      	ldrh	r3, [r5, #12]
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d907      	bls.n	80117fe <_fwalk_reent+0x3a>
 80117ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80117f2:	3301      	adds	r3, #1
 80117f4:	d003      	beq.n	80117fe <_fwalk_reent+0x3a>
 80117f6:	4629      	mov	r1, r5
 80117f8:	4630      	mov	r0, r6
 80117fa:	47c0      	blx	r8
 80117fc:	4307      	orrs	r7, r0
 80117fe:	3568      	adds	r5, #104	; 0x68
 8011800:	e7e9      	b.n	80117d6 <_fwalk_reent+0x12>

08011802 <__retarget_lock_init_recursive>:
 8011802:	4770      	bx	lr

08011804 <__retarget_lock_acquire_recursive>:
 8011804:	4770      	bx	lr

08011806 <__retarget_lock_release_recursive>:
 8011806:	4770      	bx	lr

08011808 <__swhatbuf_r>:
 8011808:	b570      	push	{r4, r5, r6, lr}
 801180a:	460e      	mov	r6, r1
 801180c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011810:	4614      	mov	r4, r2
 8011812:	2900      	cmp	r1, #0
 8011814:	461d      	mov	r5, r3
 8011816:	b096      	sub	sp, #88	; 0x58
 8011818:	da08      	bge.n	801182c <__swhatbuf_r+0x24>
 801181a:	2200      	movs	r2, #0
 801181c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011820:	602a      	str	r2, [r5, #0]
 8011822:	061a      	lsls	r2, r3, #24
 8011824:	d410      	bmi.n	8011848 <__swhatbuf_r+0x40>
 8011826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801182a:	e00e      	b.n	801184a <__swhatbuf_r+0x42>
 801182c:	466a      	mov	r2, sp
 801182e:	f000 f907 	bl	8011a40 <_fstat_r>
 8011832:	2800      	cmp	r0, #0
 8011834:	dbf1      	blt.n	801181a <__swhatbuf_r+0x12>
 8011836:	9a01      	ldr	r2, [sp, #4]
 8011838:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801183c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011840:	425a      	negs	r2, r3
 8011842:	415a      	adcs	r2, r3
 8011844:	602a      	str	r2, [r5, #0]
 8011846:	e7ee      	b.n	8011826 <__swhatbuf_r+0x1e>
 8011848:	2340      	movs	r3, #64	; 0x40
 801184a:	2000      	movs	r0, #0
 801184c:	6023      	str	r3, [r4, #0]
 801184e:	b016      	add	sp, #88	; 0x58
 8011850:	bd70      	pop	{r4, r5, r6, pc}
	...

08011854 <__smakebuf_r>:
 8011854:	898b      	ldrh	r3, [r1, #12]
 8011856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011858:	079d      	lsls	r5, r3, #30
 801185a:	4606      	mov	r6, r0
 801185c:	460c      	mov	r4, r1
 801185e:	d507      	bpl.n	8011870 <__smakebuf_r+0x1c>
 8011860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011864:	6023      	str	r3, [r4, #0]
 8011866:	6123      	str	r3, [r4, #16]
 8011868:	2301      	movs	r3, #1
 801186a:	6163      	str	r3, [r4, #20]
 801186c:	b002      	add	sp, #8
 801186e:	bd70      	pop	{r4, r5, r6, pc}
 8011870:	466a      	mov	r2, sp
 8011872:	ab01      	add	r3, sp, #4
 8011874:	f7ff ffc8 	bl	8011808 <__swhatbuf_r>
 8011878:	9900      	ldr	r1, [sp, #0]
 801187a:	4605      	mov	r5, r0
 801187c:	4630      	mov	r0, r6
 801187e:	f7ff fb41 	bl	8010f04 <_malloc_r>
 8011882:	b948      	cbnz	r0, 8011898 <__smakebuf_r+0x44>
 8011884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011888:	059a      	lsls	r2, r3, #22
 801188a:	d4ef      	bmi.n	801186c <__smakebuf_r+0x18>
 801188c:	f023 0303 	bic.w	r3, r3, #3
 8011890:	f043 0302 	orr.w	r3, r3, #2
 8011894:	81a3      	strh	r3, [r4, #12]
 8011896:	e7e3      	b.n	8011860 <__smakebuf_r+0xc>
 8011898:	4b0d      	ldr	r3, [pc, #52]	; (80118d0 <__smakebuf_r+0x7c>)
 801189a:	62b3      	str	r3, [r6, #40]	; 0x28
 801189c:	89a3      	ldrh	r3, [r4, #12]
 801189e:	6020      	str	r0, [r4, #0]
 80118a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118a4:	81a3      	strh	r3, [r4, #12]
 80118a6:	9b00      	ldr	r3, [sp, #0]
 80118a8:	6120      	str	r0, [r4, #16]
 80118aa:	6163      	str	r3, [r4, #20]
 80118ac:	9b01      	ldr	r3, [sp, #4]
 80118ae:	b15b      	cbz	r3, 80118c8 <__smakebuf_r+0x74>
 80118b0:	4630      	mov	r0, r6
 80118b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118b6:	f000 f8d5 	bl	8011a64 <_isatty_r>
 80118ba:	b128      	cbz	r0, 80118c8 <__smakebuf_r+0x74>
 80118bc:	89a3      	ldrh	r3, [r4, #12]
 80118be:	f023 0303 	bic.w	r3, r3, #3
 80118c2:	f043 0301 	orr.w	r3, r3, #1
 80118c6:	81a3      	strh	r3, [r4, #12]
 80118c8:	89a0      	ldrh	r0, [r4, #12]
 80118ca:	4305      	orrs	r5, r0
 80118cc:	81a5      	strh	r5, [r4, #12]
 80118ce:	e7cd      	b.n	801186c <__smakebuf_r+0x18>
 80118d0:	08011661 	.word	0x08011661

080118d4 <__malloc_lock>:
 80118d4:	4801      	ldr	r0, [pc, #4]	; (80118dc <__malloc_lock+0x8>)
 80118d6:	f7ff bf95 	b.w	8011804 <__retarget_lock_acquire_recursive>
 80118da:	bf00      	nop
 80118dc:	20001570 	.word	0x20001570

080118e0 <__malloc_unlock>:
 80118e0:	4801      	ldr	r0, [pc, #4]	; (80118e8 <__malloc_unlock+0x8>)
 80118e2:	f7ff bf90 	b.w	8011806 <__retarget_lock_release_recursive>
 80118e6:	bf00      	nop
 80118e8:	20001570 	.word	0x20001570

080118ec <_raise_r>:
 80118ec:	291f      	cmp	r1, #31
 80118ee:	b538      	push	{r3, r4, r5, lr}
 80118f0:	4604      	mov	r4, r0
 80118f2:	460d      	mov	r5, r1
 80118f4:	d904      	bls.n	8011900 <_raise_r+0x14>
 80118f6:	2316      	movs	r3, #22
 80118f8:	6003      	str	r3, [r0, #0]
 80118fa:	f04f 30ff 	mov.w	r0, #4294967295
 80118fe:	bd38      	pop	{r3, r4, r5, pc}
 8011900:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011902:	b112      	cbz	r2, 801190a <_raise_r+0x1e>
 8011904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011908:	b94b      	cbnz	r3, 801191e <_raise_r+0x32>
 801190a:	4620      	mov	r0, r4
 801190c:	f000 f830 	bl	8011970 <_getpid_r>
 8011910:	462a      	mov	r2, r5
 8011912:	4601      	mov	r1, r0
 8011914:	4620      	mov	r0, r4
 8011916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801191a:	f000 b817 	b.w	801194c <_kill_r>
 801191e:	2b01      	cmp	r3, #1
 8011920:	d00a      	beq.n	8011938 <_raise_r+0x4c>
 8011922:	1c59      	adds	r1, r3, #1
 8011924:	d103      	bne.n	801192e <_raise_r+0x42>
 8011926:	2316      	movs	r3, #22
 8011928:	6003      	str	r3, [r0, #0]
 801192a:	2001      	movs	r0, #1
 801192c:	e7e7      	b.n	80118fe <_raise_r+0x12>
 801192e:	2400      	movs	r4, #0
 8011930:	4628      	mov	r0, r5
 8011932:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011936:	4798      	blx	r3
 8011938:	2000      	movs	r0, #0
 801193a:	e7e0      	b.n	80118fe <_raise_r+0x12>

0801193c <raise>:
 801193c:	4b02      	ldr	r3, [pc, #8]	; (8011948 <raise+0xc>)
 801193e:	4601      	mov	r1, r0
 8011940:	6818      	ldr	r0, [r3, #0]
 8011942:	f7ff bfd3 	b.w	80118ec <_raise_r>
 8011946:	bf00      	nop
 8011948:	20000514 	.word	0x20000514

0801194c <_kill_r>:
 801194c:	b538      	push	{r3, r4, r5, lr}
 801194e:	2300      	movs	r3, #0
 8011950:	4d06      	ldr	r5, [pc, #24]	; (801196c <_kill_r+0x20>)
 8011952:	4604      	mov	r4, r0
 8011954:	4608      	mov	r0, r1
 8011956:	4611      	mov	r1, r2
 8011958:	602b      	str	r3, [r5, #0]
 801195a:	f7f1 ff2c 	bl	80037b6 <_kill>
 801195e:	1c43      	adds	r3, r0, #1
 8011960:	d102      	bne.n	8011968 <_kill_r+0x1c>
 8011962:	682b      	ldr	r3, [r5, #0]
 8011964:	b103      	cbz	r3, 8011968 <_kill_r+0x1c>
 8011966:	6023      	str	r3, [r4, #0]
 8011968:	bd38      	pop	{r3, r4, r5, pc}
 801196a:	bf00      	nop
 801196c:	20001574 	.word	0x20001574

08011970 <_getpid_r>:
 8011970:	f7f1 bf1a 	b.w	80037a8 <_getpid>

08011974 <__sread>:
 8011974:	b510      	push	{r4, lr}
 8011976:	460c      	mov	r4, r1
 8011978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801197c:	f000 f894 	bl	8011aa8 <_read_r>
 8011980:	2800      	cmp	r0, #0
 8011982:	bfab      	itete	ge
 8011984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011986:	89a3      	ldrhlt	r3, [r4, #12]
 8011988:	181b      	addge	r3, r3, r0
 801198a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801198e:	bfac      	ite	ge
 8011990:	6563      	strge	r3, [r4, #84]	; 0x54
 8011992:	81a3      	strhlt	r3, [r4, #12]
 8011994:	bd10      	pop	{r4, pc}

08011996 <__swrite>:
 8011996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801199a:	461f      	mov	r7, r3
 801199c:	898b      	ldrh	r3, [r1, #12]
 801199e:	4605      	mov	r5, r0
 80119a0:	05db      	lsls	r3, r3, #23
 80119a2:	460c      	mov	r4, r1
 80119a4:	4616      	mov	r6, r2
 80119a6:	d505      	bpl.n	80119b4 <__swrite+0x1e>
 80119a8:	2302      	movs	r3, #2
 80119aa:	2200      	movs	r2, #0
 80119ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119b0:	f000 f868 	bl	8011a84 <_lseek_r>
 80119b4:	89a3      	ldrh	r3, [r4, #12]
 80119b6:	4632      	mov	r2, r6
 80119b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80119bc:	81a3      	strh	r3, [r4, #12]
 80119be:	4628      	mov	r0, r5
 80119c0:	463b      	mov	r3, r7
 80119c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119ca:	f000 b817 	b.w	80119fc <_write_r>

080119ce <__sseek>:
 80119ce:	b510      	push	{r4, lr}
 80119d0:	460c      	mov	r4, r1
 80119d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119d6:	f000 f855 	bl	8011a84 <_lseek_r>
 80119da:	1c43      	adds	r3, r0, #1
 80119dc:	89a3      	ldrh	r3, [r4, #12]
 80119de:	bf15      	itete	ne
 80119e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80119e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119ea:	81a3      	strheq	r3, [r4, #12]
 80119ec:	bf18      	it	ne
 80119ee:	81a3      	strhne	r3, [r4, #12]
 80119f0:	bd10      	pop	{r4, pc}

080119f2 <__sclose>:
 80119f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119f6:	f000 b813 	b.w	8011a20 <_close_r>
	...

080119fc <_write_r>:
 80119fc:	b538      	push	{r3, r4, r5, lr}
 80119fe:	4604      	mov	r4, r0
 8011a00:	4608      	mov	r0, r1
 8011a02:	4611      	mov	r1, r2
 8011a04:	2200      	movs	r2, #0
 8011a06:	4d05      	ldr	r5, [pc, #20]	; (8011a1c <_write_r+0x20>)
 8011a08:	602a      	str	r2, [r5, #0]
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	f7f1 ff0a 	bl	8003824 <_write>
 8011a10:	1c43      	adds	r3, r0, #1
 8011a12:	d102      	bne.n	8011a1a <_write_r+0x1e>
 8011a14:	682b      	ldr	r3, [r5, #0]
 8011a16:	b103      	cbz	r3, 8011a1a <_write_r+0x1e>
 8011a18:	6023      	str	r3, [r4, #0]
 8011a1a:	bd38      	pop	{r3, r4, r5, pc}
 8011a1c:	20001574 	.word	0x20001574

08011a20 <_close_r>:
 8011a20:	b538      	push	{r3, r4, r5, lr}
 8011a22:	2300      	movs	r3, #0
 8011a24:	4d05      	ldr	r5, [pc, #20]	; (8011a3c <_close_r+0x1c>)
 8011a26:	4604      	mov	r4, r0
 8011a28:	4608      	mov	r0, r1
 8011a2a:	602b      	str	r3, [r5, #0]
 8011a2c:	f7f1 ff16 	bl	800385c <_close>
 8011a30:	1c43      	adds	r3, r0, #1
 8011a32:	d102      	bne.n	8011a3a <_close_r+0x1a>
 8011a34:	682b      	ldr	r3, [r5, #0]
 8011a36:	b103      	cbz	r3, 8011a3a <_close_r+0x1a>
 8011a38:	6023      	str	r3, [r4, #0]
 8011a3a:	bd38      	pop	{r3, r4, r5, pc}
 8011a3c:	20001574 	.word	0x20001574

08011a40 <_fstat_r>:
 8011a40:	b538      	push	{r3, r4, r5, lr}
 8011a42:	2300      	movs	r3, #0
 8011a44:	4d06      	ldr	r5, [pc, #24]	; (8011a60 <_fstat_r+0x20>)
 8011a46:	4604      	mov	r4, r0
 8011a48:	4608      	mov	r0, r1
 8011a4a:	4611      	mov	r1, r2
 8011a4c:	602b      	str	r3, [r5, #0]
 8011a4e:	f7f1 ff10 	bl	8003872 <_fstat>
 8011a52:	1c43      	adds	r3, r0, #1
 8011a54:	d102      	bne.n	8011a5c <_fstat_r+0x1c>
 8011a56:	682b      	ldr	r3, [r5, #0]
 8011a58:	b103      	cbz	r3, 8011a5c <_fstat_r+0x1c>
 8011a5a:	6023      	str	r3, [r4, #0]
 8011a5c:	bd38      	pop	{r3, r4, r5, pc}
 8011a5e:	bf00      	nop
 8011a60:	20001574 	.word	0x20001574

08011a64 <_isatty_r>:
 8011a64:	b538      	push	{r3, r4, r5, lr}
 8011a66:	2300      	movs	r3, #0
 8011a68:	4d05      	ldr	r5, [pc, #20]	; (8011a80 <_isatty_r+0x1c>)
 8011a6a:	4604      	mov	r4, r0
 8011a6c:	4608      	mov	r0, r1
 8011a6e:	602b      	str	r3, [r5, #0]
 8011a70:	f7f1 ff0e 	bl	8003890 <_isatty>
 8011a74:	1c43      	adds	r3, r0, #1
 8011a76:	d102      	bne.n	8011a7e <_isatty_r+0x1a>
 8011a78:	682b      	ldr	r3, [r5, #0]
 8011a7a:	b103      	cbz	r3, 8011a7e <_isatty_r+0x1a>
 8011a7c:	6023      	str	r3, [r4, #0]
 8011a7e:	bd38      	pop	{r3, r4, r5, pc}
 8011a80:	20001574 	.word	0x20001574

08011a84 <_lseek_r>:
 8011a84:	b538      	push	{r3, r4, r5, lr}
 8011a86:	4604      	mov	r4, r0
 8011a88:	4608      	mov	r0, r1
 8011a8a:	4611      	mov	r1, r2
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	4d05      	ldr	r5, [pc, #20]	; (8011aa4 <_lseek_r+0x20>)
 8011a90:	602a      	str	r2, [r5, #0]
 8011a92:	461a      	mov	r2, r3
 8011a94:	f7f1 ff06 	bl	80038a4 <_lseek>
 8011a98:	1c43      	adds	r3, r0, #1
 8011a9a:	d102      	bne.n	8011aa2 <_lseek_r+0x1e>
 8011a9c:	682b      	ldr	r3, [r5, #0]
 8011a9e:	b103      	cbz	r3, 8011aa2 <_lseek_r+0x1e>
 8011aa0:	6023      	str	r3, [r4, #0]
 8011aa2:	bd38      	pop	{r3, r4, r5, pc}
 8011aa4:	20001574 	.word	0x20001574

08011aa8 <_read_r>:
 8011aa8:	b538      	push	{r3, r4, r5, lr}
 8011aaa:	4604      	mov	r4, r0
 8011aac:	4608      	mov	r0, r1
 8011aae:	4611      	mov	r1, r2
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	4d05      	ldr	r5, [pc, #20]	; (8011ac8 <_read_r+0x20>)
 8011ab4:	602a      	str	r2, [r5, #0]
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	f7f1 fe97 	bl	80037ea <_read>
 8011abc:	1c43      	adds	r3, r0, #1
 8011abe:	d102      	bne.n	8011ac6 <_read_r+0x1e>
 8011ac0:	682b      	ldr	r3, [r5, #0]
 8011ac2:	b103      	cbz	r3, 8011ac6 <_read_r+0x1e>
 8011ac4:	6023      	str	r3, [r4, #0]
 8011ac6:	bd38      	pop	{r3, r4, r5, pc}
 8011ac8:	20001574 	.word	0x20001574

08011acc <_init>:
 8011acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ace:	bf00      	nop
 8011ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ad2:	bc08      	pop	{r3}
 8011ad4:	469e      	mov	lr, r3
 8011ad6:	4770      	bx	lr

08011ad8 <_fini>:
 8011ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ada:	bf00      	nop
 8011adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ade:	bc08      	pop	{r3}
 8011ae0:	469e      	mov	lr, r3
 8011ae2:	4770      	bx	lr
