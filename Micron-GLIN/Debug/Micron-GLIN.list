
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135c0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  08013700  08013700  00023700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f78  08013f78  00030b0c  2**0
                  CONTENTS
  4 .ARM          00000008  08013f78  08013f78  00023f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f80  08013f80  00030b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f80  08013f80  00023f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f84  08013f84  00023f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b0c  20000000  08013f88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ef8  20000b0c  08014a94  00030b0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20001a04  08014a94  00031a04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030b0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b625  00000000  00000000  00030b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d51  00000000  00000000  0004c15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00050eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  000527a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a702  00000000  00000000  00053e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002019d  00000000  00000000  0006e572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000880d8  00000000  00000000  0008e70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001167e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d64  00000000  00000000  00116838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000b0c 	.word	0x20000b0c
 800015c:	00000000 	.word	0x00000000
 8000160:	080136e8 	.word	0x080136e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000b10 	.word	0x20000b10
 800017c:	080136e8 	.word	0x080136e8

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_frsub>:
 8000bac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	e002      	b.n	8000bb8 <__addsf3>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_fsub>:
 8000bb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb8 <__addsf3>:
 8000bb8:	0042      	lsls	r2, r0, #1
 8000bba:	bf1f      	itttt	ne
 8000bbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc0:	ea92 0f03 	teqne	r2, r3
 8000bc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bcc:	d06a      	beq.n	8000ca4 <__addsf3+0xec>
 8000bce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd6:	bfc1      	itttt	gt
 8000bd8:	18d2      	addgt	r2, r2, r3
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	4048      	eorgt	r0, r1
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	bfb8      	it	lt
 8000be2:	425b      	neglt	r3, r3
 8000be4:	2b19      	cmp	r3, #25
 8000be6:	bf88      	it	hi
 8000be8:	4770      	bxhi	lr
 8000bea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c06:	bf18      	it	ne
 8000c08:	4249      	negne	r1, r1
 8000c0a:	ea92 0f03 	teq	r2, r3
 8000c0e:	d03f      	beq.n	8000c90 <__addsf3+0xd8>
 8000c10:	f1a2 0201 	sub.w	r2, r2, #1
 8000c14:	fa41 fc03 	asr.w	ip, r1, r3
 8000c18:	eb10 000c 	adds.w	r0, r0, ip
 8000c1c:	f1c3 0320 	rsb	r3, r3, #32
 8000c20:	fa01 f103 	lsl.w	r1, r1, r3
 8000c24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__addsf3+0x78>
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c34:	d313      	bcc.n	8000c5e <__addsf3+0xa6>
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3a:	d306      	bcc.n	8000c4a <__addsf3+0x92>
 8000c3c:	0840      	lsrs	r0, r0, #1
 8000c3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c42:	f102 0201 	add.w	r2, r2, #1
 8000c46:	2afe      	cmp	r2, #254	; 0xfe
 8000c48:	d251      	bcs.n	8000cee <__addsf3+0x136>
 8000c4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	ea40 0003 	orr.w	r0, r0, r3
 8000c5c:	4770      	bx	lr
 8000c5e:	0049      	lsls	r1, r1, #1
 8000c60:	eb40 0000 	adc.w	r0, r0, r0
 8000c64:	3a01      	subs	r2, #1
 8000c66:	bf28      	it	cs
 8000c68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c6c:	d2ed      	bcs.n	8000c4a <__addsf3+0x92>
 8000c6e:	fab0 fc80 	clz	ip, r0
 8000c72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c76:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7e:	bfaa      	itet	ge
 8000c80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c84:	4252      	neglt	r2, r2
 8000c86:	4318      	orrge	r0, r3
 8000c88:	bfbc      	itt	lt
 8000c8a:	40d0      	lsrlt	r0, r2
 8000c8c:	4318      	orrlt	r0, r3
 8000c8e:	4770      	bx	lr
 8000c90:	f092 0f00 	teq	r2, #0
 8000c94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c98:	bf06      	itte	eq
 8000c9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9e:	3201      	addeq	r2, #1
 8000ca0:	3b01      	subne	r3, #1
 8000ca2:	e7b5      	b.n	8000c10 <__addsf3+0x58>
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d021      	beq.n	8000cf8 <__addsf3+0x140>
 8000cb4:	ea92 0f03 	teq	r2, r3
 8000cb8:	d004      	beq.n	8000cc4 <__addsf3+0x10c>
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	4608      	moveq	r0, r1
 8000cc2:	4770      	bx	lr
 8000cc4:	ea90 0f01 	teq	r0, r1
 8000cc8:	bf1c      	itt	ne
 8000cca:	2000      	movne	r0, #0
 8000ccc:	4770      	bxne	lr
 8000cce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cd2:	d104      	bne.n	8000cde <__addsf3+0x126>
 8000cd4:	0040      	lsls	r0, r0, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ce2:	bf3c      	itt	cc
 8000ce4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bxcc	lr
 8000cea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf6:	4770      	bx	lr
 8000cf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cfc:	bf16      	itet	ne
 8000cfe:	4608      	movne	r0, r1
 8000d00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d04:	4601      	movne	r1, r0
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	bf06      	itte	eq
 8000d0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0e:	ea90 0f01 	teqeq	r0, r1
 8000d12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_ui2f>:
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e004      	b.n	8000d28 <__aeabi_i2f+0x8>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_i2f>:
 8000d20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	bf48      	it	mi
 8000d26:	4240      	negmi	r0, r0
 8000d28:	ea5f 0c00 	movs.w	ip, r0
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d34:	4601      	mov	r1, r0
 8000d36:	f04f 0000 	mov.w	r0, #0
 8000d3a:	e01c      	b.n	8000d76 <__aeabi_l2f+0x2a>

08000d3c <__aeabi_ul2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e00a      	b.n	8000d60 <__aeabi_l2f+0x14>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_l2f>:
 8000d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d58:	d502      	bpl.n	8000d60 <__aeabi_l2f+0x14>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	ea5f 0c01 	movs.w	ip, r1
 8000d64:	bf02      	ittt	eq
 8000d66:	4684      	moveq	ip, r0
 8000d68:	4601      	moveq	r1, r0
 8000d6a:	2000      	moveq	r0, #0
 8000d6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d70:	bf08      	it	eq
 8000d72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d7a:	fabc f28c 	clz	r2, ip
 8000d7e:	3a08      	subs	r2, #8
 8000d80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d84:	db10      	blt.n	8000da8 <__aeabi_l2f+0x5c>
 8000d86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d90:	f1c2 0220 	rsb	r2, r2, #32
 8000d94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d98:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9c:	eb43 0002 	adc.w	r0, r3, r2
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f102 0220 	add.w	r2, r2, #32
 8000dac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_fmul>:
 8000dc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd0:	bf1e      	ittt	ne
 8000dd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd6:	ea92 0f0c 	teqne	r2, ip
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d06f      	beq.n	8000ec0 <__aeabi_fmul+0xf8>
 8000de0:	441a      	add	r2, r3
 8000de2:	ea80 0c01 	eor.w	ip, r0, r1
 8000de6:	0240      	lsls	r0, r0, #9
 8000de8:	bf18      	it	ne
 8000dea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dee:	d01e      	beq.n	8000e2e <__aeabi_fmul+0x66>
 8000df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000e00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e08:	bf3e      	ittt	cc
 8000e0a:	0049      	lslcc	r1, r1, #1
 8000e0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e10:	005b      	lslcc	r3, r3, #1
 8000e12:	ea40 0001 	orr.w	r0, r0, r1
 8000e16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e1a:	2afd      	cmp	r2, #253	; 0xfd
 8000e1c:	d81d      	bhi.n	8000e5a <__aeabi_fmul+0x92>
 8000e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e26:	bf08      	it	eq
 8000e28:	f020 0001 	biceq.w	r0, r0, #1
 8000e2c:	4770      	bx	lr
 8000e2e:	f090 0f00 	teq	r0, #0
 8000e32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e36:	bf08      	it	eq
 8000e38:	0249      	lsleq	r1, r1, #9
 8000e3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e42:	3a7f      	subs	r2, #127	; 0x7f
 8000e44:	bfc2      	ittt	gt
 8000e46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4e:	4770      	bxgt	lr
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	dc5d      	bgt.n	8000f18 <__aeabi_fmul+0x150>
 8000e5c:	f112 0f19 	cmn.w	r2, #25
 8000e60:	bfdc      	itt	le
 8000e62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e66:	4770      	bxle	lr
 8000e68:	f1c2 0200 	rsb	r2, r2, #0
 8000e6c:	0041      	lsls	r1, r0, #1
 8000e6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e72:	f1c2 0220 	rsb	r2, r2, #32
 8000e76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7e:	f140 0000 	adc.w	r0, r0, #0
 8000e82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e86:	bf08      	it	eq
 8000e88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e8c:	4770      	bx	lr
 8000e8e:	f092 0f00 	teq	r2, #0
 8000e92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e96:	bf02      	ittt	eq
 8000e98:	0040      	lsleq	r0, r0, #1
 8000e9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9e:	3a01      	subeq	r2, #1
 8000ea0:	d0f9      	beq.n	8000e96 <__aeabi_fmul+0xce>
 8000ea2:	ea40 000c 	orr.w	r0, r0, ip
 8000ea6:	f093 0f00 	teq	r3, #0
 8000eaa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0049      	lsleq	r1, r1, #1
 8000eb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb6:	3b01      	subeq	r3, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xe6>
 8000eba:	ea41 010c 	orr.w	r1, r1, ip
 8000ebe:	e78f      	b.n	8000de0 <__aeabi_fmul+0x18>
 8000ec0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	bf18      	it	ne
 8000eca:	ea93 0f0c 	teqne	r3, ip
 8000ece:	d00a      	beq.n	8000ee6 <__aeabi_fmul+0x11e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1d8      	bne.n	8000e8e <__aeabi_fmul+0xc6>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	4770      	bx	lr
 8000ee6:	f090 0f00 	teq	r0, #0
 8000eea:	bf17      	itett	ne
 8000eec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ef0:	4608      	moveq	r0, r1
 8000ef2:	f091 0f00 	teqne	r1, #0
 8000ef6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000efa:	d014      	beq.n	8000f26 <__aeabi_fmul+0x15e>
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d101      	bne.n	8000f06 <__aeabi_fmul+0x13e>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d10f      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f06:	ea93 0f0c 	teq	r3, ip
 8000f0a:	d103      	bne.n	8000f14 <__aeabi_fmul+0x14c>
 8000f0c:	024b      	lsls	r3, r1, #9
 8000f0e:	bf18      	it	ne
 8000f10:	4608      	movne	r0, r1
 8000f12:	d108      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f14:	ea80 0001 	eor.w	r0, r0, r1
 8000f18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f24:	4770      	bx	lr
 8000f26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_fdiv>:
 8000f30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f38:	bf1e      	ittt	ne
 8000f3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3e:	ea92 0f0c 	teqne	r2, ip
 8000f42:	ea93 0f0c 	teqne	r3, ip
 8000f46:	d069      	beq.n	800101c <__aeabi_fdiv+0xec>
 8000f48:	eba2 0203 	sub.w	r2, r2, r3
 8000f4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f56:	d037      	beq.n	8000fc8 <__aeabi_fdiv+0x98>
 8000f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	bf38      	it	cc
 8000f6c:	005b      	lslcc	r3, r3, #1
 8000f6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f76:	428b      	cmp	r3, r1
 8000f78:	bf24      	itt	cs
 8000f7a:	1a5b      	subcs	r3, r3, r1
 8000f7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f84:	bf24      	itt	cs
 8000f86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f92:	bf24      	itt	cs
 8000f94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa0:	bf24      	itt	cs
 8000fa2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	bf18      	it	ne
 8000fae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb2:	d1e0      	bne.n	8000f76 <__aeabi_fdiv+0x46>
 8000fb4:	2afd      	cmp	r2, #253	; 0xfd
 8000fb6:	f63f af50 	bhi.w	8000e5a <__aeabi_fmul+0x92>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc0:	bf08      	it	eq
 8000fc2:	f020 0001 	biceq.w	r0, r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd0:	327f      	adds	r2, #127	; 0x7f
 8000fd2:	bfc2      	ittt	gt
 8000fd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fdc:	4770      	bxgt	lr
 8000fde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	e737      	b.n	8000e5a <__aeabi_fmul+0x92>
 8000fea:	f092 0f00 	teq	r2, #0
 8000fee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ff2:	bf02      	ittt	eq
 8000ff4:	0040      	lsleq	r0, r0, #1
 8000ff6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ffa:	3a01      	subeq	r2, #1
 8000ffc:	d0f9      	beq.n	8000ff2 <__aeabi_fdiv+0xc2>
 8000ffe:	ea40 000c 	orr.w	r0, r0, ip
 8001002:	f093 0f00 	teq	r3, #0
 8001006:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0049      	lsleq	r1, r1, #1
 800100e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001012:	3b01      	subeq	r3, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xda>
 8001016:	ea41 010c 	orr.w	r1, r1, ip
 800101a:	e795      	b.n	8000f48 <__aeabi_fdiv+0x18>
 800101c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001020:	ea92 0f0c 	teq	r2, ip
 8001024:	d108      	bne.n	8001038 <__aeabi_fdiv+0x108>
 8001026:	0242      	lsls	r2, r0, #9
 8001028:	f47f af7d 	bne.w	8000f26 <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	f47f af70 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 8001034:	4608      	mov	r0, r1
 8001036:	e776      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001038:	ea93 0f0c 	teq	r3, ip
 800103c:	d104      	bne.n	8001048 <__aeabi_fdiv+0x118>
 800103e:	024b      	lsls	r3, r1, #9
 8001040:	f43f af4c 	beq.w	8000edc <__aeabi_fmul+0x114>
 8001044:	4608      	mov	r0, r1
 8001046:	e76e      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001048:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800104c:	bf18      	it	ne
 800104e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001052:	d1ca      	bne.n	8000fea <__aeabi_fdiv+0xba>
 8001054:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001058:	f47f af5c 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 800105c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001060:	f47f af3c 	bne.w	8000edc <__aeabi_fmul+0x114>
 8001064:	e75f      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001066:	bf00      	nop

08001068 <__gesf2>:
 8001068:	f04f 3cff 	mov.w	ip, #4294967295
 800106c:	e006      	b.n	800107c <__cmpsf2+0x4>
 800106e:	bf00      	nop

08001070 <__lesf2>:
 8001070:	f04f 0c01 	mov.w	ip, #1
 8001074:	e002      	b.n	800107c <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__cmpsf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	bf18      	it	ne
 800108e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001092:	d011      	beq.n	80010b8 <__cmpsf2+0x40>
 8001094:	b001      	add	sp, #4
 8001096:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800109a:	bf18      	it	ne
 800109c:	ea90 0f01 	teqne	r0, r1
 80010a0:	bf58      	it	pl
 80010a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a6:	bf88      	it	hi
 80010a8:	17c8      	asrhi	r0, r1, #31
 80010aa:	bf38      	it	cc
 80010ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b0:	bf18      	it	ne
 80010b2:	f040 0001 	orrne.w	r0, r0, #1
 80010b6:	4770      	bx	lr
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__cmpsf2+0x4c>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d105      	bne.n	80010d0 <__cmpsf2+0x58>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d1e4      	bne.n	8001094 <__cmpsf2+0x1c>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d0e1      	beq.n	8001094 <__cmpsf2+0x1c>
 80010d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <__aeabi_cfrcmple>:
 80010d8:	4684      	mov	ip, r0
 80010da:	4608      	mov	r0, r1
 80010dc:	4661      	mov	r1, ip
 80010de:	e7ff      	b.n	80010e0 <__aeabi_cfcmpeq>

080010e0 <__aeabi_cfcmpeq>:
 80010e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010e2:	f7ff ffc9 	bl	8001078 <__cmpsf2>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	bf48      	it	mi
 80010ea:	f110 0f00 	cmnmi.w	r0, #0
 80010ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f0 <__aeabi_fcmpeq>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff fff4 	bl	80010e0 <__aeabi_cfcmpeq>
 80010f8:	bf0c      	ite	eq
 80010fa:	2001      	moveq	r0, #1
 80010fc:	2000      	movne	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmplt>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffea 	bl	80010e0 <__aeabi_cfcmpeq>
 800110c:	bf34      	ite	cc
 800110e:	2001      	movcc	r0, #1
 8001110:	2000      	movcs	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmple>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffe0 	bl	80010e0 <__aeabi_cfcmpeq>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpge>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffd2 	bl	80010d8 <__aeabi_cfrcmple>
 8001134:	bf94      	ite	ls
 8001136:	2001      	movls	r0, #1
 8001138:	2000      	movhi	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpgt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffc8 	bl	80010d8 <__aeabi_cfrcmple>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_f2uiz>:
 8001154:	0042      	lsls	r2, r0, #1
 8001156:	d20e      	bcs.n	8001176 <__aeabi_f2uiz+0x22>
 8001158:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800115c:	d30b      	bcc.n	8001176 <__aeabi_f2uiz+0x22>
 800115e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001162:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001166:	d409      	bmi.n	800117c <__aeabi_f2uiz+0x28>
 8001168:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	4770      	bx	lr
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	4770      	bx	lr
 800117c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001180:	d101      	bne.n	8001186 <__aeabi_f2uiz+0x32>
 8001182:	0242      	lsls	r2, r0, #9
 8001184:	d102      	bne.n	800118c <__aeabi_f2uiz+0x38>
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	4770      	bx	lr
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <__aeabi_uldivmod>:
 8001194:	b953      	cbnz	r3, 80011ac <__aeabi_uldivmod+0x18>
 8001196:	b94a      	cbnz	r2, 80011ac <__aeabi_uldivmod+0x18>
 8001198:	2900      	cmp	r1, #0
 800119a:	bf08      	it	eq
 800119c:	2800      	cmpeq	r0, #0
 800119e:	bf1c      	itt	ne
 80011a0:	f04f 31ff 	movne.w	r1, #4294967295
 80011a4:	f04f 30ff 	movne.w	r0, #4294967295
 80011a8:	f000 b9ae 	b.w	8001508 <__aeabi_idiv0>
 80011ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b4:	f000 f83e 	bl	8001234 <__udivmoddi4>
 80011b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c0:	b004      	add	sp, #16
 80011c2:	4770      	bx	lr

080011c4 <__aeabi_d2lz>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4605      	mov	r5, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4628      	mov	r0, r5
 80011d0:	4621      	mov	r1, r4
 80011d2:	f7ff fc15 	bl	8000a00 <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x20>
 80011d8:	4628      	mov	r0, r5
 80011da:	4621      	mov	r1, r4
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4628      	mov	r0, r5
 80011e6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f98b 	bl	800051c <__aeabi_dmul>
 8001206:	f7ff fc61 	bl	8000acc <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f90c 	bl	8000428 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f982 	bl	800051c <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffc4 	bl	80001ac <__aeabi_dsub>
 8001224:	f7ff fc52 	bl	8000acc <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000

08001234 <__udivmoddi4>:
 8001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001238:	9e08      	ldr	r6, [sp, #32]
 800123a:	460d      	mov	r5, r1
 800123c:	4604      	mov	r4, r0
 800123e:	4688      	mov	r8, r1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d14d      	bne.n	80012e0 <__udivmoddi4+0xac>
 8001244:	428a      	cmp	r2, r1
 8001246:	4694      	mov	ip, r2
 8001248:	d968      	bls.n	800131c <__udivmoddi4+0xe8>
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b152      	cbz	r2, 8001266 <__udivmoddi4+0x32>
 8001250:	fa01 f302 	lsl.w	r3, r1, r2
 8001254:	f1c2 0120 	rsb	r1, r2, #32
 8001258:	fa20 f101 	lsr.w	r1, r0, r1
 800125c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001260:	ea41 0803 	orr.w	r8, r1, r3
 8001264:	4094      	lsls	r4, r2
 8001266:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800126a:	fbb8 f7f1 	udiv	r7, r8, r1
 800126e:	fa1f fe8c 	uxth.w	lr, ip
 8001272:	fb01 8817 	mls	r8, r1, r7, r8
 8001276:	fb07 f00e 	mul.w	r0, r7, lr
 800127a:	0c23      	lsrs	r3, r4, #16
 800127c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001280:	4298      	cmp	r0, r3
 8001282:	d90a      	bls.n	800129a <__udivmoddi4+0x66>
 8001284:	eb1c 0303 	adds.w	r3, ip, r3
 8001288:	f107 35ff 	add.w	r5, r7, #4294967295
 800128c:	f080 811e 	bcs.w	80014cc <__udivmoddi4+0x298>
 8001290:	4298      	cmp	r0, r3
 8001292:	f240 811b 	bls.w	80014cc <__udivmoddi4+0x298>
 8001296:	3f02      	subs	r7, #2
 8001298:	4463      	add	r3, ip
 800129a:	1a1b      	subs	r3, r3, r0
 800129c:	fbb3 f0f1 	udiv	r0, r3, r1
 80012a0:	fb01 3310 	mls	r3, r1, r0, r3
 80012a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80012a8:	b2a4      	uxth	r4, r4
 80012aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012ae:	45a6      	cmp	lr, r4
 80012b0:	d90a      	bls.n	80012c8 <__udivmoddi4+0x94>
 80012b2:	eb1c 0404 	adds.w	r4, ip, r4
 80012b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80012ba:	f080 8109 	bcs.w	80014d0 <__udivmoddi4+0x29c>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f240 8106 	bls.w	80014d0 <__udivmoddi4+0x29c>
 80012c4:	4464      	add	r4, ip
 80012c6:	3802      	subs	r0, #2
 80012c8:	2100      	movs	r1, #0
 80012ca:	eba4 040e 	sub.w	r4, r4, lr
 80012ce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012d2:	b11e      	cbz	r6, 80012dc <__udivmoddi4+0xa8>
 80012d4:	2300      	movs	r3, #0
 80012d6:	40d4      	lsrs	r4, r2
 80012d8:	e9c6 4300 	strd	r4, r3, [r6]
 80012dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0xc2>
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	f000 80ee 	beq.w	80014c6 <__udivmoddi4+0x292>
 80012ea:	2100      	movs	r1, #0
 80012ec:	e9c6 0500 	strd	r0, r5, [r6]
 80012f0:	4608      	mov	r0, r1
 80012f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f6:	fab3 f183 	clz	r1, r3
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d14a      	bne.n	8001394 <__udivmoddi4+0x160>
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d302      	bcc.n	8001308 <__udivmoddi4+0xd4>
 8001302:	4282      	cmp	r2, r0
 8001304:	f200 80fc 	bhi.w	8001500 <__udivmoddi4+0x2cc>
 8001308:	1a84      	subs	r4, r0, r2
 800130a:	eb65 0303 	sbc.w	r3, r5, r3
 800130e:	2001      	movs	r0, #1
 8001310:	4698      	mov	r8, r3
 8001312:	2e00      	cmp	r6, #0
 8001314:	d0e2      	beq.n	80012dc <__udivmoddi4+0xa8>
 8001316:	e9c6 4800 	strd	r4, r8, [r6]
 800131a:	e7df      	b.n	80012dc <__udivmoddi4+0xa8>
 800131c:	b902      	cbnz	r2, 8001320 <__udivmoddi4+0xec>
 800131e:	deff      	udf	#255	; 0xff
 8001320:	fab2 f282 	clz	r2, r2
 8001324:	2a00      	cmp	r2, #0
 8001326:	f040 8091 	bne.w	800144c <__udivmoddi4+0x218>
 800132a:	eba1 000c 	sub.w	r0, r1, ip
 800132e:	2101      	movs	r1, #1
 8001330:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001334:	fa1f fe8c 	uxth.w	lr, ip
 8001338:	fbb0 f3f7 	udiv	r3, r0, r7
 800133c:	fb07 0013 	mls	r0, r7, r3, r0
 8001340:	0c25      	lsrs	r5, r4, #16
 8001342:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001346:	fb0e f003 	mul.w	r0, lr, r3
 800134a:	42a8      	cmp	r0, r5
 800134c:	d908      	bls.n	8001360 <__udivmoddi4+0x12c>
 800134e:	eb1c 0505 	adds.w	r5, ip, r5
 8001352:	f103 38ff 	add.w	r8, r3, #4294967295
 8001356:	d202      	bcs.n	800135e <__udivmoddi4+0x12a>
 8001358:	42a8      	cmp	r0, r5
 800135a:	f200 80ce 	bhi.w	80014fa <__udivmoddi4+0x2c6>
 800135e:	4643      	mov	r3, r8
 8001360:	1a2d      	subs	r5, r5, r0
 8001362:	fbb5 f0f7 	udiv	r0, r5, r7
 8001366:	fb07 5510 	mls	r5, r7, r0, r5
 800136a:	fb0e fe00 	mul.w	lr, lr, r0
 800136e:	b2a4      	uxth	r4, r4
 8001370:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001374:	45a6      	cmp	lr, r4
 8001376:	d908      	bls.n	800138a <__udivmoddi4+0x156>
 8001378:	eb1c 0404 	adds.w	r4, ip, r4
 800137c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001380:	d202      	bcs.n	8001388 <__udivmoddi4+0x154>
 8001382:	45a6      	cmp	lr, r4
 8001384:	f200 80b6 	bhi.w	80014f4 <__udivmoddi4+0x2c0>
 8001388:	4628      	mov	r0, r5
 800138a:	eba4 040e 	sub.w	r4, r4, lr
 800138e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001392:	e79e      	b.n	80012d2 <__udivmoddi4+0x9e>
 8001394:	f1c1 0720 	rsb	r7, r1, #32
 8001398:	408b      	lsls	r3, r1
 800139a:	fa22 fc07 	lsr.w	ip, r2, r7
 800139e:	ea4c 0c03 	orr.w	ip, ip, r3
 80013a2:	fa25 fa07 	lsr.w	sl, r5, r7
 80013a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013aa:	fbba f8f9 	udiv	r8, sl, r9
 80013ae:	fa20 f307 	lsr.w	r3, r0, r7
 80013b2:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b6:	408d      	lsls	r5, r1
 80013b8:	fa1f fe8c 	uxth.w	lr, ip
 80013bc:	431d      	orrs	r5, r3
 80013be:	fa00 f301 	lsl.w	r3, r0, r1
 80013c2:	fb08 f00e 	mul.w	r0, r8, lr
 80013c6:	0c2c      	lsrs	r4, r5, #16
 80013c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013cc:	42a0      	cmp	r0, r4
 80013ce:	fa02 f201 	lsl.w	r2, r2, r1
 80013d2:	d90b      	bls.n	80013ec <__udivmoddi4+0x1b8>
 80013d4:	eb1c 0404 	adds.w	r4, ip, r4
 80013d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80013dc:	f080 8088 	bcs.w	80014f0 <__udivmoddi4+0x2bc>
 80013e0:	42a0      	cmp	r0, r4
 80013e2:	f240 8085 	bls.w	80014f0 <__udivmoddi4+0x2bc>
 80013e6:	f1a8 0802 	sub.w	r8, r8, #2
 80013ea:	4464      	add	r4, ip
 80013ec:	1a24      	subs	r4, r4, r0
 80013ee:	fbb4 f0f9 	udiv	r0, r4, r9
 80013f2:	fb09 4410 	mls	r4, r9, r0, r4
 80013f6:	fb00 fe0e 	mul.w	lr, r0, lr
 80013fa:	b2ad      	uxth	r5, r5
 80013fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001400:	45a6      	cmp	lr, r4
 8001402:	d908      	bls.n	8001416 <__udivmoddi4+0x1e2>
 8001404:	eb1c 0404 	adds.w	r4, ip, r4
 8001408:	f100 35ff 	add.w	r5, r0, #4294967295
 800140c:	d26c      	bcs.n	80014e8 <__udivmoddi4+0x2b4>
 800140e:	45a6      	cmp	lr, r4
 8001410:	d96a      	bls.n	80014e8 <__udivmoddi4+0x2b4>
 8001412:	3802      	subs	r0, #2
 8001414:	4464      	add	r4, ip
 8001416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800141a:	fba0 9502 	umull	r9, r5, r0, r2
 800141e:	eba4 040e 	sub.w	r4, r4, lr
 8001422:	42ac      	cmp	r4, r5
 8001424:	46c8      	mov	r8, r9
 8001426:	46ae      	mov	lr, r5
 8001428:	d356      	bcc.n	80014d8 <__udivmoddi4+0x2a4>
 800142a:	d053      	beq.n	80014d4 <__udivmoddi4+0x2a0>
 800142c:	2e00      	cmp	r6, #0
 800142e:	d069      	beq.n	8001504 <__udivmoddi4+0x2d0>
 8001430:	ebb3 0208 	subs.w	r2, r3, r8
 8001434:	eb64 040e 	sbc.w	r4, r4, lr
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	fa04 f707 	lsl.w	r7, r4, r7
 8001440:	431f      	orrs	r7, r3
 8001442:	40cc      	lsrs	r4, r1
 8001444:	e9c6 7400 	strd	r7, r4, [r6]
 8001448:	2100      	movs	r1, #0
 800144a:	e747      	b.n	80012dc <__udivmoddi4+0xa8>
 800144c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001450:	f1c2 0120 	rsb	r1, r2, #32
 8001454:	fa25 f301 	lsr.w	r3, r5, r1
 8001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800145c:	fa20 f101 	lsr.w	r1, r0, r1
 8001460:	4095      	lsls	r5, r2
 8001462:	430d      	orrs	r5, r1
 8001464:	fbb3 f1f7 	udiv	r1, r3, r7
 8001468:	fb07 3311 	mls	r3, r7, r1, r3
 800146c:	fa1f fe8c 	uxth.w	lr, ip
 8001470:	0c28      	lsrs	r0, r5, #16
 8001472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001476:	fb01 f30e 	mul.w	r3, r1, lr
 800147a:	4283      	cmp	r3, r0
 800147c:	fa04 f402 	lsl.w	r4, r4, r2
 8001480:	d908      	bls.n	8001494 <__udivmoddi4+0x260>
 8001482:	eb1c 0000 	adds.w	r0, ip, r0
 8001486:	f101 38ff 	add.w	r8, r1, #4294967295
 800148a:	d22f      	bcs.n	80014ec <__udivmoddi4+0x2b8>
 800148c:	4283      	cmp	r3, r0
 800148e:	d92d      	bls.n	80014ec <__udivmoddi4+0x2b8>
 8001490:	3902      	subs	r1, #2
 8001492:	4460      	add	r0, ip
 8001494:	1ac0      	subs	r0, r0, r3
 8001496:	fbb0 f3f7 	udiv	r3, r0, r7
 800149a:	fb07 0013 	mls	r0, r7, r3, r0
 800149e:	b2ad      	uxth	r5, r5
 80014a0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014a4:	fb03 f00e 	mul.w	r0, r3, lr
 80014a8:	42a8      	cmp	r0, r5
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x28a>
 80014ac:	eb1c 0505 	adds.w	r5, ip, r5
 80014b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80014b4:	d216      	bcs.n	80014e4 <__udivmoddi4+0x2b0>
 80014b6:	42a8      	cmp	r0, r5
 80014b8:	d914      	bls.n	80014e4 <__udivmoddi4+0x2b0>
 80014ba:	3b02      	subs	r3, #2
 80014bc:	4465      	add	r5, ip
 80014be:	1a28      	subs	r0, r5, r0
 80014c0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014c4:	e738      	b.n	8001338 <__udivmoddi4+0x104>
 80014c6:	4631      	mov	r1, r6
 80014c8:	4630      	mov	r0, r6
 80014ca:	e707      	b.n	80012dc <__udivmoddi4+0xa8>
 80014cc:	462f      	mov	r7, r5
 80014ce:	e6e4      	b.n	800129a <__udivmoddi4+0x66>
 80014d0:	4618      	mov	r0, r3
 80014d2:	e6f9      	b.n	80012c8 <__udivmoddi4+0x94>
 80014d4:	454b      	cmp	r3, r9
 80014d6:	d2a9      	bcs.n	800142c <__udivmoddi4+0x1f8>
 80014d8:	ebb9 0802 	subs.w	r8, r9, r2
 80014dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80014e0:	3801      	subs	r0, #1
 80014e2:	e7a3      	b.n	800142c <__udivmoddi4+0x1f8>
 80014e4:	4643      	mov	r3, r8
 80014e6:	e7ea      	b.n	80014be <__udivmoddi4+0x28a>
 80014e8:	4628      	mov	r0, r5
 80014ea:	e794      	b.n	8001416 <__udivmoddi4+0x1e2>
 80014ec:	4641      	mov	r1, r8
 80014ee:	e7d1      	b.n	8001494 <__udivmoddi4+0x260>
 80014f0:	46d0      	mov	r8, sl
 80014f2:	e77b      	b.n	80013ec <__udivmoddi4+0x1b8>
 80014f4:	4464      	add	r4, ip
 80014f6:	3802      	subs	r0, #2
 80014f8:	e747      	b.n	800138a <__udivmoddi4+0x156>
 80014fa:	3b02      	subs	r3, #2
 80014fc:	4465      	add	r5, ip
 80014fe:	e72f      	b.n	8001360 <__udivmoddi4+0x12c>
 8001500:	4608      	mov	r0, r1
 8001502:	e706      	b.n	8001312 <__udivmoddi4+0xde>
 8001504:	4631      	mov	r1, r6
 8001506:	e6e9      	b.n	80012dc <__udivmoddi4+0xa8>

08001508 <__aeabi_idiv0>:
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	889b      	ldrh	r3, [r3, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	88db      	ldrh	r3, [r3, #6]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
	if (total < 0)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da05      	bge.n	8001538 <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	891b      	ldrh	r3, [r3, #8]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4413      	add	r3, r2
 8001536:	617b      	str	r3, [r7, #20]

	if (total == 0)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e031      	b.n	80015a8 <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	88db      	ldrh	r3, [r3, #6]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	8912      	ldrh	r2, [r2, #8]
 8001550:	fbb3 f0f2 	udiv	r0, r3, r2
 8001554:	fb00 f202 	mul.w	r2, r0, r2
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
			* circ_buf->element_size);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	895b      	ldrh	r3, [r3, #10]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001566:	440b      	add	r3, r1
 8001568:	613b      	str	r3, [r7, #16]

	if (elem)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	895b      	ldrh	r3, [r3, #10]
 8001574:	461a      	mov	r2, r3
 8001576:	6939      	ldr	r1, [r7, #16]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f00d fe9f 	bl	800f2bc <memcpy>

	if (!read_only) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d110      	bne.n	80015a6 <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	88db      	ldrh	r3, [r3, #6]
 8001588:	3301      	adds	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	88db      	ldrh	r3, [r3, #6]
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	429a      	cmp	r2, r3
 800159e:	db02      	blt.n	80015a6 <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	889b      	ldrh	r3, [r3, #4]
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	88db      	ldrh	r3, [r3, #6]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	891b      	ldrh	r3, [r3, #8]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	891b      	ldrh	r3, [r3, #8]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	db02      	blt.n	80015ec <__circ_gbuf_push+0x3c>
		return -1; // Full
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e02b      	b.n	8001644 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	889b      	ldrh	r3, [r3, #4]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	8912      	ldrh	r2, [r2, #8]
 80015f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80015fc:	fb00 f202 	mul.w	r2, r0, r2
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
			* circ_buf->element_size );
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	895b      	ldrh	r3, [r3, #10]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 800160e:	440b      	add	r3, r1
 8001610:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	895b      	ldrh	r3, [r3, #10]
 8001616:	461a      	mov	r2, r3
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f00d fe4e 	bl	800f2bc <memcpy>
	circ_buf->push_count++;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	891b      	ldrh	r3, [r3, #8]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	429a      	cmp	r2, r3
 800163a:	db02      	blt.n	8001642 <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	809a      	strh	r2, [r3, #4]
	return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <Relay_control>:
extern uint16_t DAC_tx_tmp_buffer[2];
extern float DDS_FTW;


//==============================================================================================
void Relay_control(uint8_t relay,uint8_t state){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
	int Relay_address=0;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
	if(relay>3 || state>1) return;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b03      	cmp	r3, #3
 8001664:	f200 80a3 	bhi.w	80017ae <Relay_control+0x162>
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	2b01      	cmp	r3, #1
 800166c:	f200 809f 	bhi.w	80017ae <Relay_control+0x162>

	if(relay==0x00 && state==0x00)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d141      	bne.n	80016fa <Relay_control+0xae>
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d13e      	bne.n	80016fa <Relay_control+0xae>
	{
		while(Relay_address<=0x5) // Set all OUTx to zero
 800167c:	e039      	b.n	80016f2 <Relay_control+0xa6>
		{
			HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	2102      	movs	r1, #2
 800168c:	484a      	ldr	r0, [pc, #296]	; (80017b8 <Relay_control+0x16c>)
 800168e:	f004 fa8e 	bl	8005bae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	105b      	asrs	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	2104      	movs	r1, #4
 80016a2:	4845      	ldr	r0, [pc, #276]	; (80017b8 <Relay_control+0x16c>)
 80016a4:	f004 fa83 	bl	8005bae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	109b      	asrs	r3, r3, #2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	2108      	movs	r1, #8
 80016b8:	483f      	ldr	r0, [pc, #252]	; (80017b8 <Relay_control+0x16c>)
 80016ba:	f004 fa78 	bl	8005bae <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 80016be:	2200      	movs	r2, #0
 80016c0:	2101      	movs	r1, #1
 80016c2:	483d      	ldr	r0, [pc, #244]	; (80017b8 <Relay_control+0x16c>)
 80016c4:	f004 fa73 	bl	8005bae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ce:	483b      	ldr	r0, [pc, #236]	; (80017bc <Relay_control+0x170>)
 80016d0:	f004 fa6d 	bl	8005bae <HAL_GPIO_WritePin>
			HAL_Delay(1); // wait 1ms
 80016d4:	2001      	movs	r0, #1
 80016d6:	f003 fc05 	bl	8004ee4 <HAL_Delay>
			HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e0:	4836      	ldr	r0, [pc, #216]	; (80017bc <Relay_control+0x170>)
 80016e2:	f004 fa64 	bl	8005bae <HAL_GPIO_WritePin>
			HAL_Delay(1); // wait 1ms
 80016e6:	2001      	movs	r0, #1
 80016e8:	f003 fbfc 	bl	8004ee4 <HAL_Delay>
			Relay_address++;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
		while(Relay_address<=0x5) // Set all OUTx to zero
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	ddc2      	ble.n	800167e <Relay_control+0x32>
		}
		return;
 80016f8:	e05a      	b.n	80017b0 <Relay_control+0x164>
	}


	switch (relay)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d006      	beq.n	800170e <Relay_control+0xc2>
 8001700:	2b03      	cmp	r3, #3
 8001702:	dc1f      	bgt.n	8001744 <Relay_control+0xf8>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d014      	beq.n	8001732 <Relay_control+0xe6>
 8001708:	2b02      	cmp	r3, #2
 800170a:	d009      	beq.n	8001720 <Relay_control+0xd4>
 800170c:	e01a      	b.n	8001744 <Relay_control+0xf8>
	{
	case 3:
		if (state==1){
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <Relay_control+0xce>
			Relay_address=0x5; //OUT6
 8001714:	2305      	movs	r3, #5
 8001716:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x4; //OUT5
		} break;
 8001718:	e014      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x4; //OUT5
 800171a:	2304      	movs	r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
		} break;
 800171e:	e011      	b.n	8001744 <Relay_control+0xf8>
	case 2:
		if (state==1){
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <Relay_control+0xe0>
			Relay_address=0x3; //OUT4
 8001726:	2303      	movs	r3, #3
 8001728:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x2; //OUT3
		} break;
 800172a:	e00b      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x2; //OUT3
 800172c:	2302      	movs	r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
		} break;
 8001730:	e008      	b.n	8001744 <Relay_control+0xf8>
	case 1:
		if (state==1){
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <Relay_control+0xf2>
			Relay_address=0x1; //OUT2
 8001738:	2301      	movs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x0; //OUT1
		} break;
 800173c:	e001      	b.n	8001742 <Relay_control+0xf6>
			Relay_address=0x0; //OUT1
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
		} break;
 8001742:	bf00      	nop
	}

	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	2102      	movs	r1, #2
 8001752:	4819      	ldr	r0, [pc, #100]	; (80017b8 <Relay_control+0x16c>)
 8001754:	f004 fa2b 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	105b      	asrs	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	2104      	movs	r1, #4
 8001768:	4813      	ldr	r0, [pc, #76]	; (80017b8 <Relay_control+0x16c>)
 800176a:	f004 fa20 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	109b      	asrs	r3, r3, #2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	2108      	movs	r1, #8
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <Relay_control+0x16c>)
 8001780:	f004 fa15 	bl	8005bae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 1); // LVL 1
 8001784:	2201      	movs	r2, #1
 8001786:	2101      	movs	r1, #1
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <Relay_control+0x16c>)
 800178a:	f004 fa10 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <Relay_control+0x170>)
 8001796:	f004 fa0a 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 800179a:	2001      	movs	r0, #1
 800179c:	f003 fba2 	bl	8004ee4 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <Relay_control+0x170>)
 80017a8:	f004 fa01 	bl	8005bae <HAL_GPIO_WritePin>
 80017ac:	e000      	b.n	80017b0 <Relay_control+0x164>
	if(relay>3 || state>1) return;
 80017ae:	bf00      	nop
}
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020800 	.word	0x40020800

080017c0 <CPLD_control>:
//==============================================================================================



//==============================================================================================
void CPLD_control(FunctionalState state){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	uint8_t send_word=0x00;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]

	// Calculate CPLD divider to expand DDS FTW to 0.1 ppm
	float dds_tmp_calc=DDS_clock_frequecny;
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <CPLD_control+0x10c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
	dds_tmp_calc/=(float)0xFFFFFFFF; // 10MHz / 2^32 = 0.0023283 Hz DDS FTW resolution
 80017d4:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff fba9 	bl	8000f30 <__aeabi_fdiv>
 80017de:	4603      	mov	r3, r0
 80017e0:	60fb      	str	r3, [r7, #12]
	dds_tmp_calc=dds_tmp_calc/(DDS_target_frequecny/(float)1E7); // 0.0023283 Hz / (74.898214 Hz / 1E7) = 310.86 minimum CPLD divider
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <CPLD_control+0x110>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	493b      	ldr	r1, [pc, #236]	; (80018d4 <CPLD_control+0x114>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fba1 	bl	8000f30 <__aeabi_fdiv>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4619      	mov	r1, r3
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f7ff fb9c 	bl	8000f30 <__aeabi_fdiv>
 80017f8:	4603      	mov	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<0x0F; i++) // find CPLD tuning word
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e017      	b.n	8001832 <CPLD_control+0x72>
	{
		if(((1<<i)+1) > dds_tmp_calc)
 8001802:	2201      	movs	r2, #1
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	3301      	adds	r3, #1
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fa87 	bl	8000d20 <__aeabi_i2f>
 8001812:	4603      	mov	r3, r0
 8001814:	4619      	mov	r1, r3
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff fc74 	bl	8001104 <__aeabi_fcmplt>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <CPLD_control+0x6c>
		{
			CPLD_WORD=i;
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <CPLD_control+0x118>)
 8001828:	701a      	strb	r2, [r3, #0]
			break;
 800182a:	e005      	b.n	8001838 <CPLD_control+0x78>
	for(int i=1; i<0x0F; i++) // find CPLD tuning word
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	3301      	adds	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b0e      	cmp	r3, #14
 8001836:	dde4      	ble.n	8001802 <CPLD_control+0x42>
		}
	}

	if(state==CPLD_ON_STATE)send_word=CPLD_WORD;
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <CPLD_control+0x84>
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <CPLD_control+0x118>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin,  send_word & 0x1     );
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	2101      	movs	r1, #1
 8001850:	4822      	ldr	r0, [pc, #136]	; (80018dc <CPLD_control+0x11c>)
 8001852:	f004 f9ac 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin, (send_word & 0x2) >>1);
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	105b      	asrs	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	2102      	movs	r1, #2
 8001866:	481d      	ldr	r0, [pc, #116]	; (80018dc <CPLD_control+0x11c>)
 8001868:	f004 f9a1 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (send_word & 0x4) >>2);
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	109b      	asrs	r3, r3, #2
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	2104      	movs	r1, #4
 800187c:	4817      	ldr	r0, [pc, #92]	; (80018dc <CPLD_control+0x11c>)
 800187e:	f004 f996 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (send_word & 0x8) >>3);
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	10db      	asrs	r3, r3, #3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	2108      	movs	r1, #8
 8001892:	4812      	ldr	r0, [pc, #72]	; (80018dc <CPLD_control+0x11c>)
 8001894:	f004 f98b 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_SET); // Send strobe
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189e:	4810      	ldr	r0, [pc, #64]	; (80018e0 <CPLD_control+0x120>)
 80018a0:	f004 f985 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <CPLD_control+0x120>)
 80018ac:	f004 f97f 	bl	8005bae <HAL_GPIO_WritePin>

	if(state==CPLD_OFF_STATE)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <CPLD_control+0xfe>
	{
		cfg.LDACMODE=0;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <CPLD_control+0x124>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		cfg.LDACMODE=1;
	}
}
 80018bc:	e002      	b.n	80018c4 <CPLD_control+0x104>
		cfg.LDACMODE=1;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <CPLD_control+0x124>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	709a      	strb	r2, [r3, #2]
}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200007b4 	.word	0x200007b4
 80018d0:	20000d0c 	.word	0x20000d0c
 80018d4:	4b189680 	.word	0x4b189680
 80018d8:	20000d06 	.word	0x20000d06
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020800 	.word	0x40020800
 80018e4:	20000cfc 	.word	0x20000cfc

080018e8 <DAC_Write>:



//==============================================================================================
void DAC_Write(uint32_t value)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <DAC_Write+0x6c>)
 80018f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	4a13      	ldr	r2, [pc, #76]	; (8001954 <DAC_Write+0x6c>)
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	4413      	add	r3, r2
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <DAC_Write+0x6c>)
 800190c:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <DAC_Write+0x6c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0c1b      	lsrs	r3, r3, #16
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <DAC_Write+0x70>)
 8001918:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <DAC_Write+0x6c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <DAC_Write+0x70>)
 8001922:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2110      	movs	r1, #16
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <DAC_Write+0x74>)
 800192a:	f004 f940 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 800192e:	2302      	movs	r3, #2
 8001930:	2202      	movs	r2, #2
 8001932:	4909      	ldr	r1, [pc, #36]	; (8001958 <DAC_Write+0x70>)
 8001934:	480a      	ldr	r0, [pc, #40]	; (8001960 <DAC_Write+0x78>)
 8001936:	f007 fb89 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2110      	movs	r1, #16
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <DAC_Write+0x74>)
 8001940:	f004 f935 	bl	8005bae <HAL_GPIO_WritePin>
	DAC_code=value;
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <DAC_Write+0x7c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000cf4 	.word	0x20000cf4
 8001958:	20000cf8 	.word	0x20000cf8
 800195c:	40020000 	.word	0x40020000
 8001960:	20000d30 	.word	0x20000d30
 8001964:	20000d24 	.word	0x20000d24

08001968 <DAC_Write_FAST>:

//==============================================================================================
void DAC_Write_FAST(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	2110      	movs	r1, #16
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <DAC_Write_FAST+0x28>)
 8001972:	f004 f91c 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001976:	2302      	movs	r3, #2
 8001978:	2202      	movs	r2, #2
 800197a:	4906      	ldr	r1, [pc, #24]	; (8001994 <DAC_Write_FAST+0x2c>)
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <DAC_Write_FAST+0x30>)
 800197e:	f007 fb65 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	2110      	movs	r1, #16
 8001986:	4802      	ldr	r0, [pc, #8]	; (8001990 <DAC_Write_FAST+0x28>)
 8001988:	f004 f911 	bl	8005bae <HAL_GPIO_WritePin>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40020000 	.word	0x40020000
 8001994:	20000cf8 	.word	0x20000cf8
 8001998:	20000d30 	.word	0x20000d30

0800199c <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

	DAC_tx_buffer=0x02000000; // Write CONFIG1
 80019a0:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <DAC_SendInit+0xfc>)
 80019a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 80019a8:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <DAC_SendInit+0x100>)
 80019aa:	7a1b      	ldrb	r3, [r3, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	f003 0210 	and.w	r2, r3, #16
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <DAC_SendInit+0xfc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a37      	ldr	r2, [pc, #220]	; (8001a98 <DAC_SendInit+0xfc>)
 80019ba:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x06)<<6;
 80019bc:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <DAC_SendInit+0x100>)
 80019be:	79db      	ldrb	r3, [r3, #7]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <DAC_SendInit+0xfc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <DAC_SendInit+0xfc>)
 80019ce:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 80019d0:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <DAC_SendInit+0x100>)
 80019d2:	799b      	ldrb	r3, [r3, #6]
 80019d4:	029b      	lsls	r3, r3, #10
 80019d6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <DAC_SendInit+0xfc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <DAC_SendInit+0xfc>)
 80019e2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <DAC_SendInit+0x100>)
 80019e6:	795b      	ldrb	r3, [r3, #5]
 80019e8:	02db      	lsls	r3, r3, #11
 80019ea:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <DAC_SendInit+0xfc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <DAC_SendInit+0xfc>)
 80019f6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <DAC_SendInit+0x100>)
 80019fa:	791b      	ldrb	r3, [r3, #4]
 80019fc:	031b      	lsls	r3, r3, #12
 80019fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a0a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <DAC_SendInit+0x100>)
 8001a0e:	78db      	ldrb	r3, [r3, #3]
 8001a10:	035b      	lsls	r3, r3, #13
 8001a12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a1e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <DAC_SendInit+0x100>)
 8001a22:	789b      	ldrb	r3, [r3, #2]
 8001a24:	039b      	lsls	r3, r3, #14
 8001a26:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a32:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <DAC_SendInit+0x100>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	049b      	lsls	r3, r3, #18
 8001a3a:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a46:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <DAC_SendInit+0x100>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	05db      	lsls	r3, r3, #23
 8001a4e:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a5a:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0c1b      	lsrs	r3, r3, #16
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a66:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a70:	805a      	strh	r2, [r3, #2]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2110      	movs	r1, #16
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <DAC_SendInit+0x108>)
 8001a78:	f004 f899 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a82:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <DAC_SendInit+0x10c>)
 8001a84:	f007 fae2 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <DAC_SendInit+0x108>)
 8001a8e:	f004 f88e 	bl	8005bae <HAL_GPIO_WritePin>

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000cf4 	.word	0x20000cf4
 8001a9c:	20000cfc 	.word	0x20000cfc
 8001aa0:	20000cf8 	.word	0x20000cf8
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	20000d30 	.word	0x20000d30

08001aac <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
	uint32_t DAC_tx_buffer;
	uint16_t DAC_tx_tmp_buffer[2];

	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	813b      	strh	r3, [r7, #8]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	817b      	strh	r3, [r7, #10]
 8001aba:	2300      	movs	r3, #0
 8001abc:	82fb      	strh	r3, [r7, #22]

	//CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal

	cfg.EN_TMP_CAL=1;
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <DAC_TEMP_CAL+0xd0>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
	DAC_SendInit();
 8001ac4:	f7ff ff6a 	bl	800199c <DAC_SendInit>

	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <DAC_TEMP_CAL+0xd4>)
 8001aca:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	81bb      	strh	r3, [r7, #12]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	81fb      	strh	r3, [r7, #14]

	DAC_tx_buffer=0x85000000; // read status register
 8001ada:	f04f 4305 	mov.w	r3, #2231369728	; 0x85000000
 8001ade:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	80bb      	strh	r3, [r7, #4]
	DAC_tx_tmp_buffer2[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2110      	movs	r1, #16
 8001af2:	4824      	ldr	r0, [pc, #144]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001af4:	f004 f85b 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001af8:	f107 010c 	add.w	r1, r7, #12
 8001afc:	2302      	movs	r3, #2
 8001afe:	2202      	movs	r2, #2
 8001b00:	4821      	ldr	r0, [pc, #132]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b02:	f007 faa3 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2110      	movs	r1, #16
 8001b0a:	481e      	ldr	r0, [pc, #120]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b0c:	f004 f84f 	bl	8005bae <HAL_GPIO_WritePin>

	do{ // Check complete flag
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2110      	movs	r1, #16
 8001b14:	481b      	ldr	r0, [pc, #108]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b16:	f004 f84a 	bl	8005bae <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 8001b1a:	1d39      	adds	r1, r7, #4
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4819      	ldr	r0, [pc, #100]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b22:	f007 fa93 	bl	800904c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2110      	movs	r1, #16
 8001b2a:	4816      	ldr	r0, [pc, #88]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b2c:	f004 f83f 	bl	8005bae <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2110      	movs	r1, #16
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b36:	f004 f83a 	bl	8005bae <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 2, 2);
 8001b3a:	f107 0108 	add.w	r1, r7, #8
 8001b3e:	2302      	movs	r3, #2
 8001b40:	2202      	movs	r2, #2
 8001b42:	4811      	ldr	r0, [pc, #68]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b44:	f007 fbbe 	bl	80092c4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b4e:	f004 f82e 	bl	8005bae <HAL_GPIO_WritePin>
		ALM=(spi_receive[1] & 0x1000) >> 12;
 8001b52:	897b      	ldrh	r3, [r7, #10]
 8001b54:	131b      	asrs	r3, r3, #12
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	82fb      	strh	r3, [r7, #22]
		if(ALM!=1)HAL_Delay(10);
 8001b5e:	8afb      	ldrh	r3, [r7, #22]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d002      	beq.n	8001b6a <DAC_TEMP_CAL+0xbe>
 8001b64:	200a      	movs	r0, #10
 8001b66:	f003 f9bd 	bl	8004ee4 <HAL_Delay>
	}while(ALM!=1);
 8001b6a:	8afb      	ldrh	r3, [r7, #22]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d1cf      	bne.n	8001b10 <DAC_TEMP_CAL+0x64>
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000cfc 	.word	0x20000cfc
 8001b80:	04000100 	.word	0x04000100
 8001b84:	40020000 	.word	0x40020000
 8001b88:	20000d30 	.word	0x20000d30

08001b8c <DDS_Calculation>:

void DDS_Calculation(void)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
	float hw_limit=1000; // 1kHz hardware optimized limit
 8001b92:	4b86      	ldr	r3, [pc, #536]	; (8001dac <DDS_Calculation+0x220>)
 8001b94:	613b      	str	r3, [r7, #16]
	float dac_counts=DAC_CODE_TOP-1;
 8001b96:	4b86      	ldr	r3, [pc, #536]	; (8001db0 <DDS_Calculation+0x224>)
 8001b98:	60fb      	str	r3, [r7, #12]
	float corr_coeff;
	float dac_tmp=DAC_code;
 8001b9a:	4b86      	ldr	r3, [pc, #536]	; (8001db4 <DDS_Calculation+0x228>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f8ba 	bl	8000d18 <__aeabi_ui2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60bb      	str	r3, [r7, #8]
	float second_left;
	uint32_t codes_left;

	// Linearity correction
	corr_coeff=corr_coeff_1*dac_tmp*dac_tmp;
 8001ba8:	4b83      	ldr	r3, [pc, #524]	; (8001db8 <DDS_Calculation+0x22c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f90a 	bl	8000dc8 <__aeabi_fmul>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68b8      	ldr	r0, [r7, #8]
 8001bba:	f7ff f905 	bl	8000dc8 <__aeabi_fmul>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_2*dac_tmp;
 8001bc2:	4b7e      	ldr	r3, [pc, #504]	; (8001dbc <DDS_Calculation+0x230>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f8fd 	bl	8000dc8 <__aeabi_fmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fff0 	bl	8000bb8 <__addsf3>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_3;
 8001bdc:	4b78      	ldr	r3, [pc, #480]	; (8001dc0 <DDS_Calculation+0x234>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe ffe8 	bl	8000bb8 <__addsf3>
 8001be8:	4603      	mov	r3, r0
 8001bea:	607b      	str	r3, [r7, #4]

	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed); // 1048575 / (14V / 0.01V/s) = 74.898214 Hz
 8001bec:	4b75      	ldr	r3, [pc, #468]	; (8001dc4 <DDS_Calculation+0x238>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a75      	ldr	r2, [pc, #468]	; (8001dc8 <DDS_Calculation+0x23c>)
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f99a 	bl	8000f30 <__aeabi_fdiv>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff f995 	bl	8000f30 <__aeabi_fdiv>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b70      	ldr	r3, [pc, #448]	; (8001dcc <DDS_Calculation+0x240>)
 8001c0c:	601a      	str	r2, [r3, #0]

	if(DDS_target_frequecny>hw_limit)
 8001c0e:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <DDS_Calculation+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	6938      	ldr	r0, [r7, #16]
 8001c16:	f7ff fa75 	bl	8001104 <__aeabi_fcmplt>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d02e      	beq.n	8001c7e <DDS_Calculation+0xf2>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 8001c20:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <DDS_Calculation+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6939      	ldr	r1, [r7, #16]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f982 	bl	8000f30 <__aeabi_fdiv>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fa90 	bl	8001154 <__aeabi_f2uiz>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4a66      	ldr	r2, [pc, #408]	; (8001dd0 <DDS_Calculation+0x244>)
 8001c38:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001c3a:	4b62      	ldr	r3, [pc, #392]	; (8001dc4 <DDS_Calculation+0x238>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a62      	ldr	r2, [pc, #392]	; (8001dc8 <DDS_Calculation+0x23c>)
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f973 	bl	8000f30 <__aeabi_fdiv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff f96e 	bl	8000f30 <__aeabi_fdiv>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <DDS_Calculation+0x240>)
 8001c5a:	601a      	str	r2, [r3, #0]
		DDS_target_frequecny/=(float)DDS_target_multipiller;
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <DDS_Calculation+0x240>)
 8001c5e:	681c      	ldr	r4, [r3, #0]
 8001c60:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <DDS_Calculation+0x244>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f857 	bl	8000d18 <__aeabi_ui2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff f95e 	bl	8000f30 <__aeabi_fdiv>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b54      	ldr	r3, [pc, #336]	; (8001dcc <DDS_Calculation+0x240>)
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e002      	b.n	8001c84 <DDS_Calculation+0xf8>
	} else DDS_target_multipiller = 1;
 8001c7e:	4b54      	ldr	r3, [pc, #336]	; (8001dd0 <DDS_Calculation+0x244>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

	DDS_FTW=(((DDS_target_frequecny/corr_coeff)*((1<<CPLD_WORD)+1))/DDS_clock_frequecny)*(float)0xFFFFFFFF;
 8001c84:	4b51      	ldr	r3, [pc, #324]	; (8001dcc <DDS_Calculation+0x240>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f950 	bl	8000f30 <__aeabi_fdiv>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461c      	mov	r4, r3
 8001c94:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <DDS_Calculation+0x248>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f83d 	bl	8000d20 <__aeabi_i2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff f88c 	bl	8000dc8 <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <DDS_Calculation+0x24c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f7ff f938 	bl	8000f30 <__aeabi_fdiv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f87e 	bl	8000dc8 <__aeabi_fmul>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b42      	ldr	r3, [pc, #264]	; (8001ddc <DDS_Calculation+0x250>)
 8001cd2:	601a      	str	r2, [r3, #0]

	switch(DAC_code_direction)
 8001cd4:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <DDS_Calculation+0x254>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d011      	beq.n	8001d00 <DDS_Calculation+0x174>
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	dc1f      	bgt.n	8001d20 <DDS_Calculation+0x194>
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <DDS_Calculation+0x16c>
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d11b      	bne.n	8001d20 <DDS_Calculation+0x194>
	{
	//----------------------------------------------------------//
	case DIRECTION_UP_STATE:
		codes_left=0xFFFFF-DAC_code;
 8001ce8:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <DDS_Calculation+0x228>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8001cf0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001cf4:	617b      	str	r3, [r7, #20]
		break;
 8001cf6:	e013      	b.n	8001d20 <DDS_Calculation+0x194>
	case DIRECTION_DOWN_STATE:
		codes_left=DAC_code;
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <DDS_Calculation+0x228>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	617b      	str	r3, [r7, #20]
		break;
 8001cfe:	e00f      	b.n	8001d20 <DDS_Calculation+0x194>
	case DIRECTION_CYCLE_STATE:
		if(DAC_code_direction_for_cycle_mode == 1)
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <DDS_Calculation+0x258>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d107      	bne.n	8001d18 <DDS_Calculation+0x18c>
		{
			codes_left=0xFFFFF-DAC_code;
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <DDS_Calculation+0x228>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8001d10:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001d14:	617b      	str	r3, [r7, #20]
		}
		else
		{
			codes_left=DAC_code;
		}
		break;
 8001d16:	e002      	b.n	8001d1e <DDS_Calculation+0x192>
			codes_left=DAC_code;
 8001d18:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <DDS_Calculation+0x228>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	617b      	str	r3, [r7, #20]
		break;
 8001d1e:	bf00      	nop
	}

	second_left=codes_left/DDS_target_multipiller/DDS_target_frequecny;
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <DDS_Calculation+0x244>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fff4 	bl	8000d18 <__aeabi_ui2f>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <DDS_Calculation+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f7ff f8f9 	bl	8000f30 <__aeabi_fdiv>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	603b      	str	r3, [r7, #0]
	eta_second=(uint32_t)second_left % 60;
 8001d42:	6838      	ldr	r0, [r7, #0]
 8001d44:	f7ff fa06 	bl	8001154 <__aeabi_f2uiz>
 8001d48:	4601      	mov	r1, r0
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <DDS_Calculation+0x25c>)
 8001d4c:	fba3 2301 	umull	r2, r3, r3, r1
 8001d50:	095a      	lsrs	r2, r3, #5
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	1aca      	subs	r2, r1, r3
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <DDS_Calculation+0x260>)
 8001d60:	701a      	strb	r2, [r3, #0]
	eta_minute=(uint32_t)(second_left / 60) % 60;
 8001d62:	4923      	ldr	r1, [pc, #140]	; (8001df0 <DDS_Calculation+0x264>)
 8001d64:	6838      	ldr	r0, [r7, #0]
 8001d66:	f7ff f8e3 	bl	8000f30 <__aeabi_fdiv>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f9f1 	bl	8001154 <__aeabi_f2uiz>
 8001d72:	4601      	mov	r1, r0
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <DDS_Calculation+0x25c>)
 8001d76:	fba3 2301 	umull	r2, r3, r3, r1
 8001d7a:	095a      	lsrs	r2, r3, #5
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	1aca      	subs	r2, r1, r3
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <DDS_Calculation+0x268>)
 8001d8a:	701a      	strb	r2, [r3, #0]
	eta_hours=(uint32_t) second_left / 3600;
 8001d8c:	6838      	ldr	r0, [r7, #0]
 8001d8e:	f7ff f9e1 	bl	8001154 <__aeabi_f2uiz>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <DDS_Calculation+0x26c>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0adb      	lsrs	r3, r3, #11
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <DDS_Calculation+0x270>)
 8001da0:	701a      	strb	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	371c      	adds	r7, #28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	447a0000 	.word	0x447a0000
 8001db0:	497fffe0 	.word	0x497fffe0
 8001db4:	20000d24 	.word	0x20000d24
 8001db8:	20000b28 	.word	0x20000b28
 8001dbc:	20000b2c 	.word	0x20000b2c
 8001dc0:	20000b30 	.word	0x20000b30
 8001dc4:	20000d14 	.word	0x20000d14
 8001dc8:	20000d10 	.word	0x20000d10
 8001dcc:	20000d0c 	.word	0x20000d0c
 8001dd0:	200007b0 	.word	0x200007b0
 8001dd4:	20000d06 	.word	0x20000d06
 8001dd8:	200007b4 	.word	0x200007b4
 8001ddc:	20000d08 	.word	0x20000d08
 8001de0:	20000d28 	.word	0x20000d28
 8001de4:	20000d29 	.word	0x20000d29
 8001de8:	88888889 	.word	0x88888889
 8001dec:	20000cd2 	.word	0x20000cd2
 8001df0:	42700000 	.word	0x42700000
 8001df4:	20000cd1 	.word	0x20000cd1
 8001df8:	91a2b3c5 	.word	0x91a2b3c5
 8001dfc:	20000cd0 	.word	0x20000cd0

08001e00 <DDS_Init>:

//==============================================================================================
void DDS_Init(void)
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];
	DDS_Calculation();
 8001e06:	f7ff fec1 	bl	8001b8c <DDS_Calculation>

	HAL_Delay(100);
 8001e0a:	2064      	movs	r0, #100	; 0x64
 8001e0c:	f003 f86a 	bl	8004ee4 <HAL_Delay>

	//CONTROL REGISTER WRITE SLEEP =1 ,	RESET = 1,	CLR = 1
	DDS_tx_buffer[0]=0xC000; // Control DDS (D15=1, D14=1)
 8001e10:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e14:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=0x7 << 11; //  SLEEP = 1 , RESET = 1,	CLR = 1
 8001e16:	88bb      	ldrh	r3, [r7, #4]
 8001e18:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e26:	4861      	ldr	r0, [pc, #388]	; (8001fac <DDS_Init+0x1ac>)
 8001e28:	f003 fec1 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e2c:	1d39      	adds	r1, r7, #4
 8001e2e:	2305      	movs	r3, #5
 8001e30:	2201      	movs	r2, #1
 8001e32:	485f      	ldr	r0, [pc, #380]	; (8001fb0 <DDS_Init+0x1b0>)
 8001e34:	f007 f90a 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3e:	485b      	ldr	r0, [pc, #364]	; (8001fac <DDS_Init+0x1ac>)
 8001e40:	f003 feb5 	bl	8005bae <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001e44:	2064      	movs	r0, #100	; 0x64
 8001e46:	f003 f84d 	bl	8004ee4 <HAL_Delay>
	//DO NOT !!! SET SYNC AND/OR SELSRC TO 1

	//WRITE INITIAL DATA

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001e4a:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001e4e:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001e50:	88bc      	ldrh	r4, [r7, #4]
 8001e52:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <DDS_Init+0x1b4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f97c 	bl	8001154 <__aeabi_f2uiz>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	0e1b      	lsrs	r3, r3, #24
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4423      	add	r3, r4
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6e:	484f      	ldr	r0, [pc, #316]	; (8001fac <DDS_Init+0x1ac>)
 8001e70:	f003 fe9d 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e74:	1d39      	adds	r1, r7, #4
 8001e76:	2305      	movs	r3, #5
 8001e78:	2201      	movs	r2, #1
 8001e7a:	484d      	ldr	r0, [pc, #308]	; (8001fb0 <DDS_Init+0x1b0>)
 8001e7c:	f007 f8e6 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e86:	4849      	ldr	r0, [pc, #292]	; (8001fac <DDS_Init+0x1ac>)
 8001e88:	f003 fe91 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001e8c:	2032      	movs	r0, #50	; 0x32
 8001e8e:	f003 f829 	bl	8004ee4 <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001e92:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001e96:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001e98:	88bc      	ldrh	r4, [r7, #4]
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <DDS_Init+0x1b4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f958 	bl	8001154 <__aeabi_f2uiz>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	4423      	add	r3, r4
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eba:	483c      	ldr	r0, [pc, #240]	; (8001fac <DDS_Init+0x1ac>)
 8001ebc:	f003 fe77 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ec0:	1d39      	adds	r1, r7, #4
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	483a      	ldr	r0, [pc, #232]	; (8001fb0 <DDS_Init+0x1b0>)
 8001ec8:	f007 f8c0 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed2:	4836      	ldr	r0, [pc, #216]	; (8001fac <DDS_Init+0x1ac>)
 8001ed4:	f003 fe6b 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001ed8:	2032      	movs	r0, #50	; 0x32
 8001eda:	f003 f803 	bl	8004ee4 <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001ede:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001ee2:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001ee4:	88bc      	ldrh	r4, [r7, #4]
 8001ee6:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <DDS_Init+0x1b4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f932 	bl	8001154 <__aeabi_f2uiz>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4423      	add	r3, r4
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f06:	4829      	ldr	r0, [pc, #164]	; (8001fac <DDS_Init+0x1ac>)
 8001f08:	f003 fe51 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f0c:	1d39      	adds	r1, r7, #4
 8001f0e:	2305      	movs	r3, #5
 8001f10:	2201      	movs	r2, #1
 8001f12:	4827      	ldr	r0, [pc, #156]	; (8001fb0 <DDS_Init+0x1b0>)
 8001f14:	f007 f89a 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1e:	4823      	ldr	r0, [pc, #140]	; (8001fac <DDS_Init+0x1ac>)
 8001f20:	f003 fe45 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001f24:	2032      	movs	r0, #50	; 0x32
 8001f26:	f002 ffdd 	bl	8004ee4 <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2e:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001f30:	88bc      	ldrh	r4, [r7, #4]
 8001f32:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <DDS_Init+0x1b4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f90c 	bl	8001154 <__aeabi_f2uiz>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4423      	add	r3, r4
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f50:	4816      	ldr	r0, [pc, #88]	; (8001fac <DDS_Init+0x1ac>)
 8001f52:	f003 fe2c 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f56:	1d39      	adds	r1, r7, #4
 8001f58:	2305      	movs	r3, #5
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4814      	ldr	r0, [pc, #80]	; (8001fb0 <DDS_Init+0x1b0>)
 8001f5e:	f007 f875 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f68:	4810      	ldr	r0, [pc, #64]	; (8001fac <DDS_Init+0x1ac>)
 8001f6a:	f003 fe20 	bl	8005bae <HAL_GPIO_WritePin>


	HAL_Delay(100);
 8001f6e:	2064      	movs	r0, #100	; 0x64
 8001f70:	f002 ffb8 	bl	8004ee4 <HAL_Delay>

	// CONTROL REGISTER WRITE, 	SLEEP = 0,	RESET = 0, CLR = 0

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Exit DAC from Sleep+Reset mode
 8001f74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f78:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <DDS_Init+0x1ac>)
 8001f82:	f003 fe14 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f86:	1d39      	adds	r1, r7, #4
 8001f88:	2305      	movs	r3, #5
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <DDS_Init+0x1b0>)
 8001f8e:	f007 f85d 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <DDS_Init+0x1ac>)
 8001f9a:	f003 fe08 	bl	8005bae <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001f9e:	2064      	movs	r0, #100	; 0x64
 8001fa0:	f002 ffa0 	bl	8004ee4 <HAL_Delay>

}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	20000d88 	.word	0x20000d88
 8001fb4:	20000d08 	.word	0x20000d08

08001fb8 <DDS_Update>:

//==============================================================================================
void DDS_Update(void)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001fbe:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001fc2:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001fc4:	88bc      	ldrh	r4, [r7, #4]
 8001fc6:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <DDS_Update+0x120>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f8c2 	bl	8001154 <__aeabi_f2uiz>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	0e1b      	lsrs	r3, r3, #24
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	4423      	add	r3, r4
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe2:	483e      	ldr	r0, [pc, #248]	; (80020dc <DDS_Update+0x124>)
 8001fe4:	f003 fde3 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001fe8:	1d39      	adds	r1, r7, #4
 8001fea:	2305      	movs	r3, #5
 8001fec:	2201      	movs	r2, #1
 8001fee:	483c      	ldr	r0, [pc, #240]	; (80020e0 <DDS_Update+0x128>)
 8001ff0:	f007 f82c 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ffa:	4838      	ldr	r0, [pc, #224]	; (80020dc <DDS_Update+0x124>)
 8001ffc:	f003 fdd7 	bl	8005bae <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8002000:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8002004:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8002006:	88bc      	ldrh	r4, [r7, #4]
 8002008:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <DDS_Update+0x120>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff f8a1 	bl	8001154 <__aeabi_f2uiz>
 8002012:	4603      	mov	r3, r0
 8002014:	0c1b      	lsrs	r3, r3, #16
 8002016:	b29b      	uxth	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	b29b      	uxth	r3, r3
 800201c:	4423      	add	r3, r4
 800201e:	b29b      	uxth	r3, r3
 8002020:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002028:	482c      	ldr	r0, [pc, #176]	; (80020dc <DDS_Update+0x124>)
 800202a:	f003 fdc0 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 800202e:	1d39      	adds	r1, r7, #4
 8002030:	2305      	movs	r3, #5
 8002032:	2201      	movs	r2, #1
 8002034:	482a      	ldr	r0, [pc, #168]	; (80020e0 <DDS_Update+0x128>)
 8002036:	f007 f809 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002040:	4826      	ldr	r0, [pc, #152]	; (80020dc <DDS_Update+0x124>)
 8002042:	f003 fdb4 	bl	8005bae <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8002046:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 800204a:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 800204c:	88bc      	ldrh	r4, [r7, #4]
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <DDS_Update+0x120>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f87e 	bl	8001154 <__aeabi_f2uiz>
 8002058:	4603      	mov	r3, r0
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	b29b      	uxth	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	b29b      	uxth	r3, r3
 8002062:	4423      	add	r3, r4
 8002064:	b29b      	uxth	r3, r3
 8002066:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800206e:	481b      	ldr	r0, [pc, #108]	; (80020dc <DDS_Update+0x124>)
 8002070:	f003 fd9d 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8002074:	1d39      	adds	r1, r7, #4
 8002076:	2305      	movs	r3, #5
 8002078:	2201      	movs	r2, #1
 800207a:	4819      	ldr	r0, [pc, #100]	; (80020e0 <DDS_Update+0x128>)
 800207c:	f006 ffe6 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002086:	4815      	ldr	r0, [pc, #84]	; (80020dc <DDS_Update+0x124>)
 8002088:	f003 fd91 	bl	8005bae <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 800208c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002090:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8002092:	88bc      	ldrh	r4, [r7, #4]
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <DDS_Update+0x120>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f85b 	bl	8001154 <__aeabi_f2uiz>
 800209e:	4603      	mov	r3, r0
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4423      	add	r3, r4
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020b2:	480a      	ldr	r0, [pc, #40]	; (80020dc <DDS_Update+0x124>)
 80020b4:	f003 fd7b 	bl	8005bae <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 80020b8:	1d39      	adds	r1, r7, #4
 80020ba:	2305      	movs	r3, #5
 80020bc:	2201      	movs	r2, #1
 80020be:	4808      	ldr	r0, [pc, #32]	; (80020e0 <DDS_Update+0x128>)
 80020c0:	f006 ffc4 	bl	800904c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ca:	4804      	ldr	r0, [pc, #16]	; (80020dc <DDS_Update+0x124>)
 80020cc:	f003 fd6f 	bl	8005bae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
*/
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd90      	pop	{r4, r7, pc}
 80020d8:	20000d08 	.word	0x20000d08
 80020dc:	40020400 	.word	0x40020400
 80020e0:	20000d88 	.word	0x20000d88

080020e4 <LcdSend>:
unsigned char LcdCache[LCD_CACHSIZE];   // Фреймбуфер
unsigned int LcdCacheIdx = 0;   // Текущий адрес во фреймбуфере


void LcdSend(uint8_t data, uint8_t cmd) //Sends data to display controller
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	460a      	mov	r2, r1
 80020ee:	71fb      	strb	r3, [r7, #7]
 80020f0:	4613      	mov	r3, r2
 80020f2:	71bb      	strb	r3, [r7, #6]
  uint8_t sdata = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]

  lcd44780_RW_0;
 80020f8:	2200      	movs	r2, #0
 80020fa:	2102      	movs	r1, #2
 80020fc:	4811      	ldr	r0, [pc, #68]	; (8002144 <LcdSend+0x60>)
 80020fe:	f003 fd56 	bl	8005bae <HAL_GPIO_WritePin>

  sdata = data;
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	73fb      	strb	r3, [r7, #15]
  if(cmd == lcd_CMD)
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <LcdSend+0x34>
  {
	  lcd44780_RS_0;
 800210c:	2201      	movs	r2, #1
 800210e:	2101      	movs	r1, #1
 8002110:	480c      	ldr	r0, [pc, #48]	; (8002144 <LcdSend+0x60>)
 8002112:	f003 fd4c 	bl	8005bae <HAL_GPIO_WritePin>
 8002116:	e004      	b.n	8002122 <LcdSend+0x3e>
  }                             //идентефикатор кода
  else
  {
	  lcd44780_RS_1;
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <LcdSend+0x60>)
 800211e:	f003 fd46 	bl	8005bae <HAL_GPIO_WritePin>
  }                             //идентефикатор данных
  send_data(sdata);
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f97d 	bl	8002424 <send_data>

  if(cmd == lcd_CMD)while(check_busy_flag());
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <LcdSend+0x58>
 8002130:	bf00      	nop
 8002132:	f000 f98d 	bl	8002450 <check_busy_flag>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1fa      	bne.n	8002132 <LcdSend+0x4e>
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40020400 	.word	0x40020400

08002148 <LcdUpdate>:

void LcdUpdate(void)            //Copies the LCD cache into the device RAM
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  int i = 0, j = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	2300      	movs	r3, #0
 8002154:	603b      	str	r3, [r7, #0]

  LcdSend(HD44780_SET_CGRAM_ADD, lcd_CMD);//Позицианируем курсор на начало координат
 8002156:	2101      	movs	r1, #1
 8002158:	2040      	movs	r0, #64	; 0x40
 800215a:	f7ff ffc3 	bl	80020e4 <LcdSend>
  LcdSend(HD44780_SET_DDRAM_ADD, lcd_CMD);
 800215e:	2101      	movs	r1, #1
 8002160:	2080      	movs	r0, #128	; 0x80
 8002162:	f7ff ffbf 	bl	80020e4 <LcdSend>

  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	e017      	b.n	800219c <LcdUpdate+0x54>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 800216c:	2300      	movs	r3, #0
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	e00e      	b.n	8002190 <LcdUpdate+0x48>
    {
      LcdSend(LcdCache[((i * LCD_X_RES) + j)], lcd_DATA);       //вычисляем адрес в фрейм буфере, и данные от туда грузим в дисплей.
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2264      	movs	r2, #100	; 0x64
 8002176:	fb03 f202 	mul.w	r2, r3, r2
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	4413      	add	r3, r2
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <LcdUpdate+0x64>)
 8002180:	5cd3      	ldrb	r3, [r2, r3]
 8002182:	2102      	movs	r1, #2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ffad 	bl	80020e4 <LcdSend>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b63      	cmp	r3, #99	; 0x63
 8002194:	dded      	ble.n	8002172 <LcdUpdate+0x2a>
  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3301      	adds	r3, #1
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	dde4      	ble.n	800216c <LcdUpdate+0x24>
    }
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000b50 	.word	0x20000b50

080021b0 <LcdClear_massive>:
  LcdUpdate();
}


void LcdClear_massive(void)     //Clears the display
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
  int i = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]

  for (i = 0; i < LCD_CACHSIZE; i++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	e007      	b.n	80021d0 <LcdClear_massive+0x20>
    LcdCache[i] = 0;            //забиваем всю память 0
 80021c0:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <LcdClear_massive+0x34>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < LCD_CACHSIZE; i++)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3301      	adds	r3, #1
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2bc7      	cmp	r3, #199	; 0xc7
 80021d4:	ddf4      	ble.n	80021c0 <LcdClear_massive+0x10>
}
 80021d6:	bf00      	nop
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000b50 	.word	0x20000b50

080021e8 <LcdGotoXYFont>:
  }
}


void LcdGotoXYFont(unsigned char x, unsigned char y)    //Sets cursor location to xy location. Range: 1,1 .. 14,6
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	460a      	mov	r2, r1
 80021f2:	71fb      	strb	r3, [r7, #7]
 80021f4:	4613      	mov	r3, r2
 80021f6:	71bb      	strb	r3, [r7, #6]
  LcdCacheIdx = ((int) (y) - 1) * Cntr_X_RES + ((int) (x) - 1) * Cntr_Y_RES;
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	2264      	movs	r2, #100	; 0x64
 80021fe:	fb03 f202 	mul.w	r2, r3, r2
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	3b01      	subs	r3, #1
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	4413      	add	r3, r2
 800220a:	461a      	mov	r2, r3
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <LcdGotoXYFont+0x34>)
 800220e:	601a      	str	r2, [r3, #0]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000c18 	.word	0x20000c18

08002220 <clean_lcd_buf>:

void clean_lcd_buf(void)        //очистка текстового буфера
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	71fb      	strb	r3, [r7, #7]

  for (i = 0; i < 20; i++)
 800222a:	2300      	movs	r3, #0
 800222c:	71fb      	strb	r3, [r7, #7]
 800222e:	e006      	b.n	800223e <clean_lcd_buf+0x1e>
    lcd_buf[i] = 0;
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	4a07      	ldr	r2, [pc, #28]	; (8002250 <clean_lcd_buf+0x30>)
 8002234:	2100      	movs	r1, #0
 8002236:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 20; i++)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	3301      	adds	r3, #1
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b13      	cmp	r3, #19
 8002242:	d9f5      	bls.n	8002230 <clean_lcd_buf+0x10>
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	20000b3c 	.word	0x20000b3c

08002254 <LcdChr>:

void LcdChr(int ch)             //Displays a character at current cursor location and increment cursor location
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  char i = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
  if(ch > 0x7f)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b7f      	cmp	r3, #127	; 0x7f
 8002264:	dd1a      	ble.n	800229c <LcdChr+0x48>
  {
    for (i = 0; i < 5; i++)
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	e013      	b.n	8002294 <LcdChr+0x40>
      LcdCache[LcdCacheIdx++] = lcd_font_table_rus[(ch * 5 + (i) - 0x3C0)];     //выделяем байт-столбик из символа и грузим в массив - 5 раз
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	441a      	add	r2, r3
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	4413      	add	r3, r2
 8002278:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <LcdChr+0x98>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	1c59      	adds	r1, r3, #1
 8002282:	481a      	ldr	r0, [pc, #104]	; (80022ec <LcdChr+0x98>)
 8002284:	6001      	str	r1, [r0, #0]
 8002286:	491a      	ldr	r1, [pc, #104]	; (80022f0 <LcdChr+0x9c>)
 8002288:	5c89      	ldrb	r1, [r1, r2]
 800228a:	4a1a      	ldr	r2, [pc, #104]	; (80022f4 <LcdChr+0xa0>)
 800228c:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	3301      	adds	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	2b04      	cmp	r3, #4
 8002298:	d9e8      	bls.n	800226c <LcdChr+0x18>
 800229a:	e019      	b.n	80022d0 <LcdChr+0x7c>
  } else
  {
    for (i = 0; i < 5; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e013      	b.n	80022ca <LcdChr+0x76>
      LcdCache[LcdCacheIdx++] = lcd_font_table[(ch * 5 + (i) - 0xA0)];  //выделяем байт-столбик из символа и грузим в массив - 5 раз
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	4413      	add	r3, r2
 80022ae:	f1a3 02a0 	sub.w	r2, r3, #160	; 0xa0
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <LcdChr+0x98>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	1c59      	adds	r1, r3, #1
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <LcdChr+0x98>)
 80022ba:	6001      	str	r1, [r0, #0]
 80022bc:	490e      	ldr	r1, [pc, #56]	; (80022f8 <LcdChr+0xa4>)
 80022be:	5c89      	ldrb	r1, [r1, r2]
 80022c0:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <LcdChr+0xa0>)
 80022c2:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	3301      	adds	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d9e8      	bls.n	80022a2 <LcdChr+0x4e>
  }
  LcdCache[LcdCacheIdx++] = 0x00;       //добавляем пробел между символами
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <LcdChr+0x98>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	4905      	ldr	r1, [pc, #20]	; (80022ec <LcdChr+0x98>)
 80022d8:	600a      	str	r2, [r1, #0]
 80022da:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <LcdChr+0xa0>)
 80022dc:	2100      	movs	r1, #0
 80022de:	54d1      	strb	r1, [r2, r3]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000c18 	.word	0x20000c18
 80022f0:	200001e0 	.word	0x200001e0
 80022f4:	20000b50 	.word	0x20000b50
 80022f8:	20000000 	.word	0x20000000

080022fc <LcdString>:
  }
  LcdCache[LcdCacheIdx++] = 0xFF;       //добавляем пробел между символами
}

void LcdString(unsigned char x, unsigned char y)        //Displays a string at current cursor location
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
  unsigned char i = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]

  if(x > 17 || y > 8)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2b11      	cmp	r3, #17
 8002314:	d81f      	bhi.n	8002356 <LcdString+0x5a>
 8002316:	79bb      	ldrb	r3, [r7, #6]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d81c      	bhi.n	8002356 <LcdString+0x5a>
    return;
  LcdGotoXYFont(x, y);
 800231c:	79ba      	ldrb	r2, [r7, #6]
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff60 	bl	80021e8 <LcdGotoXYFont>
  for (i = 0; i < 17; i++)
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e00d      	b.n	800234a <LcdString+0x4e>
    if(lcd_buf[i])
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <LcdString+0x64>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <LcdString+0x48>
      LcdChr(lcd_buf[i]);
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <LcdString+0x64>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff88 	bl	8002254 <LcdChr>
  for (i = 0; i < 17; i++)
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	3301      	adds	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2b10      	cmp	r3, #16
 800234e:	d9ee      	bls.n	800232e <LcdString+0x32>
  clean_lcd_buf();
 8002350:	f7ff ff66 	bl	8002220 <clean_lcd_buf>
 8002354:	e000      	b.n	8002358 <LcdString+0x5c>
    return;
 8002356:	bf00      	nop
}
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000b3c 	.word	0x20000b3c

08002364 <pulse_e>:
//////////////////////////////////////////////////////////////////////////////////////



void pulse_e() //импульс на вход Е индикатора
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_SET);//    PIN_ON(PIN_E);
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <pulse_e+0x20>)
 8002370:	f003 fc1d 	bl	8005bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 8002374:	2200      	movs	r2, #0
 8002376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800237a:	4802      	ldr	r0, [pc, #8]	; (8002384 <pulse_e+0x20>)
 800237c:	f003 fc17 	bl	8005bae <HAL_GPIO_WritePin>
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40020400 	.word	0x40020400

08002388 <send_nibble>:

void send_nibble(unsigned char data) //полубайтовый вывод
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  //выводим половину байта на соответствующие контакты
  if(data & 0x01)
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <send_nibble+0x20>
	HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB4);
 800239c:	2201      	movs	r2, #1
 800239e:	2104      	movs	r1, #4
 80023a0:	481f      	ldr	r0, [pc, #124]	; (8002420 <send_nibble+0x98>)
 80023a2:	f003 fc04 	bl	8005bae <HAL_GPIO_WritePin>
 80023a6:	e004      	b.n	80023b2 <send_nibble+0x2a>
  else
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2104      	movs	r1, #4
 80023ac:	481c      	ldr	r0, [pc, #112]	; (8002420 <send_nibble+0x98>)
 80023ae:	f003 fbfe 	bl	8005bae <HAL_GPIO_WritePin>

  if(data & 0x02)
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <send_nibble+0x40>
		HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB5);
 80023bc:	2201      	movs	r2, #1
 80023be:	2108      	movs	r1, #8
 80023c0:	4817      	ldr	r0, [pc, #92]	; (8002420 <send_nibble+0x98>)
 80023c2:	f003 fbf4 	bl	8005bae <HAL_GPIO_WritePin>
 80023c6:	e004      	b.n	80023d2 <send_nibble+0x4a>
	  else
	    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 80023c8:	2200      	movs	r2, #0
 80023ca:	2108      	movs	r1, #8
 80023cc:	4814      	ldr	r0, [pc, #80]	; (8002420 <send_nibble+0x98>)
 80023ce:	f003 fbee 	bl	8005bae <HAL_GPIO_WritePin>

  if(data & 0x04)
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <send_nibble+0x60>
		HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB6);
 80023dc:	2201      	movs	r2, #1
 80023de:	2110      	movs	r1, #16
 80023e0:	480f      	ldr	r0, [pc, #60]	; (8002420 <send_nibble+0x98>)
 80023e2:	f003 fbe4 	bl	8005bae <HAL_GPIO_WritePin>
 80023e6:	e004      	b.n	80023f2 <send_nibble+0x6a>
	  else
	    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2110      	movs	r1, #16
 80023ec:	480c      	ldr	r0, [pc, #48]	; (8002420 <send_nibble+0x98>)
 80023ee:	f003 fbde 	bl	8005bae <HAL_GPIO_WritePin>

  if(data & 0x08)
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <send_nibble+0x80>
		HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB7);
 80023fc:	2201      	movs	r2, #1
 80023fe:	2120      	movs	r1, #32
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <send_nibble+0x98>)
 8002402:	f003 fbd4 	bl	8005bae <HAL_GPIO_WritePin>
 8002406:	e004      	b.n	8002412 <send_nibble+0x8a>
	  else
	    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 8002408:	2200      	movs	r2, #0
 800240a:	2120      	movs	r1, #32
 800240c:	4804      	ldr	r0, [pc, #16]	; (8002420 <send_nibble+0x98>)
 800240e:	f003 fbce 	bl	8005bae <HAL_GPIO_WritePin>

  pulse_e(); //чтобы индикатор проглотил данные
 8002412:	f7ff ffa7 	bl	8002364 <pulse_e>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40020400 	.word	0x40020400

08002424 <send_data>:

void send_data(unsigned char data) //вывод 2хполбайта на индикатор
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  //Первым шлем старшие полбайта: по инструкции
  //сначала столбец, потом строка таблицы знакогенератора
  send_nibble((data>>4) & 0x0F);
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	b2db      	uxtb	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ffa7 	bl	8002388 <send_nibble>
  send_nibble(data & 0x0F);
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	b2db      	uxtb	r3, r3
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ffa0 	bl	8002388 <send_nibble>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <check_busy_flag>:

int check_busy_flag(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002456:	463b      	mov	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
	GPIO_PinState status;

	lcd44780_RW_1; // Read
 8002464:	2201      	movs	r2, #1
 8002466:	2102      	movs	r1, #2
 8002468:	4822      	ldr	r0, [pc, #136]	; (80024f4 <check_busy_flag+0xa4>)
 800246a:	f003 fba0 	bl	8005bae <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 800246e:	2320      	movs	r3, #32
 8002470:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247a:	2302      	movs	r3, #2
 800247c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	463b      	mov	r3, r7
 8002480:	4619      	mov	r1, r3
 8002482:	481c      	ldr	r0, [pc, #112]	; (80024f4 <check_busy_flag+0xa4>)
 8002484:	f003 f9fc 	bl	8005880 <HAL_GPIO_Init>

	lcd44780_E_1;
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800248e:	4819      	ldr	r0, [pc, #100]	; (80024f4 <check_busy_flag+0xa4>)
 8002490:	f003 fb8d 	bl	8005bae <HAL_GPIO_WritePin>
	status=HAL_GPIO_ReadPin(Display_DB7_GPIO_Port, Display_DB7_Pin);
 8002494:	2120      	movs	r1, #32
 8002496:	4817      	ldr	r0, [pc, #92]	; (80024f4 <check_busy_flag+0xa4>)
 8002498:	f003 fb72 	bl	8005b80 <HAL_GPIO_ReadPin>
 800249c:	4603      	mov	r3, r0
 800249e:	75fb      	strb	r3, [r7, #23]
	lcd44780_E_0;
 80024a0:	2200      	movs	r2, #0
 80024a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024a6:	4813      	ldr	r0, [pc, #76]	; (80024f4 <check_busy_flag+0xa4>)
 80024a8:	f003 fb81 	bl	8005bae <HAL_GPIO_WritePin>
	lcd44780_E_1;
 80024ac:	2201      	movs	r2, #1
 80024ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024b2:	4810      	ldr	r0, [pc, #64]	; (80024f4 <check_busy_flag+0xa4>)
 80024b4:	f003 fb7b 	bl	8005bae <HAL_GPIO_WritePin>
	lcd44780_E_0;
 80024b8:	2200      	movs	r2, #0
 80024ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024be:	480d      	ldr	r0, [pc, #52]	; (80024f4 <check_busy_flag+0xa4>)
 80024c0:	f003 fb75 	bl	8005bae <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 80024c4:	2320      	movs	r3, #32
 80024c6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80024c8:	2311      	movs	r3, #17
 80024ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d0:	2302      	movs	r3, #2
 80024d2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d4:	463b      	mov	r3, r7
 80024d6:	4619      	mov	r1, r3
 80024d8:	4806      	ldr	r0, [pc, #24]	; (80024f4 <check_busy_flag+0xa4>)
 80024da:	f003 f9d1 	bl	8005880 <HAL_GPIO_Init>
	lcd44780_RW_0;
 80024de:	2200      	movs	r2, #0
 80024e0:	2102      	movs	r1, #2
 80024e2:	4804      	ldr	r0, [pc, #16]	; (80024f4 <check_busy_flag+0xa4>)
 80024e4:	f003 fb63 	bl	8005bae <HAL_GPIO_WritePin>
	return status;
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40020400 	.word	0x40020400

080024f8 <init_LCD>:

void init_LCD() //инициализация ЖК
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_Power_GPIO_Port, Display_Power_Pin, GPIO_PIN_RESET);
 80024fc:	2200      	movs	r2, #0
 80024fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002502:	4847      	ldr	r0, [pc, #284]	; (8002620 <init_LCD+0x128>)
 8002504:	f003 fb53 	bl	8005bae <HAL_GPIO_WritePin>
  //Выводы в 0
    HAL_GPIO_WritePin(Display_RS_GPIO_Port, Display_RS_Pin, GPIO_PIN_SET);//  PIN_OFF(PIN_RS); !!!
 8002508:	2201      	movs	r2, #1
 800250a:	2101      	movs	r1, #1
 800250c:	4844      	ldr	r0, [pc, #272]	; (8002620 <init_LCD+0x128>)
 800250e:	f003 fb4e 	bl	8005bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 8002512:	2200      	movs	r2, #0
 8002514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002518:	4841      	ldr	r0, [pc, #260]	; (8002620 <init_LCD+0x128>)
 800251a:	f003 fb48 	bl	8005bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 800251e:	2200      	movs	r2, #0
 8002520:	2104      	movs	r1, #4
 8002522:	483f      	ldr	r0, [pc, #252]	; (8002620 <init_LCD+0x128>)
 8002524:	f003 fb43 	bl	8005bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 8002528:	2200      	movs	r2, #0
 800252a:	2108      	movs	r1, #8
 800252c:	483c      	ldr	r0, [pc, #240]	; (8002620 <init_LCD+0x128>)
 800252e:	f003 fb3e 	bl	8005bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 8002532:	2200      	movs	r2, #0
 8002534:	2110      	movs	r1, #16
 8002536:	483a      	ldr	r0, [pc, #232]	; (8002620 <init_LCD+0x128>)
 8002538:	f003 fb39 	bl	8005bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 800253c:	2200      	movs	r2, #0
 800253e:	2120      	movs	r1, #32
 8002540:	4837      	ldr	r0, [pc, #220]	; (8002620 <init_LCD+0x128>)
 8002542:	f003 fb34 	bl	8005bae <HAL_GPIO_WritePin>

	//Ждем включения ЖКИ
    HAL_Delay(500);
 8002546:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800254a:	f002 fccb 	bl	8004ee4 <HAL_Delay>
    lcd44780_RS_0;
 800254e:	2201      	movs	r2, #1
 8002550:	2101      	movs	r1, #1
 8002552:	4833      	ldr	r0, [pc, #204]	; (8002620 <init_LCD+0x128>)
 8002554:	f003 fb2b 	bl	8005bae <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 8002558:	2200      	movs	r2, #0
 800255a:	2102      	movs	r1, #2
 800255c:	4830      	ldr	r0, [pc, #192]	; (8002620 <init_LCD+0x128>)
 800255e:	f003 fb26 	bl	8005bae <HAL_GPIO_WritePin>
	send_nibble(0x02);
 8002562:	2002      	movs	r0, #2
 8002564:	f7ff ff10 	bl	8002388 <send_nibble>
	send_nibble(0x02);
 8002568:	2002      	movs	r0, #2
 800256a:	f7ff ff0d 	bl	8002388 <send_nibble>
	send_nibble(0x08);// N=1 F=0
 800256e:	2008      	movs	r0, #8
 8002570:	f7ff ff0a 	bl	8002388 <send_nibble>

	while(check_busy_flag());
 8002574:	bf00      	nop
 8002576:	f7ff ff6b 	bl	8002450 <check_busy_flag>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1fa      	bne.n	8002576 <init_LCD+0x7e>

	send_nibble(0x00);
 8002580:	2000      	movs	r0, #0
 8002582:	f7ff ff01 	bl	8002388 <send_nibble>
	send_nibble(0x0E);// D=1 C=1 B=0
 8002586:	200e      	movs	r0, #14
 8002588:	f7ff fefe 	bl	8002388 <send_nibble>

	while(check_busy_flag());
 800258c:	bf00      	nop
 800258e:	f7ff ff5f 	bl	8002450 <check_busy_flag>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1fa      	bne.n	800258e <init_LCD+0x96>
	send_nibble(0x00);
 8002598:	2000      	movs	r0, #0
 800259a:	f7ff fef5 	bl	8002388 <send_nibble>
	send_nibble(0x01);
 800259e:	2001      	movs	r0, #1
 80025a0:	f7ff fef2 	bl	8002388 <send_nibble>

	while(check_busy_flag());
 80025a4:	bf00      	nop
 80025a6:	f7ff ff53 	bl	8002450 <check_busy_flag>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1fa      	bne.n	80025a6 <init_LCD+0xae>
	send_nibble(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7ff fee9 	bl	8002388 <send_nibble>
	send_nibble(0x06); // I/D=1  S/H=0
 80025b6:	2006      	movs	r0, #6
 80025b8:	f7ff fee6 	bl	8002388 <send_nibble>
//	send_nibble(0x04); // I/D=0  S/H=0

	while(check_busy_flag());
 80025bc:	bf00      	nop
 80025be:	f7ff ff47 	bl	8002450 <check_busy_flag>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1fa      	bne.n	80025be <init_LCD+0xc6>

    lcd44780_RS_0;
 80025c8:	2201      	movs	r2, #1
 80025ca:	2101      	movs	r1, #1
 80025cc:	4814      	ldr	r0, [pc, #80]	; (8002620 <init_LCD+0x128>)
 80025ce:	f003 faee 	bl	8005bae <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 80025d2:	2200      	movs	r2, #0
 80025d4:	2102      	movs	r1, #2
 80025d6:	4812      	ldr	r0, [pc, #72]	; (8002620 <init_LCD+0x128>)
 80025d8:	f003 fae9 	bl	8005bae <HAL_GPIO_WritePin>
	send_nibble(0x02); // DL=0
 80025dc:	2002      	movs	r0, #2
 80025de:	f7ff fed3 	bl	8002388 <send_nibble>
	send_nibble(0x0A);// N=1 F=0 FT1=1 FT0=0
 80025e2:	200a      	movs	r0, #10
 80025e4:	f7ff fed0 	bl	8002388 <send_nibble>
	while(check_busy_flag());
 80025e8:	bf00      	nop
 80025ea:	f7ff ff31 	bl	8002450 <check_busy_flag>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1fa      	bne.n	80025ea <init_LCD+0xf2>


    send_data(0x1F); //переключение в графику
 80025f4:	201f      	movs	r0, #31
 80025f6:	f7ff ff15 	bl	8002424 <send_data>
    while(check_busy_flag());
 80025fa:	bf00      	nop
 80025fc:	f7ff ff28 	bl	8002450 <check_busy_flag>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1fa      	bne.n	80025fc <init_LCD+0x104>

    send_data(0x01); //очистили от мусора ОЗУ (т.с. что clear())
 8002606:	2001      	movs	r0, #1
 8002608:	f7ff ff0c 	bl	8002424 <send_data>
    while(check_busy_flag());
 800260c:	bf00      	nop
 800260e:	f7ff ff1f 	bl	8002450 <check_busy_flag>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1fa      	bne.n	800260e <init_LCD+0x116>

    LcdClear_massive();
 8002618:	f7ff fdca 	bl	80021b0 <LcdClear_massive>

}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40020400 	.word	0x40020400

08002624 <LcdBarLine>:
while(check_busy_flag());

}

void LcdBarLine(uint32_t fill)    // рисуем прогресс-бар в второй строке
{
 8002624:	b5b0      	push	{r4, r5, r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	uint16_t i, full_fill_position;
	float y;

	if(fill>0xFFFFF)return;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002632:	f080 808f 	bcs.w	8002754 <LcdBarLine+0x130>

	// поиск свободного места в массиве кеша дисплея
//	for (i = LCD_CACHSIZE-1; i > LCD_X_RES; i--) // поиск свободного места в массиве кеша дисплея, в указанной строке
//		if(LcdCache[i]==0x00)
//			found_free_position=i;
	y=LCD_X_RES;
 8002636:	4b49      	ldr	r3, [pc, #292]	; (800275c <LcdBarLine+0x138>)
 8002638:	613b      	str	r3, [r7, #16]
	y*=8; //сколько всего диступно места
 800263a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800263e:	6938      	ldr	r0, [r7, #16]
 8002640:	f7fe fbc2 	bl	8000dc8 <__aeabi_fmul>
 8002644:	4603      	mov	r3, r0
 8002646:	613b      	str	r3, [r7, #16]
	y/=(float)0xFFFFF;
 8002648:	4945      	ldr	r1, [pc, #276]	; (8002760 <LcdBarLine+0x13c>)
 800264a:	6938      	ldr	r0, [r7, #16]
 800264c:	f7fe fc70 	bl	8000f30 <__aeabi_fdiv>
 8002650:	4603      	mov	r3, r0
 8002652:	613b      	str	r3, [r7, #16]
	y*=(float)fill;// получаем коэфицент заполнения прогрессбара
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fe fb5f 	bl	8000d18 <__aeabi_ui2f>
 800265a:	4603      	mov	r3, r0
 800265c:	4619      	mov	r1, r3
 800265e:	6938      	ldr	r0, [r7, #16]
 8002660:	f7fe fbb2 	bl	8000dc8 <__aeabi_fmul>
 8002664:	4603      	mov	r3, r0
 8002666:	613b      	str	r3, [r7, #16]
	full_fill_position=floor(y/8);
 8002668:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800266c:	6938      	ldr	r0, [r7, #16]
 800266e:	f7fe fc5f 	bl	8000f30 <__aeabi_fdiv>
 8002672:	4603      	mov	r3, r0
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd fef9 	bl	800046c <__aeabi_f2d>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f00c fd6d 	bl	800f160 <floor>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f7fe fa1d 	bl	8000acc <__aeabi_d2uiz>
 8002692:	4603      	mov	r3, r0
 8002694:	81fb      	strh	r3, [r7, #14]
	//need_to_be_filled=(LCD_CACHSIZE-1-found_free_position)*8 - ;
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 8002696:	2364      	movs	r3, #100	; 0x64
 8002698:	82fb      	strh	r3, [r7, #22]
 800269a:	e057      	b.n	800274c <LcdBarLine+0x128>
		if(y!=0)
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	6938      	ldr	r0, [r7, #16]
 80026a2:	f7fe fd25 	bl	80010f0 <__aeabi_fcmpeq>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d14c      	bne.n	8002746 <LcdBarLine+0x122>
		{
			if(full_fill_position>(i-LCD_X_RES))
 80026ac:	8afb      	ldrh	r3, [r7, #22]
 80026ae:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80026b2:	89fb      	ldrh	r3, [r7, #14]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dc08      	bgt.n	80026ca <LcdBarLine+0xa6>
			{
				LcdCache[i]=LcdCache[i]^0xFF;
 80026b8:	8afb      	ldrh	r3, [r7, #22]
 80026ba:	4a2a      	ldr	r2, [pc, #168]	; (8002764 <LcdBarLine+0x140>)
 80026bc:	5cd2      	ldrb	r2, [r2, r3]
 80026be:	8afb      	ldrh	r3, [r7, #22]
 80026c0:	43d2      	mvns	r2, r2
 80026c2:	b2d1      	uxtb	r1, r2
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <LcdBarLine+0x140>)
 80026c6:	54d1      	strb	r1, [r2, r3]
 80026c8:	e03d      	b.n	8002746 <LcdBarLine+0x122>
			} else
			{
				y-=floor(y/8)*8;
 80026ca:	6938      	ldr	r0, [r7, #16]
 80026cc:	f7fd fece 	bl	800046c <__aeabi_f2d>
 80026d0:	4604      	mov	r4, r0
 80026d2:	460d      	mov	r5, r1
 80026d4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80026d8:	6938      	ldr	r0, [r7, #16]
 80026da:	f7fe fc29 	bl	8000f30 <__aeabi_fdiv>
 80026de:	4603      	mov	r3, r0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd fec3 	bl	800046c <__aeabi_f2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	f00c fd37 	bl	800f160 <floor>
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <LcdBarLine+0x144>)
 80026f8:	f7fd ff10 	bl	800051c <__aeabi_dmul>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4620      	mov	r0, r4
 8002702:	4629      	mov	r1, r5
 8002704:	f7fd fd52 	bl	80001ac <__aeabi_dsub>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fe f9fc 	bl	8000b0c <__aeabi_d2f>
 8002714:	4603      	mov	r3, r0
 8002716:	613b      	str	r3, [r7, #16]
				LcdCache[i]=LcdCache[i]^((1<<(uint16_t)y)-1);
 8002718:	8afb      	ldrh	r3, [r7, #22]
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <LcdBarLine+0x140>)
 800271c:	5cd3      	ldrb	r3, [r2, r3]
 800271e:	b25c      	sxtb	r4, r3
 8002720:	6938      	ldr	r0, [r7, #16]
 8002722:	f7fe fd17 	bl	8001154 <__aeabi_f2uiz>
 8002726:	4603      	mov	r3, r0
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	2301      	movs	r3, #1
 800272e:	4093      	lsls	r3, r2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	b25b      	sxtb	r3, r3
 8002738:	4063      	eors	r3, r4
 800273a:	b25a      	sxtb	r2, r3
 800273c:	8afb      	ldrh	r3, [r7, #22]
 800273e:	b2d1      	uxtb	r1, r2
 8002740:	4a08      	ldr	r2, [pc, #32]	; (8002764 <LcdBarLine+0x140>)
 8002742:	54d1      	strb	r1, [r2, r3]
				break;
 8002744:	e007      	b.n	8002756 <LcdBarLine+0x132>
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 8002746:	8afb      	ldrh	r3, [r7, #22]
 8002748:	3301      	adds	r3, #1
 800274a:	82fb      	strh	r3, [r7, #22]
 800274c:	8afb      	ldrh	r3, [r7, #22]
 800274e:	2bc7      	cmp	r3, #199	; 0xc7
 8002750:	d9a4      	bls.n	800269c <LcdBarLine+0x78>
 8002752:	e000      	b.n	8002756 <LcdBarLine+0x132>
	if(fill>0xFFFFF)return;
 8002754:	bf00      	nop
			}
		}
	}

}
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bdb0      	pop	{r4, r5, r7, pc}
 800275c:	42c80000 	.word	0x42c80000
 8002760:	497ffff0 	.word	0x497ffff0
 8002764:	20000b50 	.word	0x20000b50
 8002768:	40200000 	.word	0x40200000

0800276c <output_state>:
//==============================================================================================


//==============================================================================================
void output_state(uint8_t type)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	int relay_settling_time_ms=50;
 8002776:	2332      	movs	r3, #50	; 0x32
 8002778:	60fb      	str	r3, [r7, #12]
	switch(type)
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2b04      	cmp	r3, #4
 800277e:	f200 80f2 	bhi.w	8002966 <output_state+0x1fa>
 8002782:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <output_state+0x1c>)
 8002784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002788:	0800279d 	.word	0x0800279d
 800278c:	080027d5 	.word	0x080027d5
 8002790:	08002825 	.word	0x08002825
 8002794:	08002885 	.word	0x08002885
 8002798:	080028e5 	.word	0x080028e5
	{
	//----------------------------------------------------------//
	case Output_off_STATE:
	  Relay_control(0,0); // set all coils off
 800279c:	2100      	movs	r1, #0
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe ff54 	bl	800164c <Relay_control>
	  Relay_control(1,0); // x1 mode
 80027a4:	2100      	movs	r1, #0
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7fe ff50 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 80027ac:	2100      	movs	r1, #0
 80027ae:	2002      	movs	r0, #2
 80027b0:	f7fe ff4c 	bl	800164c <Relay_control>
	  Relay_control(3,0); // Output Enable
 80027b4:	2100      	movs	r1, #0
 80027b6:	2003      	movs	r0, #3
 80027b8:	f7fe ff48 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fb90 	bl	8004ee4 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 80027c4:	2100      	movs	r1, #0
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe ff40 	bl	800164c <Relay_control>
	  Current_output_status=Output_off_STATE;
 80027cc:	4b68      	ldr	r3, [pc, #416]	; (8002970 <output_state+0x204>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
	  break;
 80027d2:	e0c8      	b.n	8002966 <output_state+0x1fa>

	case Output_x1_STATE:
	  Relay_control(0,0); // set all coils off
 80027d4:	2100      	movs	r1, #0
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7fe ff38 	bl	800164c <Relay_control>
	  Relay_control(1,0); // x1 mode
 80027dc:	2100      	movs	r1, #0
 80027de:	2001      	movs	r0, #1
 80027e0:	f7fe ff34 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 80027e4:	2100      	movs	r1, #0
 80027e6:	2002      	movs	r0, #2
 80027e8:	f7fe ff30 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 80027ec:	2101      	movs	r1, #1
 80027ee:	2003      	movs	r0, #3
 80027f0:	f7fe ff2c 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 fb74 	bl	8004ee4 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 80027fc:	2100      	movs	r1, #0
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe ff24 	bl	800164c <Relay_control>
	  Current_output_status=Output_x1_STATE;
 8002804:	4b5a      	ldr	r3, [pc, #360]	; (8002970 <output_state+0x204>)
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 800280a:	4b5a      	ldr	r3, [pc, #360]	; (8002974 <output_state+0x208>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a5a      	ldr	r2, [pc, #360]	; (8002978 <output_state+0x20c>)
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe f9cd 	bl	8000bb4 <__aeabi_fsub>
 800281a:	4603      	mov	r3, r0
 800281c:	461a      	mov	r2, r3
 800281e:	4b57      	ldr	r3, [pc, #348]	; (800297c <output_state+0x210>)
 8002820:	601a      	str	r2, [r3, #0]
	  break;
 8002822:	e0a0      	b.n	8002966 <output_state+0x1fa>

	case Output_x2_STATE:
	  Relay_control(0,0); // set all coils off
 8002824:	2100      	movs	r1, #0
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe ff10 	bl	800164c <Relay_control>
	  Relay_control(1,1); // x1 mode
 800282c:	2101      	movs	r1, #1
 800282e:	2001      	movs	r0, #1
 8002830:	f7fe ff0c 	bl	800164c <Relay_control>
	  Relay_control(2,1); // x2/x4 mode
 8002834:	2101      	movs	r1, #1
 8002836:	2002      	movs	r0, #2
 8002838:	f7fe ff08 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 800283c:	2101      	movs	r1, #1
 800283e:	2003      	movs	r0, #3
 8002840:	f7fe ff04 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4618      	mov	r0, r3
 8002848:	f002 fb4c 	bl	8004ee4 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 800284c:	2100      	movs	r1, #0
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe fefc 	bl	800164c <Relay_control>
	  Current_output_status=Output_x2_STATE;
 8002854:	4b46      	ldr	r3, [pc, #280]	; (8002970 <output_state+0x204>)
 8002856:	2202      	movs	r2, #2
 8002858:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x2_coeff;
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <output_state+0x208>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a46      	ldr	r2, [pc, #280]	; (8002978 <output_state+0x20c>)
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe f9a5 	bl	8000bb4 <__aeabi_fsub>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	4b44      	ldr	r3, [pc, #272]	; (8002980 <output_state+0x214>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f7fe faa7 	bl	8000dc8 <__aeabi_fmul>
 800287a:	4603      	mov	r3, r0
 800287c:	461a      	mov	r2, r3
 800287e:	4b3f      	ldr	r3, [pc, #252]	; (800297c <output_state+0x210>)
 8002880:	601a      	str	r2, [r3, #0]
	  break;
 8002882:	e070      	b.n	8002966 <output_state+0x1fa>

	case Output_x4_STATE:
	  Relay_control(0,0); // set all coils off
 8002884:	2100      	movs	r1, #0
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe fee0 	bl	800164c <Relay_control>
	  Relay_control(1,1); // x1 mode
 800288c:	2101      	movs	r1, #1
 800288e:	2001      	movs	r0, #1
 8002890:	f7fe fedc 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 8002894:	2100      	movs	r1, #0
 8002896:	2002      	movs	r0, #2
 8002898:	f7fe fed8 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 800289c:	2101      	movs	r1, #1
 800289e:	2003      	movs	r0, #3
 80028a0:	f7fe fed4 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 fb1c 	bl	8004ee4 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 80028ac:	2100      	movs	r1, #0
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7fe fecc 	bl	800164c <Relay_control>
	  Current_output_status=Output_x4_STATE;
 80028b4:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <output_state+0x204>)
 80028b6:	2203      	movs	r2, #3
 80028b8:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x4_coeff;
 80028ba:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <output_state+0x208>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a2e      	ldr	r2, [pc, #184]	; (8002978 <output_state+0x20c>)
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe f975 	bl	8000bb4 <__aeabi_fsub>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <output_state+0x218>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4619      	mov	r1, r3
 80028d4:	4610      	mov	r0, r2
 80028d6:	f7fe fa77 	bl	8000dc8 <__aeabi_fmul>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	4b27      	ldr	r3, [pc, #156]	; (800297c <output_state+0x210>)
 80028e0:	601a      	str	r2, [r3, #0]
	  break;
 80028e2:	e040      	b.n	8002966 <output_state+0x1fa>

	case Output_auto_STATE:
		if((cal_DAC_up_voltage-cal_DAC_down_voltage)/DAC_target_speed > 600)
 80028e4:	4b23      	ldr	r3, [pc, #140]	; (8002974 <output_state+0x208>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a23      	ldr	r2, [pc, #140]	; (8002978 <output_state+0x20c>)
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe f960 	bl	8000bb4 <__aeabi_fsub>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b23      	ldr	r3, [pc, #140]	; (8002988 <output_state+0x21c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f7fe fb16 	bl	8000f30 <__aeabi_fdiv>
 8002904:	4603      	mov	r3, r0
 8002906:	4921      	ldr	r1, [pc, #132]	; (800298c <output_state+0x220>)
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fc19 	bl	8001140 <__aeabi_fcmpgt>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <output_state+0x1b0>
		{
			output_state(Output_x1_STATE);
 8002914:	2001      	movs	r0, #1
 8002916:	f7ff ff29 	bl	800276c <output_state>
				output_state(Output_x2_STATE);
			}
			else
				output_state(Output_x4_STATE);

		break;
 800291a:	e023      	b.n	8002964 <output_state+0x1f8>
			if (((cal_DAC_up_voltage-cal_DAC_down_voltage)*2)/DAC_target_speed > 600)
 800291c:	4b15      	ldr	r3, [pc, #84]	; (8002974 <output_state+0x208>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <output_state+0x20c>)
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe f944 	bl	8000bb4 <__aeabi_fsub>
 800292c:	4603      	mov	r3, r0
 800292e:	4619      	mov	r1, r3
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe f941 	bl	8000bb8 <__addsf3>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <output_state+0x21c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f7fe faf5 	bl	8000f30 <__aeabi_fdiv>
 8002946:	4603      	mov	r3, r0
 8002948:	4910      	ldr	r1, [pc, #64]	; (800298c <output_state+0x220>)
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fbf8 	bl	8001140 <__aeabi_fcmpgt>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <output_state+0x1f2>
				output_state(Output_x2_STATE);
 8002956:	2002      	movs	r0, #2
 8002958:	f7ff ff08 	bl	800276c <output_state>
		break;
 800295c:	e002      	b.n	8002964 <output_state+0x1f8>
				output_state(Output_x4_STATE);
 800295e:	2003      	movs	r0, #3
 8002960:	f7ff ff04 	bl	800276c <output_state>
		break;
 8002964:	bf00      	nop
}
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000d20 	.word	0x20000d20
 8002974:	20000d18 	.word	0x20000d18
 8002978:	20000d1c 	.word	0x20000d1c
 800297c:	20000d14 	.word	0x20000d14
 8002980:	20000b34 	.word	0x20000b34
 8002984:	20000b38 	.word	0x20000b38
 8002988:	20000d10 	.word	0x20000d10
 800298c:	44160000 	.word	0x44160000

08002990 <display_screen>:
//==============================================================================================


//==============================================================================================
void display_screen(uint8_t type)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b087      	sub	sp, #28
 8002994:	af02      	add	r7, sp, #8
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
	char sign;
	switch(type)
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	2b03      	cmp	r3, #3
 800299e:	f200 8093 	bhi.w	8002ac8 <display_screen+0x138>
 80029a2:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <display_screen+0x18>)
 80029a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	08002a63 	.word	0x08002a63
 80029b0:	08002a85 	.word	0x08002a85
 80029b4:	08002aa7 	.word	0x08002aa7
	{
	//----------------------------------------------------------//
	case dU_dt_SCREEN:
		if(DAC_code_direction==DIRECTION_UP_STATE)
 80029b8:	4b45      	ldr	r3, [pc, #276]	; (8002ad0 <display_screen+0x140>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d102      	bne.n	80029c6 <display_screen+0x36>
		{
			sign='+';
 80029c0:	232b      	movs	r3, #43	; 0x2b
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e008      	b.n	80029d8 <display_screen+0x48>
		}
		else if(DAC_code_direction==DIRECTION_DOWN_STATE)
 80029c6:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <display_screen+0x140>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <display_screen+0x44>
		{
			sign='-';
 80029ce:	232d      	movs	r3, #45	; 0x2d
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e001      	b.n	80029d8 <display_screen+0x48>
		} else
		{
			sign='*';
 80029d4:	232a      	movs	r3, #42	; 0x2a
 80029d6:	73fb      	strb	r3, [r7, #15]
		}

		sprintf(lcd_buf,"' %c%1.4EV/s",sign, DAC_target_speed);
 80029d8:	7bfc      	ldrb	r4, [r7, #15]
 80029da:	4b3e      	ldr	r3, [pc, #248]	; (8002ad4 <display_screen+0x144>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fd44 	bl	800046c <__aeabi_f2d>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	e9cd 2300 	strd	r2, r3, [sp]
 80029ec:	4622      	mov	r2, r4
 80029ee:	493a      	ldr	r1, [pc, #232]	; (8002ad8 <display_screen+0x148>)
 80029f0:	483a      	ldr	r0, [pc, #232]	; (8002adc <display_screen+0x14c>)
 80029f2:	f00d f8d9 	bl	800fba8 <siprintf>
		LcdString(1, 1);
 80029f6:	2101      	movs	r1, #1
 80029f8:	2001      	movs	r0, #1
 80029fa:	f7ff fc7f 	bl	80022fc <LcdString>

		if(cfg.LDACMODE==1){
 80029fe:	4b38      	ldr	r3, [pc, #224]	; (8002ae0 <display_screen+0x150>)
 8002a00:	789b      	ldrb	r3, [r3, #2]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d117      	bne.n	8002a36 <display_screen+0xa6>
			sprintf(lcd_buf,"ARM      %01u:%02u:%02u",eta_hours,eta_minute,eta_second);
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <display_screen+0x154>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <display_screen+0x158>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4619      	mov	r1, r3
 8002a12:	4b36      	ldr	r3, [pc, #216]	; (8002aec <display_screen+0x15c>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4935      	ldr	r1, [pc, #212]	; (8002af0 <display_screen+0x160>)
 8002a1c:	482f      	ldr	r0, [pc, #188]	; (8002adc <display_screen+0x14c>)
 8002a1e:	f00d f8c3 	bl	800fba8 <siprintf>
			LcdString(1, 2);
 8002a22:	2102      	movs	r1, #2
 8002a24:	2001      	movs	r0, #1
 8002a26:	f7ff fc69 	bl	80022fc <LcdString>
			LcdBarLine(DAC_code);
 8002a2a:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <display_screen+0x164>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fdf8 	bl	8002624 <LcdBarLine>
			{
				sprintf(lcd_buf,"READY TO GO");
				LcdString(1, 2);
			}
		}
		break;
 8002a34:	e048      	b.n	8002ac8 <display_screen+0x138>
			if(Current_output_status==Output_off_STATE)
 8002a36:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <display_screen+0x168>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d108      	bne.n	8002a50 <display_screen+0xc0>
				sprintf(lcd_buf,"OUTPUT DISABLED");
 8002a3e:	492f      	ldr	r1, [pc, #188]	; (8002afc <display_screen+0x16c>)
 8002a40:	4826      	ldr	r0, [pc, #152]	; (8002adc <display_screen+0x14c>)
 8002a42:	f00d f8b1 	bl	800fba8 <siprintf>
				LcdString(1, 2);
 8002a46:	2102      	movs	r1, #2
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f7ff fc57 	bl	80022fc <LcdString>
		break;
 8002a4e:	e03b      	b.n	8002ac8 <display_screen+0x138>
				sprintf(lcd_buf,"READY TO GO");
 8002a50:	492b      	ldr	r1, [pc, #172]	; (8002b00 <display_screen+0x170>)
 8002a52:	4822      	ldr	r0, [pc, #136]	; (8002adc <display_screen+0x14c>)
 8002a54:	f00d f8a8 	bl	800fba8 <siprintf>
				LcdString(1, 2);
 8002a58:	2102      	movs	r1, #2
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f7ff fc4e 	bl	80022fc <LcdString>
		break;
 8002a60:	e032      	b.n	8002ac8 <display_screen+0x138>
	//----------------------------------------------------------//
	case Hello_SCREEN:
		sprintf(lcd_buf,"Hello AmpNuts!");
 8002a62:	4928      	ldr	r1, [pc, #160]	; (8002b04 <display_screen+0x174>)
 8002a64:	481d      	ldr	r0, [pc, #116]	; (8002adc <display_screen+0x14c>)
 8002a66:	f00d f89f 	bl	800fba8 <siprintf>
		LcdString(1, 1);
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f7ff fc45 	bl	80022fc <LcdString>
		sprintf(lcd_buf,"I`m Micron-GLIN");
 8002a72:	4925      	ldr	r1, [pc, #148]	; (8002b08 <display_screen+0x178>)
 8002a74:	4819      	ldr	r0, [pc, #100]	; (8002adc <display_screen+0x14c>)
 8002a76:	f00d f897 	bl	800fba8 <siprintf>
		LcdString(1, 2);
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f7ff fc3d 	bl	80022fc <LcdString>
		break;
 8002a82:	e021      	b.n	8002ac8 <display_screen+0x138>
	//----------------------------------------------------------//
	case Warm_up_SCREEN:
		sprintf(lcd_buf,"need time to");
 8002a84:	4921      	ldr	r1, [pc, #132]	; (8002b0c <display_screen+0x17c>)
 8002a86:	4815      	ldr	r0, [pc, #84]	; (8002adc <display_screen+0x14c>)
 8002a88:	f00d f88e 	bl	800fba8 <siprintf>
		LcdString(1, 1);
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f7ff fc34 	bl	80022fc <LcdString>
		sprintf(lcd_buf,"warm-up my refs");
 8002a94:	491e      	ldr	r1, [pc, #120]	; (8002b10 <display_screen+0x180>)
 8002a96:	4811      	ldr	r0, [pc, #68]	; (8002adc <display_screen+0x14c>)
 8002a98:	f00d f886 	bl	800fba8 <siprintf>
		LcdString(1, 2);
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7ff fc2c 	bl	80022fc <LcdString>
		break;
 8002aa4:	e010      	b.n	8002ac8 <display_screen+0x138>
	//----------------------------------------------------------//
	case Ready_SCREEN:
		sprintf(lcd_buf,"I`m ready...");
 8002aa6:	491b      	ldr	r1, [pc, #108]	; (8002b14 <display_screen+0x184>)
 8002aa8:	480c      	ldr	r0, [pc, #48]	; (8002adc <display_screen+0x14c>)
 8002aaa:	f00d f87d 	bl	800fba8 <siprintf>
		LcdString(1, 1);
 8002aae:	2101      	movs	r1, #1
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f7ff fc23 	bl	80022fc <LcdString>
		sprintf(lcd_buf,"      Let`s start!");
 8002ab6:	4918      	ldr	r1, [pc, #96]	; (8002b18 <display_screen+0x188>)
 8002ab8:	4808      	ldr	r0, [pc, #32]	; (8002adc <display_screen+0x14c>)
 8002aba:	f00d f875 	bl	800fba8 <siprintf>
		LcdString(1, 2);
 8002abe:	2102      	movs	r1, #2
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7ff fc1b 	bl	80022fc <LcdString>
		break;
 8002ac6:	bf00      	nop
	}

}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd90      	pop	{r4, r7, pc}
 8002ad0:	20000d28 	.word	0x20000d28
 8002ad4:	20000d10 	.word	0x20000d10
 8002ad8:	08013700 	.word	0x08013700
 8002adc:	20000b3c 	.word	0x20000b3c
 8002ae0:	20000cfc 	.word	0x20000cfc
 8002ae4:	20000cd0 	.word	0x20000cd0
 8002ae8:	20000cd1 	.word	0x20000cd1
 8002aec:	20000cd2 	.word	0x20000cd2
 8002af0:	08013710 	.word	0x08013710
 8002af4:	20000d24 	.word	0x20000d24
 8002af8:	20000d20 	.word	0x20000d20
 8002afc:	08013728 	.word	0x08013728
 8002b00:	08013738 	.word	0x08013738
 8002b04:	08013744 	.word	0x08013744
 8002b08:	08013754 	.word	0x08013754
 8002b0c:	08013764 	.word	0x08013764
 8002b10:	08013774 	.word	0x08013774
 8002b14:	08013784 	.word	0x08013784
 8002b18:	08013794 	.word	0x08013794

08002b1c <send_answer_to_CDC>:
//==============================================================================================


//==============================================================================================
void send_answer_to_CDC(uint8_t type)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
	uint8_t cdc_counter=0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]

	switch(type)
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	f200 80b5 	bhi.w	8002c9c <send_answer_to_CDC+0x180>
 8002b32:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <send_answer_to_CDC+0x1c>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b7f 	.word	0x08002b7f
 8002b3c:	08002ba5 	.word	0x08002ba5
 8002b40:	08002bcb 	.word	0x08002bcb
 8002b44:	08002bf1 	.word	0x08002bf1
 8002b48:	08002c17 	.word	0x08002c17
 8002b4c:	08002c3d 	.word	0x08002c3d
 8002b50:	08002c9d 	.word	0x08002c9d
 8002b54:	08002c9d 	.word	0x08002c9d
 8002b58:	08002c9d 	.word	0x08002c9d
 8002b5c:	08002c9d 	.word	0x08002c9d
 8002b60:	08002c9d 	.word	0x08002c9d
 8002b64:	08002c9d 	.word	0x08002c9d
 8002b68:	08002c9d 	.word	0x08002c9d
 8002b6c:	08002c9d 	.word	0x08002c9d
 8002b70:	08002c9d 	.word	0x08002c9d
 8002b74:	08002c63 	.word	0x08002c63
	{
	case ERROR_TYPE_1:
		while((CDC_Transmit_FS(Error1, strlen((const char *)Error1))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
 8002b7e:	4849      	ldr	r0, [pc, #292]	; (8002ca4 <send_answer_to_CDC+0x188>)
 8002b80:	f7fd fb08 	bl	8000194 <strlen>
 8002b84:	4603      	mov	r3, r0
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4846      	ldr	r0, [pc, #280]	; (8002ca4 <send_answer_to_CDC+0x188>)
 8002b8c:	f00b fef4 	bl	800e978 <CDC_Transmit_FS>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d075      	beq.n	8002c82 <send_answer_to_CDC+0x166>
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2bff      	cmp	r3, #255	; 0xff
 8002b9a:	d1ed      	bne.n	8002b78 <send_answer_to_CDC+0x5c>
		break;
 8002b9c:	e071      	b.n	8002c82 <send_answer_to_CDC+0x166>
	case ERROR_TYPE_2:
		while((CDC_Transmit_FS(Error2, strlen((const char *)Error2))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	4840      	ldr	r0, [pc, #256]	; (8002ca8 <send_answer_to_CDC+0x18c>)
 8002ba6:	f7fd faf5 	bl	8000194 <strlen>
 8002baa:	4603      	mov	r3, r0
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	4619      	mov	r1, r3
 8002bb0:	483d      	ldr	r0, [pc, #244]	; (8002ca8 <send_answer_to_CDC+0x18c>)
 8002bb2:	f00b fee1 	bl	800e978 <CDC_Transmit_FS>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d064      	beq.n	8002c86 <send_answer_to_CDC+0x16a>
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	2bff      	cmp	r3, #255	; 0xff
 8002bc0:	d1ed      	bne.n	8002b9e <send_answer_to_CDC+0x82>
		break;
 8002bc2:	e060      	b.n	8002c86 <send_answer_to_CDC+0x16a>
	case OK_TYPE_1:
		while((CDC_Transmit_FS(OK, strlen((const char *)OK))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
 8002bca:	4838      	ldr	r0, [pc, #224]	; (8002cac <send_answer_to_CDC+0x190>)
 8002bcc:	f7fd fae2 	bl	8000194 <strlen>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4835      	ldr	r0, [pc, #212]	; (8002cac <send_answer_to_CDC+0x190>)
 8002bd8:	f00b fece 	bl	800e978 <CDC_Transmit_FS>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d053      	beq.n	8002c8a <send_answer_to_CDC+0x16e>
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2bff      	cmp	r3, #255	; 0xff
 8002be6:	d1ed      	bne.n	8002bc4 <send_answer_to_CDC+0xa8>
		break;
 8002be8:	e04f      	b.n	8002c8a <send_answer_to_CDC+0x16e>
	case OK_TYPE_2:
		while((CDC_Transmit_FS(OK_Enter, strlen((const char *)OK_Enter))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	3301      	adds	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	482f      	ldr	r0, [pc, #188]	; (8002cb0 <send_answer_to_CDC+0x194>)
 8002bf2:	f7fd facf 	bl	8000194 <strlen>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	482c      	ldr	r0, [pc, #176]	; (8002cb0 <send_answer_to_CDC+0x194>)
 8002bfe:	f00b febb 	bl	800e978 <CDC_Transmit_FS>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d042      	beq.n	8002c8e <send_answer_to_CDC+0x172>
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2bff      	cmp	r3, #255	; 0xff
 8002c0c:	d1ed      	bne.n	8002bea <send_answer_to_CDC+0xce>
		break;
 8002c0e:	e03e      	b.n	8002c8e <send_answer_to_CDC+0x172>
	case CLEAR_TYPE_1:
		while((CDC_Transmit_FS(clear, strlen((const char *)clear))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	3301      	adds	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
 8002c16:	4827      	ldr	r0, [pc, #156]	; (8002cb4 <send_answer_to_CDC+0x198>)
 8002c18:	f7fd fabc 	bl	8000194 <strlen>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4619      	mov	r1, r3
 8002c22:	4824      	ldr	r0, [pc, #144]	; (8002cb4 <send_answer_to_CDC+0x198>)
 8002c24:	f00b fea8 	bl	800e978 <CDC_Transmit_FS>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d031      	beq.n	8002c92 <send_answer_to_CDC+0x176>
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2bff      	cmp	r3, #255	; 0xff
 8002c32:	d1ed      	bne.n	8002c10 <send_answer_to_CDC+0xf4>
		break;
 8002c34:	e02d      	b.n	8002c92 <send_answer_to_CDC+0x176>
	case DONE_TYPE_1:
		while((CDC_Transmit_FS(Done, strlen((const char *)Done))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
 8002c3c:	481e      	ldr	r0, [pc, #120]	; (8002cb8 <send_answer_to_CDC+0x19c>)
 8002c3e:	f7fd faa9 	bl	8000194 <strlen>
 8002c42:	4603      	mov	r3, r0
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4619      	mov	r1, r3
 8002c48:	481b      	ldr	r0, [pc, #108]	; (8002cb8 <send_answer_to_CDC+0x19c>)
 8002c4a:	f00b fe95 	bl	800e978 <CDC_Transmit_FS>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <send_answer_to_CDC+0x17a>
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2bff      	cmp	r3, #255	; 0xff
 8002c58:	d1ed      	bne.n	8002c36 <send_answer_to_CDC+0x11a>
		break;
 8002c5a:	e01c      	b.n	8002c96 <send_answer_to_CDC+0x17a>
	case RUN_CAL_TYPE_TEMP:
		while((CDC_Transmit_FS(run_cal, strlen((const char *)run_cal))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	4816      	ldr	r0, [pc, #88]	; (8002cbc <send_answer_to_CDC+0x1a0>)
 8002c64:	f7fd fa96 	bl	8000194 <strlen>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4813      	ldr	r0, [pc, #76]	; (8002cbc <send_answer_to_CDC+0x1a0>)
 8002c70:	f00b fe82 	bl	800e978 <CDC_Transmit_FS>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00f      	beq.n	8002c9a <send_answer_to_CDC+0x17e>
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	2bff      	cmp	r3, #255	; 0xff
 8002c7e:	d1ed      	bne.n	8002c5c <send_answer_to_CDC+0x140>
		break;
 8002c80:	e00b      	b.n	8002c9a <send_answer_to_CDC+0x17e>
		break;
 8002c82:	bf00      	nop
 8002c84:	e00a      	b.n	8002c9c <send_answer_to_CDC+0x180>
		break;
 8002c86:	bf00      	nop
 8002c88:	e008      	b.n	8002c9c <send_answer_to_CDC+0x180>
		break;
 8002c8a:	bf00      	nop
 8002c8c:	e006      	b.n	8002c9c <send_answer_to_CDC+0x180>
		break;
 8002c8e:	bf00      	nop
 8002c90:	e004      	b.n	8002c9c <send_answer_to_CDC+0x180>
		break;
 8002c92:	bf00      	nop
 8002c94:	e002      	b.n	8002c9c <send_answer_to_CDC+0x180>
		break;
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <send_answer_to_CDC+0x180>
		break;
 8002c9a:	bf00      	nop
	}
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	2000034c 	.word	0x2000034c
 8002ca8:	20000760 	.word	0x20000760
 8002cac:	20000320 	.word	0x20000320
 8002cb0:	20000748 	.word	0x20000748
 8002cb4:	20000344 	.word	0x20000344
 8002cb8:	2000078c 	.word	0x2000078c
 8002cbc:	20000328 	.word	0x20000328

08002cc0 <cmd_SWEEP_START>:



//==============================================================================================
void cmd_SWEEP_START()
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	output_state(Output_auto_STATE);
 8002cc4:	2004      	movs	r0, #4
 8002cc6:	f7ff fd51 	bl	800276c <output_state>
	DDS_Calculation();
 8002cca:	f7fe ff5f 	bl	8001b8c <DDS_Calculation>
	DAC_TEMP_CAL();
 8002cce:	f7fe feed 	bl	8001aac <DAC_TEMP_CAL>
	CPLD_control(CPLD_ON_STATE); // Enable LDAC signal
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	f7fe fd74 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002cd8:	f7fe fe60 	bl	800199c <DAC_SendInit>
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <cmd_SWEEP_STOP>:
//==============================================================================================


//==============================================================================================
void cmd_SWEEP_STOP()
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
	CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fe fd6b 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002cea:	f7fe fe57 	bl	800199c <DAC_SendInit>
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <cmd_DAC_SET>:
//==============================================================================================


//==============================================================================================
void cmd_DAC_SET(uint32_t code)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	if (code>0xFFFFF)return;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d02:	d21f      	bcs.n	8002d44 <cmd_DAC_SET+0x50>

	if(DAC_code_direction!=DIRECTION_CYCLE_STATE)
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <cmd_DAC_SET+0x58>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d00f      	beq.n	8002d2c <cmd_DAC_SET+0x38>
	{
		switch(code)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <cmd_DAC_SET+0x28>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <cmd_DAC_SET+0x5c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d004      	beq.n	8002d24 <cmd_DAC_SET+0x30>
 8002d1a:	e008      	b.n	8002d2e <cmd_DAC_SET+0x3a>
		{
		case DAC_CODE_DOWN:
			DAC_code_direction=DIRECTION_UP_STATE;
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <cmd_DAC_SET+0x58>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
			break;
 8002d22:	e004      	b.n	8002d2e <cmd_DAC_SET+0x3a>
		case DAC_CODE_TOP:
			DAC_code_direction=DIRECTION_DOWN_STATE;
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <cmd_DAC_SET+0x58>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
			break;
 8002d2a:	e000      	b.n	8002d2e <cmd_DAC_SET+0x3a>
		}
	}
 8002d2c:	bf00      	nop

	CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7fe fd46 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002d34:	f7fe fe32 	bl	800199c <DAC_SendInit>
	DAC_TEMP_CAL();
 8002d38:	f7fe feb8 	bl	8001aac <DAC_TEMP_CAL>
	DAC_Write(code);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fe fdd3 	bl	80018e8 <DAC_Write>
 8002d42:	e000      	b.n	8002d46 <cmd_DAC_SET+0x52>
	if (code>0xFFFFF)return;
 8002d44:	bf00      	nop
}
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000d28 	.word	0x20000d28
 8002d50:	000fffff 	.word	0x000fffff

08002d54 <cmd_SET_OUTPUT_VOLTAGE>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_SET_OUTPUT_VOLTAGE(float volt)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	float dac_resolution;

	if(volt>=cal_DAC_down_voltage && volt<=cal_DAC_up_voltage)
 8002d5c:	4b80      	ldr	r3, [pc, #512]	; (8002f60 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe f9e2 	bl	800112c <__aeabi_fcmpge>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d037      	beq.n	8002dde <cmd_SET_OUTPUT_VOLTAGE+0x8a>
 8002d6e:	4b7d      	ldr	r3, [pc, #500]	; (8002f64 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fe f9cf 	bl	8001118 <__aeabi_fcmple>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02e      	beq.n	8002dde <cmd_SET_OUTPUT_VOLTAGE+0x8a>
	{
		if(Current_output_status!=Output_x1_STATE)output_state(Output_x1_STATE);
 8002d80:	4b79      	ldr	r3, [pc, #484]	; (8002f68 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d002      	beq.n	8002d8e <cmd_SET_OUTPUT_VOLTAGE+0x3a>
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f7ff fcef 	bl	800276c <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 8002d8e:	4b75      	ldr	r3, [pc, #468]	; (8002f64 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a73      	ldr	r2, [pc, #460]	; (8002f60 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd ff0b 	bl	8000bb4 <__aeabi_fsub>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4972      	ldr	r1, [pc, #456]	; (8002f6c <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe f8c4 	bl	8000f30 <__aeabi_fdiv>
 8002da8:	4603      	mov	r3, r0
 8002daa:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage)/dac_resolution);
 8002dac:	4b6c      	ldr	r3, [pc, #432]	; (8002f60 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fd fefe 	bl	8000bb4 <__aeabi_fsub>
 8002db8:	4603      	mov	r3, r0
 8002dba:	68f9      	ldr	r1, [r7, #12]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe f8b7 	bl	8000f30 <__aeabi_fdiv>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe f9c5 	bl	8001154 <__aeabi_f2uiz>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4a68      	ldr	r2, [pc, #416]	; (8002f70 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002dce:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002dd0:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff8d 	bl	8002cf4 <cmd_DAC_SET>
		return 1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0bc      	b.n	8002f58 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}
	if(volt>=(cal_DAC_down_voltage*gain_x2_coeff) && volt<=(cal_DAC_up_voltage*gain_x2_coeff))
 8002dde:	4b60      	ldr	r3, [pc, #384]	; (8002f60 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a64      	ldr	r2, [pc, #400]	; (8002f74 <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd ffed 	bl	8000dc8 <__aeabi_fmul>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe f99a 	bl	800112c <__aeabi_fcmpge>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d04d      	beq.n	8002e9a <cmd_SET_OUTPUT_VOLTAGE+0x146>
 8002dfe:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a5c      	ldr	r2, [pc, #368]	; (8002f74 <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd ffdd 	bl	8000dc8 <__aeabi_fmul>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4619      	mov	r1, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe f980 	bl	8001118 <__aeabi_fcmple>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d03d      	beq.n	8002e9a <cmd_SET_OUTPUT_VOLTAGE+0x146>
	{
		if(Current_output_status!=Output_x2_STATE)output_state(Output_x2_STATE);
 8002e1e:	4b52      	ldr	r3, [pc, #328]	; (8002f68 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d002      	beq.n	8002e2c <cmd_SET_OUTPUT_VOLTAGE+0xd8>
 8002e26:	2002      	movs	r0, #2
 8002e28:	f7ff fca0 	bl	800276c <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x2_coeff/0xFFFFF; // Calculate 1 LSB resolution
 8002e2c:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a4b      	ldr	r2, [pc, #300]	; (8002f60 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd febc 	bl	8000bb4 <__aeabi_fsub>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f7fd ffbe 	bl	8000dc8 <__aeabi_fmul>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4947      	ldr	r1, [pc, #284]	; (8002f6c <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe f86d 	bl	8000f30 <__aeabi_fdiv>
 8002e56:	4603      	mov	r3, r0
 8002e58:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage*gain_x2_coeff)/dac_resolution);
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a45      	ldr	r2, [pc, #276]	; (8002f74 <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd ffaf 	bl	8000dc8 <__aeabi_fmul>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fd fea0 	bl	8000bb4 <__aeabi_fsub>
 8002e74:	4603      	mov	r3, r0
 8002e76:	68f9      	ldr	r1, [r7, #12]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe f859 	bl	8000f30 <__aeabi_fdiv>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe f967 	bl	8001154 <__aeabi_f2uiz>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a39      	ldr	r2, [pc, #228]	; (8002f70 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002e8a:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002e8c:	4b38      	ldr	r3, [pc, #224]	; (8002f70 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff2f 	bl	8002cf4 <cmd_DAC_SET>
		return 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e05e      	b.n	8002f58 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}
	if(volt>=(cal_DAC_down_voltage*gain_x4_coeff) && volt<=(cal_DAC_up_voltage*gain_x4_coeff))
 8002e9a:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a36      	ldr	r2, [pc, #216]	; (8002f78 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd ff8f 	bl	8000dc8 <__aeabi_fmul>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe f93c 	bl	800112c <__aeabi_fcmpge>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d04d      	beq.n	8002f56 <cmd_SET_OUTPUT_VOLTAGE+0x202>
 8002eba:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a2e      	ldr	r2, [pc, #184]	; (8002f78 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd ff7f 	bl	8000dc8 <__aeabi_fmul>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4619      	mov	r1, r3
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe f922 	bl	8001118 <__aeabi_fcmple>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d03d      	beq.n	8002f56 <cmd_SET_OUTPUT_VOLTAGE+0x202>
	{
		if(Current_output_status!=Output_x4_STATE)output_state(Output_x4_STATE);
 8002eda:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d002      	beq.n	8002ee8 <cmd_SET_OUTPUT_VOLTAGE+0x194>
 8002ee2:	2003      	movs	r0, #3
 8002ee4:	f7ff fc42 	bl	800276c <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x4_coeff/0xFFFFF; // Calculate 1 LSB resolution
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd fe5e 	bl	8000bb4 <__aeabi_fsub>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f7fd ff60 	bl	8000dc8 <__aeabi_fmul>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	4918      	ldr	r1, [pc, #96]	; (8002f6c <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe f80f 	bl	8000f30 <__aeabi_fdiv>
 8002f12:	4603      	mov	r3, r0
 8002f14:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage*gain_x4_coeff)/dac_resolution);
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd ff51 	bl	8000dc8 <__aeabi_fmul>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4619      	mov	r1, r3
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fd fe42 	bl	8000bb4 <__aeabi_fsub>
 8002f30:	4603      	mov	r3, r0
 8002f32:	68f9      	ldr	r1, [r7, #12]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fffb 	bl	8000f30 <__aeabi_fdiv>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe f909 	bl	8001154 <__aeabi_f2uiz>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002f46:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fed1 	bl	8002cf4 <cmd_DAC_SET>
		return 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}

	return 0;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000d1c 	.word	0x20000d1c
 8002f64:	20000d18 	.word	0x20000d18
 8002f68:	20000d20 	.word	0x20000d20
 8002f6c:	497ffff0 	.word	0x497ffff0
 8002f70:	20000d24 	.word	0x20000d24
 8002f74:	20000b34 	.word	0x20000b34
 8002f78:	20000b38 	.word	0x20000b38
 8002f7c:	00000000 	.word	0x00000000

08002f80 <cmd_SWEEP_RATE>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_SWEEP_RATE(float rate)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
		if(rate<0.0009 || rate>1.1) // V/s
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7fd fa6f 	bl	800046c <__aeabi_f2d>
 8002f8e:	a316      	add	r3, pc, #88	; (adr r3, 8002fe8 <cmd_SWEEP_RATE+0x68>)
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f7fd fd34 	bl	8000a00 <__aeabi_dcmplt>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <cmd_SWEEP_RATE+0x34>
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fa64 	bl	800046c <__aeabi_f2d>
 8002fa4:	a312      	add	r3, pc, #72	; (adr r3, 8002ff0 <cmd_SWEEP_RATE+0x70>)
 8002fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002faa:	f7fd fd47 	bl	8000a3c <__aeabi_dcmpgt>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <cmd_SWEEP_RATE+0x38>
		{
			return 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e010      	b.n	8002fda <cmd_SWEEP_RATE+0x5a>
		}
		else
		{
			DAC_target_speed=rate;
 8002fb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <cmd_SWEEP_RATE+0x78>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6013      	str	r3, [r2, #0]
			if(cfg.LDACMODE==0)
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <cmd_SWEEP_RATE+0x7c>)
 8002fc0:	789b      	ldrb	r3, [r3, #2]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <cmd_SWEEP_RATE+0x4e>
			{
				CPLD_control(CPLD_OFF_STATE);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fe fbfa 	bl	80017c0 <CPLD_control>
 8002fcc:	e002      	b.n	8002fd4 <cmd_SWEEP_RATE+0x54>
			}
			else
			{
				CPLD_control(CPLD_ON_STATE);
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f7fe fbf6 	bl	80017c0 <CPLD_control>
			}

			DDS_Calculation();
 8002fd4:	f7fe fdda 	bl	8001b8c <DDS_Calculation>
			return 1;
 8002fd8:	2301      	movs	r3, #1
		}
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	f3af 8000 	nop.w
 8002fe8:	487fcb92 	.word	0x487fcb92
 8002fec:	3f4d7dbf 	.word	0x3f4d7dbf
 8002ff0:	9999999a 	.word	0x9999999a
 8002ff4:	3ff19999 	.word	0x3ff19999
 8002ff8:	20000d10 	.word	0x20000d10
 8002ffc:	20000cfc 	.word	0x20000cfc

08003000 <cmd_CAL>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_CAL(uint8_t cmd, float coeff)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	71fb      	strb	r3, [r7, #7]
	float tmpx;

	tmpx=coeff;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	3b06      	subs	r3, #6
 8003014:	2b07      	cmp	r3, #7
 8003016:	f200 80e7 	bhi.w	80031e8 <cmd_CAL+0x1e8>
 800301a:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <cmd_CAL+0x20>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	08003041 	.word	0x08003041
 8003024:	08003053 	.word	0x08003053
 8003028:	08003065 	.word	0x08003065
 800302c:	08003077 	.word	0x08003077
 8003030:	0800310d 	.word	0x0800310d
 8003034:	0800317b 	.word	0x0800317b
 8003038:	08003089 	.word	0x08003089
 800303c:	080030cb 	.word	0x080030cb
	{
	case DAC_CAL_TEMP:
		DAC_Write(DAC_CODE_MIDDLE);
 8003040:	4885      	ldr	r0, [pc, #532]	; (8003258 <cmd_CAL+0x258>)
 8003042:	f7fe fc51 	bl	80018e8 <DAC_Write>
		DAC_TEMP_CAL();
 8003046:	f7fe fd31 	bl	8001aac <DAC_TEMP_CAL>
		DAC_Write(DAC_CODE_MIDDLE);
 800304a:	4883      	ldr	r0, [pc, #524]	; (8003258 <cmd_CAL+0x258>)
 800304c:	f7fe fc4c 	bl	80018e8 <DAC_Write>
		break;
 8003050:	e0ca      	b.n	80031e8 <cmd_CAL+0x1e8>

	case DAC_CAL_POLY_A:
		EEPROM_write(corr_coeff_1_EEPROM_ADDRESS,float_to_binary(tmpx));
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f97b 	bl	800334e <float_to_binary>
 8003058:	4603      	mov	r3, r0
 800305a:	4619      	mov	r1, r3
 800305c:	2010      	movs	r0, #16
 800305e:	f000 f9b5 	bl	80033cc <EEPROM_write>
		break;
 8003062:	e0c1      	b.n	80031e8 <cmd_CAL+0x1e8>
	case DAC_CAL_POLY_B:
		EEPROM_write(corr_coeff_2_EEPROM_ADDRESS,float_to_binary(tmpx));
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f972 	bl	800334e <float_to_binary>
 800306a:	4603      	mov	r3, r0
 800306c:	4619      	mov	r1, r3
 800306e:	2018      	movs	r0, #24
 8003070:	f000 f9ac 	bl	80033cc <EEPROM_write>
		break;
 8003074:	e0b8      	b.n	80031e8 <cmd_CAL+0x1e8>
	case DAC_CAL_POLY_C:
		EEPROM_write(corr_coeff_3_EEPROM_ADDRESS,float_to_binary(tmpx));
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f969 	bl	800334e <float_to_binary>
 800307c:	4603      	mov	r3, r0
 800307e:	4619      	mov	r1, r3
 8003080:	2020      	movs	r0, #32
 8003082:	f000 f9a3 	bl	80033cc <EEPROM_write>
		break;
 8003086:	e0af      	b.n	80031e8 <cmd_CAL+0x1e8>

	case GAIN_X2_CAL:
		if((tmpx<2.1 && tmpx>1.9))
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7fd f9ef 	bl	800046c <__aeabi_f2d>
 800308e:	a35a      	add	r3, pc, #360	; (adr r3, 80031f8 <cmd_CAL+0x1f8>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fcb4 	bl	8000a00 <__aeabi_dcmplt>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d013      	beq.n	80030c6 <cmd_CAL+0xc6>
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7fd f9e4 	bl	800046c <__aeabi_f2d>
 80030a4:	a356      	add	r3, pc, #344	; (adr r3, 8003200 <cmd_CAL+0x200>)
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f7fd fcc7 	bl	8000a3c <__aeabi_dcmpgt>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <cmd_CAL+0xc6>
		{
			EEPROM_write(gain_x2_EEPROM_ADDRESS,float_to_binary(tmpx));
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f94a 	bl	800334e <float_to_binary>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4619      	mov	r1, r3
 80030be:	2028      	movs	r0, #40	; 0x28
 80030c0:	f000 f984 	bl	80033cc <EEPROM_write>
		}
		else return 0;
		break;
 80030c4:	e090      	b.n	80031e8 <cmd_CAL+0x1e8>
		else return 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e091      	b.n	80031ee <cmd_CAL+0x1ee>
	case GAIN_X4_CAL:
		if((tmpx<4.1 && tmpx>3.9))
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7fd f9ce 	bl	800046c <__aeabi_f2d>
 80030d0:	a34d      	add	r3, pc, #308	; (adr r3, 8003208 <cmd_CAL+0x208>)
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f7fd fc93 	bl	8000a00 <__aeabi_dcmplt>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <cmd_CAL+0x108>
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7fd f9c3 	bl	800046c <__aeabi_f2d>
 80030e6:	a34a      	add	r3, pc, #296	; (adr r3, 8003210 <cmd_CAL+0x210>)
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	f7fd fca6 	bl	8000a3c <__aeabi_dcmpgt>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <cmd_CAL+0x108>
		{
			EEPROM_write(gain_x4_EEPROM_ADDRESS,float_to_binary(tmpx));
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f929 	bl	800334e <float_to_binary>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4619      	mov	r1, r3
 8003100:	2030      	movs	r0, #48	; 0x30
 8003102:	f000 f963 	bl	80033cc <EEPROM_write>
		}
		else return 0;
		break;
 8003106:	e06f      	b.n	80031e8 <cmd_CAL+0x1e8>
		else return 0;
 8003108:	2300      	movs	r3, #0
 800310a:	e070      	b.n	80031ee <cmd_CAL+0x1ee>
	case DAC_CAL_TOP:
		if((tmpx<10.1 && tmpx>9.9) || (tmpx>6.8 && tmpx<7.1))
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7fd f9ad 	bl	800046c <__aeabi_f2d>
 8003112:	a341      	add	r3, pc, #260	; (adr r3, 8003218 <cmd_CAL+0x218>)
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f7fd fc72 	bl	8000a00 <__aeabi_dcmplt>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <cmd_CAL+0x138>
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7fd f9a2 	bl	800046c <__aeabi_f2d>
 8003128:	a33d      	add	r3, pc, #244	; (adr r3, 8003220 <cmd_CAL+0x220>)
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	f7fd fc85 	bl	8000a3c <__aeabi_dcmpgt>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d115      	bne.n	8003164 <cmd_CAL+0x164>
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7fd f997 	bl	800046c <__aeabi_f2d>
 800313e:	a33a      	add	r3, pc, #232	; (adr r3, 8003228 <cmd_CAL+0x228>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f7fd fc7a 	bl	8000a3c <__aeabi_dcmpgt>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d013      	beq.n	8003176 <cmd_CAL+0x176>
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7fd f98c 	bl	800046c <__aeabi_f2d>
 8003154:	a336      	add	r3, pc, #216	; (adr r3, 8003230 <cmd_CAL+0x230>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f7fd fc51 	bl	8000a00 <__aeabi_dcmplt>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <cmd_CAL+0x176>
		{
			EEPROM_write(cal_DAC_up_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f8f2 	bl	800334e <float_to_binary>
 800316a:	4603      	mov	r3, r0
 800316c:	4619      	mov	r1, r3
 800316e:	2000      	movs	r0, #0
 8003170:	f000 f92c 	bl	80033cc <EEPROM_write>
		}
		else return 0;
		break;
 8003174:	e038      	b.n	80031e8 <cmd_CAL+0x1e8>
		else return 0;
 8003176:	2300      	movs	r3, #0
 8003178:	e039      	b.n	80031ee <cmd_CAL+0x1ee>
	case DAC_CAL_DOWN:
		if((tmpx>-10.1 && tmpx<-9.9) || (tmpx<-6.8 && tmpx>-7.1))
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7fd f976 	bl	800046c <__aeabi_f2d>
 8003180:	a32d      	add	r3, pc, #180	; (adr r3, 8003238 <cmd_CAL+0x238>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f7fd fc59 	bl	8000a3c <__aeabi_dcmpgt>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <cmd_CAL+0x1a6>
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7fd f96b 	bl	800046c <__aeabi_f2d>
 8003196:	a32a      	add	r3, pc, #168	; (adr r3, 8003240 <cmd_CAL+0x240>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f7fd fc30 	bl	8000a00 <__aeabi_dcmplt>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d115      	bne.n	80031d2 <cmd_CAL+0x1d2>
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7fd f960 	bl	800046c <__aeabi_f2d>
 80031ac:	a326      	add	r3, pc, #152	; (adr r3, 8003248 <cmd_CAL+0x248>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f7fd fc25 	bl	8000a00 <__aeabi_dcmplt>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <cmd_CAL+0x1e4>
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7fd f955 	bl	800046c <__aeabi_f2d>
 80031c2:	a323      	add	r3, pc, #140	; (adr r3, 8003250 <cmd_CAL+0x250>)
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	f7fd fc38 	bl	8000a3c <__aeabi_dcmpgt>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <cmd_CAL+0x1e4>
		{
			EEPROM_write(cal_DAC_down_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f8bb 	bl	800334e <float_to_binary>
 80031d8:	4603      	mov	r3, r0
 80031da:	4619      	mov	r1, r3
 80031dc:	2008      	movs	r0, #8
 80031de:	f000 f8f5 	bl	80033cc <EEPROM_write>
		}
		else return 0;
		break;
 80031e2:	e001      	b.n	80031e8 <cmd_CAL+0x1e8>
		else return 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e002      	b.n	80031ee <cmd_CAL+0x1ee>
	}

	load_data_from_EEPROM();
 80031e8:	f000 f838 	bl	800325c <load_data_from_EEPROM>
	return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	cccccccd 	.word	0xcccccccd
 80031fc:	4000cccc 	.word	0x4000cccc
 8003200:	66666666 	.word	0x66666666
 8003204:	3ffe6666 	.word	0x3ffe6666
 8003208:	66666666 	.word	0x66666666
 800320c:	40106666 	.word	0x40106666
 8003210:	33333333 	.word	0x33333333
 8003214:	400f3333 	.word	0x400f3333
 8003218:	33333333 	.word	0x33333333
 800321c:	40243333 	.word	0x40243333
 8003220:	cccccccd 	.word	0xcccccccd
 8003224:	4023cccc 	.word	0x4023cccc
 8003228:	33333333 	.word	0x33333333
 800322c:	401b3333 	.word	0x401b3333
 8003230:	66666666 	.word	0x66666666
 8003234:	401c6666 	.word	0x401c6666
 8003238:	33333333 	.word	0x33333333
 800323c:	c0243333 	.word	0xc0243333
 8003240:	cccccccd 	.word	0xcccccccd
 8003244:	c023cccc 	.word	0xc023cccc
 8003248:	33333333 	.word	0x33333333
 800324c:	c01b3333 	.word	0xc01b3333
 8003250:	66666666 	.word	0x66666666
 8003254:	c01c6666 	.word	0xc01c6666
 8003258:	0007ffff 	.word	0x0007ffff

0800325c <load_data_from_EEPROM>:
//==============================================================================================


//==============================================================================================
void load_data_from_EEPROM(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
	cal_DAC_up_voltage=binary_to_float(EEPROM_read(cal_DAC_up_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 8003260:	2000      	movs	r0, #0
 8003262:	f000 f899 	bl	8003398 <EEPROM_read>
 8003266:	4603      	mov	r3, r0
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f85d 	bl	8003328 <binary_to_float>
 800326e:	4603      	mov	r3, r0
 8003270:	4a25      	ldr	r2, [pc, #148]	; (8003308 <load_data_from_EEPROM+0xac>)
 8003272:	6013      	str	r3, [r2, #0]
	cal_DAC_down_voltage=binary_to_float(EEPROM_read(cal_DAC_down_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 8003274:	2008      	movs	r0, #8
 8003276:	f000 f88f 	bl	8003398 <EEPROM_read>
 800327a:	4603      	mov	r3, r0
 800327c:	4618      	mov	r0, r3
 800327e:	f000 f853 	bl	8003328 <binary_to_float>
 8003282:	4603      	mov	r3, r0
 8003284:	4a21      	ldr	r2, [pc, #132]	; (800330c <load_data_from_EEPROM+0xb0>)
 8003286:	6013      	str	r3, [r2, #0]
	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8003288:	4b1f      	ldr	r3, [pc, #124]	; (8003308 <load_data_from_EEPROM+0xac>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1f      	ldr	r2, [pc, #124]	; (800330c <load_data_from_EEPROM+0xb0>)
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd fc8e 	bl	8000bb4 <__aeabi_fsub>
 8003298:	4603      	mov	r3, r0
 800329a:	461a      	mov	r2, r3
 800329c:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <load_data_from_EEPROM+0xb4>)
 800329e:	601a      	str	r2, [r3, #0]

	corr_coeff_1=binary_to_float(EEPROM_read(corr_coeff_1_EEPROM_ADDRESS));
 80032a0:	2010      	movs	r0, #16
 80032a2:	f000 f879 	bl	8003398 <EEPROM_read>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f83d 	bl	8003328 <binary_to_float>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4a18      	ldr	r2, [pc, #96]	; (8003314 <load_data_from_EEPROM+0xb8>)
 80032b2:	6013      	str	r3, [r2, #0]
	corr_coeff_2=binary_to_float(EEPROM_read(corr_coeff_2_EEPROM_ADDRESS));
 80032b4:	2018      	movs	r0, #24
 80032b6:	f000 f86f 	bl	8003398 <EEPROM_read>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f833 	bl	8003328 <binary_to_float>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <load_data_from_EEPROM+0xbc>)
 80032c6:	6013      	str	r3, [r2, #0]
	corr_coeff_3=binary_to_float(EEPROM_read(corr_coeff_3_EEPROM_ADDRESS));
 80032c8:	2020      	movs	r0, #32
 80032ca:	f000 f865 	bl	8003398 <EEPROM_read>
 80032ce:	4603      	mov	r3, r0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f829 	bl	8003328 <binary_to_float>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4a10      	ldr	r2, [pc, #64]	; (800331c <load_data_from_EEPROM+0xc0>)
 80032da:	6013      	str	r3, [r2, #0]
	gain_x2_coeff=binary_to_float(EEPROM_read(gain_x2_EEPROM_ADDRESS));
 80032dc:	2028      	movs	r0, #40	; 0x28
 80032de:	f000 f85b 	bl	8003398 <EEPROM_read>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f81f 	bl	8003328 <binary_to_float>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <load_data_from_EEPROM+0xc4>)
 80032ee:	6013      	str	r3, [r2, #0]
	gain_x4_coeff=binary_to_float(EEPROM_read(gain_x4_EEPROM_ADDRESS));
 80032f0:	2030      	movs	r0, #48	; 0x30
 80032f2:	f000 f851 	bl	8003398 <EEPROM_read>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f815 	bl	8003328 <binary_to_float>
 80032fe:	4603      	mov	r3, r0
 8003300:	4a08      	ldr	r2, [pc, #32]	; (8003324 <load_data_from_EEPROM+0xc8>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000d18 	.word	0x20000d18
 800330c:	20000d1c 	.word	0x20000d1c
 8003310:	20000d14 	.word	0x20000d14
 8003314:	20000b28 	.word	0x20000b28
 8003318:	20000b2c 	.word	0x20000b2c
 800331c:	20000b30 	.word	0x20000b30
 8003320:	20000b34 	.word	0x20000b34
 8003324:	20000b38 	.word	0x20000b38

08003328 <binary_to_float>:
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC push_options
#pragma GCC optimize ("O0")

float binary_to_float(uint32_t a)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	    int * p;
	    float out=0;
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]

	    p = &out;
 8003336:	f107 0308 	add.w	r3, r7, #8
 800333a:	60fb      	str	r3, [r7, #12]
	    (*p)=a;
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	601a      	str	r2, [r3, #0]
	    return out;
 8003342:	68bb      	ldr	r3, [r7, #8]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <float_to_binary>:


uint32_t float_to_binary(float a)
{
 800334e:	b480      	push	{r7}
 8003350:	b087      	sub	sp, #28
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
	    int i;
	    int * p;
	    uint32_t out=0;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]

	    p = &a;
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	60fb      	str	r3, [r7, #12]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 800335e:	231f      	movs	r3, #31
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e010      	b.n	8003386 <float_to_binary+0x38>
	    {
	    	out+=((*p) >> i & 1)<<i;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa42 f303 	asr.w	r3, r2, r3
 800336e:	f003 0201 	and.w	r2, r3, #1
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	461a      	mov	r2, r3
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	3b01      	subs	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	daeb      	bge.n	8003364 <float_to_binary+0x16>
	    }

	    return out;
 800338c:	693b      	ldr	r3, [r7, #16]
}
 800338e:	4618      	mov	r0, r3
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <EEPROM_read>:
//==============================================================================================


//==============================================================================================
uint32_t EEPROM_read(uint32_t address_of_read)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	uint32_t Address;

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80033a6:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80033aa:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a06      	ldr	r2, [pc, #24]	; (80033c8 <EEPROM_read+0x30>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d301      	bcc.n	80033b8 <EEPROM_read+0x20>
	{
		return 0x00;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e001      	b.n	80033bc <EEPROM_read+0x24>
	}
	return *(__IO uint32_t *) Address;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	08082800 	.word	0x08082800

080033cc <EEPROM_write>:
//==============================================================================================


//==============================================================================================
void EEPROM_write(uint32_t address_of_read, uint32_t data)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
	/* Clear all pending flags */
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR | FLASH_FLAG_OPTVERRUSR);

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
	     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80033dc:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80033e0:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <EEPROM_write+0x50>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d212      	bcs.n	8003410 <EEPROM_write+0x44>
	{
		return;
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 80033ea:	f001 ff91 	bl	8005310 <HAL_FLASHEx_DATAEEPROM_Unlock>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	68f9      	ldr	r1, [r7, #12]
 80033f2:	2002      	movs	r0, #2
 80033f4:	f001 ffea 	bl	80053cc <HAL_FLASHEx_DATAEEPROM_Program>
 80033f8:	4603      	mov	r3, r0
 80033fa:	72fb      	strb	r3, [r7, #11]
	HAL_FLASHEx_DATAEEPROM_Lock();
 80033fc:	f001 ffa4 	bl	8005348 <HAL_FLASHEx_DATAEEPROM_Lock>

	if(FLASHStatus != HAL_OK)
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <EEPROM_write+0x48>
	{
		return;
	}
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR);

	if(*(__IO uint32_t *) Address != data)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	e002      	b.n	8003416 <EEPROM_write+0x4a>
		return;
 8003410:	bf00      	nop
 8003412:	e000      	b.n	8003416 <EEPROM_write+0x4a>
		return;
 8003414:	bf00      	nop
	{
		return;
	}

}
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	08082800 	.word	0x08082800

08003420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003436:	4b7c      	ldr	r3, [pc, #496]	; (8003628 <MX_GPIO_Init+0x208>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4a7b      	ldr	r2, [pc, #492]	; (8003628 <MX_GPIO_Init+0x208>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	61d3      	str	r3, [r2, #28]
 8003442:	4b79      	ldr	r3, [pc, #484]	; (8003628 <MX_GPIO_Init+0x208>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800344e:	4b76      	ldr	r3, [pc, #472]	; (8003628 <MX_GPIO_Init+0x208>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4a75      	ldr	r2, [pc, #468]	; (8003628 <MX_GPIO_Init+0x208>)
 8003454:	f043 0320 	orr.w	r3, r3, #32
 8003458:	61d3      	str	r3, [r2, #28]
 800345a:	4b73      	ldr	r3, [pc, #460]	; (8003628 <MX_GPIO_Init+0x208>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	4b70      	ldr	r3, [pc, #448]	; (8003628 <MX_GPIO_Init+0x208>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4a6f      	ldr	r2, [pc, #444]	; (8003628 <MX_GPIO_Init+0x208>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	61d3      	str	r3, [r2, #28]
 8003472:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <MX_GPIO_Init+0x208>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800347e:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <MX_GPIO_Init+0x208>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4a69      	ldr	r2, [pc, #420]	; (8003628 <MX_GPIO_Init+0x208>)
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	61d3      	str	r3, [r2, #28]
 800348a:	4b67      	ldr	r3, [pc, #412]	; (8003628 <MX_GPIO_Init+0x208>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	607b      	str	r3, [r7, #4]
 8003494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 8003496:	2200      	movs	r2, #0
 8003498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800349c:	4863      	ldr	r0, [pc, #396]	; (800362c <MX_GPIO_Init+0x20c>)
 800349e:	f002 fb86 	bl	8005bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, GPIO_PIN_SET);
 80034a2:	2201      	movs	r2, #1
 80034a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034a8:	4860      	ldr	r0, [pc, #384]	; (800362c <MX_GPIO_Init+0x20c>)
 80034aa:	f002 fb80 	bl	8005bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 80034ae:	2201      	movs	r2, #1
 80034b0:	f248 011f 	movw	r1, #32799	; 0x801f
 80034b4:	485e      	ldr	r0, [pc, #376]	; (8003630 <MX_GPIO_Init+0x210>)
 80034b6:	f002 fb7a 	bl	8005bae <HAL_GPIO_WritePin>
                          |DAC_SYNC_Pin|DAC_CLR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RS_Pin|Display_Power_Pin, GPIO_PIN_RESET);
 80034ba:	2200      	movs	r2, #0
 80034bc:	f640 0101 	movw	r1, #2049	; 0x801
 80034c0:	485c      	ldr	r0, [pc, #368]	; (8003634 <MX_GPIO_Init+0x214>)
 80034c2:	f002 fb74 	bl	8005bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|SPI2_NSS_Pin
 80034c6:	2201      	movs	r2, #1
 80034c8:	f241 413e 	movw	r1, #5182	; 0x143e
 80034cc:	4859      	ldr	r0, [pc, #356]	; (8003634 <MX_GPIO_Init+0x214>)
 80034ce:	f002 fb6e 	bl	8005bae <HAL_GPIO_WritePin>
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Start_button_Pin;
 80034d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034d8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80034dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034de:	2301      	movs	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Start_button_GPIO_Port, &GPIO_InitStruct);
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4619      	mov	r1, r3
 80034e8:	4850      	ldr	r0, [pc, #320]	; (800362c <MX_GPIO_Init+0x20c>)
 80034ea:	f002 f9c9 	bl	8005880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Count_EN_Pin;
 80034ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f4:	2301      	movs	r3, #1
 80034f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034fc:	2302      	movs	r3, #2
 80034fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Count_EN_GPIO_Port, &GPIO_InitStruct);
 8003500:	f107 0314 	add.w	r3, r7, #20
 8003504:	4619      	mov	r1, r3
 8003506:	4849      	ldr	r0, [pc, #292]	; (800362c <MX_GPIO_Init+0x20c>)
 8003508:	f002 f9ba 	bl	8005880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_cs_Pin;
 800350c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003512:	2301      	movs	r3, #1
 8003514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351a:	2303      	movs	r3, #3
 800351c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_cs_GPIO_Port, &GPIO_InitStruct);
 800351e:	f107 0314 	add.w	r3, r7, #20
 8003522:	4619      	mov	r1, r3
 8003524:	4841      	ldr	r0, [pc, #260]	; (800362c <MX_GPIO_Init+0x20c>)
 8003526:	f002 f9ab 	bl	8005880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 800352a:	f248 030f 	movw	r3, #32783	; 0x800f
 800352e:	617b      	str	r3, [r7, #20]
                          |DAC_CLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003530:	2301      	movs	r3, #1
 8003532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003538:	2303      	movs	r3, #3
 800353a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	4619      	mov	r1, r3
 8003542:	483b      	ldr	r0, [pc, #236]	; (8003630 <MX_GPIO_Init+0x210>)
 8003544:	f002 f99c 	bl	8005880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8003548:	2310      	movs	r3, #16
 800354a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800354c:	2301      	movs	r3, #1
 800354e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003550:	2301      	movs	r3, #1
 8003552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003554:	2303      	movs	r3, #3
 8003556:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	4619      	mov	r1, r3
 800355e:	4834      	ldr	r0, [pc, #208]	; (8003630 <MX_GPIO_Init+0x210>)
 8003560:	f002 f98e 	bl	8005880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Display_RS_Pin;
 8003564:	2301      	movs	r3, #1
 8003566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003568:	2301      	movs	r3, #1
 800356a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003570:	2302      	movs	r3, #2
 8003572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Display_RS_GPIO_Port, &GPIO_InitStruct);
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	4619      	mov	r1, r3
 800357a:	482e      	ldr	r0, [pc, #184]	; (8003634 <MX_GPIO_Init+0x214>)
 800357c:	f002 f980 	bl	8005880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|Display_Power_Pin
 8003580:	f640 433e 	movw	r3, #3134	; 0xc3e
 8003584:	617b      	str	r3, [r7, #20]
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003586:	2311      	movs	r3, #17
 8003588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800358e:	2302      	movs	r3, #2
 8003590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003592:	f107 0314 	add.w	r3, r7, #20
 8003596:	4619      	mov	r1, r3
 8003598:	4826      	ldr	r0, [pc, #152]	; (8003634 <MX_GPIO_Init+0x214>)
 800359a:	f002 f971 	bl	8005880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800359e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a4:	2301      	movs	r3, #1
 80035a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ac:	2303      	movs	r3, #3
 80035ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4619      	mov	r1, r3
 80035b6:	481f      	ldr	r0, [pc, #124]	; (8003634 <MX_GPIO_Init+0x214>)
 80035b8:	f002 f962 	bl	8005880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encode_Push_Pin;
 80035bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80035c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035c8:	2301      	movs	r3, #1
 80035ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encode_Push_GPIO_Port, &GPIO_InitStruct);
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4619      	mov	r1, r3
 80035d2:	4817      	ldr	r0, [pc, #92]	; (8003630 <MX_GPIO_Init+0x210>)
 80035d4:	f002 f954 	bl	8005880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80035e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4619      	mov	r1, r3
 80035ee:	4810      	ldr	r0, [pc, #64]	; (8003630 <MX_GPIO_Init+0x210>)
 80035f0:	f002 f946 	bl	8005880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 80035f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035fe:	2301      	movs	r3, #1
 8003600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	4619      	mov	r1, r3
 8003608:	4809      	ldr	r0, [pc, #36]	; (8003630 <MX_GPIO_Init+0x210>)
 800360a:	f002 f939 	bl	8005880 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2101      	movs	r1, #1
 8003612:	2028      	movs	r0, #40	; 0x28
 8003614:	f001 fd5f 	bl	80050d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003618:	2028      	movs	r0, #40	; 0x28
 800361a:	f001 fd78 	bl	800510e <HAL_NVIC_EnableIRQ>

}
 800361e:	bf00      	nop
 8003620:	3728      	adds	r7, #40	; 0x28
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	40020800 	.word	0x40020800
 8003630:	40020000 	.word	0x40020000
 8003634:	40020400 	.word	0x40020400

08003638 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <MX_I2C1_Init+0x50>)
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <MX_I2C1_Init+0x54>)
 8003640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <MX_I2C1_Init+0x50>)
 8003644:	4a12      	ldr	r2, [pc, #72]	; (8003690 <MX_I2C1_Init+0x58>)
 8003646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <MX_I2C1_Init+0x50>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <MX_I2C1_Init+0x50>)
 8003650:	2200      	movs	r2, #0
 8003652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <MX_I2C1_Init+0x50>)
 8003656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800365a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <MX_I2C1_Init+0x50>)
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <MX_I2C1_Init+0x50>)
 8003664:	2200      	movs	r2, #0
 8003666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <MX_I2C1_Init+0x50>)
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <MX_I2C1_Init+0x50>)
 8003670:	2200      	movs	r2, #0
 8003672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003674:	4804      	ldr	r0, [pc, #16]	; (8003688 <MX_I2C1_Init+0x50>)
 8003676:	f002 facb 	bl	8005c10 <HAL_I2C_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003680:	f000 ff24 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20000c40 	.word	0x20000c40
 800368c:	40005400 	.word	0x40005400
 8003690:	000186a0 	.word	0x000186a0

08003694 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a17      	ldr	r2, [pc, #92]	; (8003710 <HAL_I2C_MspInit+0x7c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d128      	bne.n	8003708 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_I2C_MspInit+0x80>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_I2C_MspInit+0x80>)
 80036bc:	f043 0302 	orr.w	r3, r3, #2
 80036c0:	61d3      	str	r3, [r2, #28]
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_I2C_MspInit+0x80>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TMP117_SCL_Pin|TMP117_SDA_Pin;
 80036ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036d4:	2312      	movs	r3, #18
 80036d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036d8:	2301      	movs	r3, #1
 80036da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036dc:	2303      	movs	r3, #3
 80036de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036e0:	2304      	movs	r3, #4
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	4619      	mov	r1, r3
 80036ea:	480b      	ldr	r0, [pc, #44]	; (8003718 <HAL_I2C_MspInit+0x84>)
 80036ec:	f002 f8c8 	bl	8005880 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036f0:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_I2C_MspInit+0x80>)
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	4a07      	ldr	r2, [pc, #28]	; (8003714 <HAL_I2C_MspInit+0x80>)
 80036f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036fa:	6253      	str	r3, [r2, #36]	; 0x24
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_I2C_MspInit+0x80>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003708:	bf00      	nop
 800370a:	3728      	adds	r7, #40	; 0x28
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40005400 	.word	0x40005400
 8003714:	40023800 	.word	0x40023800
 8003718:	40020400 	.word	0x40020400

0800371c <USB_rx_command_buffer_push_refd>:

uint8_t eta_hours,eta_minute,eta_second;

int16_t Enc_Counter = 0;

CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4804      	ldr	r0, [pc, #16]	; (8003738 <USB_rx_command_buffer_push_refd+0x1c>)
 8003728:	f7fd ff42 	bl	80015b0 <__circ_gbuf_push>
 800372c:	4603      	mov	r3, r0
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200007a4 	.word	0x200007a4

0800373c <USB_rx_command_buffer_pop_refd>:
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4803      	ldr	r0, [pc, #12]	; (8003758 <USB_rx_command_buffer_pop_refd+0x1c>)
 800374a:	f7fd fedf 	bl	800150c <__circ_gbuf_pop>
 800374e:	4603      	mov	r3, r0
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	200007a4 	.word	0x200007a4

0800375c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b095      	sub	sp, #84	; 0x54
 8003760:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 8003762:	4b57      	ldr	r3, [pc, #348]	; (80038c0 <main+0x164>)
 8003764:	2200      	movs	r2, #0
 8003766:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 8003768:	4b55      	ldr	r3, [pc, #340]	; (80038c0 <main+0x164>)
 800376a:	2208      	movs	r2, #8
 800376c:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 800376e:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <main+0x164>)
 8003770:	2201      	movs	r2, #1
 8003772:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 8003774:	4b52      	ldr	r3, [pc, #328]	; (80038c0 <main+0x164>)
 8003776:	2201      	movs	r2, #1
 8003778:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 800377a:	4b51      	ldr	r3, [pc, #324]	; (80038c0 <main+0x164>)
 800377c:	2200      	movs	r2, #0
 800377e:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8003780:	4b4f      	ldr	r3, [pc, #316]	; (80038c0 <main+0x164>)
 8003782:	2200      	movs	r2, #0
 8003784:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 8003786:	4b4e      	ldr	r3, [pc, #312]	; (80038c0 <main+0x164>)
 8003788:	2200      	movs	r2, #0
 800378a:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 800378c:	4b4c      	ldr	r3, [pc, #304]	; (80038c0 <main+0x164>)
 800378e:	2200      	movs	r2, #0
 8003790:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 8003792:	4b4b      	ldr	r3, [pc, #300]	; (80038c0 <main+0x164>)
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]

	DAC_target_speed=0.01; //  V/s
 8003798:	4b4a      	ldr	r3, [pc, #296]	; (80038c4 <main+0x168>)
 800379a:	4a4b      	ldr	r2, [pc, #300]	; (80038c8 <main+0x16c>)
 800379c:	601a      	str	r2, [r3, #0]
	DAC_code=DAC_CODE_MIDDLE;
 800379e:	4b4b      	ldr	r3, [pc, #300]	; (80038cc <main+0x170>)
 80037a0:	4a4b      	ldr	r2, [pc, #300]	; (80038d0 <main+0x174>)
 80037a2:	601a      	str	r2, [r3, #0]
	DAC_code_direction=DIRECTION_CYCLE_STATE;
 80037a4:	4b4b      	ldr	r3, [pc, #300]	; (80038d4 <main+0x178>)
 80037a6:	2202      	movs	r2, #2
 80037a8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037aa:	f001 fb2c 	bl	8004e06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037ae:	f000 f8a5 	bl	80038fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037b2:	f7ff fe35 	bl	8003420 <MX_GPIO_Init>
  MX_SPI1_Init();
 80037b6:	f000 fe8f 	bl	80044d8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80037ba:	f000 fec1 	bl	8004540 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80037be:	f00a ffd7 	bl	800e770 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80037c2:	f001 f937 	bl	8004a34 <MX_TIM3_Init>
  MX_TIM4_Init();
 80037c6:	f001 f983 	bl	8004ad0 <MX_TIM4_Init>
  MX_I2C1_Init();
 80037ca:	f7ff ff35 	bl	8003638 <MX_I2C1_Init>
  MX_TIM2_Init();
 80037ce:	f001 f8e5 	bl	800499c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80037d2:	f000 f8df 	bl	8003994 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  init_LCD();
 80037d6:	f7fe fe8f 	bl	80024f8 <init_LCD>
  LcdUpdate();
  LcdClear_massive();
  HAL_Delay(3000); //WarmUP
*/

  load_data_from_EEPROM();
 80037da:	f7ff fd3f 	bl	800325c <load_data_from_EEPROM>
  TMP117_Initialization(hi2c1);
 80037de:	4c3e      	ldr	r4, [pc, #248]	; (80038d8 <main+0x17c>)
 80037e0:	4668      	mov	r0, sp
 80037e2:	f104 0310 	add.w	r3, r4, #16
 80037e6:	2244      	movs	r2, #68	; 0x44
 80037e8:	4619      	mov	r1, r3
 80037ea:	f00b fd67 	bl	800f2bc <memcpy>
 80037ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80037f2:	f001 fab1 	bl	8004d58 <TMP117_Initialization>
  DDS_Init();
 80037f6:	f7fe fb03 	bl	8001e00 <DDS_Init>
  DAC_SendInit();
 80037fa:	f7fe f8cf 	bl	800199c <DAC_SendInit>
  DAC_Write(DAC_code);
 80037fe:	4b33      	ldr	r3, [pc, #204]	; (80038cc <main+0x170>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe f870 	bl	80018e8 <DAC_Write>

  HAL_TIM_Base_Start_IT(&htim3);
 8003808:	4834      	ldr	r0, [pc, #208]	; (80038dc <main+0x180>)
 800380a:	f006 fa83 	bl	8009d14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800380e:	4834      	ldr	r0, [pc, #208]	; (80038e0 <main+0x184>)
 8003810:	f006 fa80 	bl	8009d14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8003814:	213c      	movs	r1, #60	; 0x3c
 8003816:	4833      	ldr	r0, [pc, #204]	; (80038e4 <main+0x188>)
 8003818:	f006 fb6c 	bl	8009ef4 <HAL_TIM_Encoder_Start>


  output_state(Output_off_STATE);
 800381c:	2000      	movs	r0, #0
 800381e:	f7fe ffa5 	bl	800276c <output_state>
  CPLD_control(CPLD_OFF_STATE);
 8003822:	2000      	movs	r0, #0
 8003824:	f7fd ffcc 	bl	80017c0 <CPLD_control>

  send_answer_to_CDC(CLEAR_TYPE_1);
 8003828:	2004      	movs	r0, #4
 800382a:	f7ff f977 	bl	8002b1c <send_answer_to_CDC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(USB_CDC_End_Line_Received)
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <main+0x18c>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d021      	beq.n	800387c <main+0x120>
		{
			uint8_t i=0;
 8003838:	2300      	movs	r3, #0
 800383a:	71fb      	strb	r3, [r7, #7]
			USB_CDC_End_Line_Received=0;
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <main+0x18c>)
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
			while (1) {
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	4a29      	ldr	r2, [pc, #164]	; (80038ec <main+0x190>)
 8003846:	4413      	add	r3, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff77 	bl	800373c <USB_rx_command_buffer_pop_refd>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <main+0x100>
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	4a25      	ldr	r2, [pc, #148]	; (80038ec <main+0x190>)
 8003858:	210a      	movs	r1, #10
 800385a:	54d1      	strb	r1, [r2, r3]
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	4a23      	ldr	r2, [pc, #140]	; (80038ec <main+0x190>)
 8003860:	5cd3      	ldrb	r3, [r2, r3]
 8003862:	2b0a      	cmp	r3, #10
 8003864:	d008      	beq.n	8003878 <main+0x11c>
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	4a20      	ldr	r2, [pc, #128]	; (80038ec <main+0x190>)
 800386a:	5cd3      	ldrb	r3, [r2, r3]
 800386c:	2b0d      	cmp	r3, #13
 800386e:	d003      	beq.n	8003878 <main+0x11c>
				i++;
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	3301      	adds	r3, #1
 8003874:	71fb      	strb	r3, [r7, #7]
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8003876:	e7e4      	b.n	8003842 <main+0xe6>
			}
			Parsing_USB_command();
 8003878:	f000 f994 	bl	8003ba4 <Parsing_USB_command>
		}

		if(Need_update_DDS)
 800387c:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <main+0x194>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <main+0x144>
		{
			if(Ramp_dac_step_complete)
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <main+0x198>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <main+0x140>
			{
				DDS_Update();
 800388c:	f7fe fb94 	bl	8001fb8 <DDS_Update>
				Need_update_DDS=0;
 8003890:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <main+0x194>)
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
				Ramp_dac_step_complete=0;
 8003896:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <main+0x198>)
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
			}
			DDS_Calculation();
 800389c:	f7fe f976 	bl	8001b8c <DDS_Calculation>

		}
		if(Need_update_Display)
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <main+0x19c>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0c2      	beq.n	800382e <main+0xd2>
		{
			display_screen(dU_dt_SCREEN);
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7ff f871 	bl	8002990 <display_screen>
			LcdUpdate();
 80038ae:	f7fe fc4b 	bl	8002148 <LcdUpdate>
			LcdClear_massive();
 80038b2:	f7fe fc7d 	bl	80021b0 <LcdClear_massive>
			Need_update_Display=0;
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <main+0x19c>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
		if(USB_CDC_End_Line_Received)
 80038bc:	e7b7      	b.n	800382e <main+0xd2>
 80038be:	bf00      	nop
 80038c0:	20000cfc 	.word	0x20000cfc
 80038c4:	20000d10 	.word	0x20000d10
 80038c8:	3c23d70a 	.word	0x3c23d70a
 80038cc:	20000d24 	.word	0x20000d24
 80038d0:	0007ffff 	.word	0x0007ffff
 80038d4:	20000d28 	.word	0x20000d28
 80038d8:	20000c40 	.word	0x20000c40
 80038dc:	20000e24 	.word	0x20000e24
 80038e0:	20000de4 	.word	0x20000de4
 80038e4:	20000e64 	.word	0x20000e64
 80038e8:	20000c1c 	.word	0x20000c1c
 80038ec:	20000c20 	.word	0x20000c20
 80038f0:	20000d2b 	.word	0x20000d2b
 80038f4:	20000d2c 	.word	0x20000d2c
 80038f8:	20000d2a 	.word	0x20000d2a

080038fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b092      	sub	sp, #72	; 0x48
 8003900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003902:	f107 0314 	add.w	r3, r7, #20
 8003906:	2234      	movs	r2, #52	; 0x34
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f00b fce4 	bl	800f2d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003910:	463b      	mov	r3, r7
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <SystemClock_Config+0x94>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8003926:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <SystemClock_Config+0x94>)
 8003928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800392c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800392e:	2301      	movs	r3, #1
 8003930:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003932:	2301      	movs	r3, #1
 8003934:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003936:	2302      	movs	r3, #2
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800393a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003940:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003944:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8003946:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800394a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	4618      	mov	r0, r3
 8003952:	f004 fd1d 	bl	8008390 <HAL_RCC_OscConfig>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800395c:	f000 fdb6 	bl	80044cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003960:	230f      	movs	r3, #15
 8003962:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003964:	2303      	movs	r3, #3
 8003966:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003974:	463b      	mov	r3, r7
 8003976:	2101      	movs	r1, #1
 8003978:	4618      	mov	r0, r3
 800397a:	f005 f839 	bl	80089f0 <HAL_RCC_ClockConfig>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003984:	f000 fda2 	bl	80044cc <Error_Handler>
  }
}
 8003988:	bf00      	nop
 800398a:	3748      	adds	r7, #72	; 0x48
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40007000 	.word	0x40007000

08003994 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003998:	2200      	movs	r2, #0
 800399a:	2100      	movs	r1, #0
 800399c:	2017      	movs	r0, #23
 800399e:	f001 fb9a 	bl	80050d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039a2:	2017      	movs	r0, #23
 80039a4:	f001 fbb3 	bl	800510e <HAL_NVIC_EnableIRQ>
}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_TIM_PeriodElapsedCallback>:
//==============================================================================================


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3 )// INL correction, each 500ms
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d106      	bne.n	80039ca <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		if(cfg.LDACMODE==1)Need_update_DDS=1;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80039be:	789b      	ldrb	r3, [r3, #2]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d102      	bne.n	80039ca <HAL_TIM_PeriodElapsedCallback+0x1e>
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_TIM_PeriodElapsedCallback+0x40>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim2 )//User interface workload, each 10ms
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d102      	bne.n	80039d8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		Need_update_Display=1;
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
	}

}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000e24 	.word	0x20000e24
 80039e8:	20000cfc 	.word	0x20000cfc
 80039ec:	20000d2b 	.word	0x20000d2b
 80039f0:	20000de4 	.word	0x20000de4
 80039f4:	20000d2a 	.word	0x20000d2a

080039f8 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	80fb      	strh	r3, [r7, #6]
	DAC_Write_FAST();
 8003a02:	f7fd ffb1 	bl	8001968 <DAC_Write_FAST>
	Ramp_dac_step_complete=1;
 8003a06:	4b60      	ldr	r3, [pc, #384]	; (8003b88 <HAL_GPIO_EXTI_Callback+0x190>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_9)
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a12:	f040 80b5 	bne.w	8003b80 <HAL_GPIO_EXTI_Callback+0x188>
	{
		switch(DAC_code_direction)
 8003a16:	4b5d      	ldr	r3, [pc, #372]	; (8003b8c <HAL_GPIO_EXTI_Callback+0x194>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d059      	beq.n	8003ad2 <HAL_GPIO_EXTI_Callback+0xda>
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	f300 80a3 	bgt.w	8003b6a <HAL_GPIO_EXTI_Callback+0x172>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d02d      	beq.n	8003a84 <HAL_GPIO_EXTI_Callback+0x8c>
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	f040 809e 	bne.w	8003b6a <HAL_GPIO_EXTI_Callback+0x172>
		{
		//----------------------------------------------------------//
		case DIRECTION_UP_STATE:
			if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 8003a2e:	4b58      	ldr	r3, [pc, #352]	; (8003b90 <HAL_GPIO_EXTI_Callback+0x198>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8003a36:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003a3a:	4a56      	ldr	r2, [pc, #344]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d317      	bcc.n	8003a72 <HAL_GPIO_EXTI_Callback+0x7a>
			{
				DAC_code+=DDS_target_multipiller;
 8003a42:	4b54      	ldr	r3, [pc, #336]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b52      	ldr	r3, [pc, #328]	; (8003b90 <HAL_GPIO_EXTI_Callback+0x198>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	4a51      	ldr	r2, [pc, #324]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003a4e:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8003a50:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003a52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a56:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8003a58:	4b4e      	ldr	r3, [pc, #312]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a62:	f023 030f 	bic.w	r3, r3, #15
 8003a66:	4a4c      	ldr	r2, [pc, #304]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	4a4a      	ldr	r2, [pc, #296]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003a6e:	6013      	str	r3, [r2, #0]
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
				DAC_SendInit();
				send_answer_to_CDC(DONE_TYPE_1);
				return;
			}
		break;
 8003a70:	e07b      	b.n	8003b6a <HAL_GPIO_EXTI_Callback+0x172>
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8003a72:	2000      	movs	r0, #0
 8003a74:	f7fd fea4 	bl	80017c0 <CPLD_control>
				DAC_SendInit();
 8003a78:	f7fd ff90 	bl	800199c <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 8003a7c:	2005      	movs	r0, #5
 8003a7e:	f7ff f84d 	bl	8002b1c <send_answer_to_CDC>
				return;
 8003a82:	e07d      	b.n	8003b80 <HAL_GPIO_EXTI_Callback+0x188>

		case DIRECTION_DOWN_STATE:
			if(DAC_code>=DDS_target_multipiller)
 8003a84:	4b43      	ldr	r3, [pc, #268]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <HAL_GPIO_EXTI_Callback+0x198>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d317      	bcc.n	8003ac0 <HAL_GPIO_EXTI_Callback+0xc8>
			{
				DAC_code-=DDS_target_multipiller;
 8003a90:	4b40      	ldr	r3, [pc, #256]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b3e      	ldr	r3, [pc, #248]	; (8003b90 <HAL_GPIO_EXTI_Callback+0x198>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	4a3e      	ldr	r2, [pc, #248]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003a9c:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aa4:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ab0:	f023 030f 	bic.w	r3, r3, #15
 8003ab4:	4a38      	ldr	r2, [pc, #224]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	4413      	add	r3, r2
 8003aba:	4a37      	ldr	r2, [pc, #220]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003abc:	6013      	str	r3, [r2, #0]
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
				DAC_SendInit();
				send_answer_to_CDC(DONE_TYPE_1);
				return;
			}
		break;
 8003abe:	e054      	b.n	8003b6a <HAL_GPIO_EXTI_Callback+0x172>
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f7fd fe7d 	bl	80017c0 <CPLD_control>
				DAC_SendInit();
 8003ac6:	f7fd ff69 	bl	800199c <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 8003aca:	2005      	movs	r0, #5
 8003acc:	f7ff f826 	bl	8002b1c <send_answer_to_CDC>
				return;
 8003ad0:	e056      	b.n	8003b80 <HAL_GPIO_EXTI_Callback+0x188>

		case DIRECTION_CYCLE_STATE:
			if(DAC_code_direction_for_cycle_mode == 1)
 8003ad2:	4b32      	ldr	r3, [pc, #200]	; (8003b9c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d125      	bne.n	8003b26 <HAL_GPIO_EXTI_Callback+0x12e>
			{
				if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 8003ada:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <HAL_GPIO_EXTI_Callback+0x198>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8003ae2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003ae6:	4a2b      	ldr	r2, [pc, #172]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d317      	bcc.n	8003b1e <HAL_GPIO_EXTI_Callback+0x126>
				{
					DAC_code+=DDS_target_multipiller;
 8003aee:	4b29      	ldr	r3, [pc, #164]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b27      	ldr	r3, [pc, #156]	; (8003b90 <HAL_GPIO_EXTI_Callback+0x198>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	4a26      	ldr	r2, [pc, #152]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003afa:	6013      	str	r3, [r2, #0]
					DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8003afc:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003afe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b02:	601a      	str	r2, [r3, #0]
					DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8003b04:	4b23      	ldr	r3, [pc, #140]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b0e:	f023 030f 	bic.w	r3, r3, #15
 8003b12:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	4413      	add	r3, r2
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003b1a:	6013      	str	r3, [r2, #0]
					DAC_code-=DDS_target_multipiller;
					DAC_tx_buffer=0x01000000; // Write DAC-DATA
					DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
				} else DAC_code_direction_for_cycle_mode=1;
			}
		break;
 8003b1c:	e024      	b.n	8003b68 <HAL_GPIO_EXTI_Callback+0x170>
				} else  DAC_code_direction_for_cycle_mode=0;
 8003b1e:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
		break;
 8003b24:	e020      	b.n	8003b68 <HAL_GPIO_EXTI_Callback+0x170>
				if(DAC_code>=DDS_target_multipiller)
 8003b26:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_GPIO_EXTI_Callback+0x198>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d317      	bcc.n	8003b62 <HAL_GPIO_EXTI_Callback+0x16a>
					DAC_code-=DDS_target_multipiller;
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <HAL_GPIO_EXTI_Callback+0x198>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003b3e:	6013      	str	r3, [r2, #0]
					DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003b42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b46:	601a      	str	r2, [r3, #0]
					DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8003b48:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b52:	f023 030f 	bic.w	r3, r3, #15
 8003b56:	4a10      	ldr	r2, [pc, #64]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003b5e:	6013      	str	r3, [r2, #0]
		break;
 8003b60:	e002      	b.n	8003b68 <HAL_GPIO_EXTI_Callback+0x170>
				} else DAC_code_direction_for_cycle_mode=1;
 8003b62:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
		break;
 8003b68:	bf00      	nop
		}
		DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8003b74:	801a      	strh	r2, [r3, #0]
		DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8003b7e:	805a      	strh	r2, [r3, #2]
	}
}
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000d2c 	.word	0x20000d2c
 8003b8c:	20000d28 	.word	0x20000d28
 8003b90:	200007b0 	.word	0x200007b0
 8003b94:	20000d24 	.word	0x20000d24
 8003b98:	20000cf4 	.word	0x20000cf4
 8003b9c:	20000d29 	.word	0x20000d29
 8003ba0:	20000cf8 	.word	0x20000cf8

08003ba4 <Parsing_USB_command>:

void Parsing_USB_command(void)
{
 8003ba4:	b590      	push	{r4, r7, lr}
 8003ba6:	b0a7      	sub	sp, #156	; 0x9c
 8003ba8:	af12      	add	r7, sp, #72	; 0x48
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];
	uint8_t cdc_counter=0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	found = strtok((char *)command_buffer," ");
 8003bb0:	49c4      	ldr	r1, [pc, #784]	; (8003ec4 <Parsing_USB_command+0x320>)
 8003bb2:	48c5      	ldr	r0, [pc, #788]	; (8003ec8 <Parsing_USB_command+0x324>)
 8003bb4:	f00c fe38 	bl	8010828 <strtok>
 8003bb8:	6478      	str	r0, [r7, #68]	; 0x44
	if(found!=NULL)
 8003bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <Parsing_USB_command+0x3a>
	{
		strcpy(decoded_string_1,found);
 8003bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f00c f80e 	bl	800fbe8 <strcpy>
	{
		send_answer_to_CDC(ERROR_TYPE_1);
		return;
	}

	found = strtok(NULL,"\r");
 8003bcc:	49bf      	ldr	r1, [pc, #764]	; (8003ecc <Parsing_USB_command+0x328>)
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f00c fe2a 	bl	8010828 <strtok>
 8003bd4:	6478      	str	r0, [r7, #68]	; 0x44
	if(found!=NULL)
 8003bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d024      	beq.n	8003c26 <Parsing_USB_command+0x82>
 8003bdc:	e004      	b.n	8003be8 <Parsing_USB_command+0x44>
		send_answer_to_CDC(ERROR_TYPE_1);
 8003bde:	2000      	movs	r0, #0
 8003be0:	f7fe ff9c 	bl	8002b1c <send_answer_to_CDC>
		return;
 8003be4:	f000 bc37 	b.w	8004456 <Parsing_USB_command+0x8b2>
	{
		strcpy(decoded_string_2,found);
 8003be8:	1d3b      	adds	r3, r7, #4
 8003bea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bec:	4618      	mov	r0, r3
 8003bee:	f00b fffb 	bl	800fbe8 <strcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf6:	e00d      	b.n	8003c14 <Parsing_USB_command+0x70>
 8003bf8:	1d3a      	adds	r2, r7, #4
 8003bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfc:	4413      	add	r3, r2
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d104      	bne.n	8003c0e <Parsing_USB_command+0x6a>
 8003c04:	1d3a      	adds	r2, r7, #4
 8003c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c08:	4413      	add	r3, r2
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c10:	3301      	adds	r3, #1
 8003c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c14:	1d3b      	adds	r3, r7, #4
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fc fabc 	bl	8000194 <strlen>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d8e9      	bhi.n	8003bf8 <Parsing_USB_command+0x54>
 8003c24:	e004      	b.n	8003c30 <Parsing_USB_command+0x8c>
	}
	else
	{
		send_answer_to_CDC(ERROR_TYPE_1);
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7fe ff78 	bl	8002b1c <send_answer_to_CDC>
		return;
 8003c2c:	f000 bc13 	b.w	8004456 <Parsing_USB_command+0x8b2>
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8003c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c34:	49a6      	ldr	r1, [pc, #664]	; (8003ed0 <Parsing_USB_command+0x32c>)
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc faa2 	bl	8000180 <strcmp>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11f      	bne.n	8003c82 <Parsing_USB_command+0xde>
	{
		if(!(strcmp(decoded_string_2,"START")))
 8003c42:	1d3b      	adds	r3, r7, #4
 8003c44:	49a3      	ldr	r1, [pc, #652]	; (8003ed4 <Parsing_USB_command+0x330>)
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fc fa9a 	bl	8000180 <strcmp>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d105      	bne.n	8003c5e <Parsing_USB_command+0xba>
		{
			cmd_SWEEP_START();
 8003c52:	f7ff f835 	bl	8002cc0 <cmd_SWEEP_START>
			send_answer_to_CDC(OK_TYPE_2);
 8003c56:	2003      	movs	r0, #3
 8003c58:	f7fe ff60 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003c5c:	e3fb      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP")))
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	499d      	ldr	r1, [pc, #628]	; (8003ed8 <Parsing_USB_command+0x334>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fc fa8c 	bl	8000180 <strcmp>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d105      	bne.n	8003c7a <Parsing_USB_command+0xd6>
			{
				cmd_SWEEP_STOP();
 8003c6e:	f7ff f837 	bl	8002ce0 <cmd_SWEEP_STOP>
				send_answer_to_CDC(OK_TYPE_2);
 8003c72:	2003      	movs	r0, #3
 8003c74:	f7fe ff52 	bl	8002b1c <send_answer_to_CDC>
				return;
 8003c78:	e3ed      	b.n	8004456 <Parsing_USB_command+0x8b2>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7fe ff4e 	bl	8002b1c <send_answer_to_CDC>
				return;
 8003c80:	e3e9      	b.n	8004456 <Parsing_USB_command+0x8b2>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 8003c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c86:	4995      	ldr	r1, [pc, #596]	; (8003edc <Parsing_USB_command+0x338>)
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc fa79 	bl	8000180 <strcmp>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d136      	bne.n	8003d02 <Parsing_USB_command+0x15e>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	4992      	ldr	r1, [pc, #584]	; (8003ee0 <Parsing_USB_command+0x33c>)
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fc fa71 	bl	8000180 <strcmp>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <Parsing_USB_command+0x10e>
			cmd_DAC_SET(DAC_CODE_TOP);
 8003ca4:	488f      	ldr	r0, [pc, #572]	; (8003ee4 <Parsing_USB_command+0x340>)
 8003ca6:	f7ff f825 	bl	8002cf4 <cmd_DAC_SET>
			send_answer_to_CDC(OK_TYPE_2);
 8003caa:	2003      	movs	r0, #3
 8003cac:	f7fe ff36 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003cb0:	e3d1      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8003cb2:	1d3b      	adds	r3, r7, #4
 8003cb4:	498c      	ldr	r1, [pc, #560]	; (8003ee8 <Parsing_USB_command+0x344>)
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fc fa62 	bl	8000180 <strcmp>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <Parsing_USB_command+0x12c>
				cmd_DAC_SET(DAC_CODE_DOWN);
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	f7ff f816 	bl	8002cf4 <cmd_DAC_SET>
				send_answer_to_CDC(OK_TYPE_2);
 8003cc8:	2003      	movs	r0, #3
 8003cca:	f7fe ff27 	bl	8002b1c <send_answer_to_CDC>
				return;
 8003cce:	e3c2      	b.n	8004456 <Parsing_USB_command+0x8b2>
			}
			else
			{
				if(cmd_SET_OUTPUT_VOLTAGE(atof(decoded_string_2)))
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f00b fac4 	bl	800f260 <atof>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f7fc ff14 	bl	8000b0c <__aeabi_d2f>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff f834 	bl	8002d54 <cmd_SET_OUTPUT_VOLTAGE>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <Parsing_USB_command+0x156>
				{
					send_answer_to_CDC(OK_TYPE_2);
 8003cf2:	2003      	movs	r0, #3
 8003cf4:	f7fe ff12 	bl	8002b1c <send_answer_to_CDC>
					return;
 8003cf8:	e3ad      	b.n	8004456 <Parsing_USB_command+0x8b2>
				}
				else
				{
					send_answer_to_CDC(ERROR_TYPE_2);
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	f7fe ff0e 	bl	8002b1c <send_answer_to_CDC>
					return;
 8003d00:	e3a9      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
	}


	// ==== OUTPUT command ====
	if(!(strcmp(decoded_string_1,"OUTPUT")))
 8003d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d06:	4979      	ldr	r1, [pc, #484]	; (8003eec <Parsing_USB_command+0x348>)
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fc fa39 	bl	8000180 <strcmp>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d13f      	bne.n	8003d94 <Parsing_USB_command+0x1f0>
	{
		if(!(strcmp(decoded_string_2,"OFF"))){
 8003d14:	1d3b      	adds	r3, r7, #4
 8003d16:	4976      	ldr	r1, [pc, #472]	; (8003ef0 <Parsing_USB_command+0x34c>)
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fa31 	bl	8000180 <strcmp>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d106      	bne.n	8003d32 <Parsing_USB_command+0x18e>
			output_state(Output_off_STATE);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7fe fd21 	bl	800276c <output_state>
			send_answer_to_CDC(OK_TYPE_2);
 8003d2a:	2003      	movs	r0, #3
 8003d2c:	f7fe fef6 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003d30:	e391      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"X1"))){
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	496f      	ldr	r1, [pc, #444]	; (8003ef4 <Parsing_USB_command+0x350>)
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fa22 	bl	8000180 <strcmp>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <Parsing_USB_command+0x1ac>
				output_state(Output_x1_STATE);
 8003d42:	2001      	movs	r0, #1
 8003d44:	f7fe fd12 	bl	800276c <output_state>
				send_answer_to_CDC(OK_TYPE_2);
 8003d48:	2003      	movs	r0, #3
 8003d4a:	f7fe fee7 	bl	8002b1c <send_answer_to_CDC>
				return;
 8003d4e:	e382      	b.n	8004456 <Parsing_USB_command+0x8b2>
			}
			else
			{
				if(!(strcmp(decoded_string_2,"X2"))){
 8003d50:	1d3b      	adds	r3, r7, #4
 8003d52:	4969      	ldr	r1, [pc, #420]	; (8003ef8 <Parsing_USB_command+0x354>)
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fc fa13 	bl	8000180 <strcmp>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <Parsing_USB_command+0x1ca>
					output_state(Output_x2_STATE);
 8003d60:	2002      	movs	r0, #2
 8003d62:	f7fe fd03 	bl	800276c <output_state>
					send_answer_to_CDC(OK_TYPE_2);
 8003d66:	2003      	movs	r0, #3
 8003d68:	f7fe fed8 	bl	8002b1c <send_answer_to_CDC>
					return;
 8003d6c:	e373      	b.n	8004456 <Parsing_USB_command+0x8b2>
				}
				else
				{
					if(!(strcmp(decoded_string_2,"X4"))){
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	4962      	ldr	r1, [pc, #392]	; (8003efc <Parsing_USB_command+0x358>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc fa04 	bl	8000180 <strcmp>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <Parsing_USB_command+0x1e8>
						output_state(Output_x4_STATE);
 8003d7e:	2003      	movs	r0, #3
 8003d80:	f7fe fcf4 	bl	800276c <output_state>
						send_answer_to_CDC(OK_TYPE_2);
 8003d84:	2003      	movs	r0, #3
 8003d86:	f7fe fec9 	bl	8002b1c <send_answer_to_CDC>
						return;
 8003d8a:	e364      	b.n	8004456 <Parsing_USB_command+0x8b2>
					}
					else
					{
						send_answer_to_CDC(ERROR_TYPE_2);
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	f7fe fec5 	bl	8002b1c <send_answer_to_CDC>
						return;
 8003d92:	e360      	b.n	8004456 <Parsing_USB_command+0x8b2>
			}
		}
	}

	// ==== DAC_CAL_TEMP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TEMP")))
 8003d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d98:	4959      	ldr	r1, [pc, #356]	; (8003f00 <Parsing_USB_command+0x35c>)
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc f9f0 	bl	8000180 <strcmp>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d116      	bne.n	8003dd4 <Parsing_USB_command+0x230>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	494a      	ldr	r1, [pc, #296]	; (8003ed4 <Parsing_USB_command+0x330>)
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fc f9e8 	bl	8000180 <strcmp>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <Parsing_USB_command+0x228>
			send_answer_to_CDC(RUN_CAL_TYPE_TEMP);
 8003db6:	200f      	movs	r0, #15
 8003db8:	f7fe feb0 	bl	8002b1c <send_answer_to_CDC>
			cmd_CAL(DAC_CAL_TEMP,NONE);
 8003dbc:	4951      	ldr	r1, [pc, #324]	; (8003f04 <Parsing_USB_command+0x360>)
 8003dbe:	2006      	movs	r0, #6
 8003dc0:	f7ff f91e 	bl	8003000 <cmd_CAL>
			send_answer_to_CDC(OK_TYPE_1);
 8003dc4:	2002      	movs	r0, #2
 8003dc6:	f7fe fea9 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003dca:	e344      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f7fe fea5 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003dd2:	e340      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
	}

	// ==== DAC_CAL_POLY_A command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_A")))
 8003dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dd8:	494b      	ldr	r1, [pc, #300]	; (8003f08 <Parsing_USB_command+0x364>)
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fc f9d0 	bl	8000180 <strcmp>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d112      	bne.n	8003e0c <Parsing_USB_command+0x268>
	{
		cmd_CAL(DAC_CAL_POLY_A,atof(decoded_string_2));
 8003de6:	1d3b      	adds	r3, r7, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f00b fa39 	bl	800f260 <atof>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	f7fc fe89 	bl	8000b0c <__aeabi_d2f>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	2007      	movs	r0, #7
 8003e00:	f7ff f8fe 	bl	8003000 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003e04:	2003      	movs	r0, #3
 8003e06:	f7fe fe89 	bl	8002b1c <send_answer_to_CDC>
		return;
 8003e0a:	e324      	b.n	8004456 <Parsing_USB_command+0x8b2>
	}

	// ==== DAC_CAL_POLY_B command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_B")))
 8003e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e10:	493e      	ldr	r1, [pc, #248]	; (8003f0c <Parsing_USB_command+0x368>)
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc f9b4 	bl	8000180 <strcmp>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d112      	bne.n	8003e44 <Parsing_USB_command+0x2a0>
	{
		cmd_CAL(DAC_CAL_POLY_B,atof(decoded_string_2));
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f00b fa1d 	bl	800f260 <atof>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f7fc fe6d 	bl	8000b0c <__aeabi_d2f>
 8003e32:	4603      	mov	r3, r0
 8003e34:	4619      	mov	r1, r3
 8003e36:	2008      	movs	r0, #8
 8003e38:	f7ff f8e2 	bl	8003000 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003e3c:	2003      	movs	r0, #3
 8003e3e:	f7fe fe6d 	bl	8002b1c <send_answer_to_CDC>
		return;
 8003e42:	e308      	b.n	8004456 <Parsing_USB_command+0x8b2>
	}

	// ==== DAC_CAL_POLY_C command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_C")))
 8003e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e48:	4931      	ldr	r1, [pc, #196]	; (8003f10 <Parsing_USB_command+0x36c>)
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc f998 	bl	8000180 <strcmp>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d112      	bne.n	8003e7c <Parsing_USB_command+0x2d8>
	{
		cmd_CAL(DAC_CAL_POLY_C,atof(decoded_string_2));
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f00b fa01 	bl	800f260 <atof>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	f7fc fe51 	bl	8000b0c <__aeabi_d2f>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	2009      	movs	r0, #9
 8003e70:	f7ff f8c6 	bl	8003000 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003e74:	2003      	movs	r0, #3
 8003e76:	f7fe fe51 	bl	8002b1c <send_answer_to_CDC>
		return;
 8003e7a:	e2ec      	b.n	8004456 <Parsing_USB_command+0x8b2>
	}

	// ==== GAIN_X2_CAL command ====
	if(!(strcmp(decoded_string_1,"GAIN_X2_CAL")))
 8003e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e80:	4924      	ldr	r1, [pc, #144]	; (8003f14 <Parsing_USB_command+0x370>)
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc f97c 	bl	8000180 <strcmp>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d144      	bne.n	8003f18 <Parsing_USB_command+0x374>
	{
		if(cmd_CAL(GAIN_X2_CAL,atof(decoded_string_2)))
 8003e8e:	1d3b      	adds	r3, r7, #4
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00b f9e5 	bl	800f260 <atof>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f7fc fe35 	bl	8000b0c <__aeabi_d2f>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	200c      	movs	r0, #12
 8003ea8:	f7ff f8aa 	bl	8003000 <cmd_CAL>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <Parsing_USB_command+0x316>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003eb2:	2003      	movs	r0, #3
 8003eb4:	f7fe fe32 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003eb8:	e2cd      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f7fe fe2e 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003ec0:	e2c9      	b.n	8004456 <Parsing_USB_command+0x8b2>
 8003ec2:	bf00      	nop
 8003ec4:	080137a8 	.word	0x080137a8
 8003ec8:	20000c20 	.word	0x20000c20
 8003ecc:	080137ac 	.word	0x080137ac
 8003ed0:	080137b0 	.word	0x080137b0
 8003ed4:	080137b8 	.word	0x080137b8
 8003ed8:	080137c0 	.word	0x080137c0
 8003edc:	080137c8 	.word	0x080137c8
 8003ee0:	080137d0 	.word	0x080137d0
 8003ee4:	000fffff 	.word	0x000fffff
 8003ee8:	080137d4 	.word	0x080137d4
 8003eec:	080137dc 	.word	0x080137dc
 8003ef0:	080137e4 	.word	0x080137e4
 8003ef4:	080137e8 	.word	0x080137e8
 8003ef8:	080137ec 	.word	0x080137ec
 8003efc:	080137f0 	.word	0x080137f0
 8003f00:	080137f4 	.word	0x080137f4
 8003f04:	41600000 	.word	0x41600000
 8003f08:	08013804 	.word	0x08013804
 8003f0c:	08013814 	.word	0x08013814
 8003f10:	08013824 	.word	0x08013824
 8003f14:	08013834 	.word	0x08013834
		}
	}

	// ==== GAIN_X4_CAL command ====
	if(!(strcmp(decoded_string_1,"GAIN_X4_CAL")))
 8003f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f1c:	49b6      	ldr	r1, [pc, #728]	; (80041f8 <Parsing_USB_command+0x654>)
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fc f92e 	bl	8000180 <strcmp>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d119      	bne.n	8003f5e <Parsing_USB_command+0x3ba>
	{
		if(cmd_CAL(GAIN_X4_CAL,atof(decoded_string_2)))
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f00b f997 	bl	800f260 <atof>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f7fc fde7 	bl	8000b0c <__aeabi_d2f>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4619      	mov	r1, r3
 8003f42:	200d      	movs	r0, #13
 8003f44:	f7ff f85c 	bl	8003000 <cmd_CAL>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <Parsing_USB_command+0x3b2>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003f4e:	2003      	movs	r0, #3
 8003f50:	f7fe fde4 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003f54:	e27f      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003f56:	2001      	movs	r0, #1
 8003f58:	f7fe fde0 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003f5c:	e27b      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
	}


	// ==== DAC_CAL_TOP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TOP")))
 8003f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f62:	49a6      	ldr	r1, [pc, #664]	; (80041fc <Parsing_USB_command+0x658>)
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc f90b 	bl	8000180 <strcmp>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d119      	bne.n	8003fa4 <Parsing_USB_command+0x400>
	{
		if(cmd_CAL(DAC_CAL_TOP,atof(decoded_string_2)))
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	4618      	mov	r0, r3
 8003f74:	f00b f974 	bl	800f260 <atof>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f7fc fdc4 	bl	8000b0c <__aeabi_d2f>
 8003f84:	4603      	mov	r3, r0
 8003f86:	4619      	mov	r1, r3
 8003f88:	200a      	movs	r0, #10
 8003f8a:	f7ff f839 	bl	8003000 <cmd_CAL>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <Parsing_USB_command+0x3f8>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003f94:	2003      	movs	r0, #3
 8003f96:	f7fe fdc1 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003f9a:	e25c      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7fe fdbd 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003fa2:	e258      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
	}


	// ==== DAC_CAL_DOWN command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_DOWN")))
 8003fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fa8:	4995      	ldr	r1, [pc, #596]	; (8004200 <Parsing_USB_command+0x65c>)
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fc f8e8 	bl	8000180 <strcmp>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d119      	bne.n	8003fea <Parsing_USB_command+0x446>
	{
		if(cmd_CAL(DAC_CAL_DOWN,atof(decoded_string_2)))
 8003fb6:	1d3b      	adds	r3, r7, #4
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f00b f951 	bl	800f260 <atof>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f7fc fda1 	bl	8000b0c <__aeabi_d2f>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4619      	mov	r1, r3
 8003fce:	200b      	movs	r0, #11
 8003fd0:	f7ff f816 	bl	8003000 <cmd_CAL>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <Parsing_USB_command+0x43e>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003fda:	2003      	movs	r0, #3
 8003fdc:	f7fe fd9e 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003fe0:	e239      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	f7fe fd9a 	bl	8002b1c <send_answer_to_CDC>
			return;
 8003fe8:	e235      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 8003fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fee:	4985      	ldr	r1, [pc, #532]	; (8004204 <Parsing_USB_command+0x660>)
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fc f8c5 	bl	8000180 <strcmp>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d118      	bne.n	800402e <Parsing_USB_command+0x48a>
	{
		if(cmd_SWEEP_RATE(atof(decoded_string_2)))
 8003ffc:	1d3b      	adds	r3, r7, #4
 8003ffe:	4618      	mov	r0, r3
 8004000:	f00b f92e 	bl	800f260 <atof>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4610      	mov	r0, r2
 800400a:	4619      	mov	r1, r3
 800400c:	f7fc fd7e 	bl	8000b0c <__aeabi_d2f>
 8004010:	4603      	mov	r3, r0
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe ffb4 	bl	8002f80 <cmd_SWEEP_RATE>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <Parsing_USB_command+0x482>
		{
			send_answer_to_CDC(OK_TYPE_2);
 800401e:	2003      	movs	r0, #3
 8004020:	f7fe fd7c 	bl	8002b1c <send_answer_to_CDC>
			return;
 8004024:	e217      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 8004026:	2000      	movs	r0, #0
 8004028:	f7fe fd78 	bl	8002b1c <send_answer_to_CDC>
			return;
 800402c:	e213      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
	}

	// ==== SHOW command ====
	if(!(strcmp(decoded_string_1,"SHOW")))
 800402e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004032:	4975      	ldr	r1, [pc, #468]	; (8004208 <Parsing_USB_command+0x664>)
 8004034:	4618      	mov	r0, r3
 8004036:	f7fc f8a3 	bl	8000180 <strcmp>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	f040 81cc 	bne.w	80043da <Parsing_USB_command+0x836>
	{
	if(!(strcmp(decoded_string_2,"INFO"))){
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	4971      	ldr	r1, [pc, #452]	; (800420c <Parsing_USB_command+0x668>)
 8004046:	4618      	mov	r0, r3
 8004048:	f7fc f89a 	bl	8000180 <strcmp>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 81bf 	bne.w	80043d2 <Parsing_USB_command+0x82e>
		sprintf((char *)large_string_buffer,"\n\rDAC 0xFFFFF voltage calibration constant: %1.6E\n\r",cal_DAC_up_voltage);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004054:	4b6e      	ldr	r3, [pc, #440]	; (8004210 <Parsing_USB_command+0x66c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fc fa07 	bl	800046c <__aeabi_f2d>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	496c      	ldr	r1, [pc, #432]	; (8004214 <Parsing_USB_command+0x670>)
 8004064:	486c      	ldr	r0, [pc, #432]	; (8004218 <Parsing_USB_command+0x674>)
 8004066:	f00b fd9f 	bl	800fba8 <siprintf>
 800406a:	e004      	b.n	8004076 <Parsing_USB_command+0x4d2>
 800406c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004070:	3301      	adds	r3, #1
 8004072:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004076:	4868      	ldr	r0, [pc, #416]	; (8004218 <Parsing_USB_command+0x674>)
 8004078:	f7fc f88c 	bl	8000194 <strlen>
 800407c:	4603      	mov	r3, r0
 800407e:	b29b      	uxth	r3, r3
 8004080:	4619      	mov	r1, r3
 8004082:	4865      	ldr	r0, [pc, #404]	; (8004218 <Parsing_USB_command+0x674>)
 8004084:	f00a fc78 	bl	800e978 <CDC_Transmit_FS>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <Parsing_USB_command+0x4f2>
 800408e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004092:	2bff      	cmp	r3, #255	; 0xff
 8004094:	d1ea      	bne.n	800406c <Parsing_USB_command+0x4c8>
		sprintf((char *)large_string_buffer,"DAC 0x00000 voltage calibration constant: %1.6E\n\r",cal_DAC_down_voltage);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004096:	4b61      	ldr	r3, [pc, #388]	; (800421c <Parsing_USB_command+0x678>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc f9e6 	bl	800046c <__aeabi_f2d>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	495e      	ldr	r1, [pc, #376]	; (8004220 <Parsing_USB_command+0x67c>)
 80040a6:	485c      	ldr	r0, [pc, #368]	; (8004218 <Parsing_USB_command+0x674>)
 80040a8:	f00b fd7e 	bl	800fba8 <siprintf>
 80040ac:	e004      	b.n	80040b8 <Parsing_USB_command+0x514>
 80040ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040b2:	3301      	adds	r3, #1
 80040b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80040b8:	4857      	ldr	r0, [pc, #348]	; (8004218 <Parsing_USB_command+0x674>)
 80040ba:	f7fc f86b 	bl	8000194 <strlen>
 80040be:	4603      	mov	r3, r0
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	4619      	mov	r1, r3
 80040c4:	4854      	ldr	r0, [pc, #336]	; (8004218 <Parsing_USB_command+0x674>)
 80040c6:	f00a fc57 	bl	800e978 <CDC_Transmit_FS>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <Parsing_USB_command+0x534>
 80040d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040d4:	2bff      	cmp	r3, #255	; 0xff
 80040d6:	d1ea      	bne.n	80040ae <Parsing_USB_command+0x50a>
		sprintf((char *)large_string_buffer,"Linearity correction A: %1.6E\n\r",corr_coeff_1);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80040d8:	4b52      	ldr	r3, [pc, #328]	; (8004224 <Parsing_USB_command+0x680>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fc f9c5 	bl	800046c <__aeabi_f2d>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4950      	ldr	r1, [pc, #320]	; (8004228 <Parsing_USB_command+0x684>)
 80040e8:	484b      	ldr	r0, [pc, #300]	; (8004218 <Parsing_USB_command+0x674>)
 80040ea:	f00b fd5d 	bl	800fba8 <siprintf>
 80040ee:	e004      	b.n	80040fa <Parsing_USB_command+0x556>
 80040f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040f4:	3301      	adds	r3, #1
 80040f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80040fa:	4847      	ldr	r0, [pc, #284]	; (8004218 <Parsing_USB_command+0x674>)
 80040fc:	f7fc f84a 	bl	8000194 <strlen>
 8004100:	4603      	mov	r3, r0
 8004102:	b29b      	uxth	r3, r3
 8004104:	4619      	mov	r1, r3
 8004106:	4844      	ldr	r0, [pc, #272]	; (8004218 <Parsing_USB_command+0x674>)
 8004108:	f00a fc36 	bl	800e978 <CDC_Transmit_FS>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <Parsing_USB_command+0x576>
 8004112:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004116:	2bff      	cmp	r3, #255	; 0xff
 8004118:	d1ea      	bne.n	80040f0 <Parsing_USB_command+0x54c>
		sprintf((char *)large_string_buffer,"Linearity correction B: %1.6E\n\r",corr_coeff_2);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 800411a:	4b44      	ldr	r3, [pc, #272]	; (800422c <Parsing_USB_command+0x688>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc f9a4 	bl	800046c <__aeabi_f2d>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4941      	ldr	r1, [pc, #260]	; (8004230 <Parsing_USB_command+0x68c>)
 800412a:	483b      	ldr	r0, [pc, #236]	; (8004218 <Parsing_USB_command+0x674>)
 800412c:	f00b fd3c 	bl	800fba8 <siprintf>
 8004130:	e004      	b.n	800413c <Parsing_USB_command+0x598>
 8004132:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004136:	3301      	adds	r3, #1
 8004138:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800413c:	4836      	ldr	r0, [pc, #216]	; (8004218 <Parsing_USB_command+0x674>)
 800413e:	f7fc f829 	bl	8000194 <strlen>
 8004142:	4603      	mov	r3, r0
 8004144:	b29b      	uxth	r3, r3
 8004146:	4619      	mov	r1, r3
 8004148:	4833      	ldr	r0, [pc, #204]	; (8004218 <Parsing_USB_command+0x674>)
 800414a:	f00a fc15 	bl	800e978 <CDC_Transmit_FS>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <Parsing_USB_command+0x5b8>
 8004154:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004158:	2bff      	cmp	r3, #255	; 0xff
 800415a:	d1ea      	bne.n	8004132 <Parsing_USB_command+0x58e>
		sprintf((char *)large_string_buffer,"Linearity correction C: %1.6E\n\r",corr_coeff_3);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 800415c:	4b35      	ldr	r3, [pc, #212]	; (8004234 <Parsing_USB_command+0x690>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fc f983 	bl	800046c <__aeabi_f2d>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4933      	ldr	r1, [pc, #204]	; (8004238 <Parsing_USB_command+0x694>)
 800416c:	482a      	ldr	r0, [pc, #168]	; (8004218 <Parsing_USB_command+0x674>)
 800416e:	f00b fd1b 	bl	800fba8 <siprintf>
 8004172:	e004      	b.n	800417e <Parsing_USB_command+0x5da>
 8004174:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004178:	3301      	adds	r3, #1
 800417a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800417e:	4826      	ldr	r0, [pc, #152]	; (8004218 <Parsing_USB_command+0x674>)
 8004180:	f7fc f808 	bl	8000194 <strlen>
 8004184:	4603      	mov	r3, r0
 8004186:	b29b      	uxth	r3, r3
 8004188:	4619      	mov	r1, r3
 800418a:	4823      	ldr	r0, [pc, #140]	; (8004218 <Parsing_USB_command+0x674>)
 800418c:	f00a fbf4 	bl	800e978 <CDC_Transmit_FS>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <Parsing_USB_command+0x5fa>
 8004196:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800419a:	2bff      	cmp	r3, #255	; 0xff
 800419c:	d1ea      	bne.n	8004174 <Parsing_USB_command+0x5d0>
		sprintf((char *)large_string_buffer,"LT5400 gain X2 correction: %1.6E\n\r",gain_x2_coeff);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 800419e:	4b27      	ldr	r3, [pc, #156]	; (800423c <Parsing_USB_command+0x698>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc f962 	bl	800046c <__aeabi_f2d>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4924      	ldr	r1, [pc, #144]	; (8004240 <Parsing_USB_command+0x69c>)
 80041ae:	481a      	ldr	r0, [pc, #104]	; (8004218 <Parsing_USB_command+0x674>)
 80041b0:	f00b fcfa 	bl	800fba8 <siprintf>
 80041b4:	e004      	b.n	80041c0 <Parsing_USB_command+0x61c>
 80041b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041ba:	3301      	adds	r3, #1
 80041bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80041c0:	4815      	ldr	r0, [pc, #84]	; (8004218 <Parsing_USB_command+0x674>)
 80041c2:	f7fb ffe7 	bl	8000194 <strlen>
 80041c6:	4603      	mov	r3, r0
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	4619      	mov	r1, r3
 80041cc:	4812      	ldr	r0, [pc, #72]	; (8004218 <Parsing_USB_command+0x674>)
 80041ce:	f00a fbd3 	bl	800e978 <CDC_Transmit_FS>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <Parsing_USB_command+0x63c>
 80041d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041dc:	2bff      	cmp	r3, #255	; 0xff
 80041de:	d1ea      	bne.n	80041b6 <Parsing_USB_command+0x612>
		sprintf((char *)large_string_buffer,"LT5400 gain X4 correction: %1.6E\n\r\n\r",gain_x4_coeff);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80041e0:	4b18      	ldr	r3, [pc, #96]	; (8004244 <Parsing_USB_command+0x6a0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fc f941 	bl	800046c <__aeabi_f2d>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4916      	ldr	r1, [pc, #88]	; (8004248 <Parsing_USB_command+0x6a4>)
 80041f0:	4809      	ldr	r0, [pc, #36]	; (8004218 <Parsing_USB_command+0x674>)
 80041f2:	f00b fcd9 	bl	800fba8 <siprintf>
 80041f6:	e02e      	b.n	8004256 <Parsing_USB_command+0x6b2>
 80041f8:	08013840 	.word	0x08013840
 80041fc:	0801384c 	.word	0x0801384c
 8004200:	08013858 	.word	0x08013858
 8004204:	08013868 	.word	0x08013868
 8004208:	08013874 	.word	0x08013874
 800420c:	0801387c 	.word	0x0801387c
 8004210:	20000d18 	.word	0x20000d18
 8004214:	08013884 	.word	0x08013884
 8004218:	20000c94 	.word	0x20000c94
 800421c:	20000d1c 	.word	0x20000d1c
 8004220:	080138b8 	.word	0x080138b8
 8004224:	20000b28 	.word	0x20000b28
 8004228:	080138ec 	.word	0x080138ec
 800422c:	20000b2c 	.word	0x20000b2c
 8004230:	0801390c 	.word	0x0801390c
 8004234:	20000b30 	.word	0x20000b30
 8004238:	0801392c 	.word	0x0801392c
 800423c:	20000b34 	.word	0x20000b34
 8004240:	0801394c 	.word	0x0801394c
 8004244:	20000b38 	.word	0x20000b38
 8004248:	08013970 	.word	0x08013970
 800424c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004250:	3301      	adds	r3, #1
 8004252:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004256:	4881      	ldr	r0, [pc, #516]	; (800445c <Parsing_USB_command+0x8b8>)
 8004258:	f7fb ff9c 	bl	8000194 <strlen>
 800425c:	4603      	mov	r3, r0
 800425e:	b29b      	uxth	r3, r3
 8004260:	4619      	mov	r1, r3
 8004262:	487e      	ldr	r0, [pc, #504]	; (800445c <Parsing_USB_command+0x8b8>)
 8004264:	f00a fb88 	bl	800e978 <CDC_Transmit_FS>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <Parsing_USB_command+0x6d2>
 800426e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004272:	2bff      	cmp	r3, #255	; 0xff
 8004274:	d1ea      	bne.n	800424c <Parsing_USB_command+0x6a8>
		sprintf((char *)large_string_buffer,"DAC code: 0x%x\n\r",(unsigned int)DAC_code);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004276:	4b7a      	ldr	r3, [pc, #488]	; (8004460 <Parsing_USB_command+0x8bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	4979      	ldr	r1, [pc, #484]	; (8004464 <Parsing_USB_command+0x8c0>)
 800427e:	4877      	ldr	r0, [pc, #476]	; (800445c <Parsing_USB_command+0x8b8>)
 8004280:	f00b fc92 	bl	800fba8 <siprintf>
 8004284:	e004      	b.n	8004290 <Parsing_USB_command+0x6ec>
 8004286:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800428a:	3301      	adds	r3, #1
 800428c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004290:	4872      	ldr	r0, [pc, #456]	; (800445c <Parsing_USB_command+0x8b8>)
 8004292:	f7fb ff7f 	bl	8000194 <strlen>
 8004296:	4603      	mov	r3, r0
 8004298:	b29b      	uxth	r3, r3
 800429a:	4619      	mov	r1, r3
 800429c:	486f      	ldr	r0, [pc, #444]	; (800445c <Parsing_USB_command+0x8b8>)
 800429e:	f00a fb6b 	bl	800e978 <CDC_Transmit_FS>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <Parsing_USB_command+0x70c>
 80042a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80042ac:	2bff      	cmp	r3, #255	; 0xff
 80042ae:	d1ea      	bne.n	8004286 <Parsing_USB_command+0x6e2>
		sprintf((char *)large_string_buffer,"DDS FTW: 0x%x\n\r",(unsigned int)DDS_FTW);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80042b0:	4b6d      	ldr	r3, [pc, #436]	; (8004468 <Parsing_USB_command+0x8c4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc ff4d 	bl	8001154 <__aeabi_f2uiz>
 80042ba:	4603      	mov	r3, r0
 80042bc:	461a      	mov	r2, r3
 80042be:	496b      	ldr	r1, [pc, #428]	; (800446c <Parsing_USB_command+0x8c8>)
 80042c0:	4866      	ldr	r0, [pc, #408]	; (800445c <Parsing_USB_command+0x8b8>)
 80042c2:	f00b fc71 	bl	800fba8 <siprintf>
 80042c6:	e004      	b.n	80042d2 <Parsing_USB_command+0x72e>
 80042c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80042cc:	3301      	adds	r3, #1
 80042ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80042d2:	4862      	ldr	r0, [pc, #392]	; (800445c <Parsing_USB_command+0x8b8>)
 80042d4:	f7fb ff5e 	bl	8000194 <strlen>
 80042d8:	4603      	mov	r3, r0
 80042da:	b29b      	uxth	r3, r3
 80042dc:	4619      	mov	r1, r3
 80042de:	485f      	ldr	r0, [pc, #380]	; (800445c <Parsing_USB_command+0x8b8>)
 80042e0:	f00a fb4a 	bl	800e978 <CDC_Transmit_FS>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <Parsing_USB_command+0x74e>
 80042ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80042ee:	2bff      	cmp	r3, #255	; 0xff
 80042f0:	d1ea      	bne.n	80042c8 <Parsing_USB_command+0x724>
		sprintf((char *)large_string_buffer,"CPLD control word: 0x%x\n\r",CPLD_WORD);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 80042f2:	4b5f      	ldr	r3, [pc, #380]	; (8004470 <Parsing_USB_command+0x8cc>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	495e      	ldr	r1, [pc, #376]	; (8004474 <Parsing_USB_command+0x8d0>)
 80042fa:	4858      	ldr	r0, [pc, #352]	; (800445c <Parsing_USB_command+0x8b8>)
 80042fc:	f00b fc54 	bl	800fba8 <siprintf>
 8004300:	e004      	b.n	800430c <Parsing_USB_command+0x768>
 8004302:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004306:	3301      	adds	r3, #1
 8004308:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800430c:	4853      	ldr	r0, [pc, #332]	; (800445c <Parsing_USB_command+0x8b8>)
 800430e:	f7fb ff41 	bl	8000194 <strlen>
 8004312:	4603      	mov	r3, r0
 8004314:	b29b      	uxth	r3, r3
 8004316:	4619      	mov	r1, r3
 8004318:	4850      	ldr	r0, [pc, #320]	; (800445c <Parsing_USB_command+0x8b8>)
 800431a:	f00a fb2d 	bl	800e978 <CDC_Transmit_FS>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <Parsing_USB_command+0x788>
 8004324:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004328:	2bff      	cmp	r3, #255	; 0xff
 800432a:	d1ea      	bne.n	8004302 <Parsing_USB_command+0x75e>
		sprintf((char *)large_string_buffer,"Output mode: 0x%x\n\r",Current_output_status);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 800432c:	4b52      	ldr	r3, [pc, #328]	; (8004478 <Parsing_USB_command+0x8d4>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	4952      	ldr	r1, [pc, #328]	; (800447c <Parsing_USB_command+0x8d8>)
 8004334:	4849      	ldr	r0, [pc, #292]	; (800445c <Parsing_USB_command+0x8b8>)
 8004336:	f00b fc37 	bl	800fba8 <siprintf>
 800433a:	e004      	b.n	8004346 <Parsing_USB_command+0x7a2>
 800433c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004340:	3301      	adds	r3, #1
 8004342:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004346:	4845      	ldr	r0, [pc, #276]	; (800445c <Parsing_USB_command+0x8b8>)
 8004348:	f7fb ff24 	bl	8000194 <strlen>
 800434c:	4603      	mov	r3, r0
 800434e:	b29b      	uxth	r3, r3
 8004350:	4619      	mov	r1, r3
 8004352:	4842      	ldr	r0, [pc, #264]	; (800445c <Parsing_USB_command+0x8b8>)
 8004354:	f00a fb10 	bl	800e978 <CDC_Transmit_FS>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <Parsing_USB_command+0x7c2>
 800435e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004362:	2bff      	cmp	r3, #255	; 0xff
 8004364:	d1ea      	bne.n	800433c <Parsing_USB_command+0x798>
		sprintf((char *)large_string_buffer,"Temperature: %2.3f°C\n\r",TMP117_get_Temperature(hi2c1)*0.0078125);while((CDC_Transmit_FS((uint8_t *)large_string_buffer, strlen((const char *)large_string_buffer))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8004366:	4c46      	ldr	r4, [pc, #280]	; (8004480 <Parsing_USB_command+0x8dc>)
 8004368:	4668      	mov	r0, sp
 800436a:	f104 0310 	add.w	r3, r4, #16
 800436e:	2244      	movs	r2, #68	; 0x44
 8004370:	4619      	mov	r1, r3
 8004372:	f00a ffa3 	bl	800f2bc <memcpy>
 8004376:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800437a:	f000 fc81 	bl	8004c80 <TMP117_get_Temperature>
 800437e:	4603      	mov	r3, r0
 8004380:	4618      	mov	r0, r3
 8004382:	f7fc f861 	bl	8000448 <__aeabi_i2d>
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800438e:	f7fc f8c5 	bl	800051c <__aeabi_dmul>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	493b      	ldr	r1, [pc, #236]	; (8004484 <Parsing_USB_command+0x8e0>)
 8004398:	4830      	ldr	r0, [pc, #192]	; (800445c <Parsing_USB_command+0x8b8>)
 800439a:	f00b fc05 	bl	800fba8 <siprintf>
 800439e:	e004      	b.n	80043aa <Parsing_USB_command+0x806>
 80043a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043a4:	3301      	adds	r3, #1
 80043a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80043aa:	482c      	ldr	r0, [pc, #176]	; (800445c <Parsing_USB_command+0x8b8>)
 80043ac:	f7fb fef2 	bl	8000194 <strlen>
 80043b0:	4603      	mov	r3, r0
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	4619      	mov	r1, r3
 80043b6:	4829      	ldr	r0, [pc, #164]	; (800445c <Parsing_USB_command+0x8b8>)
 80043b8:	f00a fade 	bl	800e978 <CDC_Transmit_FS>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <Parsing_USB_command+0x826>
 80043c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043c6:	2bff      	cmp	r3, #255	; 0xff
 80043c8:	d1ea      	bne.n	80043a0 <Parsing_USB_command+0x7fc>
		send_answer_to_CDC(OK_TYPE_2);
 80043ca:	2003      	movs	r0, #3
 80043cc:	f7fe fba6 	bl	8002b1c <send_answer_to_CDC>
		return;
 80043d0:	e041      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 80043d2:	2000      	movs	r0, #0
 80043d4:	f7fe fba2 	bl	8002b1c <send_answer_to_CDC>
			return;
 80043d8:	e03d      	b.n	8004456 <Parsing_USB_command+0x8b2>




	// ==== SWEEP_DIRECTION command ====
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 80043da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043de:	492a      	ldr	r1, [pc, #168]	; (8004488 <Parsing_USB_command+0x8e4>)
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fb fecd 	bl	8000180 <strcmp>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d130      	bne.n	800444e <Parsing_USB_command+0x8aa>
	{
		if(!(strcmp(decoded_string_2,"UP"))){
 80043ec:	1d3b      	adds	r3, r7, #4
 80043ee:	4927      	ldr	r1, [pc, #156]	; (800448c <Parsing_USB_command+0x8e8>)
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fb fec5 	bl	8000180 <strcmp>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <Parsing_USB_command+0x866>
			DAC_code_direction=DIRECTION_UP_STATE;
 80043fc:	4b24      	ldr	r3, [pc, #144]	; (8004490 <Parsing_USB_command+0x8ec>)
 80043fe:	2201      	movs	r2, #1
 8004400:	701a      	strb	r2, [r3, #0]
			send_answer_to_CDC(OK_TYPE_2);
 8004402:	2003      	movs	r0, #3
 8004404:	f7fe fb8a 	bl	8002b1c <send_answer_to_CDC>
			return;
 8004408:	e025      	b.n	8004456 <Parsing_USB_command+0x8b2>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	4921      	ldr	r1, [pc, #132]	; (8004494 <Parsing_USB_command+0x8f0>)
 800440e:	4618      	mov	r0, r3
 8004410:	f7fb feb6 	bl	8000180 <strcmp>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <Parsing_USB_command+0x884>
				DAC_code_direction=DIRECTION_DOWN_STATE;
 800441a:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <Parsing_USB_command+0x8ec>)
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
				send_answer_to_CDC(OK_TYPE_2);
 8004420:	2003      	movs	r0, #3
 8004422:	f7fe fb7b 	bl	8002b1c <send_answer_to_CDC>
				return;
 8004426:	e016      	b.n	8004456 <Parsing_USB_command+0x8b2>
			}
			else
			{
				if(!(strcmp(decoded_string_2,"CYCLE"))){
 8004428:	1d3b      	adds	r3, r7, #4
 800442a:	491b      	ldr	r1, [pc, #108]	; (8004498 <Parsing_USB_command+0x8f4>)
 800442c:	4618      	mov	r0, r3
 800442e:	f7fb fea7 	bl	8000180 <strcmp>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d106      	bne.n	8004446 <Parsing_USB_command+0x8a2>
					DAC_code_direction=DIRECTION_CYCLE_STATE;
 8004438:	4b15      	ldr	r3, [pc, #84]	; (8004490 <Parsing_USB_command+0x8ec>)
 800443a:	2202      	movs	r2, #2
 800443c:	701a      	strb	r2, [r3, #0]
					send_answer_to_CDC(OK_TYPE_2);
 800443e:	2003      	movs	r0, #3
 8004440:	f7fe fb6c 	bl	8002b1c <send_answer_to_CDC>
					return;
 8004444:	e007      	b.n	8004456 <Parsing_USB_command+0x8b2>
				}
				else
				{
					send_answer_to_CDC(ERROR_TYPE_1);
 8004446:	2000      	movs	r0, #0
 8004448:	f7fe fb68 	bl	8002b1c <send_answer_to_CDC>
					return;
 800444c:	e003      	b.n	8004456 <Parsing_USB_command+0x8b2>
				}
			}
		}
	}

	send_answer_to_CDC(ERROR_TYPE_1);
 800444e:	2000      	movs	r0, #0
 8004450:	f7fe fb64 	bl	8002b1c <send_answer_to_CDC>
	return;
 8004454:	bf00      	nop
}
 8004456:	3754      	adds	r7, #84	; 0x54
 8004458:	46bd      	mov	sp, r7
 800445a:	bd90      	pop	{r4, r7, pc}
 800445c:	20000c94 	.word	0x20000c94
 8004460:	20000d24 	.word	0x20000d24
 8004464:	08013998 	.word	0x08013998
 8004468:	20000d08 	.word	0x20000d08
 800446c:	080139ac 	.word	0x080139ac
 8004470:	20000d06 	.word	0x20000d06
 8004474:	080139bc 	.word	0x080139bc
 8004478:	20000d20 	.word	0x20000d20
 800447c:	080139d8 	.word	0x080139d8
 8004480:	20000c40 	.word	0x20000c40
 8004484:	080139ec 	.word	0x080139ec
 8004488:	08013a04 	.word	0x08013a04
 800448c:	08013a14 	.word	0x08013a14
 8004490:	20000d28 	.word	0x20000d28
 8004494:	080137d4 	.word	0x080137d4
 8004498:	08013a18 	.word	0x08013a18

0800449c <Write_to_circ_buffer>:

void Write_to_circ_buffer(uint8_t Buf)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 80044a6:	1dfb      	adds	r3, r7, #7
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff f937 	bl	800371c <USB_rx_command_buffer_push_refd>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <Write_to_circ_buffer+0x24>
 80044b4:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <Write_to_circ_buffer+0x2c>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	809a      	strh	r2, [r3, #4]
 80044ba:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <Write_to_circ_buffer+0x2c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	80da      	strh	r2, [r3, #6]
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	200007a4 	.word	0x200007a4

080044cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044d0:	b672      	cpsid	i
}
 80044d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80044d4:	e7fe      	b.n	80044d4 <Error_Handler+0x8>
	...

080044d8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80044dc:	4b16      	ldr	r3, [pc, #88]	; (8004538 <MX_SPI1_Init+0x60>)
 80044de:	4a17      	ldr	r2, [pc, #92]	; (800453c <MX_SPI1_Init+0x64>)
 80044e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80044e2:	4b15      	ldr	r3, [pc, #84]	; (8004538 <MX_SPI1_Init+0x60>)
 80044e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80044ea:	4b13      	ldr	r3, [pc, #76]	; (8004538 <MX_SPI1_Init+0x60>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80044f0:	4b11      	ldr	r3, [pc, #68]	; (8004538 <MX_SPI1_Init+0x60>)
 80044f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f8:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <MX_SPI1_Init+0x60>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80044fe:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <MX_SPI1_Init+0x60>)
 8004500:	2201      	movs	r2, #1
 8004502:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <MX_SPI1_Init+0x60>)
 8004506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800450a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <MX_SPI1_Init+0x60>)
 800450e:	2218      	movs	r2, #24
 8004510:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004512:	4b09      	ldr	r3, [pc, #36]	; (8004538 <MX_SPI1_Init+0x60>)
 8004514:	2200      	movs	r2, #0
 8004516:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004518:	4b07      	ldr	r3, [pc, #28]	; (8004538 <MX_SPI1_Init+0x60>)
 800451a:	2200      	movs	r2, #0
 800451c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <MX_SPI1_Init+0x60>)
 8004520:	220a      	movs	r2, #10
 8004522:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004524:	4804      	ldr	r0, [pc, #16]	; (8004538 <MX_SPI1_Init+0x60>)
 8004526:	f004 fd15 	bl	8008f54 <HAL_SPI_Init>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8004530:	f7ff ffcc 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004534:	bf00      	nop
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000d30 	.word	0x20000d30
 800453c:	40013000 	.word	0x40013000

08004540 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004544:	4b16      	ldr	r3, [pc, #88]	; (80045a0 <MX_SPI2_Init+0x60>)
 8004546:	4a17      	ldr	r2, [pc, #92]	; (80045a4 <MX_SPI2_Init+0x64>)
 8004548:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <MX_SPI2_Init+0x60>)
 800454c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004550:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004552:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <MX_SPI2_Init+0x60>)
 8004554:	2200      	movs	r2, #0
 8004556:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <MX_SPI2_Init+0x60>)
 800455a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800455e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004560:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <MX_SPI2_Init+0x60>)
 8004562:	2200      	movs	r2, #0
 8004564:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004566:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <MX_SPI2_Init+0x60>)
 8004568:	2201      	movs	r2, #1
 800456a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <MX_SPI2_Init+0x60>)
 800456e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004572:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <MX_SPI2_Init+0x60>)
 8004576:	2218      	movs	r2, #24
 8004578:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800457a:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <MX_SPI2_Init+0x60>)
 800457c:	2200      	movs	r2, #0
 800457e:	621a      	str	r2, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <MX_SPI2_Init+0x60>)
 8004582:	2200      	movs	r2, #0
 8004584:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <MX_SPI2_Init+0x60>)
 8004588:	220a      	movs	r2, #10
 800458a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800458c:	4804      	ldr	r0, [pc, #16]	; (80045a0 <MX_SPI2_Init+0x60>)
 800458e:	f004 fce1 	bl	8008f54 <HAL_SPI_Init>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8004598:	f7ff ff98 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800459c:	bf00      	nop
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000d88 	.word	0x20000d88
 80045a4:	40003800 	.word	0x40003800

080045a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08c      	sub	sp, #48	; 0x30
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b0:	f107 031c 	add.w	r3, r7, #28
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	609a      	str	r2, [r3, #8]
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a32      	ldr	r2, [pc, #200]	; (8004690 <HAL_SPI_MspInit+0xe8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d130      	bne.n	800462c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045ca:	4b32      	ldr	r3, [pc, #200]	; (8004694 <HAL_SPI_MspInit+0xec>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4a31      	ldr	r2, [pc, #196]	; (8004694 <HAL_SPI_MspInit+0xec>)
 80045d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045d4:	6213      	str	r3, [r2, #32]
 80045d6:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <HAL_SPI_MspInit+0xec>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e2:	4b2c      	ldr	r3, [pc, #176]	; (8004694 <HAL_SPI_MspInit+0xec>)
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	4a2b      	ldr	r2, [pc, #172]	; (8004694 <HAL_SPI_MspInit+0xec>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	61d3      	str	r3, [r2, #28]
 80045ee:	4b29      	ldr	r3, [pc, #164]	; (8004694 <HAL_SPI_MspInit+0xec>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80045fa:	23e0      	movs	r3, #224	; 0xe0
 80045fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fe:	2302      	movs	r3, #2
 8004600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004602:	2300      	movs	r3, #0
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004606:	2303      	movs	r3, #3
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800460a:	2305      	movs	r3, #5
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460e:	f107 031c 	add.w	r3, r7, #28
 8004612:	4619      	mov	r1, r3
 8004614:	4820      	ldr	r0, [pc, #128]	; (8004698 <HAL_SPI_MspInit+0xf0>)
 8004616:	f001 f933 	bl	8005880 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 800461a:	2200      	movs	r2, #0
 800461c:	2101      	movs	r1, #1
 800461e:	2023      	movs	r0, #35	; 0x23
 8004620:	f000 fd59 	bl	80050d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004624:	2023      	movs	r0, #35	; 0x23
 8004626:	f000 fd72 	bl	800510e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800462a:	e02d      	b.n	8004688 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1a      	ldr	r2, [pc, #104]	; (800469c <HAL_SPI_MspInit+0xf4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d128      	bne.n	8004688 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004636:	4b17      	ldr	r3, [pc, #92]	; (8004694 <HAL_SPI_MspInit+0xec>)
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <HAL_SPI_MspInit+0xec>)
 800463c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004640:	6253      	str	r3, [r2, #36]	; 0x24
 8004642:	4b14      	ldr	r3, [pc, #80]	; (8004694 <HAL_SPI_MspInit+0xec>)
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800464e:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_SPI_MspInit+0xec>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	4a10      	ldr	r2, [pc, #64]	; (8004694 <HAL_SPI_MspInit+0xec>)
 8004654:	f043 0302 	orr.w	r3, r3, #2
 8004658:	61d3      	str	r3, [r2, #28]
 800465a:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <HAL_SPI_MspInit+0xec>)
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004666:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800466a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466c:	2302      	movs	r3, #2
 800466e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004670:	2300      	movs	r3, #0
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004674:	2303      	movs	r3, #3
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004678:	2305      	movs	r3, #5
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800467c:	f107 031c 	add.w	r3, r7, #28
 8004680:	4619      	mov	r1, r3
 8004682:	4807      	ldr	r0, [pc, #28]	; (80046a0 <HAL_SPI_MspInit+0xf8>)
 8004684:	f001 f8fc 	bl	8005880 <HAL_GPIO_Init>
}
 8004688:	bf00      	nop
 800468a:	3730      	adds	r7, #48	; 0x30
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40013000 	.word	0x40013000
 8004694:	40023800 	.word	0x40023800
 8004698:	40020000 	.word	0x40020000
 800469c:	40003800 	.word	0x40003800
 80046a0:	40020400 	.word	0x40020400

080046a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80046aa:	4b26      	ldr	r3, [pc, #152]	; (8004744 <HAL_MspInit+0xa0>)
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	4a25      	ldr	r2, [pc, #148]	; (8004744 <HAL_MspInit+0xa0>)
 80046b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046b4:	6253      	str	r3, [r2, #36]	; 0x24
 80046b6:	4b23      	ldr	r3, [pc, #140]	; (8004744 <HAL_MspInit+0xa0>)
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c2:	4b20      	ldr	r3, [pc, #128]	; (8004744 <HAL_MspInit+0xa0>)
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <HAL_MspInit+0xa0>)
 80046c8:	f043 0301 	orr.w	r3, r3, #1
 80046cc:	6213      	str	r3, [r2, #32]
 80046ce:	4b1d      	ldr	r3, [pc, #116]	; (8004744 <HAL_MspInit+0xa0>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <HAL_MspInit+0xa0>)
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	4a19      	ldr	r2, [pc, #100]	; (8004744 <HAL_MspInit+0xa0>)
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e4:	6253      	str	r3, [r2, #36]	; 0x24
 80046e6:	4b17      	ldr	r3, [pc, #92]	; (8004744 <HAL_MspInit+0xa0>)
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ee:	607b      	str	r3, [r7, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80046f2:	2200      	movs	r2, #0
 80046f4:	2101      	movs	r1, #1
 80046f6:	f06f 000b 	mvn.w	r0, #11
 80046fa:	f000 fcec 	bl	80050d6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80046fe:	2200      	movs	r2, #0
 8004700:	2101      	movs	r1, #1
 8004702:	f06f 000a 	mvn.w	r0, #10
 8004706:	f000 fce6 	bl	80050d6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800470a:	2200      	movs	r2, #0
 800470c:	2101      	movs	r1, #1
 800470e:	f06f 0009 	mvn.w	r0, #9
 8004712:	f000 fce0 	bl	80050d6 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 8004716:	2200      	movs	r2, #0
 8004718:	2101      	movs	r1, #1
 800471a:	f06f 0004 	mvn.w	r0, #4
 800471e:	f000 fcda 	bl	80050d6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8004722:	2200      	movs	r2, #0
 8004724:	2101      	movs	r1, #1
 8004726:	f06f 0003 	mvn.w	r0, #3
 800472a:	f000 fcd4 	bl	80050d6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 800472e:	2200      	movs	r2, #0
 8004730:	2101      	movs	r1, #1
 8004732:	f06f 0001 	mvn.w	r0, #1
 8004736:	f000 fcce 	bl	80050d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800

08004748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800474c:	e7fe      	b.n	800474c <NMI_Handler+0x4>

0800474e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800474e:	b480      	push	{r7}
 8004750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004752:	e7fe      	b.n	8004752 <HardFault_Handler+0x4>

08004754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004758:	e7fe      	b.n	8004758 <MemManage_Handler+0x4>

0800475a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800475a:	b480      	push	{r7}
 800475c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800475e:	e7fe      	b.n	800475e <BusFault_Handler+0x4>

08004760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004764:	e7fe      	b.n	8004764 <UsageFault_Handler+0x4>

08004766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004766:	b480      	push	{r7}
 8004768:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800476a:	bf00      	nop
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004776:	bf00      	nop
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800477e:	b480      	push	{r7}
 8004780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr

0800478a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800478e:	f000 fb8d 	bl	8004eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004792:	bf00      	nop
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800479c:	4802      	ldr	r0, [pc, #8]	; (80047a8 <USB_LP_IRQHandler+0x10>)
 800479e:	f002 facf 	bl	8006d40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80047a2:	bf00      	nop
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	200014e8 	.word	0x200014e8

080047ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encode_Push_Pin);
 80047b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80047b4:	f001 fa14 	bl	8005be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80047b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80047bc:	f001 fa10 	bl	8005be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80047c0:	bf00      	nop
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80047c8:	4802      	ldr	r0, [pc, #8]	; (80047d4 <TIM2_IRQHandler+0x10>)
 80047ca:	f005 fbfd 	bl	8009fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000de4 	.word	0x20000de4

080047d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80047dc:	4802      	ldr	r0, [pc, #8]	; (80047e8 <TIM3_IRQHandler+0x10>)
 80047de:	f005 fbf3 	bl	8009fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80047e2:	bf00      	nop
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000e24 	.word	0x20000e24

080047ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80047f0:	4802      	ldr	r0, [pc, #8]	; (80047fc <SPI1_IRQHandler+0x10>)
 80047f2:	f005 f81b 	bl	800982c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000d30 	.word	0x20000d30

08004800 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Start_button_Pin);
 8004804:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004808:	f001 f9ea 	bl	8005be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800480c:	bf00      	nop
 800480e:	bd80      	pop	{r7, pc}

08004810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
	return 1;
 8004814:	2301      	movs	r3, #1
}
 8004816:	4618      	mov	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <_kill>:

int _kill(int pid, int sig)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004828:	f00a fd1e 	bl	800f268 <__errno>
 800482c:	4603      	mov	r3, r0
 800482e:	2216      	movs	r2, #22
 8004830:	601a      	str	r2, [r3, #0]
	return -1;
 8004832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <_exit>:

void _exit (int status)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004846:	f04f 31ff 	mov.w	r1, #4294967295
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ffe7 	bl	800481e <_kill>
	while (1) {}		/* Make sure we hang here */
 8004850:	e7fe      	b.n	8004850 <_exit+0x12>

08004852 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e00a      	b.n	800487a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004864:	f3af 8000 	nop.w
 8004868:	4601      	mov	r1, r0
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	60ba      	str	r2, [r7, #8]
 8004870:	b2ca      	uxtb	r2, r1
 8004872:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	3301      	adds	r3, #1
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	dbf0      	blt.n	8004864 <_read+0x12>
	}

return len;
 8004882:	687b      	ldr	r3, [r7, #4]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e009      	b.n	80048b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	60ba      	str	r2, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3301      	adds	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	dbf1      	blt.n	800489e <_write+0x12>
	}
	return len;
 80048ba:	687b      	ldr	r3, [r7, #4]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <_close>:

int _close(int file)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	return -1;
 80048cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048ea:	605a      	str	r2, [r3, #4]
	return 0;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <_isatty>:

int _isatty(int file)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	return 1;
 8004900:	2301      	movs	r3, #1
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	return 0;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800492c:	4a14      	ldr	r2, [pc, #80]	; (8004980 <_sbrk+0x5c>)
 800492e:	4b15      	ldr	r3, [pc, #84]	; (8004984 <_sbrk+0x60>)
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <_sbrk+0x64>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004940:	4b11      	ldr	r3, [pc, #68]	; (8004988 <_sbrk+0x64>)
 8004942:	4a12      	ldr	r2, [pc, #72]	; (800498c <_sbrk+0x68>)
 8004944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <_sbrk+0x64>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4413      	add	r3, r2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d207      	bcs.n	8004964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004954:	f00a fc88 	bl	800f268 <__errno>
 8004958:	4603      	mov	r3, r0
 800495a:	220c      	movs	r2, #12
 800495c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800495e:	f04f 33ff 	mov.w	r3, #4294967295
 8004962:	e009      	b.n	8004978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <_sbrk+0x64>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <_sbrk+0x64>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	4a05      	ldr	r2, [pc, #20]	; (8004988 <_sbrk+0x64>)
 8004974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004976:	68fb      	ldr	r3, [r7, #12]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20004000 	.word	0x20004000
 8004984:	00000c00 	.word	0x00000c00
 8004988:	20000de0 	.word	0x20000de0
 800498c:	20001a08 	.word	0x20001a08

08004990 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049a2:	f107 0308 	add.w	r3, r7, #8
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b0:	463b      	mov	r3, r7
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80049b8:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <MX_TIM2_Init+0x94>)
 80049ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 -1;
 80049c0:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <MX_TIM2_Init+0x94>)
 80049c2:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80049c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <MX_TIM2_Init+0x94>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <MX_TIM2_Init+0x94>)
 80049d0:	2231      	movs	r2, #49	; 0x31
 80049d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049d4:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <MX_TIM2_Init+0x94>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049da:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <MX_TIM2_Init+0x94>)
 80049dc:	2200      	movs	r2, #0
 80049de:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80049e0:	4813      	ldr	r0, [pc, #76]	; (8004a30 <MX_TIM2_Init+0x94>)
 80049e2:	f005 f957 	bl	8009c94 <HAL_TIM_Base_Init>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80049ec:	f7ff fd6e 	bl	80044cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80049f6:	f107 0308 	add.w	r3, r7, #8
 80049fa:	4619      	mov	r1, r3
 80049fc:	480c      	ldr	r0, [pc, #48]	; (8004a30 <MX_TIM2_Init+0x94>)
 80049fe:	f005 fbbf 	bl	800a180 <HAL_TIM_ConfigClockSource>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004a08:	f7ff fd60 	bl	80044cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a14:	463b      	mov	r3, r7
 8004a16:	4619      	mov	r1, r3
 8004a18:	4805      	ldr	r0, [pc, #20]	; (8004a30 <MX_TIM2_Init+0x94>)
 8004a1a:	f005 fdb5 	bl	800a588 <HAL_TIMEx_MasterConfigSynchronization>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004a24:	f7ff fd52 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004a28:	bf00      	nop
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20000de4 	.word	0x20000de4

08004a34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a3a:	f107 0308 	add.w	r3, r7, #8
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	605a      	str	r2, [r3, #4]
 8004a44:	609a      	str	r2, [r3, #8]
 8004a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a48:	463b      	mov	r3, r7
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <MX_TIM3_Init+0x94>)
 8004a52:	4a1e      	ldr	r2, [pc, #120]	; (8004acc <MX_TIM3_Init+0x98>)
 8004a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 -1;
 8004a56:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <MX_TIM3_Init+0x94>)
 8004a58:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8004a5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <MX_TIM3_Init+0x94>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 -1;
 8004a64:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <MX_TIM3_Init+0x94>)
 8004a66:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004a6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a6c:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <MX_TIM3_Init+0x94>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <MX_TIM3_Init+0x94>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004a78:	4813      	ldr	r0, [pc, #76]	; (8004ac8 <MX_TIM3_Init+0x94>)
 8004a7a:	f005 f90b 	bl	8009c94 <HAL_TIM_Base_Init>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004a84:	f7ff fd22 	bl	80044cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	4619      	mov	r1, r3
 8004a94:	480c      	ldr	r0, [pc, #48]	; (8004ac8 <MX_TIM3_Init+0x94>)
 8004a96:	f005 fb73 	bl	800a180 <HAL_TIM_ConfigClockSource>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004aa0:	f7ff fd14 	bl	80044cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004aac:	463b      	mov	r3, r7
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4805      	ldr	r0, [pc, #20]	; (8004ac8 <MX_TIM3_Init+0x94>)
 8004ab2:	f005 fd69 	bl	800a588 <HAL_TIMEx_MasterConfigSynchronization>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004abc:	f7ff fd06 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ac0:	bf00      	nop
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000e24 	.word	0x20000e24
 8004acc:	40000400 	.word	0x40000400

08004ad0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	; 0x30
 8004ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004ad6:	f107 030c 	add.w	r3, r7, #12
 8004ada:	2224      	movs	r2, #36	; 0x24
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f00a fbfa 	bl	800f2d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004aec:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <MX_TIM4_Init+0xa0>)
 8004aee:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <MX_TIM4_Init+0xa4>)
 8004af0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004af2:	4b1f      	ldr	r3, [pc, #124]	; (8004b70 <MX_TIM4_Init+0xa0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004af8:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <MX_TIM4_Init+0xa0>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004afe:	4b1c      	ldr	r3, [pc, #112]	; (8004b70 <MX_TIM4_Init+0xa0>)
 8004b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b06:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <MX_TIM4_Init+0xa0>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b0c:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <MX_TIM4_Init+0xa0>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004b12:	2301      	movs	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004b26:	2302      	movs	r3, #2
 8004b28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004b36:	f107 030c 	add.w	r3, r7, #12
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	480c      	ldr	r0, [pc, #48]	; (8004b70 <MX_TIM4_Init+0xa0>)
 8004b3e:	f005 f93b 	bl	8009db8 <HAL_TIM_Encoder_Init>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004b48:	f7ff fcc0 	bl	80044cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4805      	ldr	r0, [pc, #20]	; (8004b70 <MX_TIM4_Init+0xa0>)
 8004b5a:	f005 fd15 	bl	800a588 <HAL_TIMEx_MasterConfigSynchronization>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004b64:	f7ff fcb2 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004b68:	bf00      	nop
 8004b6a:	3730      	adds	r7, #48	; 0x30
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000e64 	.word	0x20000e64
 8004b74:	40000800 	.word	0x40000800

08004b78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b88:	d114      	bne.n	8004bb4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b8a:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_TIM_Base_MspInit+0x78>)
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_TIM_Base_MspInit+0x78>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	6253      	str	r3, [r2, #36]	; 0x24
 8004b96:	4b16      	ldr	r3, [pc, #88]	; (8004bf0 <HAL_TIM_Base_MspInit+0x78>)
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	201c      	movs	r0, #28
 8004ba8:	f000 fa95 	bl	80050d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004bac:	201c      	movs	r0, #28
 8004bae:	f000 faae 	bl	800510e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004bb2:	e018      	b.n	8004be6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a0e      	ldr	r2, [pc, #56]	; (8004bf4 <HAL_TIM_Base_MspInit+0x7c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d113      	bne.n	8004be6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <HAL_TIM_Base_MspInit+0x78>)
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	4a0b      	ldr	r2, [pc, #44]	; (8004bf0 <HAL_TIM_Base_MspInit+0x78>)
 8004bc4:	f043 0302 	orr.w	r3, r3, #2
 8004bc8:	6253      	str	r3, [r2, #36]	; 0x24
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_TIM_Base_MspInit+0x78>)
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	60bb      	str	r3, [r7, #8]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2101      	movs	r1, #1
 8004bda:	201d      	movs	r0, #29
 8004bdc:	f000 fa7b 	bl	80050d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004be0:	201d      	movs	r0, #29
 8004be2:	f000 fa94 	bl	800510e <HAL_NVIC_EnableIRQ>
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40000400 	.word	0x40000400

08004bf8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c00:	f107 0314 	add.w	r3, r7, #20
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
 8004c0e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d127      	bne.n	8004c6a <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c1a:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <HAL_TIM_Encoder_MspInit+0x80>)
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <HAL_TIM_Encoder_MspInit+0x80>)
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	6253      	str	r3, [r2, #36]	; 0x24
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <HAL_TIM_Encoder_MspInit+0x80>)
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c32:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <HAL_TIM_Encoder_MspInit+0x80>)
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	4a10      	ldr	r2, [pc, #64]	; (8004c78 <HAL_TIM_Encoder_MspInit+0x80>)
 8004c38:	f043 0302 	orr.w	r3, r3, #2
 8004c3c:	61d3      	str	r3, [r2, #28]
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_TIM_Encoder_MspInit+0x80>)
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c4a:	23c0      	movs	r3, #192	; 0xc0
 8004c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c56:	2300      	movs	r3, #0
 8004c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	4619      	mov	r1, r3
 8004c64:	4805      	ldr	r0, [pc, #20]	; (8004c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8004c66:	f000 fe0b 	bl	8005880 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	3728      	adds	r7, #40	; 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40020400 	.word	0x40020400

08004c80 <TMP117_get_Temperature>:
   @Description   Function gives to us ambient temperature
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  Float
 */
uint16_t TMP117_get_Temperature             (I2C_HandleTypeDef i2c)
{
 8004c80:	b084      	sub	sp, #16
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af02      	add	r7, sp, #8
 8004c88:	f107 0c10 	add.w	ip, r7, #16
 8004c8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      int16_t tmpx=0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	80fb      	strh	r3, [r7, #6]
      buf[0]=TMP117_TemperatureRegister;
 8004c94:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <TMP117_get_Temperature+0x78>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]

//      buf[0]=TMP117_ConfigurationRegister;

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,1,100);
 8004c9a:	4b18      	ldr	r3, [pc, #96]	; (8004cfc <TMP117_get_Temperature+0x7c>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	b299      	uxth	r1, r3
 8004ca0:	2364      	movs	r3, #100	; 0x64
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <TMP117_get_Temperature+0x78>)
 8004ca8:	f107 0010 	add.w	r0, r7, #16
 8004cac:	f001 f8f4 	bl	8005e98 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	f000 f917 	bl	8004ee4 <HAL_Delay>
      HAL_I2C_Master_Receive(&i2c,TMP117_DeviceID,buf,2,1000);
 8004cb6:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <TMP117_get_Temperature+0x7c>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	b299      	uxth	r1, r3
 8004cbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	4a0c      	ldr	r2, [pc, #48]	; (8004cf8 <TMP117_get_Temperature+0x78>)
 8004cc6:	f107 0010 	add.w	r0, r7, #16
 8004cca:	f001 f9e3 	bl	8006094 <HAL_I2C_Master_Receive>
      tmpx=buf[0];
 8004cce:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <TMP117_get_Temperature+0x78>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	80fb      	strh	r3, [r7, #6]
      tmpx<<=8;
 8004cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	80fb      	strh	r3, [r7, #6]
      tmpx|=buf[1];
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <TMP117_get_Temperature+0x78>)
 8004cde:	785b      	ldrb	r3, [r3, #1]
 8004ce0:	b21a      	sxth	r2, r3
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	80fb      	strh	r3, [r7, #6]

      return tmpx;
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cf4:	b004      	add	sp, #16
 8004cf6:	4770      	bx	lr
 8004cf8:	20000ea4 	.word	0x20000ea4
 8004cfc:	200007bc 	.word	0x200007bc

08004d00 <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second)
{
 8004d00:	b084      	sub	sp, #16
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af02      	add	r7, sp, #8
 8004d08:	f107 0c08 	add.w	ip, r7, #8
 8004d0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 8004d10:	4b0f      	ldr	r3, [pc, #60]	; (8004d50 <TMP117_set_Configuration+0x50>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 8004d16:	4a0e      	ldr	r2, [pc, #56]	; (8004d50 <TMP117_set_Configuration+0x50>)
 8004d18:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8004d1c:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 8004d1e:	4a0c      	ldr	r2, [pc, #48]	; (8004d50 <TMP117_set_Configuration+0x50>)
 8004d20:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8004d24:	7093      	strb	r3, [r2, #2]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,2,100);
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <TMP117_set_Configuration+0x54>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	b299      	uxth	r1, r3
 8004d2c:	2364      	movs	r3, #100	; 0x64
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	2302      	movs	r3, #2
 8004d32:	4a07      	ldr	r2, [pc, #28]	; (8004d50 <TMP117_set_Configuration+0x50>)
 8004d34:	f107 0008 	add.w	r0, r7, #8
 8004d38:	f001 f8ae 	bl	8005e98 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	f000 f8d1 	bl	8004ee4 <HAL_Delay>
}
 8004d42:	bf00      	nop
 8004d44:	46bd      	mov	sp, r7
 8004d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d4a:	b004      	add	sp, #16
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20000ea8 	.word	0x20000ea8
 8004d54:	200007bc 	.word	0x200007bc

08004d58 <TMP117_Initialization>:
   @Description   Custom Parameters for Sensor
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  void
 */
void TMP117_Initialization               (I2C_HandleTypeDef i2c)
{
 8004d58:	b084      	sub	sp, #16
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b094      	sub	sp, #80	; 0x50
 8004d5e:	af14      	add	r7, sp, #80	; 0x50
 8004d60:	f107 0c08 	add.w	ip, r7, #8
 8004d64:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    TMP117_set_Configuration(i2c,0x02,0x22);
 8004d68:	2322      	movs	r3, #34	; 0x22
 8004d6a:	9312      	str	r3, [sp, #72]	; 0x48
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	9311      	str	r3, [sp, #68]	; 0x44
 8004d70:	4668      	mov	r0, sp
 8004d72:	f107 0318 	add.w	r3, r7, #24
 8004d76:	2244      	movs	r2, #68	; 0x44
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f00a fa9f 	bl	800f2bc <memcpy>
 8004d7e:	f107 0308 	add.w	r3, r7, #8
 8004d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d84:	f7ff ffbc 	bl	8004d00 <TMP117_set_Configuration>
	HAL_Delay(2); // wait 2ms
 8004d88:	2002      	movs	r0, #2
 8004d8a:	f000 f8ab 	bl	8004ee4 <HAL_Delay>
	TMP117_set_Configuration(i2c,0x03,0xA0);
 8004d8e:	23a0      	movs	r3, #160	; 0xa0
 8004d90:	9312      	str	r3, [sp, #72]	; 0x48
 8004d92:	2303      	movs	r3, #3
 8004d94:	9311      	str	r3, [sp, #68]	; 0x44
 8004d96:	4668      	mov	r0, sp
 8004d98:	f107 0318 	add.w	r3, r7, #24
 8004d9c:	2244      	movs	r2, #68	; 0x44
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f00a fa8c 	bl	800f2bc <memcpy>
 8004da4:	f107 0308 	add.w	r3, r7, #8
 8004da8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004daa:	f7ff ffa9 	bl	8004d00 <TMP117_set_Configuration>
	//TMP117_set_Configuration(i2c,0x02,0x20);
//      TMP117_set_Temperature_Offset(i2c,0x00,0x00); //Default Value
//      TMP117_set_LowLimit(i2c,0x12,0x80);           //Set 10 Celcius
//      TMP117_set_HighLimit(i2c,0x51,0x20);          //Set 40 Celcius
}
 8004dae:	bf00      	nop
 8004db0:	46bd      	mov	sp, r7
 8004db2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db6:	b004      	add	sp, #16
 8004db8:	4770      	bx	lr
	...

08004dbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004dbc:	480c      	ldr	r0, [pc, #48]	; (8004df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004dbe:	490d      	ldr	r1, [pc, #52]	; (8004df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004dc0:	4a0d      	ldr	r2, [pc, #52]	; (8004df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004dc4:	e002      	b.n	8004dcc <LoopCopyDataInit>

08004dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dca:	3304      	adds	r3, #4

08004dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004dd0:	d3f9      	bcc.n	8004dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004dd2:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004dd4:	4c0a      	ldr	r4, [pc, #40]	; (8004e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dd8:	e001      	b.n	8004dde <LoopFillZerobss>

08004dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ddc:	3204      	adds	r2, #4

08004dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004de0:	d3fb      	bcc.n	8004dda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004de2:	f7ff fdd5 	bl	8004990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004de6:	f00a fa45 	bl	800f274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004dea:	f7fe fcb7 	bl	800375c <main>
  bx lr
 8004dee:	4770      	bx	lr
  ldr r0, =_sdata
 8004df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004df4:	20000b0c 	.word	0x20000b0c
  ldr r2, =_sidata
 8004df8:	08013f88 	.word	0x08013f88
  ldr r2, =_sbss
 8004dfc:	20000b0c 	.word	0x20000b0c
  ldr r4, =_ebss
 8004e00:	20001a04 	.word	0x20001a04

08004e04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e04:	e7fe      	b.n	8004e04 <ADC1_IRQHandler>

08004e06 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e10:	2003      	movs	r0, #3
 8004e12:	f000 f955 	bl	80050c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e16:	200f      	movs	r0, #15
 8004e18:	f000 f80e 	bl	8004e38 <HAL_InitTick>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	71fb      	strb	r3, [r7, #7]
 8004e26:	e001      	b.n	8004e2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004e28:	f7ff fc3c 	bl	80046a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004e44:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <HAL_InitTick+0x68>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d022      	beq.n	8004e92 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004e4c:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <HAL_InitTick+0x6c>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <HAL_InitTick+0x68>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 f962 	bl	800512a <HAL_SYSTICK_Config>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10f      	bne.n	8004e8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b0f      	cmp	r3, #15
 8004e70:	d809      	bhi.n	8004e86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e72:	2200      	movs	r2, #0
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7a:	f000 f92c 	bl	80050d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ea8 <HAL_InitTick+0x70>)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	e007      	b.n	8004e96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
 8004e8a:	e004      	b.n	8004e96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
 8004e90:	e001      	b.n	8004e96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	200007c4 	.word	0x200007c4
 8004ea4:	200007b8 	.word	0x200007b8
 8004ea8:	200007c0 	.word	0x200007c0

08004eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_IncTick+0x1c>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_IncTick+0x20>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4413      	add	r3, r2
 8004eba:	4a03      	ldr	r2, [pc, #12]	; (8004ec8 <HAL_IncTick+0x1c>)
 8004ebc:	6013      	str	r3, [r2, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000eac 	.word	0x20000eac
 8004ecc:	200007c4 	.word	0x200007c4

08004ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ed4:	4b02      	ldr	r3, [pc, #8]	; (8004ee0 <HAL_GetTick+0x10>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr
 8004ee0:	20000eac 	.word	0x20000eac

08004ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004eec:	f7ff fff0 	bl	8004ed0 <HAL_GetTick>
 8004ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d004      	beq.n	8004f08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_Delay+0x40>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4413      	add	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f08:	bf00      	nop
 8004f0a:	f7ff ffe1 	bl	8004ed0 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d8f7      	bhi.n	8004f0a <HAL_Delay+0x26>
  {
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	200007c4 	.word	0x200007c4

08004f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <__NVIC_SetPriorityGrouping+0x44>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f44:	4013      	ands	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f5a:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <__NVIC_SetPriorityGrouping+0x44>)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	60d3      	str	r3, [r2, #12]
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	e000ed00 	.word	0xe000ed00

08004f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <__NVIC_GetPriorityGrouping+0x18>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	f003 0307 	and.w	r3, r3, #7
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	e000ed00 	.word	0xe000ed00

08004f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	db0b      	blt.n	8004fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	f003 021f 	and.w	r2, r3, #31
 8004fa4:	4906      	ldr	r1, [pc, #24]	; (8004fc0 <__NVIC_EnableIRQ+0x34>)
 8004fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	2001      	movs	r0, #1
 8004fae:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr
 8004fc0:	e000e100 	.word	0xe000e100

08004fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	6039      	str	r1, [r7, #0]
 8004fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	db0a      	blt.n	8004fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	490c      	ldr	r1, [pc, #48]	; (8005010 <__NVIC_SetPriority+0x4c>)
 8004fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe2:	0112      	lsls	r2, r2, #4
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fec:	e00a      	b.n	8005004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	4908      	ldr	r1, [pc, #32]	; (8005014 <__NVIC_SetPriority+0x50>)
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	3b04      	subs	r3, #4
 8004ffc:	0112      	lsls	r2, r2, #4
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	440b      	add	r3, r1
 8005002:	761a      	strb	r2, [r3, #24]
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	e000e100 	.word	0xe000e100
 8005014:	e000ed00 	.word	0xe000ed00

08005018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	; 0x24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f1c3 0307 	rsb	r3, r3, #7
 8005032:	2b04      	cmp	r3, #4
 8005034:	bf28      	it	cs
 8005036:	2304      	movcs	r3, #4
 8005038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	3304      	adds	r3, #4
 800503e:	2b06      	cmp	r3, #6
 8005040:	d902      	bls.n	8005048 <NVIC_EncodePriority+0x30>
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	3b03      	subs	r3, #3
 8005046:	e000      	b.n	800504a <NVIC_EncodePriority+0x32>
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800504c:	f04f 32ff 	mov.w	r2, #4294967295
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43da      	mvns	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	401a      	ands	r2, r3
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005060:	f04f 31ff 	mov.w	r1, #4294967295
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	43d9      	mvns	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005070:	4313      	orrs	r3, r2
         );
}
 8005072:	4618      	mov	r0, r3
 8005074:	3724      	adds	r7, #36	; 0x24
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3b01      	subs	r3, #1
 8005088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800508c:	d301      	bcc.n	8005092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800508e:	2301      	movs	r3, #1
 8005090:	e00f      	b.n	80050b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005092:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <SysTick_Config+0x40>)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3b01      	subs	r3, #1
 8005098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800509a:	210f      	movs	r1, #15
 800509c:	f04f 30ff 	mov.w	r0, #4294967295
 80050a0:	f7ff ff90 	bl	8004fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <SysTick_Config+0x40>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050aa:	4b04      	ldr	r3, [pc, #16]	; (80050bc <SysTick_Config+0x40>)
 80050ac:	2207      	movs	r2, #7
 80050ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	e000e010 	.word	0xe000e010

080050c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff ff2d 	bl	8004f28 <__NVIC_SetPriorityGrouping>
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b086      	sub	sp, #24
 80050da:	af00      	add	r7, sp, #0
 80050dc:	4603      	mov	r3, r0
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050e8:	f7ff ff42 	bl	8004f70 <__NVIC_GetPriorityGrouping>
 80050ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	f7ff ff90 	bl	8005018 <NVIC_EncodePriority>
 80050f8:	4602      	mov	r2, r0
 80050fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff ff5f 	bl	8004fc4 <__NVIC_SetPriority>
}
 8005106:	bf00      	nop
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	4603      	mov	r3, r0
 8005116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff ff35 	bl	8004f8c <__NVIC_EnableIRQ>
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff ffa2 	bl	800507c <SysTick_Config>
 8005138:	4603      	mov	r3, r0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d005      	beq.n	8005166 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2204      	movs	r2, #4
 800515e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
 8005164:	e029      	b.n	80051ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 020e 	bic.w	r2, r2, #14
 8005174:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f003 021c 	and.w	r2, r3, #28
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	2101      	movs	r1, #1
 8005194:	fa01 f202 	lsl.w	r2, r1, r2
 8005198:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4798      	blx	r3
    }
  }
  return status;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80051cc:	f7ff fe80 	bl	8004ed0 <HAL_GetTick>
 80051d0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80051d2:	e010      	b.n	80051f6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d00c      	beq.n	80051f6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d007      	beq.n	80051f2 <FLASH_WaitForLastOperation+0x2e>
 80051e2:	f7ff fe75 	bl	8004ed0 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d201      	bcs.n	80051f6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e02f      	b.n	8005256 <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80051f6:	4b1a      	ldr	r3, [pc, #104]	; (8005260 <FLASH_WaitForLastOperation+0x9c>)
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d0e8      	beq.n	80051d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005202:	4b17      	ldr	r3, [pc, #92]	; (8005260 <FLASH_WaitForLastOperation+0x9c>)
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d102      	bne.n	8005214 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800520e:	4b14      	ldr	r3, [pc, #80]	; (8005260 <FLASH_WaitForLastOperation+0x9c>)
 8005210:	2202      	movs	r2, #2
 8005212:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005214:	4b12      	ldr	r3, [pc, #72]	; (8005260 <FLASH_WaitForLastOperation+0x9c>)
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005220:	d014      	beq.n	800524c <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005222:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <FLASH_WaitForLastOperation+0x9c>)
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800522a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522e:	d00d      	beq.n	800524c <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <FLASH_WaitForLastOperation+0x9c>)
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523c:	d006      	beq.n	800524c <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800523e:	4b08      	ldr	r3, [pc, #32]	; (8005260 <FLASH_WaitForLastOperation+0x9c>)
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8005246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800524a:	d103      	bne.n	8005254 <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800524c:	f000 f80a 	bl	8005264 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40023c00 	.word	0x40023c00

08005264 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800526e:	4b26      	ldr	r3, [pc, #152]	; (8005308 <FLASH_SetErrorCode+0xa4>)
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527a:	d109      	bne.n	8005290 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800527c:	4b23      	ldr	r3, [pc, #140]	; (800530c <FLASH_SetErrorCode+0xa8>)
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f043 0302 	orr.w	r3, r3, #2
 8005284:	4a21      	ldr	r2, [pc, #132]	; (800530c <FLASH_SetErrorCode+0xa8>)
 8005286:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8005290:	4b1d      	ldr	r3, [pc, #116]	; (8005308 <FLASH_SetErrorCode+0xa4>)
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800529c:	d109      	bne.n	80052b2 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800529e:	4b1b      	ldr	r3, [pc, #108]	; (800530c <FLASH_SetErrorCode+0xa8>)
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	4a19      	ldr	r2, [pc, #100]	; (800530c <FLASH_SetErrorCode+0xa8>)
 80052a8:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052b0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80052b2:	4b15      	ldr	r3, [pc, #84]	; (8005308 <FLASH_SetErrorCode+0xa4>)
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052be:	d109      	bne.n	80052d4 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80052c0:	4b12      	ldr	r3, [pc, #72]	; (800530c <FLASH_SetErrorCode+0xa8>)
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f043 0304 	orr.w	r3, r3, #4
 80052c8:	4a10      	ldr	r2, [pc, #64]	; (800530c <FLASH_SetErrorCode+0xa8>)
 80052ca:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052d2:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <FLASH_SetErrorCode+0xa4>)
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e0:	d109      	bne.n	80052f6 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <FLASH_SetErrorCode+0xa8>)
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f043 0308 	orr.w	r3, r3, #8
 80052ea:	4a08      	ldr	r2, [pc, #32]	; (800530c <FLASH_SetErrorCode+0xa8>)
 80052ec:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052f4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80052f6:	4a04      	ldr	r2, [pc, #16]	; (8005308 <FLASH_SetErrorCode+0xa4>)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6193      	str	r3, [r2, #24]
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40023c00 	.word	0x40023c00
 800530c:	20000eb0 	.word	0x20000eb0

08005310 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8005314:	4b09      	ldr	r3, [pc, #36]	; (800533c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8005322:	4a07      	ldr	r2, [pc, #28]	; (8005340 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 8005324:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8005328:	4a06      	ldr	r2, [pc, #24]	; (8005344 <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 800532a:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	e000      	b.n	8005332 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
}
 8005332:	4618      	mov	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40023c00 	.word	0x40023c00
 8005340:	89abcdef 	.word	0x89abcdef
 8005344:	02030405 	.word	0x02030405

08005348 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4a04      	ldr	r2, [pc, #16]	; (8005364 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 8005352:	f043 0301 	orr.w	r3, r3, #1
 8005356:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40023c00 	.word	0x40023c00

08005368 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005376:	f24c 3050 	movw	r0, #50000	; 0xc350
 800537a:	f7ff ff23 	bl	80051c4 <FLASH_WaitForLastOperation>
 800537e:	4603      	mov	r3, r0
 8005380:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d11a      	bne.n	80053be <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005388:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 800538a:	2200      	movs	r2, #0
 800538c:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d102      	bne.n	800539a <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d102      	bne.n	80053a6 <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80053b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80053b6:	f7ff ff05 	bl	80051c4 <FLASH_WaitForLastOperation>
 80053ba:	4603      	mov	r3, r0
 80053bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 80053be:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000eb0 	.word	0x20000eb0

080053cc <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80053dc:	4b31      	ldr	r3, [pc, #196]	; (80054a4 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 80053de:	7c1b      	ldrb	r3, [r3, #16]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e058      	b.n	800549a <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 80053e8:	4b2e      	ldr	r3, [pc, #184]	; (80054a4 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80053ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80053f2:	f7ff fee7 	bl	80051c4 <FLASH_WaitForLastOperation>
 80053f6:	4603      	mov	r3, r0
 80053f8:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d148      	bne.n	8005492 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005400:	4b28      	ldr	r3, [pc, #160]	; (80054a4 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8005402:	2200      	movs	r2, #0
 8005404:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d106      	bne.n	800541a <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	68b8      	ldr	r0, [r7, #8]
 8005410:	f000 fa18 	bl	8005844 <FLASH_DATAEEPROM_ProgramWord>
 8005414:	4603      	mov	r3, r0
 8005416:	75fb      	strb	r3, [r7, #23]
 8005418:	e03b      	b.n	8005492 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d108      	bne.n	8005432 <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	b29b      	uxth	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	68b8      	ldr	r0, [r7, #8]
 8005428:	f000 f99c 	bl	8005764 <FLASH_DATAEEPROM_ProgramHalfWord>
 800542c:	4603      	mov	r3, r0
 800542e:	75fb      	strb	r3, [r7, #23]
 8005430:	e02f      	b.n	8005492 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d108      	bne.n	800544a <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	4619      	mov	r1, r3
 800543e:	68b8      	ldr	r0, [r7, #8]
 8005440:	f000 f934 	bl	80056ac <FLASH_DATAEEPROM_ProgramByte>
 8005444:	4603      	mov	r3, r0
 8005446:	75fb      	strb	r3, [r7, #23]
 8005448:	e023      	b.n	8005492 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b04      	cmp	r3, #4
 800544e:	d108      	bne.n	8005462 <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	4619      	mov	r1, r3
 8005456:	68b8      	ldr	r0, [r7, #8]
 8005458:	f000 f826 	bl	80054a8 <FLASH_DATAEEPROM_FastProgramByte>
 800545c:	4603      	mov	r3, r0
 800545e:	75fb      	strb	r3, [r7, #23]
 8005460:	e017      	b.n	8005492 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d108      	bne.n	800547a <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	b29b      	uxth	r3, r3
 800546c:	4619      	mov	r1, r3
 800546e:	68b8      	ldr	r0, [r7, #8]
 8005470:	f000 f87e 	bl	8005570 <FLASH_DATAEEPROM_FastProgramHalfWord>
 8005474:	4603      	mov	r3, r0
 8005476:	75fb      	strb	r3, [r7, #23]
 8005478:	e00b      	b.n	8005492 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b10      	cmp	r3, #16
 800547e:	d106      	bne.n	800548e <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	68b8      	ldr	r0, [r7, #8]
 8005484:	f000 f8ec 	bl	8005660 <FLASH_DATAEEPROM_FastProgramWord>
 8005488:	4603      	mov	r3, r0
 800548a:	75fb      	strb	r3, [r7, #23]
 800548c:	e001      	b.n	8005492 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005492:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8005494:	2200      	movs	r2, #0
 8005496:	741a      	strb	r2, [r3, #16]

  return status;
 8005498:	7dfb      	ldrb	r3, [r7, #23]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000eb0 	.word	0x20000eb0

080054a8 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80054c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80054c4:	f7ff fe7e 	bl	80051c4 <FLASH_WaitForLastOperation>
 80054c8:	4603      	mov	r3, r0
 80054ca:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d145      	bne.n	800555e <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80054d2:	4b25      	ldr	r3, [pc, #148]	; (8005568 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4a24      	ldr	r2, [pc, #144]	; (8005568 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 80054d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054dc:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d009      	beq.n	80054f8 <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80054ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80054ee:	f7ff fe69 	bl	80051c4 <FLASH_WaitForLastOperation>
 80054f2:	4603      	mov	r3, r0
 80054f4:	75fb      	strb	r3, [r7, #23]
 80054f6:	e032      	b.n	800555e <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f023 0303 	bic.w	r3, r3, #3
 80054fe:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	22ff      	movs	r2, #255	; 0xff
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	43db      	mvns	r3, r3
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4013      	ands	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	4619      	mov	r1, r3
 8005528:	2002      	movs	r0, #2
 800552a:	f7ff ff1d 	bl	8005368 <HAL_FLASHEx_DATAEEPROM_Erase>
 800552e:	4603      	mov	r3, r0
 8005530:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8005532:	4b0e      	ldr	r3, [pc, #56]	; (800556c <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8005534:	2200      	movs	r2, #0
 8005536:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4619      	mov	r1, r3
 8005542:	2010      	movs	r0, #16
 8005544:	f7ff ff42 	bl	80053cc <HAL_FLASHEx_DATAEEPROM_Program>
 8005548:	4603      	mov	r3, r0
 800554a:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 800554c:	4b07      	ldr	r3, [pc, #28]	; (800556c <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 800554e:	7c1b      	ldrb	r3, [r3, #16]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 8005554:	2302      	movs	r3, #2
 8005556:	e003      	b.n	8005560 <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 800555a:	2201      	movs	r2, #1
 800555c:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800555e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40023c00 	.word	0x40023c00
 800556c:	20000eb0 	.word	0x20000eb0

08005570 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005588:	f24c 3050 	movw	r0, #50000	; 0xc350
 800558c:	f7ff fe1a 	bl	80051c4 <FLASH_WaitForLastOperation>
 8005590:	4603      	mov	r3, r0
 8005592:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d158      	bne.n	800564c <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800559a:	4b2f      	ldr	r3, [pc, #188]	; (8005658 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	4a2e      	ldr	r2, [pc, #184]	; (8005658 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 80055a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a4:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 80055a6:	887b      	ldrh	r3, [r7, #2]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d009      	beq.n	80055c0 <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	887a      	ldrh	r2, [r7, #2]
 80055b0:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80055b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80055b6:	f7ff fe05 	bl	80051c4 <FLASH_WaitForLastOperation>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]
 80055be:	e045      	b.n	800564c <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80055c0:	4b26      	ldr	r3, [pc, #152]	; (800565c <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d028      	beq.n	8005622 <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	43db      	mvns	r3, r3
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4013      	ands	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f023 0303 	bic.w	r3, r3, #3
 8005600:	4619      	mov	r1, r3
 8005602:	2002      	movs	r0, #2
 8005604:	f7ff feb0 	bl	8005368 <HAL_FLASHEx_DATAEEPROM_Erase>
 8005608:	4603      	mov	r3, r0
 800560a:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4619      	mov	r1, r3
 8005616:	2010      	movs	r0, #16
 8005618:	f7ff fed8 	bl	80053cc <HAL_FLASHEx_DATAEEPROM_Program>
 800561c:	4603      	mov	r3, r0
 800561e:	75fb      	strb	r3, [r7, #23]
 8005620:	e00b      	b.n	800563a <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 8005622:	2200      	movs	r2, #0
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	2004      	movs	r0, #4
 8005628:	f7ff fed0 	bl	80053cc <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3301      	adds	r3, #1
 8005630:	2200      	movs	r2, #0
 8005632:	4619      	mov	r1, r3
 8005634:	2004      	movs	r0, #4
 8005636:	f7ff fec9 	bl	80053cc <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 800563a:	4b08      	ldr	r3, [pc, #32]	; (800565c <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 800563c:	7c1b      	ldrb	r3, [r3, #16]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 8005642:	2302      	movs	r3, #2
 8005644:	e003      	b.n	800564e <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8005648:	2201      	movs	r2, #1
 800564a:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800564c:	7dfb      	ldrb	r3, [r7, #23]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40023c00 	.word	0x40023c00
 800565c:	20000eb0 	.word	0x20000eb0

08005660 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800566e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005672:	f7ff fda7 	bl	80051c4 <FLASH_WaitForLastOperation>
 8005676:	4603      	mov	r3, r0
 8005678:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10e      	bne.n	800569e <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8005680:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8005686:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800568a:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005692:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005696:	f7ff fd95 	bl	80051c4 <FLASH_WaitForLastOperation>
 800569a:	4603      	mov	r3, r0
 800569c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40023c00 	.word	0x40023c00

080056ac <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80056c8:	f7ff fd7c 	bl	80051c4 <FLASH_WaitForLastOperation>
 80056cc:	4603      	mov	r3, r0
 80056ce:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d13f      	bne.n	8005756 <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d009      	beq.n	80056f0 <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	78fa      	ldrb	r2, [r7, #3]
 80056e0:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80056e6:	f7ff fd6d 	bl	80051c4 <FLASH_WaitForLastOperation>
 80056ea:	4603      	mov	r3, r0
 80056ec:	75fb      	strb	r3, [r7, #23]
 80056ee:	e032      	b.n	8005756 <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	22ff      	movs	r2, #255	; 0xff
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	43db      	mvns	r3, r3
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4013      	ands	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f023 0303 	bic.w	r3, r3, #3
 800571e:	4619      	mov	r1, r3
 8005720:	2002      	movs	r0, #2
 8005722:	f7ff fe21 	bl	8005368 <HAL_FLASHEx_DATAEEPROM_Erase>
 8005726:	4603      	mov	r3, r0
 8005728:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800572a:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 800572c:	2200      	movs	r2, #0
 800572e:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4619      	mov	r1, r3
 800573a:	2010      	movs	r0, #16
 800573c:	f7ff fe46 	bl	80053cc <HAL_FLASHEx_DATAEEPROM_Program>
 8005740:	4603      	mov	r3, r0
 8005742:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8005746:	7c1b      	ldrb	r3, [r3, #16]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <FLASH_DATAEEPROM_ProgramByte+0xa4>
 800574c:	2302      	movs	r3, #2
 800574e:	e003      	b.n	8005758 <FLASH_DATAEEPROM_ProgramByte+0xac>
 8005750:	4b03      	ldr	r3, [pc, #12]	; (8005760 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8005752:	2201      	movs	r2, #1
 8005754:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20000eb0 	.word	0x20000eb0

08005764 <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800577c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005780:	f7ff fd20 	bl	80051c4 <FLASH_WaitForLastOperation>
 8005784:	4603      	mov	r3, r0
 8005786:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d152      	bne.n	8005834 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 800578e:	887b      	ldrh	r3, [r7, #2]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d009      	beq.n	80057a8 <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	887a      	ldrh	r2, [r7, #2]
 8005798:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800579a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800579e:	f7ff fd11 	bl	80051c4 <FLASH_WaitForLastOperation>
 80057a2:	4603      	mov	r3, r0
 80057a4:	75fb      	strb	r3, [r7, #23]
 80057a6:	e045      	b.n	8005834 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80057a8:	4b25      	ldr	r3, [pc, #148]	; (8005840 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d028      	beq.n	800580a <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	43db      	mvns	r3, r3
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4013      	ands	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f023 0303 	bic.w	r3, r3, #3
 80057e8:	4619      	mov	r1, r3
 80057ea:	2002      	movs	r0, #2
 80057ec:	f7ff fdbc 	bl	8005368 <HAL_FLASHEx_DATAEEPROM_Erase>
 80057f0:	4603      	mov	r3, r0
 80057f2:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f023 0303 	bic.w	r3, r3, #3
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4619      	mov	r1, r3
 80057fe:	2010      	movs	r0, #16
 8005800:	f7ff fde4 	bl	80053cc <HAL_FLASHEx_DATAEEPROM_Program>
 8005804:	4603      	mov	r3, r0
 8005806:	75fb      	strb	r3, [r7, #23]
 8005808:	e00b      	b.n	8005822 <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 800580a:	2200      	movs	r2, #0
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	2004      	movs	r0, #4
 8005810:	f7ff fddc 	bl	80053cc <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3301      	adds	r3, #1
 8005818:	2200      	movs	r2, #0
 800581a:	4619      	mov	r1, r3
 800581c:	2004      	movs	r0, #4
 800581e:	f7ff fdd5 	bl	80053cc <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8005824:	7c1b      	ldrb	r3, [r3, #16]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 800582a:	2302      	movs	r3, #2
 800582c:	e003      	b.n	8005836 <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 800582e:	4b04      	ldr	r3, [pc, #16]	; (8005840 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8005830:	2201      	movs	r2, #1
 8005832:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000eb0 	.word	0x20000eb0

08005844 <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005852:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005856:	f7ff fcb5 	bl	80051c4 <FLASH_WaitForLastOperation>
 800585a:	4603      	mov	r3, r0
 800585c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d108      	bne.n	8005876 <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800586a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800586e:	f7ff fca9 	bl	80051c4 <FLASH_WaitForLastOperation>
 8005872:	4603      	mov	r3, r0
 8005874:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8005876:	7bfb      	ldrb	r3, [r7, #15]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8005892:	2300      	movs	r3, #0
 8005894:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005896:	e154      	b.n	8005b42 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	2101      	movs	r1, #1
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	4013      	ands	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8146 	beq.w	8005b3c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d005      	beq.n	80058c8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d130      	bne.n	800592a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	2203      	movs	r2, #3
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	43db      	mvns	r3, r3
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4013      	ands	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80058fe:	2201      	movs	r2, #1
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4013      	ands	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	091b      	lsrs	r3, r3, #4
 8005914:	f003 0201 	and.w	r2, r3, #1
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d017      	beq.n	8005966 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	2203      	movs	r2, #3
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	43db      	mvns	r3, r3
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4013      	ands	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d123      	bne.n	80059ba <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	08da      	lsrs	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3208      	adds	r2, #8
 800597a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	220f      	movs	r2, #15
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4013      	ands	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	08da      	lsrs	r2, r3, #3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3208      	adds	r2, #8
 80059b4:	6939      	ldr	r1, [r7, #16]
 80059b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	2203      	movs	r2, #3
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4013      	ands	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f003 0203 	and.w	r2, r3, #3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 80a0 	beq.w	8005b3c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059fc:	4b58      	ldr	r3, [pc, #352]	; (8005b60 <HAL_GPIO_Init+0x2e0>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	4a57      	ldr	r2, [pc, #348]	; (8005b60 <HAL_GPIO_Init+0x2e0>)
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	6213      	str	r3, [r2, #32]
 8005a08:	4b55      	ldr	r3, [pc, #340]	; (8005b60 <HAL_GPIO_Init+0x2e0>)
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a14:	4a53      	ldr	r2, [pc, #332]	; (8005b64 <HAL_GPIO_Init+0x2e4>)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	089b      	lsrs	r3, r3, #2
 8005a1a:	3302      	adds	r3, #2
 8005a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	220f      	movs	r2, #15
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4013      	ands	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a4b      	ldr	r2, [pc, #300]	; (8005b68 <HAL_GPIO_Init+0x2e8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d019      	beq.n	8005a74 <HAL_GPIO_Init+0x1f4>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a4a      	ldr	r2, [pc, #296]	; (8005b6c <HAL_GPIO_Init+0x2ec>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d013      	beq.n	8005a70 <HAL_GPIO_Init+0x1f0>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a49      	ldr	r2, [pc, #292]	; (8005b70 <HAL_GPIO_Init+0x2f0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00d      	beq.n	8005a6c <HAL_GPIO_Init+0x1ec>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a48      	ldr	r2, [pc, #288]	; (8005b74 <HAL_GPIO_Init+0x2f4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d007      	beq.n	8005a68 <HAL_GPIO_Init+0x1e8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a47      	ldr	r2, [pc, #284]	; (8005b78 <HAL_GPIO_Init+0x2f8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d101      	bne.n	8005a64 <HAL_GPIO_Init+0x1e4>
 8005a60:	2304      	movs	r3, #4
 8005a62:	e008      	b.n	8005a76 <HAL_GPIO_Init+0x1f6>
 8005a64:	2305      	movs	r3, #5
 8005a66:	e006      	b.n	8005a76 <HAL_GPIO_Init+0x1f6>
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e004      	b.n	8005a76 <HAL_GPIO_Init+0x1f6>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e002      	b.n	8005a76 <HAL_GPIO_Init+0x1f6>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <HAL_GPIO_Init+0x1f6>
 8005a74:	2300      	movs	r3, #0
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	f002 0203 	and.w	r2, r2, #3
 8005a7c:	0092      	lsls	r2, r2, #2
 8005a7e:	4093      	lsls	r3, r2
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005a86:	4937      	ldr	r1, [pc, #220]	; (8005b64 <HAL_GPIO_Init+0x2e4>)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a94:	4b39      	ldr	r3, [pc, #228]	; (8005b7c <HAL_GPIO_Init+0x2fc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005ab8:	4a30      	ldr	r2, [pc, #192]	; (8005b7c <HAL_GPIO_Init+0x2fc>)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005abe:	4b2f      	ldr	r3, [pc, #188]	; (8005b7c <HAL_GPIO_Init+0x2fc>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4013      	ands	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005ae2:	4a26      	ldr	r2, [pc, #152]	; (8005b7c <HAL_GPIO_Init+0x2fc>)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ae8:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <HAL_GPIO_Init+0x2fc>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4013      	ands	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005b0c:	4a1b      	ldr	r2, [pc, #108]	; (8005b7c <HAL_GPIO_Init+0x2fc>)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b12:	4b1a      	ldr	r3, [pc, #104]	; (8005b7c <HAL_GPIO_Init+0x2fc>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005b36:	4a11      	ldr	r2, [pc, #68]	; (8005b7c <HAL_GPIO_Init+0x2fc>)
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f47f aea3 	bne.w	8005898 <HAL_GPIO_Init+0x18>
  }
}
 8005b52:	bf00      	nop
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40023800 	.word	0x40023800
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40020000 	.word	0x40020000
 8005b6c:	40020400 	.word	0x40020400
 8005b70:	40020800 	.word	0x40020800
 8005b74:	40020c00 	.word	0x40020c00
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	40010400 	.word	0x40010400

08005b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	887b      	ldrh	r3, [r7, #2]
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
 8005b9c:	e001      	b.n	8005ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr

08005bae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	807b      	strh	r3, [r7, #2]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bbe:	787b      	ldrb	r3, [r7, #1]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bc4:	887a      	ldrh	r2, [r7, #2]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8005bca:	e003      	b.n	8005bd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8005bcc:	887b      	ldrh	r3, [r7, #2]
 8005bce:	041a      	lsls	r2, r3, #16
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	619a      	str	r2, [r3, #24]
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr
	...

08005be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bea:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bf6:	4a05      	ldr	r2, [pc, #20]	; (8005c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bfc:	88fb      	ldrh	r3, [r7, #6]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fd fefa 	bl	80039f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c04:	bf00      	nop
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	40010400 	.word	0x40010400

08005c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e12b      	b.n	8005e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fd fd2c 	bl	8003694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2224      	movs	r2, #36	; 0x24
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c74:	f003 f8fa 	bl	8008e6c <HAL_RCC_GetPCLK1Freq>
 8005c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	4a81      	ldr	r2, [pc, #516]	; (8005e84 <HAL_I2C_Init+0x274>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d807      	bhi.n	8005c94 <HAL_I2C_Init+0x84>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4a80      	ldr	r2, [pc, #512]	; (8005e88 <HAL_I2C_Init+0x278>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	bf94      	ite	ls
 8005c8c:	2301      	movls	r3, #1
 8005c8e:	2300      	movhi	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	e006      	b.n	8005ca2 <HAL_I2C_Init+0x92>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4a7d      	ldr	r2, [pc, #500]	; (8005e8c <HAL_I2C_Init+0x27c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	bf94      	ite	ls
 8005c9c:	2301      	movls	r3, #1
 8005c9e:	2300      	movhi	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e0e7      	b.n	8005e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4a78      	ldr	r2, [pc, #480]	; (8005e90 <HAL_I2C_Init+0x280>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	0c9b      	lsrs	r3, r3, #18
 8005cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4a6a      	ldr	r2, [pc, #424]	; (8005e84 <HAL_I2C_Init+0x274>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d802      	bhi.n	8005ce4 <HAL_I2C_Init+0xd4>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	e009      	b.n	8005cf8 <HAL_I2C_Init+0xe8>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	4a69      	ldr	r2, [pc, #420]	; (8005e94 <HAL_I2C_Init+0x284>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	099b      	lsrs	r3, r3, #6
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	495c      	ldr	r1, [pc, #368]	; (8005e84 <HAL_I2C_Init+0x274>)
 8005d14:	428b      	cmp	r3, r1
 8005d16:	d819      	bhi.n	8005d4c <HAL_I2C_Init+0x13c>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	1e59      	subs	r1, r3, #1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d26:	1c59      	adds	r1, r3, #1
 8005d28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d2c:	400b      	ands	r3, r1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_I2C_Init+0x138>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1e59      	subs	r1, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d40:	3301      	adds	r3, #1
 8005d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d46:	e051      	b.n	8005dec <HAL_I2C_Init+0x1dc>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	e04f      	b.n	8005dec <HAL_I2C_Init+0x1dc>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d111      	bne.n	8005d78 <HAL_I2C_Init+0x168>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	1e58      	subs	r0, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	440b      	add	r3, r1
 8005d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d66:	3301      	adds	r3, #1
 8005d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bf0c      	ite	eq
 8005d70:	2301      	moveq	r3, #1
 8005d72:	2300      	movne	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	e012      	b.n	8005d9e <HAL_I2C_Init+0x18e>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1e58      	subs	r0, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6859      	ldr	r1, [r3, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	0099      	lsls	r1, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d8e:	3301      	adds	r3, #1
 8005d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_I2C_Init+0x196>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e022      	b.n	8005dec <HAL_I2C_Init+0x1dc>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10e      	bne.n	8005dcc <HAL_I2C_Init+0x1bc>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1e58      	subs	r0, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6859      	ldr	r1, [r3, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	440b      	add	r3, r1
 8005dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dca:	e00f      	b.n	8005dec <HAL_I2C_Init+0x1dc>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	1e58      	subs	r0, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6859      	ldr	r1, [r3, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	0099      	lsls	r1, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8005de2:	3301      	adds	r3, #1
 8005de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	6809      	ldr	r1, [r1, #0]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69da      	ldr	r2, [r3, #28]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6911      	ldr	r1, [r2, #16]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	68d2      	ldr	r2, [r2, #12]
 8005e26:	4311      	orrs	r1, r2
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695a      	ldr	r2, [r3, #20]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	000186a0 	.word	0x000186a0
 8005e88:	001e847f 	.word	0x001e847f
 8005e8c:	003d08ff 	.word	0x003d08ff
 8005e90:	431bde83 	.word	0x431bde83
 8005e94:	10624dd3 	.word	0x10624dd3

08005e98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	607a      	str	r2, [r7, #4]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	817b      	strh	r3, [r7, #10]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005eac:	f7ff f810 	bl	8004ed0 <HAL_GetTick>
 8005eb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	f040 80e0 	bne.w	8006080 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2319      	movs	r3, #25
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	4970      	ldr	r1, [pc, #448]	; (800608c <HAL_I2C_Master_Transmit+0x1f4>)
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fc58 	bl	8006780 <I2C_WaitOnFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e0d3      	b.n	8006082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_I2C_Master_Transmit+0x50>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e0cc      	b.n	8006082 <HAL_I2C_Master_Transmit+0x1ea>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d007      	beq.n	8005f0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0201 	orr.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2221      	movs	r2, #33	; 0x21
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2210      	movs	r2, #16
 8005f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	893a      	ldrh	r2, [r7, #8]
 8005f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4a50      	ldr	r2, [pc, #320]	; (8006090 <HAL_I2C_Master_Transmit+0x1f8>)
 8005f4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f50:	8979      	ldrh	r1, [r7, #10]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	6a3a      	ldr	r2, [r7, #32]
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 fac2 	bl	80064e0 <I2C_MasterRequestWrite>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e08d      	b.n	8006082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f66:	2300      	movs	r3, #0
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005f7c:	e066      	b.n	800604c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	6a39      	ldr	r1, [r7, #32]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 fcd2 	bl	800692c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00d      	beq.n	8005faa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d107      	bne.n	8005fa6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e06b      	b.n	8006082 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	781a      	ldrb	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d11b      	bne.n	8006020 <HAL_I2C_Master_Transmit+0x188>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d017      	beq.n	8006020 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	6a39      	ldr	r1, [r7, #32]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 fcc2 	bl	80069ae <I2C_WaitOnBTFFlagUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	2b04      	cmp	r3, #4
 8006036:	d107      	bne.n	8006048 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006046:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e01a      	b.n	8006082 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006050:	2b00      	cmp	r3, #0
 8006052:	d194      	bne.n	8005f7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	e000      	b.n	8006082 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006080:	2302      	movs	r3, #2
  }
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	00100002 	.word	0x00100002
 8006090:	ffff0000 	.word	0xffff0000

08006094 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08c      	sub	sp, #48	; 0x30
 8006098:	af02      	add	r7, sp, #8
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	607a      	str	r2, [r7, #4]
 800609e:	461a      	mov	r2, r3
 80060a0:	460b      	mov	r3, r1
 80060a2:	817b      	strh	r3, [r7, #10]
 80060a4:	4613      	mov	r3, r2
 80060a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060a8:	f7fe ff12 	bl	8004ed0 <HAL_GetTick>
 80060ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	f040 820b 	bne.w	80064d2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	2319      	movs	r3, #25
 80060c2:	2201      	movs	r2, #1
 80060c4:	497c      	ldr	r1, [pc, #496]	; (80062b8 <HAL_I2C_Master_Receive+0x224>)
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fb5a 	bl	8006780 <I2C_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80060d2:	2302      	movs	r3, #2
 80060d4:	e1fe      	b.n	80064d4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_I2C_Master_Receive+0x50>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e1f7      	b.n	80064d4 <HAL_I2C_Master_Receive+0x440>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d007      	beq.n	800610a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0201 	orr.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006118:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2222      	movs	r2, #34	; 0x22
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2210      	movs	r2, #16
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	893a      	ldrh	r2, [r7, #8]
 800613a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4a5c      	ldr	r2, [pc, #368]	; (80062bc <HAL_I2C_Master_Receive+0x228>)
 800614a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800614c:	8979      	ldrh	r1, [r7, #10]
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 fa46 	bl	80065e4 <I2C_MasterRequestRead>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e1b8      	b.n	80064d4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006166:	2b00      	cmp	r3, #0
 8006168:	d113      	bne.n	8006192 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800616a:	2300      	movs	r3, #0
 800616c:	623b      	str	r3, [r7, #32]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	623b      	str	r3, [r7, #32]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	623b      	str	r3, [r7, #32]
 800617e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	e18c      	b.n	80064ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006196:	2b01      	cmp	r3, #1
 8006198:	d11b      	bne.n	80061d2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061aa:	2300      	movs	r3, #0
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	e16c      	b.n	80064ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d11b      	bne.n	8006212 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061fa:	2300      	movs	r3, #0
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	61bb      	str	r3, [r7, #24]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	e14c      	b.n	80064ac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006220:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006238:	e138      	b.n	80064ac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623e:	2b03      	cmp	r3, #3
 8006240:	f200 80f1 	bhi.w	8006426 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006248:	2b01      	cmp	r3, #1
 800624a:	d123      	bne.n	8006294 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800624c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fbed 	bl	8006a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e139      	b.n	80064d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006292:	e10b      	b.n	80064ac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006298:	2b02      	cmp	r3, #2
 800629a:	d14e      	bne.n	800633a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	2200      	movs	r2, #0
 80062a4:	4906      	ldr	r1, [pc, #24]	; (80062c0 <HAL_I2C_Master_Receive+0x22c>)
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fa6a 	bl	8006780 <I2C_WaitOnFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e10e      	b.n	80064d4 <HAL_I2C_Master_Receive+0x440>
 80062b6:	bf00      	nop
 80062b8:	00100002 	.word	0x00100002
 80062bc:	ffff0000 	.word	0xffff0000
 80062c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006322:	3b01      	subs	r3, #1
 8006324:	b29a      	uxth	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006338:	e0b8      	b.n	80064ac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	2200      	movs	r2, #0
 8006342:	4966      	ldr	r1, [pc, #408]	; (80064dc <HAL_I2C_Master_Receive+0x448>)
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fa1b 	bl	8006780 <I2C_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e0bf      	b.n	80064d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	2200      	movs	r2, #0
 800639e:	494f      	ldr	r1, [pc, #316]	; (80064dc <HAL_I2C_Master_Receive+0x448>)
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f9ed 	bl	8006780 <I2C_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e091      	b.n	80064d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006424:	e042      	b.n	80064ac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fb00 	bl	8006a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e04c      	b.n	80064d4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006456:	3b01      	subs	r3, #1
 8006458:	b29a      	uxth	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b04      	cmp	r3, #4
 8006478:	d118      	bne.n	80064ac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006496:	3b01      	subs	r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f47f aec2 	bne.w	800623a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e000      	b.n	80064d4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
  }
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3728      	adds	r7, #40	; 0x28
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	00010004 	.word	0x00010004

080064e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	460b      	mov	r3, r1
 80064ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d006      	beq.n	800650a <I2C_MasterRequestWrite+0x2a>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d003      	beq.n	800650a <I2C_MasterRequestWrite+0x2a>
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006508:	d108      	bne.n	800651c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	e00b      	b.n	8006534 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	2b12      	cmp	r3, #18
 8006522:	d107      	bne.n	8006534 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f91d 	bl	8006780 <I2C_WaitOnFlagUntilTimeout>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00d      	beq.n	8006568 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655a:	d103      	bne.n	8006564 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e035      	b.n	80065d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006570:	d108      	bne.n	8006584 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006572:	897b      	ldrh	r3, [r7, #10]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006580:	611a      	str	r2, [r3, #16]
 8006582:	e01b      	b.n	80065bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006584:	897b      	ldrh	r3, [r7, #10]
 8006586:	11db      	asrs	r3, r3, #7
 8006588:	b2db      	uxtb	r3, r3
 800658a:	f003 0306 	and.w	r3, r3, #6
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f063 030f 	orn	r3, r3, #15
 8006594:	b2da      	uxtb	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	490e      	ldr	r1, [pc, #56]	; (80065dc <I2C_MasterRequestWrite+0xfc>)
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f943 	bl	800682e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e010      	b.n	80065d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80065b2:	897b      	ldrh	r3, [r7, #10]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	4907      	ldr	r1, [pc, #28]	; (80065e0 <I2C_MasterRequestWrite+0x100>)
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f933 	bl	800682e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	00010008 	.word	0x00010008
 80065e0:	00010002 	.word	0x00010002

080065e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	607a      	str	r2, [r7, #4]
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	460b      	mov	r3, r1
 80065f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006608:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b08      	cmp	r3, #8
 800660e:	d006      	beq.n	800661e <I2C_MasterRequestRead+0x3a>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d003      	beq.n	800661e <I2C_MasterRequestRead+0x3a>
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800661c:	d108      	bne.n	8006630 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e00b      	b.n	8006648 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	2b11      	cmp	r3, #17
 8006636:	d107      	bne.n	8006648 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006646:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f893 	bl	8006780 <I2C_WaitOnFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00d      	beq.n	800667c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666e:	d103      	bne.n	8006678 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006676:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e079      	b.n	8006770 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006684:	d108      	bne.n	8006698 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006686:	897b      	ldrh	r3, [r7, #10]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	b2da      	uxtb	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	611a      	str	r2, [r3, #16]
 8006696:	e05f      	b.n	8006758 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006698:	897b      	ldrh	r3, [r7, #10]
 800669a:	11db      	asrs	r3, r3, #7
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0306 	and.w	r3, r3, #6
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f063 030f 	orn	r3, r3, #15
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	4930      	ldr	r1, [pc, #192]	; (8006778 <I2C_MasterRequestRead+0x194>)
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f8b9 	bl	800682e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e054      	b.n	8006770 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066c6:	897b      	ldrh	r3, [r7, #10]
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	4929      	ldr	r1, [pc, #164]	; (800677c <I2C_MasterRequestRead+0x198>)
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 f8a9 	bl	800682e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e044      	b.n	8006770 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066e6:	2300      	movs	r3, #0
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800670a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 f831 	bl	8006780 <I2C_WaitOnFlagUntilTimeout>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00d      	beq.n	8006740 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006732:	d103      	bne.n	800673c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800673a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e017      	b.n	8006770 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006740:	897b      	ldrh	r3, [r7, #10]
 8006742:	11db      	asrs	r3, r3, #7
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 0306 	and.w	r3, r3, #6
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f063 030e 	orn	r3, r3, #14
 8006750:	b2da      	uxtb	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	4907      	ldr	r1, [pc, #28]	; (800677c <I2C_MasterRequestRead+0x198>)
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f865 	bl	800682e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	00010008 	.word	0x00010008
 800677c:	00010002 	.word	0x00010002

08006780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006790:	e025      	b.n	80067de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006798:	d021      	beq.n	80067de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679a:	f7fe fb99 	bl	8004ed0 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d302      	bcc.n	80067b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d116      	bne.n	80067de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	f043 0220 	orr.w	r2, r3, #32
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e023      	b.n	8006826 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	0c1b      	lsrs	r3, r3, #16
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d10d      	bne.n	8006804 <I2C_WaitOnFlagUntilTimeout+0x84>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	43da      	mvns	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4013      	ands	r3, r2
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bf0c      	ite	eq
 80067fa:	2301      	moveq	r3, #1
 80067fc:	2300      	movne	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	461a      	mov	r2, r3
 8006802:	e00c      	b.n	800681e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	43da      	mvns	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4013      	ands	r3, r2
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	bf0c      	ite	eq
 8006816:	2301      	moveq	r3, #1
 8006818:	2300      	movne	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	429a      	cmp	r2, r3
 8006822:	d0b6      	beq.n	8006792 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	607a      	str	r2, [r7, #4]
 800683a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800683c:	e051      	b.n	80068e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684c:	d123      	bne.n	8006896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800685c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006866:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f043 0204 	orr.w	r2, r3, #4
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e046      	b.n	8006924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d021      	beq.n	80068e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689e:	f7fe fb17 	bl	8004ed0 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d302      	bcc.n	80068b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d116      	bne.n	80068e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f043 0220 	orr.w	r2, r3, #32
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e020      	b.n	8006924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	0c1b      	lsrs	r3, r3, #16
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d10c      	bne.n	8006906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	43da      	mvns	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4013      	ands	r3, r2
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bf14      	ite	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	2300      	moveq	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e00b      	b.n	800691e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	43da      	mvns	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	4013      	ands	r3, r2
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	bf14      	ite	ne
 8006918:	2301      	movne	r3, #1
 800691a:	2300      	moveq	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d18d      	bne.n	800683e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006938:	e02d      	b.n	8006996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f8ce 	bl	8006adc <I2C_IsAcknowledgeFailed>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e02d      	b.n	80069a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d021      	beq.n	8006996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006952:	f7fe fabd 	bl	8004ed0 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	429a      	cmp	r2, r3
 8006960:	d302      	bcc.n	8006968 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d116      	bne.n	8006996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2220      	movs	r2, #32
 8006972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	f043 0220 	orr.w	r2, r3, #32
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e007      	b.n	80069a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a0:	2b80      	cmp	r3, #128	; 0x80
 80069a2:	d1ca      	bne.n	800693a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069ba:	e02d      	b.n	8006a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f88d 	bl	8006adc <I2C_IsAcknowledgeFailed>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e02d      	b.n	8006a28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d2:	d021      	beq.n	8006a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d4:	f7fe fa7c 	bl	8004ed0 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d302      	bcc.n	80069ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d116      	bne.n	8006a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e007      	b.n	8006a28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d1ca      	bne.n	80069bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a3c:	e042      	b.n	8006ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b10      	cmp	r3, #16
 8006a4a:	d119      	bne.n	8006a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0210 	mvn.w	r2, #16
 8006a54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e029      	b.n	8006ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a80:	f7fe fa26 	bl	8004ed0 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d302      	bcc.n	8006a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d116      	bne.n	8006ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	f043 0220 	orr.w	r2, r3, #32
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e007      	b.n	8006ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ace:	2b40      	cmp	r3, #64	; 0x40
 8006ad0:	d1b5      	bne.n	8006a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af2:	d11b      	bne.n	8006b2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006afc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	f043 0204 	orr.w	r2, r3, #4
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr

08006b38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3a:	b08b      	sub	sp, #44	; 0x2c
 8006b3c:	af06      	add	r7, sp, #24
 8006b3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e0d0      	b.n	8006cec <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f008 f85c 	bl	800ec1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2203      	movs	r2, #3
 8006b68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f003 fd7d 	bl	800a670 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b76:	2300      	movs	r3, #0
 8006b78:	73fb      	strb	r3, [r7, #15]
 8006b7a:	e04c      	b.n	8006c16 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	440b      	add	r3, r1
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	2201      	movs	r2, #1
 8006b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	6879      	ldr	r1, [r7, #4]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	440b      	add	r3, r1
 8006ba2:	7bfa      	ldrb	r2, [r7, #15]
 8006ba4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006ba6:	7bfa      	ldrb	r2, [r7, #15]
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	b298      	uxth	r0, r3
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3336      	adds	r3, #54	; 0x36
 8006bba:	4602      	mov	r2, r0
 8006bbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	440b      	add	r3, r1
 8006bce:	3303      	adds	r3, #3
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006bd4:	7bfa      	ldrb	r2, [r7, #15]
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	440b      	add	r3, r1
 8006be2:	3338      	adds	r3, #56	; 0x38
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006be8:	7bfa      	ldrb	r2, [r7, #15]
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	440b      	add	r3, r1
 8006bf6:	333c      	adds	r3, #60	; 0x3c
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006bfc:	7bfa      	ldrb	r2, [r7, #15]
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	440b      	add	r3, r1
 8006c0a:	3340      	adds	r3, #64	; 0x40
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	3301      	adds	r3, #1
 8006c14:	73fb      	strb	r3, [r7, #15]
 8006c16:	7bfa      	ldrb	r2, [r7, #15]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d3ad      	bcc.n	8006b7c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]
 8006c24:	e044      	b.n	8006cb0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c26:	7bfa      	ldrb	r2, [r7, #15]
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	440b      	add	r3, r1
 8006c34:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c3c:	7bfa      	ldrb	r2, [r7, #15]
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	4613      	mov	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	440b      	add	r3, r1
 8006c4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c4e:	7bfa      	ldrb	r2, [r7, #15]
 8006c50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c52:	7bfa      	ldrb	r2, [r7, #15]
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	00db      	lsls	r3, r3, #3
 8006c5e:	440b      	add	r3, r1
 8006c60:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c68:	7bfa      	ldrb	r2, [r7, #15]
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	440b      	add	r3, r1
 8006c76:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c7e:	7bfa      	ldrb	r2, [r7, #15]
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	440b      	add	r3, r1
 8006c8c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006c94:	7bfa      	ldrb	r2, [r7, #15]
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	440b      	add	r3, r1
 8006ca2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	3301      	adds	r3, #1
 8006cae:	73fb      	strb	r3, [r7, #15]
 8006cb0:	7bfa      	ldrb	r2, [r7, #15]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d3b5      	bcc.n	8006c26 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	687e      	ldr	r6, [r7, #4]
 8006cc2:	466d      	mov	r5, sp
 8006cc4:	f106 0410 	add.w	r4, r6, #16
 8006cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	1d33      	adds	r3, r6, #4
 8006cd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cd4:	6838      	ldr	r0, [r7, #0]
 8006cd6:	f003 fce5 	bl	800a6a4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cf4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <HAL_PCD_Start+0x16>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e016      	b.n	8006d38 <HAL_PCD_Start+0x44>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f003 fc94 	bl	800a644 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f007 ff5e 	bl	800ebe0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f006 f979 	bl	800d020 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f006 f971 	bl	800d034 <USB_ReadInterrupts>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d5c:	d102      	bne.n	8006d64 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 faf5 	bl	800734e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f006 f963 	bl	800d034 <USB_ReadInterrupts>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d78:	d112      	bne.n	8006da0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d8c:	b292      	uxth	r2, r2
 8006d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f007 ffbd 	bl	800ed12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006d98:	2100      	movs	r1, #0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f8c7 	bl	8006f2e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f006 f945 	bl	800d034 <USB_ReadInterrupts>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006db4:	d10b      	bne.n	8006dce <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006dc8:	b292      	uxth	r2, r2
 8006dca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f006 f92e 	bl	800d034 <USB_ReadInterrupts>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de2:	d10b      	bne.n	8006dfc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006df6:	b292      	uxth	r2, r2
 8006df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f006 f917 	bl	800d034 <USB_ReadInterrupts>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e10:	d126      	bne.n	8006e60 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0204 	bic.w	r2, r2, #4
 8006e24:	b292      	uxth	r2, r2
 8006e26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0208 	bic.w	r2, r2, #8
 8006e3c:	b292      	uxth	r2, r2
 8006e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f007 ff9e 	bl	800ed84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e5a:	b292      	uxth	r2, r2
 8006e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f006 f8e5 	bl	800d034 <USB_ReadInterrupts>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e74:	d126      	bne.n	8006ec4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0208 	orr.w	r2, r2, #8
 8006e88:	b292      	uxth	r2, r2
 8006e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ea0:	b292      	uxth	r2, r2
 8006ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f042 0204 	orr.w	r2, r2, #4
 8006eb8:	b292      	uxth	r2, r2
 8006eba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f007 ff46 	bl	800ed50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f006 f8b3 	bl	800d034 <USB_ReadInterrupts>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed8:	d10e      	bne.n	8006ef8 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006eec:	b292      	uxth	r2, r2
 8006eee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f007 feff 	bl	800ecf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f006 f899 	bl	800d034 <USB_ReadInterrupts>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0c:	d10b      	bne.n	8006f26 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f20:	b292      	uxth	r2, r2
 8006f22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_PCD_SetAddress+0x1a>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e013      	b.n	8006f70 <HAL_PCD_SetAddress+0x42>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	78fa      	ldrb	r2, [r7, #3]
 8006f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	4611      	mov	r1, r2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f006 f84a 	bl	800cffa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	4608      	mov	r0, r1
 8006f82:	4611      	mov	r1, r2
 8006f84:	461a      	mov	r2, r3
 8006f86:	4603      	mov	r3, r0
 8006f88:	70fb      	strb	r3, [r7, #3]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	803b      	strh	r3, [r7, #0]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	da0e      	bge.n	8006fbc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	705a      	strb	r2, [r3, #1]
 8006fba:	e00e      	b.n	8006fda <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	f003 0207 	and.w	r2, r3, #7
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006fda:	78fb      	ldrb	r3, [r7, #3]
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006fe6:	883a      	ldrh	r2, [r7, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	78ba      	ldrb	r2, [r7, #2]
 8006ff0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007004:	78bb      	ldrb	r3, [r7, #2]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d102      	bne.n	8007010 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <HAL_PCD_EP_Open+0xa6>
 800701a:	2302      	movs	r3, #2
 800701c:	e00e      	b.n	800703c <HAL_PCD_EP_Open+0xc4>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68f9      	ldr	r1, [r7, #12]
 800702c:	4618      	mov	r0, r3
 800702e:	f003 fb59 	bl	800a6e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800703a:	7afb      	ldrb	r3, [r7, #11]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007054:	2b00      	cmp	r3, #0
 8007056:	da0e      	bge.n	8007076 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	4413      	add	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	705a      	strb	r2, [r3, #1]
 8007074:	e00e      	b.n	8007094 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007076:	78fb      	ldrb	r3, [r7, #3]
 8007078:	f003 0207 	and.w	r2, r3, #7
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	4413      	add	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007094:	78fb      	ldrb	r3, [r7, #3]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	b2da      	uxtb	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d101      	bne.n	80070ae <HAL_PCD_EP_Close+0x6a>
 80070aa:	2302      	movs	r3, #2
 80070ac:	e00e      	b.n	80070cc <HAL_PCD_EP_Close+0x88>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	4618      	mov	r0, r3
 80070be:	f003 fe7b 	bl	800adb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	607a      	str	r2, [r7, #4]
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	460b      	mov	r3, r1
 80070e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070e4:	7afb      	ldrb	r3, [r7, #11]
 80070e6:	f003 0207 	and.w	r2, r3, #7
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	00db      	lsls	r3, r3, #3
 80070f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2200      	movs	r2, #0
 800710c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2200      	movs	r2, #0
 8007112:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	b2da      	uxtb	r2, r3
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007120:	7afb      	ldrb	r3, [r7, #11]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6979      	ldr	r1, [r7, #20]
 8007130:	4618      	mov	r0, r3
 8007132:	f004 f82d 	bl	800b190 <USB_EPStartXfer>
 8007136:	e005      	b.n	8007144 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6979      	ldr	r1, [r7, #20]
 800713e:	4618      	mov	r0, r3
 8007140:	f004 f826 	bl	800b190 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	f003 0207 	and.w	r2, r3, #7
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	440b      	add	r3, r1
 800716c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007170:	681b      	ldr	r3, [r3, #0]
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	bc80      	pop	{r7}
 800717a:	4770      	bx	lr

0800717c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	460b      	mov	r3, r1
 800718a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2200      	movs	r2, #0
 80071c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2201      	movs	r2, #1
 80071c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6979      	ldr	r1, [r7, #20]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f003 ffd3 	bl	800b190 <USB_EPStartXfer>
 80071ea:	e005      	b.n	80071f8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6979      	ldr	r1, [r7, #20]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f003 ffcc 	bl	800b190 <USB_EPStartXfer>
  }

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	460b      	mov	r3, r1
 800720c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800720e:	78fb      	ldrb	r3, [r7, #3]
 8007210:	f003 0207 	and.w	r2, r3, #7
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	429a      	cmp	r2, r3
 800721a:	d901      	bls.n	8007220 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e03e      	b.n	800729e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007224:	2b00      	cmp	r3, #0
 8007226:	da0e      	bge.n	8007246 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	4413      	add	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	705a      	strb	r2, [r3, #1]
 8007244:	e00c      	b.n	8007260 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007246:	78fa      	ldrb	r2, [r7, #3]
 8007248:	4613      	mov	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	4413      	add	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	b2da      	uxtb	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_PCD_EP_SetStall+0x7e>
 800727c:	2302      	movs	r3, #2
 800727e:	e00e      	b.n	800729e <HAL_PCD_EP_SetStall+0x9c>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68f9      	ldr	r1, [r7, #12]
 800728e:	4618      	mov	r0, r3
 8007290:	f005 fdb6 	bl	800ce00 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	f003 020f 	and.w	r2, r3, #15
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d901      	bls.n	80072c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e040      	b.n	8007346 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	da0e      	bge.n	80072ea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	4413      	add	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	705a      	strb	r2, [r3, #1]
 80072e8:	e00e      	b.n	8007308 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	f003 0207 	and.w	r2, r3, #7
 80072f0:	4613      	mov	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	4413      	add	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	b2da      	uxtb	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_PCD_EP_ClrStall+0x82>
 8007324:	2302      	movs	r3, #2
 8007326:	e00e      	b.n	8007346 <HAL_PCD_EP_ClrStall+0xa0>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68f9      	ldr	r1, [r7, #12]
 8007336:	4618      	mov	r0, r3
 8007338:	f005 fdb2 	bl	800cea0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b08e      	sub	sp, #56	; 0x38
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007356:	e2ec      	b.n	8007932 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007360:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007362:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007364:	b2db      	uxtb	r3, r3
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800736e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007372:	2b00      	cmp	r3, #0
 8007374:	f040 8161 	bne.w	800763a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007378:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800737a:	f003 0310 	and.w	r3, r3, #16
 800737e:	2b00      	cmp	r3, #0
 8007380:	d152      	bne.n	8007428 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	b29b      	uxth	r3, r3
 800738a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800738e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007392:	81fb      	strh	r3, [r7, #14]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	89fb      	ldrh	r3, [r7, #14]
 800739a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800739e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3328      	adds	r3, #40	; 0x28
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	4413      	add	r3, r2
 80073c0:	3302      	adds	r3, #2
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	695a      	ldr	r2, [r3, #20]
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	441a      	add	r2, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80073e6:	2100      	movs	r1, #0
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f007 fc6a 	bl	800ecc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 829b 	beq.w	8007932 <PCD_EP_ISR_Handler+0x5e4>
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 8296 	bne.w	8007932 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007412:	b2da      	uxtb	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	b292      	uxth	r2, r2
 800741a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007426:	e284      	b.n	8007932 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007438:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800743a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800743e:	2b00      	cmp	r3, #0
 8007440:	d034      	beq.n	80074ac <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800744a:	b29b      	uxth	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	4413      	add	r3, r2
 8007456:	3306      	adds	r3, #6
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6812      	ldr	r2, [r2, #0]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007480:	b29b      	uxth	r3, r3
 8007482:	f005 fe2b 	bl	800d0dc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29a      	uxth	r2, r3
 800748e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007492:	4013      	ands	r3, r2
 8007494:	823b      	strh	r3, [r7, #16]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	8a3a      	ldrh	r2, [r7, #16]
 800749c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074a0:	b292      	uxth	r2, r2
 80074a2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f007 fbdf 	bl	800ec68 <HAL_PCD_SetupStageCallback>
 80074aa:	e242      	b.n	8007932 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80074ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f280 823e 	bge.w	8007932 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	b29a      	uxth	r2, r3
 80074be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80074c2:	4013      	ands	r3, r2
 80074c4:	83bb      	strh	r3, [r7, #28]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	8bba      	ldrh	r2, [r7, #28]
 80074cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074d0:	b292      	uxth	r2, r2
 80074d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074dc:	b29b      	uxth	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	4413      	add	r3, r2
 80074e8:	3306      	adds	r3, #6
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6812      	ldr	r2, [r2, #0]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d019      	beq.n	800753c <PCD_EP_ISR_Handler+0x1ee>
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d015      	beq.n	800753c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	6959      	ldr	r1, [r3, #20]
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007520:	b29b      	uxth	r3, r3
 8007522:	f005 fddb 	bl	800d0dc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	695a      	ldr	r2, [r3, #20]
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	441a      	add	r2, r3
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007534:	2100      	movs	r1, #0
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f007 fba8 	bl	800ec8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007548:	2b00      	cmp	r3, #0
 800754a:	f040 81f2 	bne.w	8007932 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755c:	b29b      	uxth	r3, r3
 800755e:	461a      	mov	r2, r3
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	4413      	add	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d112      	bne.n	800759c <PCD_EP_ISR_Handler+0x24e>
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007580:	b29a      	uxth	r2, r3
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007594:	b29a      	uxth	r2, r3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	e02f      	b.n	80075fc <PCD_EP_ISR_Handler+0x2ae>
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b3e      	cmp	r3, #62	; 0x3e
 80075a2:	d813      	bhi.n	80075cc <PCD_EP_ISR_Handler+0x27e>
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	085b      	lsrs	r3, r3, #1
 80075aa:	633b      	str	r3, [r7, #48]	; 0x30
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <PCD_EP_ISR_Handler+0x270>
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	3301      	adds	r3, #1
 80075bc:	633b      	str	r3, [r7, #48]	; 0x30
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	029b      	lsls	r3, r3, #10
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	801a      	strh	r2, [r3, #0]
 80075ca:	e017      	b.n	80075fc <PCD_EP_ISR_Handler+0x2ae>
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	095b      	lsrs	r3, r3, #5
 80075d2:	633b      	str	r3, [r7, #48]	; 0x30
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f003 031f 	and.w	r3, r3, #31
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d102      	bne.n	80075e6 <PCD_EP_ISR_Handler+0x298>
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	3b01      	subs	r3, #1
 80075e4:	633b      	str	r3, [r7, #48]	; 0x30
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	029b      	lsls	r3, r3, #10
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760c:	827b      	strh	r3, [r7, #18]
 800760e:	8a7b      	ldrh	r3, [r7, #18]
 8007610:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007614:	827b      	strh	r3, [r7, #18]
 8007616:	8a7b      	ldrh	r3, [r7, #18]
 8007618:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800761c:	827b      	strh	r3, [r7, #18]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	8a7b      	ldrh	r3, [r7, #18]
 8007624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800762c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007634:	b29b      	uxth	r3, r3
 8007636:	8013      	strh	r3, [r2, #0]
 8007638:	e17b      	b.n	8007932 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800764c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007650:	2b00      	cmp	r3, #0
 8007652:	f280 80ea 	bge.w	800782a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29a      	uxth	r2, r3
 8007668:	f640 738f 	movw	r3, #3983	; 0xf8f
 800766c:	4013      	ands	r3, r2
 800766e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
 8007676:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007680:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007684:	b292      	uxth	r2, r2
 8007686:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007688:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	4413      	add	r3, r2
 800769c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	7b1b      	ldrb	r3, [r3, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d122      	bne.n	80076ec <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	4413      	add	r3, r2
 80076ba:	3306      	adds	r3, #6
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ce:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80076d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 8087 	beq.w	80077e6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	6959      	ldr	r1, [r3, #20]
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	88da      	ldrh	r2, [r3, #6]
 80076e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80076e6:	f005 fcf9 	bl	800d0dc <USB_ReadPMA>
 80076ea:	e07c      	b.n	80077e6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	78db      	ldrb	r3, [r3, #3]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d108      	bne.n	8007706 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80076f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80076f6:	461a      	mov	r2, r3
 80076f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f927 	bl	800794e <HAL_PCD_EP_DB_Receive>
 8007700:	4603      	mov	r3, r0
 8007702:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007704:	e06f      	b.n	80077e6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	b29b      	uxth	r3, r3
 8007718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800771c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007720:	847b      	strh	r3, [r7, #34]	; 0x22
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	441a      	add	r2, r3
 8007730:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800773a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800773e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007742:	b29b      	uxth	r3, r3
 8007744:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	b29b      	uxth	r3, r3
 8007758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d021      	beq.n	80077a4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007768:	b29b      	uxth	r3, r3
 800776a:	461a      	mov	r2, r3
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	4413      	add	r3, r2
 8007774:	3302      	adds	r3, #2
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6812      	ldr	r2, [r2, #0]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007788:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800778a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800778c:	2b00      	cmp	r3, #0
 800778e:	d02a      	beq.n	80077e6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	6959      	ldr	r1, [r3, #20]
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	891a      	ldrh	r2, [r3, #8]
 800779c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800779e:	f005 fc9d 	bl	800d0dc <USB_ReadPMA>
 80077a2:	e020      	b.n	80077e6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	461a      	mov	r2, r3
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	00db      	lsls	r3, r3, #3
 80077b6:	4413      	add	r3, r2
 80077b8:	3306      	adds	r3, #6
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077cc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80077ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	6959      	ldr	r1, [r3, #20]
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	895a      	ldrh	r2, [r3, #10]
 80077e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80077e2:	f005 fc7b 	bl	800d0dc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	69da      	ldr	r2, [r3, #28]
 80077ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80077ec:	441a      	add	r2, r3
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	695a      	ldr	r2, [r3, #20]
 80077f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80077f8:	441a      	add	r2, r3
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d004      	beq.n	8007810 <PCD_EP_ISR_Handler+0x4c2>
 8007806:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	429a      	cmp	r2, r3
 800780e:	d206      	bcs.n	800781e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f007 fa38 	bl	800ec8c <HAL_PCD_DataOutStageCallback>
 800781c:	e005      	b.n	800782a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007824:	4618      	mov	r0, r3
 8007826:	f003 fcb3 	bl	800b190 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800782a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800782c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007830:	2b00      	cmp	r3, #0
 8007832:	d07e      	beq.n	8007932 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8007834:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	4413      	add	r3, r2
 8007846:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	b29b      	uxth	r3, r3
 800785a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800785e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007862:	843b      	strh	r3, [r7, #32]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	441a      	add	r2, r3
 8007872:	8c3b      	ldrh	r3, [r7, #32]
 8007874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800787c:	b29b      	uxth	r3, r3
 800787e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	78db      	ldrb	r3, [r3, #3]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d00c      	beq.n	80078a2 <PCD_EP_ISR_Handler+0x554>
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	78db      	ldrb	r3, [r3, #3]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d008      	beq.n	80078a2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007894:	2b02      	cmp	r3, #2
 8007896:	d146      	bne.n	8007926 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007898:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800789a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d141      	bne.n	8007926 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	461a      	mov	r2, r3
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	4413      	add	r3, r2
 80078b6:	3302      	adds	r3, #2
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6812      	ldr	r2, [r2, #0]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ca:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	699a      	ldr	r2, [r3, #24]
 80078d0:	8bfb      	ldrh	r3, [r7, #30]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d906      	bls.n	80078e4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	699a      	ldr	r2, [r3, #24]
 80078da:	8bfb      	ldrh	r3, [r7, #30]
 80078dc:	1ad2      	subs	r2, r2, r3
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	619a      	str	r2, [r3, #24]
 80078e2:	e002      	b.n	80078ea <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	2200      	movs	r2, #0
 80078e8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f007 f9e2 	bl	800ecc2 <HAL_PCD_DataInStageCallback>
 80078fe:	e018      	b.n	8007932 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	8bfb      	ldrh	r3, [r7, #30]
 8007906:	441a      	add	r2, r3
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	69da      	ldr	r2, [r3, #28]
 8007910:	8bfb      	ldrh	r3, [r7, #30]
 8007912:	441a      	add	r2, r3
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800791e:	4618      	mov	r0, r3
 8007920:	f003 fc36 	bl	800b190 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8007924:	e005      	b.n	8007932 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007926:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007928:	461a      	mov	r2, r3
 800792a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f91b 	bl	8007b68 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800793a:	b29b      	uxth	r3, r3
 800793c:	b21b      	sxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	f6ff ad0a 	blt.w	8007358 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3738      	adds	r7, #56	; 0x38
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b088      	sub	sp, #32
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	4613      	mov	r3, r2
 800795a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d07e      	beq.n	8007a64 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800796e:	b29b      	uxth	r3, r3
 8007970:	461a      	mov	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	4413      	add	r3, r2
 800797a:	3302      	adds	r3, #2
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	6812      	ldr	r2, [r2, #0]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800798e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	8b7b      	ldrh	r3, [r7, #26]
 8007996:	429a      	cmp	r2, r3
 8007998:	d306      	bcc.n	80079a8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	699a      	ldr	r2, [r3, #24]
 800799e:	8b7b      	ldrh	r3, [r7, #26]
 80079a0:	1ad2      	subs	r2, r2, r3
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	619a      	str	r2, [r3, #24]
 80079a6:	e002      	b.n	80079ae <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2200      	movs	r2, #0
 80079ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d123      	bne.n	80079fe <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d0:	833b      	strh	r3, [r7, #24]
 80079d2:	8b3b      	ldrh	r3, [r7, #24]
 80079d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079d8:	833b      	strh	r3, [r7, #24]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	8b3b      	ldrh	r3, [r7, #24]
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01f      	beq.n	8007a48 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a22:	82fb      	strh	r3, [r7, #22]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	441a      	add	r2, r3
 8007a32:	8afb      	ldrh	r3, [r7, #22]
 8007a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007a48:	8b7b      	ldrh	r3, [r7, #26]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 8087 	beq.w	8007b5e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6818      	ldr	r0, [r3, #0]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	6959      	ldr	r1, [r3, #20]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	891a      	ldrh	r2, [r3, #8]
 8007a5c:	8b7b      	ldrh	r3, [r7, #26]
 8007a5e:	f005 fb3d 	bl	800d0dc <USB_ReadPMA>
 8007a62:	e07c      	b.n	8007b5e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	461a      	mov	r2, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	4413      	add	r3, r2
 8007a78:	3306      	adds	r3, #6
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a8c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	8b7b      	ldrh	r3, [r7, #26]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d306      	bcc.n	8007aa6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	699a      	ldr	r2, [r3, #24]
 8007a9c:	8b7b      	ldrh	r3, [r7, #26]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	619a      	str	r2, [r3, #24]
 8007aa4:	e002      	b.n	8007aac <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d123      	bne.n	8007afc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ace:	83fb      	strh	r3, [r7, #30]
 8007ad0:	8bfb      	ldrh	r3, [r7, #30]
 8007ad2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ad6:	83fb      	strh	r3, [r7, #30]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	441a      	add	r2, r3
 8007ae6:	8bfb      	ldrh	r3, [r7, #30]
 8007ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007afc:	88fb      	ldrh	r3, [r7, #6]
 8007afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d11f      	bne.n	8007b46 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b20:	83bb      	strh	r3, [r7, #28]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	441a      	add	r2, r3
 8007b30:	8bbb      	ldrh	r3, [r7, #28]
 8007b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007b46:	8b7b      	ldrh	r3, [r7, #26]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d008      	beq.n	8007b5e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	6959      	ldr	r1, [r3, #20]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	895a      	ldrh	r2, [r3, #10]
 8007b58:	8b7b      	ldrh	r3, [r7, #26]
 8007b5a:	f005 fabf 	bl	800d0dc <USB_ReadPMA>
    }
  }

  return count;
 8007b5e:	8b7b      	ldrh	r3, [r7, #26]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3720      	adds	r7, #32
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b0a2      	sub	sp, #136	; 0x88
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	4613      	mov	r3, r2
 8007b74:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007b76:	88fb      	ldrh	r3, [r7, #6]
 8007b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 81c7 	beq.w	8007f10 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	4413      	add	r3, r2
 8007b96:	3302      	adds	r3, #2
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	6812      	ldr	r2, [r2, #0]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007baa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	699a      	ldr	r2, [r3, #24]
 8007bb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d907      	bls.n	8007bca <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bc2:	1ad2      	subs	r2, r2, r3
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	619a      	str	r2, [r3, #24]
 8007bc8:	e002      	b.n	8007bd0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f040 80b9 	bne.w	8007d4c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	785b      	ldrb	r3, [r3, #1]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d126      	bne.n	8007c30 <HAL_PCD_EP_DB_Transmit+0xc8>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	4413      	add	r3, r2
 8007bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	011a      	lsls	r2, r3, #4
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	4413      	add	r3, r2
 8007c04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	801a      	strh	r2, [r3, #0]
 8007c2e:	e01a      	b.n	8007c66 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	785b      	ldrb	r3, [r3, #1]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d116      	bne.n	8007c66 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	4413      	add	r3, r2
 8007c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	011a      	lsls	r2, r3, #4
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	4413      	add	r3, r2
 8007c5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	2200      	movs	r2, #0
 8007c64:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	623b      	str	r3, [r7, #32]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	785b      	ldrb	r3, [r3, #1]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d126      	bne.n	8007cc2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	61bb      	str	r3, [r7, #24]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	4413      	add	r3, r2
 8007c8a:	61bb      	str	r3, [r7, #24]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	011a      	lsls	r2, r3, #4
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	4413      	add	r3, r2
 8007c96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	801a      	strh	r2, [r3, #0]
 8007cc0:	e017      	b.n	8007cf2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	785b      	ldrb	r3, [r3, #1]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d113      	bne.n	8007cf2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	4413      	add	r3, r2
 8007cda:	623b      	str	r3, [r7, #32]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	011a      	lsls	r2, r3, #4
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cea:	61fb      	str	r3, [r7, #28]
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f006 ffe2 	bl	800ecc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007cfe:	88fb      	ldrh	r3, [r7, #6]
 8007d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 82d4 	beq.w	80082b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d24:	827b      	strh	r3, [r7, #18]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	441a      	add	r2, r3
 8007d34:	8a7b      	ldrh	r3, [r7, #18]
 8007d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	8013      	strh	r3, [r2, #0]
 8007d4a:	e2b2      	b.n	80082b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d021      	beq.n	8007d9a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d70:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	441a      	add	r2, r3
 8007d82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	f040 8286 	bne.w	80082b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	695a      	ldr	r2, [r3, #20]
 8007daa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007dae:	441a      	add	r2, r3
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	69da      	ldr	r2, [r3, #28]
 8007db8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007dbc:	441a      	add	r2, r3
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	6a1a      	ldr	r2, [r3, #32]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d309      	bcc.n	8007de2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6a1a      	ldr	r2, [r3, #32]
 8007dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dda:	1ad2      	subs	r2, r2, r3
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	621a      	str	r2, [r3, #32]
 8007de0:	e015      	b.n	8007e0e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d107      	bne.n	8007dfa <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8007dea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007dee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007df8:	e009      	b.n	8007e0e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d155      	bne.n	8007ec2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	4413      	add	r3, r2
 8007e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	011a      	lsls	r2, r3, #4
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	4413      	add	r3, r2
 8007e38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d112      	bne.n	8007e6a <HAL_PCD_EP_DB_Transmit+0x302>
 8007e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e52:	801a      	strh	r2, [r3, #0]
 8007e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e66:	801a      	strh	r2, [r3, #0]
 8007e68:	e047      	b.n	8007efa <HAL_PCD_EP_DB_Transmit+0x392>
 8007e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e6c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e6e:	d811      	bhi.n	8007e94 <HAL_PCD_EP_DB_Transmit+0x32c>
 8007e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e72:	085b      	lsrs	r3, r3, #1
 8007e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <HAL_PCD_EP_DB_Transmit+0x31e>
 8007e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e82:	3301      	adds	r3, #1
 8007e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	029b      	lsls	r3, r3, #10
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e90:	801a      	strh	r2, [r3, #0]
 8007e92:	e032      	b.n	8007efa <HAL_PCD_EP_DB_Transmit+0x392>
 8007e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e96:	095b      	lsrs	r3, r3, #5
 8007e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e9c:	f003 031f 	and.w	r3, r3, #31
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d102      	bne.n	8007eaa <HAL_PCD_EP_DB_Transmit+0x342>
 8007ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	029b      	lsls	r3, r3, #10
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	801a      	strh	r2, [r3, #0]
 8007ec0:	e01b      	b.n	8007efa <HAL_PCD_EP_DB_Transmit+0x392>
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d117      	bne.n	8007efa <HAL_PCD_EP_DB_Transmit+0x392>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	643b      	str	r3, [r7, #64]	; 0x40
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ede:	4413      	add	r3, r2
 8007ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	011a      	lsls	r2, r3, #4
 8007ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eea:	4413      	add	r3, r2
 8007eec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	6959      	ldr	r1, [r3, #20]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	891a      	ldrh	r2, [r3, #8]
 8007f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f005 f8a2 	bl	800d052 <USB_WritePMA>
 8007f0e:	e1d0      	b.n	80082b2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	4413      	add	r3, r2
 8007f24:	3306      	adds	r3, #6
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	699a      	ldr	r2, [r3, #24]
 8007f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d307      	bcc.n	8007f58 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	699a      	ldr	r2, [r3, #24]
 8007f4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f50:	1ad2      	subs	r2, r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	619a      	str	r2, [r3, #24]
 8007f56:	e002      	b.n	8007f5e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f040 80c4 	bne.w	80080f0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d126      	bne.n	8007fbe <HAL_PCD_EP_DB_Transmit+0x456>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	461a      	mov	r2, r3
 8007f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f84:	4413      	add	r3, r2
 8007f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	011a      	lsls	r2, r3, #4
 8007f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f90:	4413      	add	r3, r2
 8007f92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fa6:	801a      	strh	r2, [r3, #0]
 8007fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fba:	801a      	strh	r2, [r3, #0]
 8007fbc:	e01a      	b.n	8007ff4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	785b      	ldrb	r3, [r3, #1]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d116      	bne.n	8007ff4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	677b      	str	r3, [r7, #116]	; 0x74
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fda:	4413      	add	r3, r2
 8007fdc:	677b      	str	r3, [r7, #116]	; 0x74
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	011a      	lsls	r2, r3, #4
 8007fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fec:	673b      	str	r3, [r7, #112]	; 0x70
 8007fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d12f      	bne.n	8008062 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008012:	b29b      	uxth	r3, r3
 8008014:	461a      	mov	r2, r3
 8008016:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800801a:	4413      	add	r3, r2
 800801c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	011a      	lsls	r2, r3, #4
 8008026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800802a:	4413      	add	r3, r2
 800802c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008040:	b29a      	uxth	r2, r3
 8008042:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008046:	801a      	strh	r2, [r3, #0]
 8008048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008058:	b29a      	uxth	r2, r3
 800805a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800805e:	801a      	strh	r2, [r3, #0]
 8008060:	e017      	b.n	8008092 <HAL_PCD_EP_DB_Transmit+0x52a>
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	785b      	ldrb	r3, [r3, #1]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d113      	bne.n	8008092 <HAL_PCD_EP_DB_Transmit+0x52a>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008072:	b29b      	uxth	r3, r3
 8008074:	461a      	mov	r2, r3
 8008076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008078:	4413      	add	r3, r2
 800807a:	67bb      	str	r3, [r7, #120]	; 0x78
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	011a      	lsls	r2, r3, #4
 8008082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008084:	4413      	add	r3, r2
 8008086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800808a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800808c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800808e:	2200      	movs	r2, #0
 8008090:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	4619      	mov	r1, r3
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f006 fe12 	bl	800ecc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800809e:	88fb      	ldrh	r3, [r7, #6]
 80080a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f040 8104 	bne.w	80082b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	441a      	add	r2, r3
 80080d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80080da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	8013      	strh	r3, [r2, #0]
 80080ee:	e0e0      	b.n	80082b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d121      	bne.n	800813e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008114:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	441a      	add	r2, r3
 8008126:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800812a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800812e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813a:	b29b      	uxth	r3, r3
 800813c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008144:	2b01      	cmp	r3, #1
 8008146:	f040 80b4 	bne.w	80082b2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	695a      	ldr	r2, [r3, #20]
 800814e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008152:	441a      	add	r2, r3
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	69da      	ldr	r2, [r3, #28]
 800815c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008160:	441a      	add	r2, r3
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6a1a      	ldr	r2, [r3, #32]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	429a      	cmp	r2, r3
 8008170:	d309      	bcc.n	8008186 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6a1a      	ldr	r2, [r3, #32]
 800817c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	621a      	str	r2, [r3, #32]
 8008184:	e015      	b.n	80081b2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d107      	bne.n	800819e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800818e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008192:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800819c:	e009      	b.n	80081b2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2200      	movs	r2, #0
 80081a8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	667b      	str	r3, [r7, #100]	; 0x64
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	785b      	ldrb	r3, [r3, #1]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d155      	bne.n	800826c <HAL_PCD_EP_DB_Transmit+0x704>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081d4:	4413      	add	r3, r2
 80081d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	011a      	lsls	r2, r3, #4
 80081de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081e0:	4413      	add	r3, r2
 80081e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80081e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d112      	bne.n	8008214 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80081ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081fc:	801a      	strh	r2, [r3, #0]
 80081fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820c:	b29a      	uxth	r2, r3
 800820e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	e044      	b.n	800829e <HAL_PCD_EP_DB_Transmit+0x736>
 8008214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008216:	2b3e      	cmp	r3, #62	; 0x3e
 8008218:	d811      	bhi.n	800823e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800821a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800821c:	085b      	lsrs	r3, r3, #1
 800821e:	657b      	str	r3, [r7, #84]	; 0x54
 8008220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800822a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800822c:	3301      	adds	r3, #1
 800822e:	657b      	str	r3, [r7, #84]	; 0x54
 8008230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008232:	b29b      	uxth	r3, r3
 8008234:	029b      	lsls	r3, r3, #10
 8008236:	b29a      	uxth	r2, r3
 8008238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	e02f      	b.n	800829e <HAL_PCD_EP_DB_Transmit+0x736>
 800823e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008240:	095b      	lsrs	r3, r3, #5
 8008242:	657b      	str	r3, [r7, #84]	; 0x54
 8008244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008246:	f003 031f 	and.w	r3, r3, #31
 800824a:	2b00      	cmp	r3, #0
 800824c:	d102      	bne.n	8008254 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800824e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008250:	3b01      	subs	r3, #1
 8008252:	657b      	str	r3, [r7, #84]	; 0x54
 8008254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008256:	b29b      	uxth	r3, r3
 8008258:	029b      	lsls	r3, r3, #10
 800825a:	b29b      	uxth	r3, r3
 800825c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008264:	b29a      	uxth	r2, r3
 8008266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008268:	801a      	strh	r2, [r3, #0]
 800826a:	e018      	b.n	800829e <HAL_PCD_EP_DB_Transmit+0x736>
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d114      	bne.n	800829e <HAL_PCD_EP_DB_Transmit+0x736>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800827c:	b29b      	uxth	r3, r3
 800827e:	461a      	mov	r2, r3
 8008280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008282:	4413      	add	r3, r2
 8008284:	667b      	str	r3, [r7, #100]	; 0x64
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	011a      	lsls	r2, r3, #4
 800828c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800828e:	4413      	add	r3, r2
 8008290:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008294:	663b      	str	r3, [r7, #96]	; 0x60
 8008296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008298:	b29a      	uxth	r2, r3
 800829a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800829c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6959      	ldr	r1, [r3, #20]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	895a      	ldrh	r2, [r3, #10]
 80082aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	f004 fed0 	bl	800d052 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082cc:	823b      	strh	r3, [r7, #16]
 80082ce:	8a3b      	ldrh	r3, [r7, #16]
 80082d0:	f083 0310 	eor.w	r3, r3, #16
 80082d4:	823b      	strh	r3, [r7, #16]
 80082d6:	8a3b      	ldrh	r3, [r7, #16]
 80082d8:	f083 0320 	eor.w	r3, r3, #32
 80082dc:	823b      	strh	r3, [r7, #16]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	441a      	add	r2, r3
 80082ec:	8a3b      	ldrh	r3, [r7, #16]
 80082ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082fe:	b29b      	uxth	r3, r3
 8008300:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3788      	adds	r7, #136	; 0x88
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800830c:	b480      	push	{r7}
 800830e:	b087      	sub	sp, #28
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	607b      	str	r3, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	817b      	strh	r3, [r7, #10]
 800831a:	4613      	mov	r3, r2
 800831c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800831e:	897b      	ldrh	r3, [r7, #10]
 8008320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008324:	b29b      	uxth	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00b      	beq.n	8008342 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800832a:	897b      	ldrh	r3, [r7, #10]
 800832c:	f003 0307 	and.w	r3, r3, #7
 8008330:	1c5a      	adds	r2, r3, #1
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4413      	add	r3, r2
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	e009      	b.n	8008356 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008342:	897a      	ldrh	r2, [r7, #10]
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4413      	add	r3, r2
 8008354:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008356:	893b      	ldrh	r3, [r7, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d107      	bne.n	800836c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2200      	movs	r2, #0
 8008360:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	b29a      	uxth	r2, r3
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	80da      	strh	r2, [r3, #6]
 800836a:	e00b      	b.n	8008384 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2201      	movs	r2, #1
 8008370:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	b29a      	uxth	r2, r3
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	0c1b      	lsrs	r3, r3, #16
 800837e:	b29a      	uxth	r2, r3
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	bc80      	pop	{r7}
 800838e:	4770      	bx	lr

08008390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e31d      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083a2:	4b94      	ldr	r3, [pc, #592]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f003 030c 	and.w	r3, r3, #12
 80083aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083ac:	4b91      	ldr	r3, [pc, #580]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083b4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d07b      	beq.n	80084ba <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b08      	cmp	r3, #8
 80083c6:	d006      	beq.n	80083d6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b0c      	cmp	r3, #12
 80083cc:	d10f      	bne.n	80083ee <HAL_RCC_OscConfig+0x5e>
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083d4:	d10b      	bne.n	80083ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d6:	4b87      	ldr	r3, [pc, #540]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d06a      	beq.n	80084b8 <HAL_RCC_OscConfig+0x128>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d166      	bne.n	80084b8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e2f7      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d106      	bne.n	8008404 <HAL_RCC_OscConfig+0x74>
 80083f6:	4b7f      	ldr	r3, [pc, #508]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a7e      	ldr	r2, [pc, #504]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80083fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	e02d      	b.n	8008460 <HAL_RCC_OscConfig+0xd0>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10c      	bne.n	8008426 <HAL_RCC_OscConfig+0x96>
 800840c:	4b79      	ldr	r3, [pc, #484]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a78      	ldr	r2, [pc, #480]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 8008412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	4b76      	ldr	r3, [pc, #472]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a75      	ldr	r2, [pc, #468]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 800841e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	e01c      	b.n	8008460 <HAL_RCC_OscConfig+0xd0>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2b05      	cmp	r3, #5
 800842c:	d10c      	bne.n	8008448 <HAL_RCC_OscConfig+0xb8>
 800842e:	4b71      	ldr	r3, [pc, #452]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a70      	ldr	r2, [pc, #448]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 8008434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	4b6e      	ldr	r3, [pc, #440]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a6d      	ldr	r2, [pc, #436]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 8008440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	e00b      	b.n	8008460 <HAL_RCC_OscConfig+0xd0>
 8008448:	4b6a      	ldr	r3, [pc, #424]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a69      	ldr	r2, [pc, #420]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 800844e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	4b67      	ldr	r3, [pc, #412]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a66      	ldr	r2, [pc, #408]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 800845a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800845e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d013      	beq.n	8008490 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008468:	f7fc fd32 	bl	8004ed0 <HAL_GetTick>
 800846c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800846e:	e008      	b.n	8008482 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008470:	f7fc fd2e 	bl	8004ed0 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b64      	cmp	r3, #100	; 0x64
 800847c:	d901      	bls.n	8008482 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e2ad      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008482:	4b5c      	ldr	r3, [pc, #368]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0f0      	beq.n	8008470 <HAL_RCC_OscConfig+0xe0>
 800848e:	e014      	b.n	80084ba <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008490:	f7fc fd1e 	bl	8004ed0 <HAL_GetTick>
 8008494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008498:	f7fc fd1a 	bl	8004ed0 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b64      	cmp	r3, #100	; 0x64
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e299      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084aa:	4b52      	ldr	r3, [pc, #328]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1f0      	bne.n	8008498 <HAL_RCC_OscConfig+0x108>
 80084b6:	e000      	b.n	80084ba <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d05a      	beq.n	800857c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	d005      	beq.n	80084d8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b0c      	cmp	r3, #12
 80084d0:	d119      	bne.n	8008506 <HAL_RCC_OscConfig+0x176>
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d116      	bne.n	8008506 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084d8:	4b46      	ldr	r3, [pc, #280]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <HAL_RCC_OscConfig+0x160>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d001      	beq.n	80084f0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e276      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084f0:	4b40      	ldr	r3, [pc, #256]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	021b      	lsls	r3, r3, #8
 80084fe:	493d      	ldr	r1, [pc, #244]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 8008500:	4313      	orrs	r3, r2
 8008502:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008504:	e03a      	b.n	800857c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d020      	beq.n	8008550 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800850e:	4b3a      	ldr	r3, [pc, #232]	; (80085f8 <HAL_RCC_OscConfig+0x268>)
 8008510:	2201      	movs	r2, #1
 8008512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008514:	f7fc fcdc 	bl	8004ed0 <HAL_GetTick>
 8008518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800851a:	e008      	b.n	800852e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800851c:	f7fc fcd8 	bl	8004ed0 <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e257      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800852e:	4b31      	ldr	r3, [pc, #196]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0f0      	beq.n	800851c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800853a:	4b2e      	ldr	r3, [pc, #184]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	492a      	ldr	r1, [pc, #168]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 800854a:	4313      	orrs	r3, r2
 800854c:	604b      	str	r3, [r1, #4]
 800854e:	e015      	b.n	800857c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008550:	4b29      	ldr	r3, [pc, #164]	; (80085f8 <HAL_RCC_OscConfig+0x268>)
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008556:	f7fc fcbb 	bl	8004ed0 <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800855c:	e008      	b.n	8008570 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800855e:	f7fc fcb7 	bl	8004ed0 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d901      	bls.n	8008570 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e236      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008570:	4b20      	ldr	r3, [pc, #128]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1f0      	bne.n	800855e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 80b8 	beq.w	80086fa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d170      	bne.n	8008672 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008590:	4b18      	ldr	r3, [pc, #96]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008598:	2b00      	cmp	r3, #0
 800859a:	d005      	beq.n	80085a8 <HAL_RCC_OscConfig+0x218>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e21a      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a1a      	ldr	r2, [r3, #32]
 80085ac:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d921      	bls.n	80085fc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fc69 	bl	8008e94 <RCC_SetFlashLatencyFromMSIRange>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e208      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085cc:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	4906      	ldr	r1, [pc, #24]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085de:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	061b      	lsls	r3, r3, #24
 80085ec:	4901      	ldr	r1, [pc, #4]	; (80085f4 <HAL_RCC_OscConfig+0x264>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	604b      	str	r3, [r1, #4]
 80085f2:	e020      	b.n	8008636 <HAL_RCC_OscConfig+0x2a6>
 80085f4:	40023800 	.word	0x40023800
 80085f8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085fc:	4b99      	ldr	r3, [pc, #612]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	4996      	ldr	r1, [pc, #600]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 800860a:	4313      	orrs	r3, r2
 800860c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800860e:	4b95      	ldr	r3, [pc, #596]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	061b      	lsls	r3, r3, #24
 800861c:	4991      	ldr	r1, [pc, #580]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 800861e:	4313      	orrs	r3, r2
 8008620:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	4618      	mov	r0, r3
 8008628:	f000 fc34 	bl	8008e94 <RCC_SetFlashLatencyFromMSIRange>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e1d3      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	0b5b      	lsrs	r3, r3, #13
 800863c:	3301      	adds	r3, #1
 800863e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008642:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008646:	4a87      	ldr	r2, [pc, #540]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008648:	6892      	ldr	r2, [r2, #8]
 800864a:	0912      	lsrs	r2, r2, #4
 800864c:	f002 020f 	and.w	r2, r2, #15
 8008650:	4985      	ldr	r1, [pc, #532]	; (8008868 <HAL_RCC_OscConfig+0x4d8>)
 8008652:	5c8a      	ldrb	r2, [r1, r2]
 8008654:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008656:	4a85      	ldr	r2, [pc, #532]	; (800886c <HAL_RCC_OscConfig+0x4dc>)
 8008658:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800865a:	4b85      	ldr	r3, [pc, #532]	; (8008870 <HAL_RCC_OscConfig+0x4e0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4618      	mov	r0, r3
 8008660:	f7fc fbea 	bl	8004e38 <HAL_InitTick>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d045      	beq.n	80086fa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	e1b5      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d029      	beq.n	80086ce <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800867a:	4b7e      	ldr	r3, [pc, #504]	; (8008874 <HAL_RCC_OscConfig+0x4e4>)
 800867c:	2201      	movs	r2, #1
 800867e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008680:	f7fc fc26 	bl	8004ed0 <HAL_GetTick>
 8008684:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008686:	e008      	b.n	800869a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008688:	f7fc fc22 	bl	8004ed0 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d901      	bls.n	800869a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e1a1      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800869a:	4b72      	ldr	r3, [pc, #456]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d0f0      	beq.n	8008688 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086a6:	4b6f      	ldr	r3, [pc, #444]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	496c      	ldr	r1, [pc, #432]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 80086b4:	4313      	orrs	r3, r2
 80086b6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80086b8:	4b6a      	ldr	r3, [pc, #424]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	061b      	lsls	r3, r3, #24
 80086c6:	4967      	ldr	r1, [pc, #412]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	604b      	str	r3, [r1, #4]
 80086cc:	e015      	b.n	80086fa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80086ce:	4b69      	ldr	r3, [pc, #420]	; (8008874 <HAL_RCC_OscConfig+0x4e4>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d4:	f7fc fbfc 	bl	8004ed0 <HAL_GetTick>
 80086d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80086da:	e008      	b.n	80086ee <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80086dc:	f7fc fbf8 	bl	8004ed0 <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d901      	bls.n	80086ee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e177      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80086ee:	4b5d      	ldr	r3, [pc, #372]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1f0      	bne.n	80086dc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	2b00      	cmp	r3, #0
 8008704:	d030      	beq.n	8008768 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d016      	beq.n	800873c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800870e:	4b5a      	ldr	r3, [pc, #360]	; (8008878 <HAL_RCC_OscConfig+0x4e8>)
 8008710:	2201      	movs	r2, #1
 8008712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008714:	f7fc fbdc 	bl	8004ed0 <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800871c:	f7fc fbd8 	bl	8004ed0 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e157      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800872e:	4b4d      	ldr	r3, [pc, #308]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0f0      	beq.n	800871c <HAL_RCC_OscConfig+0x38c>
 800873a:	e015      	b.n	8008768 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800873c:	4b4e      	ldr	r3, [pc, #312]	; (8008878 <HAL_RCC_OscConfig+0x4e8>)
 800873e:	2200      	movs	r2, #0
 8008740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008742:	f7fc fbc5 	bl	8004ed0 <HAL_GetTick>
 8008746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008748:	e008      	b.n	800875c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800874a:	f7fc fbc1 	bl	8004ed0 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d901      	bls.n	800875c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e140      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800875c:	4b41      	ldr	r3, [pc, #260]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 800875e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008760:	f003 0302 	and.w	r3, r3, #2
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1f0      	bne.n	800874a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 80b5 	beq.w	80088e0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008776:	2300      	movs	r3, #0
 8008778:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800877a:	4b3a      	ldr	r3, [pc, #232]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 800877c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10d      	bne.n	80087a2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008786:	4b37      	ldr	r3, [pc, #220]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878a:	4a36      	ldr	r2, [pc, #216]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 800878c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008790:	6253      	str	r3, [r2, #36]	; 0x24
 8008792:	4b34      	ldr	r3, [pc, #208]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800879a:	60bb      	str	r3, [r7, #8]
 800879c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800879e:	2301      	movs	r3, #1
 80087a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087a2:	4b36      	ldr	r3, [pc, #216]	; (800887c <HAL_RCC_OscConfig+0x4ec>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d118      	bne.n	80087e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087ae:	4b33      	ldr	r3, [pc, #204]	; (800887c <HAL_RCC_OscConfig+0x4ec>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a32      	ldr	r2, [pc, #200]	; (800887c <HAL_RCC_OscConfig+0x4ec>)
 80087b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087ba:	f7fc fb89 	bl	8004ed0 <HAL_GetTick>
 80087be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087c0:	e008      	b.n	80087d4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087c2:	f7fc fb85 	bl	8004ed0 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	2b64      	cmp	r3, #100	; 0x64
 80087ce:	d901      	bls.n	80087d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e104      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087d4:	4b29      	ldr	r3, [pc, #164]	; (800887c <HAL_RCC_OscConfig+0x4ec>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d0f0      	beq.n	80087c2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d106      	bne.n	80087f6 <HAL_RCC_OscConfig+0x466>
 80087e8:	4b1e      	ldr	r3, [pc, #120]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 80087ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ec:	4a1d      	ldr	r2, [pc, #116]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 80087ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087f2:	6353      	str	r3, [r2, #52]	; 0x34
 80087f4:	e02d      	b.n	8008852 <HAL_RCC_OscConfig+0x4c2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10c      	bne.n	8008818 <HAL_RCC_OscConfig+0x488>
 80087fe:	4b19      	ldr	r3, [pc, #100]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008802:	4a18      	ldr	r2, [pc, #96]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008808:	6353      	str	r3, [r2, #52]	; 0x34
 800880a:	4b16      	ldr	r3, [pc, #88]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 800880c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880e:	4a15      	ldr	r2, [pc, #84]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008810:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008814:	6353      	str	r3, [r2, #52]	; 0x34
 8008816:	e01c      	b.n	8008852 <HAL_RCC_OscConfig+0x4c2>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	2b05      	cmp	r3, #5
 800881e:	d10c      	bne.n	800883a <HAL_RCC_OscConfig+0x4aa>
 8008820:	4b10      	ldr	r3, [pc, #64]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008824:	4a0f      	ldr	r2, [pc, #60]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800882a:	6353      	str	r3, [r2, #52]	; 0x34
 800882c:	4b0d      	ldr	r3, [pc, #52]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 800882e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008830:	4a0c      	ldr	r2, [pc, #48]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008836:	6353      	str	r3, [r2, #52]	; 0x34
 8008838:	e00b      	b.n	8008852 <HAL_RCC_OscConfig+0x4c2>
 800883a:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 800883c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883e:	4a09      	ldr	r2, [pc, #36]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008844:	6353      	str	r3, [r2, #52]	; 0x34
 8008846:	4b07      	ldr	r3, [pc, #28]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 8008848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884a:	4a06      	ldr	r2, [pc, #24]	; (8008864 <HAL_RCC_OscConfig+0x4d4>)
 800884c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008850:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d024      	beq.n	80088a4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800885a:	f7fc fb39 	bl	8004ed0 <HAL_GetTick>
 800885e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008860:	e019      	b.n	8008896 <HAL_RCC_OscConfig+0x506>
 8008862:	bf00      	nop
 8008864:	40023800 	.word	0x40023800
 8008868:	08013a64 	.word	0x08013a64
 800886c:	200007b8 	.word	0x200007b8
 8008870:	200007c0 	.word	0x200007c0
 8008874:	42470020 	.word	0x42470020
 8008878:	42470680 	.word	0x42470680
 800887c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008880:	f7fc fb26 	bl	8004ed0 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	f241 3288 	movw	r2, #5000	; 0x1388
 800888e:	4293      	cmp	r3, r2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e0a3      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008896:	4b54      	ldr	r3, [pc, #336]	; (80089e8 <HAL_RCC_OscConfig+0x658>)
 8008898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d0ee      	beq.n	8008880 <HAL_RCC_OscConfig+0x4f0>
 80088a2:	e014      	b.n	80088ce <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088a4:	f7fc fb14 	bl	8004ed0 <HAL_GetTick>
 80088a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088aa:	e00a      	b.n	80088c2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088ac:	f7fc fb10 	bl	8004ed0 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e08d      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088c2:	4b49      	ldr	r3, [pc, #292]	; (80089e8 <HAL_RCC_OscConfig+0x658>)
 80088c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1ee      	bne.n	80088ac <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80088ce:	7ffb      	ldrb	r3, [r7, #31]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d105      	bne.n	80088e0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088d4:	4b44      	ldr	r3, [pc, #272]	; (80089e8 <HAL_RCC_OscConfig+0x658>)
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	4a43      	ldr	r2, [pc, #268]	; (80089e8 <HAL_RCC_OscConfig+0x658>)
 80088da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088de:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d079      	beq.n	80089dc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	2b0c      	cmp	r3, #12
 80088ec:	d056      	beq.n	800899c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d13b      	bne.n	800896e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f6:	4b3d      	ldr	r3, [pc, #244]	; (80089ec <HAL_RCC_OscConfig+0x65c>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088fc:	f7fc fae8 	bl	8004ed0 <HAL_GetTick>
 8008900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008904:	f7fc fae4 	bl	8004ed0 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b02      	cmp	r3, #2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e063      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008916:	4b34      	ldr	r3, [pc, #208]	; (80089e8 <HAL_RCC_OscConfig+0x658>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1f0      	bne.n	8008904 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008922:	4b31      	ldr	r3, [pc, #196]	; (80089e8 <HAL_RCC_OscConfig+0x658>)
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008932:	4319      	orrs	r1, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008938:	430b      	orrs	r3, r1
 800893a:	492b      	ldr	r1, [pc, #172]	; (80089e8 <HAL_RCC_OscConfig+0x658>)
 800893c:	4313      	orrs	r3, r2
 800893e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008940:	4b2a      	ldr	r3, [pc, #168]	; (80089ec <HAL_RCC_OscConfig+0x65c>)
 8008942:	2201      	movs	r2, #1
 8008944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008946:	f7fc fac3 	bl	8004ed0 <HAL_GetTick>
 800894a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800894c:	e008      	b.n	8008960 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800894e:	f7fc fabf 	bl	8004ed0 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e03e      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008960:	4b21      	ldr	r3, [pc, #132]	; (80089e8 <HAL_RCC_OscConfig+0x658>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0f0      	beq.n	800894e <HAL_RCC_OscConfig+0x5be>
 800896c:	e036      	b.n	80089dc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800896e:	4b1f      	ldr	r3, [pc, #124]	; (80089ec <HAL_RCC_OscConfig+0x65c>)
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008974:	f7fc faac 	bl	8004ed0 <HAL_GetTick>
 8008978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800897a:	e008      	b.n	800898e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800897c:	f7fc faa8 	bl	8004ed0 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	2b02      	cmp	r3, #2
 8008988:	d901      	bls.n	800898e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e027      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <HAL_RCC_OscConfig+0x658>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1f0      	bne.n	800897c <HAL_RCC_OscConfig+0x5ec>
 800899a:	e01f      	b.n	80089dc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d101      	bne.n	80089a8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e01a      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80089a8:	4b0f      	ldr	r3, [pc, #60]	; (80089e8 <HAL_RCC_OscConfig+0x658>)
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d10d      	bne.n	80089d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d106      	bne.n	80089d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d001      	beq.n	80089dc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e000      	b.n	80089de <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3720      	adds	r7, #32
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	40023800 	.word	0x40023800
 80089ec:	42470060 	.word	0x42470060

080089f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e11a      	b.n	8008c3a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a04:	4b8f      	ldr	r3, [pc, #572]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d919      	bls.n	8008a46 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d105      	bne.n	8008a24 <HAL_RCC_ClockConfig+0x34>
 8008a18:	4b8a      	ldr	r3, [pc, #552]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a89      	ldr	r2, [pc, #548]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008a1e:	f043 0304 	orr.w	r3, r3, #4
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	4b87      	ldr	r3, [pc, #540]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f023 0201 	bic.w	r2, r3, #1
 8008a2c:	4985      	ldr	r1, [pc, #532]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a34:	4b83      	ldr	r3, [pc, #524]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d001      	beq.n	8008a46 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e0f9      	b.n	8008c3a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d008      	beq.n	8008a64 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a52:	4b7d      	ldr	r3, [pc, #500]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	497a      	ldr	r1, [pc, #488]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008a60:	4313      	orrs	r3, r2
 8008a62:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 808e 	beq.w	8008b8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d107      	bne.n	8008a8a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a7a:	4b73      	ldr	r3, [pc, #460]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d121      	bne.n	8008aca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e0d7      	b.n	8008c3a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d107      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a92:	4b6d      	ldr	r3, [pc, #436]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d115      	bne.n	8008aca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e0cb      	b.n	8008c3a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d107      	bne.n	8008aba <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008aaa:	4b67      	ldr	r3, [pc, #412]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0302 	and.w	r3, r3, #2
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d109      	bne.n	8008aca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e0bf      	b.n	8008c3a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008aba:	4b63      	ldr	r3, [pc, #396]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e0b7      	b.n	8008c3a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008aca:	4b5f      	ldr	r3, [pc, #380]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f023 0203 	bic.w	r2, r3, #3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	495c      	ldr	r1, [pc, #368]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008adc:	f7fc f9f8 	bl	8004ed0 <HAL_GetTick>
 8008ae0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d112      	bne.n	8008b10 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008aea:	e00a      	b.n	8008b02 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008aec:	f7fc f9f0 	bl	8004ed0 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e09b      	b.n	8008c3a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b02:	4b51      	ldr	r3, [pc, #324]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f003 030c 	and.w	r3, r3, #12
 8008b0a:	2b08      	cmp	r3, #8
 8008b0c:	d1ee      	bne.n	8008aec <HAL_RCC_ClockConfig+0xfc>
 8008b0e:	e03e      	b.n	8008b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d112      	bne.n	8008b3e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b18:	e00a      	b.n	8008b30 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b1a:	f7fc f9d9 	bl	8004ed0 <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d901      	bls.n	8008b30 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e084      	b.n	8008c3a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b30:	4b45      	ldr	r3, [pc, #276]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 030c 	and.w	r3, r3, #12
 8008b38:	2b0c      	cmp	r3, #12
 8008b3a:	d1ee      	bne.n	8008b1a <HAL_RCC_ClockConfig+0x12a>
 8008b3c:	e027      	b.n	8008b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d11d      	bne.n	8008b82 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b46:	e00a      	b.n	8008b5e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b48:	f7fc f9c2 	bl	8004ed0 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e06d      	b.n	8008c3a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b5e:	4b3a      	ldr	r3, [pc, #232]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f003 030c 	and.w	r3, r3, #12
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d1ee      	bne.n	8008b48 <HAL_RCC_ClockConfig+0x158>
 8008b6a:	e010      	b.n	8008b8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b6c:	f7fc f9b0 	bl	8004ed0 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d901      	bls.n	8008b82 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e05b      	b.n	8008c3a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008b82:	4b31      	ldr	r3, [pc, #196]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f003 030c 	and.w	r3, r3, #12
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1ee      	bne.n	8008b6c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b8e:	4b2d      	ldr	r3, [pc, #180]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d219      	bcs.n	8008bd0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d105      	bne.n	8008bae <HAL_RCC_ClockConfig+0x1be>
 8008ba2:	4b28      	ldr	r3, [pc, #160]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a27      	ldr	r2, [pc, #156]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008ba8:	f043 0304 	orr.w	r3, r3, #4
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	4b25      	ldr	r3, [pc, #148]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f023 0201 	bic.w	r2, r3, #1
 8008bb6:	4923      	ldr	r1, [pc, #140]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bbe:	4b21      	ldr	r3, [pc, #132]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d001      	beq.n	8008bd0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e034      	b.n	8008c3a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d008      	beq.n	8008bee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bdc:	4b1a      	ldr	r3, [pc, #104]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	4917      	ldr	r1, [pc, #92]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0308 	and.w	r3, r3, #8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d009      	beq.n	8008c0e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bfa:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	490f      	ldr	r1, [pc, #60]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c0e:	f000 f823 	bl	8008c58 <HAL_RCC_GetSysClockFreq>
 8008c12:	4602      	mov	r2, r0
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <HAL_RCC_ClockConfig+0x258>)
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	091b      	lsrs	r3, r3, #4
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	490b      	ldr	r1, [pc, #44]	; (8008c4c <HAL_RCC_ClockConfig+0x25c>)
 8008c20:	5ccb      	ldrb	r3, [r1, r3]
 8008c22:	fa22 f303 	lsr.w	r3, r2, r3
 8008c26:	4a0a      	ldr	r2, [pc, #40]	; (8008c50 <HAL_RCC_ClockConfig+0x260>)
 8008c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008c2a:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <HAL_RCC_ClockConfig+0x264>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fc f902 	bl	8004e38 <HAL_InitTick>
 8008c34:	4603      	mov	r3, r0
 8008c36:	72fb      	strb	r3, [r7, #11]

  return status;
 8008c38:	7afb      	ldrb	r3, [r7, #11]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	40023c00 	.word	0x40023c00
 8008c48:	40023800 	.word	0x40023800
 8008c4c:	08013a64 	.word	0x08013a64
 8008c50:	200007b8 	.word	0x200007b8
 8008c54:	200007c0 	.word	0x200007c0

08008c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c5c:	b092      	sub	sp, #72	; 0x48
 8008c5e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8008c60:	4b79      	ldr	r3, [pc, #484]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c68:	f003 030c 	and.w	r3, r3, #12
 8008c6c:	2b0c      	cmp	r3, #12
 8008c6e:	d00d      	beq.n	8008c8c <HAL_RCC_GetSysClockFreq+0x34>
 8008c70:	2b0c      	cmp	r3, #12
 8008c72:	f200 80d5 	bhi.w	8008e20 <HAL_RCC_GetSysClockFreq+0x1c8>
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	d002      	beq.n	8008c80 <HAL_RCC_GetSysClockFreq+0x28>
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	d003      	beq.n	8008c86 <HAL_RCC_GetSysClockFreq+0x2e>
 8008c7e:	e0cf      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c80:	4b72      	ldr	r3, [pc, #456]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008c82:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008c84:	e0da      	b.n	8008e3c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008c86:	4b72      	ldr	r3, [pc, #456]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008c88:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008c8a:	e0d7      	b.n	8008e3c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8e:	0c9b      	lsrs	r3, r3, #18
 8008c90:	f003 020f 	and.w	r2, r3, #15
 8008c94:	4b6f      	ldr	r3, [pc, #444]	; (8008e54 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008c96:	5c9b      	ldrb	r3, [r3, r2]
 8008c98:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9c:	0d9b      	lsrs	r3, r3, #22
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ca6:	4b68      	ldr	r3, [pc, #416]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d05d      	beq.n	8008d6e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	4611      	mov	r1, r2
 8008cba:	4604      	mov	r4, r0
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	f04f 0100 	mov.w	r1, #0
 8008cca:	0159      	lsls	r1, r3, #5
 8008ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cd0:	0150      	lsls	r0, r2, #5
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	1a51      	subs	r1, r2, r1
 8008cda:	6139      	str	r1, [r7, #16]
 8008cdc:	4629      	mov	r1, r5
 8008cde:	eb63 0301 	sbc.w	r3, r3, r1
 8008ce2:	617b      	str	r3, [r7, #20]
 8008ce4:	f04f 0200 	mov.w	r2, #0
 8008ce8:	f04f 0300 	mov.w	r3, #0
 8008cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008cf0:	4659      	mov	r1, fp
 8008cf2:	018b      	lsls	r3, r1, #6
 8008cf4:	4651      	mov	r1, sl
 8008cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008cfa:	4651      	mov	r1, sl
 8008cfc:	018a      	lsls	r2, r1, #6
 8008cfe:	46d4      	mov	ip, sl
 8008d00:	ebb2 080c 	subs.w	r8, r2, ip
 8008d04:	4659      	mov	r1, fp
 8008d06:	eb63 0901 	sbc.w	r9, r3, r1
 8008d0a:	f04f 0200 	mov.w	r2, #0
 8008d0e:	f04f 0300 	mov.w	r3, #0
 8008d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d1e:	4690      	mov	r8, r2
 8008d20:	4699      	mov	r9, r3
 8008d22:	4623      	mov	r3, r4
 8008d24:	eb18 0303 	adds.w	r3, r8, r3
 8008d28:	60bb      	str	r3, [r7, #8]
 8008d2a:	462b      	mov	r3, r5
 8008d2c:	eb49 0303 	adc.w	r3, r9, r3
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	f04f 0200 	mov.w	r2, #0
 8008d36:	f04f 0300 	mov.w	r3, #0
 8008d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008d3e:	4629      	mov	r1, r5
 8008d40:	024b      	lsls	r3, r1, #9
 8008d42:	4620      	mov	r0, r4
 8008d44:	4629      	mov	r1, r5
 8008d46:	4604      	mov	r4, r0
 8008d48:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	024a      	lsls	r2, r1, #9
 8008d50:	4610      	mov	r0, r2
 8008d52:	4619      	mov	r1, r3
 8008d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d56:	2200      	movs	r2, #0
 8008d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d60:	f7f8 fa18 	bl	8001194 <__aeabi_uldivmod>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4613      	mov	r3, r2
 8008d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d6c:	e055      	b.n	8008e1a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	2200      	movs	r2, #0
 8008d72:	623b      	str	r3, [r7, #32]
 8008d74:	627a      	str	r2, [r7, #36]	; 0x24
 8008d76:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008d7a:	4642      	mov	r2, r8
 8008d7c:	464b      	mov	r3, r9
 8008d7e:	f04f 0000 	mov.w	r0, #0
 8008d82:	f04f 0100 	mov.w	r1, #0
 8008d86:	0159      	lsls	r1, r3, #5
 8008d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d8c:	0150      	lsls	r0, r2, #5
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	46c4      	mov	ip, r8
 8008d94:	ebb2 0a0c 	subs.w	sl, r2, ip
 8008d98:	4640      	mov	r0, r8
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	468c      	mov	ip, r1
 8008d9e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8008da2:	f04f 0200 	mov.w	r2, #0
 8008da6:	f04f 0300 	mov.w	r3, #0
 8008daa:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008dae:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008db2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008db6:	ebb2 040a 	subs.w	r4, r2, sl
 8008dba:	eb63 050b 	sbc.w	r5, r3, fp
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	f04f 0300 	mov.w	r3, #0
 8008dc6:	00eb      	lsls	r3, r5, #3
 8008dc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dcc:	00e2      	lsls	r2, r4, #3
 8008dce:	4614      	mov	r4, r2
 8008dd0:	461d      	mov	r5, r3
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	18e3      	adds	r3, r4, r3
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	eb45 0303 	adc.w	r3, r5, r3
 8008dde:	607b      	str	r3, [r7, #4]
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008dec:	4629      	mov	r1, r5
 8008dee:	028b      	lsls	r3, r1, #10
 8008df0:	4620      	mov	r0, r4
 8008df2:	4629      	mov	r1, r5
 8008df4:	4604      	mov	r4, r0
 8008df6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8008dfa:	4601      	mov	r1, r0
 8008dfc:	028a      	lsls	r2, r1, #10
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4619      	mov	r1, r3
 8008e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e04:	2200      	movs	r2, #0
 8008e06:	61bb      	str	r3, [r7, #24]
 8008e08:	61fa      	str	r2, [r7, #28]
 8008e0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e0e:	f7f8 f9c1 	bl	8001194 <__aeabi_uldivmod>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4613      	mov	r3, r2
 8008e18:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8008e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e1c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008e1e:	e00d      	b.n	8008e3c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008e20:	4b09      	ldr	r3, [pc, #36]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	0b5b      	lsrs	r3, r3, #13
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	3301      	adds	r3, #1
 8008e30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008e34:	fa02 f303 	lsl.w	r3, r2, r3
 8008e38:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008e3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3748      	adds	r7, #72	; 0x48
 8008e42:	46bd      	mov	sp, r7
 8008e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e48:	40023800 	.word	0x40023800
 8008e4c:	00f42400 	.word	0x00f42400
 8008e50:	007a1200 	.word	0x007a1200
 8008e54:	08013a58 	.word	0x08013a58

08008e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e5c:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <HAL_RCC_GetHCLKFreq+0x10>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr
 8008e68:	200007b8 	.word	0x200007b8

08008e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e70:	f7ff fff2 	bl	8008e58 <HAL_RCC_GetHCLKFreq>
 8008e74:	4602      	mov	r2, r0
 8008e76:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	f003 0307 	and.w	r3, r3, #7
 8008e80:	4903      	ldr	r1, [pc, #12]	; (8008e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e82:	5ccb      	ldrb	r3, [r1, r3]
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	40023800 	.word	0x40023800
 8008e90:	08013a74 	.word	0x08013a74

08008e94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008ea0:	4b29      	ldr	r3, [pc, #164]	; (8008f48 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d12c      	bne.n	8008f06 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008eac:	4b26      	ldr	r3, [pc, #152]	; (8008f48 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008eb8:	4b24      	ldr	r3, [pc, #144]	; (8008f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008ec0:	617b      	str	r3, [r7, #20]
 8008ec2:	e016      	b.n	8008ef2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ec4:	4b20      	ldr	r3, [pc, #128]	; (8008f48 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	4a1f      	ldr	r2, [pc, #124]	; (8008f48 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ece:	6253      	str	r3, [r2, #36]	; 0x24
 8008ed0:	4b1d      	ldr	r3, [pc, #116]	; (8008f48 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008edc:	4b1b      	ldr	r3, [pc, #108]	; (8008f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008ee4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ee6:	4b18      	ldr	r3, [pc, #96]	; (8008f48 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	4a17      	ldr	r2, [pc, #92]	; (8008f48 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ef0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008ef8:	d105      	bne.n	8008f06 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008f00:	d101      	bne.n	8008f06 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8008f02:	2301      	movs	r3, #1
 8008f04:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d105      	bne.n	8008f18 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8008f0c:	4b10      	ldr	r3, [pc, #64]	; (8008f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a0f      	ldr	r2, [pc, #60]	; (8008f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f12:	f043 0304 	orr.w	r3, r3, #4
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f023 0201 	bic.w	r2, r3, #1
 8008f20:	490b      	ldr	r1, [pc, #44]	; (8008f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008f28:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d001      	beq.n	8008f3a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e000      	b.n	8008f3c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	371c      	adds	r7, #28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	40023800 	.word	0x40023800
 8008f4c:	40007000 	.word	0x40007000
 8008f50:	40023c00 	.word	0x40023c00

08008f54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e06e      	b.n	8009044 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d108      	bne.n	8008f80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f76:	d009      	beq.n	8008f8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	61da      	str	r2, [r3, #28]
 8008f7e:	e005      	b.n	8008f8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fb fafe 	bl	80045a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009006:	431a      	orrs	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009010:	ea42 0103 	orr.w	r1, r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009018:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	0c1a      	lsrs	r2, r3, #16
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f002 0204 	and.w	r2, r2, #4
 8009032:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	4613      	mov	r3, r2
 800905a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <HAL_SPI_Transmit+0x22>
 800906a:	2302      	movs	r3, #2
 800906c:	e126      	b.n	80092bc <HAL_SPI_Transmit+0x270>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009076:	f7fb ff2b 	bl	8004ed0 <HAL_GetTick>
 800907a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800907c:	88fb      	ldrh	r3, [r7, #6]
 800907e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b01      	cmp	r3, #1
 800908a:	d002      	beq.n	8009092 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800908c:	2302      	movs	r3, #2
 800908e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009090:	e10b      	b.n	80092aa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <HAL_SPI_Transmit+0x52>
 8009098:	88fb      	ldrh	r3, [r7, #6]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090a2:	e102      	b.n	80092aa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2203      	movs	r2, #3
 80090a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	88fa      	ldrh	r2, [r7, #6]
 80090bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	88fa      	ldrh	r2, [r7, #6]
 80090c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090ea:	d10f      	bne.n	800910c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800910a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009116:	2b40      	cmp	r3, #64	; 0x40
 8009118:	d007      	beq.n	800912a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009132:	d14b      	bne.n	80091cc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d002      	beq.n	8009142 <HAL_SPI_Transmit+0xf6>
 800913c:	8afb      	ldrh	r3, [r7, #22]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d13e      	bne.n	80091c0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009146:	881a      	ldrh	r2, [r3, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	1c9a      	adds	r2, r3, #2
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800915c:	b29b      	uxth	r3, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	b29a      	uxth	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009166:	e02b      	b.n	80091c0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b02      	cmp	r3, #2
 8009174:	d112      	bne.n	800919c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	881a      	ldrh	r2, [r3, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009186:	1c9a      	adds	r2, r3, #2
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009190:	b29b      	uxth	r3, r3
 8009192:	3b01      	subs	r3, #1
 8009194:	b29a      	uxth	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	86da      	strh	r2, [r3, #54]	; 0x36
 800919a:	e011      	b.n	80091c0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800919c:	f7fb fe98 	bl	8004ed0 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d803      	bhi.n	80091b4 <HAL_SPI_Transmit+0x168>
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b2:	d102      	bne.n	80091ba <HAL_SPI_Transmit+0x16e>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d102      	bne.n	80091c0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091be:	e074      	b.n	80092aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1ce      	bne.n	8009168 <HAL_SPI_Transmit+0x11c>
 80091ca:	e04c      	b.n	8009266 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <HAL_SPI_Transmit+0x18e>
 80091d4:	8afb      	ldrh	r3, [r7, #22]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d140      	bne.n	800925c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	330c      	adds	r3, #12
 80091e4:	7812      	ldrb	r2, [r2, #0]
 80091e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009200:	e02c      	b.n	800925c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f003 0302 	and.w	r3, r3, #2
 800920c:	2b02      	cmp	r3, #2
 800920e:	d113      	bne.n	8009238 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	330c      	adds	r3, #12
 800921a:	7812      	ldrb	r2, [r2, #0]
 800921c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800922c:	b29b      	uxth	r3, r3
 800922e:	3b01      	subs	r3, #1
 8009230:	b29a      	uxth	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	86da      	strh	r2, [r3, #54]	; 0x36
 8009236:	e011      	b.n	800925c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009238:	f7fb fe4a 	bl	8004ed0 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d803      	bhi.n	8009250 <HAL_SPI_Transmit+0x204>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924e:	d102      	bne.n	8009256 <HAL_SPI_Transmit+0x20a>
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d102      	bne.n	800925c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	77fb      	strb	r3, [r7, #31]
          goto error;
 800925a:	e026      	b.n	80092aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009260:	b29b      	uxth	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1cd      	bne.n	8009202 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f000 fcd0 	bl	8009c10 <SPI_EndRxTxTransaction>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2220      	movs	r2, #32
 800927a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10a      	bne.n	800929a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009284:	2300      	movs	r3, #0
 8009286:	613b      	str	r3, [r7, #16]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	613b      	str	r3, [r7, #16]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d002      	beq.n	80092a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	77fb      	strb	r3, [r7, #31]
 80092a6:	e000      	b.n	80092aa <HAL_SPI_Transmit+0x25e>
  }

error:
 80092a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3720      	adds	r7, #32
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af02      	add	r7, sp, #8
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	4613      	mov	r3, r2
 80092d2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092e0:	d112      	bne.n	8009308 <HAL_SPI_Receive+0x44>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10e      	bne.n	8009308 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2204      	movs	r2, #4
 80092ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80092f2:	88fa      	ldrh	r2, [r7, #6]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4613      	mov	r3, r2
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	68b9      	ldr	r1, [r7, #8]
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 f8f1 	bl	80094e6 <HAL_SPI_TransmitReceive>
 8009304:	4603      	mov	r3, r0
 8009306:	e0ea      	b.n	80094de <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800930e:	2b01      	cmp	r3, #1
 8009310:	d101      	bne.n	8009316 <HAL_SPI_Receive+0x52>
 8009312:	2302      	movs	r3, #2
 8009314:	e0e3      	b.n	80094de <HAL_SPI_Receive+0x21a>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800931e:	f7fb fdd7 	bl	8004ed0 <HAL_GetTick>
 8009322:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b01      	cmp	r3, #1
 800932e:	d002      	beq.n	8009336 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009330:	2302      	movs	r3, #2
 8009332:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009334:	e0ca      	b.n	80094cc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <HAL_SPI_Receive+0x7e>
 800933c:	88fb      	ldrh	r3, [r7, #6]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d102      	bne.n	8009348 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009346:	e0c1      	b.n	80094cc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2204      	movs	r2, #4
 800934c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	88fa      	ldrh	r2, [r7, #6]
 8009360:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	88fa      	ldrh	r2, [r7, #6]
 8009366:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800938e:	d10f      	bne.n	80093b0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800939e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80093ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ba:	2b40      	cmp	r3, #64	; 0x40
 80093bc:	d007      	beq.n	80093ce <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d162      	bne.n	800949c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80093d6:	e02e      	b.n	8009436 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d115      	bne.n	8009412 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f103 020c 	add.w	r2, r3, #12
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	7812      	ldrb	r2, [r2, #0]
 80093f4:	b2d2      	uxtb	r2, r2
 80093f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009406:	b29b      	uxth	r3, r3
 8009408:	3b01      	subs	r3, #1
 800940a:	b29a      	uxth	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009410:	e011      	b.n	8009436 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009412:	f7fb fd5d 	bl	8004ed0 <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	429a      	cmp	r2, r3
 8009420:	d803      	bhi.n	800942a <HAL_SPI_Receive+0x166>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009428:	d102      	bne.n	8009430 <HAL_SPI_Receive+0x16c>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d102      	bne.n	8009436 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009434:	e04a      	b.n	80094cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800943a:	b29b      	uxth	r3, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1cb      	bne.n	80093d8 <HAL_SPI_Receive+0x114>
 8009440:	e031      	b.n	80094a6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	2b01      	cmp	r3, #1
 800944e:	d113      	bne.n	8009478 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945a:	b292      	uxth	r2, r2
 800945c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009462:	1c9a      	adds	r2, r3, #2
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800946c:	b29b      	uxth	r3, r3
 800946e:	3b01      	subs	r3, #1
 8009470:	b29a      	uxth	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009476:	e011      	b.n	800949c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009478:	f7fb fd2a 	bl	8004ed0 <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	429a      	cmp	r2, r3
 8009486:	d803      	bhi.n	8009490 <HAL_SPI_Receive+0x1cc>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948e:	d102      	bne.n	8009496 <HAL_SPI_Receive+0x1d2>
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d102      	bne.n	800949c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	75fb      	strb	r3, [r7, #23]
          goto error;
 800949a:	e017      	b.n	80094cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1cd      	bne.n	8009442 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 fb4a 	bl	8009b44 <SPI_EndRxTransaction>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2220      	movs	r2, #32
 80094ba:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	75fb      	strb	r3, [r7, #23]
 80094c8:	e000      	b.n	80094cc <HAL_SPI_Receive+0x208>
  }

error :
 80094ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b08c      	sub	sp, #48	; 0x30
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	60f8      	str	r0, [r7, #12]
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80094f4:	2301      	movs	r3, #1
 80094f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009504:	2b01      	cmp	r3, #1
 8009506:	d101      	bne.n	800950c <HAL_SPI_TransmitReceive+0x26>
 8009508:	2302      	movs	r3, #2
 800950a:	e18a      	b.n	8009822 <HAL_SPI_TransmitReceive+0x33c>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009514:	f7fb fcdc 	bl	8004ed0 <HAL_GetTick>
 8009518:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800952a:	887b      	ldrh	r3, [r7, #2]
 800952c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800952e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009532:	2b01      	cmp	r3, #1
 8009534:	d00f      	beq.n	8009556 <HAL_SPI_TransmitReceive+0x70>
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800953c:	d107      	bne.n	800954e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d103      	bne.n	800954e <HAL_SPI_TransmitReceive+0x68>
 8009546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800954a:	2b04      	cmp	r3, #4
 800954c:	d003      	beq.n	8009556 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800954e:	2302      	movs	r3, #2
 8009550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009554:	e15b      	b.n	800980e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d005      	beq.n	8009568 <HAL_SPI_TransmitReceive+0x82>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <HAL_SPI_TransmitReceive+0x82>
 8009562:	887b      	ldrh	r3, [r7, #2]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d103      	bne.n	8009570 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800956e:	e14e      	b.n	800980e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b04      	cmp	r3, #4
 800957a:	d003      	beq.n	8009584 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2205      	movs	r2, #5
 8009580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	887a      	ldrh	r2, [r7, #2]
 8009594:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	887a      	ldrh	r2, [r7, #2]
 800959a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	887a      	ldrh	r2, [r7, #2]
 80095a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	887a      	ldrh	r2, [r7, #2]
 80095ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c4:	2b40      	cmp	r3, #64	; 0x40
 80095c6:	d007      	beq.n	80095d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095e0:	d178      	bne.n	80096d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <HAL_SPI_TransmitReceive+0x10a>
 80095ea:	8b7b      	ldrh	r3, [r7, #26]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d166      	bne.n	80096be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f4:	881a      	ldrh	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009600:	1c9a      	adds	r2, r3, #2
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800960a:	b29b      	uxth	r3, r3
 800960c:	3b01      	subs	r3, #1
 800960e:	b29a      	uxth	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009614:	e053      	b.n	80096be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b02      	cmp	r3, #2
 8009622:	d11b      	bne.n	800965c <HAL_SPI_TransmitReceive+0x176>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009628:	b29b      	uxth	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d016      	beq.n	800965c <HAL_SPI_TransmitReceive+0x176>
 800962e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009630:	2b01      	cmp	r3, #1
 8009632:	d113      	bne.n	800965c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009638:	881a      	ldrh	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009644:	1c9a      	adds	r2, r3, #2
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800964e:	b29b      	uxth	r3, r3
 8009650:	3b01      	subs	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009658:	2300      	movs	r3, #0
 800965a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b01      	cmp	r3, #1
 8009668:	d119      	bne.n	800969e <HAL_SPI_TransmitReceive+0x1b8>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800966e:	b29b      	uxth	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	d014      	beq.n	800969e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967e:	b292      	uxth	r2, r2
 8009680:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009686:	1c9a      	adds	r2, r3, #2
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009690:	b29b      	uxth	r3, r3
 8009692:	3b01      	subs	r3, #1
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800969a:	2301      	movs	r3, #1
 800969c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800969e:	f7fb fc17 	bl	8004ed0 <HAL_GetTick>
 80096a2:	4602      	mov	r2, r0
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d807      	bhi.n	80096be <HAL_SPI_TransmitReceive+0x1d8>
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b4:	d003      	beq.n	80096be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80096bc:	e0a7      	b.n	800980e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1a6      	bne.n	8009616 <HAL_SPI_TransmitReceive+0x130>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1a1      	bne.n	8009616 <HAL_SPI_TransmitReceive+0x130>
 80096d2:	e07c      	b.n	80097ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <HAL_SPI_TransmitReceive+0x1fc>
 80096dc:	8b7b      	ldrh	r3, [r7, #26]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d16b      	bne.n	80097ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	330c      	adds	r3, #12
 80096ec:	7812      	ldrb	r2, [r2, #0]
 80096ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096fe:	b29b      	uxth	r3, r3
 8009700:	3b01      	subs	r3, #1
 8009702:	b29a      	uxth	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009708:	e057      	b.n	80097ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f003 0302 	and.w	r3, r3, #2
 8009714:	2b02      	cmp	r3, #2
 8009716:	d11c      	bne.n	8009752 <HAL_SPI_TransmitReceive+0x26c>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800971c:	b29b      	uxth	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d017      	beq.n	8009752 <HAL_SPI_TransmitReceive+0x26c>
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	2b01      	cmp	r3, #1
 8009726:	d114      	bne.n	8009752 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	330c      	adds	r3, #12
 8009732:	7812      	ldrb	r2, [r2, #0]
 8009734:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b29a      	uxth	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800974e:	2300      	movs	r3, #0
 8009750:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b01      	cmp	r3, #1
 800975e:	d119      	bne.n	8009794 <HAL_SPI_TransmitReceive+0x2ae>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009764:	b29b      	uxth	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d014      	beq.n	8009794 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68da      	ldr	r2, [r3, #12]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009774:	b2d2      	uxtb	r2, r2
 8009776:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009786:	b29b      	uxth	r3, r3
 8009788:	3b01      	subs	r3, #1
 800978a:	b29a      	uxth	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009790:	2301      	movs	r3, #1
 8009792:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009794:	f7fb fb9c 	bl	8004ed0 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d803      	bhi.n	80097ac <HAL_SPI_TransmitReceive+0x2c6>
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097aa:	d102      	bne.n	80097b2 <HAL_SPI_TransmitReceive+0x2cc>
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d103      	bne.n	80097ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80097b8:	e029      	b.n	800980e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097be:	b29b      	uxth	r3, r3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1a2      	bne.n	800970a <HAL_SPI_TransmitReceive+0x224>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d19d      	bne.n	800970a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fa1c 	bl	8009c10 <SPI_EndRxTxTransaction>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d006      	beq.n	80097ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2220      	movs	r2, #32
 80097e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80097ea:	e010      	b.n	800980e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10b      	bne.n	800980c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097f4:	2300      	movs	r3, #0
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	617b      	str	r3, [r7, #20]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	e000      	b.n	800980e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800980c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800981e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009822:	4618      	mov	r0, r3
 8009824:	3730      	adds	r7, #48	; 0x30
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	099b      	lsrs	r3, r3, #6
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10f      	bne.n	8009870 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00a      	beq.n	8009870 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	099b      	lsrs	r3, r3, #6
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	d004      	beq.n	8009870 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	4798      	blx	r3
    return;
 800986e:	e0be      	b.n	80099ee <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	085b      	lsrs	r3, r3, #1
 8009874:	f003 0301 	and.w	r3, r3, #1
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00a      	beq.n	8009892 <HAL_SPI_IRQHandler+0x66>
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	09db      	lsrs	r3, r3, #7
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	d004      	beq.n	8009892 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	4798      	blx	r3
    return;
 8009890:	e0ad      	b.n	80099ee <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	095b      	lsrs	r3, r3, #5
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d106      	bne.n	80098ac <HAL_SPI_IRQHandler+0x80>
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	099b      	lsrs	r3, r3, #6
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f000 80a1 	beq.w	80099ee <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	095b      	lsrs	r3, r3, #5
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 809a 	beq.w	80099ee <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	099b      	lsrs	r3, r3, #6
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d023      	beq.n	800990e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d011      	beq.n	80098f6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098d6:	f043 0204 	orr.w	r2, r3, #4
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098de:	2300      	movs	r3, #0
 80098e0:	617b      	str	r3, [r7, #20]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	617b      	str	r3, [r7, #20]
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	e00b      	b.n	800990e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098f6:	2300      	movs	r3, #0
 80098f8:	613b      	str	r3, [r7, #16]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	613b      	str	r3, [r7, #16]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	613b      	str	r3, [r7, #16]
 800990a:	693b      	ldr	r3, [r7, #16]
        return;
 800990c:	e06f      	b.n	80099ee <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	095b      	lsrs	r3, r3, #5
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	2b00      	cmp	r3, #0
 8009918:	d014      	beq.n	8009944 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800991e:	f043 0201 	orr.w	r2, r3, #1
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009926:	2300      	movs	r3, #0
 8009928:	60fb      	str	r3, [r7, #12]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009948:	2b00      	cmp	r3, #0
 800994a:	d04f      	beq.n	80099ec <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800995a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	f003 0302 	and.w	r3, r3, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <HAL_SPI_IRQHandler+0x14c>
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b00      	cmp	r3, #0
 8009976:	d034      	beq.n	80099e2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 0203 	bic.w	r2, r2, #3
 8009986:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800998c:	2b00      	cmp	r3, #0
 800998e:	d011      	beq.n	80099b4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009994:	4a17      	ldr	r2, [pc, #92]	; (80099f4 <HAL_SPI_IRQHandler+0x1c8>)
 8009996:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800999c:	4618      	mov	r0, r3
 800999e:	f7fb fbd0 	bl	8005142 <HAL_DMA_Abort_IT>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d005      	beq.n	80099b4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d016      	beq.n	80099ea <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099c0:	4a0c      	ldr	r2, [pc, #48]	; (80099f4 <HAL_SPI_IRQHandler+0x1c8>)
 80099c2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fb fbba 	bl	8005142 <HAL_DMA_Abort_IT>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00a      	beq.n	80099ea <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80099e0:	e003      	b.n	80099ea <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f808 	bl	80099f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80099e8:	e000      	b.n	80099ec <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80099ea:	bf00      	nop
    return;
 80099ec:	bf00      	nop
  }
}
 80099ee:	3720      	adds	r7, #32
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	08009a0b 	.word	0x08009a0b

080099f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bc80      	pop	{r7}
 8009a08:	4770      	bx	lr

08009a0a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a16:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f7ff ffe7 	bl	80099f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a2a:	bf00      	nop
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	4613      	mov	r3, r2
 8009a42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a44:	f7fb fa44 	bl	8004ed0 <HAL_GetTick>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	1a9b      	subs	r3, r3, r2
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	4413      	add	r3, r2
 8009a52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a54:	f7fb fa3c 	bl	8004ed0 <HAL_GetTick>
 8009a58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a5a:	4b39      	ldr	r3, [pc, #228]	; (8009b40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	015b      	lsls	r3, r3, #5
 8009a60:	0d1b      	lsrs	r3, r3, #20
 8009a62:	69fa      	ldr	r2, [r7, #28]
 8009a64:	fb02 f303 	mul.w	r3, r2, r3
 8009a68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a6a:	e054      	b.n	8009b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a72:	d050      	beq.n	8009b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a74:	f7fb fa2c 	bl	8004ed0 <HAL_GetTick>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d902      	bls.n	8009a8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d13d      	bne.n	8009b06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009aa2:	d111      	bne.n	8009ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aac:	d004      	beq.n	8009ab8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ab6:	d107      	bne.n	8009ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ac6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad0:	d10f      	bne.n	8009af2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009af0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e017      	b.n	8009b36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	4013      	ands	r3, r2
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	bf0c      	ite	eq
 8009b26:	2301      	moveq	r3, #1
 8009b28:	2300      	movne	r3, #0
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	79fb      	ldrb	r3, [r7, #7]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d19b      	bne.n	8009a6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3720      	adds	r7, #32
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	200007b8 	.word	0x200007b8

08009b44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af02      	add	r7, sp, #8
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b58:	d111      	bne.n	8009b7e <SPI_EndRxTransaction+0x3a>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b62:	d004      	beq.n	8009b6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b6c:	d107      	bne.n	8009b7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b86:	d12a      	bne.n	8009bde <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b90:	d012      	beq.n	8009bb8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	2180      	movs	r1, #128	; 0x80
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff ff49 	bl	8009a34 <SPI_WaitFlagStateUntilTimeout>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d02d      	beq.n	8009c04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bac:	f043 0220 	orr.w	r2, r3, #32
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e026      	b.n	8009c06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff ff36 	bl	8009a34 <SPI_WaitFlagStateUntilTimeout>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d01a      	beq.n	8009c04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd2:	f043 0220 	orr.w	r2, r3, #32
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e013      	b.n	8009c06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2200      	movs	r2, #0
 8009be6:	2101      	movs	r1, #1
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f7ff ff23 	bl	8009a34 <SPI_WaitFlagStateUntilTimeout>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d007      	beq.n	8009c04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf8:	f043 0220 	orr.w	r2, r3, #32
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e000      	b.n	8009c06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c1c:	4b1b      	ldr	r3, [pc, #108]	; (8009c8c <SPI_EndRxTxTransaction+0x7c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a1b      	ldr	r2, [pc, #108]	; (8009c90 <SPI_EndRxTxTransaction+0x80>)
 8009c22:	fba2 2303 	umull	r2, r3, r2, r3
 8009c26:	0d5b      	lsrs	r3, r3, #21
 8009c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c2c:	fb02 f303 	mul.w	r3, r2, r3
 8009c30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c3a:	d112      	bne.n	8009c62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2200      	movs	r2, #0
 8009c44:	2180      	movs	r1, #128	; 0x80
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7ff fef4 	bl	8009a34 <SPI_WaitFlagStateUntilTimeout>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d016      	beq.n	8009c80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c56:	f043 0220 	orr.w	r2, r3, #32
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e00f      	b.n	8009c82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00a      	beq.n	8009c7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c78:	2b80      	cmp	r3, #128	; 0x80
 8009c7a:	d0f2      	beq.n	8009c62 <SPI_EndRxTxTransaction+0x52>
 8009c7c:	e000      	b.n	8009c80 <SPI_EndRxTxTransaction+0x70>
        break;
 8009c7e:	bf00      	nop
  }

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	200007b8 	.word	0x200007b8
 8009c90:	165e9f81 	.word	0x165e9f81

08009c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d101      	bne.n	8009ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e031      	b.n	8009d0a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d106      	bne.n	8009cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7fa ff5c 	bl	8004b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f000 fb3c 	bl	800a350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d001      	beq.n	8009d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e03a      	b.n	8009da2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0201 	orr.w	r2, r2, #1
 8009d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d4c:	d00e      	beq.n	8009d6c <HAL_TIM_Base_Start_IT+0x58>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a16      	ldr	r2, [pc, #88]	; (8009dac <HAL_TIM_Base_Start_IT+0x98>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d009      	beq.n	8009d6c <HAL_TIM_Base_Start_IT+0x58>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a14      	ldr	r2, [pc, #80]	; (8009db0 <HAL_TIM_Base_Start_IT+0x9c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d004      	beq.n	8009d6c <HAL_TIM_Base_Start_IT+0x58>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a13      	ldr	r2, [pc, #76]	; (8009db4 <HAL_TIM_Base_Start_IT+0xa0>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d111      	bne.n	8009d90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b06      	cmp	r3, #6
 8009d7c:	d010      	beq.n	8009da0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f042 0201 	orr.w	r2, r2, #1
 8009d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d8e:	e007      	b.n	8009da0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f042 0201 	orr.w	r2, r2, #1
 8009d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bc80      	pop	{r7}
 8009daa:	4770      	bx	lr
 8009dac:	40000400 	.word	0x40000400
 8009db0:	40000800 	.word	0x40000800
 8009db4:	40010800 	.word	0x40010800

08009db8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e08f      	b.n	8009eec <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d106      	bne.n	8009de6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f7fa ff09 	bl	8004bf8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2202      	movs	r2, #2
 8009dea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	6812      	ldr	r2, [r2, #0]
 8009df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dfc:	f023 0307 	bic.w	r3, r3, #7
 8009e00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	3304      	adds	r3, #4
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	f000 fa9f 	bl	800a350 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e3a:	f023 0303 	bic.w	r3, r3, #3
 8009e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	689a      	ldr	r2, [r3, #8]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	021b      	lsls	r3, r3, #8
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009e58:	f023 030c 	bic.w	r3, r3, #12
 8009e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	021b      	lsls	r3, r3, #8
 8009e74:	4313      	orrs	r3, r2
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	011a      	lsls	r2, r3, #4
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	031b      	lsls	r3, r3, #12
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009e96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009e9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	695b      	ldr	r3, [r3, #20]
 8009ea8:	011b      	lsls	r3, r3, #4
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009f04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009f0c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d109      	bne.n	8009f28 <HAL_TIM_Encoder_Start+0x34>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d001      	beq.n	8009f1e <HAL_TIM_Encoder_Start+0x2a>
    {
      return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e050      	b.n	8009fc0 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2202      	movs	r2, #2
 8009f22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009f26:	e01c      	b.n	8009f62 <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2b04      	cmp	r3, #4
 8009f2c:	d109      	bne.n	8009f42 <HAL_TIM_Encoder_Start+0x4e>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d001      	beq.n	8009f38 <HAL_TIM_Encoder_Start+0x44>
    {
      return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e043      	b.n	8009fc0 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009f40:	e00f      	b.n	8009f62 <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d102      	bne.n	8009f4e <HAL_TIM_Encoder_Start+0x5a>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d001      	beq.n	8009f52 <HAL_TIM_Encoder_Start+0x5e>
    {
      return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e036      	b.n	8009fc0 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2202      	movs	r2, #2
 8009f56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d003      	beq.n	8009f70 <HAL_TIM_Encoder_Start+0x7c>
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2b04      	cmp	r3, #4
 8009f6c:	d008      	beq.n	8009f80 <HAL_TIM_Encoder_Start+0x8c>
 8009f6e:	e00f      	b.n	8009f90 <HAL_TIM_Encoder_Start+0x9c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2201      	movs	r2, #1
 8009f76:	2100      	movs	r1, #0
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f000 fae1 	bl	800a540 <TIM_CCxChannelCmd>
      break;
 8009f7e:	e016      	b.n	8009fae <HAL_TIM_Encoder_Start+0xba>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2201      	movs	r2, #1
 8009f86:	2104      	movs	r1, #4
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f000 fad9 	bl	800a540 <TIM_CCxChannelCmd>
      break;
 8009f8e:	e00e      	b.n	8009fae <HAL_TIM_Encoder_Start+0xba>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2201      	movs	r2, #1
 8009f96:	2100      	movs	r1, #0
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 fad1 	bl	800a540 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	2104      	movs	r1, #4
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 faca 	bl	800a540 <TIM_CCxChannelCmd>
      break;
 8009fac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f042 0201 	orr.w	r2, r2, #1
 8009fbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	f003 0302 	and.w	r3, r3, #2
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d122      	bne.n	800a024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d11b      	bne.n	800a024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f06f 0202 	mvn.w	r2, #2
 8009ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	699b      	ldr	r3, [r3, #24]
 800a002:	f003 0303 	and.w	r3, r3, #3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f985 	bl	800a31a <HAL_TIM_IC_CaptureCallback>
 800a010:	e005      	b.n	800a01e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f978 	bl	800a308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f987 	bl	800a32c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	f003 0304 	and.w	r3, r3, #4
 800a02e:	2b04      	cmp	r3, #4
 800a030:	d122      	bne.n	800a078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	f003 0304 	and.w	r3, r3, #4
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d11b      	bne.n	800a078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f06f 0204 	mvn.w	r2, #4
 800a048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2202      	movs	r2, #2
 800a04e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f95b 	bl	800a31a <HAL_TIM_IC_CaptureCallback>
 800a064:	e005      	b.n	800a072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f94e 	bl	800a308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f95d 	bl	800a32c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	f003 0308 	and.w	r3, r3, #8
 800a082:	2b08      	cmp	r3, #8
 800a084:	d122      	bne.n	800a0cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	2b08      	cmp	r3, #8
 800a092:	d11b      	bne.n	800a0cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f06f 0208 	mvn.w	r2, #8
 800a09c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2204      	movs	r2, #4
 800a0a2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	f003 0303 	and.w	r3, r3, #3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f931 	bl	800a31a <HAL_TIM_IC_CaptureCallback>
 800a0b8:	e005      	b.n	800a0c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f924 	bl	800a308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f933 	bl	800a32c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	f003 0310 	and.w	r3, r3, #16
 800a0d6:	2b10      	cmp	r3, #16
 800a0d8:	d122      	bne.n	800a120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	f003 0310 	and.w	r3, r3, #16
 800a0e4:	2b10      	cmp	r3, #16
 800a0e6:	d11b      	bne.n	800a120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f06f 0210 	mvn.w	r2, #16
 800a0f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2208      	movs	r2, #8
 800a0f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	69db      	ldr	r3, [r3, #28]
 800a0fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f907 	bl	800a31a <HAL_TIM_IC_CaptureCallback>
 800a10c:	e005      	b.n	800a11a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f8fa 	bl	800a308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f909 	bl	800a32c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d10e      	bne.n	800a14c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d107      	bne.n	800a14c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f06f 0201 	mvn.w	r2, #1
 800a144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7f9 fc30 	bl	80039ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a156:	2b40      	cmp	r3, #64	; 0x40
 800a158:	d10e      	bne.n	800a178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a164:	2b40      	cmp	r3, #64	; 0x40
 800a166:	d107      	bne.n	800a178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f8e3 	bl	800a33e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a190:	2b01      	cmp	r3, #1
 800a192:	d101      	bne.n	800a198 <HAL_TIM_ConfigClockSource+0x18>
 800a194:	2302      	movs	r3, #2
 800a196:	e0b3      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x180>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a1b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1d0:	d03e      	beq.n	800a250 <HAL_TIM_ConfigClockSource+0xd0>
 800a1d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1d6:	f200 8087 	bhi.w	800a2e8 <HAL_TIM_ConfigClockSource+0x168>
 800a1da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1de:	f000 8085 	beq.w	800a2ec <HAL_TIM_ConfigClockSource+0x16c>
 800a1e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1e6:	d87f      	bhi.n	800a2e8 <HAL_TIM_ConfigClockSource+0x168>
 800a1e8:	2b70      	cmp	r3, #112	; 0x70
 800a1ea:	d01a      	beq.n	800a222 <HAL_TIM_ConfigClockSource+0xa2>
 800a1ec:	2b70      	cmp	r3, #112	; 0x70
 800a1ee:	d87b      	bhi.n	800a2e8 <HAL_TIM_ConfigClockSource+0x168>
 800a1f0:	2b60      	cmp	r3, #96	; 0x60
 800a1f2:	d050      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x116>
 800a1f4:	2b60      	cmp	r3, #96	; 0x60
 800a1f6:	d877      	bhi.n	800a2e8 <HAL_TIM_ConfigClockSource+0x168>
 800a1f8:	2b50      	cmp	r3, #80	; 0x50
 800a1fa:	d03c      	beq.n	800a276 <HAL_TIM_ConfigClockSource+0xf6>
 800a1fc:	2b50      	cmp	r3, #80	; 0x50
 800a1fe:	d873      	bhi.n	800a2e8 <HAL_TIM_ConfigClockSource+0x168>
 800a200:	2b40      	cmp	r3, #64	; 0x40
 800a202:	d058      	beq.n	800a2b6 <HAL_TIM_ConfigClockSource+0x136>
 800a204:	2b40      	cmp	r3, #64	; 0x40
 800a206:	d86f      	bhi.n	800a2e8 <HAL_TIM_ConfigClockSource+0x168>
 800a208:	2b30      	cmp	r3, #48	; 0x30
 800a20a:	d064      	beq.n	800a2d6 <HAL_TIM_ConfigClockSource+0x156>
 800a20c:	2b30      	cmp	r3, #48	; 0x30
 800a20e:	d86b      	bhi.n	800a2e8 <HAL_TIM_ConfigClockSource+0x168>
 800a210:	2b20      	cmp	r3, #32
 800a212:	d060      	beq.n	800a2d6 <HAL_TIM_ConfigClockSource+0x156>
 800a214:	2b20      	cmp	r3, #32
 800a216:	d867      	bhi.n	800a2e8 <HAL_TIM_ConfigClockSource+0x168>
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d05c      	beq.n	800a2d6 <HAL_TIM_ConfigClockSource+0x156>
 800a21c:	2b10      	cmp	r3, #16
 800a21e:	d05a      	beq.n	800a2d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a220:	e062      	b.n	800a2e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6818      	ldr	r0, [r3, #0]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	6899      	ldr	r1, [r3, #8]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	685a      	ldr	r2, [r3, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	f000 f966 	bl	800a502 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a244:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	609a      	str	r2, [r3, #8]
      break;
 800a24e:	e04e      	b.n	800a2ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6818      	ldr	r0, [r3, #0]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	6899      	ldr	r1, [r3, #8]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	f000 f94f 	bl	800a502 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	689a      	ldr	r2, [r3, #8]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a272:	609a      	str	r2, [r3, #8]
      break;
 800a274:	e03b      	b.n	800a2ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6818      	ldr	r0, [r3, #0]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	6859      	ldr	r1, [r3, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	461a      	mov	r2, r3
 800a284:	f000 f8c6 	bl	800a414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2150      	movs	r1, #80	; 0x50
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 f91d 	bl	800a4ce <TIM_ITRx_SetConfig>
      break;
 800a294:	e02b      	b.n	800a2ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6818      	ldr	r0, [r3, #0]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	6859      	ldr	r1, [r3, #4]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f000 f8e4 	bl	800a470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2160      	movs	r1, #96	; 0x60
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 f90d 	bl	800a4ce <TIM_ITRx_SetConfig>
      break;
 800a2b4:	e01b      	b.n	800a2ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	6859      	ldr	r1, [r3, #4]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f000 f8a6 	bl	800a414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2140      	movs	r1, #64	; 0x40
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 f8fd 	bl	800a4ce <TIM_ITRx_SetConfig>
      break;
 800a2d4:	e00b      	b.n	800a2ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4610      	mov	r0, r2
 800a2e2:	f000 f8f4 	bl	800a4ce <TIM_ITRx_SetConfig>
        break;
 800a2e6:	e002      	b.n	800a2ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a2e8:	bf00      	nop
 800a2ea:	e000      	b.n	800a2ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a2ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	bc80      	pop	{r7}
 800a318:	4770      	bx	lr

0800a31a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a322:	bf00      	nop
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	bc80      	pop	{r7}
 800a32a:	4770      	bx	lr

0800a32c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	bc80      	pop	{r7}
 800a33c:	4770      	bx	lr

0800a33e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a346:	bf00      	nop
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bc80      	pop	{r7}
 800a34e:	4770      	bx	lr

0800a350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a366:	d007      	beq.n	800a378 <TIM_Base_SetConfig+0x28>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a25      	ldr	r2, [pc, #148]	; (800a400 <TIM_Base_SetConfig+0xb0>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d003      	beq.n	800a378 <TIM_Base_SetConfig+0x28>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a24      	ldr	r2, [pc, #144]	; (800a404 <TIM_Base_SetConfig+0xb4>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d108      	bne.n	800a38a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a37e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	4313      	orrs	r3, r2
 800a388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a390:	d013      	beq.n	800a3ba <TIM_Base_SetConfig+0x6a>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a1a      	ldr	r2, [pc, #104]	; (800a400 <TIM_Base_SetConfig+0xb0>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d00f      	beq.n	800a3ba <TIM_Base_SetConfig+0x6a>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a19      	ldr	r2, [pc, #100]	; (800a404 <TIM_Base_SetConfig+0xb4>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d00b      	beq.n	800a3ba <TIM_Base_SetConfig+0x6a>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a18      	ldr	r2, [pc, #96]	; (800a408 <TIM_Base_SetConfig+0xb8>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d007      	beq.n	800a3ba <TIM_Base_SetConfig+0x6a>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a17      	ldr	r2, [pc, #92]	; (800a40c <TIM_Base_SetConfig+0xbc>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d003      	beq.n	800a3ba <TIM_Base_SetConfig+0x6a>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a16      	ldr	r2, [pc, #88]	; (800a410 <TIM_Base_SetConfig+0xc0>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d108      	bne.n	800a3cc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	689a      	ldr	r2, [r3, #8]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	615a      	str	r2, [r3, #20]
}
 800a3f6:	bf00      	nop
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bc80      	pop	{r7}
 800a3fe:	4770      	bx	lr
 800a400:	40000400 	.word	0x40000400
 800a404:	40000800 	.word	0x40000800
 800a408:	40010800 	.word	0x40010800
 800a40c:	40010c00 	.word	0x40010c00
 800a410:	40011000 	.word	0x40011000

0800a414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6a1b      	ldr	r3, [r3, #32]
 800a424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	f023 0201 	bic.w	r2, r3, #1
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a43e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	011b      	lsls	r3, r3, #4
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	4313      	orrs	r3, r2
 800a448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f023 030a 	bic.w	r3, r3, #10
 800a450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a452:	697a      	ldr	r2, [r7, #20]
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	4313      	orrs	r3, r2
 800a458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	621a      	str	r2, [r3, #32]
}
 800a466:	bf00      	nop
 800a468:	371c      	adds	r7, #28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bc80      	pop	{r7}
 800a46e:	4770      	bx	lr

0800a470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a470:	b480      	push	{r7}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6a1b      	ldr	r3, [r3, #32]
 800a480:	f023 0210 	bic.w	r2, r3, #16
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a49a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	031b      	lsls	r3, r3, #12
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	011b      	lsls	r3, r3, #4
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	621a      	str	r2, [r3, #32]
}
 800a4c4:	bf00      	nop
 800a4c6:	371c      	adds	r7, #28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr

0800a4ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b085      	sub	sp, #20
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	f043 0307 	orr.w	r3, r3, #7
 800a4f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	609a      	str	r2, [r3, #8]
}
 800a4f8:	bf00      	nop
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bc80      	pop	{r7}
 800a500:	4770      	bx	lr

0800a502 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a502:	b480      	push	{r7}
 800a504:	b087      	sub	sp, #28
 800a506:	af00      	add	r7, sp, #0
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	607a      	str	r2, [r7, #4]
 800a50e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a51c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	021a      	lsls	r2, r3, #8
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	431a      	orrs	r2, r3
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	4313      	orrs	r3, r2
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	609a      	str	r2, [r3, #8]
}
 800a536:	bf00      	nop
 800a538:	371c      	adds	r7, #28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bc80      	pop	{r7}
 800a53e:	4770      	bx	lr

0800a540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a540:	b480      	push	{r7}
 800a542:	b087      	sub	sp, #28
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	f003 031f 	and.w	r3, r3, #31
 800a552:	2201      	movs	r2, #1
 800a554:	fa02 f303 	lsl.w	r3, r2, r3
 800a558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6a1a      	ldr	r2, [r3, #32]
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	43db      	mvns	r3, r3
 800a562:	401a      	ands	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6a1a      	ldr	r2, [r3, #32]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f003 031f 	and.w	r3, r3, #31
 800a572:	6879      	ldr	r1, [r7, #4]
 800a574:	fa01 f303 	lsl.w	r3, r1, r3
 800a578:	431a      	orrs	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	621a      	str	r2, [r3, #32]
}
 800a57e:	bf00      	nop
 800a580:	371c      	adds	r7, #28
 800a582:	46bd      	mov	sp, r7
 800a584:	bc80      	pop	{r7}
 800a586:	4770      	bx	lr

0800a588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d101      	bne.n	800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a59c:	2302      	movs	r3, #2
 800a59e:	e046      	b.n	800a62e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e2:	d00e      	beq.n	800a602 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a13      	ldr	r2, [pc, #76]	; (800a638 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d009      	beq.n	800a602 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a12      	ldr	r2, [pc, #72]	; (800a63c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d004      	beq.n	800a602 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a10      	ldr	r2, [pc, #64]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d10c      	bne.n	800a61c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	4313      	orrs	r3, r2
 800a612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	bc80      	pop	{r7}
 800a636:	4770      	bx	lr
 800a638:	40000400 	.word	0x40000400
 800a63c:	40000800 	.word	0x40000800
 800a640:	40010800 	.word	0x40010800

0800a644 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a654:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a658:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bc80      	pop	{r7}
 800a66e:	4770      	bx	lr

0800a670 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a678:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a67c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a684:	b29a      	uxth	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	b29b      	uxth	r3, r3
 800a68a:	43db      	mvns	r3, r3
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	4013      	ands	r3, r2
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bc80      	pop	{r7}
 800a6a2:	4770      	bx	lr

0800a6a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a6a4:	b084      	sub	sp, #16
 800a6a6:	b480      	push	{r7}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	f107 0014 	add.w	r0, r7, #20
 800a6b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bc80      	pop	{r7}
 800a6e0:	b004      	add	sp, #16
 800a6e2:	4770      	bx	lr

0800a6e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b09b      	sub	sp, #108	; 0x6c
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	b29b      	uxth	r3, r3
 800a702:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	78db      	ldrb	r3, [r3, #3]
 800a712:	2b03      	cmp	r3, #3
 800a714:	d81f      	bhi.n	800a756 <USB_ActivateEndpoint+0x72>
 800a716:	a201      	add	r2, pc, #4	; (adr r2, 800a71c <USB_ActivateEndpoint+0x38>)
 800a718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71c:	0800a72d 	.word	0x0800a72d
 800a720:	0800a749 	.word	0x0800a749
 800a724:	0800a75f 	.word	0x0800a75f
 800a728:	0800a73b 	.word	0x0800a73b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a72c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a734:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a738:	e012      	b.n	800a760 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a73a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a73e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a742:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a746:	e00b      	b.n	800a760 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a748:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a74c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a750:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a754:	e004      	b.n	800a760 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800a75c:	e000      	b.n	800a760 <USB_ActivateEndpoint+0x7c>
      break;
 800a75e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	441a      	add	r2, r3
 800a76a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a76e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a77a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a77e:	b29b      	uxth	r3, r3
 800a780:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	b29b      	uxth	r3, r3
 800a790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a798:	b29a      	uxth	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	441a      	add	r2, r3
 800a7b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a7b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	7b1b      	ldrb	r3, [r3, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f040 8149 	bne.w	800aa64 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	785b      	ldrb	r3, [r3, #1]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 8084 	beq.w	800a8e4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	617b      	str	r3, [r7, #20]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	617b      	str	r3, [r7, #20]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	011a      	lsls	r2, r3, #4
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7fe:	613b      	str	r3, [r7, #16]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	88db      	ldrh	r3, [r3, #6]
 800a804:	085b      	lsrs	r3, r3, #1
 800a806:	b29b      	uxth	r3, r3
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4413      	add	r3, r2
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	81fb      	strh	r3, [r7, #14]
 800a81e:	89fb      	ldrh	r3, [r7, #14]
 800a820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a824:	2b00      	cmp	r3, #0
 800a826:	d01b      	beq.n	800a860 <USB_ActivateEndpoint+0x17c>
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	b29b      	uxth	r3, r3
 800a836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a83a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a83e:	81bb      	strh	r3, [r7, #12]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	441a      	add	r2, r3
 800a84a:	89bb      	ldrh	r3, [r7, #12]
 800a84c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a858:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	78db      	ldrb	r3, [r3, #3]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d020      	beq.n	800a8aa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4413      	add	r3, r2
 800a872:	881b      	ldrh	r3, [r3, #0]
 800a874:	b29b      	uxth	r3, r3
 800a876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a87a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a87e:	813b      	strh	r3, [r7, #8]
 800a880:	893b      	ldrh	r3, [r7, #8]
 800a882:	f083 0320 	eor.w	r3, r3, #32
 800a886:	813b      	strh	r3, [r7, #8]
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	441a      	add	r2, r3
 800a892:	893b      	ldrh	r3, [r7, #8]
 800a894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a89c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	8013      	strh	r3, [r2, #0]
 800a8a8:	e27f      	b.n	800adaa <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	881b      	ldrh	r3, [r3, #0]
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8c0:	817b      	strh	r3, [r7, #10]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	441a      	add	r2, r3
 800a8cc:	897b      	ldrh	r3, [r7, #10]
 800a8ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	8013      	strh	r3, [r2, #0]
 800a8e2:	e262      	b.n	800adaa <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	4413      	add	r3, r2
 800a8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	011a      	lsls	r2, r3, #4
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	4413      	add	r3, r2
 800a902:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a906:	62bb      	str	r3, [r7, #40]	; 0x28
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	88db      	ldrh	r3, [r3, #6]
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	b29b      	uxth	r3, r3
 800a910:	005b      	lsls	r3, r3, #1
 800a912:	b29a      	uxth	r2, r3
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a916:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a922:	b29b      	uxth	r3, r3
 800a924:	461a      	mov	r2, r3
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	4413      	add	r3, r2
 800a92a:	627b      	str	r3, [r7, #36]	; 0x24
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	011a      	lsls	r2, r3, #4
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	4413      	add	r3, r2
 800a936:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a93a:	623b      	str	r3, [r7, #32]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d112      	bne.n	800a96a <USB_ActivateEndpoint+0x286>
 800a944:	6a3b      	ldr	r3, [r7, #32]
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	b29b      	uxth	r3, r3
 800a94a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a94e:	b29a      	uxth	r2, r3
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	801a      	strh	r2, [r3, #0]
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	b29b      	uxth	r3, r3
 800a95a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a95e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a962:	b29a      	uxth	r2, r3
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	801a      	strh	r2, [r3, #0]
 800a968:	e02f      	b.n	800a9ca <USB_ActivateEndpoint+0x2e6>
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	2b3e      	cmp	r3, #62	; 0x3e
 800a970:	d813      	bhi.n	800a99a <USB_ActivateEndpoint+0x2b6>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	085b      	lsrs	r3, r3, #1
 800a978:	663b      	str	r3, [r7, #96]	; 0x60
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <USB_ActivateEndpoint+0x2a8>
 800a986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a988:	3301      	adds	r3, #1
 800a98a:	663b      	str	r3, [r7, #96]	; 0x60
 800a98c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a98e:	b29b      	uxth	r3, r3
 800a990:	029b      	lsls	r3, r3, #10
 800a992:	b29a      	uxth	r2, r3
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	801a      	strh	r2, [r3, #0]
 800a998:	e017      	b.n	800a9ca <USB_ActivateEndpoint+0x2e6>
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	095b      	lsrs	r3, r3, #5
 800a9a0:	663b      	str	r3, [r7, #96]	; 0x60
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f003 031f 	and.w	r3, r3, #31
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d102      	bne.n	800a9b4 <USB_ActivateEndpoint+0x2d0>
 800a9ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	663b      	str	r3, [r7, #96]	; 0x60
 800a9b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	029b      	lsls	r3, r3, #10
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	83fb      	strh	r3, [r7, #30]
 800a9d8:	8bfb      	ldrh	r3, [r7, #30]
 800a9da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d01b      	beq.n	800aa1a <USB_ActivateEndpoint+0x336>
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9f8:	83bb      	strh	r3, [r7, #28]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	441a      	add	r2, r3
 800aa04:	8bbb      	ldrh	r3, [r7, #28]
 800aa06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa30:	837b      	strh	r3, [r7, #26]
 800aa32:	8b7b      	ldrh	r3, [r7, #26]
 800aa34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa38:	837b      	strh	r3, [r7, #26]
 800aa3a:	8b7b      	ldrh	r3, [r7, #26]
 800aa3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa40:	837b      	strh	r3, [r7, #26]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	441a      	add	r2, r3
 800aa4c:	8b7b      	ldrh	r3, [r7, #26]
 800aa4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	8013      	strh	r3, [r2, #0]
 800aa62:	e1a2      	b.n	800adaa <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa7a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	441a      	add	r2, r3
 800aa88:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800aa8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa94:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aa98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	65bb      	str	r3, [r7, #88]	; 0x58
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	461a      	mov	r2, r3
 800aaae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aab0:	4413      	add	r3, r2
 800aab2:	65bb      	str	r3, [r7, #88]	; 0x58
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	011a      	lsls	r2, r3, #4
 800aaba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aabc:	4413      	add	r3, r2
 800aabe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aac2:	657b      	str	r3, [r7, #84]	; 0x54
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	891b      	ldrh	r3, [r3, #8]
 800aac8:	085b      	lsrs	r3, r3, #1
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	b29a      	uxth	r2, r3
 800aad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aad2:	801a      	strh	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	653b      	str	r3, [r7, #80]	; 0x50
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aade:	b29b      	uxth	r3, r3
 800aae0:	461a      	mov	r2, r3
 800aae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aae4:	4413      	add	r3, r2
 800aae6:	653b      	str	r3, [r7, #80]	; 0x50
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	011a      	lsls	r2, r3, #4
 800aaee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800aaf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	895b      	ldrh	r3, [r3, #10]
 800aafc:	085b      	lsrs	r3, r3, #1
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	005b      	lsls	r3, r3, #1
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab06:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	785b      	ldrb	r3, [r3, #1]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f040 8091 	bne.w	800ac34 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4413      	add	r3, r2
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ab20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ab22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d01b      	beq.n	800ab62 <USB_ActivateEndpoint+0x47e>
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab40:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	441a      	add	r2, r3
 800ab4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ab4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	873b      	strh	r3, [r7, #56]	; 0x38
 800ab70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ab72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d01b      	beq.n	800abb2 <USB_ActivateEndpoint+0x4ce>
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab90:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	441a      	add	r2, r3
 800ab9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800abae:	b29b      	uxth	r3, r3
 800abb0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abc8:	86bb      	strh	r3, [r7, #52]	; 0x34
 800abca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800abcc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800abd0:	86bb      	strh	r3, [r7, #52]	; 0x34
 800abd2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800abd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800abd8:	86bb      	strh	r3, [r7, #52]	; 0x34
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	441a      	add	r2, r3
 800abe4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800abe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	881b      	ldrh	r3, [r3, #0]
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac10:	867b      	strh	r3, [r7, #50]	; 0x32
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	441a      	add	r2, r3
 800ac1c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ac1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	8013      	strh	r3, [r2, #0]
 800ac32:	e0ba      	b.n	800adaa <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ac44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ac48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d01d      	beq.n	800ac8c <USB_ActivateEndpoint+0x5a8>
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	441a      	add	r2, r3
 800ac74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ac78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	881b      	ldrh	r3, [r3, #0]
 800ac98:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ac9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d01d      	beq.n	800ace4 <USB_ActivateEndpoint+0x600>
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	441a      	add	r2, r3
 800accc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800acd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	78db      	ldrb	r3, [r3, #3]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d024      	beq.n	800ad36 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4413      	add	r3, r2
 800acf6:	881b      	ldrh	r3, [r3, #0]
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ad06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ad0a:	f083 0320 	eor.w	r3, r3, #32
 800ad0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	441a      	add	r2, r3
 800ad1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ad20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	8013      	strh	r3, [r2, #0]
 800ad34:	e01d      	b.n	800ad72 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad4c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	441a      	add	r2, r3
 800ad5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ad5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad88:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	441a      	add	r2, r3
 800ad94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ad96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ada2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800adaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800adae:	4618      	mov	r0, r3
 800adb0:	376c      	adds	r7, #108	; 0x6c
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bc80      	pop	{r7}
 800adb6:	4770      	bx	lr

0800adb8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800adb8:	b480      	push	{r7}
 800adba:	b08d      	sub	sp, #52	; 0x34
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	7b1b      	ldrb	r3, [r3, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f040 808e 	bne.w	800aee8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	785b      	ldrb	r3, [r3, #1]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d044      	beq.n	800ae5e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	881b      	ldrh	r3, [r3, #0]
 800ade0:	81bb      	strh	r3, [r7, #12]
 800ade2:	89bb      	ldrh	r3, [r7, #12]
 800ade4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d01b      	beq.n	800ae24 <USB_DeactivateEndpoint+0x6c>
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae02:	817b      	strh	r3, [r7, #10]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	441a      	add	r2, r3
 800ae0e:	897b      	ldrh	r3, [r7, #10]
 800ae10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae3a:	813b      	strh	r3, [r7, #8]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	441a      	add	r2, r3
 800ae46:	893b      	ldrh	r3, [r7, #8]
 800ae48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	8013      	strh	r3, [r2, #0]
 800ae5c:	e192      	b.n	800b184 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4413      	add	r3, r2
 800ae68:	881b      	ldrh	r3, [r3, #0]
 800ae6a:	827b      	strh	r3, [r7, #18]
 800ae6c:	8a7b      	ldrh	r3, [r7, #18]
 800ae6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d01b      	beq.n	800aeae <USB_DeactivateEndpoint+0xf6>
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	4413      	add	r3, r2
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8c:	823b      	strh	r3, [r7, #16]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	441a      	add	r2, r3
 800ae98:	8a3b      	ldrh	r3, [r7, #16]
 800ae9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4413      	add	r3, r2
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec4:	81fb      	strh	r3, [r7, #14]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	441a      	add	r2, r3
 800aed0:	89fb      	ldrh	r3, [r7, #14]
 800aed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	8013      	strh	r3, [r2, #0]
 800aee6:	e14d      	b.n	800b184 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	785b      	ldrb	r3, [r3, #1]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f040 80a5 	bne.w	800b03c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4413      	add	r3, r2
 800aefc:	881b      	ldrh	r3, [r3, #0]
 800aefe:	843b      	strh	r3, [r7, #32]
 800af00:	8c3b      	ldrh	r3, [r7, #32]
 800af02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af06:	2b00      	cmp	r3, #0
 800af08:	d01b      	beq.n	800af42 <USB_DeactivateEndpoint+0x18a>
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	b29b      	uxth	r3, r3
 800af18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af20:	83fb      	strh	r3, [r7, #30]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	441a      	add	r2, r3
 800af2c:	8bfb      	ldrh	r3, [r7, #30]
 800af2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af3e:	b29b      	uxth	r3, r3
 800af40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	83bb      	strh	r3, [r7, #28]
 800af50:	8bbb      	ldrh	r3, [r7, #28]
 800af52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d01b      	beq.n	800af92 <USB_DeactivateEndpoint+0x1da>
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	881b      	ldrh	r3, [r3, #0]
 800af66:	b29b      	uxth	r3, r3
 800af68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af70:	837b      	strh	r3, [r7, #26]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	441a      	add	r2, r3
 800af7c:	8b7b      	ldrh	r3, [r7, #26]
 800af7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af8e:	b29b      	uxth	r3, r3
 800af90:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	4413      	add	r3, r2
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afa8:	833b      	strh	r3, [r7, #24]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	441a      	add	r2, r3
 800afb4:	8b3b      	ldrh	r3, [r7, #24]
 800afb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afe0:	82fb      	strh	r3, [r7, #22]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	441a      	add	r2, r3
 800afec:	8afb      	ldrh	r3, [r7, #22]
 800afee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800affa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800affe:	b29b      	uxth	r3, r3
 800b000:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	4413      	add	r3, r2
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	b29b      	uxth	r3, r3
 800b010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b018:	82bb      	strh	r3, [r7, #20]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	441a      	add	r2, r3
 800b024:	8abb      	ldrh	r3, [r7, #20]
 800b026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b02a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b02e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b036:	b29b      	uxth	r3, r3
 800b038:	8013      	strh	r3, [r2, #0]
 800b03a:	e0a3      	b.n	800b184 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	881b      	ldrh	r3, [r3, #0]
 800b048:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b04a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b04c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d01b      	beq.n	800b08c <USB_DeactivateEndpoint+0x2d4>
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	881b      	ldrh	r3, [r3, #0]
 800b060:	b29b      	uxth	r3, r3
 800b062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b06a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	441a      	add	r2, r3
 800b076:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b07c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b088:	b29b      	uxth	r3, r3
 800b08a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	881b      	ldrh	r3, [r3, #0]
 800b098:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b09a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d01b      	beq.n	800b0dc <USB_DeactivateEndpoint+0x324>
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	881b      	ldrh	r3, [r3, #0]
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ba:	853b      	strh	r3, [r7, #40]	; 0x28
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	441a      	add	r2, r3
 800b0c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b0c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	441a      	add	r2, r3
 800b0fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b110:	b29b      	uxth	r3, r3
 800b112:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4413      	add	r3, r2
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	b29b      	uxth	r3, r3
 800b122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b12a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	441a      	add	r2, r3
 800b136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b13c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b148:	b29b      	uxth	r3, r3
 800b14a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b162:	847b      	strh	r3, [r7, #34]	; 0x22
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	441a      	add	r2, r3
 800b16e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b17c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b180:	b29b      	uxth	r3, r3
 800b182:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3734      	adds	r7, #52	; 0x34
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bc80      	pop	{r7}
 800b18e:	4770      	bx	lr

0800b190 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b0cc      	sub	sp, #304	; 0x130
 800b194:	af00      	add	r7, sp, #0
 800b196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b19a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b19e:	6018      	str	r0, [r3, #0]
 800b1a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1a8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b1aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	785b      	ldrb	r3, [r3, #1]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	f041 817d 	bne.w	800c4b6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b1bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	699a      	ldr	r2, [r3, #24]
 800b1c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d908      	bls.n	800b1ea <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b1d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b1e8:	e007      	b.n	800b1fa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b1ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b1fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	7b1b      	ldrb	r3, [r3, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d152      	bne.n	800b2b0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b20a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b20e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6959      	ldr	r1, [r3, #20]
 800b216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b21a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	88da      	ldrh	r2, [r3, #6]
 800b222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b226:	b29b      	uxth	r3, r3
 800b228:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b22c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b230:	6800      	ldr	r0, [r0, #0]
 800b232:	f001 ff0e 	bl	800d052 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b23a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b23e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b242:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b246:	6812      	ldr	r2, [r2, #0]
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b24e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b258:	b29b      	uxth	r3, r3
 800b25a:	4619      	mov	r1, r3
 800b25c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b260:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b264:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b268:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800b26c:	6812      	ldr	r2, [r2, #0]
 800b26e:	440a      	add	r2, r1
 800b270:	601a      	str	r2, [r3, #0]
 800b272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	011a      	lsls	r2, r3, #4
 800b280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b284:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4413      	add	r3, r2
 800b28c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b294:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	801a      	strh	r2, [r3, #0]
 800b2ac:	f001 b8b5 	b.w	800c41a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b2b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	78db      	ldrb	r3, [r3, #3]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	f040 84c6 	bne.w	800bc4e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b2c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	6a1a      	ldr	r2, [r3, #32]
 800b2ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	f240 8443 	bls.w	800bb66 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800b2e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	881b      	ldrh	r3, [r3, #0]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b306:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b30a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b30e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b318:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	441a      	add	r2, r3
 800b324:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b32c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b330:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b338:	b29b      	uxth	r3, r3
 800b33a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b33c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	6a1a      	ldr	r2, [r3, #32]
 800b348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b34c:	1ad2      	subs	r2, r2, r3
 800b34e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b35a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b35e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4413      	add	r3, r2
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	b29b      	uxth	r3, r3
 800b378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f000 823e 	beq.w	800b7fe <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b386:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b38a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b38e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b392:	6812      	ldr	r2, [r2, #0]
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b39a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	785b      	ldrb	r3, [r3, #1]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f040 809a 	bne.w	800b4dc <USB_EPStartXfer+0x34c>
 800b3a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b3b4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b3b8:	6812      	ldr	r2, [r2, #0]
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b3da:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800b3de:	6812      	ldr	r2, [r2, #0]
 800b3e0:	440a      	add	r2, r1
 800b3e2:	601a      	str	r2, [r3, #0]
 800b3e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	011a      	lsls	r2, r3, #4
 800b3f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800b402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b406:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b410:	2b00      	cmp	r3, #0
 800b412:	d122      	bne.n	800b45a <USB_EPStartXfer+0x2ca>
 800b414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b418:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	881b      	ldrh	r3, [r3, #0]
 800b420:	b29b      	uxth	r3, r3
 800b422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b426:	b29a      	uxth	r2, r3
 800b428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b42c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	801a      	strh	r2, [r3, #0]
 800b434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b438:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	881b      	ldrh	r3, [r3, #0]
 800b440:	b29b      	uxth	r3, r3
 800b442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b450:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	801a      	strh	r2, [r3, #0]
 800b458:	e079      	b.n	800b54e <USB_EPStartXfer+0x3be>
 800b45a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b45e:	2b3e      	cmp	r3, #62	; 0x3e
 800b460:	d81b      	bhi.n	800b49a <USB_EPStartXfer+0x30a>
 800b462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b466:	085b      	lsrs	r3, r3, #1
 800b468:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b46c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	2b00      	cmp	r3, #0
 800b476:	d004      	beq.n	800b482 <USB_EPStartXfer+0x2f2>
 800b478:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b47c:	3301      	adds	r3, #1
 800b47e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b482:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b486:	b29b      	uxth	r3, r3
 800b488:	029b      	lsls	r3, r3, #10
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b490:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	801a      	strh	r2, [r3, #0]
 800b498:	e059      	b.n	800b54e <USB_EPStartXfer+0x3be>
 800b49a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b49e:	095b      	lsrs	r3, r3, #5
 800b4a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b4a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4a8:	f003 031f 	and.w	r3, r3, #31
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d104      	bne.n	800b4ba <USB_EPStartXfer+0x32a>
 800b4b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b4ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	029b      	lsls	r3, r3, #10
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	801a      	strh	r2, [r3, #0]
 800b4da:	e038      	b.n	800b54e <USB_EPStartXfer+0x3be>
 800b4dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	785b      	ldrb	r3, [r3, #1]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d130      	bne.n	800b54e <USB_EPStartXfer+0x3be>
 800b4ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b502:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b506:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b50a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800b50e:	6812      	ldr	r2, [r2, #0]
 800b510:	440a      	add	r2, r1
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	011a      	lsls	r2, r3, #4
 800b522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b526:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4413      	add	r3, r2
 800b52e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800b532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b53a:	601a      	str	r2, [r3, #0]
 800b53c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b540:	b29a      	uxth	r2, r3
 800b542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b54e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	895b      	ldrh	r3, [r3, #10]
 800b55a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b55e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6959      	ldr	r1, [r3, #20]
 800b56a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b56e:	b29b      	uxth	r3, r3
 800b570:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b574:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b578:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b57c:	6800      	ldr	r0, [r0, #0]
 800b57e:	f001 fd68 	bl	800d052 <USB_WritePMA>
            ep->xfer_buff += len;
 800b582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	695a      	ldr	r2, [r3, #20]
 800b58e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b592:	441a      	add	r2, r3
 800b594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b5a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	6a1a      	ldr	r2, [r3, #32]
 800b5ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d90f      	bls.n	800b5dc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800b5bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6a1a      	ldr	r2, [r3, #32]
 800b5c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5cc:	1ad2      	subs	r2, r2, r3
 800b5ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	621a      	str	r2, [r3, #32]
 800b5da:	e00e      	b.n	800b5fa <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800b5dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6a1b      	ldr	r3, [r3, #32]
 800b5e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800b5ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b5fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	785b      	ldrb	r3, [r3, #1]
 800b606:	2b00      	cmp	r3, #0
 800b608:	f040 809a 	bne.w	800b740 <USB_EPStartXfer+0x5b0>
 800b60c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b610:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b614:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b618:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b61c:	6812      	ldr	r2, [r2, #0]
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b624:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b62e:	b29b      	uxth	r3, r3
 800b630:	4619      	mov	r1, r3
 800b632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b636:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b63a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b63e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800b642:	6812      	ldr	r2, [r2, #0]
 800b644:	440a      	add	r2, r1
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b64c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	011a      	lsls	r2, r3, #4
 800b656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b65a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4413      	add	r3, r2
 800b662:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b66a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b674:	2b00      	cmp	r3, #0
 800b676:	d122      	bne.n	800b6be <USB_EPStartXfer+0x52e>
 800b678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b67c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	881b      	ldrh	r3, [r3, #0]
 800b684:	b29b      	uxth	r3, r3
 800b686:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b690:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	801a      	strh	r2, [r3, #0]
 800b698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b69c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	801a      	strh	r2, [r3, #0]
 800b6bc:	e083      	b.n	800b7c6 <USB_EPStartXfer+0x636>
 800b6be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6c2:	2b3e      	cmp	r3, #62	; 0x3e
 800b6c4:	d81b      	bhi.n	800b6fe <USB_EPStartXfer+0x56e>
 800b6c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6ca:	085b      	lsrs	r3, r3, #1
 800b6cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b6d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6d4:	f003 0301 	and.w	r3, r3, #1
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d004      	beq.n	800b6e6 <USB_EPStartXfer+0x556>
 800b6dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b6e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	029b      	lsls	r3, r3, #10
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	801a      	strh	r2, [r3, #0]
 800b6fc:	e063      	b.n	800b7c6 <USB_EPStartXfer+0x636>
 800b6fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b702:	095b      	lsrs	r3, r3, #5
 800b704:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b70c:	f003 031f 	and.w	r3, r3, #31
 800b710:	2b00      	cmp	r3, #0
 800b712:	d104      	bne.n	800b71e <USB_EPStartXfer+0x58e>
 800b714:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b718:	3b01      	subs	r3, #1
 800b71a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b71e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b722:	b29b      	uxth	r3, r3
 800b724:	029b      	lsls	r3, r3, #10
 800b726:	b29b      	uxth	r3, r3
 800b728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b72c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b730:	b29a      	uxth	r2, r3
 800b732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b736:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	801a      	strh	r2, [r3, #0]
 800b73e:	e042      	b.n	800b7c6 <USB_EPStartXfer+0x636>
 800b740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	785b      	ldrb	r3, [r3, #1]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d13a      	bne.n	800b7c6 <USB_EPStartXfer+0x636>
 800b750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b754:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b758:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b75c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b760:	6812      	ldr	r2, [r2, #0]
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b772:	b29b      	uxth	r3, r3
 800b774:	4619      	mov	r1, r3
 800b776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b77a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b77e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b782:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800b786:	6812      	ldr	r2, [r2, #0]
 800b788:	440a      	add	r2, r1
 800b78a:	601a      	str	r2, [r3, #0]
 800b78c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	011a      	lsls	r2, r3, #4
 800b79a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b79e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b7aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b7c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	891b      	ldrh	r3, [r3, #8]
 800b7d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6959      	ldr	r1, [r3, #20]
 800b7e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b7ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b7f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b7f4:	6800      	ldr	r0, [r0, #0]
 800b7f6:	f001 fc2c 	bl	800d052 <USB_WritePMA>
 800b7fa:	f000 be0e 	b.w	800c41a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b7fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	785b      	ldrb	r3, [r3, #1]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d16d      	bne.n	800b8ea <USB_EPStartXfer+0x75a>
 800b80e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b812:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	64bb      	str	r3, [r7, #72]	; 0x48
 800b81a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b81e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b828:	b29b      	uxth	r3, r3
 800b82a:	461a      	mov	r2, r3
 800b82c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b82e:	4413      	add	r3, r2
 800b830:	64bb      	str	r3, [r7, #72]	; 0x48
 800b832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	011a      	lsls	r2, r3, #4
 800b840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b842:	4413      	add	r3, r2
 800b844:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b848:	647b      	str	r3, [r7, #68]	; 0x44
 800b84a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d112      	bne.n	800b878 <USB_EPStartXfer+0x6e8>
 800b852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b854:	881b      	ldrh	r3, [r3, #0]
 800b856:	b29b      	uxth	r3, r3
 800b858:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b860:	801a      	strh	r2, [r3, #0]
 800b862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	b29b      	uxth	r3, r3
 800b868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b86c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b870:	b29a      	uxth	r2, r3
 800b872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b874:	801a      	strh	r2, [r3, #0]
 800b876:	e063      	b.n	800b940 <USB_EPStartXfer+0x7b0>
 800b878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b87c:	2b3e      	cmp	r3, #62	; 0x3e
 800b87e:	d817      	bhi.n	800b8b0 <USB_EPStartXfer+0x720>
 800b880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b884:	085b      	lsrs	r3, r3, #1
 800b886:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b88a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	2b00      	cmp	r3, #0
 800b894:	d004      	beq.n	800b8a0 <USB_EPStartXfer+0x710>
 800b896:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b89a:	3301      	adds	r3, #1
 800b89c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b8a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	029b      	lsls	r3, r3, #10
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ac:	801a      	strh	r2, [r3, #0]
 800b8ae:	e047      	b.n	800b940 <USB_EPStartXfer+0x7b0>
 800b8b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8b4:	095b      	lsrs	r3, r3, #5
 800b8b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b8ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8be:	f003 031f 	and.w	r3, r3, #31
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d104      	bne.n	800b8d0 <USB_EPStartXfer+0x740>
 800b8c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b8d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	029b      	lsls	r3, r3, #10
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8e6:	801a      	strh	r2, [r3, #0]
 800b8e8:	e02a      	b.n	800b940 <USB_EPStartXfer+0x7b0>
 800b8ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	785b      	ldrb	r3, [r3, #1]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d122      	bne.n	800b940 <USB_EPStartXfer+0x7b0>
 800b8fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	653b      	str	r3, [r7, #80]	; 0x50
 800b906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b90a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b914:	b29b      	uxth	r3, r3
 800b916:	461a      	mov	r2, r3
 800b918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b91a:	4413      	add	r3, r2
 800b91c:	653b      	str	r3, [r7, #80]	; 0x50
 800b91e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	011a      	lsls	r2, r3, #4
 800b92c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b92e:	4413      	add	r3, r2
 800b930:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b934:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b93e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	891b      	ldrh	r3, [r3, #8]
 800b94c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6959      	ldr	r1, [r3, #20]
 800b95c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b960:	b29b      	uxth	r3, r3
 800b962:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b966:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b96a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b96e:	6800      	ldr	r0, [r0, #0]
 800b970:	f001 fb6f 	bl	800d052 <USB_WritePMA>
            ep->xfer_buff += len;
 800b974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	695a      	ldr	r2, [r3, #20]
 800b980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b984:	441a      	add	r2, r3
 800b986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b98a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6a1a      	ldr	r2, [r3, #32]
 800b99e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d90f      	bls.n	800b9ce <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800b9ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6a1a      	ldr	r2, [r3, #32]
 800b9ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9be:	1ad2      	subs	r2, r2, r3
 800b9c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	621a      	str	r2, [r3, #32]
 800b9cc:	e00e      	b.n	800b9ec <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800b9ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800b9de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b9ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	643b      	str	r3, [r7, #64]	; 0x40
 800b9f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	785b      	ldrb	r3, [r3, #1]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d16d      	bne.n	800bae4 <USB_EPStartXfer+0x954>
 800ba08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	461a      	mov	r2, r3
 800ba26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba28:	4413      	add	r3, r2
 800ba2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	011a      	lsls	r2, r3, #4
 800ba3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3c:	4413      	add	r3, r2
 800ba3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ba42:	637b      	str	r3, [r7, #52]	; 0x34
 800ba44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d112      	bne.n	800ba72 <USB_EPStartXfer+0x8e2>
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4e:	881b      	ldrh	r3, [r3, #0]
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5a:	801a      	strh	r2, [r3, #0]
 800ba5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6e:	801a      	strh	r2, [r3, #0]
 800ba70:	e05d      	b.n	800bb2e <USB_EPStartXfer+0x99e>
 800ba72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba76:	2b3e      	cmp	r3, #62	; 0x3e
 800ba78:	d817      	bhi.n	800baaa <USB_EPStartXfer+0x91a>
 800ba7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba7e:	085b      	lsrs	r3, r3, #1
 800ba80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ba84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba88:	f003 0301 	and.w	r3, r3, #1
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d004      	beq.n	800ba9a <USB_EPStartXfer+0x90a>
 800ba90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba94:	3301      	adds	r3, #1
 800ba96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ba9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	029b      	lsls	r3, r3, #10
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa6:	801a      	strh	r2, [r3, #0]
 800baa8:	e041      	b.n	800bb2e <USB_EPStartXfer+0x99e>
 800baaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800baae:	095b      	lsrs	r3, r3, #5
 800bab0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800bab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bab8:	f003 031f 	and.w	r3, r3, #31
 800babc:	2b00      	cmp	r3, #0
 800babe:	d104      	bne.n	800baca <USB_EPStartXfer+0x93a>
 800bac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bac4:	3b01      	subs	r3, #1
 800bac6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800baca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bace:	b29b      	uxth	r3, r3
 800bad0:	029b      	lsls	r3, r3, #10
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800badc:	b29a      	uxth	r2, r3
 800bade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae0:	801a      	strh	r2, [r3, #0]
 800bae2:	e024      	b.n	800bb2e <USB_EPStartXfer+0x99e>
 800bae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	785b      	ldrb	r3, [r3, #1]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d11c      	bne.n	800bb2e <USB_EPStartXfer+0x99e>
 800baf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800baf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	461a      	mov	r2, r3
 800bb06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb08:	4413      	add	r3, r2
 800bb0a:	643b      	str	r3, [r7, #64]	; 0x40
 800bb0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	011a      	lsls	r2, r3, #4
 800bb1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bb22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bb2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	895b      	ldrh	r3, [r3, #10]
 800bb3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	6959      	ldr	r1, [r3, #20]
 800bb4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800bb54:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800bb58:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800bb5c:	6800      	ldr	r0, [r0, #0]
 800bb5e:	f001 fa78 	bl	800d052 <USB_WritePMA>
 800bb62:	f000 bc5a 	b.w	800c41a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bb66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6a1b      	ldr	r3, [r3, #32]
 800bb72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800bb76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bb98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb9c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	441a      	add	r2, r3
 800bbba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bbbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bbd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	461a      	mov	r2, r3
 800bbf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbf2:	4413      	add	r3, r2
 800bbf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	011a      	lsls	r2, r3, #4
 800bc04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc06:	4413      	add	r3, r2
 800bc08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bc0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bc18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	891b      	ldrh	r3, [r3, #8]
 800bc24:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	6959      	ldr	r1, [r3, #20]
 800bc34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800bc3e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800bc42:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800bc46:	6800      	ldr	r0, [r0, #0]
 800bc48:	f001 fa03 	bl	800d052 <USB_WritePMA>
 800bc4c:	e3e5      	b.n	800c41a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bc4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	4413      	add	r3, r2
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc74:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800bc78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	441a      	add	r2, r3
 800bc92:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800bc96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc9e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bcaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	6a1a      	ldr	r2, [r3, #32]
 800bcb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcba:	1ad2      	subs	r2, r2, r3
 800bcbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bcc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bccc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 81bc 	beq.w	800c068 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bcf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	785b      	ldrb	r3, [r3, #1]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d16d      	bne.n	800bdea <USB_EPStartXfer+0xc5a>
 800bd0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd2e:	4413      	add	r3, r2
 800bd30:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	011a      	lsls	r2, r3, #4
 800bd40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd42:	4413      	add	r3, r2
 800bd44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bd48:	677b      	str	r3, [r7, #116]	; 0x74
 800bd4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d112      	bne.n	800bd78 <USB_EPStartXfer+0xbe8>
 800bd52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd60:	801a      	strh	r2, [r3, #0]
 800bd62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd74:	801a      	strh	r2, [r3, #0]
 800bd76:	e060      	b.n	800be3a <USB_EPStartXfer+0xcaa>
 800bd78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd7c:	2b3e      	cmp	r3, #62	; 0x3e
 800bd7e:	d817      	bhi.n	800bdb0 <USB_EPStartXfer+0xc20>
 800bd80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd84:	085b      	lsrs	r3, r3, #1
 800bd86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bd8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd8e:	f003 0301 	and.w	r3, r3, #1
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d004      	beq.n	800bda0 <USB_EPStartXfer+0xc10>
 800bd96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bda0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	029b      	lsls	r3, r3, #10
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdac:	801a      	strh	r2, [r3, #0]
 800bdae:	e044      	b.n	800be3a <USB_EPStartXfer+0xcaa>
 800bdb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bdb4:	095b      	lsrs	r3, r3, #5
 800bdb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bdba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bdbe:	f003 031f 	and.w	r3, r3, #31
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d104      	bne.n	800bdd0 <USB_EPStartXfer+0xc40>
 800bdc6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bdd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	029b      	lsls	r3, r3, #10
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bde6:	801a      	strh	r2, [r3, #0]
 800bde8:	e027      	b.n	800be3a <USB_EPStartXfer+0xcaa>
 800bdea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	785b      	ldrb	r3, [r3, #1]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d11f      	bne.n	800be3a <USB_EPStartXfer+0xcaa>
 800bdfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be08:	b29b      	uxth	r3, r3
 800be0a:	461a      	mov	r2, r3
 800be0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be10:	4413      	add	r3, r2
 800be12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	011a      	lsls	r2, r3, #4
 800be24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be28:	4413      	add	r3, r2
 800be2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800be2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be34:	b29a      	uxth	r2, r3
 800be36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800be3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	895b      	ldrh	r3, [r3, #10]
 800be46:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6959      	ldr	r1, [r3, #20]
 800be56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800be60:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800be64:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800be68:	6800      	ldr	r0, [r0, #0]
 800be6a:	f001 f8f2 	bl	800d052 <USB_WritePMA>
          ep->xfer_buff += len;
 800be6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	695a      	ldr	r2, [r3, #20]
 800be7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be7e:	441a      	add	r2, r3
 800be80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800be8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	6a1a      	ldr	r2, [r3, #32]
 800be98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d90f      	bls.n	800bec8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800bea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800beac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	6a1a      	ldr	r2, [r3, #32]
 800beb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800beb8:	1ad2      	subs	r2, r2, r3
 800beba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	621a      	str	r2, [r3, #32]
 800bec6:	e00e      	b.n	800bee6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800bec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800becc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6a1b      	ldr	r3, [r3, #32]
 800bed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800bed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bedc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2200      	movs	r2, #0
 800bee4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800bee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800beea:	2b00      	cmp	r3, #0
 800beec:	f000 8295 	beq.w	800c41a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	785b      	ldrb	r3, [r3, #1]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d16d      	bne.n	800bfdc <USB_EPStartXfer+0xe4c>
 800bf00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf20:	4413      	add	r3, r2
 800bf22:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	011a      	lsls	r2, r3, #4
 800bf32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf34:	4413      	add	r3, r2
 800bf36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf3a:	667b      	str	r3, [r7, #100]	; 0x64
 800bf3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d112      	bne.n	800bf6a <USB_EPStartXfer+0xdda>
 800bf44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf46:	881b      	ldrh	r3, [r3, #0]
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf52:	801a      	strh	r2, [r3, #0]
 800bf54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf56:	881b      	ldrh	r3, [r3, #0]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf66:	801a      	strh	r2, [r3, #0]
 800bf68:	e063      	b.n	800c032 <USB_EPStartXfer+0xea2>
 800bf6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf6e:	2b3e      	cmp	r3, #62	; 0x3e
 800bf70:	d817      	bhi.n	800bfa2 <USB_EPStartXfer+0xe12>
 800bf72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf76:	085b      	lsrs	r3, r3, #1
 800bf78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800bf7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf80:	f003 0301 	and.w	r3, r3, #1
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d004      	beq.n	800bf92 <USB_EPStartXfer+0xe02>
 800bf88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800bf92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	029b      	lsls	r3, r3, #10
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf9e:	801a      	strh	r2, [r3, #0]
 800bfa0:	e047      	b.n	800c032 <USB_EPStartXfer+0xea2>
 800bfa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfa6:	095b      	lsrs	r3, r3, #5
 800bfa8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800bfac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfb0:	f003 031f 	and.w	r3, r3, #31
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d104      	bne.n	800bfc2 <USB_EPStartXfer+0xe32>
 800bfb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800bfc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	029b      	lsls	r3, r3, #10
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfd8:	801a      	strh	r2, [r3, #0]
 800bfda:	e02a      	b.n	800c032 <USB_EPStartXfer+0xea2>
 800bfdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bfe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	785b      	ldrb	r3, [r3, #1]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d122      	bne.n	800c032 <USB_EPStartXfer+0xea2>
 800bfec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bff0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	673b      	str	r3, [r7, #112]	; 0x70
 800bff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bffc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c006:	b29b      	uxth	r3, r3
 800c008:	461a      	mov	r2, r3
 800c00a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c00c:	4413      	add	r3, r2
 800c00e:	673b      	str	r3, [r7, #112]	; 0x70
 800c010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	011a      	lsls	r2, r3, #4
 800c01e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c020:	4413      	add	r3, r2
 800c022:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c026:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c030:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	891b      	ldrh	r3, [r3, #8]
 800c03e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6959      	ldr	r1, [r3, #20]
 800c04e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c052:	b29b      	uxth	r3, r3
 800c054:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c058:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800c05c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800c060:	6800      	ldr	r0, [r0, #0]
 800c062:	f000 fff6 	bl	800d052 <USB_WritePMA>
 800c066:	e1d8      	b.n	800c41a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c06c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	785b      	ldrb	r3, [r3, #1]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d178      	bne.n	800c16a <USB_EPStartXfer+0xfda>
 800c078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c07c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c08a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c094:	b29b      	uxth	r3, r3
 800c096:	461a      	mov	r2, r3
 800c098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c09c:	4413      	add	r3, r2
 800c09e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c0a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	011a      	lsls	r2, r3, #4
 800c0b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0b4:	4413      	add	r3, r2
 800c0b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c0ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c0be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d116      	bne.n	800c0f4 <USB_EPStartXfer+0xf64>
 800c0c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0d8:	801a      	strh	r2, [r3, #0]
 800c0da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0f0:	801a      	strh	r2, [r3, #0]
 800c0f2:	e06b      	b.n	800c1cc <USB_EPStartXfer+0x103c>
 800c0f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0f8:	2b3e      	cmp	r3, #62	; 0x3e
 800c0fa:	d818      	bhi.n	800c12e <USB_EPStartXfer+0xf9e>
 800c0fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c100:	085b      	lsrs	r3, r3, #1
 800c102:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d004      	beq.n	800c11c <USB_EPStartXfer+0xf8c>
 800c112:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c116:	3301      	adds	r3, #1
 800c118:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c11c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c120:	b29b      	uxth	r3, r3
 800c122:	029b      	lsls	r3, r3, #10
 800c124:	b29a      	uxth	r2, r3
 800c126:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c12a:	801a      	strh	r2, [r3, #0]
 800c12c:	e04e      	b.n	800c1cc <USB_EPStartXfer+0x103c>
 800c12e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c132:	095b      	lsrs	r3, r3, #5
 800c134:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c13c:	f003 031f 	and.w	r3, r3, #31
 800c140:	2b00      	cmp	r3, #0
 800c142:	d104      	bne.n	800c14e <USB_EPStartXfer+0xfbe>
 800c144:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c148:	3b01      	subs	r3, #1
 800c14a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c14e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c152:	b29b      	uxth	r3, r3
 800c154:	029b      	lsls	r3, r3, #10
 800c156:	b29b      	uxth	r3, r3
 800c158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c15c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c160:	b29a      	uxth	r2, r3
 800c162:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c166:	801a      	strh	r2, [r3, #0]
 800c168:	e030      	b.n	800c1cc <USB_EPStartXfer+0x103c>
 800c16a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c16e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	785b      	ldrb	r3, [r3, #1]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d128      	bne.n	800c1cc <USB_EPStartXfer+0x103c>
 800c17a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c17e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c18c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c196:	b29b      	uxth	r3, r3
 800c198:	461a      	mov	r2, r3
 800c19a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c19e:	4413      	add	r3, r2
 800c1a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c1a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c1a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	011a      	lsls	r2, r3, #4
 800c1b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1b6:	4413      	add	r3, r2
 800c1b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c1bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c1c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c1cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c1d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	891b      	ldrh	r3, [r3, #8]
 800c1d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c1e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	6959      	ldr	r1, [r3, #20]
 800c1e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c1f2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800c1f6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800c1fa:	6800      	ldr	r0, [r0, #0]
 800c1fc:	f000 ff29 	bl	800d052 <USB_WritePMA>
          ep->xfer_buff += len;
 800c200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	695a      	ldr	r2, [r3, #20]
 800c20c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c210:	441a      	add	r2, r3
 800c212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800c21e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	6a1a      	ldr	r2, [r3, #32]
 800c22a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c22e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	429a      	cmp	r2, r3
 800c238:	d90f      	bls.n	800c25a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800c23a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c23e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6a1a      	ldr	r2, [r3, #32]
 800c246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c24a:	1ad2      	subs	r2, r2, r3
 800c24c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	621a      	str	r2, [r3, #32]
 800c258:	e00e      	b.n	800c278 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800c25a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c25e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	6a1b      	ldr	r3, [r3, #32]
 800c266:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800c26a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c26e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2200      	movs	r2, #0
 800c276:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800c278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f000 80cc 	beq.w	800c41a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c286:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	785b      	ldrb	r3, [r3, #1]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d178      	bne.n	800c392 <USB_EPStartXfer+0x1202>
 800c2a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c2ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	461a      	mov	r2, r3
 800c2c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c2ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c2ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	011a      	lsls	r2, r3, #4
 800c2d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2dc:	4413      	add	r3, r2
 800c2de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c2e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c2e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d116      	bne.n	800c31c <USB_EPStartXfer+0x118c>
 800c2ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2f2:	881b      	ldrh	r3, [r3, #0]
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c300:	801a      	strh	r2, [r3, #0]
 800c302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c30e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c312:	b29a      	uxth	r2, r3
 800c314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c318:	801a      	strh	r2, [r3, #0]
 800c31a:	e064      	b.n	800c3e6 <USB_EPStartXfer+0x1256>
 800c31c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c320:	2b3e      	cmp	r3, #62	; 0x3e
 800c322:	d818      	bhi.n	800c356 <USB_EPStartXfer+0x11c6>
 800c324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c328:	085b      	lsrs	r3, r3, #1
 800c32a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c32e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c332:	f003 0301 	and.w	r3, r3, #1
 800c336:	2b00      	cmp	r3, #0
 800c338:	d004      	beq.n	800c344 <USB_EPStartXfer+0x11b4>
 800c33a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c33e:	3301      	adds	r3, #1
 800c340:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c348:	b29b      	uxth	r3, r3
 800c34a:	029b      	lsls	r3, r3, #10
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c352:	801a      	strh	r2, [r3, #0]
 800c354:	e047      	b.n	800c3e6 <USB_EPStartXfer+0x1256>
 800c356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c35a:	095b      	lsrs	r3, r3, #5
 800c35c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c364:	f003 031f 	and.w	r3, r3, #31
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d104      	bne.n	800c376 <USB_EPStartXfer+0x11e6>
 800c36c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c370:	3b01      	subs	r3, #1
 800c372:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	029b      	lsls	r3, r3, #10
 800c37e:	b29b      	uxth	r3, r3
 800c380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c388:	b29a      	uxth	r2, r3
 800c38a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c38e:	801a      	strh	r2, [r3, #0]
 800c390:	e029      	b.n	800c3e6 <USB_EPStartXfer+0x1256>
 800c392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	785b      	ldrb	r3, [r3, #1]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d121      	bne.n	800c3e6 <USB_EPStartXfer+0x1256>
 800c3a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	011a      	lsls	r2, r3, #4
 800c3cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3d0:	4413      	add	r3, r2
 800c3d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c3d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c3da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c3e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	895b      	ldrh	r3, [r3, #10]
 800c3f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c3f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	6959      	ldr	r1, [r3, #20]
 800c402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c406:	b29b      	uxth	r3, r3
 800c408:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c40c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800c410:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800c414:	6800      	ldr	r0, [r0, #0]
 800c416:	f000 fe1c 	bl	800d052 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c41a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c41e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4413      	add	r3, r2
 800c434:	881b      	ldrh	r3, [r3, #0]
 800c436:	b29b      	uxth	r3, r3
 800c438:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c43c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800c440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c448:	8013      	strh	r3, [r2, #0]
 800c44a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c44e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800c452:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c456:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800c45a:	8812      	ldrh	r2, [r2, #0]
 800c45c:	f082 0210 	eor.w	r2, r2, #16
 800c460:	801a      	strh	r2, [r3, #0]
 800c462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c466:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800c46a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c46e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800c472:	8812      	ldrh	r2, [r2, #0]
 800c474:	f082 0220 	eor.w	r2, r2, #32
 800c478:	801a      	strh	r2, [r3, #0]
 800c47a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c47e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	441a      	add	r2, r3
 800c494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c498:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800c49c:	881b      	ldrh	r3, [r3, #0]
 800c49e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	8013      	strh	r3, [r2, #0]
 800c4b2:	f000 bc9f 	b.w	800cdf4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c4b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	7b1b      	ldrb	r3, [r3, #12]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f040 80ae 	bne.w	800c624 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c4c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	699a      	ldr	r2, [r3, #24]
 800c4d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d917      	bls.n	800c514 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800c4e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800c4f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	699a      	ldr	r2, [r3, #24]
 800c500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c504:	1ad2      	subs	r2, r2, r3
 800c506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c50a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	619a      	str	r2, [r3, #24]
 800c512:	e00e      	b.n	800c532 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800c514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	699b      	ldr	r3, [r3, #24]
 800c520:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800c524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2200      	movs	r2, #0
 800c530:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c536:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c54e:	b29b      	uxth	r3, r3
 800c550:	461a      	mov	r2, r3
 800c552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c556:	4413      	add	r3, r2
 800c558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c55c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	011a      	lsls	r2, r3, #4
 800c56a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c56e:	4413      	add	r3, r2
 800c570:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d116      	bne.n	800c5ae <USB_EPStartXfer+0x141e>
 800c580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c584:	881b      	ldrh	r3, [r3, #0]
 800c586:	b29b      	uxth	r3, r3
 800c588:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c592:	801a      	strh	r2, [r3, #0]
 800c594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5aa:	801a      	strh	r2, [r3, #0]
 800c5ac:	e3e8      	b.n	800cd80 <USB_EPStartXfer+0x1bf0>
 800c5ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5b2:	2b3e      	cmp	r3, #62	; 0x3e
 800c5b4:	d818      	bhi.n	800c5e8 <USB_EPStartXfer+0x1458>
 800c5b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5ba:	085b      	lsrs	r3, r3, #1
 800c5bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c5c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5c4:	f003 0301 	and.w	r3, r3, #1
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d004      	beq.n	800c5d6 <USB_EPStartXfer+0x1446>
 800c5cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c5d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	029b      	lsls	r3, r3, #10
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5e4:	801a      	strh	r2, [r3, #0]
 800c5e6:	e3cb      	b.n	800cd80 <USB_EPStartXfer+0x1bf0>
 800c5e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5ec:	095b      	lsrs	r3, r3, #5
 800c5ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c5f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5f6:	f003 031f 	and.w	r3, r3, #31
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d104      	bne.n	800c608 <USB_EPStartXfer+0x1478>
 800c5fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c602:	3b01      	subs	r3, #1
 800c604:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c608:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	029b      	lsls	r3, r3, #10
 800c610:	b29b      	uxth	r3, r3
 800c612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c61a:	b29a      	uxth	r2, r3
 800c61c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c620:	801a      	strh	r2, [r3, #0]
 800c622:	e3ad      	b.n	800cd80 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	78db      	ldrb	r3, [r3, #3]
 800c630:	2b02      	cmp	r3, #2
 800c632:	f040 8200 	bne.w	800ca36 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c63a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	785b      	ldrb	r3, [r3, #1]
 800c642:	2b00      	cmp	r3, #0
 800c644:	f040 8091 	bne.w	800c76a <USB_EPStartXfer+0x15da>
 800c648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c64c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c65a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c664:	b29b      	uxth	r3, r3
 800c666:	461a      	mov	r2, r3
 800c668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c66c:	4413      	add	r3, r2
 800c66e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	011a      	lsls	r2, r3, #4
 800c680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c684:	4413      	add	r3, r2
 800c686:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c68a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c68e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d116      	bne.n	800c6cc <USB_EPStartXfer+0x153c>
 800c69e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6b0:	801a      	strh	r2, [r3, #0]
 800c6b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6b6:	881b      	ldrh	r3, [r3, #0]
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6c8:	801a      	strh	r2, [r3, #0]
 800c6ca:	e083      	b.n	800c7d4 <USB_EPStartXfer+0x1644>
 800c6cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	2b3e      	cmp	r3, #62	; 0x3e
 800c6da:	d820      	bhi.n	800c71e <USB_EPStartXfer+0x158e>
 800c6dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	085b      	lsrs	r3, r3, #1
 800c6ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c6ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	f003 0301 	and.w	r3, r3, #1
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d004      	beq.n	800c70c <USB_EPStartXfer+0x157c>
 800c702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c706:	3301      	adds	r3, #1
 800c708:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c710:	b29b      	uxth	r3, r3
 800c712:	029b      	lsls	r3, r3, #10
 800c714:	b29a      	uxth	r2, r3
 800c716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c71a:	801a      	strh	r2, [r3, #0]
 800c71c:	e05a      	b.n	800c7d4 <USB_EPStartXfer+0x1644>
 800c71e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	095b      	lsrs	r3, r3, #5
 800c72c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	f003 031f 	and.w	r3, r3, #31
 800c740:	2b00      	cmp	r3, #0
 800c742:	d104      	bne.n	800c74e <USB_EPStartXfer+0x15be>
 800c744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c748:	3b01      	subs	r3, #1
 800c74a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c752:	b29b      	uxth	r3, r3
 800c754:	029b      	lsls	r3, r3, #10
 800c756:	b29b      	uxth	r3, r3
 800c758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c75c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c760:	b29a      	uxth	r2, r3
 800c762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c766:	801a      	strh	r2, [r3, #0]
 800c768:	e034      	b.n	800c7d4 <USB_EPStartXfer+0x1644>
 800c76a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c76e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	785b      	ldrb	r3, [r3, #1]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d12c      	bne.n	800c7d4 <USB_EPStartXfer+0x1644>
 800c77a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c77e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c78c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c796:	b29b      	uxth	r3, r3
 800c798:	461a      	mov	r2, r3
 800c79a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c79e:	4413      	add	r3, r2
 800c7a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c7a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	011a      	lsls	r2, r3, #4
 800c7b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c7bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c7c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c7d2:	801a      	strh	r2, [r3, #0]
 800c7d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c7e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	785b      	ldrb	r3, [r3, #1]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f040 8091 	bne.w	800c916 <USB_EPStartXfer+0x1786>
 800c7f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c806:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c810:	b29b      	uxth	r3, r3
 800c812:	461a      	mov	r2, r3
 800c814:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c818:	4413      	add	r3, r2
 800c81a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c81e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	011a      	lsls	r2, r3, #4
 800c82c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c830:	4413      	add	r3, r2
 800c832:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c83a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c83e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d116      	bne.n	800c878 <USB_EPStartXfer+0x16e8>
 800c84a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c84e:	881b      	ldrh	r3, [r3, #0]
 800c850:	b29b      	uxth	r3, r3
 800c852:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c856:	b29a      	uxth	r2, r3
 800c858:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c85c:	801a      	strh	r2, [r3, #0]
 800c85e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	b29b      	uxth	r3, r3
 800c866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c86a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c86e:	b29a      	uxth	r2, r3
 800c870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c874:	801a      	strh	r2, [r3, #0]
 800c876:	e07c      	b.n	800c972 <USB_EPStartXfer+0x17e2>
 800c878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c87c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	2b3e      	cmp	r3, #62	; 0x3e
 800c886:	d820      	bhi.n	800c8ca <USB_EPStartXfer+0x173a>
 800c888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c88c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	085b      	lsrs	r3, r3, #1
 800c896:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c89a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c89e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	f003 0301 	and.w	r3, r3, #1
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d004      	beq.n	800c8b8 <USB_EPStartXfer+0x1728>
 800c8ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c8b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	029b      	lsls	r3, r3, #10
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8c6:	801a      	strh	r2, [r3, #0]
 800c8c8:	e053      	b.n	800c972 <USB_EPStartXfer+0x17e2>
 800c8ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c8ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	095b      	lsrs	r3, r3, #5
 800c8d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c8dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c8e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	f003 031f 	and.w	r3, r3, #31
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d104      	bne.n	800c8fa <USB_EPStartXfer+0x176a>
 800c8f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c8fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	029b      	lsls	r3, r3, #10
 800c902:	b29b      	uxth	r3, r3
 800c904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c912:	801a      	strh	r2, [r3, #0]
 800c914:	e02d      	b.n	800c972 <USB_EPStartXfer+0x17e2>
 800c916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c91a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	785b      	ldrb	r3, [r3, #1]
 800c922:	2b01      	cmp	r3, #1
 800c924:	d125      	bne.n	800c972 <USB_EPStartXfer+0x17e2>
 800c926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c92a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c934:	b29b      	uxth	r3, r3
 800c936:	461a      	mov	r2, r3
 800c938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c93c:	4413      	add	r3, r2
 800c93e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	011a      	lsls	r2, r3, #4
 800c950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c954:	4413      	add	r3, r2
 800c956:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c95a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c95e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c970:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	69db      	ldr	r3, [r3, #28]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f000 81fe 	beq.w	800cd80 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4413      	add	r3, r2
 800c99e:	881b      	ldrh	r3, [r3, #0]
 800c9a0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c9a4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c9a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d005      	beq.n	800c9bc <USB_EPStartXfer+0x182c>
 800c9b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c9b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d10d      	bne.n	800c9d8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c9bc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c9c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f040 81db 	bne.w	800cd80 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c9ca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c9ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f040 81d4 	bne.w	800cd80 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800c9d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	4413      	add	r3, r2
 800c9f2:	881b      	ldrh	r3, [r3, #0]
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9fe:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800ca02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	441a      	add	r2, r3
 800ca1c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800ca20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	8013      	strh	r3, [r2, #0]
 800ca34:	e1a4      	b.n	800cd80 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ca36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	78db      	ldrb	r3, [r3, #3]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	f040 819a 	bne.w	800cd7c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ca48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	699a      	ldr	r2, [r3, #24]
 800ca54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d917      	bls.n	800ca94 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800ca64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800ca74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	699a      	ldr	r2, [r3, #24]
 800ca80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca84:	1ad2      	subs	r2, r2, r3
 800ca86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	619a      	str	r2, [r3, #24]
 800ca92:	e00e      	b.n	800cab2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800ca94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	699b      	ldr	r3, [r3, #24]
 800caa0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800caa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800caa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2200      	movs	r2, #0
 800cab0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800cab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	785b      	ldrb	r3, [r3, #1]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d178      	bne.n	800cbb4 <USB_EPStartXfer+0x1a24>
 800cac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cac6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cad4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cade:	b29b      	uxth	r3, r3
 800cae0:	461a      	mov	r2, r3
 800cae2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cae6:	4413      	add	r3, r2
 800cae8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800caec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800caf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	011a      	lsls	r2, r3, #4
 800cafa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cafe:	4413      	add	r3, r2
 800cb00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cb04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d116      	bne.n	800cb3e <USB_EPStartXfer+0x19ae>
 800cb10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb14:	881b      	ldrh	r3, [r3, #0]
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb22:	801a      	strh	r2, [r3, #0]
 800cb24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb3a:	801a      	strh	r2, [r3, #0]
 800cb3c:	e06b      	b.n	800cc16 <USB_EPStartXfer+0x1a86>
 800cb3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb42:	2b3e      	cmp	r3, #62	; 0x3e
 800cb44:	d818      	bhi.n	800cb78 <USB_EPStartXfer+0x19e8>
 800cb46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb4a:	085b      	lsrs	r3, r3, #1
 800cb4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cb50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb54:	f003 0301 	and.w	r3, r3, #1
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d004      	beq.n	800cb66 <USB_EPStartXfer+0x19d6>
 800cb5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb60:	3301      	adds	r3, #1
 800cb62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cb66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	029b      	lsls	r3, r3, #10
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb74:	801a      	strh	r2, [r3, #0]
 800cb76:	e04e      	b.n	800cc16 <USB_EPStartXfer+0x1a86>
 800cb78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb7c:	095b      	lsrs	r3, r3, #5
 800cb7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cb82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb86:	f003 031f 	and.w	r3, r3, #31
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d104      	bne.n	800cb98 <USB_EPStartXfer+0x1a08>
 800cb8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb92:	3b01      	subs	r3, #1
 800cb94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cb98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	029b      	lsls	r3, r3, #10
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cbb0:	801a      	strh	r2, [r3, #0]
 800cbb2:	e030      	b.n	800cc16 <USB_EPStartXfer+0x1a86>
 800cbb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	785b      	ldrb	r3, [r3, #1]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d128      	bne.n	800cc16 <USB_EPStartXfer+0x1a86>
 800cbc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cbd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbe8:	4413      	add	r3, r2
 800cbea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cbee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	011a      	lsls	r2, r3, #4
 800cbfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc00:	4413      	add	r3, r2
 800cc02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cc06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cc0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cc14:	801a      	strh	r2, [r3, #0]
 800cc16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cc24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	785b      	ldrb	r3, [r3, #1]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d178      	bne.n	800cd26 <USB_EPStartXfer+0x1b96>
 800cc34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cc42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	461a      	mov	r2, r3
 800cc54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc58:	4413      	add	r3, r2
 800cc5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cc5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	011a      	lsls	r2, r3, #4
 800cc6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc70:	4413      	add	r3, r2
 800cc72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cc76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cc7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d116      	bne.n	800ccb0 <USB_EPStartXfer+0x1b20>
 800cc82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc94:	801a      	strh	r2, [r3, #0]
 800cc96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc9a:	881b      	ldrh	r3, [r3, #0]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ccac:	801a      	strh	r2, [r3, #0]
 800ccae:	e067      	b.n	800cd80 <USB_EPStartXfer+0x1bf0>
 800ccb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccb4:	2b3e      	cmp	r3, #62	; 0x3e
 800ccb6:	d818      	bhi.n	800ccea <USB_EPStartXfer+0x1b5a>
 800ccb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccbc:	085b      	lsrs	r3, r3, #1
 800ccbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ccc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccc6:	f003 0301 	and.w	r3, r3, #1
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d004      	beq.n	800ccd8 <USB_EPStartXfer+0x1b48>
 800ccce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ccd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	029b      	lsls	r3, r3, #10
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cce6:	801a      	strh	r2, [r3, #0]
 800cce8:	e04a      	b.n	800cd80 <USB_EPStartXfer+0x1bf0>
 800ccea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccee:	095b      	lsrs	r3, r3, #5
 800ccf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ccf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccf8:	f003 031f 	and.w	r3, r3, #31
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d104      	bne.n	800cd0a <USB_EPStartXfer+0x1b7a>
 800cd00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd04:	3b01      	subs	r3, #1
 800cd06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cd0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	029b      	lsls	r3, r3, #10
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd22:	801a      	strh	r2, [r3, #0]
 800cd24:	e02c      	b.n	800cd80 <USB_EPStartXfer+0x1bf0>
 800cd26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cd2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	785b      	ldrb	r3, [r3, #1]
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d124      	bne.n	800cd80 <USB_EPStartXfer+0x1bf0>
 800cd36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cd3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	461a      	mov	r2, r3
 800cd48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd4c:	4413      	add	r3, r2
 800cd4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cd52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cd56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	011a      	lsls	r2, r3, #4
 800cd60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd64:	4413      	add	r3, r2
 800cd66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cd6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cd6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd72:	b29a      	uxth	r2, r3
 800cd74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd78:	801a      	strh	r2, [r3, #0]
 800cd7a:	e001      	b.n	800cd80 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e03a      	b.n	800cdf6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cd84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cd8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	881b      	ldrh	r3, [r3, #0]
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cda2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cda6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800cdaa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800cdae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cdb2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800cdb6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800cdba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cdbe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800cdc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	441a      	add	r2, r3
 800cddc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800cde0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cde4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cde8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	785b      	ldrb	r3, [r3, #1]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d020      	beq.n	800ce54 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	4413      	add	r3, r2
 800ce1c:	881b      	ldrh	r3, [r3, #0]
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce28:	81bb      	strh	r3, [r7, #12]
 800ce2a:	89bb      	ldrh	r3, [r7, #12]
 800ce2c:	f083 0310 	eor.w	r3, r3, #16
 800ce30:	81bb      	strh	r3, [r7, #12]
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	441a      	add	r2, r3
 800ce3c:	89bb      	ldrh	r3, [r7, #12]
 800ce3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	8013      	strh	r3, [r2, #0]
 800ce52:	e01f      	b.n	800ce94 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	4413      	add	r3, r2
 800ce5e:	881b      	ldrh	r3, [r3, #0]
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce6a:	81fb      	strh	r3, [r7, #14]
 800ce6c:	89fb      	ldrh	r3, [r7, #14]
 800ce6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ce72:	81fb      	strh	r3, [r7, #14]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	441a      	add	r2, r3
 800ce7e:	89fb      	ldrh	r3, [r7, #14]
 800ce80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3714      	adds	r7, #20
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bc80      	pop	{r7}
 800ce9e:	4770      	bx	lr

0800cea0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b087      	sub	sp, #28
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	7b1b      	ldrb	r3, [r3, #12]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f040 809d 	bne.w	800cfee <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	785b      	ldrb	r3, [r3, #1]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d04c      	beq.n	800cf56 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	823b      	strh	r3, [r7, #16]
 800ceca:	8a3b      	ldrh	r3, [r7, #16]
 800cecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d01b      	beq.n	800cf0c <USB_EPClearStall+0x6c>
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	881b      	ldrh	r3, [r3, #0]
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceea:	81fb      	strh	r3, [r7, #14]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	441a      	add	r2, r3
 800cef6:	89fb      	ldrh	r3, [r7, #14]
 800cef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cefc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	78db      	ldrb	r3, [r3, #3]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d06c      	beq.n	800cfee <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	4413      	add	r3, r2
 800cf1e:	881b      	ldrh	r3, [r3, #0]
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf2a:	81bb      	strh	r3, [r7, #12]
 800cf2c:	89bb      	ldrh	r3, [r7, #12]
 800cf2e:	f083 0320 	eor.w	r3, r3, #32
 800cf32:	81bb      	strh	r3, [r7, #12]
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	441a      	add	r2, r3
 800cf3e:	89bb      	ldrh	r3, [r7, #12]
 800cf40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	8013      	strh	r3, [r2, #0]
 800cf54:	e04b      	b.n	800cfee <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	4413      	add	r3, r2
 800cf60:	881b      	ldrh	r3, [r3, #0]
 800cf62:	82fb      	strh	r3, [r7, #22]
 800cf64:	8afb      	ldrh	r3, [r7, #22]
 800cf66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d01b      	beq.n	800cfa6 <USB_EPClearStall+0x106>
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	4413      	add	r3, r2
 800cf78:	881b      	ldrh	r3, [r3, #0]
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf84:	82bb      	strh	r3, [r7, #20]
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	441a      	add	r2, r3
 800cf90:	8abb      	ldrh	r3, [r7, #20]
 800cf92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cf9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	4413      	add	r3, r2
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cfb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfbc:	827b      	strh	r3, [r7, #18]
 800cfbe:	8a7b      	ldrh	r3, [r7, #18]
 800cfc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cfc4:	827b      	strh	r3, [r7, #18]
 800cfc6:	8a7b      	ldrh	r3, [r7, #18]
 800cfc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cfcc:	827b      	strh	r3, [r7, #18]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	009b      	lsls	r3, r3, #2
 800cfd6:	441a      	add	r2, r3
 800cfd8:	8a7b      	ldrh	r3, [r7, #18]
 800cfda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	371c      	adds	r7, #28
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bc80      	pop	{r7}
 800cff8:	4770      	bx	lr

0800cffa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b083      	sub	sp, #12
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	460b      	mov	r3, r1
 800d004:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d006:	78fb      	ldrb	r3, [r7, #3]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d103      	bne.n	800d014 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2280      	movs	r2, #128	; 0x80
 800d010:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bc80      	pop	{r7}
 800d01e:	4770      	bx	lr

0800d020 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	370c      	adds	r7, #12
 800d02e:	46bd      	mov	sp, r7
 800d030:	bc80      	pop	{r7}
 800d032:	4770      	bx	lr

0800d034 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d042:	b29b      	uxth	r3, r3
 800d044:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d046:	68fb      	ldr	r3, [r7, #12]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bc80      	pop	{r7}
 800d050:	4770      	bx	lr

0800d052 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d052:	b480      	push	{r7}
 800d054:	b08d      	sub	sp, #52	; 0x34
 800d056:	af00      	add	r7, sp, #0
 800d058:	60f8      	str	r0, [r7, #12]
 800d05a:	60b9      	str	r1, [r7, #8]
 800d05c:	4611      	mov	r1, r2
 800d05e:	461a      	mov	r2, r3
 800d060:	460b      	mov	r3, r1
 800d062:	80fb      	strh	r3, [r7, #6]
 800d064:	4613      	mov	r3, r2
 800d066:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d068:	88bb      	ldrh	r3, [r7, #4]
 800d06a:	3301      	adds	r3, #1
 800d06c:	085b      	lsrs	r3, r3, #1
 800d06e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d078:	88fb      	ldrh	r3, [r7, #6]
 800d07a:	005a      	lsls	r2, r3, #1
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	4413      	add	r3, r2
 800d080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d084:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d08a:	e01e      	b.n	800d0ca <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800d092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d094:	3301      	adds	r3, #1
 800d096:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	021b      	lsls	r3, r3, #8
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b4:	3302      	adds	r3, #2
 800d0b6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	3302      	adds	r3, #2
 800d0bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800d0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1dd      	bne.n	800d08c <USB_WritePMA+0x3a>
  }
}
 800d0d0:	bf00      	nop
 800d0d2:	bf00      	nop
 800d0d4:	3734      	adds	r7, #52	; 0x34
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bc80      	pop	{r7}
 800d0da:	4770      	bx	lr

0800d0dc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b08b      	sub	sp, #44	; 0x2c
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	80fb      	strh	r3, [r7, #6]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d0f2:	88bb      	ldrh	r3, [r7, #4]
 800d0f4:	085b      	lsrs	r3, r3, #1
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d102:	88fb      	ldrh	r3, [r7, #6]
 800d104:	005a      	lsls	r2, r3, #1
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	4413      	add	r3, r2
 800d10a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d10e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	627b      	str	r3, [r7, #36]	; 0x24
 800d114:	e01b      	b.n	800d14e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800d116:	6a3b      	ldr	r3, [r7, #32]
 800d118:	881b      	ldrh	r3, [r3, #0]
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d11e:	6a3b      	ldr	r3, [r7, #32]
 800d120:	3302      	adds	r3, #2
 800d122:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	b2da      	uxtb	r2, r3
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	3301      	adds	r3, #1
 800d130:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	0a1b      	lsrs	r3, r3, #8
 800d136:	b2da      	uxtb	r2, r3
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	3301      	adds	r3, #1
 800d140:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800d142:	6a3b      	ldr	r3, [r7, #32]
 800d144:	3302      	adds	r3, #2
 800d146:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800d148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14a:	3b01      	subs	r3, #1
 800d14c:	627b      	str	r3, [r7, #36]	; 0x24
 800d14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d150:	2b00      	cmp	r3, #0
 800d152:	d1e0      	bne.n	800d116 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800d154:	88bb      	ldrh	r3, [r7, #4]
 800d156:	f003 0301 	and.w	r3, r3, #1
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d007      	beq.n	800d170 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800d160:	6a3b      	ldr	r3, [r7, #32]
 800d162:	881b      	ldrh	r3, [r3, #0]
 800d164:	b29b      	uxth	r3, r3
 800d166:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	701a      	strb	r2, [r3, #0]
  }
}
 800d170:	bf00      	nop
 800d172:	372c      	adds	r7, #44	; 0x2c
 800d174:	46bd      	mov	sp, r7
 800d176:	bc80      	pop	{r7}
 800d178:	4770      	bx	lr

0800d17a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b084      	sub	sp, #16
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
 800d182:	460b      	mov	r3, r1
 800d184:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d186:	2300      	movs	r3, #0
 800d188:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	7c1b      	ldrb	r3, [r3, #16]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d115      	bne.n	800d1be <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d192:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d196:	2202      	movs	r2, #2
 800d198:	2181      	movs	r1, #129	; 0x81
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f001 fe75 	bl	800ee8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d1a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1aa:	2202      	movs	r2, #2
 800d1ac:	2101      	movs	r1, #1
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f001 fe6b 	bl	800ee8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800d1bc:	e012      	b.n	800d1e4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d1be:	2340      	movs	r3, #64	; 0x40
 800d1c0:	2202      	movs	r2, #2
 800d1c2:	2181      	movs	r1, #129	; 0x81
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f001 fe60 	bl	800ee8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d1d0:	2340      	movs	r3, #64	; 0x40
 800d1d2:	2202      	movs	r2, #2
 800d1d4:	2101      	movs	r1, #1
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f001 fe57 	bl	800ee8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d1e4:	2308      	movs	r3, #8
 800d1e6:	2203      	movs	r2, #3
 800d1e8:	2182      	movs	r1, #130	; 0x82
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f001 fe4d 	bl	800ee8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800d1f6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d1fa:	f001 ff6d 	bl	800f0d8 <USBD_static_malloc>
 800d1fe:	4602      	mov	r2, r0
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d102      	bne.n	800d216 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800d210:	2301      	movs	r3, #1
 800d212:	73fb      	strb	r3, [r7, #15]
 800d214:	e026      	b.n	800d264 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d21c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	2200      	movs	r2, #0
 800d234:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	7c1b      	ldrb	r3, [r3, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d109      	bne.n	800d254 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d24a:	2101      	movs	r1, #1
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f001 ff0d 	bl	800f06c <USBD_LL_PrepareReceive>
 800d252:	e007      	b.n	800d264 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d25a:	2340      	movs	r3, #64	; 0x40
 800d25c:	2101      	movs	r1, #1
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f001 ff04 	bl	800f06c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d264:	7bfb      	ldrb	r3, [r7, #15]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b084      	sub	sp, #16
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	460b      	mov	r3, r1
 800d278:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d27a:	2300      	movs	r3, #0
 800d27c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d27e:	2181      	movs	r1, #129	; 0x81
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f001 fe28 	bl	800eed6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d28c:	2101      	movs	r1, #1
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f001 fe21 	bl	800eed6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d29c:	2182      	movs	r1, #130	; 0x82
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f001 fe19 	bl	800eed6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00e      	beq.n	800d2d2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f001 ff13 	bl	800f0f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d2ec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d302:	2b00      	cmp	r3, #0
 800d304:	d039      	beq.n	800d37a <USBD_CDC_Setup+0x9e>
 800d306:	2b20      	cmp	r3, #32
 800d308:	d17f      	bne.n	800d40a <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	88db      	ldrh	r3, [r3, #6]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d029      	beq.n	800d366 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	b25b      	sxtb	r3, r3
 800d318:	2b00      	cmp	r3, #0
 800d31a:	da11      	bge.n	800d340 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	683a      	ldr	r2, [r7, #0]
 800d326:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800d328:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d32a:	683a      	ldr	r2, [r7, #0]
 800d32c:	88d2      	ldrh	r2, [r2, #6]
 800d32e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d330:	6939      	ldr	r1, [r7, #16]
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	88db      	ldrh	r3, [r3, #6]
 800d336:	461a      	mov	r2, r3
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f001 f994 	bl	800e666 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800d33e:	e06b      	b.n	800d418 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	785a      	ldrb	r2, [r3, #1]
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	88db      	ldrh	r3, [r3, #6]
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d356:	6939      	ldr	r1, [r7, #16]
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	88db      	ldrh	r3, [r3, #6]
 800d35c:	461a      	mov	r2, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f001 f9af 	bl	800e6c2 <USBD_CtlPrepareRx>
    break;
 800d364:	e058      	b.n	800d418 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	683a      	ldr	r2, [r7, #0]
 800d370:	7850      	ldrb	r0, [r2, #1]
 800d372:	2200      	movs	r2, #0
 800d374:	6839      	ldr	r1, [r7, #0]
 800d376:	4798      	blx	r3
    break;
 800d378:	e04e      	b.n	800d418 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	785b      	ldrb	r3, [r3, #1]
 800d37e:	2b0b      	cmp	r3, #11
 800d380:	d02e      	beq.n	800d3e0 <USBD_CDC_Setup+0x104>
 800d382:	2b0b      	cmp	r3, #11
 800d384:	dc38      	bgt.n	800d3f8 <USBD_CDC_Setup+0x11c>
 800d386:	2b00      	cmp	r3, #0
 800d388:	d002      	beq.n	800d390 <USBD_CDC_Setup+0xb4>
 800d38a:	2b0a      	cmp	r3, #10
 800d38c:	d014      	beq.n	800d3b8 <USBD_CDC_Setup+0xdc>
 800d38e:	e033      	b.n	800d3f8 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d396:	2b03      	cmp	r3, #3
 800d398:	d107      	bne.n	800d3aa <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800d39a:	f107 030c 	add.w	r3, r7, #12
 800d39e:	2202      	movs	r2, #2
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f001 f95f 	bl	800e666 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d3a8:	e02e      	b.n	800d408 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800d3aa:	6839      	ldr	r1, [r7, #0]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f001 f8f0 	bl	800e592 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d3b2:	2302      	movs	r3, #2
 800d3b4:	75fb      	strb	r3, [r7, #23]
      break;
 800d3b6:	e027      	b.n	800d408 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d3be:	2b03      	cmp	r3, #3
 800d3c0:	d107      	bne.n	800d3d2 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800d3c2:	f107 030f 	add.w	r3, r7, #15
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f001 f94b 	bl	800e666 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d3d0:	e01a      	b.n	800d408 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800d3d2:	6839      	ldr	r1, [r7, #0]
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f001 f8dc 	bl	800e592 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d3da:	2302      	movs	r3, #2
 800d3dc:	75fb      	strb	r3, [r7, #23]
      break;
 800d3de:	e013      	b.n	800d408 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d3e6:	2b03      	cmp	r3, #3
 800d3e8:	d00d      	beq.n	800d406 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800d3ea:	6839      	ldr	r1, [r7, #0]
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f001 f8d0 	bl	800e592 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d3f6:	e006      	b.n	800d406 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800d3f8:	6839      	ldr	r1, [r7, #0]
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f001 f8c9 	bl	800e592 <USBD_CtlError>
      ret = USBD_FAIL;
 800d400:	2302      	movs	r3, #2
 800d402:	75fb      	strb	r3, [r7, #23]
      break;
 800d404:	e000      	b.n	800d408 <USBD_CDC_Setup+0x12c>
      break;
 800d406:	bf00      	nop
    }
    break;
 800d408:	e006      	b.n	800d418 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f001 f8c0 	bl	800e592 <USBD_CtlError>
    ret = USBD_FAIL;
 800d412:	2302      	movs	r3, #2
 800d414:	75fb      	strb	r3, [r7, #23]
    break;
 800d416:	bf00      	nop
  }

  return ret;
 800d418:	7dfb      	ldrb	r3, [r7, #23]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3718      	adds	r7, #24
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
 800d42a:	460b      	mov	r3, r1
 800d42c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d434:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d43c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d444:	2b00      	cmp	r3, #0
 800d446:	d03a      	beq.n	800d4be <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d448:	78fa      	ldrb	r2, [r7, #3]
 800d44a:	6879      	ldr	r1, [r7, #4]
 800d44c:	4613      	mov	r3, r2
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	4413      	add	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	440b      	add	r3, r1
 800d456:	331c      	adds	r3, #28
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d029      	beq.n	800d4b2 <USBD_CDC_DataIn+0x90>
 800d45e:	78fa      	ldrb	r2, [r7, #3]
 800d460:	6879      	ldr	r1, [r7, #4]
 800d462:	4613      	mov	r3, r2
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	4413      	add	r3, r2
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	440b      	add	r3, r1
 800d46c:	331c      	adds	r3, #28
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	78f9      	ldrb	r1, [r7, #3]
 800d472:	68b8      	ldr	r0, [r7, #8]
 800d474:	460b      	mov	r3, r1
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	440b      	add	r3, r1
 800d47a:	00db      	lsls	r3, r3, #3
 800d47c:	4403      	add	r3, r0
 800d47e:	3338      	adds	r3, #56	; 0x38
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	fbb2 f1f3 	udiv	r1, r2, r3
 800d486:	fb01 f303 	mul.w	r3, r1, r3
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d110      	bne.n	800d4b2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d490:	78fa      	ldrb	r2, [r7, #3]
 800d492:	6879      	ldr	r1, [r7, #4]
 800d494:	4613      	mov	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	4413      	add	r3, r2
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	440b      	add	r3, r1
 800d49e:	331c      	adds	r3, #28
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800d4a4:	78f9      	ldrb	r1, [r7, #3]
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f001 fdbb 	bl	800f026 <USBD_LL_Transmit>
 800d4b0:	e003      	b.n	800d4ba <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	e000      	b.n	800d4c0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d4be:	2302      	movs	r3, #2
  }
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d4da:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800d4dc:	78fb      	ldrb	r3, [r7, #3]
 800d4de:	4619      	mov	r1, r3
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f001 fde6 	bl	800f0b2 <USBD_LL_GetRxDataSize>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00d      	beq.n	800d514 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	68fa      	ldr	r2, [r7, #12]
 800d502:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d506:	68fa      	ldr	r2, [r7, #12]
 800d508:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d50c:	4611      	mov	r1, r2
 800d50e:	4798      	blx	r3

    return USBD_OK;
 800d510:	2300      	movs	r3, #0
 800d512:	e000      	b.n	800d516 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d514:	2302      	movs	r3, #2
  }
}
 800d516:	4618      	mov	r0, r3
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b084      	sub	sp, #16
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d52c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d534:	2b00      	cmp	r3, #0
 800d536:	d015      	beq.n	800d564 <USBD_CDC_EP0_RxReady+0x46>
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d53e:	2bff      	cmp	r3, #255	; 0xff
 800d540:	d010      	beq.n	800d564 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	68fa      	ldr	r2, [r7, #12]
 800d54c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d550:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d552:	68fa      	ldr	r2, [r7, #12]
 800d554:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d558:	b292      	uxth	r2, r2
 800d55a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	22ff      	movs	r2, #255	; 0xff
 800d560:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3710      	adds	r7, #16
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
	...

0800d570 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800d570:	b480      	push	{r7}
 800d572:	b083      	sub	sp, #12
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2243      	movs	r2, #67	; 0x43
 800d57c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d57e:	4b03      	ldr	r3, [pc, #12]	; (800d58c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d580:	4618      	mov	r0, r3
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	bc80      	pop	{r7}
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	20000850 	.word	0x20000850

0800d590 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2243      	movs	r2, #67	; 0x43
 800d59c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d59e:	4b03      	ldr	r3, [pc, #12]	; (800d5ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bc80      	pop	{r7}
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	2000080c 	.word	0x2000080c

0800d5b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2243      	movs	r2, #67	; 0x43
 800d5bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d5be:	4b03      	ldr	r3, [pc, #12]	; (800d5cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bc80      	pop	{r7}
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	20000894 	.word	0x20000894

0800d5d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	220a      	movs	r2, #10
 800d5dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d5de:	4b03      	ldr	r3, [pc, #12]	; (800d5ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	370c      	adds	r7, #12
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bc80      	pop	{r7}
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	200007c8 	.word	0x200007c8

0800d5f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b085      	sub	sp, #20
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d5fa:	2302      	movs	r3, #2
 800d5fc:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d005      	beq.n	800d610 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	683a      	ldr	r2, [r7, #0]
 800d608:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d610:	7bfb      	ldrb	r3, [r7, #15]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3714      	adds	r7, #20
 800d616:	46bd      	mov	sp, r7
 800d618:	bc80      	pop	{r7}
 800d61a:	4770      	bx	lr

0800d61c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b087      	sub	sp, #28
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	4613      	mov	r3, r2
 800d628:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d630:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	68ba      	ldr	r2, [r7, #8]
 800d636:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d63a:	88fa      	ldrh	r2, [r7, #6]
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	371c      	adds	r7, #28
 800d648:	46bd      	mov	sp, r7
 800d64a:	bc80      	pop	{r7}
 800d64c:	4770      	bx	lr

0800d64e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800d64e:	b480      	push	{r7}
 800d650:	b085      	sub	sp, #20
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d65e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	683a      	ldr	r2, [r7, #0]
 800d664:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3714      	adds	r7, #20
 800d66e:	46bd      	mov	sp, r7
 800d670:	bc80      	pop	{r7}
 800d672:	4770      	bx	lr

0800d674 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d682:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d01c      	beq.n	800d6c8 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d694:	2b00      	cmp	r3, #0
 800d696:	d115      	bne.n	800d6c4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2201      	movs	r2, #1
 800d69c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	2181      	movs	r1, #129	; 0x81
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f001 fcb3 	bl	800f026 <USBD_LL_Transmit>

      return USBD_OK;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	e002      	b.n	800d6ca <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	e000      	b.n	800d6ca <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d6c8:	2302      	movs	r3, #2
  }
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b084      	sub	sp, #16
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d6e0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d017      	beq.n	800d71c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	7c1b      	ldrb	r3, [r3, #16]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d109      	bne.n	800d708 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6fe:	2101      	movs	r1, #1
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f001 fcb3 	bl	800f06c <USBD_LL_PrepareReceive>
 800d706:	e007      	b.n	800d718 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d70e:	2340      	movs	r3, #64	; 0x40
 800d710:	2101      	movs	r1, #1
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f001 fcaa 	bl	800f06c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d718:	2300      	movs	r3, #0
 800d71a:	e000      	b.n	800d71e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d71c:	2302      	movs	r3, #2
  }
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b084      	sub	sp, #16
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	60f8      	str	r0, [r7, #12]
 800d72e:	60b9      	str	r1, [r7, #8]
 800d730:	4613      	mov	r3, r2
 800d732:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d101      	bne.n	800d73e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d73a:	2302      	movs	r3, #2
 800d73c:	e01a      	b.n	800d774 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d744:	2b00      	cmp	r3, #0
 800d746:	d003      	beq.n	800d750 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d003      	beq.n	800d75e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2201      	movs	r2, #1
 800d762:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	79fa      	ldrb	r2, [r7, #7]
 800d76a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f001 fb17 	bl	800eda0 <USBD_LL_Init>

  return USBD_OK;
 800d772:	2300      	movs	r3, #0
}
 800d774:	4618      	mov	r0, r3
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800d786:	2300      	movs	r3, #0
 800d788:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d006      	beq.n	800d79e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800d798:	2300      	movs	r3, #0
 800d79a:	73fb      	strb	r3, [r7, #15]
 800d79c:	e001      	b.n	800d7a2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d79e:	2302      	movs	r3, #2
 800d7a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3714      	adds	r7, #20
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bc80      	pop	{r7}
 800d7ac:	4770      	bx	lr

0800d7ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b082      	sub	sp, #8
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f001 fb4c 	bl	800ee54 <USBD_LL_Start>

  return USBD_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800d7c6:	b480      	push	{r7}
 800d7c8:	b083      	sub	sp, #12
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7ce:	2300      	movs	r3, #0
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bc80      	pop	{r7}
 800d7d8:	4770      	bx	lr

0800d7da <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800d7e6:	2302      	movs	r3, #2
 800d7e8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00c      	beq.n	800d80e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	78fa      	ldrb	r2, [r7, #3]
 800d7fe:	4611      	mov	r1, r2
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	4798      	blx	r3
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d101      	bne.n	800d80e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d80a:	2300      	movs	r3, #0
 800d80c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d810:	4618      	mov	r0, r3
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	460b      	mov	r3, r1
 800d822:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	78fa      	ldrb	r2, [r7, #3]
 800d82e:	4611      	mov	r1, r2
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	4798      	blx	r3
  return USBD_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b082      	sub	sp, #8
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d84e:	6839      	ldr	r1, [r7, #0]
 800d850:	4618      	mov	r0, r3
 800d852:	f000 fe62 	bl	800e51a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2201      	movs	r2, #1
 800d85a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800d864:	461a      	mov	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d872:	f003 031f 	and.w	r3, r3, #31
 800d876:	2b02      	cmp	r3, #2
 800d878:	d016      	beq.n	800d8a8 <USBD_LL_SetupStage+0x6a>
 800d87a:	2b02      	cmp	r3, #2
 800d87c:	d81c      	bhi.n	800d8b8 <USBD_LL_SetupStage+0x7a>
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d002      	beq.n	800d888 <USBD_LL_SetupStage+0x4a>
 800d882:	2b01      	cmp	r3, #1
 800d884:	d008      	beq.n	800d898 <USBD_LL_SetupStage+0x5a>
 800d886:	e017      	b.n	800d8b8 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d88e:	4619      	mov	r1, r3
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 f9c5 	bl	800dc20 <USBD_StdDevReq>
    break;
 800d896:	e01a      	b.n	800d8ce <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d89e:	4619      	mov	r1, r3
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 fa27 	bl	800dcf4 <USBD_StdItfReq>
    break;
 800d8a6:	e012      	b.n	800d8ce <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f000 fa67 	bl	800dd84 <USBD_StdEPReq>
    break;
 800d8b6:	e00a      	b.n	800d8ce <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d8be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f001 fb24 	bl	800ef14 <USBD_LL_StallEP>
    break;
 800d8cc:	bf00      	nop
  }

  return USBD_OK;
 800d8ce:	2300      	movs	r3, #0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b086      	sub	sp, #24
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	607a      	str	r2, [r7, #4]
 800d8e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800d8e6:	7afb      	ldrb	r3, [r7, #11]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d14b      	bne.n	800d984 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d8f2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d8fa:	2b03      	cmp	r3, #3
 800d8fc:	d134      	bne.n	800d968 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	68da      	ldr	r2, [r3, #12]
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	691b      	ldr	r3, [r3, #16]
 800d906:	429a      	cmp	r2, r3
 800d908:	d919      	bls.n	800d93e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	68da      	ldr	r2, [r3, #12]
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	1ad2      	subs	r2, r2, r3
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	68da      	ldr	r2, [r3, #12]
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d920:	429a      	cmp	r2, r3
 800d922:	d203      	bcs.n	800d92c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800d928:	b29b      	uxth	r3, r3
 800d92a:	e002      	b.n	800d932 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d930:	b29b      	uxth	r3, r3
 800d932:	461a      	mov	r2, r3
 800d934:	6879      	ldr	r1, [r7, #4]
 800d936:	68f8      	ldr	r0, [r7, #12]
 800d938:	f000 fee1 	bl	800e6fe <USBD_CtlContinueRx>
 800d93c:	e038      	b.n	800d9b0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d944:	691b      	ldr	r3, [r3, #16]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d950:	2b03      	cmp	r3, #3
 800d952:	d105      	bne.n	800d960 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f000 fede 	bl	800e722 <USBD_CtlSendStatus>
 800d966:	e023      	b.n	800d9b0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d96e:	2b05      	cmp	r3, #5
 800d970:	d11e      	bne.n	800d9b0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2200      	movs	r2, #0
 800d976:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800d97a:	2100      	movs	r1, #0
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f001 fac9 	bl	800ef14 <USBD_LL_StallEP>
 800d982:	e015      	b.n	800d9b0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d98a:	699b      	ldr	r3, [r3, #24]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00d      	beq.n	800d9ac <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800d996:	2b03      	cmp	r3, #3
 800d998:	d108      	bne.n	800d9ac <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	7afa      	ldrb	r2, [r7, #11]
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	4798      	blx	r3
 800d9aa:	e001      	b.n	800d9b0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	e000      	b.n	800d9b2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3718      	adds	r7, #24
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800d9ba:	b580      	push	{r7, lr}
 800d9bc:	b086      	sub	sp, #24
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	60f8      	str	r0, [r7, #12]
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	607a      	str	r2, [r7, #4]
 800d9c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800d9c8:	7afb      	ldrb	r3, [r7, #11]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d17f      	bne.n	800dace <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	3314      	adds	r3, #20
 800d9d2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d15c      	bne.n	800da98 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	68da      	ldr	r2, [r3, #12]
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	691b      	ldr	r3, [r3, #16]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d915      	bls.n	800da16 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	68da      	ldr	r2, [r3, #12]
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	691b      	ldr	r3, [r3, #16]
 800d9f2:	1ad2      	subs	r2, r2, r3
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	461a      	mov	r2, r3
 800da00:	6879      	ldr	r1, [r7, #4]
 800da02:	68f8      	ldr	r0, [r7, #12]
 800da04:	f000 fe4b 	bl	800e69e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800da08:	2300      	movs	r3, #0
 800da0a:	2200      	movs	r2, #0
 800da0c:	2100      	movs	r1, #0
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f001 fb2c 	bl	800f06c <USBD_LL_PrepareReceive>
 800da14:	e04e      	b.n	800dab4 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	6912      	ldr	r2, [r2, #16]
 800da1e:	fbb3 f1f2 	udiv	r1, r3, r2
 800da22:	fb01 f202 	mul.w	r2, r1, r2
 800da26:	1a9b      	subs	r3, r3, r2
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d11c      	bne.n	800da66 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	689a      	ldr	r2, [r3, #8]
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800da34:	429a      	cmp	r2, r3
 800da36:	d316      	bcc.n	800da66 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	689a      	ldr	r2, [r3, #8]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800da42:	429a      	cmp	r2, r3
 800da44:	d20f      	bcs.n	800da66 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800da46:	2200      	movs	r2, #0
 800da48:	2100      	movs	r1, #0
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f000 fe27 	bl	800e69e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2200      	movs	r2, #0
 800da54:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800da58:	2300      	movs	r3, #0
 800da5a:	2200      	movs	r2, #0
 800da5c:	2100      	movs	r1, #0
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f001 fb04 	bl	800f06c <USBD_LL_PrepareReceive>
 800da64:	e026      	b.n	800dab4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00a      	beq.n	800da88 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800da78:	2b03      	cmp	r3, #3
 800da7a:	d105      	bne.n	800da88 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800da88:	2180      	movs	r1, #128	; 0x80
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f001 fa42 	bl	800ef14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f000 fe59 	bl	800e748 <USBD_CtlReceiveStatus>
 800da96:	e00d      	b.n	800dab4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800da9e:	2b04      	cmp	r3, #4
 800daa0:	d004      	beq.n	800daac <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d103      	bne.n	800dab4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800daac:	2180      	movs	r1, #128	; 0x80
 800daae:	68f8      	ldr	r0, [r7, #12]
 800dab0:	f001 fa30 	bl	800ef14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d11d      	bne.n	800dafa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	f7ff fe81 	bl	800d7c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2200      	movs	r2, #0
 800dac8:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800dacc:	e015      	b.n	800dafa <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00d      	beq.n	800daf6 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800dae0:	2b03      	cmp	r3, #3
 800dae2:	d108      	bne.n	800daf6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800daea:	695b      	ldr	r3, [r3, #20]
 800daec:	7afa      	ldrb	r2, [r7, #11]
 800daee:	4611      	mov	r1, r2
 800daf0:	68f8      	ldr	r0, [r7, #12]
 800daf2:	4798      	blx	r3
 800daf4:	e001      	b.n	800dafa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800daf6:	2302      	movs	r3, #2
 800daf8:	e000      	b.n	800dafc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3718      	adds	r7, #24
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db0c:	2340      	movs	r3, #64	; 0x40
 800db0e:	2200      	movs	r2, #0
 800db10:	2100      	movs	r1, #0
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f001 f9b9 	bl	800ee8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2201      	movs	r2, #1
 800db1c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2240      	movs	r2, #64	; 0x40
 800db24:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db28:	2340      	movs	r3, #64	; 0x40
 800db2a:	2200      	movs	r2, #0
 800db2c:	2180      	movs	r1, #128	; 0x80
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f001 f9ab 	bl	800ee8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2240      	movs	r2, #64	; 0x40
 800db3e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800db64:	2b00      	cmp	r3, #0
 800db66:	d009      	beq.n	800db7c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	6852      	ldr	r2, [r2, #4]
 800db74:	b2d2      	uxtb	r2, r2
 800db76:	4611      	mov	r1, r2
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	4798      	blx	r3
  }

  return USBD_OK;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800db86:	b480      	push	{r7}
 800db88:	b083      	sub	sp, #12
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	460b      	mov	r3, r1
 800db90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	78fa      	ldrb	r2, [r7, #3]
 800db96:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bc80      	pop	{r7}
 800dba2:	4770      	bx	lr

0800dba4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2204      	movs	r2, #4
 800dbbc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800dbc0:	2300      	movs	r3, #0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	370c      	adds	r7, #12
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bc80      	pop	{r7}
 800dbca:	4770      	bx	lr

0800dbcc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	370c      	adds	r7, #12
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bc80      	pop	{r7}
 800dbea:	4770      	bx	lr

0800dbec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dbfa:	2b03      	cmp	r3, #3
 800dbfc:	d10b      	bne.n	800dc16 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc04:	69db      	ldr	r3, [r3, #28]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d005      	beq.n	800dc16 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc10:	69db      	ldr	r3, [r3, #28]
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc36:	2b40      	cmp	r3, #64	; 0x40
 800dc38:	d005      	beq.n	800dc46 <USBD_StdDevReq+0x26>
 800dc3a:	2b40      	cmp	r3, #64	; 0x40
 800dc3c:	d84f      	bhi.n	800dcde <USBD_StdDevReq+0xbe>
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d009      	beq.n	800dc56 <USBD_StdDevReq+0x36>
 800dc42:	2b20      	cmp	r3, #32
 800dc44:	d14b      	bne.n	800dcde <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	6839      	ldr	r1, [r7, #0]
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	4798      	blx	r3
    break;
 800dc54:	e048      	b.n	800dce8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	785b      	ldrb	r3, [r3, #1]
 800dc5a:	2b09      	cmp	r3, #9
 800dc5c:	d839      	bhi.n	800dcd2 <USBD_StdDevReq+0xb2>
 800dc5e:	a201      	add	r2, pc, #4	; (adr r2, 800dc64 <USBD_StdDevReq+0x44>)
 800dc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc64:	0800dcb5 	.word	0x0800dcb5
 800dc68:	0800dcc9 	.word	0x0800dcc9
 800dc6c:	0800dcd3 	.word	0x0800dcd3
 800dc70:	0800dcbf 	.word	0x0800dcbf
 800dc74:	0800dcd3 	.word	0x0800dcd3
 800dc78:	0800dc97 	.word	0x0800dc97
 800dc7c:	0800dc8d 	.word	0x0800dc8d
 800dc80:	0800dcd3 	.word	0x0800dcd3
 800dc84:	0800dcab 	.word	0x0800dcab
 800dc88:	0800dca1 	.word	0x0800dca1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 f9da 	bl	800e048 <USBD_GetDescriptor>
      break;
 800dc94:	e022      	b.n	800dcdc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 facf 	bl	800e23c <USBD_SetAddress>
      break;
 800dc9e:	e01d      	b.n	800dcdc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800dca0:	6839      	ldr	r1, [r7, #0]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fb0e 	bl	800e2c4 <USBD_SetConfig>
      break;
 800dca8:	e018      	b.n	800dcdc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800dcaa:	6839      	ldr	r1, [r7, #0]
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fb97 	bl	800e3e0 <USBD_GetConfig>
      break;
 800dcb2:	e013      	b.n	800dcdc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800dcb4:	6839      	ldr	r1, [r7, #0]
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 fbc7 	bl	800e44a <USBD_GetStatus>
      break;
 800dcbc:	e00e      	b.n	800dcdc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800dcbe:	6839      	ldr	r1, [r7, #0]
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 fbf5 	bl	800e4b0 <USBD_SetFeature>
      break;
 800dcc6:	e009      	b.n	800dcdc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800dcc8:	6839      	ldr	r1, [r7, #0]
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 fc04 	bl	800e4d8 <USBD_ClrFeature>
      break;
 800dcd0:	e004      	b.n	800dcdc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 fc5c 	bl	800e592 <USBD_CtlError>
      break;
 800dcda:	bf00      	nop
    }
    break;
 800dcdc:	e004      	b.n	800dce8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f000 fc56 	bl	800e592 <USBD_CtlError>
    break;
 800dce6:	bf00      	nop
  }

  return ret;
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop

0800dcf4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd0a:	2b40      	cmp	r3, #64	; 0x40
 800dd0c:	d005      	beq.n	800dd1a <USBD_StdItfReq+0x26>
 800dd0e:	2b40      	cmp	r3, #64	; 0x40
 800dd10:	d82e      	bhi.n	800dd70 <USBD_StdItfReq+0x7c>
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <USBD_StdItfReq+0x26>
 800dd16:	2b20      	cmp	r3, #32
 800dd18:	d12a      	bne.n	800dd70 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dd20:	3b01      	subs	r3, #1
 800dd22:	2b02      	cmp	r3, #2
 800dd24:	d81d      	bhi.n	800dd62 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	889b      	ldrh	r3, [r3, #4]
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d813      	bhi.n	800dd58 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	4798      	blx	r3
 800dd3e:	4603      	mov	r3, r0
 800dd40:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	88db      	ldrh	r3, [r3, #6]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d110      	bne.n	800dd6c <USBD_StdItfReq+0x78>
 800dd4a:	7bfb      	ldrb	r3, [r7, #15]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10d      	bne.n	800dd6c <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f000 fce6 	bl	800e722 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800dd56:	e009      	b.n	800dd6c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800dd58:	6839      	ldr	r1, [r7, #0]
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 fc19 	bl	800e592 <USBD_CtlError>
      break;
 800dd60:	e004      	b.n	800dd6c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800dd62:	6839      	ldr	r1, [r7, #0]
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 fc14 	bl	800e592 <USBD_CtlError>
      break;
 800dd6a:	e000      	b.n	800dd6e <USBD_StdItfReq+0x7a>
      break;
 800dd6c:	bf00      	nop
    }
    break;
 800dd6e:	e004      	b.n	800dd7a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800dd70:	6839      	ldr	r1, [r7, #0]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 fc0d 	bl	800e592 <USBD_CtlError>
    break;
 800dd78:	bf00      	nop
  }

  return USBD_OK;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	889b      	ldrh	r3, [r3, #4]
 800dd96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dda0:	2b40      	cmp	r3, #64	; 0x40
 800dda2:	d007      	beq.n	800ddb4 <USBD_StdEPReq+0x30>
 800dda4:	2b40      	cmp	r3, #64	; 0x40
 800dda6:	f200 8144 	bhi.w	800e032 <USBD_StdEPReq+0x2ae>
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00a      	beq.n	800ddc4 <USBD_StdEPReq+0x40>
 800ddae:	2b20      	cmp	r3, #32
 800ddb0:	f040 813f 	bne.w	800e032 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	6839      	ldr	r1, [r7, #0]
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	4798      	blx	r3
    break;
 800ddc2:	e13b      	b.n	800e03c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddcc:	2b20      	cmp	r3, #32
 800ddce:	d10a      	bne.n	800dde6 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	6839      	ldr	r1, [r7, #0]
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	4798      	blx	r3
 800ddde:	4603      	mov	r3, r0
 800dde0:	73fb      	strb	r3, [r7, #15]

      return ret;
 800dde2:	7bfb      	ldrb	r3, [r7, #15]
 800dde4:	e12b      	b.n	800e03e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	785b      	ldrb	r3, [r3, #1]
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d007      	beq.n	800ddfe <USBD_StdEPReq+0x7a>
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	f300 8119 	bgt.w	800e026 <USBD_StdEPReq+0x2a2>
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d072      	beq.n	800dede <USBD_StdEPReq+0x15a>
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d03a      	beq.n	800de72 <USBD_StdEPReq+0xee>
 800ddfc:	e113      	b.n	800e026 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800de04:	2b02      	cmp	r3, #2
 800de06:	d002      	beq.n	800de0e <USBD_StdEPReq+0x8a>
 800de08:	2b03      	cmp	r3, #3
 800de0a:	d015      	beq.n	800de38 <USBD_StdEPReq+0xb4>
 800de0c:	e02b      	b.n	800de66 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de0e:	7bbb      	ldrb	r3, [r7, #14]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00c      	beq.n	800de2e <USBD_StdEPReq+0xaa>
 800de14:	7bbb      	ldrb	r3, [r7, #14]
 800de16:	2b80      	cmp	r3, #128	; 0x80
 800de18:	d009      	beq.n	800de2e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	4619      	mov	r1, r3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f001 f878 	bl	800ef14 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800de24:	2180      	movs	r1, #128	; 0x80
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f001 f874 	bl	800ef14 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800de2c:	e020      	b.n	800de70 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800de2e:	6839      	ldr	r1, [r7, #0]
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 fbae 	bl	800e592 <USBD_CtlError>
        break;
 800de36:	e01b      	b.n	800de70 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	885b      	ldrh	r3, [r3, #2]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d10e      	bne.n	800de5e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de40:	7bbb      	ldrb	r3, [r7, #14]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00b      	beq.n	800de5e <USBD_StdEPReq+0xda>
 800de46:	7bbb      	ldrb	r3, [r7, #14]
 800de48:	2b80      	cmp	r3, #128	; 0x80
 800de4a:	d008      	beq.n	800de5e <USBD_StdEPReq+0xda>
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	88db      	ldrh	r3, [r3, #6]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d104      	bne.n	800de5e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800de54:	7bbb      	ldrb	r3, [r7, #14]
 800de56:	4619      	mov	r1, r3
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f001 f85b 	bl	800ef14 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fc5f 	bl	800e722 <USBD_CtlSendStatus>

        break;
 800de64:	e004      	b.n	800de70 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800de66:	6839      	ldr	r1, [r7, #0]
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f000 fb92 	bl	800e592 <USBD_CtlError>
        break;
 800de6e:	bf00      	nop
      }
      break;
 800de70:	e0de      	b.n	800e030 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800de78:	2b02      	cmp	r3, #2
 800de7a:	d002      	beq.n	800de82 <USBD_StdEPReq+0xfe>
 800de7c:	2b03      	cmp	r3, #3
 800de7e:	d015      	beq.n	800deac <USBD_StdEPReq+0x128>
 800de80:	e026      	b.n	800ded0 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de82:	7bbb      	ldrb	r3, [r7, #14]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00c      	beq.n	800dea2 <USBD_StdEPReq+0x11e>
 800de88:	7bbb      	ldrb	r3, [r7, #14]
 800de8a:	2b80      	cmp	r3, #128	; 0x80
 800de8c:	d009      	beq.n	800dea2 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800de8e:	7bbb      	ldrb	r3, [r7, #14]
 800de90:	4619      	mov	r1, r3
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f001 f83e 	bl	800ef14 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800de98:	2180      	movs	r1, #128	; 0x80
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f001 f83a 	bl	800ef14 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800dea0:	e01c      	b.n	800dedc <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800dea2:	6839      	ldr	r1, [r7, #0]
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fb74 	bl	800e592 <USBD_CtlError>
        break;
 800deaa:	e017      	b.n	800dedc <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	885b      	ldrh	r3, [r3, #2]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d112      	bne.n	800deda <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800deb4:	7bbb      	ldrb	r3, [r7, #14]
 800deb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deba:	2b00      	cmp	r3, #0
 800debc:	d004      	beq.n	800dec8 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800debe:	7bbb      	ldrb	r3, [r7, #14]
 800dec0:	4619      	mov	r1, r3
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f001 f845 	bl	800ef52 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 fc2a 	bl	800e722 <USBD_CtlSendStatus>
        }
        break;
 800dece:	e004      	b.n	800deda <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800ded0:	6839      	ldr	r1, [r7, #0]
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 fb5d 	bl	800e592 <USBD_CtlError>
        break;
 800ded8:	e000      	b.n	800dedc <USBD_StdEPReq+0x158>
        break;
 800deda:	bf00      	nop
      }
      break;
 800dedc:	e0a8      	b.n	800e030 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dee4:	2b02      	cmp	r3, #2
 800dee6:	d002      	beq.n	800deee <USBD_StdEPReq+0x16a>
 800dee8:	2b03      	cmp	r3, #3
 800deea:	d031      	beq.n	800df50 <USBD_StdEPReq+0x1cc>
 800deec:	e095      	b.n	800e01a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800deee:	7bbb      	ldrb	r3, [r7, #14]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d007      	beq.n	800df04 <USBD_StdEPReq+0x180>
 800def4:	7bbb      	ldrb	r3, [r7, #14]
 800def6:	2b80      	cmp	r3, #128	; 0x80
 800def8:	d004      	beq.n	800df04 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800defa:	6839      	ldr	r1, [r7, #0]
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fb48 	bl	800e592 <USBD_CtlError>
          break;
 800df02:	e08f      	b.n	800e024 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800df04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	da0b      	bge.n	800df24 <USBD_StdEPReq+0x1a0>
 800df0c:	7bbb      	ldrb	r3, [r7, #14]
 800df0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df12:	4613      	mov	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	3310      	adds	r3, #16
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	4413      	add	r3, r2
 800df20:	3304      	adds	r3, #4
 800df22:	e00a      	b.n	800df3a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800df24:	7bbb      	ldrb	r3, [r7, #14]
 800df26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800df2a:	4613      	mov	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	4413      	add	r3, r2
 800df3a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	2200      	movs	r2, #0
 800df40:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	2202      	movs	r2, #2
 800df46:	4619      	mov	r1, r3
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 fb8c 	bl	800e666 <USBD_CtlSendData>
          break;
 800df4e:	e069      	b.n	800e024 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800df50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df54:	2b00      	cmp	r3, #0
 800df56:	da11      	bge.n	800df7c <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800df58:	7bbb      	ldrb	r3, [r7, #14]
 800df5a:	f003 020f 	and.w	r2, r3, #15
 800df5e:	6879      	ldr	r1, [r7, #4]
 800df60:	4613      	mov	r3, r2
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4413      	add	r3, r2
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	440b      	add	r3, r1
 800df6a:	3318      	adds	r3, #24
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d117      	bne.n	800dfa2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800df72:	6839      	ldr	r1, [r7, #0]
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 fb0c 	bl	800e592 <USBD_CtlError>
            break;
 800df7a:	e053      	b.n	800e024 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800df7c:	7bbb      	ldrb	r3, [r7, #14]
 800df7e:	f003 020f 	and.w	r2, r3, #15
 800df82:	6879      	ldr	r1, [r7, #4]
 800df84:	4613      	mov	r3, r2
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	4413      	add	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	440b      	add	r3, r1
 800df8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d104      	bne.n	800dfa2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800df98:	6839      	ldr	r1, [r7, #0]
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 faf9 	bl	800e592 <USBD_CtlError>
            break;
 800dfa0:	e040      	b.n	800e024 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800dfa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	da0b      	bge.n	800dfc2 <USBD_StdEPReq+0x23e>
 800dfaa:	7bbb      	ldrb	r3, [r7, #14]
 800dfac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4413      	add	r3, r2
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	3310      	adds	r3, #16
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	e00a      	b.n	800dfd8 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800dfc2:	7bbb      	ldrb	r3, [r7, #14]
 800dfc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800dfc8:	4613      	mov	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	4413      	add	r3, r2
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dfda:	7bbb      	ldrb	r3, [r7, #14]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d002      	beq.n	800dfe6 <USBD_StdEPReq+0x262>
 800dfe0:	7bbb      	ldrb	r3, [r7, #14]
 800dfe2:	2b80      	cmp	r3, #128	; 0x80
 800dfe4:	d103      	bne.n	800dfee <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	601a      	str	r2, [r3, #0]
 800dfec:	e00e      	b.n	800e00c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800dfee:	7bbb      	ldrb	r3, [r7, #14]
 800dff0:	4619      	mov	r1, r3
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f000 ffcc 	bl	800ef90 <USBD_LL_IsStallEP>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d003      	beq.n	800e006 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	2201      	movs	r2, #1
 800e002:	601a      	str	r2, [r3, #0]
 800e004:	e002      	b.n	800e00c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	2200      	movs	r2, #0
 800e00a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	2202      	movs	r2, #2
 800e010:	4619      	mov	r1, r3
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 fb27 	bl	800e666 <USBD_CtlSendData>
          break;
 800e018:	e004      	b.n	800e024 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800e01a:	6839      	ldr	r1, [r7, #0]
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 fab8 	bl	800e592 <USBD_CtlError>
        break;
 800e022:	bf00      	nop
      }
      break;
 800e024:	e004      	b.n	800e030 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800e026:	6839      	ldr	r1, [r7, #0]
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 fab2 	bl	800e592 <USBD_CtlError>
      break;
 800e02e:	bf00      	nop
    }
    break;
 800e030:	e004      	b.n	800e03c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800e032:	6839      	ldr	r1, [r7, #0]
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 faac 	bl	800e592 <USBD_CtlError>
    break;
 800e03a:	bf00      	nop
  }

  return ret;
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
	...

0800e048 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	885b      	ldrh	r3, [r3, #2]
 800e056:	0a1b      	lsrs	r3, r3, #8
 800e058:	b29b      	uxth	r3, r3
 800e05a:	3b01      	subs	r3, #1
 800e05c:	2b06      	cmp	r3, #6
 800e05e:	f200 80c9 	bhi.w	800e1f4 <USBD_GetDescriptor+0x1ac>
 800e062:	a201      	add	r2, pc, #4	; (adr r2, 800e068 <USBD_GetDescriptor+0x20>)
 800e064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e068:	0800e085 	.word	0x0800e085
 800e06c:	0800e09d 	.word	0x0800e09d
 800e070:	0800e0dd 	.word	0x0800e0dd
 800e074:	0800e1f5 	.word	0x0800e1f5
 800e078:	0800e1f5 	.word	0x0800e1f5
 800e07c:	0800e1a1 	.word	0x0800e1a1
 800e080:	0800e1c7 	.word	0x0800e1c7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	7c12      	ldrb	r2, [r2, #16]
 800e090:	f107 010a 	add.w	r1, r7, #10
 800e094:	4610      	mov	r0, r2
 800e096:	4798      	blx	r3
 800e098:	60f8      	str	r0, [r7, #12]
    break;
 800e09a:	e0b0      	b.n	800e1fe <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	7c1b      	ldrb	r3, [r3, #16]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10d      	bne.n	800e0c0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ac:	f107 020a 	add.w	r2, r7, #10
 800e0b0:	4610      	mov	r0, r2
 800e0b2:	4798      	blx	r3
 800e0b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e0be:	e09e      	b.n	800e1fe <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c8:	f107 020a 	add.w	r2, r7, #10
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	4798      	blx	r3
 800e0d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	2202      	movs	r2, #2
 800e0d8:	701a      	strb	r2, [r3, #0]
    break;
 800e0da:	e090      	b.n	800e1fe <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	885b      	ldrh	r3, [r3, #2]
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	2b05      	cmp	r3, #5
 800e0e4:	d856      	bhi.n	800e194 <USBD_GetDescriptor+0x14c>
 800e0e6:	a201      	add	r2, pc, #4	; (adr r2, 800e0ec <USBD_GetDescriptor+0xa4>)
 800e0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ec:	0800e105 	.word	0x0800e105
 800e0f0:	0800e11d 	.word	0x0800e11d
 800e0f4:	0800e135 	.word	0x0800e135
 800e0f8:	0800e14d 	.word	0x0800e14d
 800e0fc:	0800e165 	.word	0x0800e165
 800e100:	0800e17d 	.word	0x0800e17d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	7c12      	ldrb	r2, [r2, #16]
 800e110:	f107 010a 	add.w	r1, r7, #10
 800e114:	4610      	mov	r0, r2
 800e116:	4798      	blx	r3
 800e118:	60f8      	str	r0, [r7, #12]
      break;
 800e11a:	e040      	b.n	800e19e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	7c12      	ldrb	r2, [r2, #16]
 800e128:	f107 010a 	add.w	r1, r7, #10
 800e12c:	4610      	mov	r0, r2
 800e12e:	4798      	blx	r3
 800e130:	60f8      	str	r0, [r7, #12]
      break;
 800e132:	e034      	b.n	800e19e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	7c12      	ldrb	r2, [r2, #16]
 800e140:	f107 010a 	add.w	r1, r7, #10
 800e144:	4610      	mov	r0, r2
 800e146:	4798      	blx	r3
 800e148:	60f8      	str	r0, [r7, #12]
      break;
 800e14a:	e028      	b.n	800e19e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e152:	691b      	ldr	r3, [r3, #16]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	7c12      	ldrb	r2, [r2, #16]
 800e158:	f107 010a 	add.w	r1, r7, #10
 800e15c:	4610      	mov	r0, r2
 800e15e:	4798      	blx	r3
 800e160:	60f8      	str	r0, [r7, #12]
      break;
 800e162:	e01c      	b.n	800e19e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e16a:	695b      	ldr	r3, [r3, #20]
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	7c12      	ldrb	r2, [r2, #16]
 800e170:	f107 010a 	add.w	r1, r7, #10
 800e174:	4610      	mov	r0, r2
 800e176:	4798      	blx	r3
 800e178:	60f8      	str	r0, [r7, #12]
      break;
 800e17a:	e010      	b.n	800e19e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e182:	699b      	ldr	r3, [r3, #24]
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	7c12      	ldrb	r2, [r2, #16]
 800e188:	f107 010a 	add.w	r1, r7, #10
 800e18c:	4610      	mov	r0, r2
 800e18e:	4798      	blx	r3
 800e190:	60f8      	str	r0, [r7, #12]
      break;
 800e192:	e004      	b.n	800e19e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800e194:	6839      	ldr	r1, [r7, #0]
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 f9fb 	bl	800e592 <USBD_CtlError>
      return;
 800e19c:	e04b      	b.n	800e236 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800e19e:	e02e      	b.n	800e1fe <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	7c1b      	ldrb	r3, [r3, #16]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d109      	bne.n	800e1bc <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e1ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1b0:	f107 020a 	add.w	r2, r7, #10
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	4798      	blx	r3
 800e1b8:	60f8      	str	r0, [r7, #12]
      break;
 800e1ba:	e020      	b.n	800e1fe <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e1bc:	6839      	ldr	r1, [r7, #0]
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 f9e7 	bl	800e592 <USBD_CtlError>
      return;
 800e1c4:	e037      	b.n	800e236 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	7c1b      	ldrb	r3, [r3, #16]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10d      	bne.n	800e1ea <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1d6:	f107 020a 	add.w	r2, r7, #10
 800e1da:	4610      	mov	r0, r2
 800e1dc:	4798      	blx	r3
 800e1de:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	2207      	movs	r2, #7
 800e1e6:	701a      	strb	r2, [r3, #0]
      break;
 800e1e8:	e009      	b.n	800e1fe <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e1ea:	6839      	ldr	r1, [r7, #0]
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 f9d0 	bl	800e592 <USBD_CtlError>
      return;
 800e1f2:	e020      	b.n	800e236 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800e1f4:	6839      	ldr	r1, [r7, #0]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 f9cb 	bl	800e592 <USBD_CtlError>
    return;
 800e1fc:	e01b      	b.n	800e236 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800e1fe:	897b      	ldrh	r3, [r7, #10]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d011      	beq.n	800e228 <USBD_GetDescriptor+0x1e0>
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	88db      	ldrh	r3, [r3, #6]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d00d      	beq.n	800e228 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	88da      	ldrh	r2, [r3, #6]
 800e210:	897b      	ldrh	r3, [r7, #10]
 800e212:	4293      	cmp	r3, r2
 800e214:	bf28      	it	cs
 800e216:	4613      	movcs	r3, r2
 800e218:	b29b      	uxth	r3, r3
 800e21a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800e21c:	897b      	ldrh	r3, [r7, #10]
 800e21e:	461a      	mov	r2, r3
 800e220:	68f9      	ldr	r1, [r7, #12]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 fa1f 	bl	800e666 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	88db      	ldrh	r3, [r3, #6]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d102      	bne.n	800e236 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 fa76 	bl	800e722 <USBD_CtlSendStatus>
  }
}
 800e236:	3710      	adds	r7, #16
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	889b      	ldrh	r3, [r3, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d130      	bne.n	800e2b0 <USBD_SetAddress+0x74>
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	88db      	ldrh	r3, [r3, #6]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d12c      	bne.n	800e2b0 <USBD_SetAddress+0x74>
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	885b      	ldrh	r3, [r3, #2]
 800e25a:	2b7f      	cmp	r3, #127	; 0x7f
 800e25c:	d828      	bhi.n	800e2b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	885b      	ldrh	r3, [r3, #2]
 800e262:	b2db      	uxtb	r3, r3
 800e264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e268:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e270:	2b03      	cmp	r3, #3
 800e272:	d104      	bne.n	800e27e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 f98b 	bl	800e592 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e27c:	e01d      	b.n	800e2ba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	7bfa      	ldrb	r2, [r7, #15]
 800e282:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e286:	7bfb      	ldrb	r3, [r7, #15]
 800e288:	4619      	mov	r1, r3
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 feac 	bl	800efe8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 fa46 	bl	800e722 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e296:	7bfb      	ldrb	r3, [r7, #15]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d004      	beq.n	800e2a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2202      	movs	r2, #2
 800e2a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2a4:	e009      	b.n	800e2ba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2ae:	e004      	b.n	800e2ba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e2b0:	6839      	ldr	r1, [r7, #0]
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 f96d 	bl	800e592 <USBD_CtlError>
  }
}
 800e2b8:	bf00      	nop
 800e2ba:	bf00      	nop
 800e2bc:	3710      	adds	r7, #16
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
	...

0800e2c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	885b      	ldrh	r3, [r3, #2]
 800e2d2:	b2da      	uxtb	r2, r3
 800e2d4:	4b41      	ldr	r3, [pc, #260]	; (800e3dc <USBD_SetConfig+0x118>)
 800e2d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e2d8:	4b40      	ldr	r3, [pc, #256]	; (800e3dc <USBD_SetConfig+0x118>)
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d904      	bls.n	800e2ea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e2e0:	6839      	ldr	r1, [r7, #0]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 f955 	bl	800e592 <USBD_CtlError>
 800e2e8:	e075      	b.n	800e3d6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e2f0:	2b02      	cmp	r3, #2
 800e2f2:	d002      	beq.n	800e2fa <USBD_SetConfig+0x36>
 800e2f4:	2b03      	cmp	r3, #3
 800e2f6:	d023      	beq.n	800e340 <USBD_SetConfig+0x7c>
 800e2f8:	e062      	b.n	800e3c0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800e2fa:	4b38      	ldr	r3, [pc, #224]	; (800e3dc <USBD_SetConfig+0x118>)
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d01a      	beq.n	800e338 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800e302:	4b36      	ldr	r3, [pc, #216]	; (800e3dc <USBD_SetConfig+0x118>)
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	461a      	mov	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2203      	movs	r2, #3
 800e310:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e314:	4b31      	ldr	r3, [pc, #196]	; (800e3dc <USBD_SetConfig+0x118>)
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7ff fa5d 	bl	800d7da <USBD_SetClassConfig>
 800e320:	4603      	mov	r3, r0
 800e322:	2b02      	cmp	r3, #2
 800e324:	d104      	bne.n	800e330 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 f932 	bl	800e592 <USBD_CtlError>
          return;
 800e32e:	e052      	b.n	800e3d6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 f9f6 	bl	800e722 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e336:	e04e      	b.n	800e3d6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f9f2 	bl	800e722 <USBD_CtlSendStatus>
      break;
 800e33e:	e04a      	b.n	800e3d6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e340:	4b26      	ldr	r3, [pc, #152]	; (800e3dc <USBD_SetConfig+0x118>)
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d112      	bne.n	800e36e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2202      	movs	r2, #2
 800e34c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800e350:	4b22      	ldr	r3, [pc, #136]	; (800e3dc <USBD_SetConfig+0x118>)
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	461a      	mov	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800e35a:	4b20      	ldr	r3, [pc, #128]	; (800e3dc <USBD_SetConfig+0x118>)
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	4619      	mov	r1, r3
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f7ff fa59 	bl	800d818 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 f9db 	bl	800e722 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e36c:	e033      	b.n	800e3d6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800e36e:	4b1b      	ldr	r3, [pc, #108]	; (800e3dc <USBD_SetConfig+0x118>)
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	461a      	mov	r2, r3
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	429a      	cmp	r2, r3
 800e37a:	d01d      	beq.n	800e3b8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	b2db      	uxtb	r3, r3
 800e382:	4619      	mov	r1, r3
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7ff fa47 	bl	800d818 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e38a:	4b14      	ldr	r3, [pc, #80]	; (800e3dc <USBD_SetConfig+0x118>)
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	461a      	mov	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e394:	4b11      	ldr	r3, [pc, #68]	; (800e3dc <USBD_SetConfig+0x118>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	4619      	mov	r1, r3
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f7ff fa1d 	bl	800d7da <USBD_SetClassConfig>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b02      	cmp	r3, #2
 800e3a4:	d104      	bne.n	800e3b0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800e3a6:	6839      	ldr	r1, [r7, #0]
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 f8f2 	bl	800e592 <USBD_CtlError>
          return;
 800e3ae:	e012      	b.n	800e3d6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f9b6 	bl	800e722 <USBD_CtlSendStatus>
      break;
 800e3b6:	e00e      	b.n	800e3d6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 f9b2 	bl	800e722 <USBD_CtlSendStatus>
      break;
 800e3be:	e00a      	b.n	800e3d6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800e3c0:	6839      	ldr	r1, [r7, #0]
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f8e5 	bl	800e592 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800e3c8:	4b04      	ldr	r3, [pc, #16]	; (800e3dc <USBD_SetConfig+0x118>)
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f7ff fa22 	bl	800d818 <USBD_ClrClassConfig>
      break;
 800e3d4:	bf00      	nop
    }
  }
}
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	20000ec8 	.word	0x20000ec8

0800e3e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	88db      	ldrh	r3, [r3, #6]
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d004      	beq.n	800e3fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800e3f2:	6839      	ldr	r1, [r7, #0]
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f8cc 	bl	800e592 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800e3fa:	e022      	b.n	800e442 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e402:	2b02      	cmp	r3, #2
 800e404:	dc02      	bgt.n	800e40c <USBD_GetConfig+0x2c>
 800e406:	2b00      	cmp	r3, #0
 800e408:	dc03      	bgt.n	800e412 <USBD_GetConfig+0x32>
 800e40a:	e015      	b.n	800e438 <USBD_GetConfig+0x58>
 800e40c:	2b03      	cmp	r3, #3
 800e40e:	d00b      	beq.n	800e428 <USBD_GetConfig+0x48>
 800e410:	e012      	b.n	800e438 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	3308      	adds	r3, #8
 800e41c:	2201      	movs	r2, #1
 800e41e:	4619      	mov	r1, r3
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 f920 	bl	800e666 <USBD_CtlSendData>
      break;
 800e426:	e00c      	b.n	800e442 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	3304      	adds	r3, #4
 800e42c:	2201      	movs	r2, #1
 800e42e:	4619      	mov	r1, r3
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f918 	bl	800e666 <USBD_CtlSendData>
      break;
 800e436:	e004      	b.n	800e442 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800e438:	6839      	ldr	r1, [r7, #0]
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f8a9 	bl	800e592 <USBD_CtlError>
      break;
 800e440:	bf00      	nop
}
 800e442:	bf00      	nop
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b082      	sub	sp, #8
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e45a:	3b01      	subs	r3, #1
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	d81e      	bhi.n	800e49e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	88db      	ldrh	r3, [r3, #6]
 800e464:	2b02      	cmp	r3, #2
 800e466:	d004      	beq.n	800e472 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e468:	6839      	ldr	r1, [r7, #0]
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 f891 	bl	800e592 <USBD_CtlError>
      break;
 800e470:	e01a      	b.n	800e4a8 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2201      	movs	r2, #1
 800e476:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d005      	beq.n	800e48e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	f043 0202 	orr.w	r2, r3, #2
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	330c      	adds	r3, #12
 800e492:	2202      	movs	r2, #2
 800e494:	4619      	mov	r1, r3
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 f8e5 	bl	800e666 <USBD_CtlSendData>
    break;
 800e49c:	e004      	b.n	800e4a8 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 f876 	bl	800e592 <USBD_CtlError>
    break;
 800e4a6:	bf00      	nop
  }
}
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	885b      	ldrh	r3, [r3, #2]
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d106      	bne.n	800e4d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f000 f929 	bl	800e722 <USBD_CtlSendStatus>
  }

}
 800e4d0:	bf00      	nop
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	2b02      	cmp	r3, #2
 800e4ec:	d80b      	bhi.n	800e506 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	885b      	ldrh	r3, [r3, #2]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d10c      	bne.n	800e510 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 f90f 	bl	800e722 <USBD_CtlSendStatus>
    }
    break;
 800e504:	e004      	b.n	800e510 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800e506:	6839      	ldr	r1, [r7, #0]
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f000 f842 	bl	800e592 <USBD_CtlError>
    break;
 800e50e:	e000      	b.n	800e512 <USBD_ClrFeature+0x3a>
    break;
 800e510:	bf00      	nop
  }
}
 800e512:	bf00      	nop
 800e514:	3708      	adds	r7, #8
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e51a:	b480      	push	{r7}
 800e51c:	b083      	sub	sp, #12
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
 800e522:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	781a      	ldrb	r2, [r3, #0]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	785a      	ldrb	r2, [r3, #1]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	3302      	adds	r3, #2
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	3303      	adds	r3, #3
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	b29b      	uxth	r3, r3
 800e544:	021b      	lsls	r3, r3, #8
 800e546:	b29b      	uxth	r3, r3
 800e548:	4413      	add	r3, r2
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	3304      	adds	r3, #4
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	b29a      	uxth	r2, r3
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	3305      	adds	r3, #5
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	b29b      	uxth	r3, r3
 800e560:	021b      	lsls	r3, r3, #8
 800e562:	b29b      	uxth	r3, r3
 800e564:	4413      	add	r3, r2
 800e566:	b29a      	uxth	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	3306      	adds	r3, #6
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	b29a      	uxth	r2, r3
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	3307      	adds	r3, #7
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	021b      	lsls	r3, r3, #8
 800e57e:	b29b      	uxth	r3, r3
 800e580:	4413      	add	r3, r2
 800e582:	b29a      	uxth	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	80da      	strh	r2, [r3, #6]

}
 800e588:	bf00      	nop
 800e58a:	370c      	adds	r7, #12
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bc80      	pop	{r7}
 800e590:	4770      	bx	lr

0800e592 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e592:	b580      	push	{r7, lr}
 800e594:	b082      	sub	sp, #8
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
 800e59a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800e59c:	2180      	movs	r1, #128	; 0x80
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fcb8 	bl	800ef14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800e5a4:	2100      	movs	r1, #0
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 fcb4 	bl	800ef14 <USBD_LL_StallEP>
}
 800e5ac:	bf00      	nop
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b086      	sub	sp, #24
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d032      	beq.n	800e630 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f000 f834 	bl	800e638 <USBD_GetLen>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e5de:	7dfb      	ldrb	r3, [r7, #23]
 800e5e0:	1c5a      	adds	r2, r3, #1
 800e5e2:	75fa      	strb	r2, [r7, #23]
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	7812      	ldrb	r2, [r2, #0]
 800e5ee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e5f0:	7dfb      	ldrb	r3, [r7, #23]
 800e5f2:	1c5a      	adds	r2, r3, #1
 800e5f4:	75fa      	strb	r2, [r7, #23]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	2203      	movs	r2, #3
 800e5fe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e600:	e012      	b.n	800e628 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	1c5a      	adds	r2, r3, #1
 800e606:	60fa      	str	r2, [r7, #12]
 800e608:	7dfa      	ldrb	r2, [r7, #23]
 800e60a:	1c51      	adds	r1, r2, #1
 800e60c:	75f9      	strb	r1, [r7, #23]
 800e60e:	4611      	mov	r1, r2
 800e610:	68ba      	ldr	r2, [r7, #8]
 800e612:	440a      	add	r2, r1
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e618:	7dfb      	ldrb	r3, [r7, #23]
 800e61a:	1c5a      	adds	r2, r3, #1
 800e61c:	75fa      	strb	r2, [r7, #23]
 800e61e:	461a      	mov	r2, r3
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	4413      	add	r3, r2
 800e624:	2200      	movs	r2, #0
 800e626:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d1e8      	bne.n	800e602 <USBD_GetString+0x4e>
    }
  }
}
 800e630:	bf00      	nop
 800e632:	3718      	adds	r7, #24
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800e640:	2300      	movs	r3, #0
 800e642:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800e644:	e005      	b.n	800e652 <USBD_GetLen+0x1a>
    {
        len++;
 800e646:	7bfb      	ldrb	r3, [r7, #15]
 800e648:	3301      	adds	r3, #1
 800e64a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	3301      	adds	r3, #1
 800e650:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1f5      	bne.n	800e646 <USBD_GetLen+0xe>
    }

    return len;
 800e65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3714      	adds	r7, #20
 800e660:	46bd      	mov	sp, r7
 800e662:	bc80      	pop	{r7}
 800e664:	4770      	bx	lr

0800e666 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800e666:	b580      	push	{r7, lr}
 800e668:	b084      	sub	sp, #16
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	60f8      	str	r0, [r7, #12]
 800e66e:	60b9      	str	r1, [r7, #8]
 800e670:	4613      	mov	r3, r2
 800e672:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2202      	movs	r2, #2
 800e678:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800e67c:	88fa      	ldrh	r2, [r7, #6]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e682:	88fa      	ldrh	r2, [r7, #6]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e688:	88fb      	ldrh	r3, [r7, #6]
 800e68a:	68ba      	ldr	r2, [r7, #8]
 800e68c:	2100      	movs	r1, #0
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f000 fcc9 	bl	800f026 <USBD_LL_Transmit>

  return USBD_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b084      	sub	sp, #16
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	60f8      	str	r0, [r7, #12]
 800e6a6:	60b9      	str	r1, [r7, #8]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e6ac:	88fb      	ldrh	r3, [r7, #6]
 800e6ae:	68ba      	ldr	r2, [r7, #8]
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f000 fcb7 	bl	800f026 <USBD_LL_Transmit>

  return USBD_OK;
 800e6b8:	2300      	movs	r3, #0
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3710      	adds	r7, #16
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b084      	sub	sp, #16
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	60f8      	str	r0, [r7, #12]
 800e6ca:	60b9      	str	r1, [r7, #8]
 800e6cc:	4613      	mov	r3, r2
 800e6ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2203      	movs	r2, #3
 800e6d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800e6d8:	88fa      	ldrh	r2, [r7, #6]
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800e6e0:	88fa      	ldrh	r2, [r7, #6]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800e6e8:	88fb      	ldrh	r3, [r7, #6]
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	68f8      	ldr	r0, [r7, #12]
 800e6f0:	f000 fcbc 	bl	800f06c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6f4:	2300      	movs	r3, #0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3710      	adds	r7, #16
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b084      	sub	sp, #16
 800e702:	af00      	add	r7, sp, #0
 800e704:	60f8      	str	r0, [r7, #12]
 800e706:	60b9      	str	r1, [r7, #8]
 800e708:	4613      	mov	r3, r2
 800e70a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e70c:	88fb      	ldrh	r3, [r7, #6]
 800e70e:	68ba      	ldr	r2, [r7, #8]
 800e710:	2100      	movs	r1, #0
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f000 fcaa 	bl	800f06c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b082      	sub	sp, #8
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2204      	movs	r2, #4
 800e72e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e732:	2300      	movs	r3, #0
 800e734:	2200      	movs	r2, #0
 800e736:	2100      	movs	r1, #0
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 fc74 	bl	800f026 <USBD_LL_Transmit>

  return USBD_OK;
 800e73e:	2300      	movs	r3, #0
}
 800e740:	4618      	mov	r0, r3
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2205      	movs	r2, #5
 800e754:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e758:	2300      	movs	r3, #0
 800e75a:	2200      	movs	r2, #0
 800e75c:	2100      	movs	r1, #0
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 fc84 	bl	800f06c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3708      	adds	r7, #8
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
	...

0800e770 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e774:	2200      	movs	r2, #0
 800e776:	4912      	ldr	r1, [pc, #72]	; (800e7c0 <MX_USB_DEVICE_Init+0x50>)
 800e778:	4812      	ldr	r0, [pc, #72]	; (800e7c4 <MX_USB_DEVICE_Init+0x54>)
 800e77a:	f7fe ffd4 	bl	800d726 <USBD_Init>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d001      	beq.n	800e788 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e784:	f7f5 fea2 	bl	80044cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e788:	490f      	ldr	r1, [pc, #60]	; (800e7c8 <MX_USB_DEVICE_Init+0x58>)
 800e78a:	480e      	ldr	r0, [pc, #56]	; (800e7c4 <MX_USB_DEVICE_Init+0x54>)
 800e78c:	f7fe fff6 	bl	800d77c <USBD_RegisterClass>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d001      	beq.n	800e79a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e796:	f7f5 fe99 	bl	80044cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e79a:	490c      	ldr	r1, [pc, #48]	; (800e7cc <MX_USB_DEVICE_Init+0x5c>)
 800e79c:	4809      	ldr	r0, [pc, #36]	; (800e7c4 <MX_USB_DEVICE_Init+0x54>)
 800e79e:	f7fe ff27 	bl	800d5f0 <USBD_CDC_RegisterInterface>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e7a8:	f7f5 fe90 	bl	80044cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e7ac:	4805      	ldr	r0, [pc, #20]	; (800e7c4 <MX_USB_DEVICE_Init+0x54>)
 800e7ae:	f7fe fffe 	bl	800d7ae <USBD_Start>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d001      	beq.n	800e7bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e7b8:	f7f5 fe88 	bl	80044cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e7bc:	bf00      	nop
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	200008e8 	.word	0x200008e8
 800e7c4:	20000ecc 	.word	0x20000ecc
 800e7c8:	200007d4 	.word	0x200007d4
 800e7cc:	200008d8 	.word	0x200008d8

0800e7d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	4905      	ldr	r1, [pc, #20]	; (800e7ec <CDC_Init_FS+0x1c>)
 800e7d8:	4805      	ldr	r0, [pc, #20]	; (800e7f0 <CDC_Init_FS+0x20>)
 800e7da:	f7fe ff1f 	bl	800d61c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e7de:	4905      	ldr	r1, [pc, #20]	; (800e7f4 <CDC_Init_FS+0x24>)
 800e7e0:	4803      	ldr	r0, [pc, #12]	; (800e7f0 <CDC_Init_FS+0x20>)
 800e7e2:	f7fe ff34 	bl	800d64e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e7e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	200011e8 	.word	0x200011e8
 800e7f0:	20000ecc 	.word	0x20000ecc
 800e7f4:	20001168 	.word	0x20001168

0800e7f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e7fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	46bd      	mov	sp, r7
 800e802:	bc80      	pop	{r7}
 800e804:	4770      	bx	lr
	...

0800e808 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	6039      	str	r1, [r7, #0]
 800e812:	71fb      	strb	r3, [r7, #7]
 800e814:	4613      	mov	r3, r2
 800e816:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e818:	79fb      	ldrb	r3, [r7, #7]
 800e81a:	2b23      	cmp	r3, #35	; 0x23
 800e81c:	d866      	bhi.n	800e8ec <CDC_Control_FS+0xe4>
 800e81e:	a201      	add	r2, pc, #4	; (adr r2, 800e824 <CDC_Control_FS+0x1c>)
 800e820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e824:	0800e8ed 	.word	0x0800e8ed
 800e828:	0800e8ed 	.word	0x0800e8ed
 800e82c:	0800e8ed 	.word	0x0800e8ed
 800e830:	0800e8ed 	.word	0x0800e8ed
 800e834:	0800e8ed 	.word	0x0800e8ed
 800e838:	0800e8ed 	.word	0x0800e8ed
 800e83c:	0800e8ed 	.word	0x0800e8ed
 800e840:	0800e8ed 	.word	0x0800e8ed
 800e844:	0800e8ed 	.word	0x0800e8ed
 800e848:	0800e8ed 	.word	0x0800e8ed
 800e84c:	0800e8ed 	.word	0x0800e8ed
 800e850:	0800e8ed 	.word	0x0800e8ed
 800e854:	0800e8ed 	.word	0x0800e8ed
 800e858:	0800e8ed 	.word	0x0800e8ed
 800e85c:	0800e8ed 	.word	0x0800e8ed
 800e860:	0800e8ed 	.word	0x0800e8ed
 800e864:	0800e8ed 	.word	0x0800e8ed
 800e868:	0800e8ed 	.word	0x0800e8ed
 800e86c:	0800e8ed 	.word	0x0800e8ed
 800e870:	0800e8ed 	.word	0x0800e8ed
 800e874:	0800e8ed 	.word	0x0800e8ed
 800e878:	0800e8ed 	.word	0x0800e8ed
 800e87c:	0800e8ed 	.word	0x0800e8ed
 800e880:	0800e8ed 	.word	0x0800e8ed
 800e884:	0800e8ed 	.word	0x0800e8ed
 800e888:	0800e8ed 	.word	0x0800e8ed
 800e88c:	0800e8ed 	.word	0x0800e8ed
 800e890:	0800e8ed 	.word	0x0800e8ed
 800e894:	0800e8ed 	.word	0x0800e8ed
 800e898:	0800e8ed 	.word	0x0800e8ed
 800e89c:	0800e8ed 	.word	0x0800e8ed
 800e8a0:	0800e8ed 	.word	0x0800e8ed
 800e8a4:	0800e8ed 	.word	0x0800e8ed
 800e8a8:	0800e8b5 	.word	0x0800e8b5
 800e8ac:	0800e8ed 	.word	0x0800e8ed
 800e8b0:	0800e8ed 	.word	0x0800e8ed
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	2220      	movs	r2, #32
 800e8b8:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	22c2      	movs	r2, #194	; 0xc2
 800e8c0:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	3302      	adds	r3, #2
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	3303      	adds	r3, #3
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	3305      	adds	r3, #5
 800e8de:	2200      	movs	r2, #0
 800e8e0:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	3306      	adds	r3, #6
 800e8e6:	2208      	movs	r2, #8
 800e8e8:	701a      	strb	r2, [r3, #0]
    break;
 800e8ea:	e000      	b.n	800e8ee <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e8ec:	bf00      	nop
  }

  return (USBD_OK);
 800e8ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bc80      	pop	{r7}
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop

0800e8fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800e906:	2300      	movs	r3, #0
 800e908:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800e90a:	e018      	b.n	800e93e <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	4413      	add	r3, r2
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	2b0a      	cmp	r3, #10
 800e916:	d005      	beq.n	800e924 <CDC_Receive_FS+0x28>
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	4413      	add	r3, r2
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	2b0d      	cmp	r3, #13
 800e922:	d102      	bne.n	800e92a <CDC_Receive_FS+0x2e>
 800e924:	4b12      	ldr	r3, [pc, #72]	; (800e970 <CDC_Receive_FS+0x74>)
 800e926:	2201      	movs	r2, #1
 800e928:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	4413      	add	r3, r2
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	4618      	mov	r0, r3
 800e934:	f7f5 fdb2 	bl	800449c <Write_to_circ_buffer>
	  i++;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	3301      	adds	r3, #1
 800e93c:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	429a      	cmp	r2, r3
 800e946:	d3e1      	bcc.n	800e90c <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	4619      	mov	r1, r3
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 f811 	bl	800e978 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e956:	6879      	ldr	r1, [r7, #4]
 800e958:	4806      	ldr	r0, [pc, #24]	; (800e974 <CDC_Receive_FS+0x78>)
 800e95a:	f7fe fe78 	bl	800d64e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e95e:	4805      	ldr	r0, [pc, #20]	; (800e974 <CDC_Receive_FS+0x78>)
 800e960:	f7fe feb7 	bl	800d6d2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e964:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e966:	4618      	mov	r0, r3
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	20000c1c 	.word	0x20000c1c
 800e974:	20000ecc 	.word	0x20000ecc

0800e978 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e984:	2300      	movs	r3, #0
 800e986:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e988:	4b0d      	ldr	r3, [pc, #52]	; (800e9c0 <CDC_Transmit_FS+0x48>)
 800e98a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e98e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e99a:	2301      	movs	r3, #1
 800e99c:	e00b      	b.n	800e9b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e99e:	887b      	ldrh	r3, [r7, #2]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	6879      	ldr	r1, [r7, #4]
 800e9a4:	4806      	ldr	r0, [pc, #24]	; (800e9c0 <CDC_Transmit_FS+0x48>)
 800e9a6:	f7fe fe39 	bl	800d61c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e9aa:	4805      	ldr	r0, [pc, #20]	; (800e9c0 <CDC_Transmit_FS+0x48>)
 800e9ac:	f7fe fe62 	bl	800d674 <USBD_CDC_TransmitPacket>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	20000ecc 	.word	0x20000ecc

0800e9c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b083      	sub	sp, #12
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	6039      	str	r1, [r7, #0]
 800e9ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2212      	movs	r2, #18
 800e9d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e9d6:	4b03      	ldr	r3, [pc, #12]	; (800e9e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bc80      	pop	{r7}
 800e9e0:	4770      	bx	lr
 800e9e2:	bf00      	nop
 800e9e4:	20000904 	.word	0x20000904

0800e9e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	6039      	str	r1, [r7, #0]
 800e9f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	2204      	movs	r2, #4
 800e9f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e9fa:	4b03      	ldr	r3, [pc, #12]	; (800ea08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	370c      	adds	r7, #12
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bc80      	pop	{r7}
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop
 800ea08:	20000918 	.word	0x20000918

0800ea0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	4603      	mov	r3, r0
 800ea14:	6039      	str	r1, [r7, #0]
 800ea16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea18:	79fb      	ldrb	r3, [r7, #7]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d105      	bne.n	800ea2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea1e:	683a      	ldr	r2, [r7, #0]
 800ea20:	4907      	ldr	r1, [pc, #28]	; (800ea40 <USBD_FS_ProductStrDescriptor+0x34>)
 800ea22:	4808      	ldr	r0, [pc, #32]	; (800ea44 <USBD_FS_ProductStrDescriptor+0x38>)
 800ea24:	f7ff fdc6 	bl	800e5b4 <USBD_GetString>
 800ea28:	e004      	b.n	800ea34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea2a:	683a      	ldr	r2, [r7, #0]
 800ea2c:	4904      	ldr	r1, [pc, #16]	; (800ea40 <USBD_FS_ProductStrDescriptor+0x34>)
 800ea2e:	4805      	ldr	r0, [pc, #20]	; (800ea44 <USBD_FS_ProductStrDescriptor+0x38>)
 800ea30:	f7ff fdc0 	bl	800e5b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea34:	4b02      	ldr	r3, [pc, #8]	; (800ea40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3708      	adds	r7, #8
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	200012e8 	.word	0x200012e8
 800ea44:	08013a20 	.word	0x08013a20

0800ea48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	4603      	mov	r3, r0
 800ea50:	6039      	str	r1, [r7, #0]
 800ea52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ea54:	683a      	ldr	r2, [r7, #0]
 800ea56:	4904      	ldr	r1, [pc, #16]	; (800ea68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ea58:	4804      	ldr	r0, [pc, #16]	; (800ea6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ea5a:	f7ff fdab 	bl	800e5b4 <USBD_GetString>
  return USBD_StrDesc;
 800ea5e:	4b02      	ldr	r3, [pc, #8]	; (800ea68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	200012e8 	.word	0x200012e8
 800ea6c:	08013a2c 	.word	0x08013a2c

0800ea70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	4603      	mov	r3, r0
 800ea78:	6039      	str	r1, [r7, #0]
 800ea7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	221a      	movs	r2, #26
 800ea80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ea82:	f000 f843 	bl	800eb0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ea86:	4b02      	ldr	r3, [pc, #8]	; (800ea90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	2000091c 	.word	0x2000091c

0800ea94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	6039      	str	r1, [r7, #0]
 800ea9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eaa0:	79fb      	ldrb	r3, [r7, #7]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d105      	bne.n	800eab2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eaa6:	683a      	ldr	r2, [r7, #0]
 800eaa8:	4907      	ldr	r1, [pc, #28]	; (800eac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eaaa:	4808      	ldr	r0, [pc, #32]	; (800eacc <USBD_FS_ConfigStrDescriptor+0x38>)
 800eaac:	f7ff fd82 	bl	800e5b4 <USBD_GetString>
 800eab0:	e004      	b.n	800eabc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eab2:	683a      	ldr	r2, [r7, #0]
 800eab4:	4904      	ldr	r1, [pc, #16]	; (800eac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eab6:	4805      	ldr	r0, [pc, #20]	; (800eacc <USBD_FS_ConfigStrDescriptor+0x38>)
 800eab8:	f7ff fd7c 	bl	800e5b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eabc:	4b02      	ldr	r3, [pc, #8]	; (800eac8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3708      	adds	r7, #8
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	200012e8 	.word	0x200012e8
 800eacc:	08013a3c 	.word	0x08013a3c

0800ead0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	4603      	mov	r3, r0
 800ead8:	6039      	str	r1, [r7, #0]
 800eada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eadc:	79fb      	ldrb	r3, [r7, #7]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d105      	bne.n	800eaee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eae2:	683a      	ldr	r2, [r7, #0]
 800eae4:	4907      	ldr	r1, [pc, #28]	; (800eb04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eae6:	4808      	ldr	r0, [pc, #32]	; (800eb08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eae8:	f7ff fd64 	bl	800e5b4 <USBD_GetString>
 800eaec:	e004      	b.n	800eaf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eaee:	683a      	ldr	r2, [r7, #0]
 800eaf0:	4904      	ldr	r1, [pc, #16]	; (800eb04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eaf2:	4805      	ldr	r0, [pc, #20]	; (800eb08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eaf4:	f7ff fd5e 	bl	800e5b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eaf8:	4b02      	ldr	r3, [pc, #8]	; (800eb04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	200012e8 	.word	0x200012e8
 800eb08:	08013a48 	.word	0x08013a48

0800eb0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eb12:	4b0f      	ldr	r3, [pc, #60]	; (800eb50 <Get_SerialNum+0x44>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eb18:	4b0e      	ldr	r3, [pc, #56]	; (800eb54 <Get_SerialNum+0x48>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eb1e:	4b0e      	ldr	r3, [pc, #56]	; (800eb58 <Get_SerialNum+0x4c>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800eb24:	68fa      	ldr	r2, [r7, #12]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4413      	add	r3, r2
 800eb2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d009      	beq.n	800eb46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800eb32:	2208      	movs	r2, #8
 800eb34:	4909      	ldr	r1, [pc, #36]	; (800eb5c <Get_SerialNum+0x50>)
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	f000 f814 	bl	800eb64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800eb3c:	2204      	movs	r2, #4
 800eb3e:	4908      	ldr	r1, [pc, #32]	; (800eb60 <Get_SerialNum+0x54>)
 800eb40:	68b8      	ldr	r0, [r7, #8]
 800eb42:	f000 f80f 	bl	800eb64 <IntToUnicode>
  }
}
 800eb46:	bf00      	nop
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	1ff80050 	.word	0x1ff80050
 800eb54:	1ff80054 	.word	0x1ff80054
 800eb58:	1ff80058 	.word	0x1ff80058
 800eb5c:	2000091e 	.word	0x2000091e
 800eb60:	2000092e 	.word	0x2000092e

0800eb64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b087      	sub	sp, #28
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eb72:	2300      	movs	r3, #0
 800eb74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eb76:	2300      	movs	r3, #0
 800eb78:	75fb      	strb	r3, [r7, #23]
 800eb7a:	e027      	b.n	800ebcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	0f1b      	lsrs	r3, r3, #28
 800eb80:	2b09      	cmp	r3, #9
 800eb82:	d80b      	bhi.n	800eb9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	0f1b      	lsrs	r3, r3, #28
 800eb88:	b2da      	uxtb	r2, r3
 800eb8a:	7dfb      	ldrb	r3, [r7, #23]
 800eb8c:	005b      	lsls	r3, r3, #1
 800eb8e:	4619      	mov	r1, r3
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	440b      	add	r3, r1
 800eb94:	3230      	adds	r2, #48	; 0x30
 800eb96:	b2d2      	uxtb	r2, r2
 800eb98:	701a      	strb	r2, [r3, #0]
 800eb9a:	e00a      	b.n	800ebb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	0f1b      	lsrs	r3, r3, #28
 800eba0:	b2da      	uxtb	r2, r3
 800eba2:	7dfb      	ldrb	r3, [r7, #23]
 800eba4:	005b      	lsls	r3, r3, #1
 800eba6:	4619      	mov	r1, r3
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	440b      	add	r3, r1
 800ebac:	3237      	adds	r2, #55	; 0x37
 800ebae:	b2d2      	uxtb	r2, r2
 800ebb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	011b      	lsls	r3, r3, #4
 800ebb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ebb8:	7dfb      	ldrb	r3, [r7, #23]
 800ebba:	005b      	lsls	r3, r3, #1
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	68ba      	ldr	r2, [r7, #8]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ebc6:	7dfb      	ldrb	r3, [r7, #23]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	75fb      	strb	r3, [r7, #23]
 800ebcc:	7dfa      	ldrb	r2, [r7, #23]
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d3d3      	bcc.n	800eb7c <IntToUnicode+0x18>
  }
}
 800ebd4:	bf00      	nop
 800ebd6:	bf00      	nop
 800ebd8:	371c      	adds	r7, #28
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bc80      	pop	{r7}
 800ebde:	4770      	bx	lr

0800ebe0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	460b      	mov	r3, r1
 800ebea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800ebec:	78fb      	ldrb	r3, [r7, #3]
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d106      	bne.n	800ec00 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800ebf2:	4b09      	ldr	r3, [pc, #36]	; (800ec18 <HAL_PCDEx_SetConnectionState+0x38>)
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	4a08      	ldr	r2, [pc, #32]	; (800ec18 <HAL_PCDEx_SetConnectionState+0x38>)
 800ebf8:	f043 0301 	orr.w	r3, r3, #1
 800ebfc:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800ebfe:	e005      	b.n	800ec0c <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800ec00:	4b05      	ldr	r3, [pc, #20]	; (800ec18 <HAL_PCDEx_SetConnectionState+0x38>)
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	4a04      	ldr	r2, [pc, #16]	; (800ec18 <HAL_PCDEx_SetConnectionState+0x38>)
 800ec06:	f023 0301 	bic.w	r3, r3, #1
 800ec0a:	6053      	str	r3, [r2, #4]
}
 800ec0c:	bf00      	nop
 800ec0e:	370c      	adds	r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bc80      	pop	{r7}
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop
 800ec18:	40010000 	.word	0x40010000

0800ec1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4a0d      	ldr	r2, [pc, #52]	; (800ec60 <HAL_PCD_MspInit+0x44>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d113      	bne.n	800ec56 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ec2e:	4b0d      	ldr	r3, [pc, #52]	; (800ec64 <HAL_PCD_MspInit+0x48>)
 800ec30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec32:	4a0c      	ldr	r2, [pc, #48]	; (800ec64 <HAL_PCD_MspInit+0x48>)
 800ec34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ec38:	6253      	str	r3, [r2, #36]	; 0x24
 800ec3a:	4b0a      	ldr	r3, [pc, #40]	; (800ec64 <HAL_PCD_MspInit+0x48>)
 800ec3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec42:	60fb      	str	r3, [r7, #12]
 800ec44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800ec46:	2200      	movs	r2, #0
 800ec48:	2101      	movs	r1, #1
 800ec4a:	2014      	movs	r0, #20
 800ec4c:	f7f6 fa43 	bl	80050d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ec50:	2014      	movs	r0, #20
 800ec52:	f7f6 fa5c 	bl	800510e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ec56:	bf00      	nop
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	40005c00 	.word	0x40005c00
 800ec64:	40023800 	.word	0x40023800

0800ec68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	4610      	mov	r0, r2
 800ec80:	f7fe fddd 	bl	800d83e <USBD_LL_SetupStage>
}
 800ec84:	bf00      	nop
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	460b      	mov	r3, r1
 800ec96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ec9e:	78fa      	ldrb	r2, [r7, #3]
 800eca0:	6879      	ldr	r1, [r7, #4]
 800eca2:	4613      	mov	r3, r2
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	4413      	add	r3, r2
 800eca8:	00db      	lsls	r3, r3, #3
 800ecaa:	440b      	add	r3, r1
 800ecac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ecb0:	681a      	ldr	r2, [r3, #0]
 800ecb2:	78fb      	ldrb	r3, [r7, #3]
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	f7fe fe0f 	bl	800d8d8 <USBD_LL_DataOutStage>
}
 800ecba:	bf00      	nop
 800ecbc:	3708      	adds	r7, #8
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b082      	sub	sp, #8
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
 800ecca:	460b      	mov	r3, r1
 800eccc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ecd4:	78fa      	ldrb	r2, [r7, #3]
 800ecd6:	6879      	ldr	r1, [r7, #4]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	4413      	add	r3, r2
 800ecde:	00db      	lsls	r3, r3, #3
 800ece0:	440b      	add	r3, r1
 800ece2:	333c      	adds	r3, #60	; 0x3c
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	78fb      	ldrb	r3, [r7, #3]
 800ece8:	4619      	mov	r1, r3
 800ecea:	f7fe fe66 	bl	800d9ba <USBD_LL_DataInStage>
}
 800ecee:	bf00      	nop
 800ecf0:	3708      	adds	r7, #8
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecf6:	b580      	push	{r7, lr}
 800ecf8:	b082      	sub	sp, #8
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fe ff71 	bl	800dbec <USBD_LL_SOF>
}
 800ed0a:	bf00      	nop
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b084      	sub	sp, #16
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	d001      	beq.n	800ed2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ed26:	f7f5 fbd1 	bl	80044cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ed30:	7bfa      	ldrb	r2, [r7, #15]
 800ed32:	4611      	mov	r1, r2
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7fe ff26 	bl	800db86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fe fedf 	bl	800db04 <USBD_LL_Reset>
}
 800ed46:	bf00      	nop
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
	...

0800ed50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fe ff20 	bl	800dba4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	699b      	ldr	r3, [r3, #24]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d005      	beq.n	800ed78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ed6c:	4b04      	ldr	r3, [pc, #16]	; (800ed80 <HAL_PCD_SuspendCallback+0x30>)
 800ed6e:	691b      	ldr	r3, [r3, #16]
 800ed70:	4a03      	ldr	r2, [pc, #12]	; (800ed80 <HAL_PCD_SuspendCallback+0x30>)
 800ed72:	f043 0306 	orr.w	r3, r3, #6
 800ed76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ed78:	bf00      	nop
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	e000ed00 	.word	0xe000ed00

0800ed84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fe ff1a 	bl	800dbcc <USBD_LL_Resume>
}
 800ed98:	bf00      	nop
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800eda8:	4a28      	ldr	r2, [pc, #160]	; (800ee4c <USBD_LL_Init+0xac>)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	4a26      	ldr	r2, [pc, #152]	; (800ee4c <USBD_LL_Init+0xac>)
 800edb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800edb8:	4b24      	ldr	r3, [pc, #144]	; (800ee4c <USBD_LL_Init+0xac>)
 800edba:	4a25      	ldr	r2, [pc, #148]	; (800ee50 <USBD_LL_Init+0xb0>)
 800edbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800edbe:	4b23      	ldr	r3, [pc, #140]	; (800ee4c <USBD_LL_Init+0xac>)
 800edc0:	2208      	movs	r2, #8
 800edc2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800edc4:	4b21      	ldr	r3, [pc, #132]	; (800ee4c <USBD_LL_Init+0xac>)
 800edc6:	2202      	movs	r2, #2
 800edc8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800edca:	4b20      	ldr	r3, [pc, #128]	; (800ee4c <USBD_LL_Init+0xac>)
 800edcc:	2202      	movs	r2, #2
 800edce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800edd0:	4b1e      	ldr	r3, [pc, #120]	; (800ee4c <USBD_LL_Init+0xac>)
 800edd2:	2200      	movs	r2, #0
 800edd4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800edd6:	4b1d      	ldr	r3, [pc, #116]	; (800ee4c <USBD_LL_Init+0xac>)
 800edd8:	2200      	movs	r2, #0
 800edda:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800eddc:	481b      	ldr	r0, [pc, #108]	; (800ee4c <USBD_LL_Init+0xac>)
 800edde:	f7f7 feab 	bl	8006b38 <HAL_PCD_Init>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d001      	beq.n	800edec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ede8:	f7f5 fb70 	bl	80044cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800edf2:	2318      	movs	r3, #24
 800edf4:	2200      	movs	r2, #0
 800edf6:	2100      	movs	r1, #0
 800edf8:	f7f9 fa88 	bl	800830c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ee02:	2358      	movs	r3, #88	; 0x58
 800ee04:	2200      	movs	r2, #0
 800ee06:	2180      	movs	r1, #128	; 0x80
 800ee08:	f7f9 fa80 	bl	800830c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ee12:	23c0      	movs	r3, #192	; 0xc0
 800ee14:	2200      	movs	r2, #0
 800ee16:	2181      	movs	r1, #129	; 0x81
 800ee18:	f7f9 fa78 	bl	800830c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ee22:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ee26:	2200      	movs	r2, #0
 800ee28:	2101      	movs	r1, #1
 800ee2a:	f7f9 fa6f 	bl	800830c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ee34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee38:	2200      	movs	r2, #0
 800ee3a:	2182      	movs	r1, #130	; 0x82
 800ee3c:	f7f9 fa66 	bl	800830c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ee40:	2300      	movs	r3, #0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3708      	adds	r7, #8
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	200014e8 	.word	0x200014e8
 800ee50:	40005c00 	.word	0x40005c00

0800ee54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee60:	2300      	movs	r3, #0
 800ee62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7f7 ff42 	bl	8006cf4 <HAL_PCD_Start>
 800ee70:	4603      	mov	r3, r0
 800ee72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee74:	7bfb      	ldrb	r3, [r7, #15]
 800ee76:	4618      	mov	r0, r3
 800ee78:	f000 f944 	bl	800f104 <USBD_Get_USB_Status>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3710      	adds	r7, #16
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b084      	sub	sp, #16
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	6078      	str	r0, [r7, #4]
 800ee92:	4608      	mov	r0, r1
 800ee94:	4611      	mov	r1, r2
 800ee96:	461a      	mov	r2, r3
 800ee98:	4603      	mov	r3, r0
 800ee9a:	70fb      	strb	r3, [r7, #3]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	70bb      	strb	r3, [r7, #2]
 800eea0:	4613      	mov	r3, r2
 800eea2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eea4:	2300      	movs	r3, #0
 800eea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800eeb2:	78bb      	ldrb	r3, [r7, #2]
 800eeb4:	883a      	ldrh	r2, [r7, #0]
 800eeb6:	78f9      	ldrb	r1, [r7, #3]
 800eeb8:	f7f8 f85e 	bl	8006f78 <HAL_PCD_EP_Open>
 800eebc:	4603      	mov	r3, r0
 800eebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eec0:	7bfb      	ldrb	r3, [r7, #15]
 800eec2:	4618      	mov	r0, r3
 800eec4:	f000 f91e 	bl	800f104 <USBD_Get_USB_Status>
 800eec8:	4603      	mov	r3, r0
 800eeca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eecc:	7bbb      	ldrb	r3, [r7, #14]
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3710      	adds	r7, #16
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b084      	sub	sp, #16
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
 800eede:	460b      	mov	r3, r1
 800eee0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eee2:	2300      	movs	r3, #0
 800eee4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eee6:	2300      	movs	r3, #0
 800eee8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800eef0:	78fa      	ldrb	r2, [r7, #3]
 800eef2:	4611      	mov	r1, r2
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7f8 f8a5 	bl	8007044 <HAL_PCD_EP_Close>
 800eefa:	4603      	mov	r3, r0
 800eefc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eefe:	7bfb      	ldrb	r3, [r7, #15]
 800ef00:	4618      	mov	r0, r3
 800ef02:	f000 f8ff 	bl	800f104 <USBD_Get_USB_Status>
 800ef06:	4603      	mov	r3, r0
 800ef08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef24:	2300      	movs	r3, #0
 800ef26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ef2e:	78fa      	ldrb	r2, [r7, #3]
 800ef30:	4611      	mov	r1, r2
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7f8 f965 	bl	8007202 <HAL_PCD_EP_SetStall>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef3c:	7bfb      	ldrb	r3, [r7, #15]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f000 f8e0 	bl	800f104 <USBD_Get_USB_Status>
 800ef44:	4603      	mov	r3, r0
 800ef46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef62:	2300      	movs	r3, #0
 800ef64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ef6c:	78fa      	ldrb	r2, [r7, #3]
 800ef6e:	4611      	mov	r1, r2
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7f8 f998 	bl	80072a6 <HAL_PCD_EP_ClrStall>
 800ef76:	4603      	mov	r3, r0
 800ef78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef7a:	7bfb      	ldrb	r3, [r7, #15]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f000 f8c1 	bl	800f104 <USBD_Get_USB_Status>
 800ef82:	4603      	mov	r3, r0
 800ef84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3710      	adds	r7, #16
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b085      	sub	sp, #20
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	460b      	mov	r3, r1
 800ef9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800efa2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800efa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	da0c      	bge.n	800efc6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800efac:	78fb      	ldrb	r3, [r7, #3]
 800efae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efb2:	68f9      	ldr	r1, [r7, #12]
 800efb4:	1c5a      	adds	r2, r3, #1
 800efb6:	4613      	mov	r3, r2
 800efb8:	009b      	lsls	r3, r3, #2
 800efba:	4413      	add	r3, r2
 800efbc:	00db      	lsls	r3, r3, #3
 800efbe:	440b      	add	r3, r1
 800efc0:	3302      	adds	r3, #2
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	e00b      	b.n	800efde <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800efc6:	78fb      	ldrb	r3, [r7, #3]
 800efc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efcc:	68f9      	ldr	r1, [r7, #12]
 800efce:	4613      	mov	r3, r2
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	4413      	add	r3, r2
 800efd4:	00db      	lsls	r3, r3, #3
 800efd6:	440b      	add	r3, r1
 800efd8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800efdc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3714      	adds	r7, #20
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bc80      	pop	{r7}
 800efe6:	4770      	bx	lr

0800efe8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	460b      	mov	r3, r1
 800eff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eff8:	2300      	movs	r3, #0
 800effa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f002:	78fa      	ldrb	r2, [r7, #3]
 800f004:	4611      	mov	r1, r2
 800f006:	4618      	mov	r0, r3
 800f008:	f7f7 ff91 	bl	8006f2e <HAL_PCD_SetAddress>
 800f00c:	4603      	mov	r3, r0
 800f00e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f010:	7bfb      	ldrb	r3, [r7, #15]
 800f012:	4618      	mov	r0, r3
 800f014:	f000 f876 	bl	800f104 <USBD_Get_USB_Status>
 800f018:	4603      	mov	r3, r0
 800f01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f01c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3710      	adds	r7, #16
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}

0800f026 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f026:	b580      	push	{r7, lr}
 800f028:	b086      	sub	sp, #24
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	60f8      	str	r0, [r7, #12]
 800f02e:	607a      	str	r2, [r7, #4]
 800f030:	461a      	mov	r2, r3
 800f032:	460b      	mov	r3, r1
 800f034:	72fb      	strb	r3, [r7, #11]
 800f036:	4613      	mov	r3, r2
 800f038:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f03a:	2300      	movs	r3, #0
 800f03c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f048:	893b      	ldrh	r3, [r7, #8]
 800f04a:	7af9      	ldrb	r1, [r7, #11]
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	f7f8 f895 	bl	800717c <HAL_PCD_EP_Transmit>
 800f052:	4603      	mov	r3, r0
 800f054:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f056:	7dfb      	ldrb	r3, [r7, #23]
 800f058:	4618      	mov	r0, r3
 800f05a:	f000 f853 	bl	800f104 <USBD_Get_USB_Status>
 800f05e:	4603      	mov	r3, r0
 800f060:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f062:	7dbb      	ldrb	r3, [r7, #22]
}
 800f064:	4618      	mov	r0, r3
 800f066:	3718      	adds	r7, #24
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	607a      	str	r2, [r7, #4]
 800f076:	461a      	mov	r2, r3
 800f078:	460b      	mov	r3, r1
 800f07a:	72fb      	strb	r3, [r7, #11]
 800f07c:	4613      	mov	r3, r2
 800f07e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f080:	2300      	movs	r3, #0
 800f082:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f08e:	893b      	ldrh	r3, [r7, #8]
 800f090:	7af9      	ldrb	r1, [r7, #11]
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	f7f8 f81e 	bl	80070d4 <HAL_PCD_EP_Receive>
 800f098:	4603      	mov	r3, r0
 800f09a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f09c:	7dfb      	ldrb	r3, [r7, #23]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f000 f830 	bl	800f104 <USBD_Get_USB_Status>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f0a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3718      	adds	r7, #24
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b082      	sub	sp, #8
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f0c4:	78fa      	ldrb	r2, [r7, #3]
 800f0c6:	4611      	mov	r1, r2
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7f8 f840 	bl	800714e <HAL_PCD_EP_GetRxCount>
 800f0ce:	4603      	mov	r3, r0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b083      	sub	sp, #12
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f0e0:	4b02      	ldr	r3, [pc, #8]	; (800f0ec <USBD_static_malloc+0x14>)
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	370c      	adds	r7, #12
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bc80      	pop	{r7}
 800f0ea:	4770      	bx	lr
 800f0ec:	200017d4 	.word	0x200017d4

0800f0f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]

}
 800f0f8:	bf00      	nop
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bc80      	pop	{r7}
 800f100:	4770      	bx	lr
	...

0800f104 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	4603      	mov	r3, r0
 800f10c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f10e:	2300      	movs	r3, #0
 800f110:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f112:	79fb      	ldrb	r3, [r7, #7]
 800f114:	2b03      	cmp	r3, #3
 800f116:	d817      	bhi.n	800f148 <USBD_Get_USB_Status+0x44>
 800f118:	a201      	add	r2, pc, #4	; (adr r2, 800f120 <USBD_Get_USB_Status+0x1c>)
 800f11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f11e:	bf00      	nop
 800f120:	0800f131 	.word	0x0800f131
 800f124:	0800f137 	.word	0x0800f137
 800f128:	0800f13d 	.word	0x0800f13d
 800f12c:	0800f143 	.word	0x0800f143
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f130:	2300      	movs	r3, #0
 800f132:	73fb      	strb	r3, [r7, #15]
    break;
 800f134:	e00b      	b.n	800f14e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f136:	2302      	movs	r3, #2
 800f138:	73fb      	strb	r3, [r7, #15]
    break;
 800f13a:	e008      	b.n	800f14e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f13c:	2301      	movs	r3, #1
 800f13e:	73fb      	strb	r3, [r7, #15]
    break;
 800f140:	e005      	b.n	800f14e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f142:	2302      	movs	r3, #2
 800f144:	73fb      	strb	r3, [r7, #15]
    break;
 800f146:	e002      	b.n	800f14e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f148:	2302      	movs	r3, #2
 800f14a:	73fb      	strb	r3, [r7, #15]
    break;
 800f14c:	bf00      	nop
  }
  return usb_status;
 800f14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	bc80      	pop	{r7}
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	0000      	movs	r0, r0
	...

0800f160 <floor>:
 800f160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f164:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f168:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f16c:	2e13      	cmp	r6, #19
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	4607      	mov	r7, r0
 800f174:	460c      	mov	r4, r1
 800f176:	4605      	mov	r5, r0
 800f178:	dc33      	bgt.n	800f1e2 <floor+0x82>
 800f17a:	2e00      	cmp	r6, #0
 800f17c:	da14      	bge.n	800f1a8 <floor+0x48>
 800f17e:	a334      	add	r3, pc, #208	; (adr r3, 800f250 <floor+0xf0>)
 800f180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f184:	f7f1 f814 	bl	80001b0 <__adddf3>
 800f188:	2200      	movs	r2, #0
 800f18a:	2300      	movs	r3, #0
 800f18c:	f7f1 fc56 	bl	8000a3c <__aeabi_dcmpgt>
 800f190:	b138      	cbz	r0, 800f1a2 <floor+0x42>
 800f192:	2c00      	cmp	r4, #0
 800f194:	da58      	bge.n	800f248 <floor+0xe8>
 800f196:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f19a:	431d      	orrs	r5, r3
 800f19c:	d001      	beq.n	800f1a2 <floor+0x42>
 800f19e:	2500      	movs	r5, #0
 800f1a0:	4c2d      	ldr	r4, [pc, #180]	; (800f258 <floor+0xf8>)
 800f1a2:	4623      	mov	r3, r4
 800f1a4:	462f      	mov	r7, r5
 800f1a6:	e025      	b.n	800f1f4 <floor+0x94>
 800f1a8:	4a2c      	ldr	r2, [pc, #176]	; (800f25c <floor+0xfc>)
 800f1aa:	fa42 f806 	asr.w	r8, r2, r6
 800f1ae:	ea01 0208 	and.w	r2, r1, r8
 800f1b2:	4302      	orrs	r2, r0
 800f1b4:	d01e      	beq.n	800f1f4 <floor+0x94>
 800f1b6:	a326      	add	r3, pc, #152	; (adr r3, 800f250 <floor+0xf0>)
 800f1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1bc:	f7f0 fff8 	bl	80001b0 <__adddf3>
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	f7f1 fc3a 	bl	8000a3c <__aeabi_dcmpgt>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	d0ea      	beq.n	800f1a2 <floor+0x42>
 800f1cc:	2c00      	cmp	r4, #0
 800f1ce:	bfbe      	ittt	lt
 800f1d0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f1d4:	fa43 f606 	asrlt.w	r6, r3, r6
 800f1d8:	19a4      	addlt	r4, r4, r6
 800f1da:	2500      	movs	r5, #0
 800f1dc:	ea24 0408 	bic.w	r4, r4, r8
 800f1e0:	e7df      	b.n	800f1a2 <floor+0x42>
 800f1e2:	2e33      	cmp	r6, #51	; 0x33
 800f1e4:	dd0a      	ble.n	800f1fc <floor+0x9c>
 800f1e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f1ea:	d103      	bne.n	800f1f4 <floor+0x94>
 800f1ec:	f7f0 ffe0 	bl	80001b0 <__adddf3>
 800f1f0:	4607      	mov	r7, r0
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	4638      	mov	r0, r7
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f200:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800f204:	fa22 f808 	lsr.w	r8, r2, r8
 800f208:	ea18 0f00 	tst.w	r8, r0
 800f20c:	d0f2      	beq.n	800f1f4 <floor+0x94>
 800f20e:	a310      	add	r3, pc, #64	; (adr r3, 800f250 <floor+0xf0>)
 800f210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f214:	f7f0 ffcc 	bl	80001b0 <__adddf3>
 800f218:	2200      	movs	r2, #0
 800f21a:	2300      	movs	r3, #0
 800f21c:	f7f1 fc0e 	bl	8000a3c <__aeabi_dcmpgt>
 800f220:	2800      	cmp	r0, #0
 800f222:	d0be      	beq.n	800f1a2 <floor+0x42>
 800f224:	2c00      	cmp	r4, #0
 800f226:	da02      	bge.n	800f22e <floor+0xce>
 800f228:	2e14      	cmp	r6, #20
 800f22a:	d103      	bne.n	800f234 <floor+0xd4>
 800f22c:	3401      	adds	r4, #1
 800f22e:	ea25 0508 	bic.w	r5, r5, r8
 800f232:	e7b6      	b.n	800f1a2 <floor+0x42>
 800f234:	2301      	movs	r3, #1
 800f236:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f23a:	fa03 f606 	lsl.w	r6, r3, r6
 800f23e:	4435      	add	r5, r6
 800f240:	42bd      	cmp	r5, r7
 800f242:	bf38      	it	cc
 800f244:	18e4      	addcc	r4, r4, r3
 800f246:	e7f2      	b.n	800f22e <floor+0xce>
 800f248:	2500      	movs	r5, #0
 800f24a:	462c      	mov	r4, r5
 800f24c:	e7a9      	b.n	800f1a2 <floor+0x42>
 800f24e:	bf00      	nop
 800f250:	8800759c 	.word	0x8800759c
 800f254:	7e37e43c 	.word	0x7e37e43c
 800f258:	bff00000 	.word	0xbff00000
 800f25c:	000fffff 	.word	0x000fffff

0800f260 <atof>:
 800f260:	2100      	movs	r1, #0
 800f262:	f001 bad5 	b.w	8010810 <strtod>
	...

0800f268 <__errno>:
 800f268:	4b01      	ldr	r3, [pc, #4]	; (800f270 <__errno+0x8>)
 800f26a:	6818      	ldr	r0, [r3, #0]
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	20000938 	.word	0x20000938

0800f274 <__libc_init_array>:
 800f274:	b570      	push	{r4, r5, r6, lr}
 800f276:	2600      	movs	r6, #0
 800f278:	4d0c      	ldr	r5, [pc, #48]	; (800f2ac <__libc_init_array+0x38>)
 800f27a:	4c0d      	ldr	r4, [pc, #52]	; (800f2b0 <__libc_init_array+0x3c>)
 800f27c:	1b64      	subs	r4, r4, r5
 800f27e:	10a4      	asrs	r4, r4, #2
 800f280:	42a6      	cmp	r6, r4
 800f282:	d109      	bne.n	800f298 <__libc_init_array+0x24>
 800f284:	f004 fa30 	bl	80136e8 <_init>
 800f288:	2600      	movs	r6, #0
 800f28a:	4d0a      	ldr	r5, [pc, #40]	; (800f2b4 <__libc_init_array+0x40>)
 800f28c:	4c0a      	ldr	r4, [pc, #40]	; (800f2b8 <__libc_init_array+0x44>)
 800f28e:	1b64      	subs	r4, r4, r5
 800f290:	10a4      	asrs	r4, r4, #2
 800f292:	42a6      	cmp	r6, r4
 800f294:	d105      	bne.n	800f2a2 <__libc_init_array+0x2e>
 800f296:	bd70      	pop	{r4, r5, r6, pc}
 800f298:	f855 3b04 	ldr.w	r3, [r5], #4
 800f29c:	4798      	blx	r3
 800f29e:	3601      	adds	r6, #1
 800f2a0:	e7ee      	b.n	800f280 <__libc_init_array+0xc>
 800f2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2a6:	4798      	blx	r3
 800f2a8:	3601      	adds	r6, #1
 800f2aa:	e7f2      	b.n	800f292 <__libc_init_array+0x1e>
 800f2ac:	08013f80 	.word	0x08013f80
 800f2b0:	08013f80 	.word	0x08013f80
 800f2b4:	08013f80 	.word	0x08013f80
 800f2b8:	08013f84 	.word	0x08013f84

0800f2bc <memcpy>:
 800f2bc:	440a      	add	r2, r1
 800f2be:	4291      	cmp	r1, r2
 800f2c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f2c4:	d100      	bne.n	800f2c8 <memcpy+0xc>
 800f2c6:	4770      	bx	lr
 800f2c8:	b510      	push	{r4, lr}
 800f2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2ce:	4291      	cmp	r1, r2
 800f2d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2d4:	d1f9      	bne.n	800f2ca <memcpy+0xe>
 800f2d6:	bd10      	pop	{r4, pc}

0800f2d8 <memset>:
 800f2d8:	4603      	mov	r3, r0
 800f2da:	4402      	add	r2, r0
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d100      	bne.n	800f2e2 <memset+0xa>
 800f2e0:	4770      	bx	lr
 800f2e2:	f803 1b01 	strb.w	r1, [r3], #1
 800f2e6:	e7f9      	b.n	800f2dc <memset+0x4>

0800f2e8 <__cvt>:
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2ee:	461f      	mov	r7, r3
 800f2f0:	bfbb      	ittet	lt
 800f2f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800f2f6:	461f      	movlt	r7, r3
 800f2f8:	2300      	movge	r3, #0
 800f2fa:	232d      	movlt	r3, #45	; 0x2d
 800f2fc:	b088      	sub	sp, #32
 800f2fe:	4614      	mov	r4, r2
 800f300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f302:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f304:	7013      	strb	r3, [r2, #0]
 800f306:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f308:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800f30c:	f023 0820 	bic.w	r8, r3, #32
 800f310:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f314:	d005      	beq.n	800f322 <__cvt+0x3a>
 800f316:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f31a:	d100      	bne.n	800f31e <__cvt+0x36>
 800f31c:	3501      	adds	r5, #1
 800f31e:	2302      	movs	r3, #2
 800f320:	e000      	b.n	800f324 <__cvt+0x3c>
 800f322:	2303      	movs	r3, #3
 800f324:	aa07      	add	r2, sp, #28
 800f326:	9204      	str	r2, [sp, #16]
 800f328:	aa06      	add	r2, sp, #24
 800f32a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800f32e:	e9cd 3500 	strd	r3, r5, [sp]
 800f332:	4622      	mov	r2, r4
 800f334:	463b      	mov	r3, r7
 800f336:	f001 fb7f 	bl	8010a38 <_dtoa_r>
 800f33a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f33e:	4606      	mov	r6, r0
 800f340:	d102      	bne.n	800f348 <__cvt+0x60>
 800f342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f344:	07db      	lsls	r3, r3, #31
 800f346:	d522      	bpl.n	800f38e <__cvt+0xa6>
 800f348:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f34c:	eb06 0905 	add.w	r9, r6, r5
 800f350:	d110      	bne.n	800f374 <__cvt+0x8c>
 800f352:	7833      	ldrb	r3, [r6, #0]
 800f354:	2b30      	cmp	r3, #48	; 0x30
 800f356:	d10a      	bne.n	800f36e <__cvt+0x86>
 800f358:	2200      	movs	r2, #0
 800f35a:	2300      	movs	r3, #0
 800f35c:	4620      	mov	r0, r4
 800f35e:	4639      	mov	r1, r7
 800f360:	f7f1 fb44 	bl	80009ec <__aeabi_dcmpeq>
 800f364:	b918      	cbnz	r0, 800f36e <__cvt+0x86>
 800f366:	f1c5 0501 	rsb	r5, r5, #1
 800f36a:	f8ca 5000 	str.w	r5, [sl]
 800f36e:	f8da 3000 	ldr.w	r3, [sl]
 800f372:	4499      	add	r9, r3
 800f374:	2200      	movs	r2, #0
 800f376:	2300      	movs	r3, #0
 800f378:	4620      	mov	r0, r4
 800f37a:	4639      	mov	r1, r7
 800f37c:	f7f1 fb36 	bl	80009ec <__aeabi_dcmpeq>
 800f380:	b108      	cbz	r0, 800f386 <__cvt+0x9e>
 800f382:	f8cd 901c 	str.w	r9, [sp, #28]
 800f386:	2230      	movs	r2, #48	; 0x30
 800f388:	9b07      	ldr	r3, [sp, #28]
 800f38a:	454b      	cmp	r3, r9
 800f38c:	d307      	bcc.n	800f39e <__cvt+0xb6>
 800f38e:	4630      	mov	r0, r6
 800f390:	9b07      	ldr	r3, [sp, #28]
 800f392:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f394:	1b9b      	subs	r3, r3, r6
 800f396:	6013      	str	r3, [r2, #0]
 800f398:	b008      	add	sp, #32
 800f39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f39e:	1c59      	adds	r1, r3, #1
 800f3a0:	9107      	str	r1, [sp, #28]
 800f3a2:	701a      	strb	r2, [r3, #0]
 800f3a4:	e7f0      	b.n	800f388 <__cvt+0xa0>

0800f3a6 <__exponent>:
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3aa:	2900      	cmp	r1, #0
 800f3ac:	f803 2b02 	strb.w	r2, [r3], #2
 800f3b0:	bfb6      	itet	lt
 800f3b2:	222d      	movlt	r2, #45	; 0x2d
 800f3b4:	222b      	movge	r2, #43	; 0x2b
 800f3b6:	4249      	neglt	r1, r1
 800f3b8:	2909      	cmp	r1, #9
 800f3ba:	7042      	strb	r2, [r0, #1]
 800f3bc:	dd2b      	ble.n	800f416 <__exponent+0x70>
 800f3be:	f10d 0407 	add.w	r4, sp, #7
 800f3c2:	46a4      	mov	ip, r4
 800f3c4:	270a      	movs	r7, #10
 800f3c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800f3ca:	460a      	mov	r2, r1
 800f3cc:	46a6      	mov	lr, r4
 800f3ce:	fb07 1516 	mls	r5, r7, r6, r1
 800f3d2:	2a63      	cmp	r2, #99	; 0x63
 800f3d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800f3d8:	4631      	mov	r1, r6
 800f3da:	f104 34ff 	add.w	r4, r4, #4294967295
 800f3de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f3e2:	dcf0      	bgt.n	800f3c6 <__exponent+0x20>
 800f3e4:	3130      	adds	r1, #48	; 0x30
 800f3e6:	f1ae 0502 	sub.w	r5, lr, #2
 800f3ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f3ee:	4629      	mov	r1, r5
 800f3f0:	1c44      	adds	r4, r0, #1
 800f3f2:	4561      	cmp	r1, ip
 800f3f4:	d30a      	bcc.n	800f40c <__exponent+0x66>
 800f3f6:	f10d 0209 	add.w	r2, sp, #9
 800f3fa:	eba2 020e 	sub.w	r2, r2, lr
 800f3fe:	4565      	cmp	r5, ip
 800f400:	bf88      	it	hi
 800f402:	2200      	movhi	r2, #0
 800f404:	4413      	add	r3, r2
 800f406:	1a18      	subs	r0, r3, r0
 800f408:	b003      	add	sp, #12
 800f40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f40c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f410:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f414:	e7ed      	b.n	800f3f2 <__exponent+0x4c>
 800f416:	2330      	movs	r3, #48	; 0x30
 800f418:	3130      	adds	r1, #48	; 0x30
 800f41a:	7083      	strb	r3, [r0, #2]
 800f41c:	70c1      	strb	r1, [r0, #3]
 800f41e:	1d03      	adds	r3, r0, #4
 800f420:	e7f1      	b.n	800f406 <__exponent+0x60>
	...

0800f424 <_printf_float>:
 800f424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f428:	b091      	sub	sp, #68	; 0x44
 800f42a:	460c      	mov	r4, r1
 800f42c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800f430:	4616      	mov	r6, r2
 800f432:	461f      	mov	r7, r3
 800f434:	4605      	mov	r5, r0
 800f436:	f002 fc65 	bl	8011d04 <_localeconv_r>
 800f43a:	6803      	ldr	r3, [r0, #0]
 800f43c:	4618      	mov	r0, r3
 800f43e:	9309      	str	r3, [sp, #36]	; 0x24
 800f440:	f7f0 fea8 	bl	8000194 <strlen>
 800f444:	2300      	movs	r3, #0
 800f446:	930e      	str	r3, [sp, #56]	; 0x38
 800f448:	f8d8 3000 	ldr.w	r3, [r8]
 800f44c:	900a      	str	r0, [sp, #40]	; 0x28
 800f44e:	3307      	adds	r3, #7
 800f450:	f023 0307 	bic.w	r3, r3, #7
 800f454:	f103 0208 	add.w	r2, r3, #8
 800f458:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f45c:	f8d4 b000 	ldr.w	fp, [r4]
 800f460:	f8c8 2000 	str.w	r2, [r8]
 800f464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f468:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f46c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800f470:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800f474:	930b      	str	r3, [sp, #44]	; 0x2c
 800f476:	f04f 32ff 	mov.w	r2, #4294967295
 800f47a:	4640      	mov	r0, r8
 800f47c:	4b9c      	ldr	r3, [pc, #624]	; (800f6f0 <_printf_float+0x2cc>)
 800f47e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f480:	f7f1 fae6 	bl	8000a50 <__aeabi_dcmpun>
 800f484:	bb70      	cbnz	r0, 800f4e4 <_printf_float+0xc0>
 800f486:	f04f 32ff 	mov.w	r2, #4294967295
 800f48a:	4640      	mov	r0, r8
 800f48c:	4b98      	ldr	r3, [pc, #608]	; (800f6f0 <_printf_float+0x2cc>)
 800f48e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f490:	f7f1 fac0 	bl	8000a14 <__aeabi_dcmple>
 800f494:	bb30      	cbnz	r0, 800f4e4 <_printf_float+0xc0>
 800f496:	2200      	movs	r2, #0
 800f498:	2300      	movs	r3, #0
 800f49a:	4640      	mov	r0, r8
 800f49c:	4651      	mov	r1, sl
 800f49e:	f7f1 faaf 	bl	8000a00 <__aeabi_dcmplt>
 800f4a2:	b110      	cbz	r0, 800f4aa <_printf_float+0x86>
 800f4a4:	232d      	movs	r3, #45	; 0x2d
 800f4a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4aa:	4b92      	ldr	r3, [pc, #584]	; (800f6f4 <_printf_float+0x2d0>)
 800f4ac:	4892      	ldr	r0, [pc, #584]	; (800f6f8 <_printf_float+0x2d4>)
 800f4ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f4b2:	bf94      	ite	ls
 800f4b4:	4698      	movls	r8, r3
 800f4b6:	4680      	movhi	r8, r0
 800f4b8:	2303      	movs	r3, #3
 800f4ba:	f04f 0a00 	mov.w	sl, #0
 800f4be:	6123      	str	r3, [r4, #16]
 800f4c0:	f02b 0304 	bic.w	r3, fp, #4
 800f4c4:	6023      	str	r3, [r4, #0]
 800f4c6:	4633      	mov	r3, r6
 800f4c8:	4621      	mov	r1, r4
 800f4ca:	4628      	mov	r0, r5
 800f4cc:	9700      	str	r7, [sp, #0]
 800f4ce:	aa0f      	add	r2, sp, #60	; 0x3c
 800f4d0:	f000 f9d4 	bl	800f87c <_printf_common>
 800f4d4:	3001      	adds	r0, #1
 800f4d6:	f040 8090 	bne.w	800f5fa <_printf_float+0x1d6>
 800f4da:	f04f 30ff 	mov.w	r0, #4294967295
 800f4de:	b011      	add	sp, #68	; 0x44
 800f4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4e4:	4642      	mov	r2, r8
 800f4e6:	4653      	mov	r3, sl
 800f4e8:	4640      	mov	r0, r8
 800f4ea:	4651      	mov	r1, sl
 800f4ec:	f7f1 fab0 	bl	8000a50 <__aeabi_dcmpun>
 800f4f0:	b148      	cbz	r0, 800f506 <_printf_float+0xe2>
 800f4f2:	f1ba 0f00 	cmp.w	sl, #0
 800f4f6:	bfb8      	it	lt
 800f4f8:	232d      	movlt	r3, #45	; 0x2d
 800f4fa:	4880      	ldr	r0, [pc, #512]	; (800f6fc <_printf_float+0x2d8>)
 800f4fc:	bfb8      	it	lt
 800f4fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f502:	4b7f      	ldr	r3, [pc, #508]	; (800f700 <_printf_float+0x2dc>)
 800f504:	e7d3      	b.n	800f4ae <_printf_float+0x8a>
 800f506:	6863      	ldr	r3, [r4, #4]
 800f508:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f50c:	1c5a      	adds	r2, r3, #1
 800f50e:	d142      	bne.n	800f596 <_printf_float+0x172>
 800f510:	2306      	movs	r3, #6
 800f512:	6063      	str	r3, [r4, #4]
 800f514:	2200      	movs	r2, #0
 800f516:	9206      	str	r2, [sp, #24]
 800f518:	aa0e      	add	r2, sp, #56	; 0x38
 800f51a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800f51e:	aa0d      	add	r2, sp, #52	; 0x34
 800f520:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800f524:	9203      	str	r2, [sp, #12]
 800f526:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800f52a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f52e:	6023      	str	r3, [r4, #0]
 800f530:	6863      	ldr	r3, [r4, #4]
 800f532:	4642      	mov	r2, r8
 800f534:	9300      	str	r3, [sp, #0]
 800f536:	4628      	mov	r0, r5
 800f538:	4653      	mov	r3, sl
 800f53a:	910b      	str	r1, [sp, #44]	; 0x2c
 800f53c:	f7ff fed4 	bl	800f2e8 <__cvt>
 800f540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f542:	4680      	mov	r8, r0
 800f544:	2947      	cmp	r1, #71	; 0x47
 800f546:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f548:	d108      	bne.n	800f55c <_printf_float+0x138>
 800f54a:	1cc8      	adds	r0, r1, #3
 800f54c:	db02      	blt.n	800f554 <_printf_float+0x130>
 800f54e:	6863      	ldr	r3, [r4, #4]
 800f550:	4299      	cmp	r1, r3
 800f552:	dd40      	ble.n	800f5d6 <_printf_float+0x1b2>
 800f554:	f1a9 0902 	sub.w	r9, r9, #2
 800f558:	fa5f f989 	uxtb.w	r9, r9
 800f55c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f560:	d81f      	bhi.n	800f5a2 <_printf_float+0x17e>
 800f562:	464a      	mov	r2, r9
 800f564:	3901      	subs	r1, #1
 800f566:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f56a:	910d      	str	r1, [sp, #52]	; 0x34
 800f56c:	f7ff ff1b 	bl	800f3a6 <__exponent>
 800f570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f572:	4682      	mov	sl, r0
 800f574:	1813      	adds	r3, r2, r0
 800f576:	2a01      	cmp	r2, #1
 800f578:	6123      	str	r3, [r4, #16]
 800f57a:	dc02      	bgt.n	800f582 <_printf_float+0x15e>
 800f57c:	6822      	ldr	r2, [r4, #0]
 800f57e:	07d2      	lsls	r2, r2, #31
 800f580:	d501      	bpl.n	800f586 <_printf_float+0x162>
 800f582:	3301      	adds	r3, #1
 800f584:	6123      	str	r3, [r4, #16]
 800f586:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d09b      	beq.n	800f4c6 <_printf_float+0xa2>
 800f58e:	232d      	movs	r3, #45	; 0x2d
 800f590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f594:	e797      	b.n	800f4c6 <_printf_float+0xa2>
 800f596:	2947      	cmp	r1, #71	; 0x47
 800f598:	d1bc      	bne.n	800f514 <_printf_float+0xf0>
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1ba      	bne.n	800f514 <_printf_float+0xf0>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e7b7      	b.n	800f512 <_printf_float+0xee>
 800f5a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f5a6:	d118      	bne.n	800f5da <_printf_float+0x1b6>
 800f5a8:	2900      	cmp	r1, #0
 800f5aa:	6863      	ldr	r3, [r4, #4]
 800f5ac:	dd0b      	ble.n	800f5c6 <_printf_float+0x1a2>
 800f5ae:	6121      	str	r1, [r4, #16]
 800f5b0:	b913      	cbnz	r3, 800f5b8 <_printf_float+0x194>
 800f5b2:	6822      	ldr	r2, [r4, #0]
 800f5b4:	07d0      	lsls	r0, r2, #31
 800f5b6:	d502      	bpl.n	800f5be <_printf_float+0x19a>
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	440b      	add	r3, r1
 800f5bc:	6123      	str	r3, [r4, #16]
 800f5be:	f04f 0a00 	mov.w	sl, #0
 800f5c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800f5c4:	e7df      	b.n	800f586 <_printf_float+0x162>
 800f5c6:	b913      	cbnz	r3, 800f5ce <_printf_float+0x1aa>
 800f5c8:	6822      	ldr	r2, [r4, #0]
 800f5ca:	07d2      	lsls	r2, r2, #31
 800f5cc:	d501      	bpl.n	800f5d2 <_printf_float+0x1ae>
 800f5ce:	3302      	adds	r3, #2
 800f5d0:	e7f4      	b.n	800f5bc <_printf_float+0x198>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e7f2      	b.n	800f5bc <_printf_float+0x198>
 800f5d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f5da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5dc:	4299      	cmp	r1, r3
 800f5de:	db05      	blt.n	800f5ec <_printf_float+0x1c8>
 800f5e0:	6823      	ldr	r3, [r4, #0]
 800f5e2:	6121      	str	r1, [r4, #16]
 800f5e4:	07d8      	lsls	r0, r3, #31
 800f5e6:	d5ea      	bpl.n	800f5be <_printf_float+0x19a>
 800f5e8:	1c4b      	adds	r3, r1, #1
 800f5ea:	e7e7      	b.n	800f5bc <_printf_float+0x198>
 800f5ec:	2900      	cmp	r1, #0
 800f5ee:	bfcc      	ite	gt
 800f5f0:	2201      	movgt	r2, #1
 800f5f2:	f1c1 0202 	rsble	r2, r1, #2
 800f5f6:	4413      	add	r3, r2
 800f5f8:	e7e0      	b.n	800f5bc <_printf_float+0x198>
 800f5fa:	6823      	ldr	r3, [r4, #0]
 800f5fc:	055a      	lsls	r2, r3, #21
 800f5fe:	d407      	bmi.n	800f610 <_printf_float+0x1ec>
 800f600:	6923      	ldr	r3, [r4, #16]
 800f602:	4642      	mov	r2, r8
 800f604:	4631      	mov	r1, r6
 800f606:	4628      	mov	r0, r5
 800f608:	47b8      	blx	r7
 800f60a:	3001      	adds	r0, #1
 800f60c:	d12b      	bne.n	800f666 <_printf_float+0x242>
 800f60e:	e764      	b.n	800f4da <_printf_float+0xb6>
 800f610:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f614:	f240 80dd 	bls.w	800f7d2 <_printf_float+0x3ae>
 800f618:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f61c:	2200      	movs	r2, #0
 800f61e:	2300      	movs	r3, #0
 800f620:	f7f1 f9e4 	bl	80009ec <__aeabi_dcmpeq>
 800f624:	2800      	cmp	r0, #0
 800f626:	d033      	beq.n	800f690 <_printf_float+0x26c>
 800f628:	2301      	movs	r3, #1
 800f62a:	4631      	mov	r1, r6
 800f62c:	4628      	mov	r0, r5
 800f62e:	4a35      	ldr	r2, [pc, #212]	; (800f704 <_printf_float+0x2e0>)
 800f630:	47b8      	blx	r7
 800f632:	3001      	adds	r0, #1
 800f634:	f43f af51 	beq.w	800f4da <_printf_float+0xb6>
 800f638:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f63c:	429a      	cmp	r2, r3
 800f63e:	db02      	blt.n	800f646 <_printf_float+0x222>
 800f640:	6823      	ldr	r3, [r4, #0]
 800f642:	07d8      	lsls	r0, r3, #31
 800f644:	d50f      	bpl.n	800f666 <_printf_float+0x242>
 800f646:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f64a:	4631      	mov	r1, r6
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b8      	blx	r7
 800f650:	3001      	adds	r0, #1
 800f652:	f43f af42 	beq.w	800f4da <_printf_float+0xb6>
 800f656:	f04f 0800 	mov.w	r8, #0
 800f65a:	f104 091a 	add.w	r9, r4, #26
 800f65e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f660:	3b01      	subs	r3, #1
 800f662:	4543      	cmp	r3, r8
 800f664:	dc09      	bgt.n	800f67a <_printf_float+0x256>
 800f666:	6823      	ldr	r3, [r4, #0]
 800f668:	079b      	lsls	r3, r3, #30
 800f66a:	f100 8102 	bmi.w	800f872 <_printf_float+0x44e>
 800f66e:	68e0      	ldr	r0, [r4, #12]
 800f670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f672:	4298      	cmp	r0, r3
 800f674:	bfb8      	it	lt
 800f676:	4618      	movlt	r0, r3
 800f678:	e731      	b.n	800f4de <_printf_float+0xba>
 800f67a:	2301      	movs	r3, #1
 800f67c:	464a      	mov	r2, r9
 800f67e:	4631      	mov	r1, r6
 800f680:	4628      	mov	r0, r5
 800f682:	47b8      	blx	r7
 800f684:	3001      	adds	r0, #1
 800f686:	f43f af28 	beq.w	800f4da <_printf_float+0xb6>
 800f68a:	f108 0801 	add.w	r8, r8, #1
 800f68e:	e7e6      	b.n	800f65e <_printf_float+0x23a>
 800f690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f692:	2b00      	cmp	r3, #0
 800f694:	dc38      	bgt.n	800f708 <_printf_float+0x2e4>
 800f696:	2301      	movs	r3, #1
 800f698:	4631      	mov	r1, r6
 800f69a:	4628      	mov	r0, r5
 800f69c:	4a19      	ldr	r2, [pc, #100]	; (800f704 <_printf_float+0x2e0>)
 800f69e:	47b8      	blx	r7
 800f6a0:	3001      	adds	r0, #1
 800f6a2:	f43f af1a 	beq.w	800f4da <_printf_float+0xb6>
 800f6a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	d102      	bne.n	800f6b4 <_printf_float+0x290>
 800f6ae:	6823      	ldr	r3, [r4, #0]
 800f6b0:	07d9      	lsls	r1, r3, #31
 800f6b2:	d5d8      	bpl.n	800f666 <_printf_float+0x242>
 800f6b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6b8:	4631      	mov	r1, r6
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	47b8      	blx	r7
 800f6be:	3001      	adds	r0, #1
 800f6c0:	f43f af0b 	beq.w	800f4da <_printf_float+0xb6>
 800f6c4:	f04f 0900 	mov.w	r9, #0
 800f6c8:	f104 0a1a 	add.w	sl, r4, #26
 800f6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6ce:	425b      	negs	r3, r3
 800f6d0:	454b      	cmp	r3, r9
 800f6d2:	dc01      	bgt.n	800f6d8 <_printf_float+0x2b4>
 800f6d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6d6:	e794      	b.n	800f602 <_printf_float+0x1de>
 800f6d8:	2301      	movs	r3, #1
 800f6da:	4652      	mov	r2, sl
 800f6dc:	4631      	mov	r1, r6
 800f6de:	4628      	mov	r0, r5
 800f6e0:	47b8      	blx	r7
 800f6e2:	3001      	adds	r0, #1
 800f6e4:	f43f aef9 	beq.w	800f4da <_printf_float+0xb6>
 800f6e8:	f109 0901 	add.w	r9, r9, #1
 800f6ec:	e7ee      	b.n	800f6cc <_printf_float+0x2a8>
 800f6ee:	bf00      	nop
 800f6f0:	7fefffff 	.word	0x7fefffff
 800f6f4:	08013a80 	.word	0x08013a80
 800f6f8:	08013a84 	.word	0x08013a84
 800f6fc:	08013a8c 	.word	0x08013a8c
 800f700:	08013a88 	.word	0x08013a88
 800f704:	08013a90 	.word	0x08013a90
 800f708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f70a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f70c:	429a      	cmp	r2, r3
 800f70e:	bfa8      	it	ge
 800f710:	461a      	movge	r2, r3
 800f712:	2a00      	cmp	r2, #0
 800f714:	4691      	mov	r9, r2
 800f716:	dc37      	bgt.n	800f788 <_printf_float+0x364>
 800f718:	f04f 0b00 	mov.w	fp, #0
 800f71c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f720:	f104 021a 	add.w	r2, r4, #26
 800f724:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f728:	ebaa 0309 	sub.w	r3, sl, r9
 800f72c:	455b      	cmp	r3, fp
 800f72e:	dc33      	bgt.n	800f798 <_printf_float+0x374>
 800f730:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f734:	429a      	cmp	r2, r3
 800f736:	db3b      	blt.n	800f7b0 <_printf_float+0x38c>
 800f738:	6823      	ldr	r3, [r4, #0]
 800f73a:	07da      	lsls	r2, r3, #31
 800f73c:	d438      	bmi.n	800f7b0 <_printf_float+0x38c>
 800f73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f740:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f742:	eba3 020a 	sub.w	r2, r3, sl
 800f746:	eba3 0901 	sub.w	r9, r3, r1
 800f74a:	4591      	cmp	r9, r2
 800f74c:	bfa8      	it	ge
 800f74e:	4691      	movge	r9, r2
 800f750:	f1b9 0f00 	cmp.w	r9, #0
 800f754:	dc34      	bgt.n	800f7c0 <_printf_float+0x39c>
 800f756:	f04f 0800 	mov.w	r8, #0
 800f75a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f75e:	f104 0a1a 	add.w	sl, r4, #26
 800f762:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f766:	1a9b      	subs	r3, r3, r2
 800f768:	eba3 0309 	sub.w	r3, r3, r9
 800f76c:	4543      	cmp	r3, r8
 800f76e:	f77f af7a 	ble.w	800f666 <_printf_float+0x242>
 800f772:	2301      	movs	r3, #1
 800f774:	4652      	mov	r2, sl
 800f776:	4631      	mov	r1, r6
 800f778:	4628      	mov	r0, r5
 800f77a:	47b8      	blx	r7
 800f77c:	3001      	adds	r0, #1
 800f77e:	f43f aeac 	beq.w	800f4da <_printf_float+0xb6>
 800f782:	f108 0801 	add.w	r8, r8, #1
 800f786:	e7ec      	b.n	800f762 <_printf_float+0x33e>
 800f788:	4613      	mov	r3, r2
 800f78a:	4631      	mov	r1, r6
 800f78c:	4642      	mov	r2, r8
 800f78e:	4628      	mov	r0, r5
 800f790:	47b8      	blx	r7
 800f792:	3001      	adds	r0, #1
 800f794:	d1c0      	bne.n	800f718 <_printf_float+0x2f4>
 800f796:	e6a0      	b.n	800f4da <_printf_float+0xb6>
 800f798:	2301      	movs	r3, #1
 800f79a:	4631      	mov	r1, r6
 800f79c:	4628      	mov	r0, r5
 800f79e:	920b      	str	r2, [sp, #44]	; 0x2c
 800f7a0:	47b8      	blx	r7
 800f7a2:	3001      	adds	r0, #1
 800f7a4:	f43f ae99 	beq.w	800f4da <_printf_float+0xb6>
 800f7a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f7aa:	f10b 0b01 	add.w	fp, fp, #1
 800f7ae:	e7b9      	b.n	800f724 <_printf_float+0x300>
 800f7b0:	4631      	mov	r1, r6
 800f7b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	47b8      	blx	r7
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	d1bf      	bne.n	800f73e <_printf_float+0x31a>
 800f7be:	e68c      	b.n	800f4da <_printf_float+0xb6>
 800f7c0:	464b      	mov	r3, r9
 800f7c2:	4631      	mov	r1, r6
 800f7c4:	4628      	mov	r0, r5
 800f7c6:	eb08 020a 	add.w	r2, r8, sl
 800f7ca:	47b8      	blx	r7
 800f7cc:	3001      	adds	r0, #1
 800f7ce:	d1c2      	bne.n	800f756 <_printf_float+0x332>
 800f7d0:	e683      	b.n	800f4da <_printf_float+0xb6>
 800f7d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7d4:	2a01      	cmp	r2, #1
 800f7d6:	dc01      	bgt.n	800f7dc <_printf_float+0x3b8>
 800f7d8:	07db      	lsls	r3, r3, #31
 800f7da:	d537      	bpl.n	800f84c <_printf_float+0x428>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	4642      	mov	r2, r8
 800f7e0:	4631      	mov	r1, r6
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	47b8      	blx	r7
 800f7e6:	3001      	adds	r0, #1
 800f7e8:	f43f ae77 	beq.w	800f4da <_printf_float+0xb6>
 800f7ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7f0:	4631      	mov	r1, r6
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	47b8      	blx	r7
 800f7f6:	3001      	adds	r0, #1
 800f7f8:	f43f ae6f 	beq.w	800f4da <_printf_float+0xb6>
 800f7fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f800:	2200      	movs	r2, #0
 800f802:	2300      	movs	r3, #0
 800f804:	f7f1 f8f2 	bl	80009ec <__aeabi_dcmpeq>
 800f808:	b9d8      	cbnz	r0, 800f842 <_printf_float+0x41e>
 800f80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f80c:	f108 0201 	add.w	r2, r8, #1
 800f810:	3b01      	subs	r3, #1
 800f812:	4631      	mov	r1, r6
 800f814:	4628      	mov	r0, r5
 800f816:	47b8      	blx	r7
 800f818:	3001      	adds	r0, #1
 800f81a:	d10e      	bne.n	800f83a <_printf_float+0x416>
 800f81c:	e65d      	b.n	800f4da <_printf_float+0xb6>
 800f81e:	2301      	movs	r3, #1
 800f820:	464a      	mov	r2, r9
 800f822:	4631      	mov	r1, r6
 800f824:	4628      	mov	r0, r5
 800f826:	47b8      	blx	r7
 800f828:	3001      	adds	r0, #1
 800f82a:	f43f ae56 	beq.w	800f4da <_printf_float+0xb6>
 800f82e:	f108 0801 	add.w	r8, r8, #1
 800f832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f834:	3b01      	subs	r3, #1
 800f836:	4543      	cmp	r3, r8
 800f838:	dcf1      	bgt.n	800f81e <_printf_float+0x3fa>
 800f83a:	4653      	mov	r3, sl
 800f83c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f840:	e6e0      	b.n	800f604 <_printf_float+0x1e0>
 800f842:	f04f 0800 	mov.w	r8, #0
 800f846:	f104 091a 	add.w	r9, r4, #26
 800f84a:	e7f2      	b.n	800f832 <_printf_float+0x40e>
 800f84c:	2301      	movs	r3, #1
 800f84e:	4642      	mov	r2, r8
 800f850:	e7df      	b.n	800f812 <_printf_float+0x3ee>
 800f852:	2301      	movs	r3, #1
 800f854:	464a      	mov	r2, r9
 800f856:	4631      	mov	r1, r6
 800f858:	4628      	mov	r0, r5
 800f85a:	47b8      	blx	r7
 800f85c:	3001      	adds	r0, #1
 800f85e:	f43f ae3c 	beq.w	800f4da <_printf_float+0xb6>
 800f862:	f108 0801 	add.w	r8, r8, #1
 800f866:	68e3      	ldr	r3, [r4, #12]
 800f868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f86a:	1a5b      	subs	r3, r3, r1
 800f86c:	4543      	cmp	r3, r8
 800f86e:	dcf0      	bgt.n	800f852 <_printf_float+0x42e>
 800f870:	e6fd      	b.n	800f66e <_printf_float+0x24a>
 800f872:	f04f 0800 	mov.w	r8, #0
 800f876:	f104 0919 	add.w	r9, r4, #25
 800f87a:	e7f4      	b.n	800f866 <_printf_float+0x442>

0800f87c <_printf_common>:
 800f87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f880:	4616      	mov	r6, r2
 800f882:	4699      	mov	r9, r3
 800f884:	688a      	ldr	r2, [r1, #8]
 800f886:	690b      	ldr	r3, [r1, #16]
 800f888:	4607      	mov	r7, r0
 800f88a:	4293      	cmp	r3, r2
 800f88c:	bfb8      	it	lt
 800f88e:	4613      	movlt	r3, r2
 800f890:	6033      	str	r3, [r6, #0]
 800f892:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f896:	460c      	mov	r4, r1
 800f898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f89c:	b10a      	cbz	r2, 800f8a2 <_printf_common+0x26>
 800f89e:	3301      	adds	r3, #1
 800f8a0:	6033      	str	r3, [r6, #0]
 800f8a2:	6823      	ldr	r3, [r4, #0]
 800f8a4:	0699      	lsls	r1, r3, #26
 800f8a6:	bf42      	ittt	mi
 800f8a8:	6833      	ldrmi	r3, [r6, #0]
 800f8aa:	3302      	addmi	r3, #2
 800f8ac:	6033      	strmi	r3, [r6, #0]
 800f8ae:	6825      	ldr	r5, [r4, #0]
 800f8b0:	f015 0506 	ands.w	r5, r5, #6
 800f8b4:	d106      	bne.n	800f8c4 <_printf_common+0x48>
 800f8b6:	f104 0a19 	add.w	sl, r4, #25
 800f8ba:	68e3      	ldr	r3, [r4, #12]
 800f8bc:	6832      	ldr	r2, [r6, #0]
 800f8be:	1a9b      	subs	r3, r3, r2
 800f8c0:	42ab      	cmp	r3, r5
 800f8c2:	dc28      	bgt.n	800f916 <_printf_common+0x9a>
 800f8c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8c8:	1e13      	subs	r3, r2, #0
 800f8ca:	6822      	ldr	r2, [r4, #0]
 800f8cc:	bf18      	it	ne
 800f8ce:	2301      	movne	r3, #1
 800f8d0:	0692      	lsls	r2, r2, #26
 800f8d2:	d42d      	bmi.n	800f930 <_printf_common+0xb4>
 800f8d4:	4649      	mov	r1, r9
 800f8d6:	4638      	mov	r0, r7
 800f8d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8dc:	47c0      	blx	r8
 800f8de:	3001      	adds	r0, #1
 800f8e0:	d020      	beq.n	800f924 <_printf_common+0xa8>
 800f8e2:	6823      	ldr	r3, [r4, #0]
 800f8e4:	68e5      	ldr	r5, [r4, #12]
 800f8e6:	f003 0306 	and.w	r3, r3, #6
 800f8ea:	2b04      	cmp	r3, #4
 800f8ec:	bf18      	it	ne
 800f8ee:	2500      	movne	r5, #0
 800f8f0:	6832      	ldr	r2, [r6, #0]
 800f8f2:	f04f 0600 	mov.w	r6, #0
 800f8f6:	68a3      	ldr	r3, [r4, #8]
 800f8f8:	bf08      	it	eq
 800f8fa:	1aad      	subeq	r5, r5, r2
 800f8fc:	6922      	ldr	r2, [r4, #16]
 800f8fe:	bf08      	it	eq
 800f900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f904:	4293      	cmp	r3, r2
 800f906:	bfc4      	itt	gt
 800f908:	1a9b      	subgt	r3, r3, r2
 800f90a:	18ed      	addgt	r5, r5, r3
 800f90c:	341a      	adds	r4, #26
 800f90e:	42b5      	cmp	r5, r6
 800f910:	d11a      	bne.n	800f948 <_printf_common+0xcc>
 800f912:	2000      	movs	r0, #0
 800f914:	e008      	b.n	800f928 <_printf_common+0xac>
 800f916:	2301      	movs	r3, #1
 800f918:	4652      	mov	r2, sl
 800f91a:	4649      	mov	r1, r9
 800f91c:	4638      	mov	r0, r7
 800f91e:	47c0      	blx	r8
 800f920:	3001      	adds	r0, #1
 800f922:	d103      	bne.n	800f92c <_printf_common+0xb0>
 800f924:	f04f 30ff 	mov.w	r0, #4294967295
 800f928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f92c:	3501      	adds	r5, #1
 800f92e:	e7c4      	b.n	800f8ba <_printf_common+0x3e>
 800f930:	2030      	movs	r0, #48	; 0x30
 800f932:	18e1      	adds	r1, r4, r3
 800f934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f938:	1c5a      	adds	r2, r3, #1
 800f93a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f93e:	4422      	add	r2, r4
 800f940:	3302      	adds	r3, #2
 800f942:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f946:	e7c5      	b.n	800f8d4 <_printf_common+0x58>
 800f948:	2301      	movs	r3, #1
 800f94a:	4622      	mov	r2, r4
 800f94c:	4649      	mov	r1, r9
 800f94e:	4638      	mov	r0, r7
 800f950:	47c0      	blx	r8
 800f952:	3001      	adds	r0, #1
 800f954:	d0e6      	beq.n	800f924 <_printf_common+0xa8>
 800f956:	3601      	adds	r6, #1
 800f958:	e7d9      	b.n	800f90e <_printf_common+0x92>
	...

0800f95c <_printf_i>:
 800f95c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f960:	7e0f      	ldrb	r7, [r1, #24]
 800f962:	4691      	mov	r9, r2
 800f964:	2f78      	cmp	r7, #120	; 0x78
 800f966:	4680      	mov	r8, r0
 800f968:	460c      	mov	r4, r1
 800f96a:	469a      	mov	sl, r3
 800f96c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f96e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f972:	d807      	bhi.n	800f984 <_printf_i+0x28>
 800f974:	2f62      	cmp	r7, #98	; 0x62
 800f976:	d80a      	bhi.n	800f98e <_printf_i+0x32>
 800f978:	2f00      	cmp	r7, #0
 800f97a:	f000 80d9 	beq.w	800fb30 <_printf_i+0x1d4>
 800f97e:	2f58      	cmp	r7, #88	; 0x58
 800f980:	f000 80a4 	beq.w	800facc <_printf_i+0x170>
 800f984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f98c:	e03a      	b.n	800fa04 <_printf_i+0xa8>
 800f98e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f992:	2b15      	cmp	r3, #21
 800f994:	d8f6      	bhi.n	800f984 <_printf_i+0x28>
 800f996:	a101      	add	r1, pc, #4	; (adr r1, 800f99c <_printf_i+0x40>)
 800f998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f99c:	0800f9f5 	.word	0x0800f9f5
 800f9a0:	0800fa09 	.word	0x0800fa09
 800f9a4:	0800f985 	.word	0x0800f985
 800f9a8:	0800f985 	.word	0x0800f985
 800f9ac:	0800f985 	.word	0x0800f985
 800f9b0:	0800f985 	.word	0x0800f985
 800f9b4:	0800fa09 	.word	0x0800fa09
 800f9b8:	0800f985 	.word	0x0800f985
 800f9bc:	0800f985 	.word	0x0800f985
 800f9c0:	0800f985 	.word	0x0800f985
 800f9c4:	0800f985 	.word	0x0800f985
 800f9c8:	0800fb17 	.word	0x0800fb17
 800f9cc:	0800fa39 	.word	0x0800fa39
 800f9d0:	0800faf9 	.word	0x0800faf9
 800f9d4:	0800f985 	.word	0x0800f985
 800f9d8:	0800f985 	.word	0x0800f985
 800f9dc:	0800fb39 	.word	0x0800fb39
 800f9e0:	0800f985 	.word	0x0800f985
 800f9e4:	0800fa39 	.word	0x0800fa39
 800f9e8:	0800f985 	.word	0x0800f985
 800f9ec:	0800f985 	.word	0x0800f985
 800f9f0:	0800fb01 	.word	0x0800fb01
 800f9f4:	682b      	ldr	r3, [r5, #0]
 800f9f6:	1d1a      	adds	r2, r3, #4
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	602a      	str	r2, [r5, #0]
 800f9fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa04:	2301      	movs	r3, #1
 800fa06:	e0a4      	b.n	800fb52 <_printf_i+0x1f6>
 800fa08:	6820      	ldr	r0, [r4, #0]
 800fa0a:	6829      	ldr	r1, [r5, #0]
 800fa0c:	0606      	lsls	r6, r0, #24
 800fa0e:	f101 0304 	add.w	r3, r1, #4
 800fa12:	d50a      	bpl.n	800fa2a <_printf_i+0xce>
 800fa14:	680e      	ldr	r6, [r1, #0]
 800fa16:	602b      	str	r3, [r5, #0]
 800fa18:	2e00      	cmp	r6, #0
 800fa1a:	da03      	bge.n	800fa24 <_printf_i+0xc8>
 800fa1c:	232d      	movs	r3, #45	; 0x2d
 800fa1e:	4276      	negs	r6, r6
 800fa20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa24:	230a      	movs	r3, #10
 800fa26:	485e      	ldr	r0, [pc, #376]	; (800fba0 <_printf_i+0x244>)
 800fa28:	e019      	b.n	800fa5e <_printf_i+0x102>
 800fa2a:	680e      	ldr	r6, [r1, #0]
 800fa2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa30:	602b      	str	r3, [r5, #0]
 800fa32:	bf18      	it	ne
 800fa34:	b236      	sxthne	r6, r6
 800fa36:	e7ef      	b.n	800fa18 <_printf_i+0xbc>
 800fa38:	682b      	ldr	r3, [r5, #0]
 800fa3a:	6820      	ldr	r0, [r4, #0]
 800fa3c:	1d19      	adds	r1, r3, #4
 800fa3e:	6029      	str	r1, [r5, #0]
 800fa40:	0601      	lsls	r1, r0, #24
 800fa42:	d501      	bpl.n	800fa48 <_printf_i+0xec>
 800fa44:	681e      	ldr	r6, [r3, #0]
 800fa46:	e002      	b.n	800fa4e <_printf_i+0xf2>
 800fa48:	0646      	lsls	r6, r0, #25
 800fa4a:	d5fb      	bpl.n	800fa44 <_printf_i+0xe8>
 800fa4c:	881e      	ldrh	r6, [r3, #0]
 800fa4e:	2f6f      	cmp	r7, #111	; 0x6f
 800fa50:	bf0c      	ite	eq
 800fa52:	2308      	moveq	r3, #8
 800fa54:	230a      	movne	r3, #10
 800fa56:	4852      	ldr	r0, [pc, #328]	; (800fba0 <_printf_i+0x244>)
 800fa58:	2100      	movs	r1, #0
 800fa5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa5e:	6865      	ldr	r5, [r4, #4]
 800fa60:	2d00      	cmp	r5, #0
 800fa62:	bfa8      	it	ge
 800fa64:	6821      	ldrge	r1, [r4, #0]
 800fa66:	60a5      	str	r5, [r4, #8]
 800fa68:	bfa4      	itt	ge
 800fa6a:	f021 0104 	bicge.w	r1, r1, #4
 800fa6e:	6021      	strge	r1, [r4, #0]
 800fa70:	b90e      	cbnz	r6, 800fa76 <_printf_i+0x11a>
 800fa72:	2d00      	cmp	r5, #0
 800fa74:	d04d      	beq.n	800fb12 <_printf_i+0x1b6>
 800fa76:	4615      	mov	r5, r2
 800fa78:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa7c:	fb03 6711 	mls	r7, r3, r1, r6
 800fa80:	5dc7      	ldrb	r7, [r0, r7]
 800fa82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa86:	4637      	mov	r7, r6
 800fa88:	42bb      	cmp	r3, r7
 800fa8a:	460e      	mov	r6, r1
 800fa8c:	d9f4      	bls.n	800fa78 <_printf_i+0x11c>
 800fa8e:	2b08      	cmp	r3, #8
 800fa90:	d10b      	bne.n	800faaa <_printf_i+0x14e>
 800fa92:	6823      	ldr	r3, [r4, #0]
 800fa94:	07de      	lsls	r6, r3, #31
 800fa96:	d508      	bpl.n	800faaa <_printf_i+0x14e>
 800fa98:	6923      	ldr	r3, [r4, #16]
 800fa9a:	6861      	ldr	r1, [r4, #4]
 800fa9c:	4299      	cmp	r1, r3
 800fa9e:	bfde      	ittt	le
 800faa0:	2330      	movle	r3, #48	; 0x30
 800faa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800faa6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800faaa:	1b52      	subs	r2, r2, r5
 800faac:	6122      	str	r2, [r4, #16]
 800faae:	464b      	mov	r3, r9
 800fab0:	4621      	mov	r1, r4
 800fab2:	4640      	mov	r0, r8
 800fab4:	f8cd a000 	str.w	sl, [sp]
 800fab8:	aa03      	add	r2, sp, #12
 800faba:	f7ff fedf 	bl	800f87c <_printf_common>
 800fabe:	3001      	adds	r0, #1
 800fac0:	d14c      	bne.n	800fb5c <_printf_i+0x200>
 800fac2:	f04f 30ff 	mov.w	r0, #4294967295
 800fac6:	b004      	add	sp, #16
 800fac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800facc:	4834      	ldr	r0, [pc, #208]	; (800fba0 <_printf_i+0x244>)
 800face:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fad2:	6829      	ldr	r1, [r5, #0]
 800fad4:	6823      	ldr	r3, [r4, #0]
 800fad6:	f851 6b04 	ldr.w	r6, [r1], #4
 800fada:	6029      	str	r1, [r5, #0]
 800fadc:	061d      	lsls	r5, r3, #24
 800fade:	d514      	bpl.n	800fb0a <_printf_i+0x1ae>
 800fae0:	07df      	lsls	r7, r3, #31
 800fae2:	bf44      	itt	mi
 800fae4:	f043 0320 	orrmi.w	r3, r3, #32
 800fae8:	6023      	strmi	r3, [r4, #0]
 800faea:	b91e      	cbnz	r6, 800faf4 <_printf_i+0x198>
 800faec:	6823      	ldr	r3, [r4, #0]
 800faee:	f023 0320 	bic.w	r3, r3, #32
 800faf2:	6023      	str	r3, [r4, #0]
 800faf4:	2310      	movs	r3, #16
 800faf6:	e7af      	b.n	800fa58 <_printf_i+0xfc>
 800faf8:	6823      	ldr	r3, [r4, #0]
 800fafa:	f043 0320 	orr.w	r3, r3, #32
 800fafe:	6023      	str	r3, [r4, #0]
 800fb00:	2378      	movs	r3, #120	; 0x78
 800fb02:	4828      	ldr	r0, [pc, #160]	; (800fba4 <_printf_i+0x248>)
 800fb04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb08:	e7e3      	b.n	800fad2 <_printf_i+0x176>
 800fb0a:	0659      	lsls	r1, r3, #25
 800fb0c:	bf48      	it	mi
 800fb0e:	b2b6      	uxthmi	r6, r6
 800fb10:	e7e6      	b.n	800fae0 <_printf_i+0x184>
 800fb12:	4615      	mov	r5, r2
 800fb14:	e7bb      	b.n	800fa8e <_printf_i+0x132>
 800fb16:	682b      	ldr	r3, [r5, #0]
 800fb18:	6826      	ldr	r6, [r4, #0]
 800fb1a:	1d18      	adds	r0, r3, #4
 800fb1c:	6961      	ldr	r1, [r4, #20]
 800fb1e:	6028      	str	r0, [r5, #0]
 800fb20:	0635      	lsls	r5, r6, #24
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	d501      	bpl.n	800fb2a <_printf_i+0x1ce>
 800fb26:	6019      	str	r1, [r3, #0]
 800fb28:	e002      	b.n	800fb30 <_printf_i+0x1d4>
 800fb2a:	0670      	lsls	r0, r6, #25
 800fb2c:	d5fb      	bpl.n	800fb26 <_printf_i+0x1ca>
 800fb2e:	8019      	strh	r1, [r3, #0]
 800fb30:	2300      	movs	r3, #0
 800fb32:	4615      	mov	r5, r2
 800fb34:	6123      	str	r3, [r4, #16]
 800fb36:	e7ba      	b.n	800faae <_printf_i+0x152>
 800fb38:	682b      	ldr	r3, [r5, #0]
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	1d1a      	adds	r2, r3, #4
 800fb3e:	602a      	str	r2, [r5, #0]
 800fb40:	681d      	ldr	r5, [r3, #0]
 800fb42:	6862      	ldr	r2, [r4, #4]
 800fb44:	4628      	mov	r0, r5
 800fb46:	f002 f8fb 	bl	8011d40 <memchr>
 800fb4a:	b108      	cbz	r0, 800fb50 <_printf_i+0x1f4>
 800fb4c:	1b40      	subs	r0, r0, r5
 800fb4e:	6060      	str	r0, [r4, #4]
 800fb50:	6863      	ldr	r3, [r4, #4]
 800fb52:	6123      	str	r3, [r4, #16]
 800fb54:	2300      	movs	r3, #0
 800fb56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb5a:	e7a8      	b.n	800faae <_printf_i+0x152>
 800fb5c:	462a      	mov	r2, r5
 800fb5e:	4649      	mov	r1, r9
 800fb60:	4640      	mov	r0, r8
 800fb62:	6923      	ldr	r3, [r4, #16]
 800fb64:	47d0      	blx	sl
 800fb66:	3001      	adds	r0, #1
 800fb68:	d0ab      	beq.n	800fac2 <_printf_i+0x166>
 800fb6a:	6823      	ldr	r3, [r4, #0]
 800fb6c:	079b      	lsls	r3, r3, #30
 800fb6e:	d413      	bmi.n	800fb98 <_printf_i+0x23c>
 800fb70:	68e0      	ldr	r0, [r4, #12]
 800fb72:	9b03      	ldr	r3, [sp, #12]
 800fb74:	4298      	cmp	r0, r3
 800fb76:	bfb8      	it	lt
 800fb78:	4618      	movlt	r0, r3
 800fb7a:	e7a4      	b.n	800fac6 <_printf_i+0x16a>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	4632      	mov	r2, r6
 800fb80:	4649      	mov	r1, r9
 800fb82:	4640      	mov	r0, r8
 800fb84:	47d0      	blx	sl
 800fb86:	3001      	adds	r0, #1
 800fb88:	d09b      	beq.n	800fac2 <_printf_i+0x166>
 800fb8a:	3501      	adds	r5, #1
 800fb8c:	68e3      	ldr	r3, [r4, #12]
 800fb8e:	9903      	ldr	r1, [sp, #12]
 800fb90:	1a5b      	subs	r3, r3, r1
 800fb92:	42ab      	cmp	r3, r5
 800fb94:	dcf2      	bgt.n	800fb7c <_printf_i+0x220>
 800fb96:	e7eb      	b.n	800fb70 <_printf_i+0x214>
 800fb98:	2500      	movs	r5, #0
 800fb9a:	f104 0619 	add.w	r6, r4, #25
 800fb9e:	e7f5      	b.n	800fb8c <_printf_i+0x230>
 800fba0:	08013a92 	.word	0x08013a92
 800fba4:	08013aa3 	.word	0x08013aa3

0800fba8 <siprintf>:
 800fba8:	b40e      	push	{r1, r2, r3}
 800fbaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fbae:	b500      	push	{lr}
 800fbb0:	b09c      	sub	sp, #112	; 0x70
 800fbb2:	ab1d      	add	r3, sp, #116	; 0x74
 800fbb4:	9002      	str	r0, [sp, #8]
 800fbb6:	9006      	str	r0, [sp, #24]
 800fbb8:	9107      	str	r1, [sp, #28]
 800fbba:	9104      	str	r1, [sp, #16]
 800fbbc:	4808      	ldr	r0, [pc, #32]	; (800fbe0 <siprintf+0x38>)
 800fbbe:	4909      	ldr	r1, [pc, #36]	; (800fbe4 <siprintf+0x3c>)
 800fbc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbc4:	9105      	str	r1, [sp, #20]
 800fbc6:	6800      	ldr	r0, [r0, #0]
 800fbc8:	a902      	add	r1, sp, #8
 800fbca:	9301      	str	r3, [sp, #4]
 800fbcc:	f002 feca 	bl	8012964 <_svfiprintf_r>
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	9b02      	ldr	r3, [sp, #8]
 800fbd4:	701a      	strb	r2, [r3, #0]
 800fbd6:	b01c      	add	sp, #112	; 0x70
 800fbd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbdc:	b003      	add	sp, #12
 800fbde:	4770      	bx	lr
 800fbe0:	20000938 	.word	0x20000938
 800fbe4:	ffff0208 	.word	0xffff0208

0800fbe8 <strcpy>:
 800fbe8:	4603      	mov	r3, r0
 800fbea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbee:	f803 2b01 	strb.w	r2, [r3], #1
 800fbf2:	2a00      	cmp	r2, #0
 800fbf4:	d1f9      	bne.n	800fbea <strcpy+0x2>
 800fbf6:	4770      	bx	lr

0800fbf8 <sulp>:
 800fbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbfc:	460f      	mov	r7, r1
 800fbfe:	4690      	mov	r8, r2
 800fc00:	f002 fc1c 	bl	801243c <__ulp>
 800fc04:	4604      	mov	r4, r0
 800fc06:	460d      	mov	r5, r1
 800fc08:	f1b8 0f00 	cmp.w	r8, #0
 800fc0c:	d011      	beq.n	800fc32 <sulp+0x3a>
 800fc0e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800fc12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	dd0b      	ble.n	800fc32 <sulp+0x3a>
 800fc1a:	2400      	movs	r4, #0
 800fc1c:	051b      	lsls	r3, r3, #20
 800fc1e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fc22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fc26:	4622      	mov	r2, r4
 800fc28:	462b      	mov	r3, r5
 800fc2a:	f7f0 fc77 	bl	800051c <__aeabi_dmul>
 800fc2e:	4604      	mov	r4, r0
 800fc30:	460d      	mov	r5, r1
 800fc32:	4620      	mov	r0, r4
 800fc34:	4629      	mov	r1, r5
 800fc36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc3a:	0000      	movs	r0, r0
 800fc3c:	0000      	movs	r0, r0
	...

0800fc40 <_strtod_l>:
 800fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc44:	469b      	mov	fp, r3
 800fc46:	2300      	movs	r3, #0
 800fc48:	b09f      	sub	sp, #124	; 0x7c
 800fc4a:	931a      	str	r3, [sp, #104]	; 0x68
 800fc4c:	4b9e      	ldr	r3, [pc, #632]	; (800fec8 <_strtod_l+0x288>)
 800fc4e:	4682      	mov	sl, r0
 800fc50:	681f      	ldr	r7, [r3, #0]
 800fc52:	460e      	mov	r6, r1
 800fc54:	4638      	mov	r0, r7
 800fc56:	9215      	str	r2, [sp, #84]	; 0x54
 800fc58:	f7f0 fa9c 	bl	8000194 <strlen>
 800fc5c:	f04f 0800 	mov.w	r8, #0
 800fc60:	4604      	mov	r4, r0
 800fc62:	f04f 0900 	mov.w	r9, #0
 800fc66:	9619      	str	r6, [sp, #100]	; 0x64
 800fc68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc6a:	781a      	ldrb	r2, [r3, #0]
 800fc6c:	2a2b      	cmp	r2, #43	; 0x2b
 800fc6e:	d04c      	beq.n	800fd0a <_strtod_l+0xca>
 800fc70:	d83a      	bhi.n	800fce8 <_strtod_l+0xa8>
 800fc72:	2a0d      	cmp	r2, #13
 800fc74:	d833      	bhi.n	800fcde <_strtod_l+0x9e>
 800fc76:	2a08      	cmp	r2, #8
 800fc78:	d833      	bhi.n	800fce2 <_strtod_l+0xa2>
 800fc7a:	2a00      	cmp	r2, #0
 800fc7c:	d03d      	beq.n	800fcfa <_strtod_l+0xba>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	930a      	str	r3, [sp, #40]	; 0x28
 800fc82:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800fc84:	782b      	ldrb	r3, [r5, #0]
 800fc86:	2b30      	cmp	r3, #48	; 0x30
 800fc88:	f040 80aa 	bne.w	800fde0 <_strtod_l+0x1a0>
 800fc8c:	786b      	ldrb	r3, [r5, #1]
 800fc8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fc92:	2b58      	cmp	r3, #88	; 0x58
 800fc94:	d166      	bne.n	800fd64 <_strtod_l+0x124>
 800fc96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc98:	4650      	mov	r0, sl
 800fc9a:	9301      	str	r3, [sp, #4]
 800fc9c:	ab1a      	add	r3, sp, #104	; 0x68
 800fc9e:	9300      	str	r3, [sp, #0]
 800fca0:	4a8a      	ldr	r2, [pc, #552]	; (800fecc <_strtod_l+0x28c>)
 800fca2:	f8cd b008 	str.w	fp, [sp, #8]
 800fca6:	ab1b      	add	r3, sp, #108	; 0x6c
 800fca8:	a919      	add	r1, sp, #100	; 0x64
 800fcaa:	f001 fd2d 	bl	8011708 <__gethex>
 800fcae:	f010 0607 	ands.w	r6, r0, #7
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	d005      	beq.n	800fcc2 <_strtod_l+0x82>
 800fcb6:	2e06      	cmp	r6, #6
 800fcb8:	d129      	bne.n	800fd0e <_strtod_l+0xce>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	3501      	adds	r5, #1
 800fcbe:	9519      	str	r5, [sp, #100]	; 0x64
 800fcc0:	930a      	str	r3, [sp, #40]	; 0x28
 800fcc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f040 858a 	bne.w	80107de <_strtod_l+0xb9e>
 800fcca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fccc:	b1d3      	cbz	r3, 800fd04 <_strtod_l+0xc4>
 800fcce:	4642      	mov	r2, r8
 800fcd0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fcd4:	4610      	mov	r0, r2
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	b01f      	add	sp, #124	; 0x7c
 800fcda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcde:	2a20      	cmp	r2, #32
 800fce0:	d1cd      	bne.n	800fc7e <_strtod_l+0x3e>
 800fce2:	3301      	adds	r3, #1
 800fce4:	9319      	str	r3, [sp, #100]	; 0x64
 800fce6:	e7bf      	b.n	800fc68 <_strtod_l+0x28>
 800fce8:	2a2d      	cmp	r2, #45	; 0x2d
 800fcea:	d1c8      	bne.n	800fc7e <_strtod_l+0x3e>
 800fcec:	2201      	movs	r2, #1
 800fcee:	920a      	str	r2, [sp, #40]	; 0x28
 800fcf0:	1c5a      	adds	r2, r3, #1
 800fcf2:	9219      	str	r2, [sp, #100]	; 0x64
 800fcf4:	785b      	ldrb	r3, [r3, #1]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d1c3      	bne.n	800fc82 <_strtod_l+0x42>
 800fcfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcfc:	9619      	str	r6, [sp, #100]	; 0x64
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	f040 856b 	bne.w	80107da <_strtod_l+0xb9a>
 800fd04:	4642      	mov	r2, r8
 800fd06:	464b      	mov	r3, r9
 800fd08:	e7e4      	b.n	800fcd4 <_strtod_l+0x94>
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	e7ef      	b.n	800fcee <_strtod_l+0xae>
 800fd0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fd10:	b13a      	cbz	r2, 800fd22 <_strtod_l+0xe2>
 800fd12:	2135      	movs	r1, #53	; 0x35
 800fd14:	a81c      	add	r0, sp, #112	; 0x70
 800fd16:	f002 fc95 	bl	8012644 <__copybits>
 800fd1a:	4650      	mov	r0, sl
 800fd1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800fd1e:	f002 f85d 	bl	8011ddc <_Bfree>
 800fd22:	3e01      	subs	r6, #1
 800fd24:	2e04      	cmp	r6, #4
 800fd26:	d806      	bhi.n	800fd36 <_strtod_l+0xf6>
 800fd28:	e8df f006 	tbb	[pc, r6]
 800fd2c:	1714030a 	.word	0x1714030a
 800fd30:	0a          	.byte	0x0a
 800fd31:	00          	.byte	0x00
 800fd32:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800fd36:	0721      	lsls	r1, r4, #28
 800fd38:	d5c3      	bpl.n	800fcc2 <_strtod_l+0x82>
 800fd3a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800fd3e:	e7c0      	b.n	800fcc2 <_strtod_l+0x82>
 800fd40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fd42:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800fd46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fd4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fd4e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800fd52:	e7f0      	b.n	800fd36 <_strtod_l+0xf6>
 800fd54:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fed0 <_strtod_l+0x290>
 800fd58:	e7ed      	b.n	800fd36 <_strtod_l+0xf6>
 800fd5a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fd5e:	f04f 38ff 	mov.w	r8, #4294967295
 800fd62:	e7e8      	b.n	800fd36 <_strtod_l+0xf6>
 800fd64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fd66:	1c5a      	adds	r2, r3, #1
 800fd68:	9219      	str	r2, [sp, #100]	; 0x64
 800fd6a:	785b      	ldrb	r3, [r3, #1]
 800fd6c:	2b30      	cmp	r3, #48	; 0x30
 800fd6e:	d0f9      	beq.n	800fd64 <_strtod_l+0x124>
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d0a6      	beq.n	800fcc2 <_strtod_l+0x82>
 800fd74:	2301      	movs	r3, #1
 800fd76:	9307      	str	r3, [sp, #28]
 800fd78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fd7a:	220a      	movs	r2, #10
 800fd7c:	9308      	str	r3, [sp, #32]
 800fd7e:	2300      	movs	r3, #0
 800fd80:	469b      	mov	fp, r3
 800fd82:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800fd86:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fd88:	7805      	ldrb	r5, [r0, #0]
 800fd8a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800fd8e:	b2d9      	uxtb	r1, r3
 800fd90:	2909      	cmp	r1, #9
 800fd92:	d927      	bls.n	800fde4 <_strtod_l+0x1a4>
 800fd94:	4622      	mov	r2, r4
 800fd96:	4639      	mov	r1, r7
 800fd98:	f003 f852 	bl	8012e40 <strncmp>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d033      	beq.n	800fe08 <_strtod_l+0x1c8>
 800fda0:	2000      	movs	r0, #0
 800fda2:	462a      	mov	r2, r5
 800fda4:	465c      	mov	r4, fp
 800fda6:	4603      	mov	r3, r0
 800fda8:	9004      	str	r0, [sp, #16]
 800fdaa:	2a65      	cmp	r2, #101	; 0x65
 800fdac:	d001      	beq.n	800fdb2 <_strtod_l+0x172>
 800fdae:	2a45      	cmp	r2, #69	; 0x45
 800fdb0:	d114      	bne.n	800fddc <_strtod_l+0x19c>
 800fdb2:	b91c      	cbnz	r4, 800fdbc <_strtod_l+0x17c>
 800fdb4:	9a07      	ldr	r2, [sp, #28]
 800fdb6:	4302      	orrs	r2, r0
 800fdb8:	d09f      	beq.n	800fcfa <_strtod_l+0xba>
 800fdba:	2400      	movs	r4, #0
 800fdbc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800fdbe:	1c72      	adds	r2, r6, #1
 800fdc0:	9219      	str	r2, [sp, #100]	; 0x64
 800fdc2:	7872      	ldrb	r2, [r6, #1]
 800fdc4:	2a2b      	cmp	r2, #43	; 0x2b
 800fdc6:	d079      	beq.n	800febc <_strtod_l+0x27c>
 800fdc8:	2a2d      	cmp	r2, #45	; 0x2d
 800fdca:	f000 8083 	beq.w	800fed4 <_strtod_l+0x294>
 800fdce:	2700      	movs	r7, #0
 800fdd0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fdd4:	2909      	cmp	r1, #9
 800fdd6:	f240 8083 	bls.w	800fee0 <_strtod_l+0x2a0>
 800fdda:	9619      	str	r6, [sp, #100]	; 0x64
 800fddc:	2500      	movs	r5, #0
 800fdde:	e09f      	b.n	800ff20 <_strtod_l+0x2e0>
 800fde0:	2300      	movs	r3, #0
 800fde2:	e7c8      	b.n	800fd76 <_strtod_l+0x136>
 800fde4:	f1bb 0f08 	cmp.w	fp, #8
 800fde8:	bfd5      	itete	le
 800fdea:	9906      	ldrle	r1, [sp, #24]
 800fdec:	9905      	ldrgt	r1, [sp, #20]
 800fdee:	fb02 3301 	mlale	r3, r2, r1, r3
 800fdf2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fdf6:	f100 0001 	add.w	r0, r0, #1
 800fdfa:	bfd4      	ite	le
 800fdfc:	9306      	strle	r3, [sp, #24]
 800fdfe:	9305      	strgt	r3, [sp, #20]
 800fe00:	f10b 0b01 	add.w	fp, fp, #1
 800fe04:	9019      	str	r0, [sp, #100]	; 0x64
 800fe06:	e7be      	b.n	800fd86 <_strtod_l+0x146>
 800fe08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe0a:	191a      	adds	r2, r3, r4
 800fe0c:	9219      	str	r2, [sp, #100]	; 0x64
 800fe0e:	5d1a      	ldrb	r2, [r3, r4]
 800fe10:	f1bb 0f00 	cmp.w	fp, #0
 800fe14:	d036      	beq.n	800fe84 <_strtod_l+0x244>
 800fe16:	465c      	mov	r4, fp
 800fe18:	9004      	str	r0, [sp, #16]
 800fe1a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fe1e:	2b09      	cmp	r3, #9
 800fe20:	d912      	bls.n	800fe48 <_strtod_l+0x208>
 800fe22:	2301      	movs	r3, #1
 800fe24:	e7c1      	b.n	800fdaa <_strtod_l+0x16a>
 800fe26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe28:	3001      	adds	r0, #1
 800fe2a:	1c5a      	adds	r2, r3, #1
 800fe2c:	9219      	str	r2, [sp, #100]	; 0x64
 800fe2e:	785a      	ldrb	r2, [r3, #1]
 800fe30:	2a30      	cmp	r2, #48	; 0x30
 800fe32:	d0f8      	beq.n	800fe26 <_strtod_l+0x1e6>
 800fe34:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fe38:	2b08      	cmp	r3, #8
 800fe3a:	f200 84d5 	bhi.w	80107e8 <_strtod_l+0xba8>
 800fe3e:	9004      	str	r0, [sp, #16]
 800fe40:	2000      	movs	r0, #0
 800fe42:	4604      	mov	r4, r0
 800fe44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe46:	9308      	str	r3, [sp, #32]
 800fe48:	3a30      	subs	r2, #48	; 0x30
 800fe4a:	f100 0301 	add.w	r3, r0, #1
 800fe4e:	d013      	beq.n	800fe78 <_strtod_l+0x238>
 800fe50:	9904      	ldr	r1, [sp, #16]
 800fe52:	1905      	adds	r5, r0, r4
 800fe54:	4419      	add	r1, r3
 800fe56:	9104      	str	r1, [sp, #16]
 800fe58:	4623      	mov	r3, r4
 800fe5a:	210a      	movs	r1, #10
 800fe5c:	42ab      	cmp	r3, r5
 800fe5e:	d113      	bne.n	800fe88 <_strtod_l+0x248>
 800fe60:	1823      	adds	r3, r4, r0
 800fe62:	2b08      	cmp	r3, #8
 800fe64:	f104 0401 	add.w	r4, r4, #1
 800fe68:	4404      	add	r4, r0
 800fe6a:	dc1b      	bgt.n	800fea4 <_strtod_l+0x264>
 800fe6c:	230a      	movs	r3, #10
 800fe6e:	9906      	ldr	r1, [sp, #24]
 800fe70:	fb03 2301 	mla	r3, r3, r1, r2
 800fe74:	9306      	str	r3, [sp, #24]
 800fe76:	2300      	movs	r3, #0
 800fe78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	1c51      	adds	r1, r2, #1
 800fe7e:	9119      	str	r1, [sp, #100]	; 0x64
 800fe80:	7852      	ldrb	r2, [r2, #1]
 800fe82:	e7ca      	b.n	800fe1a <_strtod_l+0x1da>
 800fe84:	4658      	mov	r0, fp
 800fe86:	e7d3      	b.n	800fe30 <_strtod_l+0x1f0>
 800fe88:	2b08      	cmp	r3, #8
 800fe8a:	dc04      	bgt.n	800fe96 <_strtod_l+0x256>
 800fe8c:	9f06      	ldr	r7, [sp, #24]
 800fe8e:	434f      	muls	r7, r1
 800fe90:	9706      	str	r7, [sp, #24]
 800fe92:	3301      	adds	r3, #1
 800fe94:	e7e2      	b.n	800fe5c <_strtod_l+0x21c>
 800fe96:	1c5f      	adds	r7, r3, #1
 800fe98:	2f10      	cmp	r7, #16
 800fe9a:	bfde      	ittt	le
 800fe9c:	9f05      	ldrle	r7, [sp, #20]
 800fe9e:	434f      	mulle	r7, r1
 800fea0:	9705      	strle	r7, [sp, #20]
 800fea2:	e7f6      	b.n	800fe92 <_strtod_l+0x252>
 800fea4:	2c10      	cmp	r4, #16
 800fea6:	bfdf      	itttt	le
 800fea8:	230a      	movle	r3, #10
 800feaa:	9905      	ldrle	r1, [sp, #20]
 800feac:	fb03 2301 	mlale	r3, r3, r1, r2
 800feb0:	9305      	strle	r3, [sp, #20]
 800feb2:	e7e0      	b.n	800fe76 <_strtod_l+0x236>
 800feb4:	2300      	movs	r3, #0
 800feb6:	9304      	str	r3, [sp, #16]
 800feb8:	2301      	movs	r3, #1
 800feba:	e77b      	b.n	800fdb4 <_strtod_l+0x174>
 800febc:	2700      	movs	r7, #0
 800febe:	1cb2      	adds	r2, r6, #2
 800fec0:	9219      	str	r2, [sp, #100]	; 0x64
 800fec2:	78b2      	ldrb	r2, [r6, #2]
 800fec4:	e784      	b.n	800fdd0 <_strtod_l+0x190>
 800fec6:	bf00      	nop
 800fec8:	08013c98 	.word	0x08013c98
 800fecc:	08013ab4 	.word	0x08013ab4
 800fed0:	7ff00000 	.word	0x7ff00000
 800fed4:	2701      	movs	r7, #1
 800fed6:	e7f2      	b.n	800febe <_strtod_l+0x27e>
 800fed8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800feda:	1c51      	adds	r1, r2, #1
 800fedc:	9119      	str	r1, [sp, #100]	; 0x64
 800fede:	7852      	ldrb	r2, [r2, #1]
 800fee0:	2a30      	cmp	r2, #48	; 0x30
 800fee2:	d0f9      	beq.n	800fed8 <_strtod_l+0x298>
 800fee4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fee8:	2908      	cmp	r1, #8
 800feea:	f63f af77 	bhi.w	800fddc <_strtod_l+0x19c>
 800feee:	f04f 0e0a 	mov.w	lr, #10
 800fef2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800fef6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fef8:	9209      	str	r2, [sp, #36]	; 0x24
 800fefa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fefc:	1c51      	adds	r1, r2, #1
 800fefe:	9119      	str	r1, [sp, #100]	; 0x64
 800ff00:	7852      	ldrb	r2, [r2, #1]
 800ff02:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ff06:	2d09      	cmp	r5, #9
 800ff08:	d935      	bls.n	800ff76 <_strtod_l+0x336>
 800ff0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ff0c:	1b49      	subs	r1, r1, r5
 800ff0e:	2908      	cmp	r1, #8
 800ff10:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ff14:	dc02      	bgt.n	800ff1c <_strtod_l+0x2dc>
 800ff16:	4565      	cmp	r5, ip
 800ff18:	bfa8      	it	ge
 800ff1a:	4665      	movge	r5, ip
 800ff1c:	b107      	cbz	r7, 800ff20 <_strtod_l+0x2e0>
 800ff1e:	426d      	negs	r5, r5
 800ff20:	2c00      	cmp	r4, #0
 800ff22:	d14c      	bne.n	800ffbe <_strtod_l+0x37e>
 800ff24:	9907      	ldr	r1, [sp, #28]
 800ff26:	4301      	orrs	r1, r0
 800ff28:	f47f aecb 	bne.w	800fcc2 <_strtod_l+0x82>
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f47f aee4 	bne.w	800fcfa <_strtod_l+0xba>
 800ff32:	2a69      	cmp	r2, #105	; 0x69
 800ff34:	d026      	beq.n	800ff84 <_strtod_l+0x344>
 800ff36:	dc23      	bgt.n	800ff80 <_strtod_l+0x340>
 800ff38:	2a49      	cmp	r2, #73	; 0x49
 800ff3a:	d023      	beq.n	800ff84 <_strtod_l+0x344>
 800ff3c:	2a4e      	cmp	r2, #78	; 0x4e
 800ff3e:	f47f aedc 	bne.w	800fcfa <_strtod_l+0xba>
 800ff42:	499d      	ldr	r1, [pc, #628]	; (80101b8 <_strtod_l+0x578>)
 800ff44:	a819      	add	r0, sp, #100	; 0x64
 800ff46:	f001 fe2d 	bl	8011ba4 <__match>
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	f43f aed5 	beq.w	800fcfa <_strtod_l+0xba>
 800ff50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	2b28      	cmp	r3, #40	; 0x28
 800ff56:	d12c      	bne.n	800ffb2 <_strtod_l+0x372>
 800ff58:	4998      	ldr	r1, [pc, #608]	; (80101bc <_strtod_l+0x57c>)
 800ff5a:	aa1c      	add	r2, sp, #112	; 0x70
 800ff5c:	a819      	add	r0, sp, #100	; 0x64
 800ff5e:	f001 fe35 	bl	8011bcc <__hexnan>
 800ff62:	2805      	cmp	r0, #5
 800ff64:	d125      	bne.n	800ffb2 <_strtod_l+0x372>
 800ff66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ff68:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ff6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ff70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ff74:	e6a5      	b.n	800fcc2 <_strtod_l+0x82>
 800ff76:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ff7a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ff7e:	e7bc      	b.n	800fefa <_strtod_l+0x2ba>
 800ff80:	2a6e      	cmp	r2, #110	; 0x6e
 800ff82:	e7dc      	b.n	800ff3e <_strtod_l+0x2fe>
 800ff84:	498e      	ldr	r1, [pc, #568]	; (80101c0 <_strtod_l+0x580>)
 800ff86:	a819      	add	r0, sp, #100	; 0x64
 800ff88:	f001 fe0c 	bl	8011ba4 <__match>
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	f43f aeb4 	beq.w	800fcfa <_strtod_l+0xba>
 800ff92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ff94:	498b      	ldr	r1, [pc, #556]	; (80101c4 <_strtod_l+0x584>)
 800ff96:	3b01      	subs	r3, #1
 800ff98:	a819      	add	r0, sp, #100	; 0x64
 800ff9a:	9319      	str	r3, [sp, #100]	; 0x64
 800ff9c:	f001 fe02 	bl	8011ba4 <__match>
 800ffa0:	b910      	cbnz	r0, 800ffa8 <_strtod_l+0x368>
 800ffa2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	9319      	str	r3, [sp, #100]	; 0x64
 800ffa8:	f04f 0800 	mov.w	r8, #0
 800ffac:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80101c8 <_strtod_l+0x588>
 800ffb0:	e687      	b.n	800fcc2 <_strtod_l+0x82>
 800ffb2:	4886      	ldr	r0, [pc, #536]	; (80101cc <_strtod_l+0x58c>)
 800ffb4:	f002 ff2e 	bl	8012e14 <nan>
 800ffb8:	4680      	mov	r8, r0
 800ffba:	4689      	mov	r9, r1
 800ffbc:	e681      	b.n	800fcc2 <_strtod_l+0x82>
 800ffbe:	9b04      	ldr	r3, [sp, #16]
 800ffc0:	f1bb 0f00 	cmp.w	fp, #0
 800ffc4:	bf08      	it	eq
 800ffc6:	46a3      	moveq	fp, r4
 800ffc8:	1aeb      	subs	r3, r5, r3
 800ffca:	2c10      	cmp	r4, #16
 800ffcc:	9806      	ldr	r0, [sp, #24]
 800ffce:	4626      	mov	r6, r4
 800ffd0:	9307      	str	r3, [sp, #28]
 800ffd2:	bfa8      	it	ge
 800ffd4:	2610      	movge	r6, #16
 800ffd6:	f7f0 fa27 	bl	8000428 <__aeabi_ui2d>
 800ffda:	2c09      	cmp	r4, #9
 800ffdc:	4680      	mov	r8, r0
 800ffde:	4689      	mov	r9, r1
 800ffe0:	dd13      	ble.n	801000a <_strtod_l+0x3ca>
 800ffe2:	4b7b      	ldr	r3, [pc, #492]	; (80101d0 <_strtod_l+0x590>)
 800ffe4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ffe8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ffec:	f7f0 fa96 	bl	800051c <__aeabi_dmul>
 800fff0:	4680      	mov	r8, r0
 800fff2:	9805      	ldr	r0, [sp, #20]
 800fff4:	4689      	mov	r9, r1
 800fff6:	f7f0 fa17 	bl	8000428 <__aeabi_ui2d>
 800fffa:	4602      	mov	r2, r0
 800fffc:	460b      	mov	r3, r1
 800fffe:	4640      	mov	r0, r8
 8010000:	4649      	mov	r1, r9
 8010002:	f7f0 f8d5 	bl	80001b0 <__adddf3>
 8010006:	4680      	mov	r8, r0
 8010008:	4689      	mov	r9, r1
 801000a:	2c0f      	cmp	r4, #15
 801000c:	dc36      	bgt.n	801007c <_strtod_l+0x43c>
 801000e:	9b07      	ldr	r3, [sp, #28]
 8010010:	2b00      	cmp	r3, #0
 8010012:	f43f ae56 	beq.w	800fcc2 <_strtod_l+0x82>
 8010016:	dd22      	ble.n	801005e <_strtod_l+0x41e>
 8010018:	2b16      	cmp	r3, #22
 801001a:	dc09      	bgt.n	8010030 <_strtod_l+0x3f0>
 801001c:	496c      	ldr	r1, [pc, #432]	; (80101d0 <_strtod_l+0x590>)
 801001e:	4642      	mov	r2, r8
 8010020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010024:	464b      	mov	r3, r9
 8010026:	e9d1 0100 	ldrd	r0, r1, [r1]
 801002a:	f7f0 fa77 	bl	800051c <__aeabi_dmul>
 801002e:	e7c3      	b.n	800ffb8 <_strtod_l+0x378>
 8010030:	9a07      	ldr	r2, [sp, #28]
 8010032:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8010036:	4293      	cmp	r3, r2
 8010038:	db20      	blt.n	801007c <_strtod_l+0x43c>
 801003a:	4d65      	ldr	r5, [pc, #404]	; (80101d0 <_strtod_l+0x590>)
 801003c:	f1c4 040f 	rsb	r4, r4, #15
 8010040:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8010044:	4642      	mov	r2, r8
 8010046:	e9d1 0100 	ldrd	r0, r1, [r1]
 801004a:	464b      	mov	r3, r9
 801004c:	f7f0 fa66 	bl	800051c <__aeabi_dmul>
 8010050:	9b07      	ldr	r3, [sp, #28]
 8010052:	1b1c      	subs	r4, r3, r4
 8010054:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8010058:	e9d5 2300 	ldrd	r2, r3, [r5]
 801005c:	e7e5      	b.n	801002a <_strtod_l+0x3ea>
 801005e:	9b07      	ldr	r3, [sp, #28]
 8010060:	3316      	adds	r3, #22
 8010062:	db0b      	blt.n	801007c <_strtod_l+0x43c>
 8010064:	9b04      	ldr	r3, [sp, #16]
 8010066:	4640      	mov	r0, r8
 8010068:	1b5d      	subs	r5, r3, r5
 801006a:	4b59      	ldr	r3, [pc, #356]	; (80101d0 <_strtod_l+0x590>)
 801006c:	4649      	mov	r1, r9
 801006e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010072:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010076:	f7f0 fb7b 	bl	8000770 <__aeabi_ddiv>
 801007a:	e79d      	b.n	800ffb8 <_strtod_l+0x378>
 801007c:	9b07      	ldr	r3, [sp, #28]
 801007e:	1ba6      	subs	r6, r4, r6
 8010080:	441e      	add	r6, r3
 8010082:	2e00      	cmp	r6, #0
 8010084:	dd74      	ble.n	8010170 <_strtod_l+0x530>
 8010086:	f016 030f 	ands.w	r3, r6, #15
 801008a:	d00a      	beq.n	80100a2 <_strtod_l+0x462>
 801008c:	4950      	ldr	r1, [pc, #320]	; (80101d0 <_strtod_l+0x590>)
 801008e:	4642      	mov	r2, r8
 8010090:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010098:	464b      	mov	r3, r9
 801009a:	f7f0 fa3f 	bl	800051c <__aeabi_dmul>
 801009e:	4680      	mov	r8, r0
 80100a0:	4689      	mov	r9, r1
 80100a2:	f036 060f 	bics.w	r6, r6, #15
 80100a6:	d052      	beq.n	801014e <_strtod_l+0x50e>
 80100a8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80100ac:	dd27      	ble.n	80100fe <_strtod_l+0x4be>
 80100ae:	f04f 0b00 	mov.w	fp, #0
 80100b2:	f8cd b010 	str.w	fp, [sp, #16]
 80100b6:	f8cd b020 	str.w	fp, [sp, #32]
 80100ba:	f8cd b018 	str.w	fp, [sp, #24]
 80100be:	2322      	movs	r3, #34	; 0x22
 80100c0:	f04f 0800 	mov.w	r8, #0
 80100c4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80101c8 <_strtod_l+0x588>
 80100c8:	f8ca 3000 	str.w	r3, [sl]
 80100cc:	9b08      	ldr	r3, [sp, #32]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f43f adf7 	beq.w	800fcc2 <_strtod_l+0x82>
 80100d4:	4650      	mov	r0, sl
 80100d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80100d8:	f001 fe80 	bl	8011ddc <_Bfree>
 80100dc:	4650      	mov	r0, sl
 80100de:	9906      	ldr	r1, [sp, #24]
 80100e0:	f001 fe7c 	bl	8011ddc <_Bfree>
 80100e4:	4650      	mov	r0, sl
 80100e6:	9904      	ldr	r1, [sp, #16]
 80100e8:	f001 fe78 	bl	8011ddc <_Bfree>
 80100ec:	4650      	mov	r0, sl
 80100ee:	9908      	ldr	r1, [sp, #32]
 80100f0:	f001 fe74 	bl	8011ddc <_Bfree>
 80100f4:	4659      	mov	r1, fp
 80100f6:	4650      	mov	r0, sl
 80100f8:	f001 fe70 	bl	8011ddc <_Bfree>
 80100fc:	e5e1      	b.n	800fcc2 <_strtod_l+0x82>
 80100fe:	4b35      	ldr	r3, [pc, #212]	; (80101d4 <_strtod_l+0x594>)
 8010100:	4640      	mov	r0, r8
 8010102:	9305      	str	r3, [sp, #20]
 8010104:	2300      	movs	r3, #0
 8010106:	4649      	mov	r1, r9
 8010108:	461f      	mov	r7, r3
 801010a:	1136      	asrs	r6, r6, #4
 801010c:	2e01      	cmp	r6, #1
 801010e:	dc21      	bgt.n	8010154 <_strtod_l+0x514>
 8010110:	b10b      	cbz	r3, 8010116 <_strtod_l+0x4d6>
 8010112:	4680      	mov	r8, r0
 8010114:	4689      	mov	r9, r1
 8010116:	4b2f      	ldr	r3, [pc, #188]	; (80101d4 <_strtod_l+0x594>)
 8010118:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801011c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010120:	4642      	mov	r2, r8
 8010122:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010126:	464b      	mov	r3, r9
 8010128:	f7f0 f9f8 	bl	800051c <__aeabi_dmul>
 801012c:	4b26      	ldr	r3, [pc, #152]	; (80101c8 <_strtod_l+0x588>)
 801012e:	460a      	mov	r2, r1
 8010130:	400b      	ands	r3, r1
 8010132:	4929      	ldr	r1, [pc, #164]	; (80101d8 <_strtod_l+0x598>)
 8010134:	4680      	mov	r8, r0
 8010136:	428b      	cmp	r3, r1
 8010138:	d8b9      	bhi.n	80100ae <_strtod_l+0x46e>
 801013a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801013e:	428b      	cmp	r3, r1
 8010140:	bf86      	itte	hi
 8010142:	f04f 38ff 	movhi.w	r8, #4294967295
 8010146:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80101dc <_strtod_l+0x59c>
 801014a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801014e:	2300      	movs	r3, #0
 8010150:	9305      	str	r3, [sp, #20]
 8010152:	e07f      	b.n	8010254 <_strtod_l+0x614>
 8010154:	07f2      	lsls	r2, r6, #31
 8010156:	d505      	bpl.n	8010164 <_strtod_l+0x524>
 8010158:	9b05      	ldr	r3, [sp, #20]
 801015a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015e:	f7f0 f9dd 	bl	800051c <__aeabi_dmul>
 8010162:	2301      	movs	r3, #1
 8010164:	9a05      	ldr	r2, [sp, #20]
 8010166:	3701      	adds	r7, #1
 8010168:	3208      	adds	r2, #8
 801016a:	1076      	asrs	r6, r6, #1
 801016c:	9205      	str	r2, [sp, #20]
 801016e:	e7cd      	b.n	801010c <_strtod_l+0x4cc>
 8010170:	d0ed      	beq.n	801014e <_strtod_l+0x50e>
 8010172:	4276      	negs	r6, r6
 8010174:	f016 020f 	ands.w	r2, r6, #15
 8010178:	d00a      	beq.n	8010190 <_strtod_l+0x550>
 801017a:	4b15      	ldr	r3, [pc, #84]	; (80101d0 <_strtod_l+0x590>)
 801017c:	4640      	mov	r0, r8
 801017e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010182:	4649      	mov	r1, r9
 8010184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010188:	f7f0 faf2 	bl	8000770 <__aeabi_ddiv>
 801018c:	4680      	mov	r8, r0
 801018e:	4689      	mov	r9, r1
 8010190:	1136      	asrs	r6, r6, #4
 8010192:	d0dc      	beq.n	801014e <_strtod_l+0x50e>
 8010194:	2e1f      	cmp	r6, #31
 8010196:	dd23      	ble.n	80101e0 <_strtod_l+0x5a0>
 8010198:	f04f 0b00 	mov.w	fp, #0
 801019c:	f8cd b010 	str.w	fp, [sp, #16]
 80101a0:	f8cd b020 	str.w	fp, [sp, #32]
 80101a4:	f8cd b018 	str.w	fp, [sp, #24]
 80101a8:	2322      	movs	r3, #34	; 0x22
 80101aa:	f04f 0800 	mov.w	r8, #0
 80101ae:	f04f 0900 	mov.w	r9, #0
 80101b2:	f8ca 3000 	str.w	r3, [sl]
 80101b6:	e789      	b.n	80100cc <_strtod_l+0x48c>
 80101b8:	08013a8d 	.word	0x08013a8d
 80101bc:	08013ac8 	.word	0x08013ac8
 80101c0:	08013a85 	.word	0x08013a85
 80101c4:	08013bbb 	.word	0x08013bbb
 80101c8:	7ff00000 	.word	0x7ff00000
 80101cc:	08013bb7 	.word	0x08013bb7
 80101d0:	08013d30 	.word	0x08013d30
 80101d4:	08013d08 	.word	0x08013d08
 80101d8:	7ca00000 	.word	0x7ca00000
 80101dc:	7fefffff 	.word	0x7fefffff
 80101e0:	f016 0310 	ands.w	r3, r6, #16
 80101e4:	bf18      	it	ne
 80101e6:	236a      	movne	r3, #106	; 0x6a
 80101e8:	4640      	mov	r0, r8
 80101ea:	9305      	str	r3, [sp, #20]
 80101ec:	4649      	mov	r1, r9
 80101ee:	2300      	movs	r3, #0
 80101f0:	4fb0      	ldr	r7, [pc, #704]	; (80104b4 <_strtod_l+0x874>)
 80101f2:	07f2      	lsls	r2, r6, #31
 80101f4:	d504      	bpl.n	8010200 <_strtod_l+0x5c0>
 80101f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101fa:	f7f0 f98f 	bl	800051c <__aeabi_dmul>
 80101fe:	2301      	movs	r3, #1
 8010200:	1076      	asrs	r6, r6, #1
 8010202:	f107 0708 	add.w	r7, r7, #8
 8010206:	d1f4      	bne.n	80101f2 <_strtod_l+0x5b2>
 8010208:	b10b      	cbz	r3, 801020e <_strtod_l+0x5ce>
 801020a:	4680      	mov	r8, r0
 801020c:	4689      	mov	r9, r1
 801020e:	9b05      	ldr	r3, [sp, #20]
 8010210:	b1c3      	cbz	r3, 8010244 <_strtod_l+0x604>
 8010212:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010216:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801021a:	2b00      	cmp	r3, #0
 801021c:	4649      	mov	r1, r9
 801021e:	dd11      	ble.n	8010244 <_strtod_l+0x604>
 8010220:	2b1f      	cmp	r3, #31
 8010222:	f340 8127 	ble.w	8010474 <_strtod_l+0x834>
 8010226:	2b34      	cmp	r3, #52	; 0x34
 8010228:	bfd8      	it	le
 801022a:	f04f 33ff 	movle.w	r3, #4294967295
 801022e:	f04f 0800 	mov.w	r8, #0
 8010232:	bfcf      	iteee	gt
 8010234:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010238:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801023c:	fa03 f202 	lslle.w	r2, r3, r2
 8010240:	ea02 0901 	andle.w	r9, r2, r1
 8010244:	2200      	movs	r2, #0
 8010246:	2300      	movs	r3, #0
 8010248:	4640      	mov	r0, r8
 801024a:	4649      	mov	r1, r9
 801024c:	f7f0 fbce 	bl	80009ec <__aeabi_dcmpeq>
 8010250:	2800      	cmp	r0, #0
 8010252:	d1a1      	bne.n	8010198 <_strtod_l+0x558>
 8010254:	9b06      	ldr	r3, [sp, #24]
 8010256:	465a      	mov	r2, fp
 8010258:	9300      	str	r3, [sp, #0]
 801025a:	4650      	mov	r0, sl
 801025c:	4623      	mov	r3, r4
 801025e:	9908      	ldr	r1, [sp, #32]
 8010260:	f001 fe24 	bl	8011eac <__s2b>
 8010264:	9008      	str	r0, [sp, #32]
 8010266:	2800      	cmp	r0, #0
 8010268:	f43f af21 	beq.w	80100ae <_strtod_l+0x46e>
 801026c:	9b04      	ldr	r3, [sp, #16]
 801026e:	f04f 0b00 	mov.w	fp, #0
 8010272:	1b5d      	subs	r5, r3, r5
 8010274:	9b07      	ldr	r3, [sp, #28]
 8010276:	f8cd b010 	str.w	fp, [sp, #16]
 801027a:	2b00      	cmp	r3, #0
 801027c:	bfb4      	ite	lt
 801027e:	462b      	movlt	r3, r5
 8010280:	2300      	movge	r3, #0
 8010282:	930e      	str	r3, [sp, #56]	; 0x38
 8010284:	9b07      	ldr	r3, [sp, #28]
 8010286:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801028a:	9314      	str	r3, [sp, #80]	; 0x50
 801028c:	9b08      	ldr	r3, [sp, #32]
 801028e:	4650      	mov	r0, sl
 8010290:	6859      	ldr	r1, [r3, #4]
 8010292:	f001 fd63 	bl	8011d5c <_Balloc>
 8010296:	9006      	str	r0, [sp, #24]
 8010298:	2800      	cmp	r0, #0
 801029a:	f43f af10 	beq.w	80100be <_strtod_l+0x47e>
 801029e:	9b08      	ldr	r3, [sp, #32]
 80102a0:	300c      	adds	r0, #12
 80102a2:	691a      	ldr	r2, [r3, #16]
 80102a4:	f103 010c 	add.w	r1, r3, #12
 80102a8:	3202      	adds	r2, #2
 80102aa:	0092      	lsls	r2, r2, #2
 80102ac:	f7ff f806 	bl	800f2bc <memcpy>
 80102b0:	ab1c      	add	r3, sp, #112	; 0x70
 80102b2:	9301      	str	r3, [sp, #4]
 80102b4:	ab1b      	add	r3, sp, #108	; 0x6c
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	4642      	mov	r2, r8
 80102ba:	464b      	mov	r3, r9
 80102bc:	4650      	mov	r0, sl
 80102be:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80102c2:	f002 f935 	bl	8012530 <__d2b>
 80102c6:	901a      	str	r0, [sp, #104]	; 0x68
 80102c8:	2800      	cmp	r0, #0
 80102ca:	f43f aef8 	beq.w	80100be <_strtod_l+0x47e>
 80102ce:	2101      	movs	r1, #1
 80102d0:	4650      	mov	r0, sl
 80102d2:	f001 fe83 	bl	8011fdc <__i2b>
 80102d6:	4603      	mov	r3, r0
 80102d8:	9004      	str	r0, [sp, #16]
 80102da:	2800      	cmp	r0, #0
 80102dc:	f43f aeef 	beq.w	80100be <_strtod_l+0x47e>
 80102e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80102e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80102e4:	2d00      	cmp	r5, #0
 80102e6:	bfab      	itete	ge
 80102e8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80102ea:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80102ec:	18ee      	addge	r6, r5, r3
 80102ee:	1b5c      	sublt	r4, r3, r5
 80102f0:	9b05      	ldr	r3, [sp, #20]
 80102f2:	bfa8      	it	ge
 80102f4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80102f6:	eba5 0503 	sub.w	r5, r5, r3
 80102fa:	4415      	add	r5, r2
 80102fc:	4b6e      	ldr	r3, [pc, #440]	; (80104b8 <_strtod_l+0x878>)
 80102fe:	f105 35ff 	add.w	r5, r5, #4294967295
 8010302:	bfb8      	it	lt
 8010304:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8010306:	429d      	cmp	r5, r3
 8010308:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801030c:	f280 80c4 	bge.w	8010498 <_strtod_l+0x858>
 8010310:	1b5b      	subs	r3, r3, r5
 8010312:	2b1f      	cmp	r3, #31
 8010314:	f04f 0701 	mov.w	r7, #1
 8010318:	eba2 0203 	sub.w	r2, r2, r3
 801031c:	f300 80b1 	bgt.w	8010482 <_strtod_l+0x842>
 8010320:	2500      	movs	r5, #0
 8010322:	fa07 f303 	lsl.w	r3, r7, r3
 8010326:	930f      	str	r3, [sp, #60]	; 0x3c
 8010328:	18b7      	adds	r7, r6, r2
 801032a:	9b05      	ldr	r3, [sp, #20]
 801032c:	42be      	cmp	r6, r7
 801032e:	4414      	add	r4, r2
 8010330:	441c      	add	r4, r3
 8010332:	4633      	mov	r3, r6
 8010334:	bfa8      	it	ge
 8010336:	463b      	movge	r3, r7
 8010338:	42a3      	cmp	r3, r4
 801033a:	bfa8      	it	ge
 801033c:	4623      	movge	r3, r4
 801033e:	2b00      	cmp	r3, #0
 8010340:	bfc2      	ittt	gt
 8010342:	1aff      	subgt	r7, r7, r3
 8010344:	1ae4      	subgt	r4, r4, r3
 8010346:	1af6      	subgt	r6, r6, r3
 8010348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801034a:	2b00      	cmp	r3, #0
 801034c:	dd17      	ble.n	801037e <_strtod_l+0x73e>
 801034e:	461a      	mov	r2, r3
 8010350:	4650      	mov	r0, sl
 8010352:	9904      	ldr	r1, [sp, #16]
 8010354:	f001 ff00 	bl	8012158 <__pow5mult>
 8010358:	9004      	str	r0, [sp, #16]
 801035a:	2800      	cmp	r0, #0
 801035c:	f43f aeaf 	beq.w	80100be <_strtod_l+0x47e>
 8010360:	4601      	mov	r1, r0
 8010362:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010364:	4650      	mov	r0, sl
 8010366:	f001 fe4f 	bl	8012008 <__multiply>
 801036a:	9009      	str	r0, [sp, #36]	; 0x24
 801036c:	2800      	cmp	r0, #0
 801036e:	f43f aea6 	beq.w	80100be <_strtod_l+0x47e>
 8010372:	4650      	mov	r0, sl
 8010374:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010376:	f001 fd31 	bl	8011ddc <_Bfree>
 801037a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801037c:	931a      	str	r3, [sp, #104]	; 0x68
 801037e:	2f00      	cmp	r7, #0
 8010380:	f300 808e 	bgt.w	80104a0 <_strtod_l+0x860>
 8010384:	9b07      	ldr	r3, [sp, #28]
 8010386:	2b00      	cmp	r3, #0
 8010388:	dd08      	ble.n	801039c <_strtod_l+0x75c>
 801038a:	4650      	mov	r0, sl
 801038c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801038e:	9906      	ldr	r1, [sp, #24]
 8010390:	f001 fee2 	bl	8012158 <__pow5mult>
 8010394:	9006      	str	r0, [sp, #24]
 8010396:	2800      	cmp	r0, #0
 8010398:	f43f ae91 	beq.w	80100be <_strtod_l+0x47e>
 801039c:	2c00      	cmp	r4, #0
 801039e:	dd08      	ble.n	80103b2 <_strtod_l+0x772>
 80103a0:	4622      	mov	r2, r4
 80103a2:	4650      	mov	r0, sl
 80103a4:	9906      	ldr	r1, [sp, #24]
 80103a6:	f001 ff31 	bl	801220c <__lshift>
 80103aa:	9006      	str	r0, [sp, #24]
 80103ac:	2800      	cmp	r0, #0
 80103ae:	f43f ae86 	beq.w	80100be <_strtod_l+0x47e>
 80103b2:	2e00      	cmp	r6, #0
 80103b4:	dd08      	ble.n	80103c8 <_strtod_l+0x788>
 80103b6:	4632      	mov	r2, r6
 80103b8:	4650      	mov	r0, sl
 80103ba:	9904      	ldr	r1, [sp, #16]
 80103bc:	f001 ff26 	bl	801220c <__lshift>
 80103c0:	9004      	str	r0, [sp, #16]
 80103c2:	2800      	cmp	r0, #0
 80103c4:	f43f ae7b 	beq.w	80100be <_strtod_l+0x47e>
 80103c8:	4650      	mov	r0, sl
 80103ca:	9a06      	ldr	r2, [sp, #24]
 80103cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80103ce:	f001 ffa9 	bl	8012324 <__mdiff>
 80103d2:	4683      	mov	fp, r0
 80103d4:	2800      	cmp	r0, #0
 80103d6:	f43f ae72 	beq.w	80100be <_strtod_l+0x47e>
 80103da:	2400      	movs	r4, #0
 80103dc:	68c3      	ldr	r3, [r0, #12]
 80103de:	9904      	ldr	r1, [sp, #16]
 80103e0:	60c4      	str	r4, [r0, #12]
 80103e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80103e4:	f001 ff82 	bl	80122ec <__mcmp>
 80103e8:	42a0      	cmp	r0, r4
 80103ea:	da6b      	bge.n	80104c4 <_strtod_l+0x884>
 80103ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103ee:	ea53 0308 	orrs.w	r3, r3, r8
 80103f2:	f040 8091 	bne.w	8010518 <_strtod_l+0x8d8>
 80103f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f040 808c 	bne.w	8010518 <_strtod_l+0x8d8>
 8010400:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010404:	0d1b      	lsrs	r3, r3, #20
 8010406:	051b      	lsls	r3, r3, #20
 8010408:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801040c:	f240 8084 	bls.w	8010518 <_strtod_l+0x8d8>
 8010410:	f8db 3014 	ldr.w	r3, [fp, #20]
 8010414:	b91b      	cbnz	r3, 801041e <_strtod_l+0x7de>
 8010416:	f8db 3010 	ldr.w	r3, [fp, #16]
 801041a:	2b01      	cmp	r3, #1
 801041c:	dd7c      	ble.n	8010518 <_strtod_l+0x8d8>
 801041e:	4659      	mov	r1, fp
 8010420:	2201      	movs	r2, #1
 8010422:	4650      	mov	r0, sl
 8010424:	f001 fef2 	bl	801220c <__lshift>
 8010428:	9904      	ldr	r1, [sp, #16]
 801042a:	4683      	mov	fp, r0
 801042c:	f001 ff5e 	bl	80122ec <__mcmp>
 8010430:	2800      	cmp	r0, #0
 8010432:	dd71      	ble.n	8010518 <_strtod_l+0x8d8>
 8010434:	9905      	ldr	r1, [sp, #20]
 8010436:	464b      	mov	r3, r9
 8010438:	4a20      	ldr	r2, [pc, #128]	; (80104bc <_strtod_l+0x87c>)
 801043a:	2900      	cmp	r1, #0
 801043c:	f000 808c 	beq.w	8010558 <_strtod_l+0x918>
 8010440:	ea02 0109 	and.w	r1, r2, r9
 8010444:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010448:	f300 8086 	bgt.w	8010558 <_strtod_l+0x918>
 801044c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010450:	f77f aeaa 	ble.w	80101a8 <_strtod_l+0x568>
 8010454:	4640      	mov	r0, r8
 8010456:	4649      	mov	r1, r9
 8010458:	4b19      	ldr	r3, [pc, #100]	; (80104c0 <_strtod_l+0x880>)
 801045a:	2200      	movs	r2, #0
 801045c:	f7f0 f85e 	bl	800051c <__aeabi_dmul>
 8010460:	460b      	mov	r3, r1
 8010462:	4303      	orrs	r3, r0
 8010464:	bf08      	it	eq
 8010466:	2322      	moveq	r3, #34	; 0x22
 8010468:	4680      	mov	r8, r0
 801046a:	4689      	mov	r9, r1
 801046c:	bf08      	it	eq
 801046e:	f8ca 3000 	streq.w	r3, [sl]
 8010472:	e62f      	b.n	80100d4 <_strtod_l+0x494>
 8010474:	f04f 32ff 	mov.w	r2, #4294967295
 8010478:	fa02 f303 	lsl.w	r3, r2, r3
 801047c:	ea03 0808 	and.w	r8, r3, r8
 8010480:	e6e0      	b.n	8010244 <_strtod_l+0x604>
 8010482:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8010486:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 801048a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 801048e:	35e2      	adds	r5, #226	; 0xe2
 8010490:	fa07 f505 	lsl.w	r5, r7, r5
 8010494:	970f      	str	r7, [sp, #60]	; 0x3c
 8010496:	e747      	b.n	8010328 <_strtod_l+0x6e8>
 8010498:	2301      	movs	r3, #1
 801049a:	2500      	movs	r5, #0
 801049c:	930f      	str	r3, [sp, #60]	; 0x3c
 801049e:	e743      	b.n	8010328 <_strtod_l+0x6e8>
 80104a0:	463a      	mov	r2, r7
 80104a2:	4650      	mov	r0, sl
 80104a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80104a6:	f001 feb1 	bl	801220c <__lshift>
 80104aa:	901a      	str	r0, [sp, #104]	; 0x68
 80104ac:	2800      	cmp	r0, #0
 80104ae:	f47f af69 	bne.w	8010384 <_strtod_l+0x744>
 80104b2:	e604      	b.n	80100be <_strtod_l+0x47e>
 80104b4:	08013ae0 	.word	0x08013ae0
 80104b8:	fffffc02 	.word	0xfffffc02
 80104bc:	7ff00000 	.word	0x7ff00000
 80104c0:	39500000 	.word	0x39500000
 80104c4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80104c8:	d165      	bne.n	8010596 <_strtod_l+0x956>
 80104ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80104cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80104d0:	b35a      	cbz	r2, 801052a <_strtod_l+0x8ea>
 80104d2:	4a99      	ldr	r2, [pc, #612]	; (8010738 <_strtod_l+0xaf8>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d12b      	bne.n	8010530 <_strtod_l+0x8f0>
 80104d8:	9b05      	ldr	r3, [sp, #20]
 80104da:	4641      	mov	r1, r8
 80104dc:	b303      	cbz	r3, 8010520 <_strtod_l+0x8e0>
 80104de:	464a      	mov	r2, r9
 80104e0:	4b96      	ldr	r3, [pc, #600]	; (801073c <_strtod_l+0xafc>)
 80104e2:	4013      	ands	r3, r2
 80104e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80104e8:	f04f 32ff 	mov.w	r2, #4294967295
 80104ec:	d81b      	bhi.n	8010526 <_strtod_l+0x8e6>
 80104ee:	0d1b      	lsrs	r3, r3, #20
 80104f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80104f4:	fa02 f303 	lsl.w	r3, r2, r3
 80104f8:	4299      	cmp	r1, r3
 80104fa:	d119      	bne.n	8010530 <_strtod_l+0x8f0>
 80104fc:	4b90      	ldr	r3, [pc, #576]	; (8010740 <_strtod_l+0xb00>)
 80104fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010500:	429a      	cmp	r2, r3
 8010502:	d102      	bne.n	801050a <_strtod_l+0x8ca>
 8010504:	3101      	adds	r1, #1
 8010506:	f43f adda 	beq.w	80100be <_strtod_l+0x47e>
 801050a:	f04f 0800 	mov.w	r8, #0
 801050e:	4b8b      	ldr	r3, [pc, #556]	; (801073c <_strtod_l+0xafc>)
 8010510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010512:	401a      	ands	r2, r3
 8010514:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8010518:	9b05      	ldr	r3, [sp, #20]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d19a      	bne.n	8010454 <_strtod_l+0x814>
 801051e:	e5d9      	b.n	80100d4 <_strtod_l+0x494>
 8010520:	f04f 33ff 	mov.w	r3, #4294967295
 8010524:	e7e8      	b.n	80104f8 <_strtod_l+0x8b8>
 8010526:	4613      	mov	r3, r2
 8010528:	e7e6      	b.n	80104f8 <_strtod_l+0x8b8>
 801052a:	ea53 0308 	orrs.w	r3, r3, r8
 801052e:	d081      	beq.n	8010434 <_strtod_l+0x7f4>
 8010530:	b1e5      	cbz	r5, 801056c <_strtod_l+0x92c>
 8010532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010534:	421d      	tst	r5, r3
 8010536:	d0ef      	beq.n	8010518 <_strtod_l+0x8d8>
 8010538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801053a:	4640      	mov	r0, r8
 801053c:	4649      	mov	r1, r9
 801053e:	9a05      	ldr	r2, [sp, #20]
 8010540:	b1c3      	cbz	r3, 8010574 <_strtod_l+0x934>
 8010542:	f7ff fb59 	bl	800fbf8 <sulp>
 8010546:	4602      	mov	r2, r0
 8010548:	460b      	mov	r3, r1
 801054a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801054e:	f7ef fe2f 	bl	80001b0 <__adddf3>
 8010552:	4680      	mov	r8, r0
 8010554:	4689      	mov	r9, r1
 8010556:	e7df      	b.n	8010518 <_strtod_l+0x8d8>
 8010558:	4013      	ands	r3, r2
 801055a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801055e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010562:	f04f 38ff 	mov.w	r8, #4294967295
 8010566:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801056a:	e7d5      	b.n	8010518 <_strtod_l+0x8d8>
 801056c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801056e:	ea13 0f08 	tst.w	r3, r8
 8010572:	e7e0      	b.n	8010536 <_strtod_l+0x8f6>
 8010574:	f7ff fb40 	bl	800fbf8 <sulp>
 8010578:	4602      	mov	r2, r0
 801057a:	460b      	mov	r3, r1
 801057c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010580:	f7ef fe14 	bl	80001ac <__aeabi_dsub>
 8010584:	2200      	movs	r2, #0
 8010586:	2300      	movs	r3, #0
 8010588:	4680      	mov	r8, r0
 801058a:	4689      	mov	r9, r1
 801058c:	f7f0 fa2e 	bl	80009ec <__aeabi_dcmpeq>
 8010590:	2800      	cmp	r0, #0
 8010592:	d0c1      	beq.n	8010518 <_strtod_l+0x8d8>
 8010594:	e608      	b.n	80101a8 <_strtod_l+0x568>
 8010596:	4658      	mov	r0, fp
 8010598:	9904      	ldr	r1, [sp, #16]
 801059a:	f002 f825 	bl	80125e8 <__ratio>
 801059e:	2200      	movs	r2, #0
 80105a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80105a4:	4606      	mov	r6, r0
 80105a6:	460f      	mov	r7, r1
 80105a8:	f7f0 fa34 	bl	8000a14 <__aeabi_dcmple>
 80105ac:	2800      	cmp	r0, #0
 80105ae:	d070      	beq.n	8010692 <_strtod_l+0xa52>
 80105b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d042      	beq.n	801063c <_strtod_l+0x9fc>
 80105b6:	2600      	movs	r6, #0
 80105b8:	4f62      	ldr	r7, [pc, #392]	; (8010744 <_strtod_l+0xb04>)
 80105ba:	4d62      	ldr	r5, [pc, #392]	; (8010744 <_strtod_l+0xb04>)
 80105bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80105c2:	0d1b      	lsrs	r3, r3, #20
 80105c4:	051b      	lsls	r3, r3, #20
 80105c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80105c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80105ca:	4b5f      	ldr	r3, [pc, #380]	; (8010748 <_strtod_l+0xb08>)
 80105cc:	429a      	cmp	r2, r3
 80105ce:	f040 80c3 	bne.w	8010758 <_strtod_l+0xb18>
 80105d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105d4:	4640      	mov	r0, r8
 80105d6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80105da:	4649      	mov	r1, r9
 80105dc:	f001 ff2e 	bl	801243c <__ulp>
 80105e0:	4602      	mov	r2, r0
 80105e2:	460b      	mov	r3, r1
 80105e4:	4630      	mov	r0, r6
 80105e6:	4639      	mov	r1, r7
 80105e8:	f7ef ff98 	bl	800051c <__aeabi_dmul>
 80105ec:	4642      	mov	r2, r8
 80105ee:	464b      	mov	r3, r9
 80105f0:	f7ef fdde 	bl	80001b0 <__adddf3>
 80105f4:	460b      	mov	r3, r1
 80105f6:	4951      	ldr	r1, [pc, #324]	; (801073c <_strtod_l+0xafc>)
 80105f8:	4a54      	ldr	r2, [pc, #336]	; (801074c <_strtod_l+0xb0c>)
 80105fa:	4019      	ands	r1, r3
 80105fc:	4291      	cmp	r1, r2
 80105fe:	4680      	mov	r8, r0
 8010600:	d95d      	bls.n	80106be <_strtod_l+0xa7e>
 8010602:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010604:	4b4e      	ldr	r3, [pc, #312]	; (8010740 <_strtod_l+0xb00>)
 8010606:	429a      	cmp	r2, r3
 8010608:	d103      	bne.n	8010612 <_strtod_l+0x9d2>
 801060a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801060c:	3301      	adds	r3, #1
 801060e:	f43f ad56 	beq.w	80100be <_strtod_l+0x47e>
 8010612:	f04f 38ff 	mov.w	r8, #4294967295
 8010616:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8010740 <_strtod_l+0xb00>
 801061a:	4650      	mov	r0, sl
 801061c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801061e:	f001 fbdd 	bl	8011ddc <_Bfree>
 8010622:	4650      	mov	r0, sl
 8010624:	9906      	ldr	r1, [sp, #24]
 8010626:	f001 fbd9 	bl	8011ddc <_Bfree>
 801062a:	4650      	mov	r0, sl
 801062c:	9904      	ldr	r1, [sp, #16]
 801062e:	f001 fbd5 	bl	8011ddc <_Bfree>
 8010632:	4659      	mov	r1, fp
 8010634:	4650      	mov	r0, sl
 8010636:	f001 fbd1 	bl	8011ddc <_Bfree>
 801063a:	e627      	b.n	801028c <_strtod_l+0x64c>
 801063c:	f1b8 0f00 	cmp.w	r8, #0
 8010640:	d119      	bne.n	8010676 <_strtod_l+0xa36>
 8010642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010648:	b9e3      	cbnz	r3, 8010684 <_strtod_l+0xa44>
 801064a:	2200      	movs	r2, #0
 801064c:	4630      	mov	r0, r6
 801064e:	4639      	mov	r1, r7
 8010650:	4b3c      	ldr	r3, [pc, #240]	; (8010744 <_strtod_l+0xb04>)
 8010652:	f7f0 f9d5 	bl	8000a00 <__aeabi_dcmplt>
 8010656:	b9c8      	cbnz	r0, 801068c <_strtod_l+0xa4c>
 8010658:	2200      	movs	r2, #0
 801065a:	4630      	mov	r0, r6
 801065c:	4639      	mov	r1, r7
 801065e:	4b3c      	ldr	r3, [pc, #240]	; (8010750 <_strtod_l+0xb10>)
 8010660:	f7ef ff5c 	bl	800051c <__aeabi_dmul>
 8010664:	4604      	mov	r4, r0
 8010666:	460d      	mov	r5, r1
 8010668:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801066c:	9416      	str	r4, [sp, #88]	; 0x58
 801066e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010670:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8010674:	e7a2      	b.n	80105bc <_strtod_l+0x97c>
 8010676:	f1b8 0f01 	cmp.w	r8, #1
 801067a:	d103      	bne.n	8010684 <_strtod_l+0xa44>
 801067c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801067e:	2b00      	cmp	r3, #0
 8010680:	f43f ad92 	beq.w	80101a8 <_strtod_l+0x568>
 8010684:	2600      	movs	r6, #0
 8010686:	2400      	movs	r4, #0
 8010688:	4f32      	ldr	r7, [pc, #200]	; (8010754 <_strtod_l+0xb14>)
 801068a:	e796      	b.n	80105ba <_strtod_l+0x97a>
 801068c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801068e:	4d30      	ldr	r5, [pc, #192]	; (8010750 <_strtod_l+0xb10>)
 8010690:	e7ea      	b.n	8010668 <_strtod_l+0xa28>
 8010692:	4b2f      	ldr	r3, [pc, #188]	; (8010750 <_strtod_l+0xb10>)
 8010694:	2200      	movs	r2, #0
 8010696:	4630      	mov	r0, r6
 8010698:	4639      	mov	r1, r7
 801069a:	f7ef ff3f 	bl	800051c <__aeabi_dmul>
 801069e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106a0:	4604      	mov	r4, r0
 80106a2:	460d      	mov	r5, r1
 80106a4:	b933      	cbnz	r3, 80106b4 <_strtod_l+0xa74>
 80106a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80106aa:	9010      	str	r0, [sp, #64]	; 0x40
 80106ac:	9311      	str	r3, [sp, #68]	; 0x44
 80106ae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80106b2:	e783      	b.n	80105bc <_strtod_l+0x97c>
 80106b4:	4602      	mov	r2, r0
 80106b6:	460b      	mov	r3, r1
 80106b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80106bc:	e7f7      	b.n	80106ae <_strtod_l+0xa6e>
 80106be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80106c2:	9b05      	ldr	r3, [sp, #20]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d1a8      	bne.n	801061a <_strtod_l+0x9da>
 80106c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80106cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80106ce:	0d1b      	lsrs	r3, r3, #20
 80106d0:	051b      	lsls	r3, r3, #20
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d1a1      	bne.n	801061a <_strtod_l+0x9da>
 80106d6:	4620      	mov	r0, r4
 80106d8:	4629      	mov	r1, r5
 80106da:	f7f0 fd73 	bl	80011c4 <__aeabi_d2lz>
 80106de:	f7ef feef 	bl	80004c0 <__aeabi_l2d>
 80106e2:	4602      	mov	r2, r0
 80106e4:	460b      	mov	r3, r1
 80106e6:	4620      	mov	r0, r4
 80106e8:	4629      	mov	r1, r5
 80106ea:	f7ef fd5f 	bl	80001ac <__aeabi_dsub>
 80106ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80106f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80106f4:	ea43 0308 	orr.w	r3, r3, r8
 80106f8:	4313      	orrs	r3, r2
 80106fa:	4604      	mov	r4, r0
 80106fc:	460d      	mov	r5, r1
 80106fe:	d066      	beq.n	80107ce <_strtod_l+0xb8e>
 8010700:	a309      	add	r3, pc, #36	; (adr r3, 8010728 <_strtod_l+0xae8>)
 8010702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010706:	f7f0 f97b 	bl	8000a00 <__aeabi_dcmplt>
 801070a:	2800      	cmp	r0, #0
 801070c:	f47f ace2 	bne.w	80100d4 <_strtod_l+0x494>
 8010710:	a307      	add	r3, pc, #28	; (adr r3, 8010730 <_strtod_l+0xaf0>)
 8010712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010716:	4620      	mov	r0, r4
 8010718:	4629      	mov	r1, r5
 801071a:	f7f0 f98f 	bl	8000a3c <__aeabi_dcmpgt>
 801071e:	2800      	cmp	r0, #0
 8010720:	f43f af7b 	beq.w	801061a <_strtod_l+0x9da>
 8010724:	e4d6      	b.n	80100d4 <_strtod_l+0x494>
 8010726:	bf00      	nop
 8010728:	94a03595 	.word	0x94a03595
 801072c:	3fdfffff 	.word	0x3fdfffff
 8010730:	35afe535 	.word	0x35afe535
 8010734:	3fe00000 	.word	0x3fe00000
 8010738:	000fffff 	.word	0x000fffff
 801073c:	7ff00000 	.word	0x7ff00000
 8010740:	7fefffff 	.word	0x7fefffff
 8010744:	3ff00000 	.word	0x3ff00000
 8010748:	7fe00000 	.word	0x7fe00000
 801074c:	7c9fffff 	.word	0x7c9fffff
 8010750:	3fe00000 	.word	0x3fe00000
 8010754:	bff00000 	.word	0xbff00000
 8010758:	9b05      	ldr	r3, [sp, #20]
 801075a:	b313      	cbz	r3, 80107a2 <_strtod_l+0xb62>
 801075c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801075e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010762:	d81e      	bhi.n	80107a2 <_strtod_l+0xb62>
 8010764:	a326      	add	r3, pc, #152	; (adr r3, 8010800 <_strtod_l+0xbc0>)
 8010766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076a:	4620      	mov	r0, r4
 801076c:	4629      	mov	r1, r5
 801076e:	f7f0 f951 	bl	8000a14 <__aeabi_dcmple>
 8010772:	b190      	cbz	r0, 801079a <_strtod_l+0xb5a>
 8010774:	4629      	mov	r1, r5
 8010776:	4620      	mov	r0, r4
 8010778:	f7f0 f9a8 	bl	8000acc <__aeabi_d2uiz>
 801077c:	2801      	cmp	r0, #1
 801077e:	bf38      	it	cc
 8010780:	2001      	movcc	r0, #1
 8010782:	f7ef fe51 	bl	8000428 <__aeabi_ui2d>
 8010786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010788:	4604      	mov	r4, r0
 801078a:	460d      	mov	r5, r1
 801078c:	b9d3      	cbnz	r3, 80107c4 <_strtod_l+0xb84>
 801078e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010792:	9012      	str	r0, [sp, #72]	; 0x48
 8010794:	9313      	str	r3, [sp, #76]	; 0x4c
 8010796:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801079a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801079c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80107a0:	1a9f      	subs	r7, r3, r2
 80107a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80107a6:	f001 fe49 	bl	801243c <__ulp>
 80107aa:	4602      	mov	r2, r0
 80107ac:	460b      	mov	r3, r1
 80107ae:	4630      	mov	r0, r6
 80107b0:	4639      	mov	r1, r7
 80107b2:	f7ef feb3 	bl	800051c <__aeabi_dmul>
 80107b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80107ba:	f7ef fcf9 	bl	80001b0 <__adddf3>
 80107be:	4680      	mov	r8, r0
 80107c0:	4689      	mov	r9, r1
 80107c2:	e77e      	b.n	80106c2 <_strtod_l+0xa82>
 80107c4:	4602      	mov	r2, r0
 80107c6:	460b      	mov	r3, r1
 80107c8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80107cc:	e7e3      	b.n	8010796 <_strtod_l+0xb56>
 80107ce:	a30e      	add	r3, pc, #56	; (adr r3, 8010808 <_strtod_l+0xbc8>)
 80107d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d4:	f7f0 f914 	bl	8000a00 <__aeabi_dcmplt>
 80107d8:	e7a1      	b.n	801071e <_strtod_l+0xade>
 80107da:	2300      	movs	r3, #0
 80107dc:	930a      	str	r3, [sp, #40]	; 0x28
 80107de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80107e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80107e2:	6013      	str	r3, [r2, #0]
 80107e4:	f7ff ba71 	b.w	800fcca <_strtod_l+0x8a>
 80107e8:	2a65      	cmp	r2, #101	; 0x65
 80107ea:	f43f ab63 	beq.w	800feb4 <_strtod_l+0x274>
 80107ee:	2a45      	cmp	r2, #69	; 0x45
 80107f0:	f43f ab60 	beq.w	800feb4 <_strtod_l+0x274>
 80107f4:	2301      	movs	r3, #1
 80107f6:	f7ff bb95 	b.w	800ff24 <_strtod_l+0x2e4>
 80107fa:	bf00      	nop
 80107fc:	f3af 8000 	nop.w
 8010800:	ffc00000 	.word	0xffc00000
 8010804:	41dfffff 	.word	0x41dfffff
 8010808:	94a03595 	.word	0x94a03595
 801080c:	3fcfffff 	.word	0x3fcfffff

08010810 <strtod>:
 8010810:	460a      	mov	r2, r1
 8010812:	4601      	mov	r1, r0
 8010814:	4802      	ldr	r0, [pc, #8]	; (8010820 <strtod+0x10>)
 8010816:	4b03      	ldr	r3, [pc, #12]	; (8010824 <strtod+0x14>)
 8010818:	6800      	ldr	r0, [r0, #0]
 801081a:	f7ff ba11 	b.w	800fc40 <_strtod_l>
 801081e:	bf00      	nop
 8010820:	20000938 	.word	0x20000938
 8010824:	200009a0 	.word	0x200009a0

08010828 <strtok>:
 8010828:	4b16      	ldr	r3, [pc, #88]	; (8010884 <strtok+0x5c>)
 801082a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801082e:	681f      	ldr	r7, [r3, #0]
 8010830:	4605      	mov	r5, r0
 8010832:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8010834:	460e      	mov	r6, r1
 8010836:	b9ec      	cbnz	r4, 8010874 <strtok+0x4c>
 8010838:	2050      	movs	r0, #80	; 0x50
 801083a:	f001 fa67 	bl	8011d0c <malloc>
 801083e:	4602      	mov	r2, r0
 8010840:	65b8      	str	r0, [r7, #88]	; 0x58
 8010842:	b920      	cbnz	r0, 801084e <strtok+0x26>
 8010844:	2157      	movs	r1, #87	; 0x57
 8010846:	4b10      	ldr	r3, [pc, #64]	; (8010888 <strtok+0x60>)
 8010848:	4810      	ldr	r0, [pc, #64]	; (801088c <strtok+0x64>)
 801084a:	f000 f849 	bl	80108e0 <__assert_func>
 801084e:	e9c0 4400 	strd	r4, r4, [r0]
 8010852:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010856:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801085a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801085e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010862:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010866:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801086a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801086e:	6184      	str	r4, [r0, #24]
 8010870:	7704      	strb	r4, [r0, #28]
 8010872:	6244      	str	r4, [r0, #36]	; 0x24
 8010874:	4631      	mov	r1, r6
 8010876:	4628      	mov	r0, r5
 8010878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801087a:	2301      	movs	r3, #1
 801087c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010880:	f000 b806 	b.w	8010890 <__strtok_r>
 8010884:	20000938 	.word	0x20000938
 8010888:	08013b08 	.word	0x08013b08
 801088c:	08013b1f 	.word	0x08013b1f

08010890 <__strtok_r>:
 8010890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010892:	b908      	cbnz	r0, 8010898 <__strtok_r+0x8>
 8010894:	6810      	ldr	r0, [r2, #0]
 8010896:	b188      	cbz	r0, 80108bc <__strtok_r+0x2c>
 8010898:	4604      	mov	r4, r0
 801089a:	460f      	mov	r7, r1
 801089c:	4620      	mov	r0, r4
 801089e:	f814 5b01 	ldrb.w	r5, [r4], #1
 80108a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80108a6:	b91e      	cbnz	r6, 80108b0 <__strtok_r+0x20>
 80108a8:	b965      	cbnz	r5, 80108c4 <__strtok_r+0x34>
 80108aa:	4628      	mov	r0, r5
 80108ac:	6015      	str	r5, [r2, #0]
 80108ae:	e005      	b.n	80108bc <__strtok_r+0x2c>
 80108b0:	42b5      	cmp	r5, r6
 80108b2:	d1f6      	bne.n	80108a2 <__strtok_r+0x12>
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d1f0      	bne.n	801089a <__strtok_r+0xa>
 80108b8:	6014      	str	r4, [r2, #0]
 80108ba:	7003      	strb	r3, [r0, #0]
 80108bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108be:	461c      	mov	r4, r3
 80108c0:	e00c      	b.n	80108dc <__strtok_r+0x4c>
 80108c2:	b915      	cbnz	r5, 80108ca <__strtok_r+0x3a>
 80108c4:	460e      	mov	r6, r1
 80108c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80108ca:	f816 5b01 	ldrb.w	r5, [r6], #1
 80108ce:	42ab      	cmp	r3, r5
 80108d0:	d1f7      	bne.n	80108c2 <__strtok_r+0x32>
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d0f3      	beq.n	80108be <__strtok_r+0x2e>
 80108d6:	2300      	movs	r3, #0
 80108d8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80108dc:	6014      	str	r4, [r2, #0]
 80108de:	e7ed      	b.n	80108bc <__strtok_r+0x2c>

080108e0 <__assert_func>:
 80108e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108e2:	4614      	mov	r4, r2
 80108e4:	461a      	mov	r2, r3
 80108e6:	4b09      	ldr	r3, [pc, #36]	; (801090c <__assert_func+0x2c>)
 80108e8:	4605      	mov	r5, r0
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	68d8      	ldr	r0, [r3, #12]
 80108ee:	b14c      	cbz	r4, 8010904 <__assert_func+0x24>
 80108f0:	4b07      	ldr	r3, [pc, #28]	; (8010910 <__assert_func+0x30>)
 80108f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108f6:	9100      	str	r1, [sp, #0]
 80108f8:	462b      	mov	r3, r5
 80108fa:	4906      	ldr	r1, [pc, #24]	; (8010914 <__assert_func+0x34>)
 80108fc:	f000 fe8a 	bl	8011614 <fiprintf>
 8010900:	f002 fb80 	bl	8013004 <abort>
 8010904:	4b04      	ldr	r3, [pc, #16]	; (8010918 <__assert_func+0x38>)
 8010906:	461c      	mov	r4, r3
 8010908:	e7f3      	b.n	80108f2 <__assert_func+0x12>
 801090a:	bf00      	nop
 801090c:	20000938 	.word	0x20000938
 8010910:	08013b7c 	.word	0x08013b7c
 8010914:	08013b89 	.word	0x08013b89
 8010918:	08013bb7 	.word	0x08013bb7

0801091c <quorem>:
 801091c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010920:	6903      	ldr	r3, [r0, #16]
 8010922:	690c      	ldr	r4, [r1, #16]
 8010924:	4607      	mov	r7, r0
 8010926:	42a3      	cmp	r3, r4
 8010928:	f2c0 8082 	blt.w	8010a30 <quorem+0x114>
 801092c:	3c01      	subs	r4, #1
 801092e:	f100 0514 	add.w	r5, r0, #20
 8010932:	f101 0814 	add.w	r8, r1, #20
 8010936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801093a:	9301      	str	r3, [sp, #4]
 801093c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010944:	3301      	adds	r3, #1
 8010946:	429a      	cmp	r2, r3
 8010948:	fbb2 f6f3 	udiv	r6, r2, r3
 801094c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010950:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010954:	d331      	bcc.n	80109ba <quorem+0x9e>
 8010956:	f04f 0e00 	mov.w	lr, #0
 801095a:	4640      	mov	r0, r8
 801095c:	46ac      	mov	ip, r5
 801095e:	46f2      	mov	sl, lr
 8010960:	f850 2b04 	ldr.w	r2, [r0], #4
 8010964:	b293      	uxth	r3, r2
 8010966:	fb06 e303 	mla	r3, r6, r3, lr
 801096a:	0c12      	lsrs	r2, r2, #16
 801096c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010970:	b29b      	uxth	r3, r3
 8010972:	fb06 e202 	mla	r2, r6, r2, lr
 8010976:	ebaa 0303 	sub.w	r3, sl, r3
 801097a:	f8dc a000 	ldr.w	sl, [ip]
 801097e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010982:	fa1f fa8a 	uxth.w	sl, sl
 8010986:	4453      	add	r3, sl
 8010988:	f8dc a000 	ldr.w	sl, [ip]
 801098c:	b292      	uxth	r2, r2
 801098e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010992:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010996:	b29b      	uxth	r3, r3
 8010998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801099c:	4581      	cmp	r9, r0
 801099e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80109a2:	f84c 3b04 	str.w	r3, [ip], #4
 80109a6:	d2db      	bcs.n	8010960 <quorem+0x44>
 80109a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80109ac:	b92b      	cbnz	r3, 80109ba <quorem+0x9e>
 80109ae:	9b01      	ldr	r3, [sp, #4]
 80109b0:	3b04      	subs	r3, #4
 80109b2:	429d      	cmp	r5, r3
 80109b4:	461a      	mov	r2, r3
 80109b6:	d32f      	bcc.n	8010a18 <quorem+0xfc>
 80109b8:	613c      	str	r4, [r7, #16]
 80109ba:	4638      	mov	r0, r7
 80109bc:	f001 fc96 	bl	80122ec <__mcmp>
 80109c0:	2800      	cmp	r0, #0
 80109c2:	db25      	blt.n	8010a10 <quorem+0xf4>
 80109c4:	4628      	mov	r0, r5
 80109c6:	f04f 0c00 	mov.w	ip, #0
 80109ca:	3601      	adds	r6, #1
 80109cc:	f858 1b04 	ldr.w	r1, [r8], #4
 80109d0:	f8d0 e000 	ldr.w	lr, [r0]
 80109d4:	b28b      	uxth	r3, r1
 80109d6:	ebac 0303 	sub.w	r3, ip, r3
 80109da:	fa1f f28e 	uxth.w	r2, lr
 80109de:	4413      	add	r3, r2
 80109e0:	0c0a      	lsrs	r2, r1, #16
 80109e2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80109e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109f0:	45c1      	cmp	r9, r8
 80109f2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80109f6:	f840 3b04 	str.w	r3, [r0], #4
 80109fa:	d2e7      	bcs.n	80109cc <quorem+0xb0>
 80109fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a04:	b922      	cbnz	r2, 8010a10 <quorem+0xf4>
 8010a06:	3b04      	subs	r3, #4
 8010a08:	429d      	cmp	r5, r3
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	d30a      	bcc.n	8010a24 <quorem+0x108>
 8010a0e:	613c      	str	r4, [r7, #16]
 8010a10:	4630      	mov	r0, r6
 8010a12:	b003      	add	sp, #12
 8010a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a18:	6812      	ldr	r2, [r2, #0]
 8010a1a:	3b04      	subs	r3, #4
 8010a1c:	2a00      	cmp	r2, #0
 8010a1e:	d1cb      	bne.n	80109b8 <quorem+0x9c>
 8010a20:	3c01      	subs	r4, #1
 8010a22:	e7c6      	b.n	80109b2 <quorem+0x96>
 8010a24:	6812      	ldr	r2, [r2, #0]
 8010a26:	3b04      	subs	r3, #4
 8010a28:	2a00      	cmp	r2, #0
 8010a2a:	d1f0      	bne.n	8010a0e <quorem+0xf2>
 8010a2c:	3c01      	subs	r4, #1
 8010a2e:	e7eb      	b.n	8010a08 <quorem+0xec>
 8010a30:	2000      	movs	r0, #0
 8010a32:	e7ee      	b.n	8010a12 <quorem+0xf6>
 8010a34:	0000      	movs	r0, r0
	...

08010a38 <_dtoa_r>:
 8010a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a3c:	4616      	mov	r6, r2
 8010a3e:	461f      	mov	r7, r3
 8010a40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010a42:	b099      	sub	sp, #100	; 0x64
 8010a44:	4605      	mov	r5, r0
 8010a46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010a4a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8010a4e:	b974      	cbnz	r4, 8010a6e <_dtoa_r+0x36>
 8010a50:	2010      	movs	r0, #16
 8010a52:	f001 f95b 	bl	8011d0c <malloc>
 8010a56:	4602      	mov	r2, r0
 8010a58:	6268      	str	r0, [r5, #36]	; 0x24
 8010a5a:	b920      	cbnz	r0, 8010a66 <_dtoa_r+0x2e>
 8010a5c:	21ea      	movs	r1, #234	; 0xea
 8010a5e:	4ba8      	ldr	r3, [pc, #672]	; (8010d00 <_dtoa_r+0x2c8>)
 8010a60:	48a8      	ldr	r0, [pc, #672]	; (8010d04 <_dtoa_r+0x2cc>)
 8010a62:	f7ff ff3d 	bl	80108e0 <__assert_func>
 8010a66:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a6a:	6004      	str	r4, [r0, #0]
 8010a6c:	60c4      	str	r4, [r0, #12]
 8010a6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010a70:	6819      	ldr	r1, [r3, #0]
 8010a72:	b151      	cbz	r1, 8010a8a <_dtoa_r+0x52>
 8010a74:	685a      	ldr	r2, [r3, #4]
 8010a76:	2301      	movs	r3, #1
 8010a78:	4093      	lsls	r3, r2
 8010a7a:	604a      	str	r2, [r1, #4]
 8010a7c:	608b      	str	r3, [r1, #8]
 8010a7e:	4628      	mov	r0, r5
 8010a80:	f001 f9ac 	bl	8011ddc <_Bfree>
 8010a84:	2200      	movs	r2, #0
 8010a86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010a88:	601a      	str	r2, [r3, #0]
 8010a8a:	1e3b      	subs	r3, r7, #0
 8010a8c:	bfaf      	iteee	ge
 8010a8e:	2300      	movge	r3, #0
 8010a90:	2201      	movlt	r2, #1
 8010a92:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010a96:	9305      	strlt	r3, [sp, #20]
 8010a98:	bfa8      	it	ge
 8010a9a:	f8c8 3000 	strge.w	r3, [r8]
 8010a9e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010aa2:	4b99      	ldr	r3, [pc, #612]	; (8010d08 <_dtoa_r+0x2d0>)
 8010aa4:	bfb8      	it	lt
 8010aa6:	f8c8 2000 	strlt.w	r2, [r8]
 8010aaa:	ea33 0309 	bics.w	r3, r3, r9
 8010aae:	d119      	bne.n	8010ae4 <_dtoa_r+0xac>
 8010ab0:	f242 730f 	movw	r3, #9999	; 0x270f
 8010ab4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010ab6:	6013      	str	r3, [r2, #0]
 8010ab8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010abc:	4333      	orrs	r3, r6
 8010abe:	f000 857f 	beq.w	80115c0 <_dtoa_r+0xb88>
 8010ac2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010ac4:	b953      	cbnz	r3, 8010adc <_dtoa_r+0xa4>
 8010ac6:	4b91      	ldr	r3, [pc, #580]	; (8010d0c <_dtoa_r+0x2d4>)
 8010ac8:	e022      	b.n	8010b10 <_dtoa_r+0xd8>
 8010aca:	4b91      	ldr	r3, [pc, #580]	; (8010d10 <_dtoa_r+0x2d8>)
 8010acc:	9303      	str	r3, [sp, #12]
 8010ace:	3308      	adds	r3, #8
 8010ad0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010ad2:	6013      	str	r3, [r2, #0]
 8010ad4:	9803      	ldr	r0, [sp, #12]
 8010ad6:	b019      	add	sp, #100	; 0x64
 8010ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010adc:	4b8b      	ldr	r3, [pc, #556]	; (8010d0c <_dtoa_r+0x2d4>)
 8010ade:	9303      	str	r3, [sp, #12]
 8010ae0:	3303      	adds	r3, #3
 8010ae2:	e7f5      	b.n	8010ad0 <_dtoa_r+0x98>
 8010ae4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010ae8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8010aec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010af0:	2200      	movs	r2, #0
 8010af2:	2300      	movs	r3, #0
 8010af4:	f7ef ff7a 	bl	80009ec <__aeabi_dcmpeq>
 8010af8:	4680      	mov	r8, r0
 8010afa:	b158      	cbz	r0, 8010b14 <_dtoa_r+0xdc>
 8010afc:	2301      	movs	r3, #1
 8010afe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010b00:	6013      	str	r3, [r2, #0]
 8010b02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f000 8558 	beq.w	80115ba <_dtoa_r+0xb82>
 8010b0a:	4882      	ldr	r0, [pc, #520]	; (8010d14 <_dtoa_r+0x2dc>)
 8010b0c:	6018      	str	r0, [r3, #0]
 8010b0e:	1e43      	subs	r3, r0, #1
 8010b10:	9303      	str	r3, [sp, #12]
 8010b12:	e7df      	b.n	8010ad4 <_dtoa_r+0x9c>
 8010b14:	ab16      	add	r3, sp, #88	; 0x58
 8010b16:	9301      	str	r3, [sp, #4]
 8010b18:	ab17      	add	r3, sp, #92	; 0x5c
 8010b1a:	9300      	str	r3, [sp, #0]
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010b22:	f001 fd05 	bl	8012530 <__d2b>
 8010b26:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010b2a:	4683      	mov	fp, r0
 8010b2c:	2c00      	cmp	r4, #0
 8010b2e:	d07f      	beq.n	8010c30 <_dtoa_r+0x1f8>
 8010b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b36:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010b3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b3e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8010b42:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010b46:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	4b72      	ldr	r3, [pc, #456]	; (8010d18 <_dtoa_r+0x2e0>)
 8010b4e:	f7ef fb2d 	bl	80001ac <__aeabi_dsub>
 8010b52:	a365      	add	r3, pc, #404	; (adr r3, 8010ce8 <_dtoa_r+0x2b0>)
 8010b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b58:	f7ef fce0 	bl	800051c <__aeabi_dmul>
 8010b5c:	a364      	add	r3, pc, #400	; (adr r3, 8010cf0 <_dtoa_r+0x2b8>)
 8010b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b62:	f7ef fb25 	bl	80001b0 <__adddf3>
 8010b66:	4606      	mov	r6, r0
 8010b68:	4620      	mov	r0, r4
 8010b6a:	460f      	mov	r7, r1
 8010b6c:	f7ef fc6c 	bl	8000448 <__aeabi_i2d>
 8010b70:	a361      	add	r3, pc, #388	; (adr r3, 8010cf8 <_dtoa_r+0x2c0>)
 8010b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b76:	f7ef fcd1 	bl	800051c <__aeabi_dmul>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	4630      	mov	r0, r6
 8010b80:	4639      	mov	r1, r7
 8010b82:	f7ef fb15 	bl	80001b0 <__adddf3>
 8010b86:	4606      	mov	r6, r0
 8010b88:	460f      	mov	r7, r1
 8010b8a:	f7ef ff77 	bl	8000a7c <__aeabi_d2iz>
 8010b8e:	2200      	movs	r2, #0
 8010b90:	4682      	mov	sl, r0
 8010b92:	2300      	movs	r3, #0
 8010b94:	4630      	mov	r0, r6
 8010b96:	4639      	mov	r1, r7
 8010b98:	f7ef ff32 	bl	8000a00 <__aeabi_dcmplt>
 8010b9c:	b148      	cbz	r0, 8010bb2 <_dtoa_r+0x17a>
 8010b9e:	4650      	mov	r0, sl
 8010ba0:	f7ef fc52 	bl	8000448 <__aeabi_i2d>
 8010ba4:	4632      	mov	r2, r6
 8010ba6:	463b      	mov	r3, r7
 8010ba8:	f7ef ff20 	bl	80009ec <__aeabi_dcmpeq>
 8010bac:	b908      	cbnz	r0, 8010bb2 <_dtoa_r+0x17a>
 8010bae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bb2:	f1ba 0f16 	cmp.w	sl, #22
 8010bb6:	d858      	bhi.n	8010c6a <_dtoa_r+0x232>
 8010bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010bbc:	4b57      	ldr	r3, [pc, #348]	; (8010d1c <_dtoa_r+0x2e4>)
 8010bbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc6:	f7ef ff1b 	bl	8000a00 <__aeabi_dcmplt>
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d04f      	beq.n	8010c6e <_dtoa_r+0x236>
 8010bce:	2300      	movs	r3, #0
 8010bd0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8010bd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010bd8:	1b1c      	subs	r4, r3, r4
 8010bda:	1e63      	subs	r3, r4, #1
 8010bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8010bde:	bf49      	itett	mi
 8010be0:	f1c4 0301 	rsbmi	r3, r4, #1
 8010be4:	2300      	movpl	r3, #0
 8010be6:	9306      	strmi	r3, [sp, #24]
 8010be8:	2300      	movmi	r3, #0
 8010bea:	bf54      	ite	pl
 8010bec:	9306      	strpl	r3, [sp, #24]
 8010bee:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010bf0:	f1ba 0f00 	cmp.w	sl, #0
 8010bf4:	db3d      	blt.n	8010c72 <_dtoa_r+0x23a>
 8010bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bf8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010bfc:	4453      	add	r3, sl
 8010bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8010c00:	2300      	movs	r3, #0
 8010c02:	930a      	str	r3, [sp, #40]	; 0x28
 8010c04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c06:	2b09      	cmp	r3, #9
 8010c08:	f200 808c 	bhi.w	8010d24 <_dtoa_r+0x2ec>
 8010c0c:	2b05      	cmp	r3, #5
 8010c0e:	bfc4      	itt	gt
 8010c10:	3b04      	subgt	r3, #4
 8010c12:	9322      	strgt	r3, [sp, #136]	; 0x88
 8010c14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c16:	bfc8      	it	gt
 8010c18:	2400      	movgt	r4, #0
 8010c1a:	f1a3 0302 	sub.w	r3, r3, #2
 8010c1e:	bfd8      	it	le
 8010c20:	2401      	movle	r4, #1
 8010c22:	2b03      	cmp	r3, #3
 8010c24:	f200 808a 	bhi.w	8010d3c <_dtoa_r+0x304>
 8010c28:	e8df f003 	tbb	[pc, r3]
 8010c2c:	5b4d4f2d 	.word	0x5b4d4f2d
 8010c30:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8010c34:	441c      	add	r4, r3
 8010c36:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010c3a:	2b20      	cmp	r3, #32
 8010c3c:	bfc3      	ittte	gt
 8010c3e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010c42:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8010c46:	fa09 f303 	lslgt.w	r3, r9, r3
 8010c4a:	f1c3 0320 	rsble	r3, r3, #32
 8010c4e:	bfc6      	itte	gt
 8010c50:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010c54:	4318      	orrgt	r0, r3
 8010c56:	fa06 f003 	lslle.w	r0, r6, r3
 8010c5a:	f7ef fbe5 	bl	8000428 <__aeabi_ui2d>
 8010c5e:	2301      	movs	r3, #1
 8010c60:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010c64:	3c01      	subs	r4, #1
 8010c66:	9313      	str	r3, [sp, #76]	; 0x4c
 8010c68:	e76f      	b.n	8010b4a <_dtoa_r+0x112>
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e7b2      	b.n	8010bd4 <_dtoa_r+0x19c>
 8010c6e:	900f      	str	r0, [sp, #60]	; 0x3c
 8010c70:	e7b1      	b.n	8010bd6 <_dtoa_r+0x19e>
 8010c72:	9b06      	ldr	r3, [sp, #24]
 8010c74:	eba3 030a 	sub.w	r3, r3, sl
 8010c78:	9306      	str	r3, [sp, #24]
 8010c7a:	f1ca 0300 	rsb	r3, sl, #0
 8010c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8010c80:	2300      	movs	r3, #0
 8010c82:	930e      	str	r3, [sp, #56]	; 0x38
 8010c84:	e7be      	b.n	8010c04 <_dtoa_r+0x1cc>
 8010c86:	2300      	movs	r3, #0
 8010c88:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	dc58      	bgt.n	8010d42 <_dtoa_r+0x30a>
 8010c90:	f04f 0901 	mov.w	r9, #1
 8010c94:	464b      	mov	r3, r9
 8010c96:	f8cd 9020 	str.w	r9, [sp, #32]
 8010c9a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8010ca2:	6042      	str	r2, [r0, #4]
 8010ca4:	2204      	movs	r2, #4
 8010ca6:	f102 0614 	add.w	r6, r2, #20
 8010caa:	429e      	cmp	r6, r3
 8010cac:	6841      	ldr	r1, [r0, #4]
 8010cae:	d94e      	bls.n	8010d4e <_dtoa_r+0x316>
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	f001 f853 	bl	8011d5c <_Balloc>
 8010cb6:	9003      	str	r0, [sp, #12]
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	d14c      	bne.n	8010d56 <_dtoa_r+0x31e>
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010cc2:	4b17      	ldr	r3, [pc, #92]	; (8010d20 <_dtoa_r+0x2e8>)
 8010cc4:	e6cc      	b.n	8010a60 <_dtoa_r+0x28>
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	e7de      	b.n	8010c88 <_dtoa_r+0x250>
 8010cca:	2300      	movs	r3, #0
 8010ccc:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010cd0:	eb0a 0903 	add.w	r9, sl, r3
 8010cd4:	f109 0301 	add.w	r3, r9, #1
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	9308      	str	r3, [sp, #32]
 8010cdc:	bfb8      	it	lt
 8010cde:	2301      	movlt	r3, #1
 8010ce0:	e7dd      	b.n	8010c9e <_dtoa_r+0x266>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	e7f2      	b.n	8010ccc <_dtoa_r+0x294>
 8010ce6:	bf00      	nop
 8010ce8:	636f4361 	.word	0x636f4361
 8010cec:	3fd287a7 	.word	0x3fd287a7
 8010cf0:	8b60c8b3 	.word	0x8b60c8b3
 8010cf4:	3fc68a28 	.word	0x3fc68a28
 8010cf8:	509f79fb 	.word	0x509f79fb
 8010cfc:	3fd34413 	.word	0x3fd34413
 8010d00:	08013b08 	.word	0x08013b08
 8010d04:	08013bc5 	.word	0x08013bc5
 8010d08:	7ff00000 	.word	0x7ff00000
 8010d0c:	08013bc1 	.word	0x08013bc1
 8010d10:	08013bb8 	.word	0x08013bb8
 8010d14:	08013a91 	.word	0x08013a91
 8010d18:	3ff80000 	.word	0x3ff80000
 8010d1c:	08013d30 	.word	0x08013d30
 8010d20:	08013c20 	.word	0x08013c20
 8010d24:	2401      	movs	r4, #1
 8010d26:	2300      	movs	r3, #0
 8010d28:	940b      	str	r4, [sp, #44]	; 0x2c
 8010d2a:	9322      	str	r3, [sp, #136]	; 0x88
 8010d2c:	f04f 39ff 	mov.w	r9, #4294967295
 8010d30:	2200      	movs	r2, #0
 8010d32:	2312      	movs	r3, #18
 8010d34:	f8cd 9020 	str.w	r9, [sp, #32]
 8010d38:	9223      	str	r2, [sp, #140]	; 0x8c
 8010d3a:	e7b0      	b.n	8010c9e <_dtoa_r+0x266>
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d40:	e7f4      	b.n	8010d2c <_dtoa_r+0x2f4>
 8010d42:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8010d46:	464b      	mov	r3, r9
 8010d48:	f8cd 9020 	str.w	r9, [sp, #32]
 8010d4c:	e7a7      	b.n	8010c9e <_dtoa_r+0x266>
 8010d4e:	3101      	adds	r1, #1
 8010d50:	6041      	str	r1, [r0, #4]
 8010d52:	0052      	lsls	r2, r2, #1
 8010d54:	e7a7      	b.n	8010ca6 <_dtoa_r+0x26e>
 8010d56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010d58:	9a03      	ldr	r2, [sp, #12]
 8010d5a:	601a      	str	r2, [r3, #0]
 8010d5c:	9b08      	ldr	r3, [sp, #32]
 8010d5e:	2b0e      	cmp	r3, #14
 8010d60:	f200 80a8 	bhi.w	8010eb4 <_dtoa_r+0x47c>
 8010d64:	2c00      	cmp	r4, #0
 8010d66:	f000 80a5 	beq.w	8010eb4 <_dtoa_r+0x47c>
 8010d6a:	f1ba 0f00 	cmp.w	sl, #0
 8010d6e:	dd34      	ble.n	8010dda <_dtoa_r+0x3a2>
 8010d70:	4a9a      	ldr	r2, [pc, #616]	; (8010fdc <_dtoa_r+0x5a4>)
 8010d72:	f00a 030f 	and.w	r3, sl, #15
 8010d76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010d7a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010d7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010d82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010d86:	ea4f 142a 	mov.w	r4, sl, asr #4
 8010d8a:	d016      	beq.n	8010dba <_dtoa_r+0x382>
 8010d8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d90:	4b93      	ldr	r3, [pc, #588]	; (8010fe0 <_dtoa_r+0x5a8>)
 8010d92:	2703      	movs	r7, #3
 8010d94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010d98:	f7ef fcea 	bl	8000770 <__aeabi_ddiv>
 8010d9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010da0:	f004 040f 	and.w	r4, r4, #15
 8010da4:	4e8e      	ldr	r6, [pc, #568]	; (8010fe0 <_dtoa_r+0x5a8>)
 8010da6:	b954      	cbnz	r4, 8010dbe <_dtoa_r+0x386>
 8010da8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010dac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010db0:	f7ef fcde 	bl	8000770 <__aeabi_ddiv>
 8010db4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010db8:	e029      	b.n	8010e0e <_dtoa_r+0x3d6>
 8010dba:	2702      	movs	r7, #2
 8010dbc:	e7f2      	b.n	8010da4 <_dtoa_r+0x36c>
 8010dbe:	07e1      	lsls	r1, r4, #31
 8010dc0:	d508      	bpl.n	8010dd4 <_dtoa_r+0x39c>
 8010dc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010dc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010dca:	f7ef fba7 	bl	800051c <__aeabi_dmul>
 8010dce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010dd2:	3701      	adds	r7, #1
 8010dd4:	1064      	asrs	r4, r4, #1
 8010dd6:	3608      	adds	r6, #8
 8010dd8:	e7e5      	b.n	8010da6 <_dtoa_r+0x36e>
 8010dda:	f000 80a5 	beq.w	8010f28 <_dtoa_r+0x4f0>
 8010dde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010de2:	f1ca 0400 	rsb	r4, sl, #0
 8010de6:	4b7d      	ldr	r3, [pc, #500]	; (8010fdc <_dtoa_r+0x5a4>)
 8010de8:	f004 020f 	and.w	r2, r4, #15
 8010dec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df4:	f7ef fb92 	bl	800051c <__aeabi_dmul>
 8010df8:	2702      	movs	r7, #2
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e00:	4e77      	ldr	r6, [pc, #476]	; (8010fe0 <_dtoa_r+0x5a8>)
 8010e02:	1124      	asrs	r4, r4, #4
 8010e04:	2c00      	cmp	r4, #0
 8010e06:	f040 8084 	bne.w	8010f12 <_dtoa_r+0x4da>
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d1d2      	bne.n	8010db4 <_dtoa_r+0x37c>
 8010e0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	f000 808b 	beq.w	8010f2c <_dtoa_r+0x4f4>
 8010e16:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010e1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010e1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010e22:	2200      	movs	r2, #0
 8010e24:	4b6f      	ldr	r3, [pc, #444]	; (8010fe4 <_dtoa_r+0x5ac>)
 8010e26:	f7ef fdeb 	bl	8000a00 <__aeabi_dcmplt>
 8010e2a:	2800      	cmp	r0, #0
 8010e2c:	d07e      	beq.n	8010f2c <_dtoa_r+0x4f4>
 8010e2e:	9b08      	ldr	r3, [sp, #32]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d07b      	beq.n	8010f2c <_dtoa_r+0x4f4>
 8010e34:	f1b9 0f00 	cmp.w	r9, #0
 8010e38:	dd38      	ble.n	8010eac <_dtoa_r+0x474>
 8010e3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010e3e:	2200      	movs	r2, #0
 8010e40:	4b69      	ldr	r3, [pc, #420]	; (8010fe8 <_dtoa_r+0x5b0>)
 8010e42:	f7ef fb6b 	bl	800051c <__aeabi_dmul>
 8010e46:	464c      	mov	r4, r9
 8010e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e4c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8010e50:	3701      	adds	r7, #1
 8010e52:	4638      	mov	r0, r7
 8010e54:	f7ef faf8 	bl	8000448 <__aeabi_i2d>
 8010e58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e5c:	f7ef fb5e 	bl	800051c <__aeabi_dmul>
 8010e60:	2200      	movs	r2, #0
 8010e62:	4b62      	ldr	r3, [pc, #392]	; (8010fec <_dtoa_r+0x5b4>)
 8010e64:	f7ef f9a4 	bl	80001b0 <__adddf3>
 8010e68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010e6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010e70:	9611      	str	r6, [sp, #68]	; 0x44
 8010e72:	2c00      	cmp	r4, #0
 8010e74:	d15d      	bne.n	8010f32 <_dtoa_r+0x4fa>
 8010e76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	4b5c      	ldr	r3, [pc, #368]	; (8010ff0 <_dtoa_r+0x5b8>)
 8010e7e:	f7ef f995 	bl	80001ac <__aeabi_dsub>
 8010e82:	4602      	mov	r2, r0
 8010e84:	460b      	mov	r3, r1
 8010e86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e8a:	4633      	mov	r3, r6
 8010e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e8e:	f7ef fdd5 	bl	8000a3c <__aeabi_dcmpgt>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	f040 829c 	bne.w	80113d0 <_dtoa_r+0x998>
 8010e98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e9e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010ea2:	f7ef fdad 	bl	8000a00 <__aeabi_dcmplt>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	f040 8290 	bne.w	80113cc <_dtoa_r+0x994>
 8010eac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8010eb0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010eb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	f2c0 8152 	blt.w	8011160 <_dtoa_r+0x728>
 8010ebc:	f1ba 0f0e 	cmp.w	sl, #14
 8010ec0:	f300 814e 	bgt.w	8011160 <_dtoa_r+0x728>
 8010ec4:	4b45      	ldr	r3, [pc, #276]	; (8010fdc <_dtoa_r+0x5a4>)
 8010ec6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010eca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010ece:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8010ed2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	f280 80db 	bge.w	8011090 <_dtoa_r+0x658>
 8010eda:	9b08      	ldr	r3, [sp, #32]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	f300 80d7 	bgt.w	8011090 <_dtoa_r+0x658>
 8010ee2:	f040 8272 	bne.w	80113ca <_dtoa_r+0x992>
 8010ee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010eea:	2200      	movs	r2, #0
 8010eec:	4b40      	ldr	r3, [pc, #256]	; (8010ff0 <_dtoa_r+0x5b8>)
 8010eee:	f7ef fb15 	bl	800051c <__aeabi_dmul>
 8010ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ef6:	f7ef fd97 	bl	8000a28 <__aeabi_dcmpge>
 8010efa:	9c08      	ldr	r4, [sp, #32]
 8010efc:	4626      	mov	r6, r4
 8010efe:	2800      	cmp	r0, #0
 8010f00:	f040 8248 	bne.w	8011394 <_dtoa_r+0x95c>
 8010f04:	2331      	movs	r3, #49	; 0x31
 8010f06:	9f03      	ldr	r7, [sp, #12]
 8010f08:	f10a 0a01 	add.w	sl, sl, #1
 8010f0c:	f807 3b01 	strb.w	r3, [r7], #1
 8010f10:	e244      	b.n	801139c <_dtoa_r+0x964>
 8010f12:	07e2      	lsls	r2, r4, #31
 8010f14:	d505      	bpl.n	8010f22 <_dtoa_r+0x4ea>
 8010f16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010f1a:	f7ef faff 	bl	800051c <__aeabi_dmul>
 8010f1e:	2301      	movs	r3, #1
 8010f20:	3701      	adds	r7, #1
 8010f22:	1064      	asrs	r4, r4, #1
 8010f24:	3608      	adds	r6, #8
 8010f26:	e76d      	b.n	8010e04 <_dtoa_r+0x3cc>
 8010f28:	2702      	movs	r7, #2
 8010f2a:	e770      	b.n	8010e0e <_dtoa_r+0x3d6>
 8010f2c:	46d0      	mov	r8, sl
 8010f2e:	9c08      	ldr	r4, [sp, #32]
 8010f30:	e78f      	b.n	8010e52 <_dtoa_r+0x41a>
 8010f32:	9903      	ldr	r1, [sp, #12]
 8010f34:	4b29      	ldr	r3, [pc, #164]	; (8010fdc <_dtoa_r+0x5a4>)
 8010f36:	4421      	add	r1, r4
 8010f38:	9112      	str	r1, [sp, #72]	; 0x48
 8010f3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010f3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f40:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010f44:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010f48:	2900      	cmp	r1, #0
 8010f4a:	d055      	beq.n	8010ff8 <_dtoa_r+0x5c0>
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	4929      	ldr	r1, [pc, #164]	; (8010ff4 <_dtoa_r+0x5bc>)
 8010f50:	f7ef fc0e 	bl	8000770 <__aeabi_ddiv>
 8010f54:	463b      	mov	r3, r7
 8010f56:	4632      	mov	r2, r6
 8010f58:	f7ef f928 	bl	80001ac <__aeabi_dsub>
 8010f5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010f60:	9f03      	ldr	r7, [sp, #12]
 8010f62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f66:	f7ef fd89 	bl	8000a7c <__aeabi_d2iz>
 8010f6a:	4604      	mov	r4, r0
 8010f6c:	f7ef fa6c 	bl	8000448 <__aeabi_i2d>
 8010f70:	4602      	mov	r2, r0
 8010f72:	460b      	mov	r3, r1
 8010f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f78:	f7ef f918 	bl	80001ac <__aeabi_dsub>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	460b      	mov	r3, r1
 8010f80:	3430      	adds	r4, #48	; 0x30
 8010f82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010f8a:	f807 4b01 	strb.w	r4, [r7], #1
 8010f8e:	f7ef fd37 	bl	8000a00 <__aeabi_dcmplt>
 8010f92:	2800      	cmp	r0, #0
 8010f94:	d174      	bne.n	8011080 <_dtoa_r+0x648>
 8010f96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f9a:	2000      	movs	r0, #0
 8010f9c:	4911      	ldr	r1, [pc, #68]	; (8010fe4 <_dtoa_r+0x5ac>)
 8010f9e:	f7ef f905 	bl	80001ac <__aeabi_dsub>
 8010fa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010fa6:	f7ef fd2b 	bl	8000a00 <__aeabi_dcmplt>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	f040 80b7 	bne.w	801111e <_dtoa_r+0x6e6>
 8010fb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010fb2:	429f      	cmp	r7, r3
 8010fb4:	f43f af7a 	beq.w	8010eac <_dtoa_r+0x474>
 8010fb8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	4b0a      	ldr	r3, [pc, #40]	; (8010fe8 <_dtoa_r+0x5b0>)
 8010fc0:	f7ef faac 	bl	800051c <__aeabi_dmul>
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010fca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010fce:	4b06      	ldr	r3, [pc, #24]	; (8010fe8 <_dtoa_r+0x5b0>)
 8010fd0:	f7ef faa4 	bl	800051c <__aeabi_dmul>
 8010fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010fd8:	e7c3      	b.n	8010f62 <_dtoa_r+0x52a>
 8010fda:	bf00      	nop
 8010fdc:	08013d30 	.word	0x08013d30
 8010fe0:	08013d08 	.word	0x08013d08
 8010fe4:	3ff00000 	.word	0x3ff00000
 8010fe8:	40240000 	.word	0x40240000
 8010fec:	401c0000 	.word	0x401c0000
 8010ff0:	40140000 	.word	0x40140000
 8010ff4:	3fe00000 	.word	0x3fe00000
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	4639      	mov	r1, r7
 8010ffc:	f7ef fa8e 	bl	800051c <__aeabi_dmul>
 8011000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011002:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011006:	9c03      	ldr	r4, [sp, #12]
 8011008:	9314      	str	r3, [sp, #80]	; 0x50
 801100a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801100e:	f7ef fd35 	bl	8000a7c <__aeabi_d2iz>
 8011012:	9015      	str	r0, [sp, #84]	; 0x54
 8011014:	f7ef fa18 	bl	8000448 <__aeabi_i2d>
 8011018:	4602      	mov	r2, r0
 801101a:	460b      	mov	r3, r1
 801101c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011020:	f7ef f8c4 	bl	80001ac <__aeabi_dsub>
 8011024:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011026:	4606      	mov	r6, r0
 8011028:	3330      	adds	r3, #48	; 0x30
 801102a:	f804 3b01 	strb.w	r3, [r4], #1
 801102e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011030:	460f      	mov	r7, r1
 8011032:	429c      	cmp	r4, r3
 8011034:	f04f 0200 	mov.w	r2, #0
 8011038:	d124      	bne.n	8011084 <_dtoa_r+0x64c>
 801103a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801103e:	4bb0      	ldr	r3, [pc, #704]	; (8011300 <_dtoa_r+0x8c8>)
 8011040:	f7ef f8b6 	bl	80001b0 <__adddf3>
 8011044:	4602      	mov	r2, r0
 8011046:	460b      	mov	r3, r1
 8011048:	4630      	mov	r0, r6
 801104a:	4639      	mov	r1, r7
 801104c:	f7ef fcf6 	bl	8000a3c <__aeabi_dcmpgt>
 8011050:	2800      	cmp	r0, #0
 8011052:	d163      	bne.n	801111c <_dtoa_r+0x6e4>
 8011054:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011058:	2000      	movs	r0, #0
 801105a:	49a9      	ldr	r1, [pc, #676]	; (8011300 <_dtoa_r+0x8c8>)
 801105c:	f7ef f8a6 	bl	80001ac <__aeabi_dsub>
 8011060:	4602      	mov	r2, r0
 8011062:	460b      	mov	r3, r1
 8011064:	4630      	mov	r0, r6
 8011066:	4639      	mov	r1, r7
 8011068:	f7ef fcca 	bl	8000a00 <__aeabi_dcmplt>
 801106c:	2800      	cmp	r0, #0
 801106e:	f43f af1d 	beq.w	8010eac <_dtoa_r+0x474>
 8011072:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011074:	1e7b      	subs	r3, r7, #1
 8011076:	9314      	str	r3, [sp, #80]	; 0x50
 8011078:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801107c:	2b30      	cmp	r3, #48	; 0x30
 801107e:	d0f8      	beq.n	8011072 <_dtoa_r+0x63a>
 8011080:	46c2      	mov	sl, r8
 8011082:	e03b      	b.n	80110fc <_dtoa_r+0x6c4>
 8011084:	4b9f      	ldr	r3, [pc, #636]	; (8011304 <_dtoa_r+0x8cc>)
 8011086:	f7ef fa49 	bl	800051c <__aeabi_dmul>
 801108a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801108e:	e7bc      	b.n	801100a <_dtoa_r+0x5d2>
 8011090:	9f03      	ldr	r7, [sp, #12]
 8011092:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801109a:	4640      	mov	r0, r8
 801109c:	4649      	mov	r1, r9
 801109e:	f7ef fb67 	bl	8000770 <__aeabi_ddiv>
 80110a2:	f7ef fceb 	bl	8000a7c <__aeabi_d2iz>
 80110a6:	4604      	mov	r4, r0
 80110a8:	f7ef f9ce 	bl	8000448 <__aeabi_i2d>
 80110ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110b0:	f7ef fa34 	bl	800051c <__aeabi_dmul>
 80110b4:	4602      	mov	r2, r0
 80110b6:	460b      	mov	r3, r1
 80110b8:	4640      	mov	r0, r8
 80110ba:	4649      	mov	r1, r9
 80110bc:	f7ef f876 	bl	80001ac <__aeabi_dsub>
 80110c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80110c4:	f807 6b01 	strb.w	r6, [r7], #1
 80110c8:	9e03      	ldr	r6, [sp, #12]
 80110ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80110ce:	1bbe      	subs	r6, r7, r6
 80110d0:	45b4      	cmp	ip, r6
 80110d2:	4602      	mov	r2, r0
 80110d4:	460b      	mov	r3, r1
 80110d6:	d136      	bne.n	8011146 <_dtoa_r+0x70e>
 80110d8:	f7ef f86a 	bl	80001b0 <__adddf3>
 80110dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110e0:	4680      	mov	r8, r0
 80110e2:	4689      	mov	r9, r1
 80110e4:	f7ef fcaa 	bl	8000a3c <__aeabi_dcmpgt>
 80110e8:	bb58      	cbnz	r0, 8011142 <_dtoa_r+0x70a>
 80110ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110ee:	4640      	mov	r0, r8
 80110f0:	4649      	mov	r1, r9
 80110f2:	f7ef fc7b 	bl	80009ec <__aeabi_dcmpeq>
 80110f6:	b108      	cbz	r0, 80110fc <_dtoa_r+0x6c4>
 80110f8:	07e1      	lsls	r1, r4, #31
 80110fa:	d422      	bmi.n	8011142 <_dtoa_r+0x70a>
 80110fc:	4628      	mov	r0, r5
 80110fe:	4659      	mov	r1, fp
 8011100:	f000 fe6c 	bl	8011ddc <_Bfree>
 8011104:	2300      	movs	r3, #0
 8011106:	703b      	strb	r3, [r7, #0]
 8011108:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801110a:	f10a 0001 	add.w	r0, sl, #1
 801110e:	6018      	str	r0, [r3, #0]
 8011110:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011112:	2b00      	cmp	r3, #0
 8011114:	f43f acde 	beq.w	8010ad4 <_dtoa_r+0x9c>
 8011118:	601f      	str	r7, [r3, #0]
 801111a:	e4db      	b.n	8010ad4 <_dtoa_r+0x9c>
 801111c:	4627      	mov	r7, r4
 801111e:	463b      	mov	r3, r7
 8011120:	461f      	mov	r7, r3
 8011122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011126:	2a39      	cmp	r2, #57	; 0x39
 8011128:	d107      	bne.n	801113a <_dtoa_r+0x702>
 801112a:	9a03      	ldr	r2, [sp, #12]
 801112c:	429a      	cmp	r2, r3
 801112e:	d1f7      	bne.n	8011120 <_dtoa_r+0x6e8>
 8011130:	2230      	movs	r2, #48	; 0x30
 8011132:	9903      	ldr	r1, [sp, #12]
 8011134:	f108 0801 	add.w	r8, r8, #1
 8011138:	700a      	strb	r2, [r1, #0]
 801113a:	781a      	ldrb	r2, [r3, #0]
 801113c:	3201      	adds	r2, #1
 801113e:	701a      	strb	r2, [r3, #0]
 8011140:	e79e      	b.n	8011080 <_dtoa_r+0x648>
 8011142:	46d0      	mov	r8, sl
 8011144:	e7eb      	b.n	801111e <_dtoa_r+0x6e6>
 8011146:	2200      	movs	r2, #0
 8011148:	4b6e      	ldr	r3, [pc, #440]	; (8011304 <_dtoa_r+0x8cc>)
 801114a:	f7ef f9e7 	bl	800051c <__aeabi_dmul>
 801114e:	2200      	movs	r2, #0
 8011150:	2300      	movs	r3, #0
 8011152:	4680      	mov	r8, r0
 8011154:	4689      	mov	r9, r1
 8011156:	f7ef fc49 	bl	80009ec <__aeabi_dcmpeq>
 801115a:	2800      	cmp	r0, #0
 801115c:	d09b      	beq.n	8011096 <_dtoa_r+0x65e>
 801115e:	e7cd      	b.n	80110fc <_dtoa_r+0x6c4>
 8011160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011162:	2a00      	cmp	r2, #0
 8011164:	f000 80d0 	beq.w	8011308 <_dtoa_r+0x8d0>
 8011168:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801116a:	2a01      	cmp	r2, #1
 801116c:	f300 80ae 	bgt.w	80112cc <_dtoa_r+0x894>
 8011170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011172:	2a00      	cmp	r2, #0
 8011174:	f000 80a6 	beq.w	80112c4 <_dtoa_r+0x88c>
 8011178:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801117c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801117e:	9f06      	ldr	r7, [sp, #24]
 8011180:	9a06      	ldr	r2, [sp, #24]
 8011182:	2101      	movs	r1, #1
 8011184:	441a      	add	r2, r3
 8011186:	9206      	str	r2, [sp, #24]
 8011188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801118a:	4628      	mov	r0, r5
 801118c:	441a      	add	r2, r3
 801118e:	9209      	str	r2, [sp, #36]	; 0x24
 8011190:	f000 ff24 	bl	8011fdc <__i2b>
 8011194:	4606      	mov	r6, r0
 8011196:	2f00      	cmp	r7, #0
 8011198:	dd0c      	ble.n	80111b4 <_dtoa_r+0x77c>
 801119a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801119c:	2b00      	cmp	r3, #0
 801119e:	dd09      	ble.n	80111b4 <_dtoa_r+0x77c>
 80111a0:	42bb      	cmp	r3, r7
 80111a2:	bfa8      	it	ge
 80111a4:	463b      	movge	r3, r7
 80111a6:	9a06      	ldr	r2, [sp, #24]
 80111a8:	1aff      	subs	r7, r7, r3
 80111aa:	1ad2      	subs	r2, r2, r3
 80111ac:	9206      	str	r2, [sp, #24]
 80111ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111b0:	1ad3      	subs	r3, r2, r3
 80111b2:	9309      	str	r3, [sp, #36]	; 0x24
 80111b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111b6:	b1f3      	cbz	r3, 80111f6 <_dtoa_r+0x7be>
 80111b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	f000 80a8 	beq.w	8011310 <_dtoa_r+0x8d8>
 80111c0:	2c00      	cmp	r4, #0
 80111c2:	dd10      	ble.n	80111e6 <_dtoa_r+0x7ae>
 80111c4:	4631      	mov	r1, r6
 80111c6:	4622      	mov	r2, r4
 80111c8:	4628      	mov	r0, r5
 80111ca:	f000 ffc5 	bl	8012158 <__pow5mult>
 80111ce:	465a      	mov	r2, fp
 80111d0:	4601      	mov	r1, r0
 80111d2:	4606      	mov	r6, r0
 80111d4:	4628      	mov	r0, r5
 80111d6:	f000 ff17 	bl	8012008 <__multiply>
 80111da:	4680      	mov	r8, r0
 80111dc:	4659      	mov	r1, fp
 80111de:	4628      	mov	r0, r5
 80111e0:	f000 fdfc 	bl	8011ddc <_Bfree>
 80111e4:	46c3      	mov	fp, r8
 80111e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111e8:	1b1a      	subs	r2, r3, r4
 80111ea:	d004      	beq.n	80111f6 <_dtoa_r+0x7be>
 80111ec:	4659      	mov	r1, fp
 80111ee:	4628      	mov	r0, r5
 80111f0:	f000 ffb2 	bl	8012158 <__pow5mult>
 80111f4:	4683      	mov	fp, r0
 80111f6:	2101      	movs	r1, #1
 80111f8:	4628      	mov	r0, r5
 80111fa:	f000 feef 	bl	8011fdc <__i2b>
 80111fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011200:	4604      	mov	r4, r0
 8011202:	2b00      	cmp	r3, #0
 8011204:	f340 8086 	ble.w	8011314 <_dtoa_r+0x8dc>
 8011208:	461a      	mov	r2, r3
 801120a:	4601      	mov	r1, r0
 801120c:	4628      	mov	r0, r5
 801120e:	f000 ffa3 	bl	8012158 <__pow5mult>
 8011212:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011214:	4604      	mov	r4, r0
 8011216:	2b01      	cmp	r3, #1
 8011218:	dd7f      	ble.n	801131a <_dtoa_r+0x8e2>
 801121a:	f04f 0800 	mov.w	r8, #0
 801121e:	6923      	ldr	r3, [r4, #16]
 8011220:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011224:	6918      	ldr	r0, [r3, #16]
 8011226:	f000 fe8b 	bl	8011f40 <__hi0bits>
 801122a:	f1c0 0020 	rsb	r0, r0, #32
 801122e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011230:	4418      	add	r0, r3
 8011232:	f010 001f 	ands.w	r0, r0, #31
 8011236:	f000 8092 	beq.w	801135e <_dtoa_r+0x926>
 801123a:	f1c0 0320 	rsb	r3, r0, #32
 801123e:	2b04      	cmp	r3, #4
 8011240:	f340 808a 	ble.w	8011358 <_dtoa_r+0x920>
 8011244:	f1c0 001c 	rsb	r0, r0, #28
 8011248:	9b06      	ldr	r3, [sp, #24]
 801124a:	4407      	add	r7, r0
 801124c:	4403      	add	r3, r0
 801124e:	9306      	str	r3, [sp, #24]
 8011250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011252:	4403      	add	r3, r0
 8011254:	9309      	str	r3, [sp, #36]	; 0x24
 8011256:	9b06      	ldr	r3, [sp, #24]
 8011258:	2b00      	cmp	r3, #0
 801125a:	dd05      	ble.n	8011268 <_dtoa_r+0x830>
 801125c:	4659      	mov	r1, fp
 801125e:	461a      	mov	r2, r3
 8011260:	4628      	mov	r0, r5
 8011262:	f000 ffd3 	bl	801220c <__lshift>
 8011266:	4683      	mov	fp, r0
 8011268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801126a:	2b00      	cmp	r3, #0
 801126c:	dd05      	ble.n	801127a <_dtoa_r+0x842>
 801126e:	4621      	mov	r1, r4
 8011270:	461a      	mov	r2, r3
 8011272:	4628      	mov	r0, r5
 8011274:	f000 ffca 	bl	801220c <__lshift>
 8011278:	4604      	mov	r4, r0
 801127a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801127c:	2b00      	cmp	r3, #0
 801127e:	d070      	beq.n	8011362 <_dtoa_r+0x92a>
 8011280:	4621      	mov	r1, r4
 8011282:	4658      	mov	r0, fp
 8011284:	f001 f832 	bl	80122ec <__mcmp>
 8011288:	2800      	cmp	r0, #0
 801128a:	da6a      	bge.n	8011362 <_dtoa_r+0x92a>
 801128c:	2300      	movs	r3, #0
 801128e:	4659      	mov	r1, fp
 8011290:	220a      	movs	r2, #10
 8011292:	4628      	mov	r0, r5
 8011294:	f000 fdc4 	bl	8011e20 <__multadd>
 8011298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801129a:	4683      	mov	fp, r0
 801129c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	f000 8194 	beq.w	80115ce <_dtoa_r+0xb96>
 80112a6:	4631      	mov	r1, r6
 80112a8:	2300      	movs	r3, #0
 80112aa:	220a      	movs	r2, #10
 80112ac:	4628      	mov	r0, r5
 80112ae:	f000 fdb7 	bl	8011e20 <__multadd>
 80112b2:	f1b9 0f00 	cmp.w	r9, #0
 80112b6:	4606      	mov	r6, r0
 80112b8:	f300 8093 	bgt.w	80113e2 <_dtoa_r+0x9aa>
 80112bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80112be:	2b02      	cmp	r3, #2
 80112c0:	dc57      	bgt.n	8011372 <_dtoa_r+0x93a>
 80112c2:	e08e      	b.n	80113e2 <_dtoa_r+0x9aa>
 80112c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80112c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80112ca:	e757      	b.n	801117c <_dtoa_r+0x744>
 80112cc:	9b08      	ldr	r3, [sp, #32]
 80112ce:	1e5c      	subs	r4, r3, #1
 80112d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112d2:	42a3      	cmp	r3, r4
 80112d4:	bfb7      	itett	lt
 80112d6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80112d8:	1b1c      	subge	r4, r3, r4
 80112da:	1ae2      	sublt	r2, r4, r3
 80112dc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80112de:	bfbe      	ittt	lt
 80112e0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80112e2:	189b      	addlt	r3, r3, r2
 80112e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80112e6:	9b08      	ldr	r3, [sp, #32]
 80112e8:	bfb8      	it	lt
 80112ea:	2400      	movlt	r4, #0
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	bfbb      	ittet	lt
 80112f0:	9b06      	ldrlt	r3, [sp, #24]
 80112f2:	9a08      	ldrlt	r2, [sp, #32]
 80112f4:	9f06      	ldrge	r7, [sp, #24]
 80112f6:	1a9f      	sublt	r7, r3, r2
 80112f8:	bfac      	ite	ge
 80112fa:	9b08      	ldrge	r3, [sp, #32]
 80112fc:	2300      	movlt	r3, #0
 80112fe:	e73f      	b.n	8011180 <_dtoa_r+0x748>
 8011300:	3fe00000 	.word	0x3fe00000
 8011304:	40240000 	.word	0x40240000
 8011308:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801130a:	9f06      	ldr	r7, [sp, #24]
 801130c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801130e:	e742      	b.n	8011196 <_dtoa_r+0x75e>
 8011310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011312:	e76b      	b.n	80111ec <_dtoa_r+0x7b4>
 8011314:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011316:	2b01      	cmp	r3, #1
 8011318:	dc19      	bgt.n	801134e <_dtoa_r+0x916>
 801131a:	9b04      	ldr	r3, [sp, #16]
 801131c:	b9bb      	cbnz	r3, 801134e <_dtoa_r+0x916>
 801131e:	9b05      	ldr	r3, [sp, #20]
 8011320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011324:	b99b      	cbnz	r3, 801134e <_dtoa_r+0x916>
 8011326:	9b05      	ldr	r3, [sp, #20]
 8011328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801132c:	0d1b      	lsrs	r3, r3, #20
 801132e:	051b      	lsls	r3, r3, #20
 8011330:	b183      	cbz	r3, 8011354 <_dtoa_r+0x91c>
 8011332:	f04f 0801 	mov.w	r8, #1
 8011336:	9b06      	ldr	r3, [sp, #24]
 8011338:	3301      	adds	r3, #1
 801133a:	9306      	str	r3, [sp, #24]
 801133c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801133e:	3301      	adds	r3, #1
 8011340:	9309      	str	r3, [sp, #36]	; 0x24
 8011342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011344:	2b00      	cmp	r3, #0
 8011346:	f47f af6a 	bne.w	801121e <_dtoa_r+0x7e6>
 801134a:	2001      	movs	r0, #1
 801134c:	e76f      	b.n	801122e <_dtoa_r+0x7f6>
 801134e:	f04f 0800 	mov.w	r8, #0
 8011352:	e7f6      	b.n	8011342 <_dtoa_r+0x90a>
 8011354:	4698      	mov	r8, r3
 8011356:	e7f4      	b.n	8011342 <_dtoa_r+0x90a>
 8011358:	f43f af7d 	beq.w	8011256 <_dtoa_r+0x81e>
 801135c:	4618      	mov	r0, r3
 801135e:	301c      	adds	r0, #28
 8011360:	e772      	b.n	8011248 <_dtoa_r+0x810>
 8011362:	9b08      	ldr	r3, [sp, #32]
 8011364:	2b00      	cmp	r3, #0
 8011366:	dc36      	bgt.n	80113d6 <_dtoa_r+0x99e>
 8011368:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801136a:	2b02      	cmp	r3, #2
 801136c:	dd33      	ble.n	80113d6 <_dtoa_r+0x99e>
 801136e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011372:	f1b9 0f00 	cmp.w	r9, #0
 8011376:	d10d      	bne.n	8011394 <_dtoa_r+0x95c>
 8011378:	4621      	mov	r1, r4
 801137a:	464b      	mov	r3, r9
 801137c:	2205      	movs	r2, #5
 801137e:	4628      	mov	r0, r5
 8011380:	f000 fd4e 	bl	8011e20 <__multadd>
 8011384:	4601      	mov	r1, r0
 8011386:	4604      	mov	r4, r0
 8011388:	4658      	mov	r0, fp
 801138a:	f000 ffaf 	bl	80122ec <__mcmp>
 801138e:	2800      	cmp	r0, #0
 8011390:	f73f adb8 	bgt.w	8010f04 <_dtoa_r+0x4cc>
 8011394:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011396:	9f03      	ldr	r7, [sp, #12]
 8011398:	ea6f 0a03 	mvn.w	sl, r3
 801139c:	f04f 0800 	mov.w	r8, #0
 80113a0:	4621      	mov	r1, r4
 80113a2:	4628      	mov	r0, r5
 80113a4:	f000 fd1a 	bl	8011ddc <_Bfree>
 80113a8:	2e00      	cmp	r6, #0
 80113aa:	f43f aea7 	beq.w	80110fc <_dtoa_r+0x6c4>
 80113ae:	f1b8 0f00 	cmp.w	r8, #0
 80113b2:	d005      	beq.n	80113c0 <_dtoa_r+0x988>
 80113b4:	45b0      	cmp	r8, r6
 80113b6:	d003      	beq.n	80113c0 <_dtoa_r+0x988>
 80113b8:	4641      	mov	r1, r8
 80113ba:	4628      	mov	r0, r5
 80113bc:	f000 fd0e 	bl	8011ddc <_Bfree>
 80113c0:	4631      	mov	r1, r6
 80113c2:	4628      	mov	r0, r5
 80113c4:	f000 fd0a 	bl	8011ddc <_Bfree>
 80113c8:	e698      	b.n	80110fc <_dtoa_r+0x6c4>
 80113ca:	2400      	movs	r4, #0
 80113cc:	4626      	mov	r6, r4
 80113ce:	e7e1      	b.n	8011394 <_dtoa_r+0x95c>
 80113d0:	46c2      	mov	sl, r8
 80113d2:	4626      	mov	r6, r4
 80113d4:	e596      	b.n	8010f04 <_dtoa_r+0x4cc>
 80113d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	f000 80fd 	beq.w	80115dc <_dtoa_r+0xba4>
 80113e2:	2f00      	cmp	r7, #0
 80113e4:	dd05      	ble.n	80113f2 <_dtoa_r+0x9ba>
 80113e6:	4631      	mov	r1, r6
 80113e8:	463a      	mov	r2, r7
 80113ea:	4628      	mov	r0, r5
 80113ec:	f000 ff0e 	bl	801220c <__lshift>
 80113f0:	4606      	mov	r6, r0
 80113f2:	f1b8 0f00 	cmp.w	r8, #0
 80113f6:	d05c      	beq.n	80114b2 <_dtoa_r+0xa7a>
 80113f8:	4628      	mov	r0, r5
 80113fa:	6871      	ldr	r1, [r6, #4]
 80113fc:	f000 fcae 	bl	8011d5c <_Balloc>
 8011400:	4607      	mov	r7, r0
 8011402:	b928      	cbnz	r0, 8011410 <_dtoa_r+0x9d8>
 8011404:	4602      	mov	r2, r0
 8011406:	f240 21ea 	movw	r1, #746	; 0x2ea
 801140a:	4b7f      	ldr	r3, [pc, #508]	; (8011608 <_dtoa_r+0xbd0>)
 801140c:	f7ff bb28 	b.w	8010a60 <_dtoa_r+0x28>
 8011410:	6932      	ldr	r2, [r6, #16]
 8011412:	f106 010c 	add.w	r1, r6, #12
 8011416:	3202      	adds	r2, #2
 8011418:	0092      	lsls	r2, r2, #2
 801141a:	300c      	adds	r0, #12
 801141c:	f7fd ff4e 	bl	800f2bc <memcpy>
 8011420:	2201      	movs	r2, #1
 8011422:	4639      	mov	r1, r7
 8011424:	4628      	mov	r0, r5
 8011426:	f000 fef1 	bl	801220c <__lshift>
 801142a:	46b0      	mov	r8, r6
 801142c:	4606      	mov	r6, r0
 801142e:	9b03      	ldr	r3, [sp, #12]
 8011430:	3301      	adds	r3, #1
 8011432:	9308      	str	r3, [sp, #32]
 8011434:	9b03      	ldr	r3, [sp, #12]
 8011436:	444b      	add	r3, r9
 8011438:	930a      	str	r3, [sp, #40]	; 0x28
 801143a:	9b04      	ldr	r3, [sp, #16]
 801143c:	f003 0301 	and.w	r3, r3, #1
 8011440:	9309      	str	r3, [sp, #36]	; 0x24
 8011442:	9b08      	ldr	r3, [sp, #32]
 8011444:	4621      	mov	r1, r4
 8011446:	3b01      	subs	r3, #1
 8011448:	4658      	mov	r0, fp
 801144a:	9304      	str	r3, [sp, #16]
 801144c:	f7ff fa66 	bl	801091c <quorem>
 8011450:	4603      	mov	r3, r0
 8011452:	4641      	mov	r1, r8
 8011454:	3330      	adds	r3, #48	; 0x30
 8011456:	9006      	str	r0, [sp, #24]
 8011458:	4658      	mov	r0, fp
 801145a:	930b      	str	r3, [sp, #44]	; 0x2c
 801145c:	f000 ff46 	bl	80122ec <__mcmp>
 8011460:	4632      	mov	r2, r6
 8011462:	4681      	mov	r9, r0
 8011464:	4621      	mov	r1, r4
 8011466:	4628      	mov	r0, r5
 8011468:	f000 ff5c 	bl	8012324 <__mdiff>
 801146c:	68c2      	ldr	r2, [r0, #12]
 801146e:	4607      	mov	r7, r0
 8011470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011472:	bb02      	cbnz	r2, 80114b6 <_dtoa_r+0xa7e>
 8011474:	4601      	mov	r1, r0
 8011476:	4658      	mov	r0, fp
 8011478:	f000 ff38 	bl	80122ec <__mcmp>
 801147c:	4602      	mov	r2, r0
 801147e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011480:	4639      	mov	r1, r7
 8011482:	4628      	mov	r0, r5
 8011484:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8011488:	f000 fca8 	bl	8011ddc <_Bfree>
 801148c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801148e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011490:	9f08      	ldr	r7, [sp, #32]
 8011492:	ea43 0102 	orr.w	r1, r3, r2
 8011496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011498:	430b      	orrs	r3, r1
 801149a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801149c:	d10d      	bne.n	80114ba <_dtoa_r+0xa82>
 801149e:	2b39      	cmp	r3, #57	; 0x39
 80114a0:	d029      	beq.n	80114f6 <_dtoa_r+0xabe>
 80114a2:	f1b9 0f00 	cmp.w	r9, #0
 80114a6:	dd01      	ble.n	80114ac <_dtoa_r+0xa74>
 80114a8:	9b06      	ldr	r3, [sp, #24]
 80114aa:	3331      	adds	r3, #49	; 0x31
 80114ac:	9a04      	ldr	r2, [sp, #16]
 80114ae:	7013      	strb	r3, [r2, #0]
 80114b0:	e776      	b.n	80113a0 <_dtoa_r+0x968>
 80114b2:	4630      	mov	r0, r6
 80114b4:	e7b9      	b.n	801142a <_dtoa_r+0x9f2>
 80114b6:	2201      	movs	r2, #1
 80114b8:	e7e2      	b.n	8011480 <_dtoa_r+0xa48>
 80114ba:	f1b9 0f00 	cmp.w	r9, #0
 80114be:	db06      	blt.n	80114ce <_dtoa_r+0xa96>
 80114c0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80114c2:	ea41 0909 	orr.w	r9, r1, r9
 80114c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80114c8:	ea59 0101 	orrs.w	r1, r9, r1
 80114cc:	d120      	bne.n	8011510 <_dtoa_r+0xad8>
 80114ce:	2a00      	cmp	r2, #0
 80114d0:	ddec      	ble.n	80114ac <_dtoa_r+0xa74>
 80114d2:	4659      	mov	r1, fp
 80114d4:	2201      	movs	r2, #1
 80114d6:	4628      	mov	r0, r5
 80114d8:	9308      	str	r3, [sp, #32]
 80114da:	f000 fe97 	bl	801220c <__lshift>
 80114de:	4621      	mov	r1, r4
 80114e0:	4683      	mov	fp, r0
 80114e2:	f000 ff03 	bl	80122ec <__mcmp>
 80114e6:	2800      	cmp	r0, #0
 80114e8:	9b08      	ldr	r3, [sp, #32]
 80114ea:	dc02      	bgt.n	80114f2 <_dtoa_r+0xaba>
 80114ec:	d1de      	bne.n	80114ac <_dtoa_r+0xa74>
 80114ee:	07da      	lsls	r2, r3, #31
 80114f0:	d5dc      	bpl.n	80114ac <_dtoa_r+0xa74>
 80114f2:	2b39      	cmp	r3, #57	; 0x39
 80114f4:	d1d8      	bne.n	80114a8 <_dtoa_r+0xa70>
 80114f6:	2339      	movs	r3, #57	; 0x39
 80114f8:	9a04      	ldr	r2, [sp, #16]
 80114fa:	7013      	strb	r3, [r2, #0]
 80114fc:	463b      	mov	r3, r7
 80114fe:	461f      	mov	r7, r3
 8011500:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8011504:	3b01      	subs	r3, #1
 8011506:	2a39      	cmp	r2, #57	; 0x39
 8011508:	d050      	beq.n	80115ac <_dtoa_r+0xb74>
 801150a:	3201      	adds	r2, #1
 801150c:	701a      	strb	r2, [r3, #0]
 801150e:	e747      	b.n	80113a0 <_dtoa_r+0x968>
 8011510:	2a00      	cmp	r2, #0
 8011512:	dd03      	ble.n	801151c <_dtoa_r+0xae4>
 8011514:	2b39      	cmp	r3, #57	; 0x39
 8011516:	d0ee      	beq.n	80114f6 <_dtoa_r+0xabe>
 8011518:	3301      	adds	r3, #1
 801151a:	e7c7      	b.n	80114ac <_dtoa_r+0xa74>
 801151c:	9a08      	ldr	r2, [sp, #32]
 801151e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011520:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011524:	428a      	cmp	r2, r1
 8011526:	d02a      	beq.n	801157e <_dtoa_r+0xb46>
 8011528:	4659      	mov	r1, fp
 801152a:	2300      	movs	r3, #0
 801152c:	220a      	movs	r2, #10
 801152e:	4628      	mov	r0, r5
 8011530:	f000 fc76 	bl	8011e20 <__multadd>
 8011534:	45b0      	cmp	r8, r6
 8011536:	4683      	mov	fp, r0
 8011538:	f04f 0300 	mov.w	r3, #0
 801153c:	f04f 020a 	mov.w	r2, #10
 8011540:	4641      	mov	r1, r8
 8011542:	4628      	mov	r0, r5
 8011544:	d107      	bne.n	8011556 <_dtoa_r+0xb1e>
 8011546:	f000 fc6b 	bl	8011e20 <__multadd>
 801154a:	4680      	mov	r8, r0
 801154c:	4606      	mov	r6, r0
 801154e:	9b08      	ldr	r3, [sp, #32]
 8011550:	3301      	adds	r3, #1
 8011552:	9308      	str	r3, [sp, #32]
 8011554:	e775      	b.n	8011442 <_dtoa_r+0xa0a>
 8011556:	f000 fc63 	bl	8011e20 <__multadd>
 801155a:	4631      	mov	r1, r6
 801155c:	4680      	mov	r8, r0
 801155e:	2300      	movs	r3, #0
 8011560:	220a      	movs	r2, #10
 8011562:	4628      	mov	r0, r5
 8011564:	f000 fc5c 	bl	8011e20 <__multadd>
 8011568:	4606      	mov	r6, r0
 801156a:	e7f0      	b.n	801154e <_dtoa_r+0xb16>
 801156c:	f1b9 0f00 	cmp.w	r9, #0
 8011570:	bfcc      	ite	gt
 8011572:	464f      	movgt	r7, r9
 8011574:	2701      	movle	r7, #1
 8011576:	f04f 0800 	mov.w	r8, #0
 801157a:	9a03      	ldr	r2, [sp, #12]
 801157c:	4417      	add	r7, r2
 801157e:	4659      	mov	r1, fp
 8011580:	2201      	movs	r2, #1
 8011582:	4628      	mov	r0, r5
 8011584:	9308      	str	r3, [sp, #32]
 8011586:	f000 fe41 	bl	801220c <__lshift>
 801158a:	4621      	mov	r1, r4
 801158c:	4683      	mov	fp, r0
 801158e:	f000 fead 	bl	80122ec <__mcmp>
 8011592:	2800      	cmp	r0, #0
 8011594:	dcb2      	bgt.n	80114fc <_dtoa_r+0xac4>
 8011596:	d102      	bne.n	801159e <_dtoa_r+0xb66>
 8011598:	9b08      	ldr	r3, [sp, #32]
 801159a:	07db      	lsls	r3, r3, #31
 801159c:	d4ae      	bmi.n	80114fc <_dtoa_r+0xac4>
 801159e:	463b      	mov	r3, r7
 80115a0:	461f      	mov	r7, r3
 80115a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80115a6:	2a30      	cmp	r2, #48	; 0x30
 80115a8:	d0fa      	beq.n	80115a0 <_dtoa_r+0xb68>
 80115aa:	e6f9      	b.n	80113a0 <_dtoa_r+0x968>
 80115ac:	9a03      	ldr	r2, [sp, #12]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d1a5      	bne.n	80114fe <_dtoa_r+0xac6>
 80115b2:	2331      	movs	r3, #49	; 0x31
 80115b4:	f10a 0a01 	add.w	sl, sl, #1
 80115b8:	e779      	b.n	80114ae <_dtoa_r+0xa76>
 80115ba:	4b14      	ldr	r3, [pc, #80]	; (801160c <_dtoa_r+0xbd4>)
 80115bc:	f7ff baa8 	b.w	8010b10 <_dtoa_r+0xd8>
 80115c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f47f aa81 	bne.w	8010aca <_dtoa_r+0x92>
 80115c8:	4b11      	ldr	r3, [pc, #68]	; (8011610 <_dtoa_r+0xbd8>)
 80115ca:	f7ff baa1 	b.w	8010b10 <_dtoa_r+0xd8>
 80115ce:	f1b9 0f00 	cmp.w	r9, #0
 80115d2:	dc03      	bgt.n	80115dc <_dtoa_r+0xba4>
 80115d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80115d6:	2b02      	cmp	r3, #2
 80115d8:	f73f aecb 	bgt.w	8011372 <_dtoa_r+0x93a>
 80115dc:	9f03      	ldr	r7, [sp, #12]
 80115de:	4621      	mov	r1, r4
 80115e0:	4658      	mov	r0, fp
 80115e2:	f7ff f99b 	bl	801091c <quorem>
 80115e6:	9a03      	ldr	r2, [sp, #12]
 80115e8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80115ec:	f807 3b01 	strb.w	r3, [r7], #1
 80115f0:	1aba      	subs	r2, r7, r2
 80115f2:	4591      	cmp	r9, r2
 80115f4:	ddba      	ble.n	801156c <_dtoa_r+0xb34>
 80115f6:	4659      	mov	r1, fp
 80115f8:	2300      	movs	r3, #0
 80115fa:	220a      	movs	r2, #10
 80115fc:	4628      	mov	r0, r5
 80115fe:	f000 fc0f 	bl	8011e20 <__multadd>
 8011602:	4683      	mov	fp, r0
 8011604:	e7eb      	b.n	80115de <_dtoa_r+0xba6>
 8011606:	bf00      	nop
 8011608:	08013c20 	.word	0x08013c20
 801160c:	08013a90 	.word	0x08013a90
 8011610:	08013bb8 	.word	0x08013bb8

08011614 <fiprintf>:
 8011614:	b40e      	push	{r1, r2, r3}
 8011616:	b503      	push	{r0, r1, lr}
 8011618:	4601      	mov	r1, r0
 801161a:	ab03      	add	r3, sp, #12
 801161c:	4805      	ldr	r0, [pc, #20]	; (8011634 <fiprintf+0x20>)
 801161e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011622:	6800      	ldr	r0, [r0, #0]
 8011624:	9301      	str	r3, [sp, #4]
 8011626:	f001 fac5 	bl	8012bb4 <_vfiprintf_r>
 801162a:	b002      	add	sp, #8
 801162c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011630:	b003      	add	sp, #12
 8011632:	4770      	bx	lr
 8011634:	20000938 	.word	0x20000938

08011638 <rshift>:
 8011638:	6903      	ldr	r3, [r0, #16]
 801163a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801163e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011642:	f100 0414 	add.w	r4, r0, #20
 8011646:	ea4f 1261 	mov.w	r2, r1, asr #5
 801164a:	dd46      	ble.n	80116da <rshift+0xa2>
 801164c:	f011 011f 	ands.w	r1, r1, #31
 8011650:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011654:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011658:	d10c      	bne.n	8011674 <rshift+0x3c>
 801165a:	4629      	mov	r1, r5
 801165c:	f100 0710 	add.w	r7, r0, #16
 8011660:	42b1      	cmp	r1, r6
 8011662:	d335      	bcc.n	80116d0 <rshift+0x98>
 8011664:	1a9b      	subs	r3, r3, r2
 8011666:	009b      	lsls	r3, r3, #2
 8011668:	1eea      	subs	r2, r5, #3
 801166a:	4296      	cmp	r6, r2
 801166c:	bf38      	it	cc
 801166e:	2300      	movcc	r3, #0
 8011670:	4423      	add	r3, r4
 8011672:	e015      	b.n	80116a0 <rshift+0x68>
 8011674:	46a1      	mov	r9, r4
 8011676:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801167a:	f1c1 0820 	rsb	r8, r1, #32
 801167e:	40cf      	lsrs	r7, r1
 8011680:	f105 0e04 	add.w	lr, r5, #4
 8011684:	4576      	cmp	r6, lr
 8011686:	46f4      	mov	ip, lr
 8011688:	d816      	bhi.n	80116b8 <rshift+0x80>
 801168a:	1a9a      	subs	r2, r3, r2
 801168c:	0092      	lsls	r2, r2, #2
 801168e:	3a04      	subs	r2, #4
 8011690:	3501      	adds	r5, #1
 8011692:	42ae      	cmp	r6, r5
 8011694:	bf38      	it	cc
 8011696:	2200      	movcc	r2, #0
 8011698:	18a3      	adds	r3, r4, r2
 801169a:	50a7      	str	r7, [r4, r2]
 801169c:	b107      	cbz	r7, 80116a0 <rshift+0x68>
 801169e:	3304      	adds	r3, #4
 80116a0:	42a3      	cmp	r3, r4
 80116a2:	eba3 0204 	sub.w	r2, r3, r4
 80116a6:	bf08      	it	eq
 80116a8:	2300      	moveq	r3, #0
 80116aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80116ae:	6102      	str	r2, [r0, #16]
 80116b0:	bf08      	it	eq
 80116b2:	6143      	streq	r3, [r0, #20]
 80116b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116b8:	f8dc c000 	ldr.w	ip, [ip]
 80116bc:	fa0c fc08 	lsl.w	ip, ip, r8
 80116c0:	ea4c 0707 	orr.w	r7, ip, r7
 80116c4:	f849 7b04 	str.w	r7, [r9], #4
 80116c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80116cc:	40cf      	lsrs	r7, r1
 80116ce:	e7d9      	b.n	8011684 <rshift+0x4c>
 80116d0:	f851 cb04 	ldr.w	ip, [r1], #4
 80116d4:	f847 cf04 	str.w	ip, [r7, #4]!
 80116d8:	e7c2      	b.n	8011660 <rshift+0x28>
 80116da:	4623      	mov	r3, r4
 80116dc:	e7e0      	b.n	80116a0 <rshift+0x68>

080116de <__hexdig_fun>:
 80116de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80116e2:	2b09      	cmp	r3, #9
 80116e4:	d802      	bhi.n	80116ec <__hexdig_fun+0xe>
 80116e6:	3820      	subs	r0, #32
 80116e8:	b2c0      	uxtb	r0, r0
 80116ea:	4770      	bx	lr
 80116ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80116f0:	2b05      	cmp	r3, #5
 80116f2:	d801      	bhi.n	80116f8 <__hexdig_fun+0x1a>
 80116f4:	3847      	subs	r0, #71	; 0x47
 80116f6:	e7f7      	b.n	80116e8 <__hexdig_fun+0xa>
 80116f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80116fc:	2b05      	cmp	r3, #5
 80116fe:	d801      	bhi.n	8011704 <__hexdig_fun+0x26>
 8011700:	3827      	subs	r0, #39	; 0x27
 8011702:	e7f1      	b.n	80116e8 <__hexdig_fun+0xa>
 8011704:	2000      	movs	r0, #0
 8011706:	4770      	bx	lr

08011708 <__gethex>:
 8011708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801170c:	b08b      	sub	sp, #44	; 0x2c
 801170e:	9305      	str	r3, [sp, #20]
 8011710:	4bb2      	ldr	r3, [pc, #712]	; (80119dc <__gethex+0x2d4>)
 8011712:	9002      	str	r0, [sp, #8]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	468b      	mov	fp, r1
 8011718:	4618      	mov	r0, r3
 801171a:	4690      	mov	r8, r2
 801171c:	9303      	str	r3, [sp, #12]
 801171e:	f7ee fd39 	bl	8000194 <strlen>
 8011722:	4682      	mov	sl, r0
 8011724:	9b03      	ldr	r3, [sp, #12]
 8011726:	f8db 2000 	ldr.w	r2, [fp]
 801172a:	4403      	add	r3, r0
 801172c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011730:	9306      	str	r3, [sp, #24]
 8011732:	1c93      	adds	r3, r2, #2
 8011734:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011738:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801173c:	32fe      	adds	r2, #254	; 0xfe
 801173e:	18d1      	adds	r1, r2, r3
 8011740:	461f      	mov	r7, r3
 8011742:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011746:	9101      	str	r1, [sp, #4]
 8011748:	2830      	cmp	r0, #48	; 0x30
 801174a:	d0f8      	beq.n	801173e <__gethex+0x36>
 801174c:	f7ff ffc7 	bl	80116de <__hexdig_fun>
 8011750:	4604      	mov	r4, r0
 8011752:	2800      	cmp	r0, #0
 8011754:	d13a      	bne.n	80117cc <__gethex+0xc4>
 8011756:	4652      	mov	r2, sl
 8011758:	4638      	mov	r0, r7
 801175a:	9903      	ldr	r1, [sp, #12]
 801175c:	f001 fb70 	bl	8012e40 <strncmp>
 8011760:	4605      	mov	r5, r0
 8011762:	2800      	cmp	r0, #0
 8011764:	d166      	bne.n	8011834 <__gethex+0x12c>
 8011766:	f817 000a 	ldrb.w	r0, [r7, sl]
 801176a:	eb07 060a 	add.w	r6, r7, sl
 801176e:	f7ff ffb6 	bl	80116de <__hexdig_fun>
 8011772:	2800      	cmp	r0, #0
 8011774:	d060      	beq.n	8011838 <__gethex+0x130>
 8011776:	4633      	mov	r3, r6
 8011778:	7818      	ldrb	r0, [r3, #0]
 801177a:	461f      	mov	r7, r3
 801177c:	2830      	cmp	r0, #48	; 0x30
 801177e:	f103 0301 	add.w	r3, r3, #1
 8011782:	d0f9      	beq.n	8011778 <__gethex+0x70>
 8011784:	f7ff ffab 	bl	80116de <__hexdig_fun>
 8011788:	2301      	movs	r3, #1
 801178a:	fab0 f480 	clz	r4, r0
 801178e:	4635      	mov	r5, r6
 8011790:	0964      	lsrs	r4, r4, #5
 8011792:	9301      	str	r3, [sp, #4]
 8011794:	463a      	mov	r2, r7
 8011796:	4616      	mov	r6, r2
 8011798:	7830      	ldrb	r0, [r6, #0]
 801179a:	3201      	adds	r2, #1
 801179c:	f7ff ff9f 	bl	80116de <__hexdig_fun>
 80117a0:	2800      	cmp	r0, #0
 80117a2:	d1f8      	bne.n	8011796 <__gethex+0x8e>
 80117a4:	4652      	mov	r2, sl
 80117a6:	4630      	mov	r0, r6
 80117a8:	9903      	ldr	r1, [sp, #12]
 80117aa:	f001 fb49 	bl	8012e40 <strncmp>
 80117ae:	b980      	cbnz	r0, 80117d2 <__gethex+0xca>
 80117b0:	b94d      	cbnz	r5, 80117c6 <__gethex+0xbe>
 80117b2:	eb06 050a 	add.w	r5, r6, sl
 80117b6:	462a      	mov	r2, r5
 80117b8:	4616      	mov	r6, r2
 80117ba:	7830      	ldrb	r0, [r6, #0]
 80117bc:	3201      	adds	r2, #1
 80117be:	f7ff ff8e 	bl	80116de <__hexdig_fun>
 80117c2:	2800      	cmp	r0, #0
 80117c4:	d1f8      	bne.n	80117b8 <__gethex+0xb0>
 80117c6:	1bad      	subs	r5, r5, r6
 80117c8:	00ad      	lsls	r5, r5, #2
 80117ca:	e004      	b.n	80117d6 <__gethex+0xce>
 80117cc:	2400      	movs	r4, #0
 80117ce:	4625      	mov	r5, r4
 80117d0:	e7e0      	b.n	8011794 <__gethex+0x8c>
 80117d2:	2d00      	cmp	r5, #0
 80117d4:	d1f7      	bne.n	80117c6 <__gethex+0xbe>
 80117d6:	7833      	ldrb	r3, [r6, #0]
 80117d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80117dc:	2b50      	cmp	r3, #80	; 0x50
 80117de:	d139      	bne.n	8011854 <__gethex+0x14c>
 80117e0:	7873      	ldrb	r3, [r6, #1]
 80117e2:	2b2b      	cmp	r3, #43	; 0x2b
 80117e4:	d02a      	beq.n	801183c <__gethex+0x134>
 80117e6:	2b2d      	cmp	r3, #45	; 0x2d
 80117e8:	d02c      	beq.n	8011844 <__gethex+0x13c>
 80117ea:	f04f 0900 	mov.w	r9, #0
 80117ee:	1c71      	adds	r1, r6, #1
 80117f0:	7808      	ldrb	r0, [r1, #0]
 80117f2:	f7ff ff74 	bl	80116de <__hexdig_fun>
 80117f6:	1e43      	subs	r3, r0, #1
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	2b18      	cmp	r3, #24
 80117fc:	d82a      	bhi.n	8011854 <__gethex+0x14c>
 80117fe:	f1a0 0210 	sub.w	r2, r0, #16
 8011802:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011806:	f7ff ff6a 	bl	80116de <__hexdig_fun>
 801180a:	1e43      	subs	r3, r0, #1
 801180c:	b2db      	uxtb	r3, r3
 801180e:	2b18      	cmp	r3, #24
 8011810:	d91b      	bls.n	801184a <__gethex+0x142>
 8011812:	f1b9 0f00 	cmp.w	r9, #0
 8011816:	d000      	beq.n	801181a <__gethex+0x112>
 8011818:	4252      	negs	r2, r2
 801181a:	4415      	add	r5, r2
 801181c:	f8cb 1000 	str.w	r1, [fp]
 8011820:	b1d4      	cbz	r4, 8011858 <__gethex+0x150>
 8011822:	9b01      	ldr	r3, [sp, #4]
 8011824:	2b00      	cmp	r3, #0
 8011826:	bf14      	ite	ne
 8011828:	2700      	movne	r7, #0
 801182a:	2706      	moveq	r7, #6
 801182c:	4638      	mov	r0, r7
 801182e:	b00b      	add	sp, #44	; 0x2c
 8011830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011834:	463e      	mov	r6, r7
 8011836:	4625      	mov	r5, r4
 8011838:	2401      	movs	r4, #1
 801183a:	e7cc      	b.n	80117d6 <__gethex+0xce>
 801183c:	f04f 0900 	mov.w	r9, #0
 8011840:	1cb1      	adds	r1, r6, #2
 8011842:	e7d5      	b.n	80117f0 <__gethex+0xe8>
 8011844:	f04f 0901 	mov.w	r9, #1
 8011848:	e7fa      	b.n	8011840 <__gethex+0x138>
 801184a:	230a      	movs	r3, #10
 801184c:	fb03 0202 	mla	r2, r3, r2, r0
 8011850:	3a10      	subs	r2, #16
 8011852:	e7d6      	b.n	8011802 <__gethex+0xfa>
 8011854:	4631      	mov	r1, r6
 8011856:	e7e1      	b.n	801181c <__gethex+0x114>
 8011858:	4621      	mov	r1, r4
 801185a:	1bf3      	subs	r3, r6, r7
 801185c:	3b01      	subs	r3, #1
 801185e:	2b07      	cmp	r3, #7
 8011860:	dc0a      	bgt.n	8011878 <__gethex+0x170>
 8011862:	9802      	ldr	r0, [sp, #8]
 8011864:	f000 fa7a 	bl	8011d5c <_Balloc>
 8011868:	4604      	mov	r4, r0
 801186a:	b940      	cbnz	r0, 801187e <__gethex+0x176>
 801186c:	4602      	mov	r2, r0
 801186e:	21de      	movs	r1, #222	; 0xde
 8011870:	4b5b      	ldr	r3, [pc, #364]	; (80119e0 <__gethex+0x2d8>)
 8011872:	485c      	ldr	r0, [pc, #368]	; (80119e4 <__gethex+0x2dc>)
 8011874:	f7ff f834 	bl	80108e0 <__assert_func>
 8011878:	3101      	adds	r1, #1
 801187a:	105b      	asrs	r3, r3, #1
 801187c:	e7ef      	b.n	801185e <__gethex+0x156>
 801187e:	f04f 0b00 	mov.w	fp, #0
 8011882:	f100 0914 	add.w	r9, r0, #20
 8011886:	f1ca 0301 	rsb	r3, sl, #1
 801188a:	f8cd 9010 	str.w	r9, [sp, #16]
 801188e:	f8cd b004 	str.w	fp, [sp, #4]
 8011892:	9308      	str	r3, [sp, #32]
 8011894:	42b7      	cmp	r7, r6
 8011896:	d33f      	bcc.n	8011918 <__gethex+0x210>
 8011898:	9f04      	ldr	r7, [sp, #16]
 801189a:	9b01      	ldr	r3, [sp, #4]
 801189c:	f847 3b04 	str.w	r3, [r7], #4
 80118a0:	eba7 0709 	sub.w	r7, r7, r9
 80118a4:	10bf      	asrs	r7, r7, #2
 80118a6:	6127      	str	r7, [r4, #16]
 80118a8:	4618      	mov	r0, r3
 80118aa:	f000 fb49 	bl	8011f40 <__hi0bits>
 80118ae:	017f      	lsls	r7, r7, #5
 80118b0:	f8d8 6000 	ldr.w	r6, [r8]
 80118b4:	1a3f      	subs	r7, r7, r0
 80118b6:	42b7      	cmp	r7, r6
 80118b8:	dd62      	ble.n	8011980 <__gethex+0x278>
 80118ba:	1bbf      	subs	r7, r7, r6
 80118bc:	4639      	mov	r1, r7
 80118be:	4620      	mov	r0, r4
 80118c0:	f000 fee3 	bl	801268a <__any_on>
 80118c4:	4682      	mov	sl, r0
 80118c6:	b1a8      	cbz	r0, 80118f4 <__gethex+0x1ec>
 80118c8:	f04f 0a01 	mov.w	sl, #1
 80118cc:	1e7b      	subs	r3, r7, #1
 80118ce:	1159      	asrs	r1, r3, #5
 80118d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80118d4:	f003 021f 	and.w	r2, r3, #31
 80118d8:	fa0a f202 	lsl.w	r2, sl, r2
 80118dc:	420a      	tst	r2, r1
 80118de:	d009      	beq.n	80118f4 <__gethex+0x1ec>
 80118e0:	4553      	cmp	r3, sl
 80118e2:	dd05      	ble.n	80118f0 <__gethex+0x1e8>
 80118e4:	4620      	mov	r0, r4
 80118e6:	1eb9      	subs	r1, r7, #2
 80118e8:	f000 fecf 	bl	801268a <__any_on>
 80118ec:	2800      	cmp	r0, #0
 80118ee:	d144      	bne.n	801197a <__gethex+0x272>
 80118f0:	f04f 0a02 	mov.w	sl, #2
 80118f4:	4639      	mov	r1, r7
 80118f6:	4620      	mov	r0, r4
 80118f8:	f7ff fe9e 	bl	8011638 <rshift>
 80118fc:	443d      	add	r5, r7
 80118fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011902:	42ab      	cmp	r3, r5
 8011904:	da4a      	bge.n	801199c <__gethex+0x294>
 8011906:	4621      	mov	r1, r4
 8011908:	9802      	ldr	r0, [sp, #8]
 801190a:	f000 fa67 	bl	8011ddc <_Bfree>
 801190e:	2300      	movs	r3, #0
 8011910:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011912:	27a3      	movs	r7, #163	; 0xa3
 8011914:	6013      	str	r3, [r2, #0]
 8011916:	e789      	b.n	801182c <__gethex+0x124>
 8011918:	1e73      	subs	r3, r6, #1
 801191a:	9a06      	ldr	r2, [sp, #24]
 801191c:	9307      	str	r3, [sp, #28]
 801191e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011922:	4293      	cmp	r3, r2
 8011924:	d019      	beq.n	801195a <__gethex+0x252>
 8011926:	f1bb 0f20 	cmp.w	fp, #32
 801192a:	d107      	bne.n	801193c <__gethex+0x234>
 801192c:	9b04      	ldr	r3, [sp, #16]
 801192e:	9a01      	ldr	r2, [sp, #4]
 8011930:	f843 2b04 	str.w	r2, [r3], #4
 8011934:	9304      	str	r3, [sp, #16]
 8011936:	2300      	movs	r3, #0
 8011938:	469b      	mov	fp, r3
 801193a:	9301      	str	r3, [sp, #4]
 801193c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011940:	f7ff fecd 	bl	80116de <__hexdig_fun>
 8011944:	9b01      	ldr	r3, [sp, #4]
 8011946:	f000 000f 	and.w	r0, r0, #15
 801194a:	fa00 f00b 	lsl.w	r0, r0, fp
 801194e:	4303      	orrs	r3, r0
 8011950:	9301      	str	r3, [sp, #4]
 8011952:	f10b 0b04 	add.w	fp, fp, #4
 8011956:	9b07      	ldr	r3, [sp, #28]
 8011958:	e00d      	b.n	8011976 <__gethex+0x26e>
 801195a:	9a08      	ldr	r2, [sp, #32]
 801195c:	1e73      	subs	r3, r6, #1
 801195e:	4413      	add	r3, r2
 8011960:	42bb      	cmp	r3, r7
 8011962:	d3e0      	bcc.n	8011926 <__gethex+0x21e>
 8011964:	4618      	mov	r0, r3
 8011966:	4652      	mov	r2, sl
 8011968:	9903      	ldr	r1, [sp, #12]
 801196a:	9309      	str	r3, [sp, #36]	; 0x24
 801196c:	f001 fa68 	bl	8012e40 <strncmp>
 8011970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011972:	2800      	cmp	r0, #0
 8011974:	d1d7      	bne.n	8011926 <__gethex+0x21e>
 8011976:	461e      	mov	r6, r3
 8011978:	e78c      	b.n	8011894 <__gethex+0x18c>
 801197a:	f04f 0a03 	mov.w	sl, #3
 801197e:	e7b9      	b.n	80118f4 <__gethex+0x1ec>
 8011980:	da09      	bge.n	8011996 <__gethex+0x28e>
 8011982:	1bf7      	subs	r7, r6, r7
 8011984:	4621      	mov	r1, r4
 8011986:	463a      	mov	r2, r7
 8011988:	9802      	ldr	r0, [sp, #8]
 801198a:	f000 fc3f 	bl	801220c <__lshift>
 801198e:	4604      	mov	r4, r0
 8011990:	1bed      	subs	r5, r5, r7
 8011992:	f100 0914 	add.w	r9, r0, #20
 8011996:	f04f 0a00 	mov.w	sl, #0
 801199a:	e7b0      	b.n	80118fe <__gethex+0x1f6>
 801199c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80119a0:	42a8      	cmp	r0, r5
 80119a2:	dd72      	ble.n	8011a8a <__gethex+0x382>
 80119a4:	1b45      	subs	r5, r0, r5
 80119a6:	42ae      	cmp	r6, r5
 80119a8:	dc35      	bgt.n	8011a16 <__gethex+0x30e>
 80119aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80119ae:	2b02      	cmp	r3, #2
 80119b0:	d029      	beq.n	8011a06 <__gethex+0x2fe>
 80119b2:	2b03      	cmp	r3, #3
 80119b4:	d02b      	beq.n	8011a0e <__gethex+0x306>
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	d11c      	bne.n	80119f4 <__gethex+0x2ec>
 80119ba:	42ae      	cmp	r6, r5
 80119bc:	d11a      	bne.n	80119f4 <__gethex+0x2ec>
 80119be:	2e01      	cmp	r6, #1
 80119c0:	d112      	bne.n	80119e8 <__gethex+0x2e0>
 80119c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80119c6:	9a05      	ldr	r2, [sp, #20]
 80119c8:	2762      	movs	r7, #98	; 0x62
 80119ca:	6013      	str	r3, [r2, #0]
 80119cc:	2301      	movs	r3, #1
 80119ce:	6123      	str	r3, [r4, #16]
 80119d0:	f8c9 3000 	str.w	r3, [r9]
 80119d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80119d6:	601c      	str	r4, [r3, #0]
 80119d8:	e728      	b.n	801182c <__gethex+0x124>
 80119da:	bf00      	nop
 80119dc:	08013c98 	.word	0x08013c98
 80119e0:	08013c20 	.word	0x08013c20
 80119e4:	08013c31 	.word	0x08013c31
 80119e8:	4620      	mov	r0, r4
 80119ea:	1e71      	subs	r1, r6, #1
 80119ec:	f000 fe4d 	bl	801268a <__any_on>
 80119f0:	2800      	cmp	r0, #0
 80119f2:	d1e6      	bne.n	80119c2 <__gethex+0x2ba>
 80119f4:	4621      	mov	r1, r4
 80119f6:	9802      	ldr	r0, [sp, #8]
 80119f8:	f000 f9f0 	bl	8011ddc <_Bfree>
 80119fc:	2300      	movs	r3, #0
 80119fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a00:	2750      	movs	r7, #80	; 0x50
 8011a02:	6013      	str	r3, [r2, #0]
 8011a04:	e712      	b.n	801182c <__gethex+0x124>
 8011a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d1f3      	bne.n	80119f4 <__gethex+0x2ec>
 8011a0c:	e7d9      	b.n	80119c2 <__gethex+0x2ba>
 8011a0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d1d6      	bne.n	80119c2 <__gethex+0x2ba>
 8011a14:	e7ee      	b.n	80119f4 <__gethex+0x2ec>
 8011a16:	1e6f      	subs	r7, r5, #1
 8011a18:	f1ba 0f00 	cmp.w	sl, #0
 8011a1c:	d132      	bne.n	8011a84 <__gethex+0x37c>
 8011a1e:	b127      	cbz	r7, 8011a2a <__gethex+0x322>
 8011a20:	4639      	mov	r1, r7
 8011a22:	4620      	mov	r0, r4
 8011a24:	f000 fe31 	bl	801268a <__any_on>
 8011a28:	4682      	mov	sl, r0
 8011a2a:	2101      	movs	r1, #1
 8011a2c:	117b      	asrs	r3, r7, #5
 8011a2e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011a32:	f007 071f 	and.w	r7, r7, #31
 8011a36:	fa01 f707 	lsl.w	r7, r1, r7
 8011a3a:	421f      	tst	r7, r3
 8011a3c:	f04f 0702 	mov.w	r7, #2
 8011a40:	4629      	mov	r1, r5
 8011a42:	4620      	mov	r0, r4
 8011a44:	bf18      	it	ne
 8011a46:	f04a 0a02 	orrne.w	sl, sl, #2
 8011a4a:	1b76      	subs	r6, r6, r5
 8011a4c:	f7ff fdf4 	bl	8011638 <rshift>
 8011a50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011a54:	f1ba 0f00 	cmp.w	sl, #0
 8011a58:	d048      	beq.n	8011aec <__gethex+0x3e4>
 8011a5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011a5e:	2b02      	cmp	r3, #2
 8011a60:	d015      	beq.n	8011a8e <__gethex+0x386>
 8011a62:	2b03      	cmp	r3, #3
 8011a64:	d017      	beq.n	8011a96 <__gethex+0x38e>
 8011a66:	2b01      	cmp	r3, #1
 8011a68:	d109      	bne.n	8011a7e <__gethex+0x376>
 8011a6a:	f01a 0f02 	tst.w	sl, #2
 8011a6e:	d006      	beq.n	8011a7e <__gethex+0x376>
 8011a70:	f8d9 0000 	ldr.w	r0, [r9]
 8011a74:	ea4a 0a00 	orr.w	sl, sl, r0
 8011a78:	f01a 0f01 	tst.w	sl, #1
 8011a7c:	d10e      	bne.n	8011a9c <__gethex+0x394>
 8011a7e:	f047 0710 	orr.w	r7, r7, #16
 8011a82:	e033      	b.n	8011aec <__gethex+0x3e4>
 8011a84:	f04f 0a01 	mov.w	sl, #1
 8011a88:	e7cf      	b.n	8011a2a <__gethex+0x322>
 8011a8a:	2701      	movs	r7, #1
 8011a8c:	e7e2      	b.n	8011a54 <__gethex+0x34c>
 8011a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a90:	f1c3 0301 	rsb	r3, r3, #1
 8011a94:	9315      	str	r3, [sp, #84]	; 0x54
 8011a96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d0f0      	beq.n	8011a7e <__gethex+0x376>
 8011a9c:	f04f 0c00 	mov.w	ip, #0
 8011aa0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011aa4:	f104 0314 	add.w	r3, r4, #20
 8011aa8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011aac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ab6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011aba:	d01c      	beq.n	8011af6 <__gethex+0x3ee>
 8011abc:	3201      	adds	r2, #1
 8011abe:	6002      	str	r2, [r0, #0]
 8011ac0:	2f02      	cmp	r7, #2
 8011ac2:	f104 0314 	add.w	r3, r4, #20
 8011ac6:	d13d      	bne.n	8011b44 <__gethex+0x43c>
 8011ac8:	f8d8 2000 	ldr.w	r2, [r8]
 8011acc:	3a01      	subs	r2, #1
 8011ace:	42b2      	cmp	r2, r6
 8011ad0:	d10a      	bne.n	8011ae8 <__gethex+0x3e0>
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	1171      	asrs	r1, r6, #5
 8011ad6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011ada:	f006 061f 	and.w	r6, r6, #31
 8011ade:	fa02 f606 	lsl.w	r6, r2, r6
 8011ae2:	421e      	tst	r6, r3
 8011ae4:	bf18      	it	ne
 8011ae6:	4617      	movne	r7, r2
 8011ae8:	f047 0720 	orr.w	r7, r7, #32
 8011aec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011aee:	601c      	str	r4, [r3, #0]
 8011af0:	9b05      	ldr	r3, [sp, #20]
 8011af2:	601d      	str	r5, [r3, #0]
 8011af4:	e69a      	b.n	801182c <__gethex+0x124>
 8011af6:	4299      	cmp	r1, r3
 8011af8:	f843 cc04 	str.w	ip, [r3, #-4]
 8011afc:	d8d8      	bhi.n	8011ab0 <__gethex+0x3a8>
 8011afe:	68a3      	ldr	r3, [r4, #8]
 8011b00:	459b      	cmp	fp, r3
 8011b02:	db17      	blt.n	8011b34 <__gethex+0x42c>
 8011b04:	6861      	ldr	r1, [r4, #4]
 8011b06:	9802      	ldr	r0, [sp, #8]
 8011b08:	3101      	adds	r1, #1
 8011b0a:	f000 f927 	bl	8011d5c <_Balloc>
 8011b0e:	4681      	mov	r9, r0
 8011b10:	b918      	cbnz	r0, 8011b1a <__gethex+0x412>
 8011b12:	4602      	mov	r2, r0
 8011b14:	2184      	movs	r1, #132	; 0x84
 8011b16:	4b19      	ldr	r3, [pc, #100]	; (8011b7c <__gethex+0x474>)
 8011b18:	e6ab      	b.n	8011872 <__gethex+0x16a>
 8011b1a:	6922      	ldr	r2, [r4, #16]
 8011b1c:	f104 010c 	add.w	r1, r4, #12
 8011b20:	3202      	adds	r2, #2
 8011b22:	0092      	lsls	r2, r2, #2
 8011b24:	300c      	adds	r0, #12
 8011b26:	f7fd fbc9 	bl	800f2bc <memcpy>
 8011b2a:	4621      	mov	r1, r4
 8011b2c:	9802      	ldr	r0, [sp, #8]
 8011b2e:	f000 f955 	bl	8011ddc <_Bfree>
 8011b32:	464c      	mov	r4, r9
 8011b34:	6923      	ldr	r3, [r4, #16]
 8011b36:	1c5a      	adds	r2, r3, #1
 8011b38:	6122      	str	r2, [r4, #16]
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b40:	615a      	str	r2, [r3, #20]
 8011b42:	e7bd      	b.n	8011ac0 <__gethex+0x3b8>
 8011b44:	6922      	ldr	r2, [r4, #16]
 8011b46:	455a      	cmp	r2, fp
 8011b48:	dd0b      	ble.n	8011b62 <__gethex+0x45a>
 8011b4a:	2101      	movs	r1, #1
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	f7ff fd73 	bl	8011638 <rshift>
 8011b52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b56:	3501      	adds	r5, #1
 8011b58:	42ab      	cmp	r3, r5
 8011b5a:	f6ff aed4 	blt.w	8011906 <__gethex+0x1fe>
 8011b5e:	2701      	movs	r7, #1
 8011b60:	e7c2      	b.n	8011ae8 <__gethex+0x3e0>
 8011b62:	f016 061f 	ands.w	r6, r6, #31
 8011b66:	d0fa      	beq.n	8011b5e <__gethex+0x456>
 8011b68:	4453      	add	r3, sl
 8011b6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011b6e:	f000 f9e7 	bl	8011f40 <__hi0bits>
 8011b72:	f1c6 0620 	rsb	r6, r6, #32
 8011b76:	42b0      	cmp	r0, r6
 8011b78:	dbe7      	blt.n	8011b4a <__gethex+0x442>
 8011b7a:	e7f0      	b.n	8011b5e <__gethex+0x456>
 8011b7c:	08013c20 	.word	0x08013c20

08011b80 <L_shift>:
 8011b80:	f1c2 0208 	rsb	r2, r2, #8
 8011b84:	0092      	lsls	r2, r2, #2
 8011b86:	b570      	push	{r4, r5, r6, lr}
 8011b88:	f1c2 0620 	rsb	r6, r2, #32
 8011b8c:	6843      	ldr	r3, [r0, #4]
 8011b8e:	6804      	ldr	r4, [r0, #0]
 8011b90:	fa03 f506 	lsl.w	r5, r3, r6
 8011b94:	432c      	orrs	r4, r5
 8011b96:	40d3      	lsrs	r3, r2
 8011b98:	6004      	str	r4, [r0, #0]
 8011b9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8011b9e:	4288      	cmp	r0, r1
 8011ba0:	d3f4      	bcc.n	8011b8c <L_shift+0xc>
 8011ba2:	bd70      	pop	{r4, r5, r6, pc}

08011ba4 <__match>:
 8011ba4:	b530      	push	{r4, r5, lr}
 8011ba6:	6803      	ldr	r3, [r0, #0]
 8011ba8:	3301      	adds	r3, #1
 8011baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011bae:	b914      	cbnz	r4, 8011bb6 <__match+0x12>
 8011bb0:	6003      	str	r3, [r0, #0]
 8011bb2:	2001      	movs	r0, #1
 8011bb4:	bd30      	pop	{r4, r5, pc}
 8011bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011bbe:	2d19      	cmp	r5, #25
 8011bc0:	bf98      	it	ls
 8011bc2:	3220      	addls	r2, #32
 8011bc4:	42a2      	cmp	r2, r4
 8011bc6:	d0f0      	beq.n	8011baa <__match+0x6>
 8011bc8:	2000      	movs	r0, #0
 8011bca:	e7f3      	b.n	8011bb4 <__match+0x10>

08011bcc <__hexnan>:
 8011bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd0:	2500      	movs	r5, #0
 8011bd2:	680b      	ldr	r3, [r1, #0]
 8011bd4:	4682      	mov	sl, r0
 8011bd6:	115e      	asrs	r6, r3, #5
 8011bd8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011bdc:	f013 031f 	ands.w	r3, r3, #31
 8011be0:	bf18      	it	ne
 8011be2:	3604      	addne	r6, #4
 8011be4:	1f37      	subs	r7, r6, #4
 8011be6:	46b9      	mov	r9, r7
 8011be8:	463c      	mov	r4, r7
 8011bea:	46ab      	mov	fp, r5
 8011bec:	b087      	sub	sp, #28
 8011bee:	4690      	mov	r8, r2
 8011bf0:	6802      	ldr	r2, [r0, #0]
 8011bf2:	9301      	str	r3, [sp, #4]
 8011bf4:	f846 5c04 	str.w	r5, [r6, #-4]
 8011bf8:	9502      	str	r5, [sp, #8]
 8011bfa:	7851      	ldrb	r1, [r2, #1]
 8011bfc:	1c53      	adds	r3, r2, #1
 8011bfe:	9303      	str	r3, [sp, #12]
 8011c00:	b341      	cbz	r1, 8011c54 <__hexnan+0x88>
 8011c02:	4608      	mov	r0, r1
 8011c04:	9205      	str	r2, [sp, #20]
 8011c06:	9104      	str	r1, [sp, #16]
 8011c08:	f7ff fd69 	bl	80116de <__hexdig_fun>
 8011c0c:	2800      	cmp	r0, #0
 8011c0e:	d14f      	bne.n	8011cb0 <__hexnan+0xe4>
 8011c10:	9904      	ldr	r1, [sp, #16]
 8011c12:	9a05      	ldr	r2, [sp, #20]
 8011c14:	2920      	cmp	r1, #32
 8011c16:	d818      	bhi.n	8011c4a <__hexnan+0x7e>
 8011c18:	9b02      	ldr	r3, [sp, #8]
 8011c1a:	459b      	cmp	fp, r3
 8011c1c:	dd13      	ble.n	8011c46 <__hexnan+0x7a>
 8011c1e:	454c      	cmp	r4, r9
 8011c20:	d206      	bcs.n	8011c30 <__hexnan+0x64>
 8011c22:	2d07      	cmp	r5, #7
 8011c24:	dc04      	bgt.n	8011c30 <__hexnan+0x64>
 8011c26:	462a      	mov	r2, r5
 8011c28:	4649      	mov	r1, r9
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	f7ff ffa8 	bl	8011b80 <L_shift>
 8011c30:	4544      	cmp	r4, r8
 8011c32:	d950      	bls.n	8011cd6 <__hexnan+0x10a>
 8011c34:	2300      	movs	r3, #0
 8011c36:	f1a4 0904 	sub.w	r9, r4, #4
 8011c3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8011c3e:	461d      	mov	r5, r3
 8011c40:	464c      	mov	r4, r9
 8011c42:	f8cd b008 	str.w	fp, [sp, #8]
 8011c46:	9a03      	ldr	r2, [sp, #12]
 8011c48:	e7d7      	b.n	8011bfa <__hexnan+0x2e>
 8011c4a:	2929      	cmp	r1, #41	; 0x29
 8011c4c:	d156      	bne.n	8011cfc <__hexnan+0x130>
 8011c4e:	3202      	adds	r2, #2
 8011c50:	f8ca 2000 	str.w	r2, [sl]
 8011c54:	f1bb 0f00 	cmp.w	fp, #0
 8011c58:	d050      	beq.n	8011cfc <__hexnan+0x130>
 8011c5a:	454c      	cmp	r4, r9
 8011c5c:	d206      	bcs.n	8011c6c <__hexnan+0xa0>
 8011c5e:	2d07      	cmp	r5, #7
 8011c60:	dc04      	bgt.n	8011c6c <__hexnan+0xa0>
 8011c62:	462a      	mov	r2, r5
 8011c64:	4649      	mov	r1, r9
 8011c66:	4620      	mov	r0, r4
 8011c68:	f7ff ff8a 	bl	8011b80 <L_shift>
 8011c6c:	4544      	cmp	r4, r8
 8011c6e:	d934      	bls.n	8011cda <__hexnan+0x10e>
 8011c70:	4623      	mov	r3, r4
 8011c72:	f1a8 0204 	sub.w	r2, r8, #4
 8011c76:	f853 1b04 	ldr.w	r1, [r3], #4
 8011c7a:	429f      	cmp	r7, r3
 8011c7c:	f842 1f04 	str.w	r1, [r2, #4]!
 8011c80:	d2f9      	bcs.n	8011c76 <__hexnan+0xaa>
 8011c82:	1b3b      	subs	r3, r7, r4
 8011c84:	f023 0303 	bic.w	r3, r3, #3
 8011c88:	3304      	adds	r3, #4
 8011c8a:	3401      	adds	r4, #1
 8011c8c:	3e03      	subs	r6, #3
 8011c8e:	42b4      	cmp	r4, r6
 8011c90:	bf88      	it	hi
 8011c92:	2304      	movhi	r3, #4
 8011c94:	2200      	movs	r2, #0
 8011c96:	4443      	add	r3, r8
 8011c98:	f843 2b04 	str.w	r2, [r3], #4
 8011c9c:	429f      	cmp	r7, r3
 8011c9e:	d2fb      	bcs.n	8011c98 <__hexnan+0xcc>
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	b91b      	cbnz	r3, 8011cac <__hexnan+0xe0>
 8011ca4:	4547      	cmp	r7, r8
 8011ca6:	d127      	bne.n	8011cf8 <__hexnan+0x12c>
 8011ca8:	2301      	movs	r3, #1
 8011caa:	603b      	str	r3, [r7, #0]
 8011cac:	2005      	movs	r0, #5
 8011cae:	e026      	b.n	8011cfe <__hexnan+0x132>
 8011cb0:	3501      	adds	r5, #1
 8011cb2:	2d08      	cmp	r5, #8
 8011cb4:	f10b 0b01 	add.w	fp, fp, #1
 8011cb8:	dd06      	ble.n	8011cc8 <__hexnan+0xfc>
 8011cba:	4544      	cmp	r4, r8
 8011cbc:	d9c3      	bls.n	8011c46 <__hexnan+0x7a>
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	2501      	movs	r5, #1
 8011cc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8011cc6:	3c04      	subs	r4, #4
 8011cc8:	6822      	ldr	r2, [r4, #0]
 8011cca:	f000 000f 	and.w	r0, r0, #15
 8011cce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011cd2:	6022      	str	r2, [r4, #0]
 8011cd4:	e7b7      	b.n	8011c46 <__hexnan+0x7a>
 8011cd6:	2508      	movs	r5, #8
 8011cd8:	e7b5      	b.n	8011c46 <__hexnan+0x7a>
 8011cda:	9b01      	ldr	r3, [sp, #4]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d0df      	beq.n	8011ca0 <__hexnan+0xd4>
 8011ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ce4:	f1c3 0320 	rsb	r3, r3, #32
 8011ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8011cec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011cf0:	401a      	ands	r2, r3
 8011cf2:	f846 2c04 	str.w	r2, [r6, #-4]
 8011cf6:	e7d3      	b.n	8011ca0 <__hexnan+0xd4>
 8011cf8:	3f04      	subs	r7, #4
 8011cfa:	e7d1      	b.n	8011ca0 <__hexnan+0xd4>
 8011cfc:	2004      	movs	r0, #4
 8011cfe:	b007      	add	sp, #28
 8011d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d04 <_localeconv_r>:
 8011d04:	4800      	ldr	r0, [pc, #0]	; (8011d08 <_localeconv_r+0x4>)
 8011d06:	4770      	bx	lr
 8011d08:	20000a90 	.word	0x20000a90

08011d0c <malloc>:
 8011d0c:	4b02      	ldr	r3, [pc, #8]	; (8011d18 <malloc+0xc>)
 8011d0e:	4601      	mov	r1, r0
 8011d10:	6818      	ldr	r0, [r3, #0]
 8011d12:	f000 bd57 	b.w	80127c4 <_malloc_r>
 8011d16:	bf00      	nop
 8011d18:	20000938 	.word	0x20000938

08011d1c <__ascii_mbtowc>:
 8011d1c:	b082      	sub	sp, #8
 8011d1e:	b901      	cbnz	r1, 8011d22 <__ascii_mbtowc+0x6>
 8011d20:	a901      	add	r1, sp, #4
 8011d22:	b142      	cbz	r2, 8011d36 <__ascii_mbtowc+0x1a>
 8011d24:	b14b      	cbz	r3, 8011d3a <__ascii_mbtowc+0x1e>
 8011d26:	7813      	ldrb	r3, [r2, #0]
 8011d28:	600b      	str	r3, [r1, #0]
 8011d2a:	7812      	ldrb	r2, [r2, #0]
 8011d2c:	1e10      	subs	r0, r2, #0
 8011d2e:	bf18      	it	ne
 8011d30:	2001      	movne	r0, #1
 8011d32:	b002      	add	sp, #8
 8011d34:	4770      	bx	lr
 8011d36:	4610      	mov	r0, r2
 8011d38:	e7fb      	b.n	8011d32 <__ascii_mbtowc+0x16>
 8011d3a:	f06f 0001 	mvn.w	r0, #1
 8011d3e:	e7f8      	b.n	8011d32 <__ascii_mbtowc+0x16>

08011d40 <memchr>:
 8011d40:	4603      	mov	r3, r0
 8011d42:	b510      	push	{r4, lr}
 8011d44:	b2c9      	uxtb	r1, r1
 8011d46:	4402      	add	r2, r0
 8011d48:	4293      	cmp	r3, r2
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	d101      	bne.n	8011d52 <memchr+0x12>
 8011d4e:	2000      	movs	r0, #0
 8011d50:	e003      	b.n	8011d5a <memchr+0x1a>
 8011d52:	7804      	ldrb	r4, [r0, #0]
 8011d54:	3301      	adds	r3, #1
 8011d56:	428c      	cmp	r4, r1
 8011d58:	d1f6      	bne.n	8011d48 <memchr+0x8>
 8011d5a:	bd10      	pop	{r4, pc}

08011d5c <_Balloc>:
 8011d5c:	b570      	push	{r4, r5, r6, lr}
 8011d5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d60:	4604      	mov	r4, r0
 8011d62:	460d      	mov	r5, r1
 8011d64:	b976      	cbnz	r6, 8011d84 <_Balloc+0x28>
 8011d66:	2010      	movs	r0, #16
 8011d68:	f7ff ffd0 	bl	8011d0c <malloc>
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	6260      	str	r0, [r4, #36]	; 0x24
 8011d70:	b920      	cbnz	r0, 8011d7c <_Balloc+0x20>
 8011d72:	2166      	movs	r1, #102	; 0x66
 8011d74:	4b17      	ldr	r3, [pc, #92]	; (8011dd4 <_Balloc+0x78>)
 8011d76:	4818      	ldr	r0, [pc, #96]	; (8011dd8 <_Balloc+0x7c>)
 8011d78:	f7fe fdb2 	bl	80108e0 <__assert_func>
 8011d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d80:	6006      	str	r6, [r0, #0]
 8011d82:	60c6      	str	r6, [r0, #12]
 8011d84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011d86:	68f3      	ldr	r3, [r6, #12]
 8011d88:	b183      	cbz	r3, 8011dac <_Balloc+0x50>
 8011d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011d92:	b9b8      	cbnz	r0, 8011dc4 <_Balloc+0x68>
 8011d94:	2101      	movs	r1, #1
 8011d96:	fa01 f605 	lsl.w	r6, r1, r5
 8011d9a:	1d72      	adds	r2, r6, #5
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	0092      	lsls	r2, r2, #2
 8011da0:	f000 fc94 	bl	80126cc <_calloc_r>
 8011da4:	b160      	cbz	r0, 8011dc0 <_Balloc+0x64>
 8011da6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011daa:	e00e      	b.n	8011dca <_Balloc+0x6e>
 8011dac:	2221      	movs	r2, #33	; 0x21
 8011dae:	2104      	movs	r1, #4
 8011db0:	4620      	mov	r0, r4
 8011db2:	f000 fc8b 	bl	80126cc <_calloc_r>
 8011db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011db8:	60f0      	str	r0, [r6, #12]
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d1e4      	bne.n	8011d8a <_Balloc+0x2e>
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	bd70      	pop	{r4, r5, r6, pc}
 8011dc4:	6802      	ldr	r2, [r0, #0]
 8011dc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011dca:	2300      	movs	r3, #0
 8011dcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011dd0:	e7f7      	b.n	8011dc2 <_Balloc+0x66>
 8011dd2:	bf00      	nop
 8011dd4:	08013b08 	.word	0x08013b08
 8011dd8:	08013cac 	.word	0x08013cac

08011ddc <_Bfree>:
 8011ddc:	b570      	push	{r4, r5, r6, lr}
 8011dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011de0:	4605      	mov	r5, r0
 8011de2:	460c      	mov	r4, r1
 8011de4:	b976      	cbnz	r6, 8011e04 <_Bfree+0x28>
 8011de6:	2010      	movs	r0, #16
 8011de8:	f7ff ff90 	bl	8011d0c <malloc>
 8011dec:	4602      	mov	r2, r0
 8011dee:	6268      	str	r0, [r5, #36]	; 0x24
 8011df0:	b920      	cbnz	r0, 8011dfc <_Bfree+0x20>
 8011df2:	218a      	movs	r1, #138	; 0x8a
 8011df4:	4b08      	ldr	r3, [pc, #32]	; (8011e18 <_Bfree+0x3c>)
 8011df6:	4809      	ldr	r0, [pc, #36]	; (8011e1c <_Bfree+0x40>)
 8011df8:	f7fe fd72 	bl	80108e0 <__assert_func>
 8011dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e00:	6006      	str	r6, [r0, #0]
 8011e02:	60c6      	str	r6, [r0, #12]
 8011e04:	b13c      	cbz	r4, 8011e16 <_Bfree+0x3a>
 8011e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e08:	6862      	ldr	r2, [r4, #4]
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011e10:	6021      	str	r1, [r4, #0]
 8011e12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011e16:	bd70      	pop	{r4, r5, r6, pc}
 8011e18:	08013b08 	.word	0x08013b08
 8011e1c:	08013cac 	.word	0x08013cac

08011e20 <__multadd>:
 8011e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e24:	4607      	mov	r7, r0
 8011e26:	460c      	mov	r4, r1
 8011e28:	461e      	mov	r6, r3
 8011e2a:	2000      	movs	r0, #0
 8011e2c:	690d      	ldr	r5, [r1, #16]
 8011e2e:	f101 0c14 	add.w	ip, r1, #20
 8011e32:	f8dc 3000 	ldr.w	r3, [ip]
 8011e36:	3001      	adds	r0, #1
 8011e38:	b299      	uxth	r1, r3
 8011e3a:	fb02 6101 	mla	r1, r2, r1, r6
 8011e3e:	0c1e      	lsrs	r6, r3, #16
 8011e40:	0c0b      	lsrs	r3, r1, #16
 8011e42:	fb02 3306 	mla	r3, r2, r6, r3
 8011e46:	b289      	uxth	r1, r1
 8011e48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011e4c:	4285      	cmp	r5, r0
 8011e4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011e52:	f84c 1b04 	str.w	r1, [ip], #4
 8011e56:	dcec      	bgt.n	8011e32 <__multadd+0x12>
 8011e58:	b30e      	cbz	r6, 8011e9e <__multadd+0x7e>
 8011e5a:	68a3      	ldr	r3, [r4, #8]
 8011e5c:	42ab      	cmp	r3, r5
 8011e5e:	dc19      	bgt.n	8011e94 <__multadd+0x74>
 8011e60:	6861      	ldr	r1, [r4, #4]
 8011e62:	4638      	mov	r0, r7
 8011e64:	3101      	adds	r1, #1
 8011e66:	f7ff ff79 	bl	8011d5c <_Balloc>
 8011e6a:	4680      	mov	r8, r0
 8011e6c:	b928      	cbnz	r0, 8011e7a <__multadd+0x5a>
 8011e6e:	4602      	mov	r2, r0
 8011e70:	21b5      	movs	r1, #181	; 0xb5
 8011e72:	4b0c      	ldr	r3, [pc, #48]	; (8011ea4 <__multadd+0x84>)
 8011e74:	480c      	ldr	r0, [pc, #48]	; (8011ea8 <__multadd+0x88>)
 8011e76:	f7fe fd33 	bl	80108e0 <__assert_func>
 8011e7a:	6922      	ldr	r2, [r4, #16]
 8011e7c:	f104 010c 	add.w	r1, r4, #12
 8011e80:	3202      	adds	r2, #2
 8011e82:	0092      	lsls	r2, r2, #2
 8011e84:	300c      	adds	r0, #12
 8011e86:	f7fd fa19 	bl	800f2bc <memcpy>
 8011e8a:	4621      	mov	r1, r4
 8011e8c:	4638      	mov	r0, r7
 8011e8e:	f7ff ffa5 	bl	8011ddc <_Bfree>
 8011e92:	4644      	mov	r4, r8
 8011e94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011e98:	3501      	adds	r5, #1
 8011e9a:	615e      	str	r6, [r3, #20]
 8011e9c:	6125      	str	r5, [r4, #16]
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ea4:	08013c20 	.word	0x08013c20
 8011ea8:	08013cac 	.word	0x08013cac

08011eac <__s2b>:
 8011eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011eb0:	4615      	mov	r5, r2
 8011eb2:	2209      	movs	r2, #9
 8011eb4:	461f      	mov	r7, r3
 8011eb6:	3308      	adds	r3, #8
 8011eb8:	460c      	mov	r4, r1
 8011eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ebe:	4606      	mov	r6, r0
 8011ec0:	2201      	movs	r2, #1
 8011ec2:	2100      	movs	r1, #0
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	db09      	blt.n	8011edc <__s2b+0x30>
 8011ec8:	4630      	mov	r0, r6
 8011eca:	f7ff ff47 	bl	8011d5c <_Balloc>
 8011ece:	b940      	cbnz	r0, 8011ee2 <__s2b+0x36>
 8011ed0:	4602      	mov	r2, r0
 8011ed2:	21ce      	movs	r1, #206	; 0xce
 8011ed4:	4b18      	ldr	r3, [pc, #96]	; (8011f38 <__s2b+0x8c>)
 8011ed6:	4819      	ldr	r0, [pc, #100]	; (8011f3c <__s2b+0x90>)
 8011ed8:	f7fe fd02 	bl	80108e0 <__assert_func>
 8011edc:	0052      	lsls	r2, r2, #1
 8011ede:	3101      	adds	r1, #1
 8011ee0:	e7f0      	b.n	8011ec4 <__s2b+0x18>
 8011ee2:	9b08      	ldr	r3, [sp, #32]
 8011ee4:	2d09      	cmp	r5, #9
 8011ee6:	6143      	str	r3, [r0, #20]
 8011ee8:	f04f 0301 	mov.w	r3, #1
 8011eec:	6103      	str	r3, [r0, #16]
 8011eee:	dd16      	ble.n	8011f1e <__s2b+0x72>
 8011ef0:	f104 0909 	add.w	r9, r4, #9
 8011ef4:	46c8      	mov	r8, r9
 8011ef6:	442c      	add	r4, r5
 8011ef8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011efc:	4601      	mov	r1, r0
 8011efe:	220a      	movs	r2, #10
 8011f00:	4630      	mov	r0, r6
 8011f02:	3b30      	subs	r3, #48	; 0x30
 8011f04:	f7ff ff8c 	bl	8011e20 <__multadd>
 8011f08:	45a0      	cmp	r8, r4
 8011f0a:	d1f5      	bne.n	8011ef8 <__s2b+0x4c>
 8011f0c:	f1a5 0408 	sub.w	r4, r5, #8
 8011f10:	444c      	add	r4, r9
 8011f12:	1b2d      	subs	r5, r5, r4
 8011f14:	1963      	adds	r3, r4, r5
 8011f16:	42bb      	cmp	r3, r7
 8011f18:	db04      	blt.n	8011f24 <__s2b+0x78>
 8011f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f1e:	2509      	movs	r5, #9
 8011f20:	340a      	adds	r4, #10
 8011f22:	e7f6      	b.n	8011f12 <__s2b+0x66>
 8011f24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011f28:	4601      	mov	r1, r0
 8011f2a:	220a      	movs	r2, #10
 8011f2c:	4630      	mov	r0, r6
 8011f2e:	3b30      	subs	r3, #48	; 0x30
 8011f30:	f7ff ff76 	bl	8011e20 <__multadd>
 8011f34:	e7ee      	b.n	8011f14 <__s2b+0x68>
 8011f36:	bf00      	nop
 8011f38:	08013c20 	.word	0x08013c20
 8011f3c:	08013cac 	.word	0x08013cac

08011f40 <__hi0bits>:
 8011f40:	0c02      	lsrs	r2, r0, #16
 8011f42:	0412      	lsls	r2, r2, #16
 8011f44:	4603      	mov	r3, r0
 8011f46:	b9ca      	cbnz	r2, 8011f7c <__hi0bits+0x3c>
 8011f48:	0403      	lsls	r3, r0, #16
 8011f4a:	2010      	movs	r0, #16
 8011f4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011f50:	bf04      	itt	eq
 8011f52:	021b      	lsleq	r3, r3, #8
 8011f54:	3008      	addeq	r0, #8
 8011f56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011f5a:	bf04      	itt	eq
 8011f5c:	011b      	lsleq	r3, r3, #4
 8011f5e:	3004      	addeq	r0, #4
 8011f60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011f64:	bf04      	itt	eq
 8011f66:	009b      	lsleq	r3, r3, #2
 8011f68:	3002      	addeq	r0, #2
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	db05      	blt.n	8011f7a <__hi0bits+0x3a>
 8011f6e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8011f72:	f100 0001 	add.w	r0, r0, #1
 8011f76:	bf08      	it	eq
 8011f78:	2020      	moveq	r0, #32
 8011f7a:	4770      	bx	lr
 8011f7c:	2000      	movs	r0, #0
 8011f7e:	e7e5      	b.n	8011f4c <__hi0bits+0xc>

08011f80 <__lo0bits>:
 8011f80:	6803      	ldr	r3, [r0, #0]
 8011f82:	4602      	mov	r2, r0
 8011f84:	f013 0007 	ands.w	r0, r3, #7
 8011f88:	d00b      	beq.n	8011fa2 <__lo0bits+0x22>
 8011f8a:	07d9      	lsls	r1, r3, #31
 8011f8c:	d421      	bmi.n	8011fd2 <__lo0bits+0x52>
 8011f8e:	0798      	lsls	r0, r3, #30
 8011f90:	bf49      	itett	mi
 8011f92:	085b      	lsrmi	r3, r3, #1
 8011f94:	089b      	lsrpl	r3, r3, #2
 8011f96:	2001      	movmi	r0, #1
 8011f98:	6013      	strmi	r3, [r2, #0]
 8011f9a:	bf5c      	itt	pl
 8011f9c:	2002      	movpl	r0, #2
 8011f9e:	6013      	strpl	r3, [r2, #0]
 8011fa0:	4770      	bx	lr
 8011fa2:	b299      	uxth	r1, r3
 8011fa4:	b909      	cbnz	r1, 8011faa <__lo0bits+0x2a>
 8011fa6:	2010      	movs	r0, #16
 8011fa8:	0c1b      	lsrs	r3, r3, #16
 8011faa:	b2d9      	uxtb	r1, r3
 8011fac:	b909      	cbnz	r1, 8011fb2 <__lo0bits+0x32>
 8011fae:	3008      	adds	r0, #8
 8011fb0:	0a1b      	lsrs	r3, r3, #8
 8011fb2:	0719      	lsls	r1, r3, #28
 8011fb4:	bf04      	itt	eq
 8011fb6:	091b      	lsreq	r3, r3, #4
 8011fb8:	3004      	addeq	r0, #4
 8011fba:	0799      	lsls	r1, r3, #30
 8011fbc:	bf04      	itt	eq
 8011fbe:	089b      	lsreq	r3, r3, #2
 8011fc0:	3002      	addeq	r0, #2
 8011fc2:	07d9      	lsls	r1, r3, #31
 8011fc4:	d403      	bmi.n	8011fce <__lo0bits+0x4e>
 8011fc6:	085b      	lsrs	r3, r3, #1
 8011fc8:	f100 0001 	add.w	r0, r0, #1
 8011fcc:	d003      	beq.n	8011fd6 <__lo0bits+0x56>
 8011fce:	6013      	str	r3, [r2, #0]
 8011fd0:	4770      	bx	lr
 8011fd2:	2000      	movs	r0, #0
 8011fd4:	4770      	bx	lr
 8011fd6:	2020      	movs	r0, #32
 8011fd8:	4770      	bx	lr
	...

08011fdc <__i2b>:
 8011fdc:	b510      	push	{r4, lr}
 8011fde:	460c      	mov	r4, r1
 8011fe0:	2101      	movs	r1, #1
 8011fe2:	f7ff febb 	bl	8011d5c <_Balloc>
 8011fe6:	4602      	mov	r2, r0
 8011fe8:	b928      	cbnz	r0, 8011ff6 <__i2b+0x1a>
 8011fea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011fee:	4b04      	ldr	r3, [pc, #16]	; (8012000 <__i2b+0x24>)
 8011ff0:	4804      	ldr	r0, [pc, #16]	; (8012004 <__i2b+0x28>)
 8011ff2:	f7fe fc75 	bl	80108e0 <__assert_func>
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	6144      	str	r4, [r0, #20]
 8011ffa:	6103      	str	r3, [r0, #16]
 8011ffc:	bd10      	pop	{r4, pc}
 8011ffe:	bf00      	nop
 8012000:	08013c20 	.word	0x08013c20
 8012004:	08013cac 	.word	0x08013cac

08012008 <__multiply>:
 8012008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200c:	4691      	mov	r9, r2
 801200e:	690a      	ldr	r2, [r1, #16]
 8012010:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012014:	460c      	mov	r4, r1
 8012016:	429a      	cmp	r2, r3
 8012018:	bfbe      	ittt	lt
 801201a:	460b      	movlt	r3, r1
 801201c:	464c      	movlt	r4, r9
 801201e:	4699      	movlt	r9, r3
 8012020:	6927      	ldr	r7, [r4, #16]
 8012022:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012026:	68a3      	ldr	r3, [r4, #8]
 8012028:	6861      	ldr	r1, [r4, #4]
 801202a:	eb07 060a 	add.w	r6, r7, sl
 801202e:	42b3      	cmp	r3, r6
 8012030:	b085      	sub	sp, #20
 8012032:	bfb8      	it	lt
 8012034:	3101      	addlt	r1, #1
 8012036:	f7ff fe91 	bl	8011d5c <_Balloc>
 801203a:	b930      	cbnz	r0, 801204a <__multiply+0x42>
 801203c:	4602      	mov	r2, r0
 801203e:	f240 115d 	movw	r1, #349	; 0x15d
 8012042:	4b43      	ldr	r3, [pc, #268]	; (8012150 <__multiply+0x148>)
 8012044:	4843      	ldr	r0, [pc, #268]	; (8012154 <__multiply+0x14c>)
 8012046:	f7fe fc4b 	bl	80108e0 <__assert_func>
 801204a:	f100 0514 	add.w	r5, r0, #20
 801204e:	462b      	mov	r3, r5
 8012050:	2200      	movs	r2, #0
 8012052:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012056:	4543      	cmp	r3, r8
 8012058:	d321      	bcc.n	801209e <__multiply+0x96>
 801205a:	f104 0314 	add.w	r3, r4, #20
 801205e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012062:	f109 0314 	add.w	r3, r9, #20
 8012066:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801206a:	9202      	str	r2, [sp, #8]
 801206c:	1b3a      	subs	r2, r7, r4
 801206e:	3a15      	subs	r2, #21
 8012070:	f022 0203 	bic.w	r2, r2, #3
 8012074:	3204      	adds	r2, #4
 8012076:	f104 0115 	add.w	r1, r4, #21
 801207a:	428f      	cmp	r7, r1
 801207c:	bf38      	it	cc
 801207e:	2204      	movcc	r2, #4
 8012080:	9201      	str	r2, [sp, #4]
 8012082:	9a02      	ldr	r2, [sp, #8]
 8012084:	9303      	str	r3, [sp, #12]
 8012086:	429a      	cmp	r2, r3
 8012088:	d80c      	bhi.n	80120a4 <__multiply+0x9c>
 801208a:	2e00      	cmp	r6, #0
 801208c:	dd03      	ble.n	8012096 <__multiply+0x8e>
 801208e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012092:	2b00      	cmp	r3, #0
 8012094:	d059      	beq.n	801214a <__multiply+0x142>
 8012096:	6106      	str	r6, [r0, #16]
 8012098:	b005      	add	sp, #20
 801209a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801209e:	f843 2b04 	str.w	r2, [r3], #4
 80120a2:	e7d8      	b.n	8012056 <__multiply+0x4e>
 80120a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80120a8:	f1ba 0f00 	cmp.w	sl, #0
 80120ac:	d023      	beq.n	80120f6 <__multiply+0xee>
 80120ae:	46a9      	mov	r9, r5
 80120b0:	f04f 0c00 	mov.w	ip, #0
 80120b4:	f104 0e14 	add.w	lr, r4, #20
 80120b8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80120bc:	f8d9 1000 	ldr.w	r1, [r9]
 80120c0:	fa1f fb82 	uxth.w	fp, r2
 80120c4:	b289      	uxth	r1, r1
 80120c6:	fb0a 110b 	mla	r1, sl, fp, r1
 80120ca:	4461      	add	r1, ip
 80120cc:	f8d9 c000 	ldr.w	ip, [r9]
 80120d0:	0c12      	lsrs	r2, r2, #16
 80120d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80120d6:	fb0a c202 	mla	r2, sl, r2, ip
 80120da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80120de:	b289      	uxth	r1, r1
 80120e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80120e4:	4577      	cmp	r7, lr
 80120e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80120ea:	f849 1b04 	str.w	r1, [r9], #4
 80120ee:	d8e3      	bhi.n	80120b8 <__multiply+0xb0>
 80120f0:	9a01      	ldr	r2, [sp, #4]
 80120f2:	f845 c002 	str.w	ip, [r5, r2]
 80120f6:	9a03      	ldr	r2, [sp, #12]
 80120f8:	3304      	adds	r3, #4
 80120fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80120fe:	f1b9 0f00 	cmp.w	r9, #0
 8012102:	d020      	beq.n	8012146 <__multiply+0x13e>
 8012104:	46ae      	mov	lr, r5
 8012106:	f04f 0a00 	mov.w	sl, #0
 801210a:	6829      	ldr	r1, [r5, #0]
 801210c:	f104 0c14 	add.w	ip, r4, #20
 8012110:	f8bc b000 	ldrh.w	fp, [ip]
 8012114:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012118:	b289      	uxth	r1, r1
 801211a:	fb09 220b 	mla	r2, r9, fp, r2
 801211e:	4492      	add	sl, r2
 8012120:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012124:	f84e 1b04 	str.w	r1, [lr], #4
 8012128:	f85c 2b04 	ldr.w	r2, [ip], #4
 801212c:	f8be 1000 	ldrh.w	r1, [lr]
 8012130:	0c12      	lsrs	r2, r2, #16
 8012132:	fb09 1102 	mla	r1, r9, r2, r1
 8012136:	4567      	cmp	r7, ip
 8012138:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801213c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012140:	d8e6      	bhi.n	8012110 <__multiply+0x108>
 8012142:	9a01      	ldr	r2, [sp, #4]
 8012144:	50a9      	str	r1, [r5, r2]
 8012146:	3504      	adds	r5, #4
 8012148:	e79b      	b.n	8012082 <__multiply+0x7a>
 801214a:	3e01      	subs	r6, #1
 801214c:	e79d      	b.n	801208a <__multiply+0x82>
 801214e:	bf00      	nop
 8012150:	08013c20 	.word	0x08013c20
 8012154:	08013cac 	.word	0x08013cac

08012158 <__pow5mult>:
 8012158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801215c:	4615      	mov	r5, r2
 801215e:	f012 0203 	ands.w	r2, r2, #3
 8012162:	4606      	mov	r6, r0
 8012164:	460f      	mov	r7, r1
 8012166:	d007      	beq.n	8012178 <__pow5mult+0x20>
 8012168:	4c25      	ldr	r4, [pc, #148]	; (8012200 <__pow5mult+0xa8>)
 801216a:	3a01      	subs	r2, #1
 801216c:	2300      	movs	r3, #0
 801216e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012172:	f7ff fe55 	bl	8011e20 <__multadd>
 8012176:	4607      	mov	r7, r0
 8012178:	10ad      	asrs	r5, r5, #2
 801217a:	d03d      	beq.n	80121f8 <__pow5mult+0xa0>
 801217c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801217e:	b97c      	cbnz	r4, 80121a0 <__pow5mult+0x48>
 8012180:	2010      	movs	r0, #16
 8012182:	f7ff fdc3 	bl	8011d0c <malloc>
 8012186:	4602      	mov	r2, r0
 8012188:	6270      	str	r0, [r6, #36]	; 0x24
 801218a:	b928      	cbnz	r0, 8012198 <__pow5mult+0x40>
 801218c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012190:	4b1c      	ldr	r3, [pc, #112]	; (8012204 <__pow5mult+0xac>)
 8012192:	481d      	ldr	r0, [pc, #116]	; (8012208 <__pow5mult+0xb0>)
 8012194:	f7fe fba4 	bl	80108e0 <__assert_func>
 8012198:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801219c:	6004      	str	r4, [r0, #0]
 801219e:	60c4      	str	r4, [r0, #12]
 80121a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80121a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80121a8:	b94c      	cbnz	r4, 80121be <__pow5mult+0x66>
 80121aa:	f240 2171 	movw	r1, #625	; 0x271
 80121ae:	4630      	mov	r0, r6
 80121b0:	f7ff ff14 	bl	8011fdc <__i2b>
 80121b4:	2300      	movs	r3, #0
 80121b6:	4604      	mov	r4, r0
 80121b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80121bc:	6003      	str	r3, [r0, #0]
 80121be:	f04f 0900 	mov.w	r9, #0
 80121c2:	07eb      	lsls	r3, r5, #31
 80121c4:	d50a      	bpl.n	80121dc <__pow5mult+0x84>
 80121c6:	4639      	mov	r1, r7
 80121c8:	4622      	mov	r2, r4
 80121ca:	4630      	mov	r0, r6
 80121cc:	f7ff ff1c 	bl	8012008 <__multiply>
 80121d0:	4680      	mov	r8, r0
 80121d2:	4639      	mov	r1, r7
 80121d4:	4630      	mov	r0, r6
 80121d6:	f7ff fe01 	bl	8011ddc <_Bfree>
 80121da:	4647      	mov	r7, r8
 80121dc:	106d      	asrs	r5, r5, #1
 80121de:	d00b      	beq.n	80121f8 <__pow5mult+0xa0>
 80121e0:	6820      	ldr	r0, [r4, #0]
 80121e2:	b938      	cbnz	r0, 80121f4 <__pow5mult+0x9c>
 80121e4:	4622      	mov	r2, r4
 80121e6:	4621      	mov	r1, r4
 80121e8:	4630      	mov	r0, r6
 80121ea:	f7ff ff0d 	bl	8012008 <__multiply>
 80121ee:	6020      	str	r0, [r4, #0]
 80121f0:	f8c0 9000 	str.w	r9, [r0]
 80121f4:	4604      	mov	r4, r0
 80121f6:	e7e4      	b.n	80121c2 <__pow5mult+0x6a>
 80121f8:	4638      	mov	r0, r7
 80121fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121fe:	bf00      	nop
 8012200:	08013df8 	.word	0x08013df8
 8012204:	08013b08 	.word	0x08013b08
 8012208:	08013cac 	.word	0x08013cac

0801220c <__lshift>:
 801220c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012210:	460c      	mov	r4, r1
 8012212:	4607      	mov	r7, r0
 8012214:	4691      	mov	r9, r2
 8012216:	6923      	ldr	r3, [r4, #16]
 8012218:	6849      	ldr	r1, [r1, #4]
 801221a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801221e:	68a3      	ldr	r3, [r4, #8]
 8012220:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012224:	f108 0601 	add.w	r6, r8, #1
 8012228:	42b3      	cmp	r3, r6
 801222a:	db0b      	blt.n	8012244 <__lshift+0x38>
 801222c:	4638      	mov	r0, r7
 801222e:	f7ff fd95 	bl	8011d5c <_Balloc>
 8012232:	4605      	mov	r5, r0
 8012234:	b948      	cbnz	r0, 801224a <__lshift+0x3e>
 8012236:	4602      	mov	r2, r0
 8012238:	f240 11d9 	movw	r1, #473	; 0x1d9
 801223c:	4b29      	ldr	r3, [pc, #164]	; (80122e4 <__lshift+0xd8>)
 801223e:	482a      	ldr	r0, [pc, #168]	; (80122e8 <__lshift+0xdc>)
 8012240:	f7fe fb4e 	bl	80108e0 <__assert_func>
 8012244:	3101      	adds	r1, #1
 8012246:	005b      	lsls	r3, r3, #1
 8012248:	e7ee      	b.n	8012228 <__lshift+0x1c>
 801224a:	2300      	movs	r3, #0
 801224c:	f100 0114 	add.w	r1, r0, #20
 8012250:	f100 0210 	add.w	r2, r0, #16
 8012254:	4618      	mov	r0, r3
 8012256:	4553      	cmp	r3, sl
 8012258:	db37      	blt.n	80122ca <__lshift+0xbe>
 801225a:	6920      	ldr	r0, [r4, #16]
 801225c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012260:	f104 0314 	add.w	r3, r4, #20
 8012264:	f019 091f 	ands.w	r9, r9, #31
 8012268:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801226c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012270:	d02f      	beq.n	80122d2 <__lshift+0xc6>
 8012272:	468a      	mov	sl, r1
 8012274:	f04f 0c00 	mov.w	ip, #0
 8012278:	f1c9 0e20 	rsb	lr, r9, #32
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	fa02 f209 	lsl.w	r2, r2, r9
 8012282:	ea42 020c 	orr.w	r2, r2, ip
 8012286:	f84a 2b04 	str.w	r2, [sl], #4
 801228a:	f853 2b04 	ldr.w	r2, [r3], #4
 801228e:	4298      	cmp	r0, r3
 8012290:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012294:	d8f2      	bhi.n	801227c <__lshift+0x70>
 8012296:	1b03      	subs	r3, r0, r4
 8012298:	3b15      	subs	r3, #21
 801229a:	f023 0303 	bic.w	r3, r3, #3
 801229e:	3304      	adds	r3, #4
 80122a0:	f104 0215 	add.w	r2, r4, #21
 80122a4:	4290      	cmp	r0, r2
 80122a6:	bf38      	it	cc
 80122a8:	2304      	movcc	r3, #4
 80122aa:	f841 c003 	str.w	ip, [r1, r3]
 80122ae:	f1bc 0f00 	cmp.w	ip, #0
 80122b2:	d001      	beq.n	80122b8 <__lshift+0xac>
 80122b4:	f108 0602 	add.w	r6, r8, #2
 80122b8:	3e01      	subs	r6, #1
 80122ba:	4638      	mov	r0, r7
 80122bc:	4621      	mov	r1, r4
 80122be:	612e      	str	r6, [r5, #16]
 80122c0:	f7ff fd8c 	bl	8011ddc <_Bfree>
 80122c4:	4628      	mov	r0, r5
 80122c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80122ce:	3301      	adds	r3, #1
 80122d0:	e7c1      	b.n	8012256 <__lshift+0x4a>
 80122d2:	3904      	subs	r1, #4
 80122d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80122d8:	4298      	cmp	r0, r3
 80122da:	f841 2f04 	str.w	r2, [r1, #4]!
 80122de:	d8f9      	bhi.n	80122d4 <__lshift+0xc8>
 80122e0:	e7ea      	b.n	80122b8 <__lshift+0xac>
 80122e2:	bf00      	nop
 80122e4:	08013c20 	.word	0x08013c20
 80122e8:	08013cac 	.word	0x08013cac

080122ec <__mcmp>:
 80122ec:	4603      	mov	r3, r0
 80122ee:	690a      	ldr	r2, [r1, #16]
 80122f0:	6900      	ldr	r0, [r0, #16]
 80122f2:	b530      	push	{r4, r5, lr}
 80122f4:	1a80      	subs	r0, r0, r2
 80122f6:	d10d      	bne.n	8012314 <__mcmp+0x28>
 80122f8:	3314      	adds	r3, #20
 80122fa:	3114      	adds	r1, #20
 80122fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012300:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012304:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012308:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801230c:	4295      	cmp	r5, r2
 801230e:	d002      	beq.n	8012316 <__mcmp+0x2a>
 8012310:	d304      	bcc.n	801231c <__mcmp+0x30>
 8012312:	2001      	movs	r0, #1
 8012314:	bd30      	pop	{r4, r5, pc}
 8012316:	42a3      	cmp	r3, r4
 8012318:	d3f4      	bcc.n	8012304 <__mcmp+0x18>
 801231a:	e7fb      	b.n	8012314 <__mcmp+0x28>
 801231c:	f04f 30ff 	mov.w	r0, #4294967295
 8012320:	e7f8      	b.n	8012314 <__mcmp+0x28>
	...

08012324 <__mdiff>:
 8012324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012328:	460d      	mov	r5, r1
 801232a:	4607      	mov	r7, r0
 801232c:	4611      	mov	r1, r2
 801232e:	4628      	mov	r0, r5
 8012330:	4614      	mov	r4, r2
 8012332:	f7ff ffdb 	bl	80122ec <__mcmp>
 8012336:	1e06      	subs	r6, r0, #0
 8012338:	d111      	bne.n	801235e <__mdiff+0x3a>
 801233a:	4631      	mov	r1, r6
 801233c:	4638      	mov	r0, r7
 801233e:	f7ff fd0d 	bl	8011d5c <_Balloc>
 8012342:	4602      	mov	r2, r0
 8012344:	b928      	cbnz	r0, 8012352 <__mdiff+0x2e>
 8012346:	f240 2132 	movw	r1, #562	; 0x232
 801234a:	4b3a      	ldr	r3, [pc, #232]	; (8012434 <__mdiff+0x110>)
 801234c:	483a      	ldr	r0, [pc, #232]	; (8012438 <__mdiff+0x114>)
 801234e:	f7fe fac7 	bl	80108e0 <__assert_func>
 8012352:	2301      	movs	r3, #1
 8012354:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012358:	4610      	mov	r0, r2
 801235a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801235e:	bfa4      	itt	ge
 8012360:	4623      	movge	r3, r4
 8012362:	462c      	movge	r4, r5
 8012364:	4638      	mov	r0, r7
 8012366:	6861      	ldr	r1, [r4, #4]
 8012368:	bfa6      	itte	ge
 801236a:	461d      	movge	r5, r3
 801236c:	2600      	movge	r6, #0
 801236e:	2601      	movlt	r6, #1
 8012370:	f7ff fcf4 	bl	8011d5c <_Balloc>
 8012374:	4602      	mov	r2, r0
 8012376:	b918      	cbnz	r0, 8012380 <__mdiff+0x5c>
 8012378:	f44f 7110 	mov.w	r1, #576	; 0x240
 801237c:	4b2d      	ldr	r3, [pc, #180]	; (8012434 <__mdiff+0x110>)
 801237e:	e7e5      	b.n	801234c <__mdiff+0x28>
 8012380:	f102 0814 	add.w	r8, r2, #20
 8012384:	46c2      	mov	sl, r8
 8012386:	f04f 0c00 	mov.w	ip, #0
 801238a:	6927      	ldr	r7, [r4, #16]
 801238c:	60c6      	str	r6, [r0, #12]
 801238e:	692e      	ldr	r6, [r5, #16]
 8012390:	f104 0014 	add.w	r0, r4, #20
 8012394:	f105 0914 	add.w	r9, r5, #20
 8012398:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 801239c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80123a0:	3410      	adds	r4, #16
 80123a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80123a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80123aa:	fa1f f18b 	uxth.w	r1, fp
 80123ae:	448c      	add	ip, r1
 80123b0:	b299      	uxth	r1, r3
 80123b2:	0c1b      	lsrs	r3, r3, #16
 80123b4:	ebac 0101 	sub.w	r1, ip, r1
 80123b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80123bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80123c0:	b289      	uxth	r1, r1
 80123c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80123c6:	454e      	cmp	r6, r9
 80123c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80123cc:	f84a 3b04 	str.w	r3, [sl], #4
 80123d0:	d8e7      	bhi.n	80123a2 <__mdiff+0x7e>
 80123d2:	1b73      	subs	r3, r6, r5
 80123d4:	3b15      	subs	r3, #21
 80123d6:	f023 0303 	bic.w	r3, r3, #3
 80123da:	3515      	adds	r5, #21
 80123dc:	3304      	adds	r3, #4
 80123de:	42ae      	cmp	r6, r5
 80123e0:	bf38      	it	cc
 80123e2:	2304      	movcc	r3, #4
 80123e4:	4418      	add	r0, r3
 80123e6:	4443      	add	r3, r8
 80123e8:	461e      	mov	r6, r3
 80123ea:	4605      	mov	r5, r0
 80123ec:	4575      	cmp	r5, lr
 80123ee:	d30e      	bcc.n	801240e <__mdiff+0xea>
 80123f0:	f10e 0103 	add.w	r1, lr, #3
 80123f4:	1a09      	subs	r1, r1, r0
 80123f6:	f021 0103 	bic.w	r1, r1, #3
 80123fa:	3803      	subs	r0, #3
 80123fc:	4586      	cmp	lr, r0
 80123fe:	bf38      	it	cc
 8012400:	2100      	movcc	r1, #0
 8012402:	4419      	add	r1, r3
 8012404:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8012408:	b18b      	cbz	r3, 801242e <__mdiff+0x10a>
 801240a:	6117      	str	r7, [r2, #16]
 801240c:	e7a4      	b.n	8012358 <__mdiff+0x34>
 801240e:	f855 8b04 	ldr.w	r8, [r5], #4
 8012412:	fa1f f188 	uxth.w	r1, r8
 8012416:	4461      	add	r1, ip
 8012418:	140c      	asrs	r4, r1, #16
 801241a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801241e:	b289      	uxth	r1, r1
 8012420:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012424:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8012428:	f846 1b04 	str.w	r1, [r6], #4
 801242c:	e7de      	b.n	80123ec <__mdiff+0xc8>
 801242e:	3f01      	subs	r7, #1
 8012430:	e7e8      	b.n	8012404 <__mdiff+0xe0>
 8012432:	bf00      	nop
 8012434:	08013c20 	.word	0x08013c20
 8012438:	08013cac 	.word	0x08013cac

0801243c <__ulp>:
 801243c:	4b11      	ldr	r3, [pc, #68]	; (8012484 <__ulp+0x48>)
 801243e:	400b      	ands	r3, r1
 8012440:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012444:	2b00      	cmp	r3, #0
 8012446:	dd02      	ble.n	801244e <__ulp+0x12>
 8012448:	2000      	movs	r0, #0
 801244a:	4619      	mov	r1, r3
 801244c:	4770      	bx	lr
 801244e:	425b      	negs	r3, r3
 8012450:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012454:	f04f 0000 	mov.w	r0, #0
 8012458:	f04f 0100 	mov.w	r1, #0
 801245c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012460:	da04      	bge.n	801246c <__ulp+0x30>
 8012462:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012466:	fa43 f102 	asr.w	r1, r3, r2
 801246a:	4770      	bx	lr
 801246c:	f1a2 0314 	sub.w	r3, r2, #20
 8012470:	2b1e      	cmp	r3, #30
 8012472:	bfd6      	itet	le
 8012474:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012478:	2301      	movgt	r3, #1
 801247a:	fa22 f303 	lsrle.w	r3, r2, r3
 801247e:	4618      	mov	r0, r3
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop
 8012484:	7ff00000 	.word	0x7ff00000

08012488 <__b2d>:
 8012488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801248c:	6907      	ldr	r7, [r0, #16]
 801248e:	f100 0914 	add.w	r9, r0, #20
 8012492:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8012496:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801249a:	f1a7 0804 	sub.w	r8, r7, #4
 801249e:	4630      	mov	r0, r6
 80124a0:	f7ff fd4e 	bl	8011f40 <__hi0bits>
 80124a4:	f1c0 0320 	rsb	r3, r0, #32
 80124a8:	280a      	cmp	r0, #10
 80124aa:	600b      	str	r3, [r1, #0]
 80124ac:	491f      	ldr	r1, [pc, #124]	; (801252c <__b2d+0xa4>)
 80124ae:	dc17      	bgt.n	80124e0 <__b2d+0x58>
 80124b0:	45c1      	cmp	r9, r8
 80124b2:	bf28      	it	cs
 80124b4:	2200      	movcs	r2, #0
 80124b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80124ba:	fa26 f30c 	lsr.w	r3, r6, ip
 80124be:	bf38      	it	cc
 80124c0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80124c4:	ea43 0501 	orr.w	r5, r3, r1
 80124c8:	f100 0315 	add.w	r3, r0, #21
 80124cc:	fa06 f303 	lsl.w	r3, r6, r3
 80124d0:	fa22 f20c 	lsr.w	r2, r2, ip
 80124d4:	ea43 0402 	orr.w	r4, r3, r2
 80124d8:	4620      	mov	r0, r4
 80124da:	4629      	mov	r1, r5
 80124dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124e0:	45c1      	cmp	r9, r8
 80124e2:	bf2e      	itee	cs
 80124e4:	2200      	movcs	r2, #0
 80124e6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80124ea:	f1a7 0808 	subcc.w	r8, r7, #8
 80124ee:	f1b0 030b 	subs.w	r3, r0, #11
 80124f2:	d016      	beq.n	8012522 <__b2d+0x9a>
 80124f4:	f1c3 0720 	rsb	r7, r3, #32
 80124f8:	fa22 f107 	lsr.w	r1, r2, r7
 80124fc:	45c8      	cmp	r8, r9
 80124fe:	fa06 f603 	lsl.w	r6, r6, r3
 8012502:	ea46 0601 	orr.w	r6, r6, r1
 8012506:	bf94      	ite	ls
 8012508:	2100      	movls	r1, #0
 801250a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801250e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8012512:	fa02 f003 	lsl.w	r0, r2, r3
 8012516:	40f9      	lsrs	r1, r7
 8012518:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801251c:	ea40 0401 	orr.w	r4, r0, r1
 8012520:	e7da      	b.n	80124d8 <__b2d+0x50>
 8012522:	4614      	mov	r4, r2
 8012524:	ea46 0501 	orr.w	r5, r6, r1
 8012528:	e7d6      	b.n	80124d8 <__b2d+0x50>
 801252a:	bf00      	nop
 801252c:	3ff00000 	.word	0x3ff00000

08012530 <__d2b>:
 8012530:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012534:	2101      	movs	r1, #1
 8012536:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801253a:	4690      	mov	r8, r2
 801253c:	461d      	mov	r5, r3
 801253e:	f7ff fc0d 	bl	8011d5c <_Balloc>
 8012542:	4604      	mov	r4, r0
 8012544:	b930      	cbnz	r0, 8012554 <__d2b+0x24>
 8012546:	4602      	mov	r2, r0
 8012548:	f240 310a 	movw	r1, #778	; 0x30a
 801254c:	4b24      	ldr	r3, [pc, #144]	; (80125e0 <__d2b+0xb0>)
 801254e:	4825      	ldr	r0, [pc, #148]	; (80125e4 <__d2b+0xb4>)
 8012550:	f7fe f9c6 	bl	80108e0 <__assert_func>
 8012554:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8012558:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801255c:	bb2d      	cbnz	r5, 80125aa <__d2b+0x7a>
 801255e:	9301      	str	r3, [sp, #4]
 8012560:	f1b8 0300 	subs.w	r3, r8, #0
 8012564:	d026      	beq.n	80125b4 <__d2b+0x84>
 8012566:	4668      	mov	r0, sp
 8012568:	9300      	str	r3, [sp, #0]
 801256a:	f7ff fd09 	bl	8011f80 <__lo0bits>
 801256e:	9900      	ldr	r1, [sp, #0]
 8012570:	b1f0      	cbz	r0, 80125b0 <__d2b+0x80>
 8012572:	9a01      	ldr	r2, [sp, #4]
 8012574:	f1c0 0320 	rsb	r3, r0, #32
 8012578:	fa02 f303 	lsl.w	r3, r2, r3
 801257c:	430b      	orrs	r3, r1
 801257e:	40c2      	lsrs	r2, r0
 8012580:	6163      	str	r3, [r4, #20]
 8012582:	9201      	str	r2, [sp, #4]
 8012584:	9b01      	ldr	r3, [sp, #4]
 8012586:	2b00      	cmp	r3, #0
 8012588:	bf14      	ite	ne
 801258a:	2102      	movne	r1, #2
 801258c:	2101      	moveq	r1, #1
 801258e:	61a3      	str	r3, [r4, #24]
 8012590:	6121      	str	r1, [r4, #16]
 8012592:	b1c5      	cbz	r5, 80125c6 <__d2b+0x96>
 8012594:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012598:	4405      	add	r5, r0
 801259a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801259e:	603d      	str	r5, [r7, #0]
 80125a0:	6030      	str	r0, [r6, #0]
 80125a2:	4620      	mov	r0, r4
 80125a4:	b002      	add	sp, #8
 80125a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80125ae:	e7d6      	b.n	801255e <__d2b+0x2e>
 80125b0:	6161      	str	r1, [r4, #20]
 80125b2:	e7e7      	b.n	8012584 <__d2b+0x54>
 80125b4:	a801      	add	r0, sp, #4
 80125b6:	f7ff fce3 	bl	8011f80 <__lo0bits>
 80125ba:	2101      	movs	r1, #1
 80125bc:	9b01      	ldr	r3, [sp, #4]
 80125be:	6121      	str	r1, [r4, #16]
 80125c0:	6163      	str	r3, [r4, #20]
 80125c2:	3020      	adds	r0, #32
 80125c4:	e7e5      	b.n	8012592 <__d2b+0x62>
 80125c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80125ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80125ce:	6038      	str	r0, [r7, #0]
 80125d0:	6918      	ldr	r0, [r3, #16]
 80125d2:	f7ff fcb5 	bl	8011f40 <__hi0bits>
 80125d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80125da:	6031      	str	r1, [r6, #0]
 80125dc:	e7e1      	b.n	80125a2 <__d2b+0x72>
 80125de:	bf00      	nop
 80125e0:	08013c20 	.word	0x08013c20
 80125e4:	08013cac 	.word	0x08013cac

080125e8 <__ratio>:
 80125e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ec:	4688      	mov	r8, r1
 80125ee:	4669      	mov	r1, sp
 80125f0:	4681      	mov	r9, r0
 80125f2:	f7ff ff49 	bl	8012488 <__b2d>
 80125f6:	460f      	mov	r7, r1
 80125f8:	4604      	mov	r4, r0
 80125fa:	460d      	mov	r5, r1
 80125fc:	4640      	mov	r0, r8
 80125fe:	a901      	add	r1, sp, #4
 8012600:	f7ff ff42 	bl	8012488 <__b2d>
 8012604:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012608:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801260c:	468b      	mov	fp, r1
 801260e:	eba3 0c02 	sub.w	ip, r3, r2
 8012612:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012616:	1a9b      	subs	r3, r3, r2
 8012618:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801261c:	2b00      	cmp	r3, #0
 801261e:	bfd5      	itete	le
 8012620:	460a      	movle	r2, r1
 8012622:	462a      	movgt	r2, r5
 8012624:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012628:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801262c:	bfd8      	it	le
 801262e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012632:	465b      	mov	r3, fp
 8012634:	4602      	mov	r2, r0
 8012636:	4639      	mov	r1, r7
 8012638:	4620      	mov	r0, r4
 801263a:	f7ee f899 	bl	8000770 <__aeabi_ddiv>
 801263e:	b003      	add	sp, #12
 8012640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012644 <__copybits>:
 8012644:	3901      	subs	r1, #1
 8012646:	b570      	push	{r4, r5, r6, lr}
 8012648:	1149      	asrs	r1, r1, #5
 801264a:	6914      	ldr	r4, [r2, #16]
 801264c:	3101      	adds	r1, #1
 801264e:	f102 0314 	add.w	r3, r2, #20
 8012652:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012656:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801265a:	1f05      	subs	r5, r0, #4
 801265c:	42a3      	cmp	r3, r4
 801265e:	d30c      	bcc.n	801267a <__copybits+0x36>
 8012660:	1aa3      	subs	r3, r4, r2
 8012662:	3b11      	subs	r3, #17
 8012664:	f023 0303 	bic.w	r3, r3, #3
 8012668:	3211      	adds	r2, #17
 801266a:	42a2      	cmp	r2, r4
 801266c:	bf88      	it	hi
 801266e:	2300      	movhi	r3, #0
 8012670:	4418      	add	r0, r3
 8012672:	2300      	movs	r3, #0
 8012674:	4288      	cmp	r0, r1
 8012676:	d305      	bcc.n	8012684 <__copybits+0x40>
 8012678:	bd70      	pop	{r4, r5, r6, pc}
 801267a:	f853 6b04 	ldr.w	r6, [r3], #4
 801267e:	f845 6f04 	str.w	r6, [r5, #4]!
 8012682:	e7eb      	b.n	801265c <__copybits+0x18>
 8012684:	f840 3b04 	str.w	r3, [r0], #4
 8012688:	e7f4      	b.n	8012674 <__copybits+0x30>

0801268a <__any_on>:
 801268a:	f100 0214 	add.w	r2, r0, #20
 801268e:	6900      	ldr	r0, [r0, #16]
 8012690:	114b      	asrs	r3, r1, #5
 8012692:	4298      	cmp	r0, r3
 8012694:	b510      	push	{r4, lr}
 8012696:	db11      	blt.n	80126bc <__any_on+0x32>
 8012698:	dd0a      	ble.n	80126b0 <__any_on+0x26>
 801269a:	f011 011f 	ands.w	r1, r1, #31
 801269e:	d007      	beq.n	80126b0 <__any_on+0x26>
 80126a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80126a4:	fa24 f001 	lsr.w	r0, r4, r1
 80126a8:	fa00 f101 	lsl.w	r1, r0, r1
 80126ac:	428c      	cmp	r4, r1
 80126ae:	d10b      	bne.n	80126c8 <__any_on+0x3e>
 80126b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80126b4:	4293      	cmp	r3, r2
 80126b6:	d803      	bhi.n	80126c0 <__any_on+0x36>
 80126b8:	2000      	movs	r0, #0
 80126ba:	bd10      	pop	{r4, pc}
 80126bc:	4603      	mov	r3, r0
 80126be:	e7f7      	b.n	80126b0 <__any_on+0x26>
 80126c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80126c4:	2900      	cmp	r1, #0
 80126c6:	d0f5      	beq.n	80126b4 <__any_on+0x2a>
 80126c8:	2001      	movs	r0, #1
 80126ca:	e7f6      	b.n	80126ba <__any_on+0x30>

080126cc <_calloc_r>:
 80126cc:	b570      	push	{r4, r5, r6, lr}
 80126ce:	fba1 5402 	umull	r5, r4, r1, r2
 80126d2:	b934      	cbnz	r4, 80126e2 <_calloc_r+0x16>
 80126d4:	4629      	mov	r1, r5
 80126d6:	f000 f875 	bl	80127c4 <_malloc_r>
 80126da:	4606      	mov	r6, r0
 80126dc:	b928      	cbnz	r0, 80126ea <_calloc_r+0x1e>
 80126de:	4630      	mov	r0, r6
 80126e0:	bd70      	pop	{r4, r5, r6, pc}
 80126e2:	220c      	movs	r2, #12
 80126e4:	2600      	movs	r6, #0
 80126e6:	6002      	str	r2, [r0, #0]
 80126e8:	e7f9      	b.n	80126de <_calloc_r+0x12>
 80126ea:	462a      	mov	r2, r5
 80126ec:	4621      	mov	r1, r4
 80126ee:	f7fc fdf3 	bl	800f2d8 <memset>
 80126f2:	e7f4      	b.n	80126de <_calloc_r+0x12>

080126f4 <_free_r>:
 80126f4:	b538      	push	{r3, r4, r5, lr}
 80126f6:	4605      	mov	r5, r0
 80126f8:	2900      	cmp	r1, #0
 80126fa:	d040      	beq.n	801277e <_free_r+0x8a>
 80126fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012700:	1f0c      	subs	r4, r1, #4
 8012702:	2b00      	cmp	r3, #0
 8012704:	bfb8      	it	lt
 8012706:	18e4      	addlt	r4, r4, r3
 8012708:	f000 feba 	bl	8013480 <__malloc_lock>
 801270c:	4a1c      	ldr	r2, [pc, #112]	; (8012780 <_free_r+0x8c>)
 801270e:	6813      	ldr	r3, [r2, #0]
 8012710:	b933      	cbnz	r3, 8012720 <_free_r+0x2c>
 8012712:	6063      	str	r3, [r4, #4]
 8012714:	6014      	str	r4, [r2, #0]
 8012716:	4628      	mov	r0, r5
 8012718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801271c:	f000 beb6 	b.w	801348c <__malloc_unlock>
 8012720:	42a3      	cmp	r3, r4
 8012722:	d908      	bls.n	8012736 <_free_r+0x42>
 8012724:	6820      	ldr	r0, [r4, #0]
 8012726:	1821      	adds	r1, r4, r0
 8012728:	428b      	cmp	r3, r1
 801272a:	bf01      	itttt	eq
 801272c:	6819      	ldreq	r1, [r3, #0]
 801272e:	685b      	ldreq	r3, [r3, #4]
 8012730:	1809      	addeq	r1, r1, r0
 8012732:	6021      	streq	r1, [r4, #0]
 8012734:	e7ed      	b.n	8012712 <_free_r+0x1e>
 8012736:	461a      	mov	r2, r3
 8012738:	685b      	ldr	r3, [r3, #4]
 801273a:	b10b      	cbz	r3, 8012740 <_free_r+0x4c>
 801273c:	42a3      	cmp	r3, r4
 801273e:	d9fa      	bls.n	8012736 <_free_r+0x42>
 8012740:	6811      	ldr	r1, [r2, #0]
 8012742:	1850      	adds	r0, r2, r1
 8012744:	42a0      	cmp	r0, r4
 8012746:	d10b      	bne.n	8012760 <_free_r+0x6c>
 8012748:	6820      	ldr	r0, [r4, #0]
 801274a:	4401      	add	r1, r0
 801274c:	1850      	adds	r0, r2, r1
 801274e:	4283      	cmp	r3, r0
 8012750:	6011      	str	r1, [r2, #0]
 8012752:	d1e0      	bne.n	8012716 <_free_r+0x22>
 8012754:	6818      	ldr	r0, [r3, #0]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	4401      	add	r1, r0
 801275a:	6011      	str	r1, [r2, #0]
 801275c:	6053      	str	r3, [r2, #4]
 801275e:	e7da      	b.n	8012716 <_free_r+0x22>
 8012760:	d902      	bls.n	8012768 <_free_r+0x74>
 8012762:	230c      	movs	r3, #12
 8012764:	602b      	str	r3, [r5, #0]
 8012766:	e7d6      	b.n	8012716 <_free_r+0x22>
 8012768:	6820      	ldr	r0, [r4, #0]
 801276a:	1821      	adds	r1, r4, r0
 801276c:	428b      	cmp	r3, r1
 801276e:	bf01      	itttt	eq
 8012770:	6819      	ldreq	r1, [r3, #0]
 8012772:	685b      	ldreq	r3, [r3, #4]
 8012774:	1809      	addeq	r1, r1, r0
 8012776:	6021      	streq	r1, [r4, #0]
 8012778:	6063      	str	r3, [r4, #4]
 801277a:	6054      	str	r4, [r2, #4]
 801277c:	e7cb      	b.n	8012716 <_free_r+0x22>
 801277e:	bd38      	pop	{r3, r4, r5, pc}
 8012780:	200019f4 	.word	0x200019f4

08012784 <sbrk_aligned>:
 8012784:	b570      	push	{r4, r5, r6, lr}
 8012786:	4e0e      	ldr	r6, [pc, #56]	; (80127c0 <sbrk_aligned+0x3c>)
 8012788:	460c      	mov	r4, r1
 801278a:	6831      	ldr	r1, [r6, #0]
 801278c:	4605      	mov	r5, r0
 801278e:	b911      	cbnz	r1, 8012796 <sbrk_aligned+0x12>
 8012790:	f000 fb46 	bl	8012e20 <_sbrk_r>
 8012794:	6030      	str	r0, [r6, #0]
 8012796:	4621      	mov	r1, r4
 8012798:	4628      	mov	r0, r5
 801279a:	f000 fb41 	bl	8012e20 <_sbrk_r>
 801279e:	1c43      	adds	r3, r0, #1
 80127a0:	d00a      	beq.n	80127b8 <sbrk_aligned+0x34>
 80127a2:	1cc4      	adds	r4, r0, #3
 80127a4:	f024 0403 	bic.w	r4, r4, #3
 80127a8:	42a0      	cmp	r0, r4
 80127aa:	d007      	beq.n	80127bc <sbrk_aligned+0x38>
 80127ac:	1a21      	subs	r1, r4, r0
 80127ae:	4628      	mov	r0, r5
 80127b0:	f000 fb36 	bl	8012e20 <_sbrk_r>
 80127b4:	3001      	adds	r0, #1
 80127b6:	d101      	bne.n	80127bc <sbrk_aligned+0x38>
 80127b8:	f04f 34ff 	mov.w	r4, #4294967295
 80127bc:	4620      	mov	r0, r4
 80127be:	bd70      	pop	{r4, r5, r6, pc}
 80127c0:	200019f8 	.word	0x200019f8

080127c4 <_malloc_r>:
 80127c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c8:	1ccd      	adds	r5, r1, #3
 80127ca:	f025 0503 	bic.w	r5, r5, #3
 80127ce:	3508      	adds	r5, #8
 80127d0:	2d0c      	cmp	r5, #12
 80127d2:	bf38      	it	cc
 80127d4:	250c      	movcc	r5, #12
 80127d6:	2d00      	cmp	r5, #0
 80127d8:	4607      	mov	r7, r0
 80127da:	db01      	blt.n	80127e0 <_malloc_r+0x1c>
 80127dc:	42a9      	cmp	r1, r5
 80127de:	d905      	bls.n	80127ec <_malloc_r+0x28>
 80127e0:	230c      	movs	r3, #12
 80127e2:	2600      	movs	r6, #0
 80127e4:	603b      	str	r3, [r7, #0]
 80127e6:	4630      	mov	r0, r6
 80127e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127ec:	4e2e      	ldr	r6, [pc, #184]	; (80128a8 <_malloc_r+0xe4>)
 80127ee:	f000 fe47 	bl	8013480 <__malloc_lock>
 80127f2:	6833      	ldr	r3, [r6, #0]
 80127f4:	461c      	mov	r4, r3
 80127f6:	bb34      	cbnz	r4, 8012846 <_malloc_r+0x82>
 80127f8:	4629      	mov	r1, r5
 80127fa:	4638      	mov	r0, r7
 80127fc:	f7ff ffc2 	bl	8012784 <sbrk_aligned>
 8012800:	1c43      	adds	r3, r0, #1
 8012802:	4604      	mov	r4, r0
 8012804:	d14d      	bne.n	80128a2 <_malloc_r+0xde>
 8012806:	6834      	ldr	r4, [r6, #0]
 8012808:	4626      	mov	r6, r4
 801280a:	2e00      	cmp	r6, #0
 801280c:	d140      	bne.n	8012890 <_malloc_r+0xcc>
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	4631      	mov	r1, r6
 8012812:	4638      	mov	r0, r7
 8012814:	eb04 0803 	add.w	r8, r4, r3
 8012818:	f000 fb02 	bl	8012e20 <_sbrk_r>
 801281c:	4580      	cmp	r8, r0
 801281e:	d13a      	bne.n	8012896 <_malloc_r+0xd2>
 8012820:	6821      	ldr	r1, [r4, #0]
 8012822:	3503      	adds	r5, #3
 8012824:	1a6d      	subs	r5, r5, r1
 8012826:	f025 0503 	bic.w	r5, r5, #3
 801282a:	3508      	adds	r5, #8
 801282c:	2d0c      	cmp	r5, #12
 801282e:	bf38      	it	cc
 8012830:	250c      	movcc	r5, #12
 8012832:	4638      	mov	r0, r7
 8012834:	4629      	mov	r1, r5
 8012836:	f7ff ffa5 	bl	8012784 <sbrk_aligned>
 801283a:	3001      	adds	r0, #1
 801283c:	d02b      	beq.n	8012896 <_malloc_r+0xd2>
 801283e:	6823      	ldr	r3, [r4, #0]
 8012840:	442b      	add	r3, r5
 8012842:	6023      	str	r3, [r4, #0]
 8012844:	e00e      	b.n	8012864 <_malloc_r+0xa0>
 8012846:	6822      	ldr	r2, [r4, #0]
 8012848:	1b52      	subs	r2, r2, r5
 801284a:	d41e      	bmi.n	801288a <_malloc_r+0xc6>
 801284c:	2a0b      	cmp	r2, #11
 801284e:	d916      	bls.n	801287e <_malloc_r+0xba>
 8012850:	1961      	adds	r1, r4, r5
 8012852:	42a3      	cmp	r3, r4
 8012854:	6025      	str	r5, [r4, #0]
 8012856:	bf18      	it	ne
 8012858:	6059      	strne	r1, [r3, #4]
 801285a:	6863      	ldr	r3, [r4, #4]
 801285c:	bf08      	it	eq
 801285e:	6031      	streq	r1, [r6, #0]
 8012860:	5162      	str	r2, [r4, r5]
 8012862:	604b      	str	r3, [r1, #4]
 8012864:	4638      	mov	r0, r7
 8012866:	f104 060b 	add.w	r6, r4, #11
 801286a:	f000 fe0f 	bl	801348c <__malloc_unlock>
 801286e:	f026 0607 	bic.w	r6, r6, #7
 8012872:	1d23      	adds	r3, r4, #4
 8012874:	1af2      	subs	r2, r6, r3
 8012876:	d0b6      	beq.n	80127e6 <_malloc_r+0x22>
 8012878:	1b9b      	subs	r3, r3, r6
 801287a:	50a3      	str	r3, [r4, r2]
 801287c:	e7b3      	b.n	80127e6 <_malloc_r+0x22>
 801287e:	6862      	ldr	r2, [r4, #4]
 8012880:	42a3      	cmp	r3, r4
 8012882:	bf0c      	ite	eq
 8012884:	6032      	streq	r2, [r6, #0]
 8012886:	605a      	strne	r2, [r3, #4]
 8012888:	e7ec      	b.n	8012864 <_malloc_r+0xa0>
 801288a:	4623      	mov	r3, r4
 801288c:	6864      	ldr	r4, [r4, #4]
 801288e:	e7b2      	b.n	80127f6 <_malloc_r+0x32>
 8012890:	4634      	mov	r4, r6
 8012892:	6876      	ldr	r6, [r6, #4]
 8012894:	e7b9      	b.n	801280a <_malloc_r+0x46>
 8012896:	230c      	movs	r3, #12
 8012898:	4638      	mov	r0, r7
 801289a:	603b      	str	r3, [r7, #0]
 801289c:	f000 fdf6 	bl	801348c <__malloc_unlock>
 80128a0:	e7a1      	b.n	80127e6 <_malloc_r+0x22>
 80128a2:	6025      	str	r5, [r4, #0]
 80128a4:	e7de      	b.n	8012864 <_malloc_r+0xa0>
 80128a6:	bf00      	nop
 80128a8:	200019f4 	.word	0x200019f4

080128ac <__ssputs_r>:
 80128ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128b0:	688e      	ldr	r6, [r1, #8]
 80128b2:	4682      	mov	sl, r0
 80128b4:	429e      	cmp	r6, r3
 80128b6:	460c      	mov	r4, r1
 80128b8:	4690      	mov	r8, r2
 80128ba:	461f      	mov	r7, r3
 80128bc:	d838      	bhi.n	8012930 <__ssputs_r+0x84>
 80128be:	898a      	ldrh	r2, [r1, #12]
 80128c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80128c4:	d032      	beq.n	801292c <__ssputs_r+0x80>
 80128c6:	6825      	ldr	r5, [r4, #0]
 80128c8:	6909      	ldr	r1, [r1, #16]
 80128ca:	3301      	adds	r3, #1
 80128cc:	eba5 0901 	sub.w	r9, r5, r1
 80128d0:	6965      	ldr	r5, [r4, #20]
 80128d2:	444b      	add	r3, r9
 80128d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80128dc:	106d      	asrs	r5, r5, #1
 80128de:	429d      	cmp	r5, r3
 80128e0:	bf38      	it	cc
 80128e2:	461d      	movcc	r5, r3
 80128e4:	0553      	lsls	r3, r2, #21
 80128e6:	d531      	bpl.n	801294c <__ssputs_r+0xa0>
 80128e8:	4629      	mov	r1, r5
 80128ea:	f7ff ff6b 	bl	80127c4 <_malloc_r>
 80128ee:	4606      	mov	r6, r0
 80128f0:	b950      	cbnz	r0, 8012908 <__ssputs_r+0x5c>
 80128f2:	230c      	movs	r3, #12
 80128f4:	f04f 30ff 	mov.w	r0, #4294967295
 80128f8:	f8ca 3000 	str.w	r3, [sl]
 80128fc:	89a3      	ldrh	r3, [r4, #12]
 80128fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012902:	81a3      	strh	r3, [r4, #12]
 8012904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012908:	464a      	mov	r2, r9
 801290a:	6921      	ldr	r1, [r4, #16]
 801290c:	f7fc fcd6 	bl	800f2bc <memcpy>
 8012910:	89a3      	ldrh	r3, [r4, #12]
 8012912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801291a:	81a3      	strh	r3, [r4, #12]
 801291c:	6126      	str	r6, [r4, #16]
 801291e:	444e      	add	r6, r9
 8012920:	6026      	str	r6, [r4, #0]
 8012922:	463e      	mov	r6, r7
 8012924:	6165      	str	r5, [r4, #20]
 8012926:	eba5 0509 	sub.w	r5, r5, r9
 801292a:	60a5      	str	r5, [r4, #8]
 801292c:	42be      	cmp	r6, r7
 801292e:	d900      	bls.n	8012932 <__ssputs_r+0x86>
 8012930:	463e      	mov	r6, r7
 8012932:	4632      	mov	r2, r6
 8012934:	4641      	mov	r1, r8
 8012936:	6820      	ldr	r0, [r4, #0]
 8012938:	f000 fd88 	bl	801344c <memmove>
 801293c:	68a3      	ldr	r3, [r4, #8]
 801293e:	2000      	movs	r0, #0
 8012940:	1b9b      	subs	r3, r3, r6
 8012942:	60a3      	str	r3, [r4, #8]
 8012944:	6823      	ldr	r3, [r4, #0]
 8012946:	4433      	add	r3, r6
 8012948:	6023      	str	r3, [r4, #0]
 801294a:	e7db      	b.n	8012904 <__ssputs_r+0x58>
 801294c:	462a      	mov	r2, r5
 801294e:	f000 fda3 	bl	8013498 <_realloc_r>
 8012952:	4606      	mov	r6, r0
 8012954:	2800      	cmp	r0, #0
 8012956:	d1e1      	bne.n	801291c <__ssputs_r+0x70>
 8012958:	4650      	mov	r0, sl
 801295a:	6921      	ldr	r1, [r4, #16]
 801295c:	f7ff feca 	bl	80126f4 <_free_r>
 8012960:	e7c7      	b.n	80128f2 <__ssputs_r+0x46>
	...

08012964 <_svfiprintf_r>:
 8012964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012968:	4698      	mov	r8, r3
 801296a:	898b      	ldrh	r3, [r1, #12]
 801296c:	4607      	mov	r7, r0
 801296e:	061b      	lsls	r3, r3, #24
 8012970:	460d      	mov	r5, r1
 8012972:	4614      	mov	r4, r2
 8012974:	b09d      	sub	sp, #116	; 0x74
 8012976:	d50e      	bpl.n	8012996 <_svfiprintf_r+0x32>
 8012978:	690b      	ldr	r3, [r1, #16]
 801297a:	b963      	cbnz	r3, 8012996 <_svfiprintf_r+0x32>
 801297c:	2140      	movs	r1, #64	; 0x40
 801297e:	f7ff ff21 	bl	80127c4 <_malloc_r>
 8012982:	6028      	str	r0, [r5, #0]
 8012984:	6128      	str	r0, [r5, #16]
 8012986:	b920      	cbnz	r0, 8012992 <_svfiprintf_r+0x2e>
 8012988:	230c      	movs	r3, #12
 801298a:	603b      	str	r3, [r7, #0]
 801298c:	f04f 30ff 	mov.w	r0, #4294967295
 8012990:	e0d1      	b.n	8012b36 <_svfiprintf_r+0x1d2>
 8012992:	2340      	movs	r3, #64	; 0x40
 8012994:	616b      	str	r3, [r5, #20]
 8012996:	2300      	movs	r3, #0
 8012998:	9309      	str	r3, [sp, #36]	; 0x24
 801299a:	2320      	movs	r3, #32
 801299c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80129a0:	2330      	movs	r3, #48	; 0x30
 80129a2:	f04f 0901 	mov.w	r9, #1
 80129a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80129aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012b50 <_svfiprintf_r+0x1ec>
 80129ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80129b2:	4623      	mov	r3, r4
 80129b4:	469a      	mov	sl, r3
 80129b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129ba:	b10a      	cbz	r2, 80129c0 <_svfiprintf_r+0x5c>
 80129bc:	2a25      	cmp	r2, #37	; 0x25
 80129be:	d1f9      	bne.n	80129b4 <_svfiprintf_r+0x50>
 80129c0:	ebba 0b04 	subs.w	fp, sl, r4
 80129c4:	d00b      	beq.n	80129de <_svfiprintf_r+0x7a>
 80129c6:	465b      	mov	r3, fp
 80129c8:	4622      	mov	r2, r4
 80129ca:	4629      	mov	r1, r5
 80129cc:	4638      	mov	r0, r7
 80129ce:	f7ff ff6d 	bl	80128ac <__ssputs_r>
 80129d2:	3001      	adds	r0, #1
 80129d4:	f000 80aa 	beq.w	8012b2c <_svfiprintf_r+0x1c8>
 80129d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129da:	445a      	add	r2, fp
 80129dc:	9209      	str	r2, [sp, #36]	; 0x24
 80129de:	f89a 3000 	ldrb.w	r3, [sl]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	f000 80a2 	beq.w	8012b2c <_svfiprintf_r+0x1c8>
 80129e8:	2300      	movs	r3, #0
 80129ea:	f04f 32ff 	mov.w	r2, #4294967295
 80129ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129f2:	f10a 0a01 	add.w	sl, sl, #1
 80129f6:	9304      	str	r3, [sp, #16]
 80129f8:	9307      	str	r3, [sp, #28]
 80129fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129fe:	931a      	str	r3, [sp, #104]	; 0x68
 8012a00:	4654      	mov	r4, sl
 8012a02:	2205      	movs	r2, #5
 8012a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a08:	4851      	ldr	r0, [pc, #324]	; (8012b50 <_svfiprintf_r+0x1ec>)
 8012a0a:	f7ff f999 	bl	8011d40 <memchr>
 8012a0e:	9a04      	ldr	r2, [sp, #16]
 8012a10:	b9d8      	cbnz	r0, 8012a4a <_svfiprintf_r+0xe6>
 8012a12:	06d0      	lsls	r0, r2, #27
 8012a14:	bf44      	itt	mi
 8012a16:	2320      	movmi	r3, #32
 8012a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a1c:	0711      	lsls	r1, r2, #28
 8012a1e:	bf44      	itt	mi
 8012a20:	232b      	movmi	r3, #43	; 0x2b
 8012a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a26:	f89a 3000 	ldrb.w	r3, [sl]
 8012a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8012a2c:	d015      	beq.n	8012a5a <_svfiprintf_r+0xf6>
 8012a2e:	4654      	mov	r4, sl
 8012a30:	2000      	movs	r0, #0
 8012a32:	f04f 0c0a 	mov.w	ip, #10
 8012a36:	9a07      	ldr	r2, [sp, #28]
 8012a38:	4621      	mov	r1, r4
 8012a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a3e:	3b30      	subs	r3, #48	; 0x30
 8012a40:	2b09      	cmp	r3, #9
 8012a42:	d94e      	bls.n	8012ae2 <_svfiprintf_r+0x17e>
 8012a44:	b1b0      	cbz	r0, 8012a74 <_svfiprintf_r+0x110>
 8012a46:	9207      	str	r2, [sp, #28]
 8012a48:	e014      	b.n	8012a74 <_svfiprintf_r+0x110>
 8012a4a:	eba0 0308 	sub.w	r3, r0, r8
 8012a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8012a52:	4313      	orrs	r3, r2
 8012a54:	46a2      	mov	sl, r4
 8012a56:	9304      	str	r3, [sp, #16]
 8012a58:	e7d2      	b.n	8012a00 <_svfiprintf_r+0x9c>
 8012a5a:	9b03      	ldr	r3, [sp, #12]
 8012a5c:	1d19      	adds	r1, r3, #4
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	9103      	str	r1, [sp, #12]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	bfbb      	ittet	lt
 8012a66:	425b      	neglt	r3, r3
 8012a68:	f042 0202 	orrlt.w	r2, r2, #2
 8012a6c:	9307      	strge	r3, [sp, #28]
 8012a6e:	9307      	strlt	r3, [sp, #28]
 8012a70:	bfb8      	it	lt
 8012a72:	9204      	strlt	r2, [sp, #16]
 8012a74:	7823      	ldrb	r3, [r4, #0]
 8012a76:	2b2e      	cmp	r3, #46	; 0x2e
 8012a78:	d10c      	bne.n	8012a94 <_svfiprintf_r+0x130>
 8012a7a:	7863      	ldrb	r3, [r4, #1]
 8012a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8012a7e:	d135      	bne.n	8012aec <_svfiprintf_r+0x188>
 8012a80:	9b03      	ldr	r3, [sp, #12]
 8012a82:	3402      	adds	r4, #2
 8012a84:	1d1a      	adds	r2, r3, #4
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	9203      	str	r2, [sp, #12]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	bfb8      	it	lt
 8012a8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012a92:	9305      	str	r3, [sp, #20]
 8012a94:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8012b54 <_svfiprintf_r+0x1f0>
 8012a98:	2203      	movs	r2, #3
 8012a9a:	4650      	mov	r0, sl
 8012a9c:	7821      	ldrb	r1, [r4, #0]
 8012a9e:	f7ff f94f 	bl	8011d40 <memchr>
 8012aa2:	b140      	cbz	r0, 8012ab6 <_svfiprintf_r+0x152>
 8012aa4:	2340      	movs	r3, #64	; 0x40
 8012aa6:	eba0 000a 	sub.w	r0, r0, sl
 8012aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8012aae:	9b04      	ldr	r3, [sp, #16]
 8012ab0:	3401      	adds	r4, #1
 8012ab2:	4303      	orrs	r3, r0
 8012ab4:	9304      	str	r3, [sp, #16]
 8012ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aba:	2206      	movs	r2, #6
 8012abc:	4826      	ldr	r0, [pc, #152]	; (8012b58 <_svfiprintf_r+0x1f4>)
 8012abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ac2:	f7ff f93d 	bl	8011d40 <memchr>
 8012ac6:	2800      	cmp	r0, #0
 8012ac8:	d038      	beq.n	8012b3c <_svfiprintf_r+0x1d8>
 8012aca:	4b24      	ldr	r3, [pc, #144]	; (8012b5c <_svfiprintf_r+0x1f8>)
 8012acc:	bb1b      	cbnz	r3, 8012b16 <_svfiprintf_r+0x1b2>
 8012ace:	9b03      	ldr	r3, [sp, #12]
 8012ad0:	3307      	adds	r3, #7
 8012ad2:	f023 0307 	bic.w	r3, r3, #7
 8012ad6:	3308      	adds	r3, #8
 8012ad8:	9303      	str	r3, [sp, #12]
 8012ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012adc:	4433      	add	r3, r6
 8012ade:	9309      	str	r3, [sp, #36]	; 0x24
 8012ae0:	e767      	b.n	80129b2 <_svfiprintf_r+0x4e>
 8012ae2:	460c      	mov	r4, r1
 8012ae4:	2001      	movs	r0, #1
 8012ae6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012aea:	e7a5      	b.n	8012a38 <_svfiprintf_r+0xd4>
 8012aec:	2300      	movs	r3, #0
 8012aee:	f04f 0c0a 	mov.w	ip, #10
 8012af2:	4619      	mov	r1, r3
 8012af4:	3401      	adds	r4, #1
 8012af6:	9305      	str	r3, [sp, #20]
 8012af8:	4620      	mov	r0, r4
 8012afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012afe:	3a30      	subs	r2, #48	; 0x30
 8012b00:	2a09      	cmp	r2, #9
 8012b02:	d903      	bls.n	8012b0c <_svfiprintf_r+0x1a8>
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d0c5      	beq.n	8012a94 <_svfiprintf_r+0x130>
 8012b08:	9105      	str	r1, [sp, #20]
 8012b0a:	e7c3      	b.n	8012a94 <_svfiprintf_r+0x130>
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	2301      	movs	r3, #1
 8012b10:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b14:	e7f0      	b.n	8012af8 <_svfiprintf_r+0x194>
 8012b16:	ab03      	add	r3, sp, #12
 8012b18:	9300      	str	r3, [sp, #0]
 8012b1a:	462a      	mov	r2, r5
 8012b1c:	4638      	mov	r0, r7
 8012b1e:	4b10      	ldr	r3, [pc, #64]	; (8012b60 <_svfiprintf_r+0x1fc>)
 8012b20:	a904      	add	r1, sp, #16
 8012b22:	f7fc fc7f 	bl	800f424 <_printf_float>
 8012b26:	1c42      	adds	r2, r0, #1
 8012b28:	4606      	mov	r6, r0
 8012b2a:	d1d6      	bne.n	8012ada <_svfiprintf_r+0x176>
 8012b2c:	89ab      	ldrh	r3, [r5, #12]
 8012b2e:	065b      	lsls	r3, r3, #25
 8012b30:	f53f af2c 	bmi.w	801298c <_svfiprintf_r+0x28>
 8012b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b36:	b01d      	add	sp, #116	; 0x74
 8012b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3c:	ab03      	add	r3, sp, #12
 8012b3e:	9300      	str	r3, [sp, #0]
 8012b40:	462a      	mov	r2, r5
 8012b42:	4638      	mov	r0, r7
 8012b44:	4b06      	ldr	r3, [pc, #24]	; (8012b60 <_svfiprintf_r+0x1fc>)
 8012b46:	a904      	add	r1, sp, #16
 8012b48:	f7fc ff08 	bl	800f95c <_printf_i>
 8012b4c:	e7eb      	b.n	8012b26 <_svfiprintf_r+0x1c2>
 8012b4e:	bf00      	nop
 8012b50:	08013e04 	.word	0x08013e04
 8012b54:	08013e0a 	.word	0x08013e0a
 8012b58:	08013e0e 	.word	0x08013e0e
 8012b5c:	0800f425 	.word	0x0800f425
 8012b60:	080128ad 	.word	0x080128ad

08012b64 <__sfputc_r>:
 8012b64:	6893      	ldr	r3, [r2, #8]
 8012b66:	b410      	push	{r4}
 8012b68:	3b01      	subs	r3, #1
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	6093      	str	r3, [r2, #8]
 8012b6e:	da07      	bge.n	8012b80 <__sfputc_r+0x1c>
 8012b70:	6994      	ldr	r4, [r2, #24]
 8012b72:	42a3      	cmp	r3, r4
 8012b74:	db01      	blt.n	8012b7a <__sfputc_r+0x16>
 8012b76:	290a      	cmp	r1, #10
 8012b78:	d102      	bne.n	8012b80 <__sfputc_r+0x1c>
 8012b7a:	bc10      	pop	{r4}
 8012b7c:	f000 b974 	b.w	8012e68 <__swbuf_r>
 8012b80:	6813      	ldr	r3, [r2, #0]
 8012b82:	1c58      	adds	r0, r3, #1
 8012b84:	6010      	str	r0, [r2, #0]
 8012b86:	7019      	strb	r1, [r3, #0]
 8012b88:	4608      	mov	r0, r1
 8012b8a:	bc10      	pop	{r4}
 8012b8c:	4770      	bx	lr

08012b8e <__sfputs_r>:
 8012b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b90:	4606      	mov	r6, r0
 8012b92:	460f      	mov	r7, r1
 8012b94:	4614      	mov	r4, r2
 8012b96:	18d5      	adds	r5, r2, r3
 8012b98:	42ac      	cmp	r4, r5
 8012b9a:	d101      	bne.n	8012ba0 <__sfputs_r+0x12>
 8012b9c:	2000      	movs	r0, #0
 8012b9e:	e007      	b.n	8012bb0 <__sfputs_r+0x22>
 8012ba0:	463a      	mov	r2, r7
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ba8:	f7ff ffdc 	bl	8012b64 <__sfputc_r>
 8012bac:	1c43      	adds	r3, r0, #1
 8012bae:	d1f3      	bne.n	8012b98 <__sfputs_r+0xa>
 8012bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012bb4 <_vfiprintf_r>:
 8012bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb8:	460d      	mov	r5, r1
 8012bba:	4614      	mov	r4, r2
 8012bbc:	4698      	mov	r8, r3
 8012bbe:	4606      	mov	r6, r0
 8012bc0:	b09d      	sub	sp, #116	; 0x74
 8012bc2:	b118      	cbz	r0, 8012bcc <_vfiprintf_r+0x18>
 8012bc4:	6983      	ldr	r3, [r0, #24]
 8012bc6:	b90b      	cbnz	r3, 8012bcc <_vfiprintf_r+0x18>
 8012bc8:	f000 fb3a 	bl	8013240 <__sinit>
 8012bcc:	4b89      	ldr	r3, [pc, #548]	; (8012df4 <_vfiprintf_r+0x240>)
 8012bce:	429d      	cmp	r5, r3
 8012bd0:	d11b      	bne.n	8012c0a <_vfiprintf_r+0x56>
 8012bd2:	6875      	ldr	r5, [r6, #4]
 8012bd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bd6:	07d9      	lsls	r1, r3, #31
 8012bd8:	d405      	bmi.n	8012be6 <_vfiprintf_r+0x32>
 8012bda:	89ab      	ldrh	r3, [r5, #12]
 8012bdc:	059a      	lsls	r2, r3, #22
 8012bde:	d402      	bmi.n	8012be6 <_vfiprintf_r+0x32>
 8012be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012be2:	f000 fbcb 	bl	801337c <__retarget_lock_acquire_recursive>
 8012be6:	89ab      	ldrh	r3, [r5, #12]
 8012be8:	071b      	lsls	r3, r3, #28
 8012bea:	d501      	bpl.n	8012bf0 <_vfiprintf_r+0x3c>
 8012bec:	692b      	ldr	r3, [r5, #16]
 8012bee:	b9eb      	cbnz	r3, 8012c2c <_vfiprintf_r+0x78>
 8012bf0:	4629      	mov	r1, r5
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	f000 f998 	bl	8012f28 <__swsetup_r>
 8012bf8:	b1c0      	cbz	r0, 8012c2c <_vfiprintf_r+0x78>
 8012bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bfc:	07dc      	lsls	r4, r3, #31
 8012bfe:	d50e      	bpl.n	8012c1e <_vfiprintf_r+0x6a>
 8012c00:	f04f 30ff 	mov.w	r0, #4294967295
 8012c04:	b01d      	add	sp, #116	; 0x74
 8012c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c0a:	4b7b      	ldr	r3, [pc, #492]	; (8012df8 <_vfiprintf_r+0x244>)
 8012c0c:	429d      	cmp	r5, r3
 8012c0e:	d101      	bne.n	8012c14 <_vfiprintf_r+0x60>
 8012c10:	68b5      	ldr	r5, [r6, #8]
 8012c12:	e7df      	b.n	8012bd4 <_vfiprintf_r+0x20>
 8012c14:	4b79      	ldr	r3, [pc, #484]	; (8012dfc <_vfiprintf_r+0x248>)
 8012c16:	429d      	cmp	r5, r3
 8012c18:	bf08      	it	eq
 8012c1a:	68f5      	ldreq	r5, [r6, #12]
 8012c1c:	e7da      	b.n	8012bd4 <_vfiprintf_r+0x20>
 8012c1e:	89ab      	ldrh	r3, [r5, #12]
 8012c20:	0598      	lsls	r0, r3, #22
 8012c22:	d4ed      	bmi.n	8012c00 <_vfiprintf_r+0x4c>
 8012c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c26:	f000 fbaa 	bl	801337e <__retarget_lock_release_recursive>
 8012c2a:	e7e9      	b.n	8012c00 <_vfiprintf_r+0x4c>
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c30:	2320      	movs	r3, #32
 8012c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c36:	2330      	movs	r3, #48	; 0x30
 8012c38:	f04f 0901 	mov.w	r9, #1
 8012c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8012e00 <_vfiprintf_r+0x24c>
 8012c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c48:	4623      	mov	r3, r4
 8012c4a:	469a      	mov	sl, r3
 8012c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c50:	b10a      	cbz	r2, 8012c56 <_vfiprintf_r+0xa2>
 8012c52:	2a25      	cmp	r2, #37	; 0x25
 8012c54:	d1f9      	bne.n	8012c4a <_vfiprintf_r+0x96>
 8012c56:	ebba 0b04 	subs.w	fp, sl, r4
 8012c5a:	d00b      	beq.n	8012c74 <_vfiprintf_r+0xc0>
 8012c5c:	465b      	mov	r3, fp
 8012c5e:	4622      	mov	r2, r4
 8012c60:	4629      	mov	r1, r5
 8012c62:	4630      	mov	r0, r6
 8012c64:	f7ff ff93 	bl	8012b8e <__sfputs_r>
 8012c68:	3001      	adds	r0, #1
 8012c6a:	f000 80aa 	beq.w	8012dc2 <_vfiprintf_r+0x20e>
 8012c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c70:	445a      	add	r2, fp
 8012c72:	9209      	str	r2, [sp, #36]	; 0x24
 8012c74:	f89a 3000 	ldrb.w	r3, [sl]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	f000 80a2 	beq.w	8012dc2 <_vfiprintf_r+0x20e>
 8012c7e:	2300      	movs	r3, #0
 8012c80:	f04f 32ff 	mov.w	r2, #4294967295
 8012c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c88:	f10a 0a01 	add.w	sl, sl, #1
 8012c8c:	9304      	str	r3, [sp, #16]
 8012c8e:	9307      	str	r3, [sp, #28]
 8012c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c94:	931a      	str	r3, [sp, #104]	; 0x68
 8012c96:	4654      	mov	r4, sl
 8012c98:	2205      	movs	r2, #5
 8012c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c9e:	4858      	ldr	r0, [pc, #352]	; (8012e00 <_vfiprintf_r+0x24c>)
 8012ca0:	f7ff f84e 	bl	8011d40 <memchr>
 8012ca4:	9a04      	ldr	r2, [sp, #16]
 8012ca6:	b9d8      	cbnz	r0, 8012ce0 <_vfiprintf_r+0x12c>
 8012ca8:	06d1      	lsls	r1, r2, #27
 8012caa:	bf44      	itt	mi
 8012cac:	2320      	movmi	r3, #32
 8012cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cb2:	0713      	lsls	r3, r2, #28
 8012cb4:	bf44      	itt	mi
 8012cb6:	232b      	movmi	r3, #43	; 0x2b
 8012cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8012cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8012cc2:	d015      	beq.n	8012cf0 <_vfiprintf_r+0x13c>
 8012cc4:	4654      	mov	r4, sl
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	f04f 0c0a 	mov.w	ip, #10
 8012ccc:	9a07      	ldr	r2, [sp, #28]
 8012cce:	4621      	mov	r1, r4
 8012cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cd4:	3b30      	subs	r3, #48	; 0x30
 8012cd6:	2b09      	cmp	r3, #9
 8012cd8:	d94e      	bls.n	8012d78 <_vfiprintf_r+0x1c4>
 8012cda:	b1b0      	cbz	r0, 8012d0a <_vfiprintf_r+0x156>
 8012cdc:	9207      	str	r2, [sp, #28]
 8012cde:	e014      	b.n	8012d0a <_vfiprintf_r+0x156>
 8012ce0:	eba0 0308 	sub.w	r3, r0, r8
 8012ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8012ce8:	4313      	orrs	r3, r2
 8012cea:	46a2      	mov	sl, r4
 8012cec:	9304      	str	r3, [sp, #16]
 8012cee:	e7d2      	b.n	8012c96 <_vfiprintf_r+0xe2>
 8012cf0:	9b03      	ldr	r3, [sp, #12]
 8012cf2:	1d19      	adds	r1, r3, #4
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	9103      	str	r1, [sp, #12]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	bfbb      	ittet	lt
 8012cfc:	425b      	neglt	r3, r3
 8012cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8012d02:	9307      	strge	r3, [sp, #28]
 8012d04:	9307      	strlt	r3, [sp, #28]
 8012d06:	bfb8      	it	lt
 8012d08:	9204      	strlt	r2, [sp, #16]
 8012d0a:	7823      	ldrb	r3, [r4, #0]
 8012d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8012d0e:	d10c      	bne.n	8012d2a <_vfiprintf_r+0x176>
 8012d10:	7863      	ldrb	r3, [r4, #1]
 8012d12:	2b2a      	cmp	r3, #42	; 0x2a
 8012d14:	d135      	bne.n	8012d82 <_vfiprintf_r+0x1ce>
 8012d16:	9b03      	ldr	r3, [sp, #12]
 8012d18:	3402      	adds	r4, #2
 8012d1a:	1d1a      	adds	r2, r3, #4
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	9203      	str	r2, [sp, #12]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	bfb8      	it	lt
 8012d24:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d28:	9305      	str	r3, [sp, #20]
 8012d2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8012e04 <_vfiprintf_r+0x250>
 8012d2e:	2203      	movs	r2, #3
 8012d30:	4650      	mov	r0, sl
 8012d32:	7821      	ldrb	r1, [r4, #0]
 8012d34:	f7ff f804 	bl	8011d40 <memchr>
 8012d38:	b140      	cbz	r0, 8012d4c <_vfiprintf_r+0x198>
 8012d3a:	2340      	movs	r3, #64	; 0x40
 8012d3c:	eba0 000a 	sub.w	r0, r0, sl
 8012d40:	fa03 f000 	lsl.w	r0, r3, r0
 8012d44:	9b04      	ldr	r3, [sp, #16]
 8012d46:	3401      	adds	r4, #1
 8012d48:	4303      	orrs	r3, r0
 8012d4a:	9304      	str	r3, [sp, #16]
 8012d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d50:	2206      	movs	r2, #6
 8012d52:	482d      	ldr	r0, [pc, #180]	; (8012e08 <_vfiprintf_r+0x254>)
 8012d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d58:	f7fe fff2 	bl	8011d40 <memchr>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	d03f      	beq.n	8012de0 <_vfiprintf_r+0x22c>
 8012d60:	4b2a      	ldr	r3, [pc, #168]	; (8012e0c <_vfiprintf_r+0x258>)
 8012d62:	bb1b      	cbnz	r3, 8012dac <_vfiprintf_r+0x1f8>
 8012d64:	9b03      	ldr	r3, [sp, #12]
 8012d66:	3307      	adds	r3, #7
 8012d68:	f023 0307 	bic.w	r3, r3, #7
 8012d6c:	3308      	adds	r3, #8
 8012d6e:	9303      	str	r3, [sp, #12]
 8012d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d72:	443b      	add	r3, r7
 8012d74:	9309      	str	r3, [sp, #36]	; 0x24
 8012d76:	e767      	b.n	8012c48 <_vfiprintf_r+0x94>
 8012d78:	460c      	mov	r4, r1
 8012d7a:	2001      	movs	r0, #1
 8012d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d80:	e7a5      	b.n	8012cce <_vfiprintf_r+0x11a>
 8012d82:	2300      	movs	r3, #0
 8012d84:	f04f 0c0a 	mov.w	ip, #10
 8012d88:	4619      	mov	r1, r3
 8012d8a:	3401      	adds	r4, #1
 8012d8c:	9305      	str	r3, [sp, #20]
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d94:	3a30      	subs	r2, #48	; 0x30
 8012d96:	2a09      	cmp	r2, #9
 8012d98:	d903      	bls.n	8012da2 <_vfiprintf_r+0x1ee>
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d0c5      	beq.n	8012d2a <_vfiprintf_r+0x176>
 8012d9e:	9105      	str	r1, [sp, #20]
 8012da0:	e7c3      	b.n	8012d2a <_vfiprintf_r+0x176>
 8012da2:	4604      	mov	r4, r0
 8012da4:	2301      	movs	r3, #1
 8012da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012daa:	e7f0      	b.n	8012d8e <_vfiprintf_r+0x1da>
 8012dac:	ab03      	add	r3, sp, #12
 8012dae:	9300      	str	r3, [sp, #0]
 8012db0:	462a      	mov	r2, r5
 8012db2:	4630      	mov	r0, r6
 8012db4:	4b16      	ldr	r3, [pc, #88]	; (8012e10 <_vfiprintf_r+0x25c>)
 8012db6:	a904      	add	r1, sp, #16
 8012db8:	f7fc fb34 	bl	800f424 <_printf_float>
 8012dbc:	4607      	mov	r7, r0
 8012dbe:	1c78      	adds	r0, r7, #1
 8012dc0:	d1d6      	bne.n	8012d70 <_vfiprintf_r+0x1bc>
 8012dc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012dc4:	07d9      	lsls	r1, r3, #31
 8012dc6:	d405      	bmi.n	8012dd4 <_vfiprintf_r+0x220>
 8012dc8:	89ab      	ldrh	r3, [r5, #12]
 8012dca:	059a      	lsls	r2, r3, #22
 8012dcc:	d402      	bmi.n	8012dd4 <_vfiprintf_r+0x220>
 8012dce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012dd0:	f000 fad5 	bl	801337e <__retarget_lock_release_recursive>
 8012dd4:	89ab      	ldrh	r3, [r5, #12]
 8012dd6:	065b      	lsls	r3, r3, #25
 8012dd8:	f53f af12 	bmi.w	8012c00 <_vfiprintf_r+0x4c>
 8012ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dde:	e711      	b.n	8012c04 <_vfiprintf_r+0x50>
 8012de0:	ab03      	add	r3, sp, #12
 8012de2:	9300      	str	r3, [sp, #0]
 8012de4:	462a      	mov	r2, r5
 8012de6:	4630      	mov	r0, r6
 8012de8:	4b09      	ldr	r3, [pc, #36]	; (8012e10 <_vfiprintf_r+0x25c>)
 8012dea:	a904      	add	r1, sp, #16
 8012dec:	f7fc fdb6 	bl	800f95c <_printf_i>
 8012df0:	e7e4      	b.n	8012dbc <_vfiprintf_r+0x208>
 8012df2:	bf00      	nop
 8012df4:	08013f38 	.word	0x08013f38
 8012df8:	08013f58 	.word	0x08013f58
 8012dfc:	08013f18 	.word	0x08013f18
 8012e00:	08013e04 	.word	0x08013e04
 8012e04:	08013e0a 	.word	0x08013e0a
 8012e08:	08013e0e 	.word	0x08013e0e
 8012e0c:	0800f425 	.word	0x0800f425
 8012e10:	08012b8f 	.word	0x08012b8f

08012e14 <nan>:
 8012e14:	2000      	movs	r0, #0
 8012e16:	4901      	ldr	r1, [pc, #4]	; (8012e1c <nan+0x8>)
 8012e18:	4770      	bx	lr
 8012e1a:	bf00      	nop
 8012e1c:	7ff80000 	.word	0x7ff80000

08012e20 <_sbrk_r>:
 8012e20:	b538      	push	{r3, r4, r5, lr}
 8012e22:	2300      	movs	r3, #0
 8012e24:	4d05      	ldr	r5, [pc, #20]	; (8012e3c <_sbrk_r+0x1c>)
 8012e26:	4604      	mov	r4, r0
 8012e28:	4608      	mov	r0, r1
 8012e2a:	602b      	str	r3, [r5, #0]
 8012e2c:	f7f1 fd7a 	bl	8004924 <_sbrk>
 8012e30:	1c43      	adds	r3, r0, #1
 8012e32:	d102      	bne.n	8012e3a <_sbrk_r+0x1a>
 8012e34:	682b      	ldr	r3, [r5, #0]
 8012e36:	b103      	cbz	r3, 8012e3a <_sbrk_r+0x1a>
 8012e38:	6023      	str	r3, [r4, #0]
 8012e3a:	bd38      	pop	{r3, r4, r5, pc}
 8012e3c:	20001a00 	.word	0x20001a00

08012e40 <strncmp>:
 8012e40:	4603      	mov	r3, r0
 8012e42:	b510      	push	{r4, lr}
 8012e44:	b172      	cbz	r2, 8012e64 <strncmp+0x24>
 8012e46:	3901      	subs	r1, #1
 8012e48:	1884      	adds	r4, r0, r2
 8012e4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012e4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012e52:	4290      	cmp	r0, r2
 8012e54:	d101      	bne.n	8012e5a <strncmp+0x1a>
 8012e56:	42a3      	cmp	r3, r4
 8012e58:	d101      	bne.n	8012e5e <strncmp+0x1e>
 8012e5a:	1a80      	subs	r0, r0, r2
 8012e5c:	bd10      	pop	{r4, pc}
 8012e5e:	2800      	cmp	r0, #0
 8012e60:	d1f3      	bne.n	8012e4a <strncmp+0xa>
 8012e62:	e7fa      	b.n	8012e5a <strncmp+0x1a>
 8012e64:	4610      	mov	r0, r2
 8012e66:	e7f9      	b.n	8012e5c <strncmp+0x1c>

08012e68 <__swbuf_r>:
 8012e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6a:	460e      	mov	r6, r1
 8012e6c:	4614      	mov	r4, r2
 8012e6e:	4605      	mov	r5, r0
 8012e70:	b118      	cbz	r0, 8012e7a <__swbuf_r+0x12>
 8012e72:	6983      	ldr	r3, [r0, #24]
 8012e74:	b90b      	cbnz	r3, 8012e7a <__swbuf_r+0x12>
 8012e76:	f000 f9e3 	bl	8013240 <__sinit>
 8012e7a:	4b21      	ldr	r3, [pc, #132]	; (8012f00 <__swbuf_r+0x98>)
 8012e7c:	429c      	cmp	r4, r3
 8012e7e:	d12b      	bne.n	8012ed8 <__swbuf_r+0x70>
 8012e80:	686c      	ldr	r4, [r5, #4]
 8012e82:	69a3      	ldr	r3, [r4, #24]
 8012e84:	60a3      	str	r3, [r4, #8]
 8012e86:	89a3      	ldrh	r3, [r4, #12]
 8012e88:	071a      	lsls	r2, r3, #28
 8012e8a:	d52f      	bpl.n	8012eec <__swbuf_r+0x84>
 8012e8c:	6923      	ldr	r3, [r4, #16]
 8012e8e:	b36b      	cbz	r3, 8012eec <__swbuf_r+0x84>
 8012e90:	6923      	ldr	r3, [r4, #16]
 8012e92:	6820      	ldr	r0, [r4, #0]
 8012e94:	b2f6      	uxtb	r6, r6
 8012e96:	1ac0      	subs	r0, r0, r3
 8012e98:	6963      	ldr	r3, [r4, #20]
 8012e9a:	4637      	mov	r7, r6
 8012e9c:	4283      	cmp	r3, r0
 8012e9e:	dc04      	bgt.n	8012eaa <__swbuf_r+0x42>
 8012ea0:	4621      	mov	r1, r4
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f000 f938 	bl	8013118 <_fflush_r>
 8012ea8:	bb30      	cbnz	r0, 8012ef8 <__swbuf_r+0x90>
 8012eaa:	68a3      	ldr	r3, [r4, #8]
 8012eac:	3001      	adds	r0, #1
 8012eae:	3b01      	subs	r3, #1
 8012eb0:	60a3      	str	r3, [r4, #8]
 8012eb2:	6823      	ldr	r3, [r4, #0]
 8012eb4:	1c5a      	adds	r2, r3, #1
 8012eb6:	6022      	str	r2, [r4, #0]
 8012eb8:	701e      	strb	r6, [r3, #0]
 8012eba:	6963      	ldr	r3, [r4, #20]
 8012ebc:	4283      	cmp	r3, r0
 8012ebe:	d004      	beq.n	8012eca <__swbuf_r+0x62>
 8012ec0:	89a3      	ldrh	r3, [r4, #12]
 8012ec2:	07db      	lsls	r3, r3, #31
 8012ec4:	d506      	bpl.n	8012ed4 <__swbuf_r+0x6c>
 8012ec6:	2e0a      	cmp	r6, #10
 8012ec8:	d104      	bne.n	8012ed4 <__swbuf_r+0x6c>
 8012eca:	4621      	mov	r1, r4
 8012ecc:	4628      	mov	r0, r5
 8012ece:	f000 f923 	bl	8013118 <_fflush_r>
 8012ed2:	b988      	cbnz	r0, 8012ef8 <__swbuf_r+0x90>
 8012ed4:	4638      	mov	r0, r7
 8012ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ed8:	4b0a      	ldr	r3, [pc, #40]	; (8012f04 <__swbuf_r+0x9c>)
 8012eda:	429c      	cmp	r4, r3
 8012edc:	d101      	bne.n	8012ee2 <__swbuf_r+0x7a>
 8012ede:	68ac      	ldr	r4, [r5, #8]
 8012ee0:	e7cf      	b.n	8012e82 <__swbuf_r+0x1a>
 8012ee2:	4b09      	ldr	r3, [pc, #36]	; (8012f08 <__swbuf_r+0xa0>)
 8012ee4:	429c      	cmp	r4, r3
 8012ee6:	bf08      	it	eq
 8012ee8:	68ec      	ldreq	r4, [r5, #12]
 8012eea:	e7ca      	b.n	8012e82 <__swbuf_r+0x1a>
 8012eec:	4621      	mov	r1, r4
 8012eee:	4628      	mov	r0, r5
 8012ef0:	f000 f81a 	bl	8012f28 <__swsetup_r>
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	d0cb      	beq.n	8012e90 <__swbuf_r+0x28>
 8012ef8:	f04f 37ff 	mov.w	r7, #4294967295
 8012efc:	e7ea      	b.n	8012ed4 <__swbuf_r+0x6c>
 8012efe:	bf00      	nop
 8012f00:	08013f38 	.word	0x08013f38
 8012f04:	08013f58 	.word	0x08013f58
 8012f08:	08013f18 	.word	0x08013f18

08012f0c <__ascii_wctomb>:
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	4608      	mov	r0, r1
 8012f10:	b141      	cbz	r1, 8012f24 <__ascii_wctomb+0x18>
 8012f12:	2aff      	cmp	r2, #255	; 0xff
 8012f14:	d904      	bls.n	8012f20 <__ascii_wctomb+0x14>
 8012f16:	228a      	movs	r2, #138	; 0x8a
 8012f18:	f04f 30ff 	mov.w	r0, #4294967295
 8012f1c:	601a      	str	r2, [r3, #0]
 8012f1e:	4770      	bx	lr
 8012f20:	2001      	movs	r0, #1
 8012f22:	700a      	strb	r2, [r1, #0]
 8012f24:	4770      	bx	lr
	...

08012f28 <__swsetup_r>:
 8012f28:	4b32      	ldr	r3, [pc, #200]	; (8012ff4 <__swsetup_r+0xcc>)
 8012f2a:	b570      	push	{r4, r5, r6, lr}
 8012f2c:	681d      	ldr	r5, [r3, #0]
 8012f2e:	4606      	mov	r6, r0
 8012f30:	460c      	mov	r4, r1
 8012f32:	b125      	cbz	r5, 8012f3e <__swsetup_r+0x16>
 8012f34:	69ab      	ldr	r3, [r5, #24]
 8012f36:	b913      	cbnz	r3, 8012f3e <__swsetup_r+0x16>
 8012f38:	4628      	mov	r0, r5
 8012f3a:	f000 f981 	bl	8013240 <__sinit>
 8012f3e:	4b2e      	ldr	r3, [pc, #184]	; (8012ff8 <__swsetup_r+0xd0>)
 8012f40:	429c      	cmp	r4, r3
 8012f42:	d10f      	bne.n	8012f64 <__swsetup_r+0x3c>
 8012f44:	686c      	ldr	r4, [r5, #4]
 8012f46:	89a3      	ldrh	r3, [r4, #12]
 8012f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f4c:	0719      	lsls	r1, r3, #28
 8012f4e:	d42c      	bmi.n	8012faa <__swsetup_r+0x82>
 8012f50:	06dd      	lsls	r5, r3, #27
 8012f52:	d411      	bmi.n	8012f78 <__swsetup_r+0x50>
 8012f54:	2309      	movs	r3, #9
 8012f56:	6033      	str	r3, [r6, #0]
 8012f58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f60:	81a3      	strh	r3, [r4, #12]
 8012f62:	e03e      	b.n	8012fe2 <__swsetup_r+0xba>
 8012f64:	4b25      	ldr	r3, [pc, #148]	; (8012ffc <__swsetup_r+0xd4>)
 8012f66:	429c      	cmp	r4, r3
 8012f68:	d101      	bne.n	8012f6e <__swsetup_r+0x46>
 8012f6a:	68ac      	ldr	r4, [r5, #8]
 8012f6c:	e7eb      	b.n	8012f46 <__swsetup_r+0x1e>
 8012f6e:	4b24      	ldr	r3, [pc, #144]	; (8013000 <__swsetup_r+0xd8>)
 8012f70:	429c      	cmp	r4, r3
 8012f72:	bf08      	it	eq
 8012f74:	68ec      	ldreq	r4, [r5, #12]
 8012f76:	e7e6      	b.n	8012f46 <__swsetup_r+0x1e>
 8012f78:	0758      	lsls	r0, r3, #29
 8012f7a:	d512      	bpl.n	8012fa2 <__swsetup_r+0x7a>
 8012f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f7e:	b141      	cbz	r1, 8012f92 <__swsetup_r+0x6a>
 8012f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f84:	4299      	cmp	r1, r3
 8012f86:	d002      	beq.n	8012f8e <__swsetup_r+0x66>
 8012f88:	4630      	mov	r0, r6
 8012f8a:	f7ff fbb3 	bl	80126f4 <_free_r>
 8012f8e:	2300      	movs	r3, #0
 8012f90:	6363      	str	r3, [r4, #52]	; 0x34
 8012f92:	89a3      	ldrh	r3, [r4, #12]
 8012f94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012f98:	81a3      	strh	r3, [r4, #12]
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	6063      	str	r3, [r4, #4]
 8012f9e:	6923      	ldr	r3, [r4, #16]
 8012fa0:	6023      	str	r3, [r4, #0]
 8012fa2:	89a3      	ldrh	r3, [r4, #12]
 8012fa4:	f043 0308 	orr.w	r3, r3, #8
 8012fa8:	81a3      	strh	r3, [r4, #12]
 8012faa:	6923      	ldr	r3, [r4, #16]
 8012fac:	b94b      	cbnz	r3, 8012fc2 <__swsetup_r+0x9a>
 8012fae:	89a3      	ldrh	r3, [r4, #12]
 8012fb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012fb8:	d003      	beq.n	8012fc2 <__swsetup_r+0x9a>
 8012fba:	4621      	mov	r1, r4
 8012fbc:	4630      	mov	r0, r6
 8012fbe:	f000 fa05 	bl	80133cc <__smakebuf_r>
 8012fc2:	89a0      	ldrh	r0, [r4, #12]
 8012fc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012fc8:	f010 0301 	ands.w	r3, r0, #1
 8012fcc:	d00a      	beq.n	8012fe4 <__swsetup_r+0xbc>
 8012fce:	2300      	movs	r3, #0
 8012fd0:	60a3      	str	r3, [r4, #8]
 8012fd2:	6963      	ldr	r3, [r4, #20]
 8012fd4:	425b      	negs	r3, r3
 8012fd6:	61a3      	str	r3, [r4, #24]
 8012fd8:	6923      	ldr	r3, [r4, #16]
 8012fda:	b943      	cbnz	r3, 8012fee <__swsetup_r+0xc6>
 8012fdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012fe0:	d1ba      	bne.n	8012f58 <__swsetup_r+0x30>
 8012fe2:	bd70      	pop	{r4, r5, r6, pc}
 8012fe4:	0781      	lsls	r1, r0, #30
 8012fe6:	bf58      	it	pl
 8012fe8:	6963      	ldrpl	r3, [r4, #20]
 8012fea:	60a3      	str	r3, [r4, #8]
 8012fec:	e7f4      	b.n	8012fd8 <__swsetup_r+0xb0>
 8012fee:	2000      	movs	r0, #0
 8012ff0:	e7f7      	b.n	8012fe2 <__swsetup_r+0xba>
 8012ff2:	bf00      	nop
 8012ff4:	20000938 	.word	0x20000938
 8012ff8:	08013f38 	.word	0x08013f38
 8012ffc:	08013f58 	.word	0x08013f58
 8013000:	08013f18 	.word	0x08013f18

08013004 <abort>:
 8013004:	2006      	movs	r0, #6
 8013006:	b508      	push	{r3, lr}
 8013008:	f000 fa9e 	bl	8013548 <raise>
 801300c:	2001      	movs	r0, #1
 801300e:	f7f1 fc16 	bl	800483e <_exit>
	...

08013014 <__sflush_r>:
 8013014:	898a      	ldrh	r2, [r1, #12]
 8013016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013018:	4605      	mov	r5, r0
 801301a:	0710      	lsls	r0, r2, #28
 801301c:	460c      	mov	r4, r1
 801301e:	d457      	bmi.n	80130d0 <__sflush_r+0xbc>
 8013020:	684b      	ldr	r3, [r1, #4]
 8013022:	2b00      	cmp	r3, #0
 8013024:	dc04      	bgt.n	8013030 <__sflush_r+0x1c>
 8013026:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013028:	2b00      	cmp	r3, #0
 801302a:	dc01      	bgt.n	8013030 <__sflush_r+0x1c>
 801302c:	2000      	movs	r0, #0
 801302e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013032:	2e00      	cmp	r6, #0
 8013034:	d0fa      	beq.n	801302c <__sflush_r+0x18>
 8013036:	2300      	movs	r3, #0
 8013038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801303c:	682f      	ldr	r7, [r5, #0]
 801303e:	602b      	str	r3, [r5, #0]
 8013040:	d032      	beq.n	80130a8 <__sflush_r+0x94>
 8013042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013044:	89a3      	ldrh	r3, [r4, #12]
 8013046:	075a      	lsls	r2, r3, #29
 8013048:	d505      	bpl.n	8013056 <__sflush_r+0x42>
 801304a:	6863      	ldr	r3, [r4, #4]
 801304c:	1ac0      	subs	r0, r0, r3
 801304e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013050:	b10b      	cbz	r3, 8013056 <__sflush_r+0x42>
 8013052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013054:	1ac0      	subs	r0, r0, r3
 8013056:	2300      	movs	r3, #0
 8013058:	4602      	mov	r2, r0
 801305a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801305c:	4628      	mov	r0, r5
 801305e:	6a21      	ldr	r1, [r4, #32]
 8013060:	47b0      	blx	r6
 8013062:	1c43      	adds	r3, r0, #1
 8013064:	89a3      	ldrh	r3, [r4, #12]
 8013066:	d106      	bne.n	8013076 <__sflush_r+0x62>
 8013068:	6829      	ldr	r1, [r5, #0]
 801306a:	291d      	cmp	r1, #29
 801306c:	d82c      	bhi.n	80130c8 <__sflush_r+0xb4>
 801306e:	4a29      	ldr	r2, [pc, #164]	; (8013114 <__sflush_r+0x100>)
 8013070:	40ca      	lsrs	r2, r1
 8013072:	07d6      	lsls	r6, r2, #31
 8013074:	d528      	bpl.n	80130c8 <__sflush_r+0xb4>
 8013076:	2200      	movs	r2, #0
 8013078:	6062      	str	r2, [r4, #4]
 801307a:	6922      	ldr	r2, [r4, #16]
 801307c:	04d9      	lsls	r1, r3, #19
 801307e:	6022      	str	r2, [r4, #0]
 8013080:	d504      	bpl.n	801308c <__sflush_r+0x78>
 8013082:	1c42      	adds	r2, r0, #1
 8013084:	d101      	bne.n	801308a <__sflush_r+0x76>
 8013086:	682b      	ldr	r3, [r5, #0]
 8013088:	b903      	cbnz	r3, 801308c <__sflush_r+0x78>
 801308a:	6560      	str	r0, [r4, #84]	; 0x54
 801308c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801308e:	602f      	str	r7, [r5, #0]
 8013090:	2900      	cmp	r1, #0
 8013092:	d0cb      	beq.n	801302c <__sflush_r+0x18>
 8013094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013098:	4299      	cmp	r1, r3
 801309a:	d002      	beq.n	80130a2 <__sflush_r+0x8e>
 801309c:	4628      	mov	r0, r5
 801309e:	f7ff fb29 	bl	80126f4 <_free_r>
 80130a2:	2000      	movs	r0, #0
 80130a4:	6360      	str	r0, [r4, #52]	; 0x34
 80130a6:	e7c2      	b.n	801302e <__sflush_r+0x1a>
 80130a8:	6a21      	ldr	r1, [r4, #32]
 80130aa:	2301      	movs	r3, #1
 80130ac:	4628      	mov	r0, r5
 80130ae:	47b0      	blx	r6
 80130b0:	1c41      	adds	r1, r0, #1
 80130b2:	d1c7      	bne.n	8013044 <__sflush_r+0x30>
 80130b4:	682b      	ldr	r3, [r5, #0]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d0c4      	beq.n	8013044 <__sflush_r+0x30>
 80130ba:	2b1d      	cmp	r3, #29
 80130bc:	d001      	beq.n	80130c2 <__sflush_r+0xae>
 80130be:	2b16      	cmp	r3, #22
 80130c0:	d101      	bne.n	80130c6 <__sflush_r+0xb2>
 80130c2:	602f      	str	r7, [r5, #0]
 80130c4:	e7b2      	b.n	801302c <__sflush_r+0x18>
 80130c6:	89a3      	ldrh	r3, [r4, #12]
 80130c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130cc:	81a3      	strh	r3, [r4, #12]
 80130ce:	e7ae      	b.n	801302e <__sflush_r+0x1a>
 80130d0:	690f      	ldr	r7, [r1, #16]
 80130d2:	2f00      	cmp	r7, #0
 80130d4:	d0aa      	beq.n	801302c <__sflush_r+0x18>
 80130d6:	0793      	lsls	r3, r2, #30
 80130d8:	bf18      	it	ne
 80130da:	2300      	movne	r3, #0
 80130dc:	680e      	ldr	r6, [r1, #0]
 80130de:	bf08      	it	eq
 80130e0:	694b      	ldreq	r3, [r1, #20]
 80130e2:	1bf6      	subs	r6, r6, r7
 80130e4:	600f      	str	r7, [r1, #0]
 80130e6:	608b      	str	r3, [r1, #8]
 80130e8:	2e00      	cmp	r6, #0
 80130ea:	dd9f      	ble.n	801302c <__sflush_r+0x18>
 80130ec:	4633      	mov	r3, r6
 80130ee:	463a      	mov	r2, r7
 80130f0:	4628      	mov	r0, r5
 80130f2:	6a21      	ldr	r1, [r4, #32]
 80130f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80130f8:	47e0      	blx	ip
 80130fa:	2800      	cmp	r0, #0
 80130fc:	dc06      	bgt.n	801310c <__sflush_r+0xf8>
 80130fe:	89a3      	ldrh	r3, [r4, #12]
 8013100:	f04f 30ff 	mov.w	r0, #4294967295
 8013104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013108:	81a3      	strh	r3, [r4, #12]
 801310a:	e790      	b.n	801302e <__sflush_r+0x1a>
 801310c:	4407      	add	r7, r0
 801310e:	1a36      	subs	r6, r6, r0
 8013110:	e7ea      	b.n	80130e8 <__sflush_r+0xd4>
 8013112:	bf00      	nop
 8013114:	20400001 	.word	0x20400001

08013118 <_fflush_r>:
 8013118:	b538      	push	{r3, r4, r5, lr}
 801311a:	690b      	ldr	r3, [r1, #16]
 801311c:	4605      	mov	r5, r0
 801311e:	460c      	mov	r4, r1
 8013120:	b913      	cbnz	r3, 8013128 <_fflush_r+0x10>
 8013122:	2500      	movs	r5, #0
 8013124:	4628      	mov	r0, r5
 8013126:	bd38      	pop	{r3, r4, r5, pc}
 8013128:	b118      	cbz	r0, 8013132 <_fflush_r+0x1a>
 801312a:	6983      	ldr	r3, [r0, #24]
 801312c:	b90b      	cbnz	r3, 8013132 <_fflush_r+0x1a>
 801312e:	f000 f887 	bl	8013240 <__sinit>
 8013132:	4b14      	ldr	r3, [pc, #80]	; (8013184 <_fflush_r+0x6c>)
 8013134:	429c      	cmp	r4, r3
 8013136:	d11b      	bne.n	8013170 <_fflush_r+0x58>
 8013138:	686c      	ldr	r4, [r5, #4]
 801313a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d0ef      	beq.n	8013122 <_fflush_r+0xa>
 8013142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013144:	07d0      	lsls	r0, r2, #31
 8013146:	d404      	bmi.n	8013152 <_fflush_r+0x3a>
 8013148:	0599      	lsls	r1, r3, #22
 801314a:	d402      	bmi.n	8013152 <_fflush_r+0x3a>
 801314c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801314e:	f000 f915 	bl	801337c <__retarget_lock_acquire_recursive>
 8013152:	4628      	mov	r0, r5
 8013154:	4621      	mov	r1, r4
 8013156:	f7ff ff5d 	bl	8013014 <__sflush_r>
 801315a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801315c:	4605      	mov	r5, r0
 801315e:	07da      	lsls	r2, r3, #31
 8013160:	d4e0      	bmi.n	8013124 <_fflush_r+0xc>
 8013162:	89a3      	ldrh	r3, [r4, #12]
 8013164:	059b      	lsls	r3, r3, #22
 8013166:	d4dd      	bmi.n	8013124 <_fflush_r+0xc>
 8013168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801316a:	f000 f908 	bl	801337e <__retarget_lock_release_recursive>
 801316e:	e7d9      	b.n	8013124 <_fflush_r+0xc>
 8013170:	4b05      	ldr	r3, [pc, #20]	; (8013188 <_fflush_r+0x70>)
 8013172:	429c      	cmp	r4, r3
 8013174:	d101      	bne.n	801317a <_fflush_r+0x62>
 8013176:	68ac      	ldr	r4, [r5, #8]
 8013178:	e7df      	b.n	801313a <_fflush_r+0x22>
 801317a:	4b04      	ldr	r3, [pc, #16]	; (801318c <_fflush_r+0x74>)
 801317c:	429c      	cmp	r4, r3
 801317e:	bf08      	it	eq
 8013180:	68ec      	ldreq	r4, [r5, #12]
 8013182:	e7da      	b.n	801313a <_fflush_r+0x22>
 8013184:	08013f38 	.word	0x08013f38
 8013188:	08013f58 	.word	0x08013f58
 801318c:	08013f18 	.word	0x08013f18

08013190 <std>:
 8013190:	2300      	movs	r3, #0
 8013192:	b510      	push	{r4, lr}
 8013194:	4604      	mov	r4, r0
 8013196:	e9c0 3300 	strd	r3, r3, [r0]
 801319a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801319e:	6083      	str	r3, [r0, #8]
 80131a0:	8181      	strh	r1, [r0, #12]
 80131a2:	6643      	str	r3, [r0, #100]	; 0x64
 80131a4:	81c2      	strh	r2, [r0, #14]
 80131a6:	6183      	str	r3, [r0, #24]
 80131a8:	4619      	mov	r1, r3
 80131aa:	2208      	movs	r2, #8
 80131ac:	305c      	adds	r0, #92	; 0x5c
 80131ae:	f7fc f893 	bl	800f2d8 <memset>
 80131b2:	4b05      	ldr	r3, [pc, #20]	; (80131c8 <std+0x38>)
 80131b4:	6224      	str	r4, [r4, #32]
 80131b6:	6263      	str	r3, [r4, #36]	; 0x24
 80131b8:	4b04      	ldr	r3, [pc, #16]	; (80131cc <std+0x3c>)
 80131ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80131bc:	4b04      	ldr	r3, [pc, #16]	; (80131d0 <std+0x40>)
 80131be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80131c0:	4b04      	ldr	r3, [pc, #16]	; (80131d4 <std+0x44>)
 80131c2:	6323      	str	r3, [r4, #48]	; 0x30
 80131c4:	bd10      	pop	{r4, pc}
 80131c6:	bf00      	nop
 80131c8:	08013581 	.word	0x08013581
 80131cc:	080135a3 	.word	0x080135a3
 80131d0:	080135db 	.word	0x080135db
 80131d4:	080135ff 	.word	0x080135ff

080131d8 <_cleanup_r>:
 80131d8:	4901      	ldr	r1, [pc, #4]	; (80131e0 <_cleanup_r+0x8>)
 80131da:	f000 b8af 	b.w	801333c <_fwalk_reent>
 80131de:	bf00      	nop
 80131e0:	08013119 	.word	0x08013119

080131e4 <__sfmoreglue>:
 80131e4:	2268      	movs	r2, #104	; 0x68
 80131e6:	b570      	push	{r4, r5, r6, lr}
 80131e8:	1e4d      	subs	r5, r1, #1
 80131ea:	4355      	muls	r5, r2
 80131ec:	460e      	mov	r6, r1
 80131ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80131f2:	f7ff fae7 	bl	80127c4 <_malloc_r>
 80131f6:	4604      	mov	r4, r0
 80131f8:	b140      	cbz	r0, 801320c <__sfmoreglue+0x28>
 80131fa:	2100      	movs	r1, #0
 80131fc:	e9c0 1600 	strd	r1, r6, [r0]
 8013200:	300c      	adds	r0, #12
 8013202:	60a0      	str	r0, [r4, #8]
 8013204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013208:	f7fc f866 	bl	800f2d8 <memset>
 801320c:	4620      	mov	r0, r4
 801320e:	bd70      	pop	{r4, r5, r6, pc}

08013210 <__sfp_lock_acquire>:
 8013210:	4801      	ldr	r0, [pc, #4]	; (8013218 <__sfp_lock_acquire+0x8>)
 8013212:	f000 b8b3 	b.w	801337c <__retarget_lock_acquire_recursive>
 8013216:	bf00      	nop
 8013218:	200019fd 	.word	0x200019fd

0801321c <__sfp_lock_release>:
 801321c:	4801      	ldr	r0, [pc, #4]	; (8013224 <__sfp_lock_release+0x8>)
 801321e:	f000 b8ae 	b.w	801337e <__retarget_lock_release_recursive>
 8013222:	bf00      	nop
 8013224:	200019fd 	.word	0x200019fd

08013228 <__sinit_lock_acquire>:
 8013228:	4801      	ldr	r0, [pc, #4]	; (8013230 <__sinit_lock_acquire+0x8>)
 801322a:	f000 b8a7 	b.w	801337c <__retarget_lock_acquire_recursive>
 801322e:	bf00      	nop
 8013230:	200019fe 	.word	0x200019fe

08013234 <__sinit_lock_release>:
 8013234:	4801      	ldr	r0, [pc, #4]	; (801323c <__sinit_lock_release+0x8>)
 8013236:	f000 b8a2 	b.w	801337e <__retarget_lock_release_recursive>
 801323a:	bf00      	nop
 801323c:	200019fe 	.word	0x200019fe

08013240 <__sinit>:
 8013240:	b510      	push	{r4, lr}
 8013242:	4604      	mov	r4, r0
 8013244:	f7ff fff0 	bl	8013228 <__sinit_lock_acquire>
 8013248:	69a3      	ldr	r3, [r4, #24]
 801324a:	b11b      	cbz	r3, 8013254 <__sinit+0x14>
 801324c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013250:	f7ff bff0 	b.w	8013234 <__sinit_lock_release>
 8013254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013258:	6523      	str	r3, [r4, #80]	; 0x50
 801325a:	4b13      	ldr	r3, [pc, #76]	; (80132a8 <__sinit+0x68>)
 801325c:	4a13      	ldr	r2, [pc, #76]	; (80132ac <__sinit+0x6c>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	62a2      	str	r2, [r4, #40]	; 0x28
 8013262:	42a3      	cmp	r3, r4
 8013264:	bf08      	it	eq
 8013266:	2301      	moveq	r3, #1
 8013268:	4620      	mov	r0, r4
 801326a:	bf08      	it	eq
 801326c:	61a3      	streq	r3, [r4, #24]
 801326e:	f000 f81f 	bl	80132b0 <__sfp>
 8013272:	6060      	str	r0, [r4, #4]
 8013274:	4620      	mov	r0, r4
 8013276:	f000 f81b 	bl	80132b0 <__sfp>
 801327a:	60a0      	str	r0, [r4, #8]
 801327c:	4620      	mov	r0, r4
 801327e:	f000 f817 	bl	80132b0 <__sfp>
 8013282:	2200      	movs	r2, #0
 8013284:	2104      	movs	r1, #4
 8013286:	60e0      	str	r0, [r4, #12]
 8013288:	6860      	ldr	r0, [r4, #4]
 801328a:	f7ff ff81 	bl	8013190 <std>
 801328e:	2201      	movs	r2, #1
 8013290:	2109      	movs	r1, #9
 8013292:	68a0      	ldr	r0, [r4, #8]
 8013294:	f7ff ff7c 	bl	8013190 <std>
 8013298:	2202      	movs	r2, #2
 801329a:	2112      	movs	r1, #18
 801329c:	68e0      	ldr	r0, [r4, #12]
 801329e:	f7ff ff77 	bl	8013190 <std>
 80132a2:	2301      	movs	r3, #1
 80132a4:	61a3      	str	r3, [r4, #24]
 80132a6:	e7d1      	b.n	801324c <__sinit+0xc>
 80132a8:	08013a7c 	.word	0x08013a7c
 80132ac:	080131d9 	.word	0x080131d9

080132b0 <__sfp>:
 80132b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132b2:	4607      	mov	r7, r0
 80132b4:	f7ff ffac 	bl	8013210 <__sfp_lock_acquire>
 80132b8:	4b1e      	ldr	r3, [pc, #120]	; (8013334 <__sfp+0x84>)
 80132ba:	681e      	ldr	r6, [r3, #0]
 80132bc:	69b3      	ldr	r3, [r6, #24]
 80132be:	b913      	cbnz	r3, 80132c6 <__sfp+0x16>
 80132c0:	4630      	mov	r0, r6
 80132c2:	f7ff ffbd 	bl	8013240 <__sinit>
 80132c6:	3648      	adds	r6, #72	; 0x48
 80132c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80132cc:	3b01      	subs	r3, #1
 80132ce:	d503      	bpl.n	80132d8 <__sfp+0x28>
 80132d0:	6833      	ldr	r3, [r6, #0]
 80132d2:	b30b      	cbz	r3, 8013318 <__sfp+0x68>
 80132d4:	6836      	ldr	r6, [r6, #0]
 80132d6:	e7f7      	b.n	80132c8 <__sfp+0x18>
 80132d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80132dc:	b9d5      	cbnz	r5, 8013314 <__sfp+0x64>
 80132de:	4b16      	ldr	r3, [pc, #88]	; (8013338 <__sfp+0x88>)
 80132e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80132e4:	60e3      	str	r3, [r4, #12]
 80132e6:	6665      	str	r5, [r4, #100]	; 0x64
 80132e8:	f000 f847 	bl	801337a <__retarget_lock_init_recursive>
 80132ec:	f7ff ff96 	bl	801321c <__sfp_lock_release>
 80132f0:	2208      	movs	r2, #8
 80132f2:	4629      	mov	r1, r5
 80132f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80132f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80132fc:	6025      	str	r5, [r4, #0]
 80132fe:	61a5      	str	r5, [r4, #24]
 8013300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013304:	f7fb ffe8 	bl	800f2d8 <memset>
 8013308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801330c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013310:	4620      	mov	r0, r4
 8013312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013314:	3468      	adds	r4, #104	; 0x68
 8013316:	e7d9      	b.n	80132cc <__sfp+0x1c>
 8013318:	2104      	movs	r1, #4
 801331a:	4638      	mov	r0, r7
 801331c:	f7ff ff62 	bl	80131e4 <__sfmoreglue>
 8013320:	4604      	mov	r4, r0
 8013322:	6030      	str	r0, [r6, #0]
 8013324:	2800      	cmp	r0, #0
 8013326:	d1d5      	bne.n	80132d4 <__sfp+0x24>
 8013328:	f7ff ff78 	bl	801321c <__sfp_lock_release>
 801332c:	230c      	movs	r3, #12
 801332e:	603b      	str	r3, [r7, #0]
 8013330:	e7ee      	b.n	8013310 <__sfp+0x60>
 8013332:	bf00      	nop
 8013334:	08013a7c 	.word	0x08013a7c
 8013338:	ffff0001 	.word	0xffff0001

0801333c <_fwalk_reent>:
 801333c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013340:	4606      	mov	r6, r0
 8013342:	4688      	mov	r8, r1
 8013344:	2700      	movs	r7, #0
 8013346:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801334a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801334e:	f1b9 0901 	subs.w	r9, r9, #1
 8013352:	d505      	bpl.n	8013360 <_fwalk_reent+0x24>
 8013354:	6824      	ldr	r4, [r4, #0]
 8013356:	2c00      	cmp	r4, #0
 8013358:	d1f7      	bne.n	801334a <_fwalk_reent+0xe>
 801335a:	4638      	mov	r0, r7
 801335c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013360:	89ab      	ldrh	r3, [r5, #12]
 8013362:	2b01      	cmp	r3, #1
 8013364:	d907      	bls.n	8013376 <_fwalk_reent+0x3a>
 8013366:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801336a:	3301      	adds	r3, #1
 801336c:	d003      	beq.n	8013376 <_fwalk_reent+0x3a>
 801336e:	4629      	mov	r1, r5
 8013370:	4630      	mov	r0, r6
 8013372:	47c0      	blx	r8
 8013374:	4307      	orrs	r7, r0
 8013376:	3568      	adds	r5, #104	; 0x68
 8013378:	e7e9      	b.n	801334e <_fwalk_reent+0x12>

0801337a <__retarget_lock_init_recursive>:
 801337a:	4770      	bx	lr

0801337c <__retarget_lock_acquire_recursive>:
 801337c:	4770      	bx	lr

0801337e <__retarget_lock_release_recursive>:
 801337e:	4770      	bx	lr

08013380 <__swhatbuf_r>:
 8013380:	b570      	push	{r4, r5, r6, lr}
 8013382:	460e      	mov	r6, r1
 8013384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013388:	4614      	mov	r4, r2
 801338a:	2900      	cmp	r1, #0
 801338c:	461d      	mov	r5, r3
 801338e:	b096      	sub	sp, #88	; 0x58
 8013390:	da08      	bge.n	80133a4 <__swhatbuf_r+0x24>
 8013392:	2200      	movs	r2, #0
 8013394:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013398:	602a      	str	r2, [r5, #0]
 801339a:	061a      	lsls	r2, r3, #24
 801339c:	d410      	bmi.n	80133c0 <__swhatbuf_r+0x40>
 801339e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133a2:	e00e      	b.n	80133c2 <__swhatbuf_r+0x42>
 80133a4:	466a      	mov	r2, sp
 80133a6:	f000 f951 	bl	801364c <_fstat_r>
 80133aa:	2800      	cmp	r0, #0
 80133ac:	dbf1      	blt.n	8013392 <__swhatbuf_r+0x12>
 80133ae:	9a01      	ldr	r2, [sp, #4]
 80133b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80133b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80133b8:	425a      	negs	r2, r3
 80133ba:	415a      	adcs	r2, r3
 80133bc:	602a      	str	r2, [r5, #0]
 80133be:	e7ee      	b.n	801339e <__swhatbuf_r+0x1e>
 80133c0:	2340      	movs	r3, #64	; 0x40
 80133c2:	2000      	movs	r0, #0
 80133c4:	6023      	str	r3, [r4, #0]
 80133c6:	b016      	add	sp, #88	; 0x58
 80133c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080133cc <__smakebuf_r>:
 80133cc:	898b      	ldrh	r3, [r1, #12]
 80133ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80133d0:	079d      	lsls	r5, r3, #30
 80133d2:	4606      	mov	r6, r0
 80133d4:	460c      	mov	r4, r1
 80133d6:	d507      	bpl.n	80133e8 <__smakebuf_r+0x1c>
 80133d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80133dc:	6023      	str	r3, [r4, #0]
 80133de:	6123      	str	r3, [r4, #16]
 80133e0:	2301      	movs	r3, #1
 80133e2:	6163      	str	r3, [r4, #20]
 80133e4:	b002      	add	sp, #8
 80133e6:	bd70      	pop	{r4, r5, r6, pc}
 80133e8:	466a      	mov	r2, sp
 80133ea:	ab01      	add	r3, sp, #4
 80133ec:	f7ff ffc8 	bl	8013380 <__swhatbuf_r>
 80133f0:	9900      	ldr	r1, [sp, #0]
 80133f2:	4605      	mov	r5, r0
 80133f4:	4630      	mov	r0, r6
 80133f6:	f7ff f9e5 	bl	80127c4 <_malloc_r>
 80133fa:	b948      	cbnz	r0, 8013410 <__smakebuf_r+0x44>
 80133fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013400:	059a      	lsls	r2, r3, #22
 8013402:	d4ef      	bmi.n	80133e4 <__smakebuf_r+0x18>
 8013404:	f023 0303 	bic.w	r3, r3, #3
 8013408:	f043 0302 	orr.w	r3, r3, #2
 801340c:	81a3      	strh	r3, [r4, #12]
 801340e:	e7e3      	b.n	80133d8 <__smakebuf_r+0xc>
 8013410:	4b0d      	ldr	r3, [pc, #52]	; (8013448 <__smakebuf_r+0x7c>)
 8013412:	62b3      	str	r3, [r6, #40]	; 0x28
 8013414:	89a3      	ldrh	r3, [r4, #12]
 8013416:	6020      	str	r0, [r4, #0]
 8013418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801341c:	81a3      	strh	r3, [r4, #12]
 801341e:	9b00      	ldr	r3, [sp, #0]
 8013420:	6120      	str	r0, [r4, #16]
 8013422:	6163      	str	r3, [r4, #20]
 8013424:	9b01      	ldr	r3, [sp, #4]
 8013426:	b15b      	cbz	r3, 8013440 <__smakebuf_r+0x74>
 8013428:	4630      	mov	r0, r6
 801342a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801342e:	f000 f91f 	bl	8013670 <_isatty_r>
 8013432:	b128      	cbz	r0, 8013440 <__smakebuf_r+0x74>
 8013434:	89a3      	ldrh	r3, [r4, #12]
 8013436:	f023 0303 	bic.w	r3, r3, #3
 801343a:	f043 0301 	orr.w	r3, r3, #1
 801343e:	81a3      	strh	r3, [r4, #12]
 8013440:	89a0      	ldrh	r0, [r4, #12]
 8013442:	4305      	orrs	r5, r0
 8013444:	81a5      	strh	r5, [r4, #12]
 8013446:	e7cd      	b.n	80133e4 <__smakebuf_r+0x18>
 8013448:	080131d9 	.word	0x080131d9

0801344c <memmove>:
 801344c:	4288      	cmp	r0, r1
 801344e:	b510      	push	{r4, lr}
 8013450:	eb01 0402 	add.w	r4, r1, r2
 8013454:	d902      	bls.n	801345c <memmove+0x10>
 8013456:	4284      	cmp	r4, r0
 8013458:	4623      	mov	r3, r4
 801345a:	d807      	bhi.n	801346c <memmove+0x20>
 801345c:	1e43      	subs	r3, r0, #1
 801345e:	42a1      	cmp	r1, r4
 8013460:	d008      	beq.n	8013474 <memmove+0x28>
 8013462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013466:	f803 2f01 	strb.w	r2, [r3, #1]!
 801346a:	e7f8      	b.n	801345e <memmove+0x12>
 801346c:	4601      	mov	r1, r0
 801346e:	4402      	add	r2, r0
 8013470:	428a      	cmp	r2, r1
 8013472:	d100      	bne.n	8013476 <memmove+0x2a>
 8013474:	bd10      	pop	{r4, pc}
 8013476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801347a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801347e:	e7f7      	b.n	8013470 <memmove+0x24>

08013480 <__malloc_lock>:
 8013480:	4801      	ldr	r0, [pc, #4]	; (8013488 <__malloc_lock+0x8>)
 8013482:	f7ff bf7b 	b.w	801337c <__retarget_lock_acquire_recursive>
 8013486:	bf00      	nop
 8013488:	200019fc 	.word	0x200019fc

0801348c <__malloc_unlock>:
 801348c:	4801      	ldr	r0, [pc, #4]	; (8013494 <__malloc_unlock+0x8>)
 801348e:	f7ff bf76 	b.w	801337e <__retarget_lock_release_recursive>
 8013492:	bf00      	nop
 8013494:	200019fc 	.word	0x200019fc

08013498 <_realloc_r>:
 8013498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801349c:	4680      	mov	r8, r0
 801349e:	4614      	mov	r4, r2
 80134a0:	460e      	mov	r6, r1
 80134a2:	b921      	cbnz	r1, 80134ae <_realloc_r+0x16>
 80134a4:	4611      	mov	r1, r2
 80134a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134aa:	f7ff b98b 	b.w	80127c4 <_malloc_r>
 80134ae:	b92a      	cbnz	r2, 80134bc <_realloc_r+0x24>
 80134b0:	f7ff f920 	bl	80126f4 <_free_r>
 80134b4:	4625      	mov	r5, r4
 80134b6:	4628      	mov	r0, r5
 80134b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134bc:	f000 f8fa 	bl	80136b4 <_malloc_usable_size_r>
 80134c0:	4284      	cmp	r4, r0
 80134c2:	4607      	mov	r7, r0
 80134c4:	d802      	bhi.n	80134cc <_realloc_r+0x34>
 80134c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80134ca:	d812      	bhi.n	80134f2 <_realloc_r+0x5a>
 80134cc:	4621      	mov	r1, r4
 80134ce:	4640      	mov	r0, r8
 80134d0:	f7ff f978 	bl	80127c4 <_malloc_r>
 80134d4:	4605      	mov	r5, r0
 80134d6:	2800      	cmp	r0, #0
 80134d8:	d0ed      	beq.n	80134b6 <_realloc_r+0x1e>
 80134da:	42bc      	cmp	r4, r7
 80134dc:	4622      	mov	r2, r4
 80134de:	4631      	mov	r1, r6
 80134e0:	bf28      	it	cs
 80134e2:	463a      	movcs	r2, r7
 80134e4:	f7fb feea 	bl	800f2bc <memcpy>
 80134e8:	4631      	mov	r1, r6
 80134ea:	4640      	mov	r0, r8
 80134ec:	f7ff f902 	bl	80126f4 <_free_r>
 80134f0:	e7e1      	b.n	80134b6 <_realloc_r+0x1e>
 80134f2:	4635      	mov	r5, r6
 80134f4:	e7df      	b.n	80134b6 <_realloc_r+0x1e>

080134f6 <_raise_r>:
 80134f6:	291f      	cmp	r1, #31
 80134f8:	b538      	push	{r3, r4, r5, lr}
 80134fa:	4604      	mov	r4, r0
 80134fc:	460d      	mov	r5, r1
 80134fe:	d904      	bls.n	801350a <_raise_r+0x14>
 8013500:	2316      	movs	r3, #22
 8013502:	6003      	str	r3, [r0, #0]
 8013504:	f04f 30ff 	mov.w	r0, #4294967295
 8013508:	bd38      	pop	{r3, r4, r5, pc}
 801350a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801350c:	b112      	cbz	r2, 8013514 <_raise_r+0x1e>
 801350e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013512:	b94b      	cbnz	r3, 8013528 <_raise_r+0x32>
 8013514:	4620      	mov	r0, r4
 8013516:	f000 f831 	bl	801357c <_getpid_r>
 801351a:	462a      	mov	r2, r5
 801351c:	4601      	mov	r1, r0
 801351e:	4620      	mov	r0, r4
 8013520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013524:	f000 b818 	b.w	8013558 <_kill_r>
 8013528:	2b01      	cmp	r3, #1
 801352a:	d00a      	beq.n	8013542 <_raise_r+0x4c>
 801352c:	1c59      	adds	r1, r3, #1
 801352e:	d103      	bne.n	8013538 <_raise_r+0x42>
 8013530:	2316      	movs	r3, #22
 8013532:	6003      	str	r3, [r0, #0]
 8013534:	2001      	movs	r0, #1
 8013536:	e7e7      	b.n	8013508 <_raise_r+0x12>
 8013538:	2400      	movs	r4, #0
 801353a:	4628      	mov	r0, r5
 801353c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013540:	4798      	blx	r3
 8013542:	2000      	movs	r0, #0
 8013544:	e7e0      	b.n	8013508 <_raise_r+0x12>
	...

08013548 <raise>:
 8013548:	4b02      	ldr	r3, [pc, #8]	; (8013554 <raise+0xc>)
 801354a:	4601      	mov	r1, r0
 801354c:	6818      	ldr	r0, [r3, #0]
 801354e:	f7ff bfd2 	b.w	80134f6 <_raise_r>
 8013552:	bf00      	nop
 8013554:	20000938 	.word	0x20000938

08013558 <_kill_r>:
 8013558:	b538      	push	{r3, r4, r5, lr}
 801355a:	2300      	movs	r3, #0
 801355c:	4d06      	ldr	r5, [pc, #24]	; (8013578 <_kill_r+0x20>)
 801355e:	4604      	mov	r4, r0
 8013560:	4608      	mov	r0, r1
 8013562:	4611      	mov	r1, r2
 8013564:	602b      	str	r3, [r5, #0]
 8013566:	f7f1 f95a 	bl	800481e <_kill>
 801356a:	1c43      	adds	r3, r0, #1
 801356c:	d102      	bne.n	8013574 <_kill_r+0x1c>
 801356e:	682b      	ldr	r3, [r5, #0]
 8013570:	b103      	cbz	r3, 8013574 <_kill_r+0x1c>
 8013572:	6023      	str	r3, [r4, #0]
 8013574:	bd38      	pop	{r3, r4, r5, pc}
 8013576:	bf00      	nop
 8013578:	20001a00 	.word	0x20001a00

0801357c <_getpid_r>:
 801357c:	f7f1 b948 	b.w	8004810 <_getpid>

08013580 <__sread>:
 8013580:	b510      	push	{r4, lr}
 8013582:	460c      	mov	r4, r1
 8013584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013588:	f000 f89c 	bl	80136c4 <_read_r>
 801358c:	2800      	cmp	r0, #0
 801358e:	bfab      	itete	ge
 8013590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013592:	89a3      	ldrhlt	r3, [r4, #12]
 8013594:	181b      	addge	r3, r3, r0
 8013596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801359a:	bfac      	ite	ge
 801359c:	6563      	strge	r3, [r4, #84]	; 0x54
 801359e:	81a3      	strhlt	r3, [r4, #12]
 80135a0:	bd10      	pop	{r4, pc}

080135a2 <__swrite>:
 80135a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135a6:	461f      	mov	r7, r3
 80135a8:	898b      	ldrh	r3, [r1, #12]
 80135aa:	4605      	mov	r5, r0
 80135ac:	05db      	lsls	r3, r3, #23
 80135ae:	460c      	mov	r4, r1
 80135b0:	4616      	mov	r6, r2
 80135b2:	d505      	bpl.n	80135c0 <__swrite+0x1e>
 80135b4:	2302      	movs	r3, #2
 80135b6:	2200      	movs	r2, #0
 80135b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135bc:	f000 f868 	bl	8013690 <_lseek_r>
 80135c0:	89a3      	ldrh	r3, [r4, #12]
 80135c2:	4632      	mov	r2, r6
 80135c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80135c8:	81a3      	strh	r3, [r4, #12]
 80135ca:	4628      	mov	r0, r5
 80135cc:	463b      	mov	r3, r7
 80135ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135d6:	f000 b817 	b.w	8013608 <_write_r>

080135da <__sseek>:
 80135da:	b510      	push	{r4, lr}
 80135dc:	460c      	mov	r4, r1
 80135de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135e2:	f000 f855 	bl	8013690 <_lseek_r>
 80135e6:	1c43      	adds	r3, r0, #1
 80135e8:	89a3      	ldrh	r3, [r4, #12]
 80135ea:	bf15      	itete	ne
 80135ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80135ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80135f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80135f6:	81a3      	strheq	r3, [r4, #12]
 80135f8:	bf18      	it	ne
 80135fa:	81a3      	strhne	r3, [r4, #12]
 80135fc:	bd10      	pop	{r4, pc}

080135fe <__sclose>:
 80135fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013602:	f000 b813 	b.w	801362c <_close_r>
	...

08013608 <_write_r>:
 8013608:	b538      	push	{r3, r4, r5, lr}
 801360a:	4604      	mov	r4, r0
 801360c:	4608      	mov	r0, r1
 801360e:	4611      	mov	r1, r2
 8013610:	2200      	movs	r2, #0
 8013612:	4d05      	ldr	r5, [pc, #20]	; (8013628 <_write_r+0x20>)
 8013614:	602a      	str	r2, [r5, #0]
 8013616:	461a      	mov	r2, r3
 8013618:	f7f1 f938 	bl	800488c <_write>
 801361c:	1c43      	adds	r3, r0, #1
 801361e:	d102      	bne.n	8013626 <_write_r+0x1e>
 8013620:	682b      	ldr	r3, [r5, #0]
 8013622:	b103      	cbz	r3, 8013626 <_write_r+0x1e>
 8013624:	6023      	str	r3, [r4, #0]
 8013626:	bd38      	pop	{r3, r4, r5, pc}
 8013628:	20001a00 	.word	0x20001a00

0801362c <_close_r>:
 801362c:	b538      	push	{r3, r4, r5, lr}
 801362e:	2300      	movs	r3, #0
 8013630:	4d05      	ldr	r5, [pc, #20]	; (8013648 <_close_r+0x1c>)
 8013632:	4604      	mov	r4, r0
 8013634:	4608      	mov	r0, r1
 8013636:	602b      	str	r3, [r5, #0]
 8013638:	f7f1 f944 	bl	80048c4 <_close>
 801363c:	1c43      	adds	r3, r0, #1
 801363e:	d102      	bne.n	8013646 <_close_r+0x1a>
 8013640:	682b      	ldr	r3, [r5, #0]
 8013642:	b103      	cbz	r3, 8013646 <_close_r+0x1a>
 8013644:	6023      	str	r3, [r4, #0]
 8013646:	bd38      	pop	{r3, r4, r5, pc}
 8013648:	20001a00 	.word	0x20001a00

0801364c <_fstat_r>:
 801364c:	b538      	push	{r3, r4, r5, lr}
 801364e:	2300      	movs	r3, #0
 8013650:	4d06      	ldr	r5, [pc, #24]	; (801366c <_fstat_r+0x20>)
 8013652:	4604      	mov	r4, r0
 8013654:	4608      	mov	r0, r1
 8013656:	4611      	mov	r1, r2
 8013658:	602b      	str	r3, [r5, #0]
 801365a:	f7f1 f93e 	bl	80048da <_fstat>
 801365e:	1c43      	adds	r3, r0, #1
 8013660:	d102      	bne.n	8013668 <_fstat_r+0x1c>
 8013662:	682b      	ldr	r3, [r5, #0]
 8013664:	b103      	cbz	r3, 8013668 <_fstat_r+0x1c>
 8013666:	6023      	str	r3, [r4, #0]
 8013668:	bd38      	pop	{r3, r4, r5, pc}
 801366a:	bf00      	nop
 801366c:	20001a00 	.word	0x20001a00

08013670 <_isatty_r>:
 8013670:	b538      	push	{r3, r4, r5, lr}
 8013672:	2300      	movs	r3, #0
 8013674:	4d05      	ldr	r5, [pc, #20]	; (801368c <_isatty_r+0x1c>)
 8013676:	4604      	mov	r4, r0
 8013678:	4608      	mov	r0, r1
 801367a:	602b      	str	r3, [r5, #0]
 801367c:	f7f1 f93c 	bl	80048f8 <_isatty>
 8013680:	1c43      	adds	r3, r0, #1
 8013682:	d102      	bne.n	801368a <_isatty_r+0x1a>
 8013684:	682b      	ldr	r3, [r5, #0]
 8013686:	b103      	cbz	r3, 801368a <_isatty_r+0x1a>
 8013688:	6023      	str	r3, [r4, #0]
 801368a:	bd38      	pop	{r3, r4, r5, pc}
 801368c:	20001a00 	.word	0x20001a00

08013690 <_lseek_r>:
 8013690:	b538      	push	{r3, r4, r5, lr}
 8013692:	4604      	mov	r4, r0
 8013694:	4608      	mov	r0, r1
 8013696:	4611      	mov	r1, r2
 8013698:	2200      	movs	r2, #0
 801369a:	4d05      	ldr	r5, [pc, #20]	; (80136b0 <_lseek_r+0x20>)
 801369c:	602a      	str	r2, [r5, #0]
 801369e:	461a      	mov	r2, r3
 80136a0:	f7f1 f934 	bl	800490c <_lseek>
 80136a4:	1c43      	adds	r3, r0, #1
 80136a6:	d102      	bne.n	80136ae <_lseek_r+0x1e>
 80136a8:	682b      	ldr	r3, [r5, #0]
 80136aa:	b103      	cbz	r3, 80136ae <_lseek_r+0x1e>
 80136ac:	6023      	str	r3, [r4, #0]
 80136ae:	bd38      	pop	{r3, r4, r5, pc}
 80136b0:	20001a00 	.word	0x20001a00

080136b4 <_malloc_usable_size_r>:
 80136b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136b8:	1f18      	subs	r0, r3, #4
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	bfbc      	itt	lt
 80136be:	580b      	ldrlt	r3, [r1, r0]
 80136c0:	18c0      	addlt	r0, r0, r3
 80136c2:	4770      	bx	lr

080136c4 <_read_r>:
 80136c4:	b538      	push	{r3, r4, r5, lr}
 80136c6:	4604      	mov	r4, r0
 80136c8:	4608      	mov	r0, r1
 80136ca:	4611      	mov	r1, r2
 80136cc:	2200      	movs	r2, #0
 80136ce:	4d05      	ldr	r5, [pc, #20]	; (80136e4 <_read_r+0x20>)
 80136d0:	602a      	str	r2, [r5, #0]
 80136d2:	461a      	mov	r2, r3
 80136d4:	f7f1 f8bd 	bl	8004852 <_read>
 80136d8:	1c43      	adds	r3, r0, #1
 80136da:	d102      	bne.n	80136e2 <_read_r+0x1e>
 80136dc:	682b      	ldr	r3, [r5, #0]
 80136de:	b103      	cbz	r3, 80136e2 <_read_r+0x1e>
 80136e0:	6023      	str	r3, [r4, #0]
 80136e2:	bd38      	pop	{r3, r4, r5, pc}
 80136e4:	20001a00 	.word	0x20001a00

080136e8 <_init>:
 80136e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ea:	bf00      	nop
 80136ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136ee:	bc08      	pop	{r3}
 80136f0:	469e      	mov	lr, r3
 80136f2:	4770      	bx	lr

080136f4 <_fini>:
 80136f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136f6:	bf00      	nop
 80136f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136fa:	bc08      	pop	{r3}
 80136fc:	469e      	mov	lr, r3
 80136fe:	4770      	bx	lr
