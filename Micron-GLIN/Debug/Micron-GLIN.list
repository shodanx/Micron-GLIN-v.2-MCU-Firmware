
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0dc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800f220  0800f220  0001f220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f728  0800f728  00020690  2**0
                  CONTENTS
  4 .ARM          00000008  0800f728  0800f728  0001f728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f730  0800f730  00020690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f730  0800f730  0001f730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f734  0800f734  0001f734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000690  20000000  0800f738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e30  20000690  0800fdc8  00020690  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c0  0800fdc8  000214c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020690  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d19  00000000  00000000  000206b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045df  00000000  00000000  0003a3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0003e9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  000400b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4a5  00000000  00000000  000415a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e80b  00000000  00000000  0005ba4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e44  00000000  00000000  0007a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010109c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071f0  00000000  00000000  001010ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000690 	.word	0x20000690
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f204 	.word	0x0800f204

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000694 	.word	0x20000694
 800017c:	0800f204 	.word	0x0800f204

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2uiz>:
 8001100:	0042      	lsls	r2, r0, #1
 8001102:	d20e      	bcs.n	8001122 <__aeabi_f2uiz+0x22>
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001108:	d30b      	bcc.n	8001122 <__aeabi_f2uiz+0x22>
 800110a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d409      	bmi.n	8001128 <__aeabi_f2uiz+0x28>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr
 8001128:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800112c:	d101      	bne.n	8001132 <__aeabi_f2uiz+0x32>
 800112e:	0242      	lsls	r2, r0, #9
 8001130:	d102      	bne.n	8001138 <__aeabi_f2uiz+0x38>
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	4770      	bx	lr
 8001138:	f04f 0000 	mov.w	r0, #0
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <__aeabi_uldivmod>:
 8001140:	b953      	cbnz	r3, 8001158 <__aeabi_uldivmod+0x18>
 8001142:	b94a      	cbnz	r2, 8001158 <__aeabi_uldivmod+0x18>
 8001144:	2900      	cmp	r1, #0
 8001146:	bf08      	it	eq
 8001148:	2800      	cmpeq	r0, #0
 800114a:	bf1c      	itt	ne
 800114c:	f04f 31ff 	movne.w	r1, #4294967295
 8001150:	f04f 30ff 	movne.w	r0, #4294967295
 8001154:	f000 b976 	b.w	8001444 <__aeabi_idiv0>
 8001158:	f1ad 0c08 	sub.w	ip, sp, #8
 800115c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001160:	f000 f806 	bl	8001170 <__udivmoddi4>
 8001164:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800116c:	b004      	add	sp, #16
 800116e:	4770      	bx	lr

08001170 <__udivmoddi4>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	9e08      	ldr	r6, [sp, #32]
 8001176:	460d      	mov	r5, r1
 8001178:	4604      	mov	r4, r0
 800117a:	4688      	mov	r8, r1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14d      	bne.n	800121c <__udivmoddi4+0xac>
 8001180:	428a      	cmp	r2, r1
 8001182:	4694      	mov	ip, r2
 8001184:	d968      	bls.n	8001258 <__udivmoddi4+0xe8>
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	b152      	cbz	r2, 80011a2 <__udivmoddi4+0x32>
 800118c:	fa01 f302 	lsl.w	r3, r1, r2
 8001190:	f1c2 0120 	rsb	r1, r2, #32
 8001194:	fa20 f101 	lsr.w	r1, r0, r1
 8001198:	fa0c fc02 	lsl.w	ip, ip, r2
 800119c:	ea41 0803 	orr.w	r8, r1, r3
 80011a0:	4094      	lsls	r4, r2
 80011a2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80011a6:	fbb8 f7f1 	udiv	r7, r8, r1
 80011aa:	fa1f fe8c 	uxth.w	lr, ip
 80011ae:	fb01 8817 	mls	r8, r1, r7, r8
 80011b2:	fb07 f00e 	mul.w	r0, r7, lr
 80011b6:	0c23      	lsrs	r3, r4, #16
 80011b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011bc:	4298      	cmp	r0, r3
 80011be:	d90a      	bls.n	80011d6 <__udivmoddi4+0x66>
 80011c0:	eb1c 0303 	adds.w	r3, ip, r3
 80011c4:	f107 35ff 	add.w	r5, r7, #4294967295
 80011c8:	f080 811e 	bcs.w	8001408 <__udivmoddi4+0x298>
 80011cc:	4298      	cmp	r0, r3
 80011ce:	f240 811b 	bls.w	8001408 <__udivmoddi4+0x298>
 80011d2:	3f02      	subs	r7, #2
 80011d4:	4463      	add	r3, ip
 80011d6:	1a1b      	subs	r3, r3, r0
 80011d8:	fbb3 f0f1 	udiv	r0, r3, r1
 80011dc:	fb01 3310 	mls	r3, r1, r0, r3
 80011e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80011e4:	b2a4      	uxth	r4, r4
 80011e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ea:	45a6      	cmp	lr, r4
 80011ec:	d90a      	bls.n	8001204 <__udivmoddi4+0x94>
 80011ee:	eb1c 0404 	adds.w	r4, ip, r4
 80011f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80011f6:	f080 8109 	bcs.w	800140c <__udivmoddi4+0x29c>
 80011fa:	45a6      	cmp	lr, r4
 80011fc:	f240 8106 	bls.w	800140c <__udivmoddi4+0x29c>
 8001200:	4464      	add	r4, ip
 8001202:	3802      	subs	r0, #2
 8001204:	2100      	movs	r1, #0
 8001206:	eba4 040e 	sub.w	r4, r4, lr
 800120a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800120e:	b11e      	cbz	r6, 8001218 <__udivmoddi4+0xa8>
 8001210:	2300      	movs	r3, #0
 8001212:	40d4      	lsrs	r4, r2
 8001214:	e9c6 4300 	strd	r4, r3, [r6]
 8001218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800121c:	428b      	cmp	r3, r1
 800121e:	d908      	bls.n	8001232 <__udivmoddi4+0xc2>
 8001220:	2e00      	cmp	r6, #0
 8001222:	f000 80ee 	beq.w	8001402 <__udivmoddi4+0x292>
 8001226:	2100      	movs	r1, #0
 8001228:	e9c6 0500 	strd	r0, r5, [r6]
 800122c:	4608      	mov	r0, r1
 800122e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001232:	fab3 f183 	clz	r1, r3
 8001236:	2900      	cmp	r1, #0
 8001238:	d14a      	bne.n	80012d0 <__udivmoddi4+0x160>
 800123a:	42ab      	cmp	r3, r5
 800123c:	d302      	bcc.n	8001244 <__udivmoddi4+0xd4>
 800123e:	4282      	cmp	r2, r0
 8001240:	f200 80fc 	bhi.w	800143c <__udivmoddi4+0x2cc>
 8001244:	1a84      	subs	r4, r0, r2
 8001246:	eb65 0303 	sbc.w	r3, r5, r3
 800124a:	2001      	movs	r0, #1
 800124c:	4698      	mov	r8, r3
 800124e:	2e00      	cmp	r6, #0
 8001250:	d0e2      	beq.n	8001218 <__udivmoddi4+0xa8>
 8001252:	e9c6 4800 	strd	r4, r8, [r6]
 8001256:	e7df      	b.n	8001218 <__udivmoddi4+0xa8>
 8001258:	b902      	cbnz	r2, 800125c <__udivmoddi4+0xec>
 800125a:	deff      	udf	#255	; 0xff
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	2a00      	cmp	r2, #0
 8001262:	f040 8091 	bne.w	8001388 <__udivmoddi4+0x218>
 8001266:	eba1 000c 	sub.w	r0, r1, ip
 800126a:	2101      	movs	r1, #1
 800126c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001270:	fa1f fe8c 	uxth.w	lr, ip
 8001274:	fbb0 f3f7 	udiv	r3, r0, r7
 8001278:	fb07 0013 	mls	r0, r7, r3, r0
 800127c:	0c25      	lsrs	r5, r4, #16
 800127e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001282:	fb0e f003 	mul.w	r0, lr, r3
 8001286:	42a8      	cmp	r0, r5
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0x12c>
 800128a:	eb1c 0505 	adds.w	r5, ip, r5
 800128e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001292:	d202      	bcs.n	800129a <__udivmoddi4+0x12a>
 8001294:	42a8      	cmp	r0, r5
 8001296:	f200 80ce 	bhi.w	8001436 <__udivmoddi4+0x2c6>
 800129a:	4643      	mov	r3, r8
 800129c:	1a2d      	subs	r5, r5, r0
 800129e:	fbb5 f0f7 	udiv	r0, r5, r7
 80012a2:	fb07 5510 	mls	r5, r7, r0, r5
 80012a6:	fb0e fe00 	mul.w	lr, lr, r0
 80012aa:	b2a4      	uxth	r4, r4
 80012ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012b0:	45a6      	cmp	lr, r4
 80012b2:	d908      	bls.n	80012c6 <__udivmoddi4+0x156>
 80012b4:	eb1c 0404 	adds.w	r4, ip, r4
 80012b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80012bc:	d202      	bcs.n	80012c4 <__udivmoddi4+0x154>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f200 80b6 	bhi.w	8001430 <__udivmoddi4+0x2c0>
 80012c4:	4628      	mov	r0, r5
 80012c6:	eba4 040e 	sub.w	r4, r4, lr
 80012ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012ce:	e79e      	b.n	800120e <__udivmoddi4+0x9e>
 80012d0:	f1c1 0720 	rsb	r7, r1, #32
 80012d4:	408b      	lsls	r3, r1
 80012d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80012da:	ea4c 0c03 	orr.w	ip, ip, r3
 80012de:	fa25 fa07 	lsr.w	sl, r5, r7
 80012e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012e6:	fbba f8f9 	udiv	r8, sl, r9
 80012ea:	fa20 f307 	lsr.w	r3, r0, r7
 80012ee:	fb09 aa18 	mls	sl, r9, r8, sl
 80012f2:	408d      	lsls	r5, r1
 80012f4:	fa1f fe8c 	uxth.w	lr, ip
 80012f8:	431d      	orrs	r5, r3
 80012fa:	fa00 f301 	lsl.w	r3, r0, r1
 80012fe:	fb08 f00e 	mul.w	r0, r8, lr
 8001302:	0c2c      	lsrs	r4, r5, #16
 8001304:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001308:	42a0      	cmp	r0, r4
 800130a:	fa02 f201 	lsl.w	r2, r2, r1
 800130e:	d90b      	bls.n	8001328 <__udivmoddi4+0x1b8>
 8001310:	eb1c 0404 	adds.w	r4, ip, r4
 8001314:	f108 3aff 	add.w	sl, r8, #4294967295
 8001318:	f080 8088 	bcs.w	800142c <__udivmoddi4+0x2bc>
 800131c:	42a0      	cmp	r0, r4
 800131e:	f240 8085 	bls.w	800142c <__udivmoddi4+0x2bc>
 8001322:	f1a8 0802 	sub.w	r8, r8, #2
 8001326:	4464      	add	r4, ip
 8001328:	1a24      	subs	r4, r4, r0
 800132a:	fbb4 f0f9 	udiv	r0, r4, r9
 800132e:	fb09 4410 	mls	r4, r9, r0, r4
 8001332:	fb00 fe0e 	mul.w	lr, r0, lr
 8001336:	b2ad      	uxth	r5, r5
 8001338:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800133c:	45a6      	cmp	lr, r4
 800133e:	d908      	bls.n	8001352 <__udivmoddi4+0x1e2>
 8001340:	eb1c 0404 	adds.w	r4, ip, r4
 8001344:	f100 35ff 	add.w	r5, r0, #4294967295
 8001348:	d26c      	bcs.n	8001424 <__udivmoddi4+0x2b4>
 800134a:	45a6      	cmp	lr, r4
 800134c:	d96a      	bls.n	8001424 <__udivmoddi4+0x2b4>
 800134e:	3802      	subs	r0, #2
 8001350:	4464      	add	r4, ip
 8001352:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001356:	fba0 9502 	umull	r9, r5, r0, r2
 800135a:	eba4 040e 	sub.w	r4, r4, lr
 800135e:	42ac      	cmp	r4, r5
 8001360:	46c8      	mov	r8, r9
 8001362:	46ae      	mov	lr, r5
 8001364:	d356      	bcc.n	8001414 <__udivmoddi4+0x2a4>
 8001366:	d053      	beq.n	8001410 <__udivmoddi4+0x2a0>
 8001368:	2e00      	cmp	r6, #0
 800136a:	d069      	beq.n	8001440 <__udivmoddi4+0x2d0>
 800136c:	ebb3 0208 	subs.w	r2, r3, r8
 8001370:	eb64 040e 	sbc.w	r4, r4, lr
 8001374:	fa22 f301 	lsr.w	r3, r2, r1
 8001378:	fa04 f707 	lsl.w	r7, r4, r7
 800137c:	431f      	orrs	r7, r3
 800137e:	40cc      	lsrs	r4, r1
 8001380:	e9c6 7400 	strd	r7, r4, [r6]
 8001384:	2100      	movs	r1, #0
 8001386:	e747      	b.n	8001218 <__udivmoddi4+0xa8>
 8001388:	fa0c fc02 	lsl.w	ip, ip, r2
 800138c:	f1c2 0120 	rsb	r1, r2, #32
 8001390:	fa25 f301 	lsr.w	r3, r5, r1
 8001394:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001398:	fa20 f101 	lsr.w	r1, r0, r1
 800139c:	4095      	lsls	r5, r2
 800139e:	430d      	orrs	r5, r1
 80013a0:	fbb3 f1f7 	udiv	r1, r3, r7
 80013a4:	fb07 3311 	mls	r3, r7, r1, r3
 80013a8:	fa1f fe8c 	uxth.w	lr, ip
 80013ac:	0c28      	lsrs	r0, r5, #16
 80013ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013b2:	fb01 f30e 	mul.w	r3, r1, lr
 80013b6:	4283      	cmp	r3, r0
 80013b8:	fa04 f402 	lsl.w	r4, r4, r2
 80013bc:	d908      	bls.n	80013d0 <__udivmoddi4+0x260>
 80013be:	eb1c 0000 	adds.w	r0, ip, r0
 80013c2:	f101 38ff 	add.w	r8, r1, #4294967295
 80013c6:	d22f      	bcs.n	8001428 <__udivmoddi4+0x2b8>
 80013c8:	4283      	cmp	r3, r0
 80013ca:	d92d      	bls.n	8001428 <__udivmoddi4+0x2b8>
 80013cc:	3902      	subs	r1, #2
 80013ce:	4460      	add	r0, ip
 80013d0:	1ac0      	subs	r0, r0, r3
 80013d2:	fbb0 f3f7 	udiv	r3, r0, r7
 80013d6:	fb07 0013 	mls	r0, r7, r3, r0
 80013da:	b2ad      	uxth	r5, r5
 80013dc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80013e0:	fb03 f00e 	mul.w	r0, r3, lr
 80013e4:	42a8      	cmp	r0, r5
 80013e6:	d908      	bls.n	80013fa <__udivmoddi4+0x28a>
 80013e8:	eb1c 0505 	adds.w	r5, ip, r5
 80013ec:	f103 38ff 	add.w	r8, r3, #4294967295
 80013f0:	d216      	bcs.n	8001420 <__udivmoddi4+0x2b0>
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	d914      	bls.n	8001420 <__udivmoddi4+0x2b0>
 80013f6:	3b02      	subs	r3, #2
 80013f8:	4465      	add	r5, ip
 80013fa:	1a28      	subs	r0, r5, r0
 80013fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001400:	e738      	b.n	8001274 <__udivmoddi4+0x104>
 8001402:	4631      	mov	r1, r6
 8001404:	4630      	mov	r0, r6
 8001406:	e707      	b.n	8001218 <__udivmoddi4+0xa8>
 8001408:	462f      	mov	r7, r5
 800140a:	e6e4      	b.n	80011d6 <__udivmoddi4+0x66>
 800140c:	4618      	mov	r0, r3
 800140e:	e6f9      	b.n	8001204 <__udivmoddi4+0x94>
 8001410:	454b      	cmp	r3, r9
 8001412:	d2a9      	bcs.n	8001368 <__udivmoddi4+0x1f8>
 8001414:	ebb9 0802 	subs.w	r8, r9, r2
 8001418:	eb65 0e0c 	sbc.w	lr, r5, ip
 800141c:	3801      	subs	r0, #1
 800141e:	e7a3      	b.n	8001368 <__udivmoddi4+0x1f8>
 8001420:	4643      	mov	r3, r8
 8001422:	e7ea      	b.n	80013fa <__udivmoddi4+0x28a>
 8001424:	4628      	mov	r0, r5
 8001426:	e794      	b.n	8001352 <__udivmoddi4+0x1e2>
 8001428:	4641      	mov	r1, r8
 800142a:	e7d1      	b.n	80013d0 <__udivmoddi4+0x260>
 800142c:	46d0      	mov	r8, sl
 800142e:	e77b      	b.n	8001328 <__udivmoddi4+0x1b8>
 8001430:	4464      	add	r4, ip
 8001432:	3802      	subs	r0, #2
 8001434:	e747      	b.n	80012c6 <__udivmoddi4+0x156>
 8001436:	3b02      	subs	r3, #2
 8001438:	4465      	add	r5, ip
 800143a:	e72f      	b.n	800129c <__udivmoddi4+0x12c>
 800143c:	4608      	mov	r0, r1
 800143e:	e706      	b.n	800124e <__udivmoddi4+0xde>
 8001440:	4631      	mov	r1, r6
 8001442:	e6e9      	b.n	8001218 <__udivmoddi4+0xa8>

08001444 <__aeabi_idiv0>:
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <__circ_gbuf_push>:
	}
	return 0;
}

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	889b      	ldrh	r3, [r3, #4]
 8001456:	461a      	mov	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	88db      	ldrh	r3, [r3, #6]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	da05      	bge.n	8001472 <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	891b      	ldrh	r3, [r3, #8]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	891b      	ldrh	r3, [r3, #8]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4293      	cmp	r3, r2
 800147c:	db02      	blt.n	8001484 <__circ_gbuf_push+0x3c>
		return -1; // Full
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e02b      	b.n	80014dc <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6819      	ldr	r1, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	889b      	ldrh	r3, [r3, #4]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	8912      	ldrh	r2, [r2, #8]
 8001490:	fbb3 f0f2 	udiv	r0, r3, r2
 8001494:	fb00 f202 	mul.w	r2, r0, r2
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	b29b      	uxth	r3, r3
 800149c:	461a      	mov	r2, r3
			* circ_buf->element_size );
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	895b      	ldrh	r3, [r3, #10]
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 80014a6:	440b      	add	r3, r1
 80014a8:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	895b      	ldrh	r3, [r3, #10]
 80014ae:	461a      	mov	r2, r3
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	68b8      	ldr	r0, [r7, #8]
 80014b4:	f00a ffc4 	bl	800c440 <memcpy>
	circ_buf->push_count++;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	3301      	adds	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	889b      	ldrh	r3, [r3, #4]
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	891b      	ldrh	r3, [r3, #8]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	429a      	cmp	r2, r3
 80014d2:	db02      	blt.n	80014da <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	809a      	strh	r2, [r3, #4]
	return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <Relay_control>:
#include "dac_and_dds_func.h"

//==============================================================================================
void Relay_control(uint8_t relay,uint8_t state){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
	int Relay_address=0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
	if(relay<1 || relay>3 || state>1) return;
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80c3 	beq.w	8001686 <Relay_control+0x1a2>
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b03      	cmp	r3, #3
 8001504:	f200 80bf 	bhi.w	8001686 <Relay_control+0x1a2>
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	2b01      	cmp	r3, #1
 800150c:	f200 80bb 	bhi.w	8001686 <Relay_control+0x1a2>

	while(Relay_address<=0x5) // Set all OUTx to zero
 8001510:	e03c      	b.n	800158c <Relay_control+0xa8>
	{
		HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	2102      	movs	r1, #2
 8001520:	485b      	ldr	r0, [pc, #364]	; (8001690 <Relay_control+0x1ac>)
 8001522:	f002 f84c 	bl	80035be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	105b      	asrs	r3, r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	2104      	movs	r1, #4
 8001536:	4856      	ldr	r0, [pc, #344]	; (8001690 <Relay_control+0x1ac>)
 8001538:	f002 f841 	bl	80035be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	109b      	asrs	r3, r3, #2
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	2108      	movs	r1, #8
 800154c:	4850      	ldr	r0, [pc, #320]	; (8001690 <Relay_control+0x1ac>)
 800154e:	f002 f836 	bl	80035be <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 8001552:	2200      	movs	r2, #0
 8001554:	2101      	movs	r1, #1
 8001556:	484e      	ldr	r0, [pc, #312]	; (8001690 <Relay_control+0x1ac>)
 8001558:	f002 f831 	bl	80035be <HAL_GPIO_WritePin>

		HAL_Delay(1); // wait 1ms
 800155c:	2001      	movs	r0, #1
 800155e:	f001 fd27 	bl	8002fb0 <HAL_Delay>
		HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001568:	484a      	ldr	r0, [pc, #296]	; (8001694 <Relay_control+0x1b0>)
 800156a:	f002 f828 	bl	80035be <HAL_GPIO_WritePin>
		HAL_Delay(1); // wait 1ms
 800156e:	2001      	movs	r0, #1
 8001570:	f001 fd1e 	bl	8002fb0 <HAL_Delay>
		HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157a:	4846      	ldr	r0, [pc, #280]	; (8001694 <Relay_control+0x1b0>)
 800157c:	f002 f81f 	bl	80035be <HAL_GPIO_WritePin>
		HAL_Delay(1); // wait 1ms
 8001580:	2001      	movs	r0, #1
 8001582:	f001 fd15 	bl	8002fb0 <HAL_Delay>
		Relay_address++;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3301      	adds	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
	while(Relay_address<=0x5) // Set all OUTx to zero
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b05      	cmp	r3, #5
 8001590:	ddbf      	ble.n	8001512 <Relay_control+0x2e>
	}


	switch (relay)
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d006      	beq.n	80015a6 <Relay_control+0xc2>
 8001598:	2b03      	cmp	r3, #3
 800159a:	dc1f      	bgt.n	80015dc <Relay_control+0xf8>
 800159c:	2b01      	cmp	r3, #1
 800159e:	d014      	beq.n	80015ca <Relay_control+0xe6>
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d009      	beq.n	80015b8 <Relay_control+0xd4>
 80015a4:	e01a      	b.n	80015dc <Relay_control+0xf8>
	{
	case 3:
		if (state==1){
 80015a6:	79bb      	ldrb	r3, [r7, #6]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d102      	bne.n	80015b2 <Relay_control+0xce>
			Relay_address=0x5; //OUT6
 80015ac:	2305      	movs	r3, #5
 80015ae:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x4; //OUT5
		} break;
 80015b0:	e014      	b.n	80015dc <Relay_control+0xf8>
			Relay_address=0x4; //OUT5
 80015b2:	2304      	movs	r3, #4
 80015b4:	60fb      	str	r3, [r7, #12]
		} break;
 80015b6:	e011      	b.n	80015dc <Relay_control+0xf8>
	case 2:
		if (state==1){
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d102      	bne.n	80015c4 <Relay_control+0xe0>
			Relay_address=0x3; //OUT4
 80015be:	2303      	movs	r3, #3
 80015c0:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x2; //OUT3
		} break;
 80015c2:	e00b      	b.n	80015dc <Relay_control+0xf8>
			Relay_address=0x2; //OUT3
 80015c4:	2302      	movs	r3, #2
 80015c6:	60fb      	str	r3, [r7, #12]
		} break;
 80015c8:	e008      	b.n	80015dc <Relay_control+0xf8>
	case 1:
		if (state==1){
 80015ca:	79bb      	ldrb	r3, [r7, #6]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d102      	bne.n	80015d6 <Relay_control+0xf2>
			Relay_address=0x1; //OUT2
 80015d0:	2301      	movs	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x0; //OUT1
		} break;
 80015d4:	e001      	b.n	80015da <Relay_control+0xf6>
			Relay_address=0x0; //OUT1
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
		} break;
 80015da:	bf00      	nop
	}

	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	2102      	movs	r1, #2
 80015ea:	4829      	ldr	r0, [pc, #164]	; (8001690 <Relay_control+0x1ac>)
 80015ec:	f001 ffe7 	bl	80035be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	105b      	asrs	r3, r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	2104      	movs	r1, #4
 8001600:	4823      	ldr	r0, [pc, #140]	; (8001690 <Relay_control+0x1ac>)
 8001602:	f001 ffdc 	bl	80035be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	109b      	asrs	r3, r3, #2
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	2108      	movs	r1, #8
 8001616:	481e      	ldr	r0, [pc, #120]	; (8001690 <Relay_control+0x1ac>)
 8001618:	f001 ffd1 	bl	80035be <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 1); // LVL 1
 800161c:	2201      	movs	r2, #1
 800161e:	2101      	movs	r1, #1
 8001620:	481b      	ldr	r0, [pc, #108]	; (8001690 <Relay_control+0x1ac>)
 8001622:	f001 ffcc 	bl	80035be <HAL_GPIO_WritePin>

	HAL_Delay(1); // wait 1ms
 8001626:	2001      	movs	r0, #1
 8001628:	f001 fcc2 	bl	8002fb0 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <Relay_control+0x1b0>)
 8001634:	f001 ffc3 	bl	80035be <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 8001638:	2001      	movs	r0, #1
 800163a:	f001 fcb9 	bl	8002fb0 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001644:	4813      	ldr	r0, [pc, #76]	; (8001694 <Relay_control+0x1b0>)
 8001646:	f001 ffba 	bl	80035be <HAL_GPIO_WritePin>
	HAL_Delay(50); // wait 50ms
 800164a:	2032      	movs	r0, #50	; 0x32
 800164c:	f001 fcb0 	bl	8002fb0 <HAL_Delay>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 8001650:	2200      	movs	r2, #0
 8001652:	2101      	movs	r1, #1
 8001654:	480e      	ldr	r0, [pc, #56]	; (8001690 <Relay_control+0x1ac>)
 8001656:	f001 ffb2 	bl	80035be <HAL_GPIO_WritePin>

	HAL_Delay(1); // wait 1ms
 800165a:	2001      	movs	r0, #1
 800165c:	f001 fca8 	bl	8002fb0 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001666:	480b      	ldr	r0, [pc, #44]	; (8001694 <Relay_control+0x1b0>)
 8001668:	f001 ffa9 	bl	80035be <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 800166c:	2001      	movs	r0, #1
 800166e:	f001 fc9f 	bl	8002fb0 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <Relay_control+0x1b0>)
 800167a:	f001 ffa0 	bl	80035be <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 800167e:	2001      	movs	r0, #1
 8001680:	f001 fc96 	bl	8002fb0 <HAL_Delay>
 8001684:	e000      	b.n	8001688 <Relay_control+0x1a4>
	if(relay<1 || relay>3 || state>1) return;
 8001686:	bf00      	nop

}
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020000 	.word	0x40020000
 8001694:	40020800 	.word	0x40020800

08001698 <DAC_Write>:
//==============================================================================================


//==============================================================================================
void DAC_Write(uint32_t value)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <DAC_Write+0x64>)
 80016a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016a6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016b0:	f023 030f 	bic.w	r3, r3, #15
 80016b4:	4a11      	ldr	r2, [pc, #68]	; (80016fc <DAC_Write+0x64>)
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <DAC_Write+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <DAC_Write+0x64>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <DAC_Write+0x68>)
 80016c8:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <DAC_Write+0x64>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <DAC_Write+0x68>)
 80016d2:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2110      	movs	r1, #16
 80016d8:	480a      	ldr	r0, [pc, #40]	; (8001704 <DAC_Write+0x6c>)
 80016da:	f001 ff70 	bl	80035be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 80016de:	2302      	movs	r3, #2
 80016e0:	2202      	movs	r2, #2
 80016e2:	4907      	ldr	r1, [pc, #28]	; (8001700 <DAC_Write+0x68>)
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <DAC_Write+0x70>)
 80016e6:	f005 f9a1 	bl	8006a2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2110      	movs	r1, #16
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <DAC_Write+0x6c>)
 80016f0:	f001 ff65 	bl	80035be <HAL_GPIO_WritePin>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200007fc 	.word	0x200007fc
 8001700:	20000800 	.word	0x20000800
 8001704:	40020000 	.word	0x40020000
 8001708:	20000844 	.word	0x20000844

0800170c <DAC_SendInit>:
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
}

//==============================================================================================
void DAC_SendInit(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

	DAC_tx_buffer=0x02000000; // Write CONFIG1
 8001710:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <DAC_SendInit+0xfc>)
 8001712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001716:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 8001718:	4b3c      	ldr	r3, [pc, #240]	; (800180c <DAC_SendInit+0x100>)
 800171a:	7a1b      	ldrb	r3, [r3, #8]
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	f003 0210 	and.w	r2, r3, #16
 8001722:	4b39      	ldr	r3, [pc, #228]	; (8001808 <DAC_SendInit+0xfc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a37      	ldr	r2, [pc, #220]	; (8001808 <DAC_SendInit+0xfc>)
 800172a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x06)<<6;
 800172c:	4b37      	ldr	r3, [pc, #220]	; (800180c <DAC_SendInit+0x100>)
 800172e:	79db      	ldrb	r3, [r3, #7]
 8001730:	019b      	lsls	r3, r3, #6
 8001732:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <DAC_SendInit+0xfc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a32      	ldr	r2, [pc, #200]	; (8001808 <DAC_SendInit+0xfc>)
 800173e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 8001740:	4b32      	ldr	r3, [pc, #200]	; (800180c <DAC_SendInit+0x100>)
 8001742:	799b      	ldrb	r3, [r3, #6]
 8001744:	029b      	lsls	r3, r3, #10
 8001746:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <DAC_SendInit+0xfc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a2d      	ldr	r2, [pc, #180]	; (8001808 <DAC_SendInit+0xfc>)
 8001752:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <DAC_SendInit+0x100>)
 8001756:	795b      	ldrb	r3, [r3, #5]
 8001758:	02db      	lsls	r3, r3, #11
 800175a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <DAC_SendInit+0xfc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a28      	ldr	r2, [pc, #160]	; (8001808 <DAC_SendInit+0xfc>)
 8001766:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <DAC_SendInit+0x100>)
 800176a:	791b      	ldrb	r3, [r3, #4]
 800176c:	031b      	lsls	r3, r3, #12
 800176e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <DAC_SendInit+0xfc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a23      	ldr	r2, [pc, #140]	; (8001808 <DAC_SendInit+0xfc>)
 800177a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <DAC_SendInit+0x100>)
 800177e:	78db      	ldrb	r3, [r3, #3]
 8001780:	035b      	lsls	r3, r3, #13
 8001782:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <DAC_SendInit+0xfc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <DAC_SendInit+0xfc>)
 800178e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <DAC_SendInit+0x100>)
 8001792:	789b      	ldrb	r3, [r3, #2]
 8001794:	039b      	lsls	r3, r3, #14
 8001796:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <DAC_SendInit+0xfc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <DAC_SendInit+0xfc>)
 80017a2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <DAC_SendInit+0x100>)
 80017a6:	785b      	ldrb	r3, [r3, #1]
 80017a8:	049b      	lsls	r3, r3, #18
 80017aa:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <DAC_SendInit+0xfc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <DAC_SendInit+0xfc>)
 80017b6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <DAC_SendInit+0x100>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	05db      	lsls	r3, r3, #23
 80017be:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <DAC_SendInit+0xfc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <DAC_SendInit+0xfc>)
 80017ca:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <DAC_SendInit+0xfc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0c1b      	lsrs	r3, r3, #16
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <DAC_SendInit+0x104>)
 80017d6:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <DAC_SendInit+0xfc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <DAC_SendInit+0x104>)
 80017e0:	805a      	strh	r2, [r3, #2]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2110      	movs	r1, #16
 80017e6:	480b      	ldr	r0, [pc, #44]	; (8001814 <DAC_SendInit+0x108>)
 80017e8:	f001 fee9 	bl	80035be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 80017ec:	2305      	movs	r3, #5
 80017ee:	2202      	movs	r2, #2
 80017f0:	4907      	ldr	r1, [pc, #28]	; (8001810 <DAC_SendInit+0x104>)
 80017f2:	4809      	ldr	r0, [pc, #36]	; (8001818 <DAC_SendInit+0x10c>)
 80017f4:	f005 f91a 	bl	8006a2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	2110      	movs	r1, #16
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <DAC_SendInit+0x108>)
 80017fe:	f001 fede 	bl	80035be <HAL_GPIO_WritePin>

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200007fc 	.word	0x200007fc
 800180c:	20000804 	.word	0x20000804
 8001810:	20000800 	.word	0x20000800
 8001814:	40020000 	.word	0x40020000
 8001818:	20000844 	.word	0x20000844

0800181c <DDS_Calculation>:
	DDS_Init();
	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, count_tmp); // Back LDAC signal state
}

void DDS_Calculation(void)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
	float hw_limit=1000; // 1(256)kHz hardware optimized limit
 8001822:	4b4e      	ldr	r3, [pc, #312]	; (800195c <DDS_Calculation+0x140>)
 8001824:	60fb      	str	r3, [r7, #12]
	float dac_counts=1048576;
 8001826:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 800182a:	60bb      	str	r3, [r7, #8]
	float corr_coeff;
	float dac_tmp=DAC_code;
 800182c:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <DDS_Calculation+0x144>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fa47 	bl	8000cc4 <__aeabi_ui2f>
 8001836:	4603      	mov	r3, r0
 8001838:	607b      	str	r3, [r7, #4]

	corr_coeff=corr_coeff_1*dac_tmp*dac_tmp;
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <DDS_Calculation+0x148>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa97 	bl	8000d74 <__aeabi_fmul>
 8001846:	4603      	mov	r3, r0
 8001848:	4619      	mov	r1, r3
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fa92 	bl	8000d74 <__aeabi_fmul>
 8001850:	4603      	mov	r3, r0
 8001852:	603b      	str	r3, [r7, #0]
	corr_coeff+=corr_coeff_2*dac_tmp;
 8001854:	4b44      	ldr	r3, [pc, #272]	; (8001968 <DDS_Calculation+0x14c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa8a 	bl	8000d74 <__aeabi_fmul>
 8001860:	4603      	mov	r3, r0
 8001862:	4619      	mov	r1, r3
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f7ff f97d 	bl	8000b64 <__addsf3>
 800186a:	4603      	mov	r3, r0
 800186c:	603b      	str	r3, [r7, #0]
	corr_coeff+=corr_coeff_3;
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <DDS_Calculation+0x150>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	6838      	ldr	r0, [r7, #0]
 8001876:	f7ff f975 	bl	8000b64 <__addsf3>
 800187a:	4603      	mov	r3, r0
 800187c:	603b      	str	r3, [r7, #0]

	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 800187e:	4b3c      	ldr	r3, [pc, #240]	; (8001970 <DDS_Calculation+0x154>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a3c      	ldr	r2, [pc, #240]	; (8001974 <DDS_Calculation+0x158>)
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fb27 	bl	8000edc <__aeabi_fdiv>
 800188e:	4603      	mov	r3, r0
 8001890:	4619      	mov	r1, r3
 8001892:	68b8      	ldr	r0, [r7, #8]
 8001894:	f7ff fb22 	bl	8000edc <__aeabi_fdiv>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	4b36      	ldr	r3, [pc, #216]	; (8001978 <DDS_Calculation+0x15c>)
 800189e:	601a      	str	r2, [r3, #0]

	if(DDS_target_frequecny>hw_limit)
 80018a0:	4b35      	ldr	r3, [pc, #212]	; (8001978 <DDS_Calculation+0x15c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f7ff fc02 	bl	80010b0 <__aeabi_fcmplt>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d02e      	beq.n	8001910 <DDS_Calculation+0xf4>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <DDS_Calculation+0x15c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68f9      	ldr	r1, [r7, #12]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fb0f 	bl	8000edc <__aeabi_fdiv>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fc1d 	bl	8001100 <__aeabi_f2uiz>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a2c      	ldr	r2, [pc, #176]	; (800197c <DDS_Calculation+0x160>)
 80018ca:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 80018cc:	4b28      	ldr	r3, [pc, #160]	; (8001970 <DDS_Calculation+0x154>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a28      	ldr	r2, [pc, #160]	; (8001974 <DDS_Calculation+0x158>)
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fb00 	bl	8000edc <__aeabi_fdiv>
 80018dc:	4603      	mov	r3, r0
 80018de:	4619      	mov	r1, r3
 80018e0:	68b8      	ldr	r0, [r7, #8]
 80018e2:	f7ff fafb 	bl	8000edc <__aeabi_fdiv>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <DDS_Calculation+0x15c>)
 80018ec:	601a      	str	r2, [r3, #0]
		DDS_target_frequecny/=(float)DDS_target_multipiller;
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <DDS_Calculation+0x15c>)
 80018f0:	681c      	ldr	r4, [r3, #0]
 80018f2:	4b22      	ldr	r3, [pc, #136]	; (800197c <DDS_Calculation+0x160>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f9e4 	bl	8000cc4 <__aeabi_ui2f>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4619      	mov	r1, r3
 8001900:	4620      	mov	r0, r4
 8001902:	f7ff faeb 	bl	8000edc <__aeabi_fdiv>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <DDS_Calculation+0x15c>)
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e002      	b.n	8001916 <DDS_Calculation+0xfa>
	} else DDS_target_multipiller = 1;
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <DDS_Calculation+0x160>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]

	DDS_FTW=(((DDS_target_frequecny/corr_coeff)*256)/DDS_clock_frequecny)*(float)0xFFFFFFFF;
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <DDS_Calculation+0x15c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6839      	ldr	r1, [r7, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fadd 	bl	8000edc <__aeabi_fdiv>
 8001922:	4603      	mov	r3, r0
 8001924:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fa23 	bl	8000d74 <__aeabi_fmul>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <DDS_Calculation+0x164>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	4610      	mov	r0, r2
 800193a:	f7ff facf 	bl	8000edc <__aeabi_fdiv>
 800193e:	4603      	mov	r3, r0
 8001940:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fa15 	bl	8000d74 <__aeabi_fmul>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <DDS_Calculation+0x168>)
 8001950:	601a      	str	r2, [r3, #0]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	bf00      	nop
 800195c:	447a0000 	.word	0x447a0000
 8001960:	2000081c 	.word	0x2000081c
 8001964:	200007f0 	.word	0x200007f0
 8001968:	200007f4 	.word	0x200007f4
 800196c:	200007f8 	.word	0x200007f8
 8001970:	200007e4 	.word	0x200007e4
 8001974:	20000818 	.word	0x20000818
 8001978:	20000814 	.word	0x20000814
 800197c:	20000330 	.word	0x20000330
 8001980:	2000032c 	.word	0x2000032c
 8001984:	20000810 	.word	0x20000810

08001988 <DDS_Init>:

//==============================================================================================
void DDS_Init(void)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];
	DDS_Calculation();
 800198e:	f7ff ff45 	bl	800181c <DDS_Calculation>

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Control DDS (D15=1, D14=1)
 8001992:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001996:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=1 << 12; // Enter DDS to Reset mode, RST (D12) = 1
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199e:	b29b      	uxth	r3, r3
 80019a0:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a8:	4861      	ldr	r0, [pc, #388]	; (8001b30 <DDS_Init+0x1a8>)
 80019aa:	f001 fe08 	bl	80035be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 80019ae:	1d39      	adds	r1, r7, #4
 80019b0:	2305      	movs	r3, #5
 80019b2:	2201      	movs	r2, #1
 80019b4:	485f      	ldr	r0, [pc, #380]	; (8001b34 <DDS_Init+0x1ac>)
 80019b6:	f005 f839 	bl	8006a2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c0:	485b      	ldr	r0, [pc, #364]	; (8001b30 <DDS_Init+0x1a8>)
 80019c2:	f001 fdfc 	bl	80035be <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80019c6:	2005      	movs	r0, #5
 80019c8:	f001 faf2 	bl	8002fb0 <HAL_Delay>

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 80019cc:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 80019d0:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 80019d2:	88bc      	ldrh	r4, [r7, #4]
 80019d4:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <DDS_Init+0x1b0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fb91 	bl	8001100 <__aeabi_f2uiz>
 80019de:	4603      	mov	r3, r0
 80019e0:	0e1b      	lsrs	r3, r3, #24
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4423      	add	r3, r4
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f0:	484f      	ldr	r0, [pc, #316]	; (8001b30 <DDS_Init+0x1a8>)
 80019f2:	f001 fde4 	bl	80035be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 80019f6:	1d39      	adds	r1, r7, #4
 80019f8:	2305      	movs	r3, #5
 80019fa:	2201      	movs	r2, #1
 80019fc:	484d      	ldr	r0, [pc, #308]	; (8001b34 <DDS_Init+0x1ac>)
 80019fe:	f005 f815 	bl	8006a2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a08:	4849      	ldr	r0, [pc, #292]	; (8001b30 <DDS_Init+0x1a8>)
 8001a0a:	f001 fdd8 	bl	80035be <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001a0e:	2005      	movs	r0, #5
 8001a10:	f001 face 	bl	8002fb0 <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001a14:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001a18:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001a1a:	88bc      	ldrh	r4, [r7, #4]
 8001a1c:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <DDS_Init+0x1b0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fb6d 	bl	8001100 <__aeabi_f2uiz>
 8001a26:	4603      	mov	r3, r0
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4423      	add	r3, r4
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a3c:	483c      	ldr	r0, [pc, #240]	; (8001b30 <DDS_Init+0x1a8>)
 8001a3e:	f001 fdbe 	bl	80035be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001a42:	1d39      	adds	r1, r7, #4
 8001a44:	2305      	movs	r3, #5
 8001a46:	2201      	movs	r2, #1
 8001a48:	483a      	ldr	r0, [pc, #232]	; (8001b34 <DDS_Init+0x1ac>)
 8001a4a:	f004 ffef 	bl	8006a2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a54:	4836      	ldr	r0, [pc, #216]	; (8001b30 <DDS_Init+0x1a8>)
 8001a56:	f001 fdb2 	bl	80035be <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001a5a:	2005      	movs	r0, #5
 8001a5c:	f001 faa8 	bl	8002fb0 <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001a60:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001a64:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001a66:	88bc      	ldrh	r4, [r7, #4]
 8001a68:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <DDS_Init+0x1b0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fb47 	bl	8001100 <__aeabi_f2uiz>
 8001a72:	4603      	mov	r3, r0
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4423      	add	r3, r4
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a88:	4829      	ldr	r0, [pc, #164]	; (8001b30 <DDS_Init+0x1a8>)
 8001a8a:	f001 fd98 	bl	80035be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001a8e:	1d39      	adds	r1, r7, #4
 8001a90:	2305      	movs	r3, #5
 8001a92:	2201      	movs	r2, #1
 8001a94:	4827      	ldr	r0, [pc, #156]	; (8001b34 <DDS_Init+0x1ac>)
 8001a96:	f004 ffc9 	bl	8006a2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa0:	4823      	ldr	r0, [pc, #140]	; (8001b30 <DDS_Init+0x1a8>)
 8001aa2:	f001 fd8c 	bl	80035be <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001aa6:	2005      	movs	r0, #5
 8001aa8:	f001 fa82 	bl	8002fb0 <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab0:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001ab2:	88bc      	ldrh	r4, [r7, #4]
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <DDS_Init+0x1b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fb21 	bl	8001100 <__aeabi_f2uiz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4423      	add	r3, r4
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad2:	4817      	ldr	r0, [pc, #92]	; (8001b30 <DDS_Init+0x1a8>)
 8001ad4:	f001 fd73 	bl	80035be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ad8:	1d39      	adds	r1, r7, #4
 8001ada:	2305      	movs	r3, #5
 8001adc:	2201      	movs	r2, #1
 8001ade:	4815      	ldr	r0, [pc, #84]	; (8001b34 <DDS_Init+0x1ac>)
 8001ae0:	f004 ffa4 	bl	8006a2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aea:	4811      	ldr	r0, [pc, #68]	; (8001b30 <DDS_Init+0x1a8>)
 8001aec:	f001 fd67 	bl	80035be <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001af0:	2005      	movs	r0, #5
 8001af2:	f001 fa5d 	bl	8002fb0 <HAL_Delay>

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Exit DAC from Sleep+Reset mode
 8001af6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001afa:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b02:	480b      	ldr	r0, [pc, #44]	; (8001b30 <DDS_Init+0x1a8>)
 8001b04:	f001 fd5b 	bl	80035be <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001b08:	1d39      	adds	r1, r7, #4
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4809      	ldr	r0, [pc, #36]	; (8001b34 <DDS_Init+0x1ac>)
 8001b10:	f004 ff8c 	bl	8006a2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <DDS_Init+0x1a8>)
 8001b1c:	f001 fd4f 	bl	80035be <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001b20:	2005      	movs	r0, #5
 8001b22:	f001 fa45 	bl	8002fb0 <HAL_Delay>

}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40020400 	.word	0x40020400
 8001b34:	2000089c 	.word	0x2000089c
 8001b38:	20000810 	.word	0x20000810

08001b3c <LcdSend>:
unsigned char LcdCache[LCD_CACHSIZE];   // Фреймбуфер
unsigned int LcdCacheIdx = 0;   // Текущий адрес во фреймбуфере


void LcdSend(uint8_t data, uint8_t cmd) //Sends data to display controller
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	460a      	mov	r2, r1
 8001b46:	71fb      	strb	r3, [r7, #7]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	71bb      	strb	r3, [r7, #6]
  uint8_t sdata = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]

  lcd44780_RW_0;
 8001b50:	2200      	movs	r2, #0
 8001b52:	2102      	movs	r1, #2
 8001b54:	4811      	ldr	r0, [pc, #68]	; (8001b9c <LcdSend+0x60>)
 8001b56:	f001 fd32 	bl	80035be <HAL_GPIO_WritePin>

  sdata = data;
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	73fb      	strb	r3, [r7, #15]
  if(cmd == lcd_CMD)
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <LcdSend+0x34>
  {
	  lcd44780_RS_0;
 8001b64:	2201      	movs	r2, #1
 8001b66:	2101      	movs	r1, #1
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <LcdSend+0x60>)
 8001b6a:	f001 fd28 	bl	80035be <HAL_GPIO_WritePin>
 8001b6e:	e004      	b.n	8001b7a <LcdSend+0x3e>
  }                             //идентефикатор кода
  else
  {
	  lcd44780_RS_1;
 8001b70:	2200      	movs	r2, #0
 8001b72:	2101      	movs	r1, #1
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <LcdSend+0x60>)
 8001b76:	f001 fd22 	bl	80035be <HAL_GPIO_WritePin>
  }                             //идентефикатор данных
  send_data(sdata);
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 f961 	bl	8001e44 <send_data>

  if(cmd == lcd_CMD)while(check_busy_flag());
 8001b82:	79bb      	ldrb	r3, [r7, #6]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <LcdSend+0x58>
 8001b88:	bf00      	nop
 8001b8a:	f000 f971 	bl	8001e70 <check_busy_flag>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1fa      	bne.n	8001b8a <LcdSend+0x4e>
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <LcdUpdate>:

void LcdUpdate(void)            //Copies the LCD cache into the device RAM
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
  int i = 0, j = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]

  LcdSend(HD44780_SET_CGRAM_ADD, lcd_CMD);//Позицианируем курсор на начало координат
 8001bae:	2101      	movs	r1, #1
 8001bb0:	2040      	movs	r0, #64	; 0x40
 8001bb2:	f7ff ffc3 	bl	8001b3c <LcdSend>
  LcdSend(HD44780_SET_DDRAM_ADD, lcd_CMD);
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	2080      	movs	r0, #128	; 0x80
 8001bba:	f7ff ffbf 	bl	8001b3c <LcdSend>

  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e017      	b.n	8001bf4 <LcdUpdate+0x54>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	e00e      	b.n	8001be8 <LcdUpdate+0x48>
    {
      LcdSend(LcdCache[((i * LCD_X_RES) + j)], lcd_DATA);       //вычисляем адрес в фрейм буфере, и данные от туда грузим в дисплей.
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2264      	movs	r2, #100	; 0x64
 8001bce:	fb03 f202 	mul.w	r2, r3, r2
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <LcdUpdate+0x64>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	2102      	movs	r1, #2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ffad 	bl	8001b3c <LcdSend>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b63      	cmp	r3, #99	; 0x63
 8001bec:	dded      	ble.n	8001bca <LcdUpdate+0x2a>
  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	dde4      	ble.n	8001bc4 <LcdUpdate+0x24>
    }

}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200006c0 	.word	0x200006c0

08001c08 <LcdGotoXYFont>:
  }
}


void LcdGotoXYFont(unsigned char x, unsigned char y)    //Sets cursor location to xy location. Range: 1,1 .. 14,6
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460a      	mov	r2, r1
 8001c12:	71fb      	strb	r3, [r7, #7]
 8001c14:	4613      	mov	r3, r2
 8001c16:	71bb      	strb	r3, [r7, #6]
  LcdCacheIdx = ((int) (y) - 1) * Cntr_X_RES + ((int) (x) - 1) * Cntr_Y_RES;
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	2264      	movs	r2, #100	; 0x64
 8001c1e:	fb03 f202 	mul.w	r2, r3, r2
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	4413      	add	r3, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <LcdGotoXYFont+0x34>)
 8001c2e:	601a      	str	r2, [r3, #0]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000788 	.word	0x20000788

08001c40 <clean_lcd_buf>:

void clean_lcd_buf(void)        //очистка текстового буфера
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	71fb      	strb	r3, [r7, #7]

  for (i = 0; i < 20; i++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	71fb      	strb	r3, [r7, #7]
 8001c4e:	e006      	b.n	8001c5e <clean_lcd_buf+0x1e>
    lcd_buf[i] = 0;
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <clean_lcd_buf+0x30>)
 8001c54:	2100      	movs	r1, #0
 8001c56:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 20; i++)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	71fb      	strb	r3, [r7, #7]
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b13      	cmp	r3, #19
 8001c62:	d9f5      	bls.n	8001c50 <clean_lcd_buf+0x10>
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	200006ac 	.word	0x200006ac

08001c74 <LcdChr>:

void LcdChr(int ch)             //Displays a character at current cursor location and increment cursor location
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  char i = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
  if(ch > 0x7f)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b7f      	cmp	r3, #127	; 0x7f
 8001c84:	dd1a      	ble.n	8001cbc <LcdChr+0x48>
  {
    for (i = 0; i < 5; i++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	e013      	b.n	8001cb4 <LcdChr+0x40>
      LcdCache[LcdCacheIdx++] = lcd_font_table_rus[(ch * 5 + (i) - 0x3C0)];     //выделяем байт-столбик из символа и грузим в массив - 5 раз
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	441a      	add	r2, r3
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	4413      	add	r3, r2
 8001c98:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <LcdChr+0x98>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	1c59      	adds	r1, r3, #1
 8001ca2:	481a      	ldr	r0, [pc, #104]	; (8001d0c <LcdChr+0x98>)
 8001ca4:	6001      	str	r1, [r0, #0]
 8001ca6:	491a      	ldr	r1, [pc, #104]	; (8001d10 <LcdChr+0x9c>)
 8001ca8:	5c89      	ldrb	r1, [r1, r2]
 8001caa:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <LcdChr+0xa0>)
 8001cac:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d9e8      	bls.n	8001c8c <LcdChr+0x18>
 8001cba:	e019      	b.n	8001cf0 <LcdChr+0x7c>
  } else
  {
    for (i = 0; i < 5; i++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	73fb      	strb	r3, [r7, #15]
 8001cc0:	e013      	b.n	8001cea <LcdChr+0x76>
      LcdCache[LcdCacheIdx++] = lcd_font_table[(ch * 5 + (i) - 0xA0)];  //выделяем байт-столбик из символа и грузим в массив - 5 раз
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	441a      	add	r2, r3
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f1a3 02a0 	sub.w	r2, r3, #160	; 0xa0
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <LcdChr+0x98>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	1c59      	adds	r1, r3, #1
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <LcdChr+0x98>)
 8001cda:	6001      	str	r1, [r0, #0]
 8001cdc:	490e      	ldr	r1, [pc, #56]	; (8001d18 <LcdChr+0xa4>)
 8001cde:	5c89      	ldrb	r1, [r1, r2]
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <LcdChr+0xa0>)
 8001ce2:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d9e8      	bls.n	8001cc2 <LcdChr+0x4e>
  }
  LcdCache[LcdCacheIdx++] = 0x00;       //добавляем пробел между символами
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <LcdChr+0x98>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	4905      	ldr	r1, [pc, #20]	; (8001d0c <LcdChr+0x98>)
 8001cf8:	600a      	str	r2, [r1, #0]
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <LcdChr+0xa0>)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	54d1      	strb	r1, [r2, r3]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000788 	.word	0x20000788
 8001d10:	200001e0 	.word	0x200001e0
 8001d14:	200006c0 	.word	0x200006c0
 8001d18:	20000000 	.word	0x20000000

08001d1c <LcdString>:
  }
  LcdCache[LcdCacheIdx++] = 0xFF;       //добавляем пробел между символами
}

void LcdString(unsigned char x, unsigned char y)        //Displays a string at current cursor location
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	460a      	mov	r2, r1
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	71bb      	strb	r3, [r7, #6]
  unsigned char i = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]

  if(x > 17 || y > 8)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2b11      	cmp	r3, #17
 8001d34:	d81f      	bhi.n	8001d76 <LcdString+0x5a>
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d81c      	bhi.n	8001d76 <LcdString+0x5a>
    return;
  LcdGotoXYFont(x, y);
 8001d3c:	79ba      	ldrb	r2, [r7, #6]
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff60 	bl	8001c08 <LcdGotoXYFont>
  for (i = 0; i < 17; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e00d      	b.n	8001d6a <LcdString+0x4e>
    if(lcd_buf[i])
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <LcdString+0x64>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <LcdString+0x48>
      LcdChr(lcd_buf[i]);
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <LcdString+0x64>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff88 	bl	8001c74 <LcdChr>
  for (i = 0; i < 17; i++)
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	3301      	adds	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d9ee      	bls.n	8001d4e <LcdString+0x32>
  clean_lcd_buf();
 8001d70:	f7ff ff66 	bl	8001c40 <clean_lcd_buf>
 8001d74:	e000      	b.n	8001d78 <LcdString+0x5c>
    return;
 8001d76:	bf00      	nop
}
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200006ac 	.word	0x200006ac

08001d84 <pulse_e>:
//////////////////////////////////////////////////////////////////////////////////////



void pulse_e() //импульс на вход Е индикатора
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
//    PIN_ON(PIN_E);
	//    delay_us(100);
	//    PIN_OFF(PIN_E);
	//    delay_us(39);

	HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_SET);//    PIN_ON(PIN_E);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <pulse_e+0x20>)
 8001d90:	f001 fc15 	bl	80035be <HAL_GPIO_WritePin>
	//HAL_Delay(1);
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 8001d94:	2200      	movs	r2, #0
 8001d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9a:	4802      	ldr	r0, [pc, #8]	; (8001da4 <pulse_e+0x20>)
 8001d9c:	f001 fc0f 	bl	80035be <HAL_GPIO_WritePin>
    //HAL_Delay(1);
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40020400 	.word	0x40020400

08001da8 <send_nibble>:

void send_nibble(unsigned char data) //полубайтовый вывод
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  //выводим половину байта на соответствующие контакты
  if(data & 0x01)
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <send_nibble+0x20>
	HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB4);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	481f      	ldr	r0, [pc, #124]	; (8001e40 <send_nibble+0x98>)
 8001dc2:	f001 fbfc 	bl	80035be <HAL_GPIO_WritePin>
 8001dc6:	e004      	b.n	8001dd2 <send_nibble+0x2a>
  else
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2104      	movs	r1, #4
 8001dcc:	481c      	ldr	r0, [pc, #112]	; (8001e40 <send_nibble+0x98>)
 8001dce:	f001 fbf6 	bl	80035be <HAL_GPIO_WritePin>

  if(data & 0x02)
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <send_nibble+0x40>
		HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB5);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2108      	movs	r1, #8
 8001de0:	4817      	ldr	r0, [pc, #92]	; (8001e40 <send_nibble+0x98>)
 8001de2:	f001 fbec 	bl	80035be <HAL_GPIO_WritePin>
 8001de6:	e004      	b.n	8001df2 <send_nibble+0x4a>
	  else
	    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2108      	movs	r1, #8
 8001dec:	4814      	ldr	r0, [pc, #80]	; (8001e40 <send_nibble+0x98>)
 8001dee:	f001 fbe6 	bl	80035be <HAL_GPIO_WritePin>

  if(data & 0x04)
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <send_nibble+0x60>
		HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB6);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2110      	movs	r1, #16
 8001e00:	480f      	ldr	r0, [pc, #60]	; (8001e40 <send_nibble+0x98>)
 8001e02:	f001 fbdc 	bl	80035be <HAL_GPIO_WritePin>
 8001e06:	e004      	b.n	8001e12 <send_nibble+0x6a>
	  else
	    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2110      	movs	r1, #16
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <send_nibble+0x98>)
 8001e0e:	f001 fbd6 	bl	80035be <HAL_GPIO_WritePin>

  if(data & 0x08)
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <send_nibble+0x80>
		HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB7);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2120      	movs	r1, #32
 8001e20:	4807      	ldr	r0, [pc, #28]	; (8001e40 <send_nibble+0x98>)
 8001e22:	f001 fbcc 	bl	80035be <HAL_GPIO_WritePin>
 8001e26:	e004      	b.n	8001e32 <send_nibble+0x8a>
	  else
	    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2120      	movs	r1, #32
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <send_nibble+0x98>)
 8001e2e:	f001 fbc6 	bl	80035be <HAL_GPIO_WritePin>

  pulse_e(); //чтобы индикатор проглотил данные
 8001e32:	f7ff ffa7 	bl	8001d84 <pulse_e>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40020400 	.word	0x40020400

08001e44 <send_data>:

void send_data(unsigned char data) //вывод 2хполбайта на индикатор
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  //Первым шлем старшие полбайта: по инструкции
  //сначала столбец, потом строка таблицы знакогенератора
  send_nibble((data>>4) & 0x0F);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ffa7 	bl	8001da8 <send_nibble>
  send_nibble(data & 0x0F);
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ffa0 	bl	8001da8 <send_nibble>
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <check_busy_flag>:

int check_busy_flag(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	463b      	mov	r3, r7
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
	GPIO_PinState status;

	lcd44780_RW_1; // Read
 8001e84:	2201      	movs	r2, #1
 8001e86:	2102      	movs	r1, #2
 8001e88:	4822      	ldr	r0, [pc, #136]	; (8001f14 <check_busy_flag+0xa4>)
 8001e8a:	f001 fb98 	bl	80035be <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	481c      	ldr	r0, [pc, #112]	; (8001f14 <check_busy_flag+0xa4>)
 8001ea4:	f001 f9f4 	bl	8003290 <HAL_GPIO_Init>

	lcd44780_E_1;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eae:	4819      	ldr	r0, [pc, #100]	; (8001f14 <check_busy_flag+0xa4>)
 8001eb0:	f001 fb85 	bl	80035be <HAL_GPIO_WritePin>
	status=HAL_GPIO_ReadPin(Display_DB7_GPIO_Port, Display_DB7_Pin);
 8001eb4:	2120      	movs	r1, #32
 8001eb6:	4817      	ldr	r0, [pc, #92]	; (8001f14 <check_busy_flag+0xa4>)
 8001eb8:	f001 fb6a 	bl	8003590 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	75fb      	strb	r3, [r7, #23]
	lcd44780_E_0;
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec6:	4813      	ldr	r0, [pc, #76]	; (8001f14 <check_busy_flag+0xa4>)
 8001ec8:	f001 fb79 	bl	80035be <HAL_GPIO_WritePin>
	lcd44780_E_1;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed2:	4810      	ldr	r0, [pc, #64]	; (8001f14 <check_busy_flag+0xa4>)
 8001ed4:	f001 fb73 	bl	80035be <HAL_GPIO_WritePin>
	lcd44780_E_0;
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ede:	480d      	ldr	r0, [pc, #52]	; (8001f14 <check_busy_flag+0xa4>)
 8001ee0:	f001 fb6d 	bl	80035be <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ee8:	2311      	movs	r3, #17
 8001eea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4806      	ldr	r0, [pc, #24]	; (8001f14 <check_busy_flag+0xa4>)
 8001efa:	f001 f9c9 	bl	8003290 <HAL_GPIO_Init>
	lcd44780_RW_0;
 8001efe:	2200      	movs	r2, #0
 8001f00:	2102      	movs	r1, #2
 8001f02:	4804      	ldr	r0, [pc, #16]	; (8001f14 <check_busy_flag+0xa4>)
 8001f04:	f001 fb5b 	bl	80035be <HAL_GPIO_WritePin>
	return status;
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40020400 	.word	0x40020400

08001f18 <init_LCD>:

void init_LCD() //инициализация ЖК
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_Power_GPIO_Port, Display_Power_Pin, GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f22:	4847      	ldr	r0, [pc, #284]	; (8002040 <init_LCD+0x128>)
 8001f24:	f001 fb4b 	bl	80035be <HAL_GPIO_WritePin>
  //Выводы в 0
    HAL_GPIO_WritePin(Display_RS_GPIO_Port, Display_RS_Pin, GPIO_PIN_SET);//  PIN_OFF(PIN_RS); !!!
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4844      	ldr	r0, [pc, #272]	; (8002040 <init_LCD+0x128>)
 8001f2e:	f001 fb46 	bl	80035be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f38:	4841      	ldr	r0, [pc, #260]	; (8002040 <init_LCD+0x128>)
 8001f3a:	f001 fb40 	bl	80035be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2104      	movs	r1, #4
 8001f42:	483f      	ldr	r0, [pc, #252]	; (8002040 <init_LCD+0x128>)
 8001f44:	f001 fb3b 	bl	80035be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2108      	movs	r1, #8
 8001f4c:	483c      	ldr	r0, [pc, #240]	; (8002040 <init_LCD+0x128>)
 8001f4e:	f001 fb36 	bl	80035be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2110      	movs	r1, #16
 8001f56:	483a      	ldr	r0, [pc, #232]	; (8002040 <init_LCD+0x128>)
 8001f58:	f001 fb31 	bl	80035be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2120      	movs	r1, #32
 8001f60:	4837      	ldr	r0, [pc, #220]	; (8002040 <init_LCD+0x128>)
 8001f62:	f001 fb2c 	bl	80035be <HAL_GPIO_WritePin>

	//Ждем включения ЖКИ
    HAL_Delay(500);
 8001f66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f6a:	f001 f821 	bl	8002fb0 <HAL_Delay>
    lcd44780_RS_0;
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2101      	movs	r1, #1
 8001f72:	4833      	ldr	r0, [pc, #204]	; (8002040 <init_LCD+0x128>)
 8001f74:	f001 fb23 	bl	80035be <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	4830      	ldr	r0, [pc, #192]	; (8002040 <init_LCD+0x128>)
 8001f7e:	f001 fb1e 	bl	80035be <HAL_GPIO_WritePin>
	send_nibble(0x02);
 8001f82:	2002      	movs	r0, #2
 8001f84:	f7ff ff10 	bl	8001da8 <send_nibble>
	send_nibble(0x02);
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f7ff ff0d 	bl	8001da8 <send_nibble>
	send_nibble(0x08);// N=1 F=0
 8001f8e:	2008      	movs	r0, #8
 8001f90:	f7ff ff0a 	bl	8001da8 <send_nibble>

	while(check_busy_flag());
 8001f94:	bf00      	nop
 8001f96:	f7ff ff6b 	bl	8001e70 <check_busy_flag>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1fa      	bne.n	8001f96 <init_LCD+0x7e>

	send_nibble(0x00);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff ff01 	bl	8001da8 <send_nibble>
	send_nibble(0x0E);// D=1 C=1 B=0
 8001fa6:	200e      	movs	r0, #14
 8001fa8:	f7ff fefe 	bl	8001da8 <send_nibble>

	while(check_busy_flag());
 8001fac:	bf00      	nop
 8001fae:	f7ff ff5f 	bl	8001e70 <check_busy_flag>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1fa      	bne.n	8001fae <init_LCD+0x96>
	send_nibble(0x00);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7ff fef5 	bl	8001da8 <send_nibble>
	send_nibble(0x01);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7ff fef2 	bl	8001da8 <send_nibble>

	while(check_busy_flag());
 8001fc4:	bf00      	nop
 8001fc6:	f7ff ff53 	bl	8001e70 <check_busy_flag>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1fa      	bne.n	8001fc6 <init_LCD+0xae>
	send_nibble(0x00);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff fee9 	bl	8001da8 <send_nibble>
	send_nibble(0x06); // I/D=1  S/H=0
 8001fd6:	2006      	movs	r0, #6
 8001fd8:	f7ff fee6 	bl	8001da8 <send_nibble>
//	send_nibble(0x04); // I/D=0  S/H=0

	while(check_busy_flag());
 8001fdc:	bf00      	nop
 8001fde:	f7ff ff47 	bl	8001e70 <check_busy_flag>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1fa      	bne.n	8001fde <init_LCD+0xc6>

    lcd44780_RS_0;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	2101      	movs	r1, #1
 8001fec:	4814      	ldr	r0, [pc, #80]	; (8002040 <init_LCD+0x128>)
 8001fee:	f001 fae6 	bl	80035be <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	4812      	ldr	r0, [pc, #72]	; (8002040 <init_LCD+0x128>)
 8001ff8:	f001 fae1 	bl	80035be <HAL_GPIO_WritePin>
	send_nibble(0x02); // DL=0
 8001ffc:	2002      	movs	r0, #2
 8001ffe:	f7ff fed3 	bl	8001da8 <send_nibble>
	send_nibble(0x0A);// N=1 F=0 FT1=1 FT0=0
 8002002:	200a      	movs	r0, #10
 8002004:	f7ff fed0 	bl	8001da8 <send_nibble>
	while(check_busy_flag());
 8002008:	bf00      	nop
 800200a:	f7ff ff31 	bl	8001e70 <check_busy_flag>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1fa      	bne.n	800200a <init_LCD+0xf2>


    send_data(0x1F); //переключение в графику
 8002014:	201f      	movs	r0, #31
 8002016:	f7ff ff15 	bl	8001e44 <send_data>
    while(check_busy_flag());
 800201a:	bf00      	nop
 800201c:	f7ff ff28 	bl	8001e70 <check_busy_flag>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1fa      	bne.n	800201c <init_LCD+0x104>

    send_data(0x01); //очистили от мусора ОЗУ (т.с. что clear())
 8002026:	2001      	movs	r0, #1
 8002028:	f7ff ff0c 	bl	8001e44 <send_data>
    while(check_busy_flag());
 800202c:	bf00      	nop
 800202e:	f7ff ff1f 	bl	8001e70 <check_busy_flag>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1fa      	bne.n	800202e <init_LCD+0x116>

}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40020400 	.word	0x40020400

08002044 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205a:	4b6d      	ldr	r3, [pc, #436]	; (8002210 <MX_GPIO_Init+0x1cc>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a6c      	ldr	r2, [pc, #432]	; (8002210 <MX_GPIO_Init+0x1cc>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	61d3      	str	r3, [r2, #28]
 8002066:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <MX_GPIO_Init+0x1cc>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002072:	4b67      	ldr	r3, [pc, #412]	; (8002210 <MX_GPIO_Init+0x1cc>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a66      	ldr	r2, [pc, #408]	; (8002210 <MX_GPIO_Init+0x1cc>)
 8002078:	f043 0320 	orr.w	r3, r3, #32
 800207c:	61d3      	str	r3, [r2, #28]
 800207e:	4b64      	ldr	r3, [pc, #400]	; (8002210 <MX_GPIO_Init+0x1cc>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <MX_GPIO_Init+0x1cc>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a60      	ldr	r2, [pc, #384]	; (8002210 <MX_GPIO_Init+0x1cc>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	61d3      	str	r3, [r2, #28]
 8002096:	4b5e      	ldr	r3, [pc, #376]	; (8002210 <MX_GPIO_Init+0x1cc>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	4b5b      	ldr	r3, [pc, #364]	; (8002210 <MX_GPIO_Init+0x1cc>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a5a      	ldr	r2, [pc, #360]	; (8002210 <MX_GPIO_Init+0x1cc>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	61d3      	str	r3, [r2, #28]
 80020ae:	4b58      	ldr	r3, [pc, #352]	; (8002210 <MX_GPIO_Init+0x1cc>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COUNT_EN_Pin|Relay_cs_Pin, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80020c0:	4854      	ldr	r0, [pc, #336]	; (8002214 <MX_GPIO_Init+0x1d0>)
 80020c2:	f001 fa7c 	bl	80035be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 80020c6:	2201      	movs	r2, #1
 80020c8:	f248 011f 	movw	r1, #32799	; 0x801f
 80020cc:	4852      	ldr	r0, [pc, #328]	; (8002218 <MX_GPIO_Init+0x1d4>)
 80020ce:	f001 fa76 	bl	80035be <HAL_GPIO_WritePin>
                          |DAC_SYNC_Pin|DAC_CLR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RS_Pin|Display_Power_Pin, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	f640 0101 	movw	r1, #2049	; 0x801
 80020d8:	4850      	ldr	r0, [pc, #320]	; (800221c <MX_GPIO_Init+0x1d8>)
 80020da:	f001 fa70 	bl	80035be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|SPI2_NSS_Pin
 80020de:	2201      	movs	r2, #1
 80020e0:	f241 413e 	movw	r1, #5182	; 0x143e
 80020e4:	484d      	ldr	r0, [pc, #308]	; (800221c <MX_GPIO_Init+0x1d8>)
 80020e6:	f001 fa6a 	bl	80035be <HAL_GPIO_WritePin>
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Start_button_Pin;
 80020ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Start_button_GPIO_Port, &GPIO_InitStruct);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	4844      	ldr	r0, [pc, #272]	; (8002214 <MX_GPIO_Init+0x1d0>)
 8002102:	f001 f8c5 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = COUNT_EN_Pin|Relay_cs_Pin;
 8002106:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210c:	2301      	movs	r3, #1
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	483d      	ldr	r0, [pc, #244]	; (8002214 <MX_GPIO_Init+0x1d0>)
 8002120:	f001 f8b6 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 8002124:	f248 030f 	movw	r3, #32783	; 0x800f
 8002128:	617b      	str	r3, [r7, #20]
                          |DAC_CLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4836      	ldr	r0, [pc, #216]	; (8002218 <MX_GPIO_Init+0x1d4>)
 800213e:	f001 f8a7 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8002142:	2310      	movs	r3, #16
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214a:	2301      	movs	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	482f      	ldr	r0, [pc, #188]	; (8002218 <MX_GPIO_Init+0x1d4>)
 800215a:	f001 f899 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Display_RS_Pin;
 800215e:	2301      	movs	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002162:	2301      	movs	r3, #1
 8002164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216a:	2302      	movs	r3, #2
 800216c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Display_RS_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	4829      	ldr	r0, [pc, #164]	; (800221c <MX_GPIO_Init+0x1d8>)
 8002176:	f001 f88b 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|Display_Power_Pin
 800217a:	f640 433e 	movw	r3, #3134	; 0xc3e
 800217e:	617b      	str	r3, [r7, #20]
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002180:	2311      	movs	r3, #17
 8002182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	4822      	ldr	r0, [pc, #136]	; (800221c <MX_GPIO_Init+0x1d8>)
 8002194:	f001 f87c 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219e:	2301      	movs	r3, #1
 80021a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	481a      	ldr	r0, [pc, #104]	; (800221c <MX_GPIO_Init+0x1d8>)
 80021b2:	f001 f86d 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encode_Push_Pin;
 80021b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c2:	2301      	movs	r3, #1
 80021c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encode_Push_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4812      	ldr	r0, [pc, #72]	; (8002218 <MX_GPIO_Init+0x1d4>)
 80021ce:	f001 f85f 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CPU_IRQ_Pin;
 80021d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CPU_IRQ_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4619      	mov	r1, r3
 80021e8:	480b      	ldr	r0, [pc, #44]	; (8002218 <MX_GPIO_Init+0x1d4>)
 80021ea:	f001 f851 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 80021ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_GPIO_Init+0x1d4>)
 8002204:	f001 f844 	bl	8003290 <HAL_GPIO_Init>

}
 8002208:	bf00      	nop
 800220a:	3728      	adds	r7, #40	; 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40023800 	.word	0x40023800
 8002214:	40020800 	.word	0x40020800
 8002218:	40020000 	.word	0x40020000
 800221c:	40020400 	.word	0x40020400

08002220 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <MX_I2C1_Init+0x50>)
 8002226:	4a13      	ldr	r2, [pc, #76]	; (8002274 <MX_I2C1_Init+0x54>)
 8002228:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <MX_I2C1_Init+0x50>)
 800222c:	4a12      	ldr	r2, [pc, #72]	; (8002278 <MX_I2C1_Init+0x58>)
 800222e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <MX_I2C1_Init+0x50>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <MX_I2C1_Init+0x50>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <MX_I2C1_Init+0x50>)
 800223e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002242:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <MX_I2C1_Init+0x50>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_I2C1_Init+0x50>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <MX_I2C1_Init+0x50>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <MX_I2C1_Init+0x50>)
 8002258:	2200      	movs	r2, #0
 800225a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800225c:	4804      	ldr	r0, [pc, #16]	; (8002270 <MX_I2C1_Init+0x50>)
 800225e:	f001 f9c7 	bl	80035f0 <HAL_I2C_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002268:	f000 fa1a 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2000078c 	.word	0x2000078c
 8002274:	40005400 	.word	0x40005400
 8002278:	000186a0 	.word	0x000186a0

0800227c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_I2C_MspInit+0x7c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d128      	bne.n	80022f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	61d3      	str	r3, [r2, #28]
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TMP117_SCL_Pin|TMP117_SDA_Pin;
 80022b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022bc:	2312      	movs	r3, #18
 80022be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022c8:	2304      	movs	r3, #4
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4619      	mov	r1, r3
 80022d2:	480b      	ldr	r0, [pc, #44]	; (8002300 <HAL_I2C_MspInit+0x84>)
 80022d4:	f000 ffdc 	bl	8003290 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022e2:	6253      	str	r3, [r2, #36]	; 0x24
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40005400 	.word	0x40005400
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020400 	.word	0x40020400

08002304 <USB_rx_command_buffer_push_refd>:

FunctionalState Need_update_DDS=0;
FunctionalState Ramp_dac_step_complete=0;

// #define CRICBUF_CLEAN_ON_POP
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4804      	ldr	r0, [pc, #16]	; (8002320 <USB_rx_command_buffer_push_refd+0x1c>)
 8002310:	f7ff f89a 	bl	8001448 <__circ_gbuf_push>
 8002314:	4603      	mov	r3, r0
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000334 	.word	0x20000334

08002324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b093      	sub	sp, #76	; 0x4c
 8002328:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 800232a:	4b76      	ldr	r3, [pc, #472]	; (8002504 <main+0x1e0>)
 800232c:	2200      	movs	r2, #0
 800232e:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 8002330:	4b74      	ldr	r3, [pc, #464]	; (8002504 <main+0x1e0>)
 8002332:	2208      	movs	r2, #8
 8002334:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8002336:	4b73      	ldr	r3, [pc, #460]	; (8002504 <main+0x1e0>)
 8002338:	2201      	movs	r2, #1
 800233a:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 800233c:	4b71      	ldr	r3, [pc, #452]	; (8002504 <main+0x1e0>)
 800233e:	2201      	movs	r2, #1
 8002340:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 8002342:	4b70      	ldr	r3, [pc, #448]	; (8002504 <main+0x1e0>)
 8002344:	2200      	movs	r2, #0
 8002346:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8002348:	4b6e      	ldr	r3, [pc, #440]	; (8002504 <main+0x1e0>)
 800234a:	2200      	movs	r2, #0
 800234c:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 800234e:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <main+0x1e0>)
 8002350:	2200      	movs	r2, #0
 8002352:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 8002354:	4b6b      	ldr	r3, [pc, #428]	; (8002504 <main+0x1e0>)
 8002356:	2200      	movs	r2, #0
 8002358:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 800235a:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <main+0x1e0>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]

	DAC_target_speed=0.001; //  V/s
 8002360:	4b69      	ldr	r3, [pc, #420]	; (8002508 <main+0x1e4>)
 8002362:	4a6a      	ldr	r2, [pc, #424]	; (800250c <main+0x1e8>)
 8002364:	601a      	str	r2, [r3, #0]
	DAC_code=0x7FFFF;
 8002366:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <main+0x1ec>)
 8002368:	4a6a      	ldr	r2, [pc, #424]	; (8002514 <main+0x1f0>)
 800236a:	601a      	str	r2, [r3, #0]
	DAC_code_direction=0;
 800236c:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <main+0x1f4>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002372:	f000 fdae 	bl	8002ed2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002376:	f000 f8ed 	bl	8002554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800237a:	f7ff fe63 	bl	8002044 <MX_GPIO_Init>
  MX_SPI1_Init();
 800237e:	f000 f995 	bl	80026ac <MX_SPI1_Init>
  MX_SPI2_Init();
 8002382:	f000 f9c7 	bl	8002714 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8002386:	f009 fb3b 	bl	800ba00 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800238a:	f000 fbd3 	bl	8002b34 <MX_TIM3_Init>
  MX_TIM4_Init();
 800238e:	f000 fc1f 	bl	8002bd0 <MX_TIM4_Init>
  MX_I2C1_Init();
 8002392:	f7ff ff45 	bl	8002220 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  init_LCD();
 8002396:	f7ff fdbf 	bl	8001f18 <init_LCD>


  Relay_control(1,0); // x1 mode
 800239a:	2100      	movs	r1, #0
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff f8a1 	bl	80014e4 <Relay_control>
  Relay_control(2,1); // x2/x4 mode
 80023a2:	2101      	movs	r1, #1
 80023a4:	2002      	movs	r0, #2
 80023a6:	f7ff f89d 	bl	80014e4 <Relay_control>
  Relay_control(3,1); // Output Enable
 80023aa:	2101      	movs	r1, #1
 80023ac:	2003      	movs	r0, #3
 80023ae:	f7ff f899 	bl	80014e4 <Relay_control>

  TMP117_Initialization(hi2c1);
 80023b2:	4c5a      	ldr	r4, [pc, #360]	; (800251c <main+0x1f8>)
 80023b4:	4668      	mov	r0, sp
 80023b6:	f104 0310 	add.w	r3, r4, #16
 80023ba:	2244      	movs	r2, #68	; 0x44
 80023bc:	4619      	mov	r1, r3
 80023be:	f00a f83f 	bl	800c440 <memcpy>
 80023c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023c6:	f000 fd2d 	bl	8002e24 <TMP117_Initialization>

	HAL_Delay(500); //WarmUP
 80023ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ce:	f000 fdef 	bl	8002fb0 <HAL_Delay>

	cal_DAC_up_voltage=binary_to_float(EEPROM_read(0x00)); // Read top voltage calibration from EEPROM in uV value
 80023d2:	2000      	movs	r0, #0
 80023d4:	f000 f94a 	bl	800266c <EEPROM_read>
 80023d8:	4603      	mov	r3, r0
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f932 	bl	8002644 <binary_to_float>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4a4f      	ldr	r2, [pc, #316]	; (8002520 <main+0x1fc>)
 80023e4:	6013      	str	r3, [r2, #0]
	cal_DAC_down_voltage=binary_to_float(EEPROM_read(0x08)); // Read top voltage calibration from EEPROM in uV value
 80023e6:	2008      	movs	r0, #8
 80023e8:	f000 f940 	bl	800266c <EEPROM_read>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f928 	bl	8002644 <binary_to_float>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4a4b      	ldr	r2, [pc, #300]	; (8002524 <main+0x200>)
 80023f8:	6013      	str	r3, [r2, #0]

	corr_coeff_1=binary_to_float(EEPROM_read(0x10));
 80023fa:	2010      	movs	r0, #16
 80023fc:	f000 f936 	bl	800266c <EEPROM_read>
 8002400:	4603      	mov	r3, r0
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f91e 	bl	8002644 <binary_to_float>
 8002408:	4603      	mov	r3, r0
 800240a:	4a47      	ldr	r2, [pc, #284]	; (8002528 <main+0x204>)
 800240c:	6013      	str	r3, [r2, #0]
	corr_coeff_2=binary_to_float(EEPROM_read(0x18));
 800240e:	2018      	movs	r0, #24
 8002410:	f000 f92c 	bl	800266c <EEPROM_read>
 8002414:	4603      	mov	r3, r0
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f914 	bl	8002644 <binary_to_float>
 800241c:	4603      	mov	r3, r0
 800241e:	4a43      	ldr	r2, [pc, #268]	; (800252c <main+0x208>)
 8002420:	6013      	str	r3, [r2, #0]
	corr_coeff_3=binary_to_float(EEPROM_read(0x20));
 8002422:	2020      	movs	r0, #32
 8002424:	f000 f922 	bl	800266c <EEPROM_read>
 8002428:	4603      	mov	r3, r0
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f90a 	bl	8002644 <binary_to_float>
 8002430:	4603      	mov	r3, r0
 8002432:	4a3f      	ldr	r2, [pc, #252]	; (8002530 <main+0x20c>)
 8002434:	6013      	str	r3, [r2, #0]

	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <main+0x1fc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <main+0x200>)
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fb8d 	bl	8000b60 <__aeabi_fsub>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <main+0x210>)
 800244c:	601a      	str	r2, [r3, #0]

	DDS_Init();
 800244e:	f7ff fa9b 	bl	8001988 <DDS_Init>
	HAL_Delay(250); //WarmUP
 8002452:	20fa      	movs	r0, #250	; 0xfa
 8002454:	f000 fdac 	bl	8002fb0 <HAL_Delay>
	DAC_SendInit();
 8002458:	f7ff f958 	bl	800170c <DAC_SendInit>

	//DAC_Write(DAC_code); //Middle
	//DAC_Write(0xFFFFF);
	DAC_Write(0x0);
 800245c:	2000      	movs	r0, #0
 800245e:	f7ff f91b 	bl	8001698 <DAC_Write>

	HAL_Delay(10);
 8002462:	200a      	movs	r0, #10
 8002464:	f000 fda4 	bl	8002fb0 <HAL_Delay>
	CDC_Transmit_FS(clear, strlen((const char *)clear));
 8002468:	4833      	ldr	r0, [pc, #204]	; (8002538 <main+0x214>)
 800246a:	f7fd fe89 	bl	8000180 <strlen>
 800246e:	4603      	mov	r3, r0
 8002470:	b29b      	uxth	r3, r3
 8002472:	4619      	mov	r1, r3
 8002474:	4830      	ldr	r0, [pc, #192]	; (8002538 <main+0x214>)
 8002476:	f009 fbc7 	bl	800bc08 <CDC_Transmit_FS>
	HAL_Delay(10);
 800247a:	200a      	movs	r0, #10
 800247c:	f000 fd98 	bl	8002fb0 <HAL_Delay>

	HAL_TIM_Base_Start_IT(&htim3);
 8002480:	482e      	ldr	r0, [pc, #184]	; (800253c <main+0x218>)
 8002482:	f004 fe1d 	bl	80070c0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		  while(1)
		  {
		  tmpx=TMP117_get_Temperature(hi2c1);
 8002486:	4c25      	ldr	r4, [pc, #148]	; (800251c <main+0x1f8>)
 8002488:	4668      	mov	r0, sp
 800248a:	f104 0310 	add.w	r3, r4, #16
 800248e:	2244      	movs	r2, #68	; 0x44
 8002490:	4619      	mov	r1, r3
 8002492:	f009 ffd5 	bl	800c440 <memcpy>
 8002496:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800249a:	f000 fc57 	bl	8002d4c <TMP117_get_Temperature>
 800249e:	4603      	mov	r3, r0
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	4b27      	ldr	r3, [pc, #156]	; (8002540 <main+0x21c>)
 80024a4:	801a      	strh	r2, [r3, #0]
		  temperature=tmpx*0.0078125;
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <main+0x21c>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd ffc2 	bl	8000434 <__aeabi_i2d>
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024b8:	f7fe f826 	bl	8000508 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe faf8 	bl	8000ab8 <__aeabi_d2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4a1e      	ldr	r2, [pc, #120]	; (8002544 <main+0x220>)
 80024cc:	6013      	str	r3, [r2, #0]
		  sprintf(lcd_buf,"Temp: %.2f",temperature);
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <main+0x220>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd ffc0 	bl	8000458 <__aeabi_f2d>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	491a      	ldr	r1, [pc, #104]	; (8002548 <main+0x224>)
 80024de:	481b      	ldr	r0, [pc, #108]	; (800254c <main+0x228>)
 80024e0:	f00a fc24 	bl	800cd2c <siprintf>
          LcdString(1, 1);
 80024e4:	2101      	movs	r1, #1
 80024e6:	2001      	movs	r0, #1
 80024e8:	f7ff fc18 	bl	8001d1c <LcdString>

		  sprintf(lcd_buf,"Hello world!");
 80024ec:	4918      	ldr	r1, [pc, #96]	; (8002550 <main+0x22c>)
 80024ee:	4817      	ldr	r0, [pc, #92]	; (800254c <main+0x228>)
 80024f0:	f00a fc1c 	bl	800cd2c <siprintf>
          LcdString(1, 2);
 80024f4:	2102      	movs	r1, #2
 80024f6:	2001      	movs	r0, #1
 80024f8:	f7ff fc10 	bl	8001d1c <LcdString>
          LcdUpdate();
 80024fc:	f7ff fb50 	bl	8001ba0 <LcdUpdate>
		  {
 8002500:	e7c1      	b.n	8002486 <main+0x162>
 8002502:	bf00      	nop
 8002504:	20000804 	.word	0x20000804
 8002508:	20000818 	.word	0x20000818
 800250c:	3a83126f 	.word	0x3a83126f
 8002510:	2000081c 	.word	0x2000081c
 8002514:	0007ffff 	.word	0x0007ffff
 8002518:	20000820 	.word	0x20000820
 800251c:	2000078c 	.word	0x2000078c
 8002520:	200007e8 	.word	0x200007e8
 8002524:	200007ec 	.word	0x200007ec
 8002528:	200007f0 	.word	0x200007f0
 800252c:	200007f4 	.word	0x200007f4
 8002530:	200007f8 	.word	0x200007f8
 8002534:	200007e4 	.word	0x200007e4
 8002538:	20000320 	.word	0x20000320
 800253c:	200008f8 	.word	0x200008f8
 8002540:	200007e0 	.word	0x200007e0
 8002544:	20000328 	.word	0x20000328
 8002548:	0800f220 	.word	0x0800f220
 800254c:	200006ac 	.word	0x200006ac
 8002550:	0800f22c 	.word	0x0800f22c

08002554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b092      	sub	sp, #72	; 0x48
 8002558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	2234      	movs	r2, #52	; 0x34
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f009 ff7a 	bl	800c45c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002568:	463b      	mov	r3, r7
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <SystemClock_Config+0x94>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800257e:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <SystemClock_Config+0x94>)
 8002580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002584:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002586:	2301      	movs	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800258a:	2301      	movs	r3, #1
 800258c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800258e:	2302      	movs	r3, #2
 8002590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002598:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800259c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800259e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80025a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 fbe1 	bl	8005d70 <HAL_RCC_OscConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80025b4:	f000 f874 	bl	80026a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b8:	230f      	movs	r3, #15
 80025ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025bc:	2303      	movs	r3, #3
 80025be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025cc:	463b      	mov	r3, r7
 80025ce:	2101      	movs	r1, #1
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 fefd 	bl	80063d0 <HAL_RCC_ClockConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80025dc:	f000 f860 	bl	80026a0 <Error_Handler>
  }
}
 80025e0:	bf00      	nop
 80025e2:	3748      	adds	r7, #72	; 0x48
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40007000 	.word	0x40007000

080025ec <HAL_TIM_PeriodElapsedCallback>:
//==============================================================================================


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim3 )
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d102      	bne.n	8002602 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Need_update_DDS=1;
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
	}
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	200008f8 	.word	0x200008f8
 8002610:	20000821 	.word	0x20000821

08002614 <Write_to_circ_buffer>:
	}
}

//==============================================================================================
void Write_to_circ_buffer(uint8_t Buf)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 800261e:	1dfb      	adds	r3, r7, #7
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fe6f 	bl	8002304 <USB_rx_command_buffer_push_refd>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <Write_to_circ_buffer+0x24>
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <Write_to_circ_buffer+0x2c>)
 800262e:	2200      	movs	r2, #0
 8002630:	809a      	strh	r2, [r3, #4]
 8002632:	4b03      	ldr	r3, [pc, #12]	; (8002640 <Write_to_circ_buffer+0x2c>)
 8002634:	2200      	movs	r2, #0
 8002636:	80da      	strh	r2, [r3, #6]
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000334 	.word	0x20000334

08002644 <binary_to_float>:
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC push_options
#pragma GCC optimize ("O0")

float binary_to_float(uint32_t a)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	    int * p;
	    float out=0;
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]

	    p = &out;
 8002652:	f107 0308 	add.w	r3, r7, #8
 8002656:	60fb      	str	r3, [r7, #12]
	    (*p)=a;
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	601a      	str	r2, [r3, #0]
	    return out;
 800265e:	68bb      	ldr	r3, [r7, #8]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
	...

0800266c <EEPROM_read>:
	return;
}

//==============================================================================================
uint32_t EEPROM_read(uint32_t address_of_read)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	uint32_t Address;

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800267a:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 800267e:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a06      	ldr	r2, [pc, #24]	; (800269c <EEPROM_read+0x30>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d301      	bcc.n	800268c <EEPROM_read+0x20>
	{
		return 0x00;
 8002688:	2300      	movs	r3, #0
 800268a:	e001      	b.n	8002690 <EEPROM_read+0x24>
	}
	return *(__IO uint32_t *) Address;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	08082800 	.word	0x08082800

080026a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a4:	b672      	cpsid	i
}
 80026a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80026a8:	e7fe      	b.n	80026a8 <Error_Handler+0x8>
	...

080026ac <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <MX_SPI1_Init+0x60>)
 80026b2:	4a17      	ldr	r2, [pc, #92]	; (8002710 <MX_SPI1_Init+0x64>)
 80026b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <MX_SPI1_Init+0x60>)
 80026b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <MX_SPI1_Init+0x60>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <MX_SPI1_Init+0x60>)
 80026c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <MX_SPI1_Init+0x60>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <MX_SPI1_Init+0x60>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <MX_SPI1_Init+0x60>)
 80026da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <MX_SPI1_Init+0x60>)
 80026e2:	2218      	movs	r2, #24
 80026e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <MX_SPI1_Init+0x60>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <MX_SPI1_Init+0x60>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <MX_SPI1_Init+0x60>)
 80026f4:	220a      	movs	r2, #10
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026f8:	4804      	ldr	r0, [pc, #16]	; (800270c <MX_SPI1_Init+0x60>)
 80026fa:	f004 f91b 	bl	8006934 <HAL_SPI_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8002704:	f7ff ffcc 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000844 	.word	0x20000844
 8002710:	40013000 	.word	0x40013000

08002714 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002718:	4b16      	ldr	r3, [pc, #88]	; (8002774 <MX_SPI2_Init+0x60>)
 800271a:	4a17      	ldr	r2, [pc, #92]	; (8002778 <MX_SPI2_Init+0x64>)
 800271c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <MX_SPI2_Init+0x60>)
 8002720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002724:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <MX_SPI2_Init+0x60>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_SPI2_Init+0x60>)
 800272e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002732:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <MX_SPI2_Init+0x60>)
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_SPI2_Init+0x60>)
 800273c:	2201      	movs	r2, #1
 800273e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_SPI2_Init+0x60>)
 8002742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002746:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <MX_SPI2_Init+0x60>)
 800274a:	2218      	movs	r2, #24
 800274c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <MX_SPI2_Init+0x60>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <MX_SPI2_Init+0x60>)
 8002756:	2200      	movs	r2, #0
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <MX_SPI2_Init+0x60>)
 800275c:	220a      	movs	r2, #10
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002760:	4804      	ldr	r0, [pc, #16]	; (8002774 <MX_SPI2_Init+0x60>)
 8002762:	f004 f8e7 	bl	8006934 <HAL_SPI_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 800276c:	f7ff ff98 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	2000089c 	.word	0x2000089c
 8002778:	40003800 	.word	0x40003800

0800277c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a32      	ldr	r2, [pc, #200]	; (8002864 <HAL_SPI_MspInit+0xe8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d130      	bne.n	8002800 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800279e:	4b32      	ldr	r3, [pc, #200]	; (8002868 <HAL_SPI_MspInit+0xec>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a31      	ldr	r2, [pc, #196]	; (8002868 <HAL_SPI_MspInit+0xec>)
 80027a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027a8:	6213      	str	r3, [r2, #32]
 80027aa:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <HAL_SPI_MspInit+0xec>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <HAL_SPI_MspInit+0xec>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <HAL_SPI_MspInit+0xec>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	61d3      	str	r3, [r2, #28]
 80027c2:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_SPI_MspInit+0xec>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027ce:	23e0      	movs	r3, #224	; 0xe0
 80027d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027de:	2305      	movs	r3, #5
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e2:	f107 031c 	add.w	r3, r7, #28
 80027e6:	4619      	mov	r1, r3
 80027e8:	4820      	ldr	r0, [pc, #128]	; (800286c <HAL_SPI_MspInit+0xf0>)
 80027ea:	f000 fd51 	bl	8003290 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2101      	movs	r1, #1
 80027f2:	2023      	movs	r0, #35	; 0x23
 80027f4:	f000 fcd5 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80027f8:	2023      	movs	r0, #35	; 0x23
 80027fa:	f000 fcee 	bl	80031da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80027fe:	e02d      	b.n	800285c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <HAL_SPI_MspInit+0xf4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d128      	bne.n	800285c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_SPI_MspInit+0xec>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	4a16      	ldr	r2, [pc, #88]	; (8002868 <HAL_SPI_MspInit+0xec>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002814:	6253      	str	r3, [r2, #36]	; 0x24
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_SPI_MspInit+0xec>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_SPI_MspInit+0xec>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_SPI_MspInit+0xec>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	61d3      	str	r3, [r2, #28]
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_SPI_MspInit+0xec>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800283a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800284c:	2305      	movs	r3, #5
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	4807      	ldr	r0, [pc, #28]	; (8002874 <HAL_SPI_MspInit+0xf8>)
 8002858:	f000 fd1a 	bl	8003290 <HAL_GPIO_Init>
}
 800285c:	bf00      	nop
 800285e:	3730      	adds	r7, #48	; 0x30
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40013000 	.word	0x40013000
 8002868:	40023800 	.word	0x40023800
 800286c:	40020000 	.word	0x40020000
 8002870:	40003800 	.word	0x40003800
 8002874:	40020400 	.word	0x40020400

08002878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <HAL_MspInit+0xa0>)
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	4a25      	ldr	r2, [pc, #148]	; (8002918 <HAL_MspInit+0xa0>)
 8002884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002888:	6253      	str	r3, [r2, #36]	; 0x24
 800288a:	4b23      	ldr	r3, [pc, #140]	; (8002918 <HAL_MspInit+0xa0>)
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_MspInit+0xa0>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <HAL_MspInit+0xa0>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6213      	str	r3, [r2, #32]
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_MspInit+0xa0>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <HAL_MspInit+0xa0>)
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_MspInit+0xa0>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6253      	str	r3, [r2, #36]	; 0x24
 80028ba:	4b17      	ldr	r3, [pc, #92]	; (8002918 <HAL_MspInit+0xa0>)
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2101      	movs	r1, #1
 80028ca:	f06f 000b 	mvn.w	r0, #11
 80028ce:	f000 fc68 	bl	80031a2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2101      	movs	r1, #1
 80028d6:	f06f 000a 	mvn.w	r0, #10
 80028da:	f000 fc62 	bl	80031a2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2101      	movs	r1, #1
 80028e2:	f06f 0009 	mvn.w	r0, #9
 80028e6:	f000 fc5c 	bl	80031a2 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2101      	movs	r1, #1
 80028ee:	f06f 0004 	mvn.w	r0, #4
 80028f2:	f000 fc56 	bl	80031a2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2101      	movs	r1, #1
 80028fa:	f06f 0003 	mvn.w	r0, #3
 80028fe:	f000 fc50 	bl	80031a2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2101      	movs	r1, #1
 8002906:	f06f 0001 	mvn.w	r0, #1
 800290a:	f000 fc4a 	bl	80031a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800

0800291c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <NMI_Handler+0x4>

08002922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <HardFault_Handler+0x4>

08002928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <MemManage_Handler+0x4>

0800292e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002932:	e7fe      	b.n	8002932 <BusFault_Handler+0x4>

08002934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <UsageFault_Handler+0x4>

0800293a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002962:	f000 fb09 	bl	8002f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <USB_LP_IRQHandler+0x10>)
 8002972:	f001 fed5 	bl	8004720 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000fa4 	.word	0x20000fa4

08002980 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <TIM3_IRQHandler+0x10>)
 8002986:	f004 fc8b 	bl	80072a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200008f8 	.word	0x200008f8

08002994 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <SPI1_IRQHandler+0x10>)
 800299a:	f004 f983 	bl	8006ca4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000844 	.word	0x20000844

080029a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
	return 1;
 80029ac:	2301      	movs	r3, #1
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <_kill>:

int _kill(int pid, int sig)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029c0:	f009 fd14 	bl	800c3ec <__errno>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2216      	movs	r2, #22
 80029c8:	601a      	str	r2, [r3, #0]
	return -1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_exit>:

void _exit (int status)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029de:	f04f 31ff 	mov.w	r1, #4294967295
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffe7 	bl	80029b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029e8:	e7fe      	b.n	80029e8 <_exit+0x12>

080029ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	e00a      	b.n	8002a12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029fc:	f3af 8000 	nop.w
 8002a00:	4601      	mov	r1, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	60ba      	str	r2, [r7, #8]
 8002a08:	b2ca      	uxtb	r2, r1
 8002a0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	dbf0      	blt.n	80029fc <_read+0x12>
	}

return len;
 8002a1a:	687b      	ldr	r3, [r7, #4]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e009      	b.n	8002a4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	60ba      	str	r2, [r7, #8]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3301      	adds	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	dbf1      	blt.n	8002a36 <_write+0x12>
	}
	return len;
 8002a52:	687b      	ldr	r3, [r7, #4]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_close>:

int _close(int file)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	return -1;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a82:	605a      	str	r2, [r3, #4]
	return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <_isatty>:

int _isatty(int file)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	return 1;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
	return 0;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <_sbrk+0x5c>)
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <_sbrk+0x60>)
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <_sbrk+0x64>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <_sbrk+0x64>)
 8002ada:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <_sbrk+0x68>)
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <_sbrk+0x64>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d207      	bcs.n	8002afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aec:	f009 fc7e 	bl	800c3ec <__errno>
 8002af0:	4603      	mov	r3, r0
 8002af2:	220c      	movs	r2, #12
 8002af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
 8002afa:	e009      	b.n	8002b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <_sbrk+0x64>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <_sbrk+0x64>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <_sbrk+0x64>)
 8002b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20004000 	.word	0x20004000
 8002b1c:	00000400 	.word	0x00000400
 8002b20:	200008f4 	.word	0x200008f4
 8002b24:	200014c0 	.word	0x200014c0

08002b28 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3a:	f107 0308 	add.w	r3, r7, #8
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b48:	463b      	mov	r3, r7
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b50:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b52:	4a1e      	ldr	r2, [pc, #120]	; (8002bcc <MX_TIM3_Init+0x98>)
 8002b54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 -1;
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b58:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002b5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 -1;
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b66:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b78:	4813      	ldr	r0, [pc, #76]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b7a:	f004 fa61 	bl	8007040 <HAL_TIM_Base_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002b84:	f7ff fd8c 	bl	80026a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b8e:	f107 0308 	add.w	r3, r7, #8
 8002b92:	4619      	mov	r1, r3
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b96:	f004 fc5f 	bl	8007458 <HAL_TIM_ConfigClockSource>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ba0:	f7ff fd7e 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bac:	463b      	mov	r3, r7
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002bb2:	f004 fe31 	bl	8007818 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002bbc:	f7ff fd70 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200008f8 	.word	0x200008f8
 8002bcc:	40000400 	.word	0x40000400

08002bd0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	; 0x30
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f009 fc3c 	bl	800c45c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bec:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <MX_TIM4_Init+0xa0>)
 8002bee:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <MX_TIM4_Init+0xa4>)
 8002bf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <MX_TIM4_Init+0xa0>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <MX_TIM4_Init+0xa0>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <MX_TIM4_Init+0xa0>)
 8002c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <MX_TIM4_Init+0xa0>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <MX_TIM4_Init+0xa0>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c12:	2301      	movs	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c26:	2300      	movs	r3, #0
 8002c28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	480c      	ldr	r0, [pc, #48]	; (8002c70 <MX_TIM4_Init+0xa0>)
 8002c3e:	f004 fa91 	bl	8007164 <HAL_TIM_Encoder_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002c48:	f7ff fd2a 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	4619      	mov	r1, r3
 8002c58:	4805      	ldr	r0, [pc, #20]	; (8002c70 <MX_TIM4_Init+0xa0>)
 8002c5a:	f004 fddd 	bl	8007818 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002c64:	f7ff fd1c 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c68:	bf00      	nop
 8002c6a:	3730      	adds	r7, #48	; 0x30
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000938 	.word	0x20000938
 8002c74:	40000800 	.word	0x40000800

08002c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <HAL_TIM_Base_MspInit+0x44>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d113      	bne.n	8002cb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_TIM_Base_MspInit+0x48>)
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <HAL_TIM_Base_MspInit+0x48>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6253      	str	r3, [r2, #36]	; 0x24
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_TIM_Base_MspInit+0x48>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	201d      	movs	r0, #29
 8002ca8:	f000 fa7b 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cac:	201d      	movs	r0, #29
 8002cae:	f000 fa94 	bl	80031da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40023800 	.word	0x40023800

08002cc4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d127      	bne.n	8002d36 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8002cec:	f043 0304 	orr.w	r3, r3, #4
 8002cf0:	6253      	str	r3, [r2, #36]	; 0x24
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	61d3      	str	r3, [r2, #28]
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x80>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encode_A_Pin|Encode_B_Pin;
 8002d16:	23c0      	movs	r3, #192	; 0xc0
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d26:	2302      	movs	r3, #2
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4805      	ldr	r0, [pc, #20]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x84>)
 8002d32:	f000 faad 	bl	8003290 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d36:	bf00      	nop
 8002d38:	3728      	adds	r7, #40	; 0x28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020400 	.word	0x40020400

08002d4c <TMP117_get_Temperature>:
   @Description   Function gives to us ambient temperature
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  Float
 */
uint16_t TMP117_get_Temperature             (I2C_HandleTypeDef i2c)
{
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af02      	add	r7, sp, #8
 8002d54:	f107 0c10 	add.w	ip, r7, #16
 8002d58:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      int16_t tmpx=0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	80fb      	strh	r3, [r7, #6]
      buf[0]=TMP117_TemperatureRegister;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <TMP117_get_Temperature+0x78>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]

//      buf[0]=TMP117_ConfigurationRegister;

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,1,100);
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <TMP117_get_Temperature+0x7c>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b299      	uxth	r1, r3
 8002d6c:	2364      	movs	r3, #100	; 0x64
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2301      	movs	r3, #1
 8002d72:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <TMP117_get_Temperature+0x78>)
 8002d74:	f107 0010 	add.w	r0, r7, #16
 8002d78:	f000 fd7e 	bl	8003878 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f000 f917 	bl	8002fb0 <HAL_Delay>
      HAL_I2C_Master_Receive(&i2c,TMP117_DeviceID,buf,2,1000);
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <TMP117_get_Temperature+0x7c>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b299      	uxth	r1, r3
 8002d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	2302      	movs	r3, #2
 8002d90:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <TMP117_get_Temperature+0x78>)
 8002d92:	f107 0010 	add.w	r0, r7, #16
 8002d96:	f000 fe6d 	bl	8003a74 <HAL_I2C_Master_Receive>
      tmpx=buf[0];
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <TMP117_get_Temperature+0x78>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	80fb      	strh	r3, [r7, #6]
      tmpx<<=8;
 8002da0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	80fb      	strh	r3, [r7, #6]
      tmpx|=buf[1];
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <TMP117_get_Temperature+0x78>)
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	b21a      	sxth	r2, r3
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	80fb      	strh	r3, [r7, #6]

      return tmpx;
 8002db4:	88fb      	ldrh	r3, [r7, #6]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dc0:	b004      	add	sp, #16
 8002dc2:	4770      	bx	lr
 8002dc4:	20000978 	.word	0x20000978
 8002dc8:	20000344 	.word	0x20000344

08002dcc <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second)
{
 8002dcc:	b084      	sub	sp, #16
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af02      	add	r7, sp, #8
 8002dd4:	f107 0c08 	add.w	ip, r7, #8
 8002dd8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <TMP117_set_Configuration+0x50>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 8002de2:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <TMP117_set_Configuration+0x50>)
 8002de4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002de8:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 8002dea:	4a0c      	ldr	r2, [pc, #48]	; (8002e1c <TMP117_set_Configuration+0x50>)
 8002dec:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002df0:	7093      	strb	r3, [r2, #2]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,2,100);
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <TMP117_set_Configuration+0x54>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b299      	uxth	r1, r3
 8002df8:	2364      	movs	r3, #100	; 0x64
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <TMP117_set_Configuration+0x50>)
 8002e00:	f107 0008 	add.w	r0, r7, #8
 8002e04:	f000 fd38 	bl	8003878 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f000 f8d1 	bl	8002fb0 <HAL_Delay>
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e16:	b004      	add	sp, #16
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	2000097c 	.word	0x2000097c
 8002e20:	20000344 	.word	0x20000344

08002e24 <TMP117_Initialization>:
   @Description   Custom Parameters for Sensor
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  void
 */
void TMP117_Initialization               (I2C_HandleTypeDef i2c)
{
 8002e24:	b084      	sub	sp, #16
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b094      	sub	sp, #80	; 0x50
 8002e2a:	af14      	add	r7, sp, #80	; 0x50
 8002e2c:	f107 0c08 	add.w	ip, r7, #8
 8002e30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    TMP117_set_Configuration(i2c,0x02,0x22);
 8002e34:	2322      	movs	r3, #34	; 0x22
 8002e36:	9312      	str	r3, [sp, #72]	; 0x48
 8002e38:	2302      	movs	r3, #2
 8002e3a:	9311      	str	r3, [sp, #68]	; 0x44
 8002e3c:	4668      	mov	r0, sp
 8002e3e:	f107 0318 	add.w	r3, r7, #24
 8002e42:	2244      	movs	r2, #68	; 0x44
 8002e44:	4619      	mov	r1, r3
 8002e46:	f009 fafb 	bl	800c440 <memcpy>
 8002e4a:	f107 0308 	add.w	r3, r7, #8
 8002e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e50:	f7ff ffbc 	bl	8002dcc <TMP117_set_Configuration>
	HAL_Delay(100); // wait 1ms
 8002e54:	2064      	movs	r0, #100	; 0x64
 8002e56:	f000 f8ab 	bl	8002fb0 <HAL_Delay>
	TMP117_set_Configuration(i2c,0x02,0x20);
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	9312      	str	r3, [sp, #72]	; 0x48
 8002e5e:	2302      	movs	r3, #2
 8002e60:	9311      	str	r3, [sp, #68]	; 0x44
 8002e62:	4668      	mov	r0, sp
 8002e64:	f107 0318 	add.w	r3, r7, #24
 8002e68:	2244      	movs	r2, #68	; 0x44
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f009 fae8 	bl	800c440 <memcpy>
 8002e70:	f107 0308 	add.w	r3, r7, #8
 8002e74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e76:	f7ff ffa9 	bl	8002dcc <TMP117_set_Configuration>
//      TMP117_set_Temperature_Offset(i2c,0x00,0x00); //Default Value
//      TMP117_set_LowLimit(i2c,0x12,0x80);           //Set 10 Celcius
//      TMP117_set_HighLimit(i2c,0x51,0x20);          //Set 40 Celcius
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e82:	b004      	add	sp, #16
 8002e84:	4770      	bx	lr
	...

08002e88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e88:	480c      	ldr	r0, [pc, #48]	; (8002ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e8a:	490d      	ldr	r1, [pc, #52]	; (8002ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e90:	e002      	b.n	8002e98 <LoopCopyDataInit>

08002e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e96:	3304      	adds	r3, #4

08002e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e9c:	d3f9      	bcc.n	8002e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ea0:	4c0a      	ldr	r4, [pc, #40]	; (8002ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea4:	e001      	b.n	8002eaa <LoopFillZerobss>

08002ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea8:	3204      	adds	r2, #4

08002eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eac:	d3fb      	bcc.n	8002ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002eae:	f7ff fe3b 	bl	8002b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eb2:	f009 faa1 	bl	800c3f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eb6:	f7ff fa35 	bl	8002324 <main>
  bx lr
 8002eba:	4770      	bx	lr
  ldr r0, =_sdata
 8002ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec0:	20000690 	.word	0x20000690
  ldr r2, =_sidata
 8002ec4:	0800f738 	.word	0x0800f738
  ldr r2, =_sbss
 8002ec8:	20000690 	.word	0x20000690
  ldr r4, =_ebss
 8002ecc:	200014c0 	.word	0x200014c0

08002ed0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ed0:	e7fe      	b.n	8002ed0 <ADC1_IRQHandler>

08002ed2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f000 f955 	bl	800318c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ee2:	200f      	movs	r0, #15
 8002ee4:	f000 f80e 	bl	8002f04 <HAL_InitTick>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	71fb      	strb	r3, [r7, #7]
 8002ef2:	e001      	b.n	8002ef8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ef4:	f7ff fcc0 	bl	8002878 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <HAL_InitTick+0x68>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d022      	beq.n	8002f5e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <HAL_InitTick+0x6c>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_InitTick+0x68>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f962 	bl	80031f6 <HAL_SYSTICK_Config>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10f      	bne.n	8002f58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	d809      	bhi.n	8002f52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	f04f 30ff 	mov.w	r0, #4294967295
 8002f46:	f000 f92c 	bl	80031a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <HAL_InitTick+0x70>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e007      	b.n	8002f62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	e004      	b.n	8002f62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e001      	b.n	8002f62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000034c 	.word	0x2000034c
 8002f70:	20000340 	.word	0x20000340
 8002f74:	20000348 	.word	0x20000348

08002f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_IncTick+0x1c>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_IncTick+0x20>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4413      	add	r3, r2
 8002f86:	4a03      	ldr	r2, [pc, #12]	; (8002f94 <HAL_IncTick+0x1c>)
 8002f88:	6013      	str	r3, [r2, #0]
}
 8002f8a:	bf00      	nop
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000980 	.word	0x20000980
 8002f98:	2000034c 	.word	0x2000034c

08002f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b02      	ldr	r3, [pc, #8]	; (8002fac <HAL_GetTick+0x10>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	20000980 	.word	0x20000980

08002fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff fff0 	bl	8002f9c <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d004      	beq.n	8002fd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_Delay+0x40>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fd4:	bf00      	nop
 8002fd6:	f7ff ffe1 	bl	8002f9c <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d8f7      	bhi.n	8002fd6 <HAL_Delay+0x26>
  {
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	2000034c 	.word	0x2000034c

08002ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003010:	4013      	ands	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800301c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <__NVIC_GetPriorityGrouping+0x18>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0307 	and.w	r3, r3, #7
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0b      	blt.n	8003082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4906      	ldr	r1, [pc, #24]	; (800308c <__NVIC_EnableIRQ+0x34>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003158:	d301      	bcc.n	800315e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315a:	2301      	movs	r3, #1
 800315c:	e00f      	b.n	800317e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <SysTick_Config+0x40>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003166:	210f      	movs	r1, #15
 8003168:	f04f 30ff 	mov.w	r0, #4294967295
 800316c:	f7ff ff90 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <SysTick_Config+0x40>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003176:	4b04      	ldr	r3, [pc, #16]	; (8003188 <SysTick_Config+0x40>)
 8003178:	2207      	movs	r2, #7
 800317a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	e000e010 	.word	0xe000e010

0800318c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff2d 	bl	8002ff4 <__NVIC_SetPriorityGrouping>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b4:	f7ff ff42 	bl	800303c <__NVIC_GetPriorityGrouping>
 80031b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	6978      	ldr	r0, [r7, #20]
 80031c0:	f7ff ff90 	bl	80030e4 <NVIC_EncodePriority>
 80031c4:	4602      	mov	r2, r0
 80031c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff5f 	bl	8003090 <__NVIC_SetPriority>
}
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff35 	bl	8003058 <__NVIC_EnableIRQ>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff ffa2 	bl	8003148 <SysTick_Config>
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d005      	beq.n	8003232 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2204      	movs	r2, #4
 800322a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	e029      	b.n	8003286 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 020e 	bic.w	r2, r2, #14
 8003240:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 021c 	and.w	r2, r3, #28
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	2101      	movs	r1, #1
 8003260:	fa01 f202 	lsl.w	r2, r1, r2
 8003264:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
    }
  }
  return status;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80032a6:	e154      	b.n	8003552 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8146 	beq.w	800354c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d005      	beq.n	80032d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d130      	bne.n	800333a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800330e:	2201      	movs	r2, #1
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	f003 0201 	and.w	r2, r3, #1
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b03      	cmp	r3, #3
 8003344:	d017      	beq.n	8003376 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	2203      	movs	r2, #3
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d123      	bne.n	80033ca <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	08da      	lsrs	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3208      	adds	r2, #8
 800338a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	220f      	movs	r2, #15
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	08da      	lsrs	r2, r3, #3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3208      	adds	r2, #8
 80033c4:	6939      	ldr	r1, [r7, #16]
 80033c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	2203      	movs	r2, #3
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0203 	and.w	r2, r3, #3
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80a0 	beq.w	800354c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340c:	4b58      	ldr	r3, [pc, #352]	; (8003570 <HAL_GPIO_Init+0x2e0>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a57      	ldr	r2, [pc, #348]	; (8003570 <HAL_GPIO_Init+0x2e0>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6213      	str	r3, [r2, #32]
 8003418:	4b55      	ldr	r3, [pc, #340]	; (8003570 <HAL_GPIO_Init+0x2e0>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003424:	4a53      	ldr	r2, [pc, #332]	; (8003574 <HAL_GPIO_Init+0x2e4>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3302      	adds	r3, #2
 800342c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003430:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	220f      	movs	r2, #15
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a4b      	ldr	r2, [pc, #300]	; (8003578 <HAL_GPIO_Init+0x2e8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d019      	beq.n	8003484 <HAL_GPIO_Init+0x1f4>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a4a      	ldr	r2, [pc, #296]	; (800357c <HAL_GPIO_Init+0x2ec>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <HAL_GPIO_Init+0x1f0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a49      	ldr	r2, [pc, #292]	; (8003580 <HAL_GPIO_Init+0x2f0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00d      	beq.n	800347c <HAL_GPIO_Init+0x1ec>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a48      	ldr	r2, [pc, #288]	; (8003584 <HAL_GPIO_Init+0x2f4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d007      	beq.n	8003478 <HAL_GPIO_Init+0x1e8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a47      	ldr	r2, [pc, #284]	; (8003588 <HAL_GPIO_Init+0x2f8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_GPIO_Init+0x1e4>
 8003470:	2304      	movs	r3, #4
 8003472:	e008      	b.n	8003486 <HAL_GPIO_Init+0x1f6>
 8003474:	2305      	movs	r3, #5
 8003476:	e006      	b.n	8003486 <HAL_GPIO_Init+0x1f6>
 8003478:	2303      	movs	r3, #3
 800347a:	e004      	b.n	8003486 <HAL_GPIO_Init+0x1f6>
 800347c:	2302      	movs	r3, #2
 800347e:	e002      	b.n	8003486 <HAL_GPIO_Init+0x1f6>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_GPIO_Init+0x1f6>
 8003484:	2300      	movs	r3, #0
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	f002 0203 	and.w	r2, r2, #3
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	4093      	lsls	r3, r2
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003496:	4937      	ldr	r1, [pc, #220]	; (8003574 <HAL_GPIO_Init+0x2e4>)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034a4:	4b39      	ldr	r3, [pc, #228]	; (800358c <HAL_GPIO_Init+0x2fc>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034c8:	4a30      	ldr	r2, [pc, #192]	; (800358c <HAL_GPIO_Init+0x2fc>)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034ce:	4b2f      	ldr	r3, [pc, #188]	; (800358c <HAL_GPIO_Init+0x2fc>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034f2:	4a26      	ldr	r2, [pc, #152]	; (800358c <HAL_GPIO_Init+0x2fc>)
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034f8:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_GPIO_Init+0x2fc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	43db      	mvns	r3, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800351c:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_GPIO_Init+0x2fc>)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003522:	4b1a      	ldr	r3, [pc, #104]	; (800358c <HAL_GPIO_Init+0x2fc>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	43db      	mvns	r3, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003546:	4a11      	ldr	r2, [pc, #68]	; (800358c <HAL_GPIO_Init+0x2fc>)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3301      	adds	r3, #1
 8003550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	f47f aea3 	bne.w	80032a8 <HAL_GPIO_Init+0x18>
  }
}
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	40010000 	.word	0x40010000
 8003578:	40020000 	.word	0x40020000
 800357c:	40020400 	.word	0x40020400
 8003580:	40020800 	.word	0x40020800
 8003584:	40020c00 	.word	0x40020c00
 8003588:	40021000 	.word	0x40021000
 800358c:	40010400 	.word	0x40010400

08003590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
 80035ac:	e001      	b.n	80035b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr

080035be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	807b      	strh	r3, [r7, #2]
 80035ca:	4613      	mov	r3, r2
 80035cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035ce:	787b      	ldrb	r3, [r7, #1]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d4:	887a      	ldrh	r2, [r7, #2]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80035da:	e003      	b.n	80035e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	041a      	lsls	r2, r3, #16
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e12b      	b.n	800385a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe fe30 	bl	800227c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	; 0x24
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003654:	f003 f8fa 	bl	800684c <HAL_RCC_GetPCLK1Freq>
 8003658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4a81      	ldr	r2, [pc, #516]	; (8003864 <HAL_I2C_Init+0x274>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d807      	bhi.n	8003674 <HAL_I2C_Init+0x84>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a80      	ldr	r2, [pc, #512]	; (8003868 <HAL_I2C_Init+0x278>)
 8003668:	4293      	cmp	r3, r2
 800366a:	bf94      	ite	ls
 800366c:	2301      	movls	r3, #1
 800366e:	2300      	movhi	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e006      	b.n	8003682 <HAL_I2C_Init+0x92>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a7d      	ldr	r2, [pc, #500]	; (800386c <HAL_I2C_Init+0x27c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	bf94      	ite	ls
 800367c:	2301      	movls	r3, #1
 800367e:	2300      	movhi	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0e7      	b.n	800385a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a78      	ldr	r2, [pc, #480]	; (8003870 <HAL_I2C_Init+0x280>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	0c9b      	lsrs	r3, r3, #18
 8003694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4a6a      	ldr	r2, [pc, #424]	; (8003864 <HAL_I2C_Init+0x274>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d802      	bhi.n	80036c4 <HAL_I2C_Init+0xd4>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	3301      	adds	r3, #1
 80036c2:	e009      	b.n	80036d8 <HAL_I2C_Init+0xe8>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	4a69      	ldr	r2, [pc, #420]	; (8003874 <HAL_I2C_Init+0x284>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	3301      	adds	r3, #1
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	430b      	orrs	r3, r1
 80036de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	495c      	ldr	r1, [pc, #368]	; (8003864 <HAL_I2C_Init+0x274>)
 80036f4:	428b      	cmp	r3, r1
 80036f6:	d819      	bhi.n	800372c <HAL_I2C_Init+0x13c>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e59      	subs	r1, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	fbb1 f3f3 	udiv	r3, r1, r3
 8003706:	1c59      	adds	r1, r3, #1
 8003708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800370c:	400b      	ands	r3, r1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_I2C_Init+0x138>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1e59      	subs	r1, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003726:	e051      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 8003728:	2304      	movs	r3, #4
 800372a:	e04f      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d111      	bne.n	8003758 <HAL_I2C_Init+0x168>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e58      	subs	r0, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	440b      	add	r3, r1
 8003742:	fbb0 f3f3 	udiv	r3, r0, r3
 8003746:	3301      	adds	r3, #1
 8003748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e012      	b.n	800377e <HAL_I2C_Init+0x18e>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e58      	subs	r0, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	0099      	lsls	r1, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Init+0x196>
 8003782:	2301      	movs	r3, #1
 8003784:	e022      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10e      	bne.n	80037ac <HAL_I2C_Init+0x1bc>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e58      	subs	r0, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	440b      	add	r3, r1
 800379c:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037aa:	e00f      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e58      	subs	r0, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	0099      	lsls	r1, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	6809      	ldr	r1, [r1, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6911      	ldr	r1, [r2, #16]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68d2      	ldr	r2, [r2, #12]
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	430b      	orrs	r3, r1
 800380e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	000186a0 	.word	0x000186a0
 8003868:	001e847f 	.word	0x001e847f
 800386c:	003d08ff 	.word	0x003d08ff
 8003870:	431bde83 	.word	0x431bde83
 8003874:	10624dd3 	.word	0x10624dd3

08003878 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	461a      	mov	r2, r3
 8003884:	460b      	mov	r3, r1
 8003886:	817b      	strh	r3, [r7, #10]
 8003888:	4613      	mov	r3, r2
 800388a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800388c:	f7ff fb86 	bl	8002f9c <HAL_GetTick>
 8003890:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b20      	cmp	r3, #32
 800389c:	f040 80e0 	bne.w	8003a60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	2319      	movs	r3, #25
 80038a6:	2201      	movs	r2, #1
 80038a8:	4970      	ldr	r1, [pc, #448]	; (8003a6c <HAL_I2C_Master_Transmit+0x1f4>)
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fc58 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
 80038b8:	e0d3      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_I2C_Master_Transmit+0x50>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e0cc      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d007      	beq.n	80038ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2221      	movs	r2, #33	; 0x21
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2210      	movs	r2, #16
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	893a      	ldrh	r2, [r7, #8]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a50      	ldr	r2, [pc, #320]	; (8003a70 <HAL_I2C_Master_Transmit+0x1f8>)
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003930:	8979      	ldrh	r1, [r7, #10]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fac2 	bl	8003ec0 <I2C_MasterRequestWrite>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e08d      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800395c:	e066      	b.n	8003a2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	6a39      	ldr	r1, [r7, #32]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fcd2 	bl	800430c <I2C_WaitOnTXEFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b04      	cmp	r3, #4
 8003974:	d107      	bne.n	8003986 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003984:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e06b      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	781a      	ldrb	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d11b      	bne.n	8003a00 <HAL_I2C_Master_Transmit+0x188>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d017      	beq.n	8003a00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	781a      	ldrb	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	6a39      	ldr	r1, [r7, #32]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fcc2 	bl	800438e <I2C_WaitOnBTFFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00d      	beq.n	8003a2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d107      	bne.n	8003a28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e01a      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d194      	bne.n	800395e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	00100002 	.word	0x00100002
 8003a70:	ffff0000 	.word	0xffff0000

08003a74 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08c      	sub	sp, #48	; 0x30
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	460b      	mov	r3, r1
 8003a82:	817b      	strh	r3, [r7, #10]
 8003a84:	4613      	mov	r3, r2
 8003a86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a88:	f7ff fa88 	bl	8002f9c <HAL_GetTick>
 8003a8c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	f040 820b 	bne.w	8003eb2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2319      	movs	r3, #25
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	497c      	ldr	r1, [pc, #496]	; (8003c98 <HAL_I2C_Master_Receive+0x224>)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fb5a 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e1fe      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_I2C_Master_Receive+0x50>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e1f7      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x440>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d007      	beq.n	8003aea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2222      	movs	r2, #34	; 0x22
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2210      	movs	r2, #16
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	893a      	ldrh	r2, [r7, #8]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a5c      	ldr	r2, [pc, #368]	; (8003c9c <HAL_I2C_Master_Receive+0x228>)
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b2c:	8979      	ldrh	r1, [r7, #10]
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fa46 	bl	8003fc4 <I2C_MasterRequestRead>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e1b8      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d113      	bne.n	8003b72 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	623b      	str	r3, [r7, #32]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	623b      	str	r3, [r7, #32]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e18c      	b.n	8003e8c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d11b      	bne.n	8003bb2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	e16c      	b.n	8003e8c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d11b      	bne.n	8003bf2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	e14c      	b.n	8003e8c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c18:	e138      	b.n	8003e8c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	f200 80f1 	bhi.w	8003e06 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d123      	bne.n	8003c74 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fbed 	bl	8004410 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e139      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c72:	e10b      	b.n	8003e8c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d14e      	bne.n	8003d1a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	2200      	movs	r2, #0
 8003c84:	4906      	ldr	r1, [pc, #24]	; (8003ca0 <HAL_I2C_Master_Receive+0x22c>)
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fa6a 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e10e      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x440>
 8003c96:	bf00      	nop
 8003c98:	00100002 	.word	0x00100002
 8003c9c:	ffff0000 	.word	0xffff0000
 8003ca0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d18:	e0b8      	b.n	8003e8c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	2200      	movs	r2, #0
 8003d22:	4966      	ldr	r1, [pc, #408]	; (8003ebc <HAL_I2C_Master_Receive+0x448>)
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fa1b 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0bf      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	494f      	ldr	r1, [pc, #316]	; (8003ebc <HAL_I2C_Master_Receive+0x448>)
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f9ed 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e091      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e04:	e042      	b.n	8003e8c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fb00 	bl	8004410 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e04c      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d118      	bne.n	8003e8c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f47f aec2 	bne.w	8003c1a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e000      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
  }
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3728      	adds	r7, #40	; 0x28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	00010004 	.word	0x00010004

08003ec0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d006      	beq.n	8003eea <I2C_MasterRequestWrite+0x2a>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d003      	beq.n	8003eea <I2C_MasterRequestWrite+0x2a>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee8:	d108      	bne.n	8003efc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e00b      	b.n	8003f14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	2b12      	cmp	r3, #18
 8003f02:	d107      	bne.n	8003f14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f91d 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00d      	beq.n	8003f48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3a:	d103      	bne.n	8003f44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e035      	b.n	8003fb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f50:	d108      	bne.n	8003f64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f60:	611a      	str	r2, [r3, #16]
 8003f62:	e01b      	b.n	8003f9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f64:	897b      	ldrh	r3, [r7, #10]
 8003f66:	11db      	asrs	r3, r3, #7
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f003 0306 	and.w	r3, r3, #6
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f063 030f 	orn	r3, r3, #15
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	490e      	ldr	r1, [pc, #56]	; (8003fbc <I2C_MasterRequestWrite+0xfc>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f943 	bl	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e010      	b.n	8003fb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4907      	ldr	r1, [pc, #28]	; (8003fc0 <I2C_MasterRequestWrite+0x100>)
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f933 	bl	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	00010008 	.word	0x00010008
 8003fc0:	00010002 	.word	0x00010002

08003fc4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d006      	beq.n	8003ffe <I2C_MasterRequestRead+0x3a>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d003      	beq.n	8003ffe <I2C_MasterRequestRead+0x3a>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ffc:	d108      	bne.n	8004010 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e00b      	b.n	8004028 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	2b11      	cmp	r3, #17
 8004016:	d107      	bne.n	8004028 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004026:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f893 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00d      	beq.n	800405c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404e:	d103      	bne.n	8004058 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004056:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e079      	b.n	8004150 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004064:	d108      	bne.n	8004078 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004066:	897b      	ldrh	r3, [r7, #10]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	b2da      	uxtb	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	611a      	str	r2, [r3, #16]
 8004076:	e05f      	b.n	8004138 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004078:	897b      	ldrh	r3, [r7, #10]
 800407a:	11db      	asrs	r3, r3, #7
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f003 0306 	and.w	r3, r3, #6
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f063 030f 	orn	r3, r3, #15
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4930      	ldr	r1, [pc, #192]	; (8004158 <I2C_MasterRequestRead+0x194>)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f8b9 	bl	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e054      	b.n	8004150 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040a6:	897b      	ldrh	r3, [r7, #10]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4929      	ldr	r1, [pc, #164]	; (800415c <I2C_MasterRequestRead+0x198>)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f8a9 	bl	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e044      	b.n	8004150 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f831 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004112:	d103      	bne.n	800411c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e017      	b.n	8004150 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004120:	897b      	ldrh	r3, [r7, #10]
 8004122:	11db      	asrs	r3, r3, #7
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f003 0306 	and.w	r3, r3, #6
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f063 030e 	orn	r3, r3, #14
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4907      	ldr	r1, [pc, #28]	; (800415c <I2C_MasterRequestRead+0x198>)
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f865 	bl	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	00010008 	.word	0x00010008
 800415c:	00010002 	.word	0x00010002

08004160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004170:	e025      	b.n	80041be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d021      	beq.n	80041be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417a:	f7fe ff0f 	bl	8002f9c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <I2C_WaitOnFlagUntilTimeout+0x30>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d116      	bne.n	80041be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f043 0220 	orr.w	r2, r3, #32
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e023      	b.n	8004206 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d10d      	bne.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	43da      	mvns	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4013      	ands	r3, r2
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bf0c      	ite	eq
 80041da:	2301      	moveq	r3, #1
 80041dc:	2300      	movne	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	461a      	mov	r2, r3
 80041e2:	e00c      	b.n	80041fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	43da      	mvns	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4013      	ands	r3, r2
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bf0c      	ite	eq
 80041f6:	2301      	moveq	r3, #1
 80041f8:	2300      	movne	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	429a      	cmp	r2, r3
 8004202:	d0b6      	beq.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800421c:	e051      	b.n	80042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422c:	d123      	bne.n	8004276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004246:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f043 0204 	orr.w	r2, r3, #4
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e046      	b.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d021      	beq.n	80042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427e:	f7fe fe8d 	bl	8002f9c <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	429a      	cmp	r2, r3
 800428c:	d302      	bcc.n	8004294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d116      	bne.n	80042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e020      	b.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d10c      	bne.n	80042e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	43da      	mvns	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4013      	ands	r3, r2
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bf14      	ite	ne
 80042de:	2301      	movne	r3, #1
 80042e0:	2300      	moveq	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	e00b      	b.n	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4013      	ands	r3, r2
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf14      	ite	ne
 80042f8:	2301      	movne	r3, #1
 80042fa:	2300      	moveq	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d18d      	bne.n	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004318:	e02d      	b.n	8004376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f8ce 	bl	80044bc <I2C_IsAcknowledgeFailed>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e02d      	b.n	8004386 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d021      	beq.n	8004376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fe fe33 	bl	8002f9c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d116      	bne.n	8004376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f043 0220 	orr.w	r2, r3, #32
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e007      	b.n	8004386 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	2b80      	cmp	r3, #128	; 0x80
 8004382:	d1ca      	bne.n	800431a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800439a:	e02d      	b.n	80043f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f88d 	bl	80044bc <I2C_IsAcknowledgeFailed>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e02d      	b.n	8004408 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d021      	beq.n	80043f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b4:	f7fe fdf2 	bl	8002f9c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d116      	bne.n	80043f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e007      	b.n	8004408 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d1ca      	bne.n	800439c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800441c:	e042      	b.n	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b10      	cmp	r3, #16
 800442a:	d119      	bne.n	8004460 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0210 	mvn.w	r2, #16
 8004434:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e029      	b.n	80044b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004460:	f7fe fd9c 	bl	8002f9c <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	429a      	cmp	r2, r3
 800446e:	d302      	bcc.n	8004476 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e007      	b.n	80044b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d1b5      	bne.n	800441e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d2:	d11b      	bne.n	800450c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	f043 0204 	orr.w	r2, r3, #4
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451a:	b08b      	sub	sp, #44	; 0x2c
 800451c:	af06      	add	r7, sp, #24
 800451e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e0d0      	b.n	80046cc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f007 fcb4 	bl	800beac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2203      	movs	r2, #3
 8004548:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f003 f9d5 	bl	8007900 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
 800455a:	e04c      	b.n	80045f6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	440b      	add	r3, r1
 800456c:	3301      	adds	r3, #1
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	440b      	add	r3, r1
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004586:	7bfa      	ldrb	r2, [r7, #15]
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	b298      	uxth	r0, r3
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	440b      	add	r3, r1
 8004598:	3336      	adds	r3, #54	; 0x36
 800459a:	4602      	mov	r2, r0
 800459c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	440b      	add	r3, r1
 80045ae:	3303      	adds	r3, #3
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045b4:	7bfa      	ldrb	r2, [r7, #15]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	440b      	add	r3, r1
 80045c2:	3338      	adds	r3, #56	; 0x38
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045c8:	7bfa      	ldrb	r2, [r7, #15]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	440b      	add	r3, r1
 80045d6:	333c      	adds	r3, #60	; 0x3c
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045dc:	7bfa      	ldrb	r2, [r7, #15]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	440b      	add	r3, r1
 80045ea:	3340      	adds	r3, #64	; 0x40
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	3301      	adds	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d3ad      	bcc.n	800455c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	73fb      	strb	r3, [r7, #15]
 8004604:	e044      	b.n	8004690 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	440b      	add	r3, r1
 8004614:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	440b      	add	r3, r1
 800462a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004632:	7bfa      	ldrb	r2, [r7, #15]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	440b      	add	r3, r1
 8004640:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	440b      	add	r3, r1
 8004656:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800465e:	7bfa      	ldrb	r2, [r7, #15]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	440b      	add	r3, r1
 800466c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	440b      	add	r3, r1
 8004682:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	3301      	adds	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d3b5      	bcc.n	8004606 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	687e      	ldr	r6, [r7, #4]
 80046a2:	466d      	mov	r5, sp
 80046a4:	f106 0410 	add.w	r4, r6, #16
 80046a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	602b      	str	r3, [r5, #0]
 80046b0:	1d33      	adds	r3, r6, #4
 80046b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046b4:	6838      	ldr	r0, [r7, #0]
 80046b6:	f003 f93d 	bl	8007934 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_PCD_Start+0x16>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e016      	b.n	8004718 <HAL_PCD_Start+0x44>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f003 f8ec 	bl	80078d4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80046fc:	2101      	movs	r1, #1
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f007 fbb6 	bl	800be70 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f005 fdd1 	bl	800a2b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f005 fdc9 	bl	800a2c4 <USB_ReadInterrupts>
 8004732:	4603      	mov	r3, r0
 8004734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473c:	d102      	bne.n	8004744 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 faf5 	bl	8004d2e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f005 fdbb 	bl	800a2c4 <USB_ReadInterrupts>
 800474e:	4603      	mov	r3, r0
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004758:	d112      	bne.n	8004780 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476c:	b292      	uxth	r2, r2
 800476e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f007 fc15 	bl	800bfa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004778:	2100      	movs	r1, #0
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f8c7 	bl	800490e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f005 fd9d 	bl	800a2c4 <USB_ReadInterrupts>
 800478a:	4603      	mov	r3, r0
 800478c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004794:	d10b      	bne.n	80047ae <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800479e:	b29a      	uxth	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047a8:	b292      	uxth	r2, r2
 80047aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f005 fd86 	bl	800a2c4 <USB_ReadInterrupts>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c2:	d10b      	bne.n	80047dc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047d6:	b292      	uxth	r2, r2
 80047d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f005 fd6f 	bl	800a2c4 <USB_ReadInterrupts>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f0:	d126      	bne.n	8004840 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0204 	bic.w	r2, r2, #4
 8004804:	b292      	uxth	r2, r2
 8004806:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004812:	b29a      	uxth	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0208 	bic.w	r2, r2, #8
 800481c:	b292      	uxth	r2, r2
 800481e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f007 fbf6 	bl	800c014 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004830:	b29a      	uxth	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800483a:	b292      	uxth	r2, r2
 800483c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f005 fd3d 	bl	800a2c4 <USB_ReadInterrupts>
 800484a:	4603      	mov	r3, r0
 800484c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004854:	d126      	bne.n	80048a4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0208 	orr.w	r2, r2, #8
 8004868:	b292      	uxth	r2, r2
 800486a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004880:	b292      	uxth	r2, r2
 8004882:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0204 	orr.w	r2, r2, #4
 8004898:	b292      	uxth	r2, r2
 800489a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f007 fb9e 	bl	800bfe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f005 fd0b 	bl	800a2c4 <USB_ReadInterrupts>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b8:	d10e      	bne.n	80048d8 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048cc:	b292      	uxth	r2, r2
 80048ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f007 fb57 	bl	800bf86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f005 fcf1 	bl	800a2c4 <USB_ReadInterrupts>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ec:	d10b      	bne.n	8004906 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004900:	b292      	uxth	r2, r2
 8004902:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_PCD_SetAddress+0x1a>
 8004924:	2302      	movs	r3, #2
 8004926:	e013      	b.n	8004950 <HAL_PCD_SetAddress+0x42>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f005 fca2 	bl	800a28a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	4608      	mov	r0, r1
 8004962:	4611      	mov	r1, r2
 8004964:	461a      	mov	r2, r3
 8004966:	4603      	mov	r3, r0
 8004968:	70fb      	strb	r3, [r7, #3]
 800496a:	460b      	mov	r3, r1
 800496c:	803b      	strh	r3, [r7, #0]
 800496e:	4613      	mov	r3, r2
 8004970:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800497a:	2b00      	cmp	r3, #0
 800497c:	da0e      	bge.n	800499c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	705a      	strb	r2, [r3, #1]
 800499a:	e00e      	b.n	80049ba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	f003 0207 	and.w	r2, r3, #7
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4413      	add	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049c6:	883a      	ldrh	r2, [r7, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	78ba      	ldrb	r2, [r7, #2]
 80049d0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	785b      	ldrb	r3, [r3, #1]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d004      	beq.n	80049e4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049e4:	78bb      	ldrb	r3, [r7, #2]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d102      	bne.n	80049f0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_PCD_EP_Open+0xa6>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e00e      	b.n	8004a1c <HAL_PCD_EP_Open+0xc4>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68f9      	ldr	r1, [r7, #12]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f002 ffb1 	bl	8007974 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004a1a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da0e      	bge.n	8004a56 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	705a      	strb	r2, [r3, #1]
 8004a54:	e00e      	b.n	8004a74 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	f003 0207 	and.w	r2, r3, #7
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_PCD_EP_Close+0x6a>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e00e      	b.n	8004aac <HAL_PCD_EP_Close+0x88>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68f9      	ldr	r1, [r7, #12]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f003 fad3 	bl	8008048 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ac4:	7afb      	ldrb	r3, [r7, #11]
 8004ac6:	f003 0207 	and.w	r2, r3, #7
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2200      	movs	r2, #0
 8004aec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2200      	movs	r2, #0
 8004af2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004af4:	7afb      	ldrb	r3, [r7, #11]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b00:	7afb      	ldrb	r3, [r7, #11]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6979      	ldr	r1, [r7, #20]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f003 fc85 	bl	8008420 <USB_EPStartXfer>
 8004b16:	e005      	b.n	8004b24 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f003 fc7e 	bl	8008420 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	460b      	mov	r3, r1
 8004b38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	f003 0207 	and.w	r2, r3, #7
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	440b      	add	r3, r1
 8004b4c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004b50:	681b      	ldr	r3, [r3, #0]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b6c:	7afb      	ldrb	r3, [r7, #11]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ba8:	7afb      	ldrb	r3, [r7, #11]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bb4:	7afb      	ldrb	r3, [r7, #11]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6979      	ldr	r1, [r7, #20]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f003 fc2b 	bl	8008420 <USB_EPStartXfer>
 8004bca:	e005      	b.n	8004bd8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6979      	ldr	r1, [r7, #20]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f003 fc24 	bl	8008420 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	460b      	mov	r3, r1
 8004bec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	f003 0207 	and.w	r2, r3, #7
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d901      	bls.n	8004c00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e03e      	b.n	8004c7e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da0e      	bge.n	8004c26 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	705a      	strb	r2, [r3, #1]
 8004c24:	e00c      	b.n	8004c40 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4413      	add	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_PCD_EP_SetStall+0x7e>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e00e      	b.n	8004c7e <HAL_PCD_EP_SetStall+0x9c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f005 fa0e 	bl	800a090 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	f003 020f 	and.w	r2, r3, #15
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d901      	bls.n	8004ca4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e040      	b.n	8004d26 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da0e      	bge.n	8004cca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	705a      	strb	r2, [r3, #1]
 8004cc8:	e00e      	b.n	8004ce8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	f003 0207 	and.w	r2, r3, #7
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	4413      	add	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_PCD_EP_ClrStall+0x82>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e00e      	b.n	8004d26 <HAL_PCD_EP_ClrStall+0xa0>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68f9      	ldr	r1, [r7, #12]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f005 fa0a 	bl	800a130 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b08e      	sub	sp, #56	; 0x38
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d36:	e2ec      	b.n	8005312 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d40:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004d4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f040 8161 	bne.w	800501a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d152      	bne.n	8004e08 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	81fb      	strh	r3, [r7, #14]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	89fb      	ldrh	r3, [r7, #14]
 8004d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3328      	adds	r3, #40	; 0x28
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4413      	add	r3, r2
 8004da0:	3302      	adds	r3, #2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	441a      	add	r2, r3
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f007 f8c2 	bl	800bf52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 829b 	beq.w	8005312 <PCD_EP_ISR_Handler+0x5e4>
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 8296 	bne.w	8005312 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e06:	e284      	b.n	8005312 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d034      	beq.n	8004e8c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4413      	add	r3, r2
 8004e36:	3306      	adds	r3, #6
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f005 fa83 	bl	800a36c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e72:	4013      	ands	r3, r2
 8004e74:	823b      	strh	r3, [r7, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	8a3a      	ldrh	r2, [r7, #16]
 8004e7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e80:	b292      	uxth	r2, r2
 8004e82:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f007 f837 	bl	800bef8 <HAL_PCD_SetupStageCallback>
 8004e8a:	e242      	b.n	8005312 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f280 823e 	bge.w	8005312 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	83bb      	strh	r3, [r7, #28]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	8bba      	ldrh	r2, [r7, #28]
 8004eac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eb0:	b292      	uxth	r2, r2
 8004eb2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3306      	adds	r3, #6
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d019      	beq.n	8004f1c <PCD_EP_ISR_Handler+0x1ee>
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	6959      	ldr	r1, [r3, #20]
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f005 fa33 	bl	800a36c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	441a      	add	r2, r3
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f14:	2100      	movs	r1, #0
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f007 f800 	bl	800bf1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 81f2 	bne.w	8005312 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	4413      	add	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d112      	bne.n	8004f7c <PCD_EP_ISR_Handler+0x24e>
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	e02f      	b.n	8004fdc <PCD_EP_ISR_Handler+0x2ae>
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b3e      	cmp	r3, #62	; 0x3e
 8004f82:	d813      	bhi.n	8004fac <PCD_EP_ISR_Handler+0x27e>
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <PCD_EP_ISR_Handler+0x270>
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	029b      	lsls	r3, r3, #10
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	e017      	b.n	8004fdc <PCD_EP_ISR_Handler+0x2ae>
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d102      	bne.n	8004fc6 <PCD_EP_ISR_Handler+0x298>
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	029b      	lsls	r3, r3, #10
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fec:	827b      	strh	r3, [r7, #18]
 8004fee:	8a7b      	ldrh	r3, [r7, #18]
 8004ff0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ff4:	827b      	strh	r3, [r7, #18]
 8004ff6:	8a7b      	ldrh	r3, [r7, #18]
 8004ff8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ffc:	827b      	strh	r3, [r7, #18]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	8a7b      	ldrh	r3, [r7, #18]
 8005004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005014:	b29b      	uxth	r3, r3
 8005016:	8013      	strh	r3, [r2, #0]
 8005018:	e17b      	b.n	8005312 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800502c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005030:	2b00      	cmp	r3, #0
 8005032:	f280 80ea 	bge.w	800520a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29a      	uxth	r2, r3
 8005048:	f640 738f 	movw	r3, #3983	; 0xf8f
 800504c:	4013      	ands	r3, r2
 800504e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005060:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005064:	b292      	uxth	r2, r2
 8005066:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005068:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	4413      	add	r3, r2
 800507c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	7b1b      	ldrb	r3, [r3, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d122      	bne.n	80050cc <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508e:	b29b      	uxth	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	3306      	adds	r3, #6
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ae:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80050b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 8087 	beq.w	80051c6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	6959      	ldr	r1, [r3, #20]
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	88da      	ldrh	r2, [r3, #6]
 80050c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050c6:	f005 f951 	bl	800a36c <USB_ReadPMA>
 80050ca:	e07c      	b.n	80051c6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	78db      	ldrb	r3, [r3, #3]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d108      	bne.n	80050e6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80050d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050d6:	461a      	mov	r2, r3
 80050d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f927 	bl	800532e <HAL_PCD_EP_DB_Receive>
 80050e0:	4603      	mov	r3, r0
 80050e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050e4:	e06f      	b.n	80051c6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005100:	847b      	strh	r3, [r7, #34]	; 0x22
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	441a      	add	r2, r3
 8005110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005122:	b29b      	uxth	r3, r3
 8005124:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d021      	beq.n	8005184 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005148:	b29b      	uxth	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4413      	add	r3, r2
 8005154:	3302      	adds	r3, #2
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005168:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800516a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800516c:	2b00      	cmp	r3, #0
 800516e:	d02a      	beq.n	80051c6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	6959      	ldr	r1, [r3, #20]
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	891a      	ldrh	r2, [r3, #8]
 800517c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800517e:	f005 f8f5 	bl	800a36c <USB_ReadPMA>
 8005182:	e020      	b.n	80051c6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518c:	b29b      	uxth	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4413      	add	r3, r2
 8005198:	3306      	adds	r3, #6
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80051ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	6959      	ldr	r1, [r3, #20]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	895a      	ldrh	r2, [r3, #10]
 80051c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051c2:	f005 f8d3 	bl	800a36c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051cc:	441a      	add	r2, r3
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	695a      	ldr	r2, [r3, #20]
 80051d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051d8:	441a      	add	r2, r3
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <PCD_EP_ISR_Handler+0x4c2>
 80051e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d206      	bcs.n	80051fe <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f006 fe90 	bl	800bf1c <HAL_PCD_DataOutStageCallback>
 80051fc:	e005      	b.n	800520a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005204:	4618      	mov	r0, r3
 8005206:	f003 f90b 	bl	8008420 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800520a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800520c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005210:	2b00      	cmp	r3, #0
 8005212:	d07e      	beq.n	8005312 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005214:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4413      	add	r3, r2
 8005226:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	843b      	strh	r3, [r7, #32]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	441a      	add	r2, r3
 8005252:	8c3b      	ldrh	r3, [r7, #32]
 8005254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525c:	b29b      	uxth	r3, r3
 800525e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	78db      	ldrb	r3, [r3, #3]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d00c      	beq.n	8005282 <PCD_EP_ISR_Handler+0x554>
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	78db      	ldrb	r3, [r3, #3]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005274:	2b02      	cmp	r3, #2
 8005276:	d146      	bne.n	8005306 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005278:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800527a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527e:	2b00      	cmp	r3, #0
 8005280:	d141      	bne.n	8005306 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528a:	b29b      	uxth	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	3302      	adds	r3, #2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052aa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	8bfb      	ldrh	r3, [r7, #30]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d906      	bls.n	80052c4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	8bfb      	ldrh	r3, [r7, #30]
 80052bc:	1ad2      	subs	r2, r2, r3
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	619a      	str	r2, [r3, #24]
 80052c2:	e002      	b.n	80052ca <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	2200      	movs	r2, #0
 80052c8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f006 fe3a 	bl	800bf52 <HAL_PCD_DataInStageCallback>
 80052de:	e018      	b.n	8005312 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	8bfb      	ldrh	r3, [r7, #30]
 80052e6:	441a      	add	r2, r3
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	8bfb      	ldrh	r3, [r7, #30]
 80052f2:	441a      	add	r2, r3
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052fe:	4618      	mov	r0, r3
 8005300:	f003 f88e 	bl	8008420 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005304:	e005      	b.n	8005312 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005306:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005308:	461a      	mov	r2, r3
 800530a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f91b 	bl	8005548 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800531a:	b29b      	uxth	r3, r3
 800531c:	b21b      	sxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	f6ff ad0a 	blt.w	8004d38 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3738      	adds	r7, #56	; 0x38
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b088      	sub	sp, #32
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	4613      	mov	r3, r2
 800533a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d07e      	beq.n	8005444 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534e:	b29b      	uxth	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4413      	add	r3, r2
 800535a:	3302      	adds	r3, #2
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	6812      	ldr	r2, [r2, #0]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800536e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	8b7b      	ldrh	r3, [r7, #26]
 8005376:	429a      	cmp	r2, r3
 8005378:	d306      	bcc.n	8005388 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	8b7b      	ldrh	r3, [r7, #26]
 8005380:	1ad2      	subs	r2, r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	619a      	str	r2, [r3, #24]
 8005386:	e002      	b.n	800538e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d123      	bne.n	80053de <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b0:	833b      	strh	r3, [r7, #24]
 80053b2:	8b3b      	ldrh	r3, [r7, #24]
 80053b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053b8:	833b      	strh	r3, [r7, #24]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	8b3b      	ldrh	r3, [r7, #24]
 80053ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053da:	b29b      	uxth	r3, r3
 80053dc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01f      	beq.n	8005428 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	82fb      	strh	r3, [r7, #22]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	441a      	add	r2, r3
 8005412:	8afb      	ldrh	r3, [r7, #22]
 8005414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005420:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005424:	b29b      	uxth	r3, r3
 8005426:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005428:	8b7b      	ldrh	r3, [r7, #26]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8087 	beq.w	800553e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6959      	ldr	r1, [r3, #20]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	891a      	ldrh	r2, [r3, #8]
 800543c:	8b7b      	ldrh	r3, [r7, #26]
 800543e:	f004 ff95 	bl	800a36c <USB_ReadPMA>
 8005442:	e07c      	b.n	800553e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544c:	b29b      	uxth	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4413      	add	r3, r2
 8005458:	3306      	adds	r3, #6
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800546c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	8b7b      	ldrh	r3, [r7, #26]
 8005474:	429a      	cmp	r2, r3
 8005476:	d306      	bcc.n	8005486 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	8b7b      	ldrh	r3, [r7, #26]
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	619a      	str	r2, [r3, #24]
 8005484:	e002      	b.n	800548c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2200      	movs	r2, #0
 800548a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d123      	bne.n	80054dc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	83fb      	strh	r3, [r7, #30]
 80054b0:	8bfb      	ldrh	r3, [r7, #30]
 80054b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054b6:	83fb      	strh	r3, [r7, #30]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	8bfb      	ldrh	r3, [r7, #30]
 80054c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d8:	b29b      	uxth	r3, r3
 80054da:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d11f      	bne.n	8005526 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005500:	83bb      	strh	r3, [r7, #28]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	441a      	add	r2, r3
 8005510:	8bbb      	ldrh	r3, [r7, #28]
 8005512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005522:	b29b      	uxth	r3, r3
 8005524:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005526:	8b7b      	ldrh	r3, [r7, #26]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	6959      	ldr	r1, [r3, #20]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	895a      	ldrh	r2, [r3, #10]
 8005538:	8b7b      	ldrh	r3, [r7, #26]
 800553a:	f004 ff17 	bl	800a36c <USB_ReadPMA>
    }
  }

  return count;
 800553e:	8b7b      	ldrh	r3, [r7, #26]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b0a2      	sub	sp, #136	; 0x88
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	4613      	mov	r3, r2
 8005554:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005556:	88fb      	ldrh	r3, [r7, #6]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 81c7 	beq.w	80058f0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556a:	b29b      	uxth	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4413      	add	r3, r2
 8005576:	3302      	adds	r3, #2
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800558a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005596:	429a      	cmp	r2, r3
 8005598:	d907      	bls.n	80055aa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055a2:	1ad2      	subs	r2, r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	619a      	str	r2, [r3, #24]
 80055a8:	e002      	b.n	80055b0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2200      	movs	r2, #0
 80055ae:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 80b9 	bne.w	800572c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	785b      	ldrb	r3, [r3, #1]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d126      	bne.n	8005610 <HAL_PCD_EP_DB_Transmit+0xc8>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	4413      	add	r3, r2
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	011a      	lsls	r2, r3, #4
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	4413      	add	r3, r2
 80055e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005608:	b29a      	uxth	r2, r3
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	801a      	strh	r2, [r3, #0]
 800560e:	e01a      	b.n	8005646 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	785b      	ldrb	r3, [r3, #1]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d116      	bne.n	8005646 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	633b      	str	r3, [r7, #48]	; 0x30
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005626:	b29b      	uxth	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	4413      	add	r3, r2
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	011a      	lsls	r2, r3, #4
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	4413      	add	r3, r2
 800563a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005642:	2200      	movs	r2, #0
 8005644:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d126      	bne.n	80056a2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005662:	b29b      	uxth	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	4413      	add	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	011a      	lsls	r2, r3, #4
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	4413      	add	r3, r2
 8005676:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005686:	b29a      	uxth	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569a:	b29a      	uxth	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	e017      	b.n	80056d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	785b      	ldrb	r3, [r3, #1]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d113      	bne.n	80056d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	4413      	add	r3, r2
 80056ba:	623b      	str	r3, [r7, #32]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	011a      	lsls	r2, r3, #4
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	4413      	add	r3, r2
 80056c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	2200      	movs	r2, #0
 80056d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	4619      	mov	r1, r3
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f006 fc3a 	bl	800bf52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 82d4 	beq.w	8005c92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	827b      	strh	r3, [r7, #18]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	441a      	add	r2, r3
 8005714:	8a7b      	ldrh	r3, [r7, #18]
 8005716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005726:	b29b      	uxth	r3, r3
 8005728:	8013      	strh	r3, [r2, #0]
 800572a:	e2b2      	b.n	8005c92 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d021      	beq.n	800577a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005750:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005776:	b29b      	uxth	r3, r3
 8005778:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005780:	2b01      	cmp	r3, #1
 8005782:	f040 8286 	bne.w	8005c92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800578e:	441a      	add	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800579c:	441a      	add	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6a1a      	ldr	r2, [r3, #32]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d309      	bcc.n	80057c2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	6a1a      	ldr	r2, [r3, #32]
 80057b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ba:	1ad2      	subs	r2, r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	621a      	str	r2, [r3, #32]
 80057c0:	e015      	b.n	80057ee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d107      	bne.n	80057da <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80057ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057d8:	e009      	b.n	80057ee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2200      	movs	r2, #0
 80057ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d155      	bne.n	80058a2 <HAL_PCD_EP_DB_Transmit+0x35a>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005804:	b29b      	uxth	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	4413      	add	r3, r2
 800580c:	63bb      	str	r3, [r7, #56]	; 0x38
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	011a      	lsls	r2, r3, #4
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	4413      	add	r3, r2
 8005818:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
 800581e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005820:	2b00      	cmp	r3, #0
 8005822:	d112      	bne.n	800584a <HAL_PCD_EP_DB_Transmit+0x302>
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800582e:	b29a      	uxth	r2, r3
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	b29b      	uxth	r3, r3
 800583a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800583e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005842:	b29a      	uxth	r2, r3
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	e047      	b.n	80058da <HAL_PCD_EP_DB_Transmit+0x392>
 800584a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800584c:	2b3e      	cmp	r3, #62	; 0x3e
 800584e:	d811      	bhi.n	8005874 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005852:	085b      	lsrs	r3, r3, #1
 8005854:	64bb      	str	r3, [r7, #72]	; 0x48
 8005856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005862:	3301      	adds	r3, #1
 8005864:	64bb      	str	r3, [r7, #72]	; 0x48
 8005866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005868:	b29b      	uxth	r3, r3
 800586a:	029b      	lsls	r3, r3, #10
 800586c:	b29a      	uxth	r2, r3
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	e032      	b.n	80058da <HAL_PCD_EP_DB_Transmit+0x392>
 8005874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	64bb      	str	r3, [r7, #72]	; 0x48
 800587a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <HAL_PCD_EP_DB_Transmit+0x342>
 8005884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005886:	3b01      	subs	r3, #1
 8005888:	64bb      	str	r3, [r7, #72]	; 0x48
 800588a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588c:	b29b      	uxth	r3, r3
 800588e:	029b      	lsls	r3, r3, #10
 8005890:	b29b      	uxth	r3, r3
 8005892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589a:	b29a      	uxth	r2, r3
 800589c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	e01b      	b.n	80058da <HAL_PCD_EP_DB_Transmit+0x392>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d117      	bne.n	80058da <HAL_PCD_EP_DB_Transmit+0x392>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	643b      	str	r3, [r7, #64]	; 0x40
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058be:	4413      	add	r3, r2
 80058c0:	643b      	str	r3, [r7, #64]	; 0x40
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	011a      	lsls	r2, r3, #4
 80058c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ca:	4413      	add	r3, r2
 80058cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6959      	ldr	r1, [r3, #20]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	891a      	ldrh	r2, [r3, #8]
 80058e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f004 fcfa 	bl	800a2e2 <USB_WritePMA>
 80058ee:	e1d0      	b.n	8005c92 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	4413      	add	r3, r2
 8005904:	3306      	adds	r3, #6
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005918:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005924:	429a      	cmp	r2, r3
 8005926:	d307      	bcc.n	8005938 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005930:	1ad2      	subs	r2, r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	619a      	str	r2, [r3, #24]
 8005936:	e002      	b.n	800593e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2200      	movs	r2, #0
 800593c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f040 80c4 	bne.w	8005ad0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d126      	bne.n	800599e <HAL_PCD_EP_DB_Transmit+0x456>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595e:	b29b      	uxth	r3, r3
 8005960:	461a      	mov	r2, r3
 8005962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005964:	4413      	add	r3, r2
 8005966:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	011a      	lsls	r2, r3, #4
 800596e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005970:	4413      	add	r3, r2
 8005972:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005976:	66bb      	str	r3, [r7, #104]	; 0x68
 8005978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005982:	b29a      	uxth	r2, r3
 8005984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005986:	801a      	strh	r2, [r3, #0]
 8005988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005996:	b29a      	uxth	r2, r3
 8005998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	e01a      	b.n	80059d4 <HAL_PCD_EP_DB_Transmit+0x48c>
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d116      	bne.n	80059d4 <HAL_PCD_EP_DB_Transmit+0x48c>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	677b      	str	r3, [r7, #116]	; 0x74
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ba:	4413      	add	r3, r2
 80059bc:	677b      	str	r3, [r7, #116]	; 0x74
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	011a      	lsls	r2, r3, #4
 80059c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059cc:	673b      	str	r3, [r7, #112]	; 0x70
 80059ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059d0:	2200      	movs	r2, #0
 80059d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d12f      	bne.n	8005a42 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059fa:	4413      	add	r3, r2
 80059fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	011a      	lsls	r2, r3, #4
 8005a06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	e017      	b.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	785b      	ldrb	r3, [r3, #1]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d113      	bne.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a58:	4413      	add	r3, r2
 8005a5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	011a      	lsls	r2, r3, #4
 8005a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a64:	4413      	add	r3, r2
 8005a66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a6e:	2200      	movs	r2, #0
 8005a70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	4619      	mov	r1, r3
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f006 fa6a 	bl	800bf52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f040 8104 	bne.w	8005c92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	441a      	add	r2, r3
 8005ab6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	8013      	strh	r3, [r2, #0]
 8005ace:	e0e0      	b.n	8005c92 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d121      	bne.n	8005b1e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	441a      	add	r2, r3
 8005b06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	f040 80b4 	bne.w	8005c92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b32:	441a      	add	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b40:	441a      	add	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6a1a      	ldr	r2, [r3, #32]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d309      	bcc.n	8005b66 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	621a      	str	r2, [r3, #32]
 8005b64:	e015      	b.n	8005b92 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d107      	bne.n	8005b7e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005b6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b72:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b7c:	e009      	b.n	8005b92 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2200      	movs	r2, #0
 8005b88:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	667b      	str	r3, [r7, #100]	; 0x64
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d155      	bne.n	8005c4c <HAL_PCD_EP_DB_Transmit+0x704>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb4:	4413      	add	r3, r2
 8005bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	011a      	lsls	r2, r3, #4
 8005bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d112      	bne.n	8005bf4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e044      	b.n	8005c7e <HAL_PCD_EP_DB_Transmit+0x736>
 8005bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf8:	d811      	bhi.n	8005c1e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bfc:	085b      	lsrs	r3, r3, #1
 8005bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8005c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	029b      	lsls	r3, r3, #10
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e02f      	b.n	8005c7e <HAL_PCD_EP_DB_Transmit+0x736>
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	657b      	str	r3, [r7, #84]	; 0x54
 8005c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d102      	bne.n	8005c34 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c30:	3b01      	subs	r3, #1
 8005c32:	657b      	str	r3, [r7, #84]	; 0x54
 8005c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	e018      	b.n	8005c7e <HAL_PCD_EP_DB_Transmit+0x736>
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d114      	bne.n	8005c7e <HAL_PCD_EP_DB_Transmit+0x736>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c62:	4413      	add	r3, r2
 8005c64:	667b      	str	r3, [r7, #100]	; 0x64
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	011a      	lsls	r2, r3, #4
 8005c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c6e:	4413      	add	r3, r2
 8005c70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c74:	663b      	str	r3, [r7, #96]	; 0x60
 8005c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c7c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6959      	ldr	r1, [r3, #20]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	895a      	ldrh	r2, [r3, #10]
 8005c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f004 fb28 	bl	800a2e2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cac:	823b      	strh	r3, [r7, #16]
 8005cae:	8a3b      	ldrh	r3, [r7, #16]
 8005cb0:	f083 0310 	eor.w	r3, r3, #16
 8005cb4:	823b      	strh	r3, [r7, #16]
 8005cb6:	8a3b      	ldrh	r3, [r7, #16]
 8005cb8:	f083 0320 	eor.w	r3, r3, #32
 8005cbc:	823b      	strh	r3, [r7, #16]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	441a      	add	r2, r3
 8005ccc:	8a3b      	ldrh	r3, [r7, #16]
 8005cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3788      	adds	r7, #136	; 0x88
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	607b      	str	r3, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	817b      	strh	r3, [r7, #10]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005cfe:	897b      	ldrh	r3, [r7, #10]
 8005d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00b      	beq.n	8005d22 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d0a:	897b      	ldrh	r3, [r7, #10]
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	e009      	b.n	8005d36 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d22:	897a      	ldrh	r2, [r7, #10]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005d36:	893b      	ldrh	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d107      	bne.n	8005d4c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	80da      	strh	r2, [r3, #6]
 8005d4a:	e00b      	b.n	8005d64 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	0c1b      	lsrs	r3, r3, #16
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e31d      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d82:	4b94      	ldr	r3, [pc, #592]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 030c 	and.w	r3, r3, #12
 8005d8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d8c:	4b91      	ldr	r3, [pc, #580]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d94:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d07b      	beq.n	8005e9a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d006      	beq.n	8005db6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2b0c      	cmp	r3, #12
 8005dac:	d10f      	bne.n	8005dce <HAL_RCC_OscConfig+0x5e>
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db4:	d10b      	bne.n	8005dce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db6:	4b87      	ldr	r3, [pc, #540]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d06a      	beq.n	8005e98 <HAL_RCC_OscConfig+0x128>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d166      	bne.n	8005e98 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e2f7      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d106      	bne.n	8005de4 <HAL_RCC_OscConfig+0x74>
 8005dd6:	4b7f      	ldr	r3, [pc, #508]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a7e      	ldr	r2, [pc, #504]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e02d      	b.n	8005e40 <HAL_RCC_OscConfig+0xd0>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10c      	bne.n	8005e06 <HAL_RCC_OscConfig+0x96>
 8005dec:	4b79      	ldr	r3, [pc, #484]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a78      	ldr	r2, [pc, #480]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	4b76      	ldr	r3, [pc, #472]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a75      	ldr	r2, [pc, #468]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	e01c      	b.n	8005e40 <HAL_RCC_OscConfig+0xd0>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0xb8>
 8005e0e:	4b71      	ldr	r3, [pc, #452]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a70      	ldr	r2, [pc, #448]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b6e      	ldr	r3, [pc, #440]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a6d      	ldr	r2, [pc, #436]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e00b      	b.n	8005e40 <HAL_RCC_OscConfig+0xd0>
 8005e28:	4b6a      	ldr	r3, [pc, #424]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a69      	ldr	r2, [pc, #420]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	4b67      	ldr	r3, [pc, #412]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a66      	ldr	r2, [pc, #408]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fd f8a8 	bl	8002f9c <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fd f8a4 	bl	8002f9c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	; 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e2ad      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e62:	4b5c      	ldr	r3, [pc, #368]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0xe0>
 8005e6e:	e014      	b.n	8005e9a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f7fd f894 	bl	8002f9c <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fd f890 	bl	8002f9c <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	; 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e299      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e8a:	4b52      	ldr	r3, [pc, #328]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0x108>
 8005e96:	e000      	b.n	8005e9a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d05a      	beq.n	8005f5c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d005      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b0c      	cmp	r3, #12
 8005eb0:	d119      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x176>
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d116      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eb8:	4b46      	ldr	r3, [pc, #280]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x160>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d001      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e276      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed0:	4b40      	ldr	r3, [pc, #256]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	493d      	ldr	r1, [pc, #244]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ee4:	e03a      	b.n	8005f5c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d020      	beq.n	8005f30 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eee:	4b3a      	ldr	r3, [pc, #232]	; (8005fd8 <HAL_RCC_OscConfig+0x268>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef4:	f7fd f852 	bl	8002f9c <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005efc:	f7fd f84e 	bl	8002f9c <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e257      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f0e:	4b31      	ldr	r3, [pc, #196]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f0      	beq.n	8005efc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1a:	4b2e      	ldr	r3, [pc, #184]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	492a      	ldr	r1, [pc, #168]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	604b      	str	r3, [r1, #4]
 8005f2e:	e015      	b.n	8005f5c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f30:	4b29      	ldr	r3, [pc, #164]	; (8005fd8 <HAL_RCC_OscConfig+0x268>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f36:	f7fd f831 	bl	8002f9c <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f3e:	f7fd f82d 	bl	8002f9c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e236      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f50:	4b20      	ldr	r3, [pc, #128]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1f0      	bne.n	8005f3e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80b8 	beq.w	80060da <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d170      	bne.n	8006052 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f70:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCC_OscConfig+0x218>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e21a      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1a      	ldr	r2, [r3, #32]
 8005f8c:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d921      	bls.n	8005fdc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fc69 	bl	8006874 <RCC_SetFlashLatencyFromMSIRange>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e208      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fac:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	4906      	ldr	r1, [pc, #24]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	061b      	lsls	r3, r3, #24
 8005fcc:	4901      	ldr	r1, [pc, #4]	; (8005fd4 <HAL_RCC_OscConfig+0x264>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	604b      	str	r3, [r1, #4]
 8005fd2:	e020      	b.n	8006016 <HAL_RCC_OscConfig+0x2a6>
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fdc:	4b99      	ldr	r3, [pc, #612]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	4996      	ldr	r1, [pc, #600]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fee:	4b95      	ldr	r3, [pc, #596]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	061b      	lsls	r3, r3, #24
 8005ffc:	4991      	ldr	r1, [pc, #580]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fc34 	bl	8006874 <RCC_SetFlashLatencyFromMSIRange>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e1d3      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	0b5b      	lsrs	r3, r3, #13
 800601c:	3301      	adds	r3, #1
 800601e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006026:	4a87      	ldr	r2, [pc, #540]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8006028:	6892      	ldr	r2, [r2, #8]
 800602a:	0912      	lsrs	r2, r2, #4
 800602c:	f002 020f 	and.w	r2, r2, #15
 8006030:	4985      	ldr	r1, [pc, #532]	; (8006248 <HAL_RCC_OscConfig+0x4d8>)
 8006032:	5c8a      	ldrb	r2, [r1, r2]
 8006034:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006036:	4a85      	ldr	r2, [pc, #532]	; (800624c <HAL_RCC_OscConfig+0x4dc>)
 8006038:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800603a:	4b85      	ldr	r3, [pc, #532]	; (8006250 <HAL_RCC_OscConfig+0x4e0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f7fc ff60 	bl	8002f04 <HAL_InitTick>
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d045      	beq.n	80060da <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	e1b5      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d029      	beq.n	80060ae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800605a:	4b7e      	ldr	r3, [pc, #504]	; (8006254 <HAL_RCC_OscConfig+0x4e4>)
 800605c:	2201      	movs	r2, #1
 800605e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006060:	f7fc ff9c 	bl	8002f9c <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006068:	f7fc ff98 	bl	8002f9c <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e1a1      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800607a:	4b72      	ldr	r3, [pc, #456]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0f0      	beq.n	8006068 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006086:	4b6f      	ldr	r3, [pc, #444]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	496c      	ldr	r1, [pc, #432]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8006094:	4313      	orrs	r3, r2
 8006096:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006098:	4b6a      	ldr	r3, [pc, #424]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	061b      	lsls	r3, r3, #24
 80060a6:	4967      	ldr	r1, [pc, #412]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	604b      	str	r3, [r1, #4]
 80060ac:	e015      	b.n	80060da <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80060ae:	4b69      	ldr	r3, [pc, #420]	; (8006254 <HAL_RCC_OscConfig+0x4e4>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7fc ff72 	bl	8002f9c <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060bc:	f7fc ff6e 	bl	8002f9c <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e177      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80060ce:	4b5d      	ldr	r3, [pc, #372]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d030      	beq.n	8006148 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d016      	beq.n	800611c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ee:	4b5a      	ldr	r3, [pc, #360]	; (8006258 <HAL_RCC_OscConfig+0x4e8>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060f4:	f7fc ff52 	bl	8002f9c <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060fc:	f7fc ff4e 	bl	8002f9c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e157      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800610e:	4b4d      	ldr	r3, [pc, #308]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f0      	beq.n	80060fc <HAL_RCC_OscConfig+0x38c>
 800611a:	e015      	b.n	8006148 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800611c:	4b4e      	ldr	r3, [pc, #312]	; (8006258 <HAL_RCC_OscConfig+0x4e8>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006122:	f7fc ff3b 	bl	8002f9c <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800612a:	f7fc ff37 	bl	8002f9c <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e140      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800613c:	4b41      	ldr	r3, [pc, #260]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 800613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80b5 	beq.w	80062c0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006156:	2300      	movs	r3, #0
 8006158:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800615a:	4b3a      	ldr	r3, [pc, #232]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10d      	bne.n	8006182 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006166:	4b37      	ldr	r3, [pc, #220]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	4a36      	ldr	r2, [pc, #216]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 800616c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006170:	6253      	str	r3, [r2, #36]	; 0x24
 8006172:	4b34      	ldr	r3, [pc, #208]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800617e:	2301      	movs	r3, #1
 8006180:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006182:	4b36      	ldr	r3, [pc, #216]	; (800625c <HAL_RCC_OscConfig+0x4ec>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618a:	2b00      	cmp	r3, #0
 800618c:	d118      	bne.n	80061c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800618e:	4b33      	ldr	r3, [pc, #204]	; (800625c <HAL_RCC_OscConfig+0x4ec>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a32      	ldr	r2, [pc, #200]	; (800625c <HAL_RCC_OscConfig+0x4ec>)
 8006194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800619a:	f7fc feff 	bl	8002f9c <HAL_GetTick>
 800619e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a0:	e008      	b.n	80061b4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a2:	f7fc fefb 	bl	8002f9c <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b64      	cmp	r3, #100	; 0x64
 80061ae:	d901      	bls.n	80061b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e104      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b4:	4b29      	ldr	r3, [pc, #164]	; (800625c <HAL_RCC_OscConfig+0x4ec>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0f0      	beq.n	80061a2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d106      	bne.n	80061d6 <HAL_RCC_OscConfig+0x466>
 80061c8:	4b1e      	ldr	r3, [pc, #120]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 80061ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061cc:	4a1d      	ldr	r2, [pc, #116]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 80061ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d2:	6353      	str	r3, [r2, #52]	; 0x34
 80061d4:	e02d      	b.n	8006232 <HAL_RCC_OscConfig+0x4c2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10c      	bne.n	80061f8 <HAL_RCC_OscConfig+0x488>
 80061de:	4b19      	ldr	r3, [pc, #100]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 80061e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e2:	4a18      	ldr	r2, [pc, #96]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 80061e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061e8:	6353      	str	r3, [r2, #52]	; 0x34
 80061ea:	4b16      	ldr	r3, [pc, #88]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 80061ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ee:	4a15      	ldr	r2, [pc, #84]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 80061f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061f4:	6353      	str	r3, [r2, #52]	; 0x34
 80061f6:	e01c      	b.n	8006232 <HAL_RCC_OscConfig+0x4c2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b05      	cmp	r3, #5
 80061fe:	d10c      	bne.n	800621a <HAL_RCC_OscConfig+0x4aa>
 8006200:	4b10      	ldr	r3, [pc, #64]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8006202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006204:	4a0f      	ldr	r2, [pc, #60]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8006206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800620a:	6353      	str	r3, [r2, #52]	; 0x34
 800620c:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 800620e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006210:	4a0c      	ldr	r2, [pc, #48]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8006212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006216:	6353      	str	r3, [r2, #52]	; 0x34
 8006218:	e00b      	b.n	8006232 <HAL_RCC_OscConfig+0x4c2>
 800621a:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 800621c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621e:	4a09      	ldr	r2, [pc, #36]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8006220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006224:	6353      	str	r3, [r2, #52]	; 0x34
 8006226:	4b07      	ldr	r3, [pc, #28]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 8006228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622a:	4a06      	ldr	r2, [pc, #24]	; (8006244 <HAL_RCC_OscConfig+0x4d4>)
 800622c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006230:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d024      	beq.n	8006284 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800623a:	f7fc feaf 	bl	8002f9c <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006240:	e019      	b.n	8006276 <HAL_RCC_OscConfig+0x506>
 8006242:	bf00      	nop
 8006244:	40023800 	.word	0x40023800
 8006248:	0800f330 	.word	0x0800f330
 800624c:	20000340 	.word	0x20000340
 8006250:	20000348 	.word	0x20000348
 8006254:	42470020 	.word	0x42470020
 8006258:	42470680 	.word	0x42470680
 800625c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006260:	f7fc fe9c 	bl	8002f9c <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f241 3288 	movw	r2, #5000	; 0x1388
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e0a3      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006276:	4b54      	ldr	r3, [pc, #336]	; (80063c8 <HAL_RCC_OscConfig+0x658>)
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0ee      	beq.n	8006260 <HAL_RCC_OscConfig+0x4f0>
 8006282:	e014      	b.n	80062ae <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006284:	f7fc fe8a 	bl	8002f9c <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800628a:	e00a      	b.n	80062a2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800628c:	f7fc fe86 	bl	8002f9c <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	f241 3288 	movw	r2, #5000	; 0x1388
 800629a:	4293      	cmp	r3, r2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e08d      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062a2:	4b49      	ldr	r3, [pc, #292]	; (80063c8 <HAL_RCC_OscConfig+0x658>)
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1ee      	bne.n	800628c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062ae:	7ffb      	ldrb	r3, [r7, #31]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d105      	bne.n	80062c0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b4:	4b44      	ldr	r3, [pc, #272]	; (80063c8 <HAL_RCC_OscConfig+0x658>)
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	4a43      	ldr	r2, [pc, #268]	; (80063c8 <HAL_RCC_OscConfig+0x658>)
 80062ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062be:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d079      	beq.n	80063bc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b0c      	cmp	r3, #12
 80062cc:	d056      	beq.n	800637c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d13b      	bne.n	800634e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062d6:	4b3d      	ldr	r3, [pc, #244]	; (80063cc <HAL_RCC_OscConfig+0x65c>)
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062dc:	f7fc fe5e 	bl	8002f9c <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062e4:	f7fc fe5a 	bl	8002f9c <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e063      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062f6:	4b34      	ldr	r3, [pc, #208]	; (80063c8 <HAL_RCC_OscConfig+0x658>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f0      	bne.n	80062e4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006302:	4b31      	ldr	r3, [pc, #196]	; (80063c8 <HAL_RCC_OscConfig+0x658>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	4319      	orrs	r1, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	430b      	orrs	r3, r1
 800631a:	492b      	ldr	r1, [pc, #172]	; (80063c8 <HAL_RCC_OscConfig+0x658>)
 800631c:	4313      	orrs	r3, r2
 800631e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006320:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <HAL_RCC_OscConfig+0x65c>)
 8006322:	2201      	movs	r2, #1
 8006324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006326:	f7fc fe39 	bl	8002f9c <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800632e:	f7fc fe35 	bl	8002f9c <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e03e      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006340:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <HAL_RCC_OscConfig+0x658>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f0      	beq.n	800632e <HAL_RCC_OscConfig+0x5be>
 800634c:	e036      	b.n	80063bc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800634e:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <HAL_RCC_OscConfig+0x65c>)
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006354:	f7fc fe22 	bl	8002f9c <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800635c:	f7fc fe1e 	bl	8002f9c <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e027      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800636e:	4b16      	ldr	r3, [pc, #88]	; (80063c8 <HAL_RCC_OscConfig+0x658>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f0      	bne.n	800635c <HAL_RCC_OscConfig+0x5ec>
 800637a:	e01f      	b.n	80063bc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e01a      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <HAL_RCC_OscConfig+0x658>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	429a      	cmp	r2, r3
 800639a:	d10d      	bne.n	80063b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d106      	bne.n	80063b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d001      	beq.n	80063bc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40023800 	.word	0x40023800
 80063cc:	42470060 	.word	0x42470060

080063d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e11a      	b.n	800661a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063e4:	4b8f      	ldr	r3, [pc, #572]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d919      	bls.n	8006426 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d105      	bne.n	8006404 <HAL_RCC_ClockConfig+0x34>
 80063f8:	4b8a      	ldr	r3, [pc, #552]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a89      	ldr	r2, [pc, #548]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 80063fe:	f043 0304 	orr.w	r3, r3, #4
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	4b87      	ldr	r3, [pc, #540]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f023 0201 	bic.w	r2, r3, #1
 800640c:	4985      	ldr	r1, [pc, #532]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	4313      	orrs	r3, r2
 8006412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006414:	4b83      	ldr	r3, [pc, #524]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d001      	beq.n	8006426 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e0f9      	b.n	800661a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006432:	4b7d      	ldr	r3, [pc, #500]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	497a      	ldr	r1, [pc, #488]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 8006440:	4313      	orrs	r3, r2
 8006442:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 808e 	beq.w	800656e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d107      	bne.n	800646a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800645a:	4b73      	ldr	r3, [pc, #460]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d121      	bne.n	80064aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e0d7      	b.n	800661a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d107      	bne.n	8006482 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006472:	4b6d      	ldr	r3, [pc, #436]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d115      	bne.n	80064aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e0cb      	b.n	800661a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d107      	bne.n	800649a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800648a:	4b67      	ldr	r3, [pc, #412]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e0bf      	b.n	800661a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800649a:	4b63      	ldr	r3, [pc, #396]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e0b7      	b.n	800661a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064aa:	4b5f      	ldr	r3, [pc, #380]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f023 0203 	bic.w	r2, r3, #3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	495c      	ldr	r1, [pc, #368]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064bc:	f7fc fd6e 	bl	8002f9c <HAL_GetTick>
 80064c0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d112      	bne.n	80064f0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80064ca:	e00a      	b.n	80064e2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064cc:	f7fc fd66 	bl	8002f9c <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e09b      	b.n	800661a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80064e2:	4b51      	ldr	r3, [pc, #324]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 030c 	and.w	r3, r3, #12
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d1ee      	bne.n	80064cc <HAL_RCC_ClockConfig+0xfc>
 80064ee:	e03e      	b.n	800656e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d112      	bne.n	800651e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064f8:	e00a      	b.n	8006510 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064fa:	f7fc fd4f 	bl	8002f9c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	f241 3288 	movw	r2, #5000	; 0x1388
 8006508:	4293      	cmp	r3, r2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e084      	b.n	800661a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006510:	4b45      	ldr	r3, [pc, #276]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 030c 	and.w	r3, r3, #12
 8006518:	2b0c      	cmp	r3, #12
 800651a:	d1ee      	bne.n	80064fa <HAL_RCC_ClockConfig+0x12a>
 800651c:	e027      	b.n	800656e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d11d      	bne.n	8006562 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006526:	e00a      	b.n	800653e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006528:	f7fc fd38 	bl	8002f9c <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	f241 3288 	movw	r2, #5000	; 0x1388
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e06d      	b.n	800661a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800653e:	4b3a      	ldr	r3, [pc, #232]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	2b04      	cmp	r3, #4
 8006548:	d1ee      	bne.n	8006528 <HAL_RCC_ClockConfig+0x158>
 800654a:	e010      	b.n	800656e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800654c:	f7fc fd26 	bl	8002f9c <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	f241 3288 	movw	r2, #5000	; 0x1388
 800655a:	4293      	cmp	r3, r2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e05b      	b.n	800661a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006562:	4b31      	ldr	r3, [pc, #196]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1ee      	bne.n	800654c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800656e:	4b2d      	ldr	r3, [pc, #180]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d219      	bcs.n	80065b0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d105      	bne.n	800658e <HAL_RCC_ClockConfig+0x1be>
 8006582:	4b28      	ldr	r3, [pc, #160]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a27      	ldr	r2, [pc, #156]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 8006588:	f043 0304 	orr.w	r3, r3, #4
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	4b25      	ldr	r3, [pc, #148]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 0201 	bic.w	r2, r3, #1
 8006596:	4923      	ldr	r1, [pc, #140]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	4313      	orrs	r3, r2
 800659c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800659e:	4b21      	ldr	r3, [pc, #132]	; (8006624 <HAL_RCC_ClockConfig+0x254>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d001      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e034      	b.n	800661a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065bc:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	4917      	ldr	r1, [pc, #92]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065da:	4b13      	ldr	r3, [pc, #76]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	490f      	ldr	r1, [pc, #60]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065ee:	f000 f823 	bl	8006638 <HAL_RCC_GetSysClockFreq>
 80065f2:	4602      	mov	r2, r0
 80065f4:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <HAL_RCC_ClockConfig+0x258>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	091b      	lsrs	r3, r3, #4
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	490b      	ldr	r1, [pc, #44]	; (800662c <HAL_RCC_ClockConfig+0x25c>)
 8006600:	5ccb      	ldrb	r3, [r1, r3]
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	4a0a      	ldr	r2, [pc, #40]	; (8006630 <HAL_RCC_ClockConfig+0x260>)
 8006608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800660a:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <HAL_RCC_ClockConfig+0x264>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7fc fc78 	bl	8002f04 <HAL_InitTick>
 8006614:	4603      	mov	r3, r0
 8006616:	72fb      	strb	r3, [r7, #11]

  return status;
 8006618:	7afb      	ldrb	r3, [r7, #11]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40023c00 	.word	0x40023c00
 8006628:	40023800 	.word	0x40023800
 800662c:	0800f330 	.word	0x0800f330
 8006630:	20000340 	.word	0x20000340
 8006634:	20000348 	.word	0x20000348

08006638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800663c:	b092      	sub	sp, #72	; 0x48
 800663e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8006640:	4b79      	ldr	r3, [pc, #484]	; (8006828 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006648:	f003 030c 	and.w	r3, r3, #12
 800664c:	2b0c      	cmp	r3, #12
 800664e:	d00d      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x34>
 8006650:	2b0c      	cmp	r3, #12
 8006652:	f200 80d5 	bhi.w	8006800 <HAL_RCC_GetSysClockFreq+0x1c8>
 8006656:	2b04      	cmp	r3, #4
 8006658:	d002      	beq.n	8006660 <HAL_RCC_GetSysClockFreq+0x28>
 800665a:	2b08      	cmp	r3, #8
 800665c:	d003      	beq.n	8006666 <HAL_RCC_GetSysClockFreq+0x2e>
 800665e:	e0cf      	b.n	8006800 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006660:	4b72      	ldr	r3, [pc, #456]	; (800682c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006662:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8006664:	e0da      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006666:	4b72      	ldr	r3, [pc, #456]	; (8006830 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006668:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800666a:	e0d7      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800666c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666e:	0c9b      	lsrs	r3, r3, #18
 8006670:	f003 020f 	and.w	r2, r3, #15
 8006674:	4b6f      	ldr	r3, [pc, #444]	; (8006834 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006676:	5c9b      	ldrb	r3, [r3, r2]
 8006678:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800667a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667c:	0d9b      	lsrs	r3, r3, #22
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	3301      	adds	r3, #1
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006686:	4b68      	ldr	r3, [pc, #416]	; (8006828 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d05d      	beq.n	800674e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	2200      	movs	r2, #0
 8006696:	4618      	mov	r0, r3
 8006698:	4611      	mov	r1, r2
 800669a:	4604      	mov	r4, r0
 800669c:	460d      	mov	r5, r1
 800669e:	4622      	mov	r2, r4
 80066a0:	462b      	mov	r3, r5
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f04f 0100 	mov.w	r1, #0
 80066aa:	0159      	lsls	r1, r3, #5
 80066ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066b0:	0150      	lsls	r0, r2, #5
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4621      	mov	r1, r4
 80066b8:	1a51      	subs	r1, r2, r1
 80066ba:	6139      	str	r1, [r7, #16]
 80066bc:	4629      	mov	r1, r5
 80066be:	eb63 0301 	sbc.w	r3, r3, r1
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066d0:	4659      	mov	r1, fp
 80066d2:	018b      	lsls	r3, r1, #6
 80066d4:	4651      	mov	r1, sl
 80066d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066da:	4651      	mov	r1, sl
 80066dc:	018a      	lsls	r2, r1, #6
 80066de:	46d4      	mov	ip, sl
 80066e0:	ebb2 080c 	subs.w	r8, r2, ip
 80066e4:	4659      	mov	r1, fp
 80066e6:	eb63 0901 	sbc.w	r9, r3, r1
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066fe:	4690      	mov	r8, r2
 8006700:	4699      	mov	r9, r3
 8006702:	4623      	mov	r3, r4
 8006704:	eb18 0303 	adds.w	r3, r8, r3
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	462b      	mov	r3, r5
 800670c:	eb49 0303 	adc.w	r3, r9, r3
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800671e:	4629      	mov	r1, r5
 8006720:	024b      	lsls	r3, r1, #9
 8006722:	4620      	mov	r0, r4
 8006724:	4629      	mov	r1, r5
 8006726:	4604      	mov	r4, r0
 8006728:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800672c:	4601      	mov	r1, r0
 800672e:	024a      	lsls	r2, r1, #9
 8006730:	4610      	mov	r0, r2
 8006732:	4619      	mov	r1, r3
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006736:	2200      	movs	r2, #0
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
 800673a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800673c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006740:	f7fa fcfe 	bl	8001140 <__aeabi_uldivmod>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4613      	mov	r3, r2
 800674a:	647b      	str	r3, [r7, #68]	; 0x44
 800674c:	e055      	b.n	80067fa <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	2200      	movs	r2, #0
 8006752:	623b      	str	r3, [r7, #32]
 8006754:	627a      	str	r2, [r7, #36]	; 0x24
 8006756:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800675a:	4642      	mov	r2, r8
 800675c:	464b      	mov	r3, r9
 800675e:	f04f 0000 	mov.w	r0, #0
 8006762:	f04f 0100 	mov.w	r1, #0
 8006766:	0159      	lsls	r1, r3, #5
 8006768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800676c:	0150      	lsls	r0, r2, #5
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	46c4      	mov	ip, r8
 8006774:	ebb2 0a0c 	subs.w	sl, r2, ip
 8006778:	4640      	mov	r0, r8
 800677a:	4649      	mov	r1, r9
 800677c:	468c      	mov	ip, r1
 800677e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800678e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006792:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006796:	ebb2 040a 	subs.w	r4, r2, sl
 800679a:	eb63 050b 	sbc.w	r5, r3, fp
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	00eb      	lsls	r3, r5, #3
 80067a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ac:	00e2      	lsls	r2, r4, #3
 80067ae:	4614      	mov	r4, r2
 80067b0:	461d      	mov	r5, r3
 80067b2:	4603      	mov	r3, r0
 80067b4:	18e3      	adds	r3, r4, r3
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	460b      	mov	r3, r1
 80067ba:	eb45 0303 	adc.w	r3, r5, r3
 80067be:	607b      	str	r3, [r7, #4]
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067cc:	4629      	mov	r1, r5
 80067ce:	028b      	lsls	r3, r1, #10
 80067d0:	4620      	mov	r0, r4
 80067d2:	4629      	mov	r1, r5
 80067d4:	4604      	mov	r4, r0
 80067d6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80067da:	4601      	mov	r1, r0
 80067dc:	028a      	lsls	r2, r1, #10
 80067de:	4610      	mov	r0, r2
 80067e0:	4619      	mov	r1, r3
 80067e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e4:	2200      	movs	r2, #0
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	61fa      	str	r2, [r7, #28]
 80067ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067ee:	f7fa fca7 	bl	8001140 <__aeabi_uldivmod>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4613      	mov	r3, r2
 80067f8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80067fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067fc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80067fe:	e00d      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006800:	4b09      	ldr	r3, [pc, #36]	; (8006828 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	0b5b      	lsrs	r3, r3, #13
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	3301      	adds	r3, #1
 8006810:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800681a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800681c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800681e:	4618      	mov	r0, r3
 8006820:	3748      	adds	r7, #72	; 0x48
 8006822:	46bd      	mov	sp, r7
 8006824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006828:	40023800 	.word	0x40023800
 800682c:	00f42400 	.word	0x00f42400
 8006830:	007a1200 	.word	0x007a1200
 8006834:	0800f324 	.word	0x0800f324

08006838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800683c:	4b02      	ldr	r3, [pc, #8]	; (8006848 <HAL_RCC_GetHCLKFreq+0x10>)
 800683e:	681b      	ldr	r3, [r3, #0]
}
 8006840:	4618      	mov	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	bc80      	pop	{r7}
 8006846:	4770      	bx	lr
 8006848:	20000340 	.word	0x20000340

0800684c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006850:	f7ff fff2 	bl	8006838 <HAL_RCC_GetHCLKFreq>
 8006854:	4602      	mov	r2, r0
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	4903      	ldr	r1, [pc, #12]	; (8006870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006862:	5ccb      	ldrb	r3, [r1, r3]
 8006864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006868:	4618      	mov	r0, r3
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40023800 	.word	0x40023800
 8006870:	0800f340 	.word	0x0800f340

08006874 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800687c:	2300      	movs	r3, #0
 800687e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006880:	4b29      	ldr	r3, [pc, #164]	; (8006928 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d12c      	bne.n	80068e6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800688c:	4b26      	ldr	r3, [pc, #152]	; (8006928 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006898:	4b24      	ldr	r3, [pc, #144]	; (800692c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	e016      	b.n	80068d2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068a4:	4b20      	ldr	r3, [pc, #128]	; (8006928 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80068aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ae:	6253      	str	r3, [r2, #36]	; 0x24
 80068b0:	4b1d      	ldr	r3, [pc, #116]	; (8006928 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80068bc:	4b1b      	ldr	r3, [pc, #108]	; (800692c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80068c4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80068c6:	4b18      	ldr	r3, [pc, #96]	; (8006928 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	4a17      	ldr	r2, [pc, #92]	; (8006928 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80068cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068d0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80068d8:	d105      	bne.n	80068e6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068e0:	d101      	bne.n	80068e6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80068e2:	2301      	movs	r3, #1
 80068e4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d105      	bne.n	80068f8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80068ec:	4b10      	ldr	r3, [pc, #64]	; (8006930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a0f      	ldr	r2, [pc, #60]	; (8006930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80068f2:	f043 0304 	orr.w	r3, r3, #4
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	4b0d      	ldr	r3, [pc, #52]	; (8006930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f023 0201 	bic.w	r2, r3, #1
 8006900:	490b      	ldr	r1, [pc, #44]	; (8006930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006908:	4b09      	ldr	r3, [pc, #36]	; (8006930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	429a      	cmp	r2, r3
 8006914:	d001      	beq.n	800691a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40023800 	.word	0x40023800
 800692c:	40007000 	.word	0x40007000
 8006930:	40023c00 	.word	0x40023c00

08006934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e06e      	b.n	8006a24 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	2b00      	cmp	r3, #0
 800694c:	d108      	bne.n	8006960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006956:	d009      	beq.n	800696c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	61da      	str	r2, [r3, #28]
 800695e:	e005      	b.n	800696c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fb fef8 	bl	800277c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f0:	ea42 0103 	orr.w	r1, r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	0c1a      	lsrs	r2, r3, #16
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f002 0204 	and.w	r2, r2, #4
 8006a12:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_SPI_Transmit+0x22>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e126      	b.n	8006c9c <HAL_SPI_Transmit+0x270>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a56:	f7fc faa1 	bl	8002f9c <HAL_GetTick>
 8006a5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d002      	beq.n	8006a72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a70:	e10b      	b.n	8006c8a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <HAL_SPI_Transmit+0x52>
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a82:	e102      	b.n	8006c8a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2203      	movs	r2, #3
 8006a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	88fa      	ldrh	r2, [r7, #6]
 8006a9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	88fa      	ldrh	r2, [r7, #6]
 8006aa2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aca:	d10f      	bne.n	8006aec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ada:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d007      	beq.n	8006b0a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b12:	d14b      	bne.n	8006bac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <HAL_SPI_Transmit+0xf6>
 8006b1c:	8afb      	ldrh	r3, [r7, #22]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d13e      	bne.n	8006ba0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	881a      	ldrh	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	1c9a      	adds	r2, r3, #2
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b46:	e02b      	b.n	8006ba0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d112      	bne.n	8006b7c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	881a      	ldrh	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	1c9a      	adds	r2, r3, #2
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b7a:	e011      	b.n	8006ba0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b7c:	f7fc fa0e 	bl	8002f9c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d803      	bhi.n	8006b94 <HAL_SPI_Transmit+0x168>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d102      	bne.n	8006b9a <HAL_SPI_Transmit+0x16e>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d102      	bne.n	8006ba0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b9e:	e074      	b.n	8006c8a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1ce      	bne.n	8006b48 <HAL_SPI_Transmit+0x11c>
 8006baa:	e04c      	b.n	8006c46 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <HAL_SPI_Transmit+0x18e>
 8006bb4:	8afb      	ldrh	r3, [r7, #22]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d140      	bne.n	8006c3c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	7812      	ldrb	r2, [r2, #0]
 8006bc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006be0:	e02c      	b.n	8006c3c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d113      	bne.n	8006c18 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	330c      	adds	r3, #12
 8006bfa:	7812      	ldrb	r2, [r2, #0]
 8006bfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c16:	e011      	b.n	8006c3c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c18:	f7fc f9c0 	bl	8002f9c <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d803      	bhi.n	8006c30 <HAL_SPI_Transmit+0x204>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2e:	d102      	bne.n	8006c36 <HAL_SPI_Transmit+0x20a>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c3a:	e026      	b.n	8006c8a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1cd      	bne.n	8006be2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f9b6 	bl	8006fbc <SPI_EndRxTxTransaction>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	77fb      	strb	r3, [r7, #31]
 8006c86:	e000      	b.n	8006c8a <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3720      	adds	r7, #32
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	099b      	lsrs	r3, r3, #6
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10f      	bne.n	8006ce8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	099b      	lsrs	r3, r3, #6
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	4798      	blx	r3
    return;
 8006ce6:	e0be      	b.n	8006e66 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <HAL_SPI_IRQHandler+0x66>
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	09db      	lsrs	r3, r3, #7
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
    return;
 8006d08:	e0ad      	b.n	8006e66 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d106      	bne.n	8006d24 <HAL_SPI_IRQHandler+0x80>
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	099b      	lsrs	r3, r3, #6
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80a1 	beq.w	8006e66 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 809a 	beq.w	8006e66 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	099b      	lsrs	r3, r3, #6
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d023      	beq.n	8006d86 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d011      	beq.n	8006d6e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4e:	f043 0204 	orr.w	r2, r3, #4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d56:	2300      	movs	r3, #0
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	e00b      	b.n	8006d86 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	693b      	ldr	r3, [r7, #16]
        return;
 8006d84:	e06f      	b.n	8006e66 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d014      	beq.n	8006dbc <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	f043 0201 	orr.w	r2, r3, #1
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d04f      	beq.n	8006e64 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dd2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <HAL_SPI_IRQHandler+0x14c>
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d034      	beq.n	8006e5a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0203 	bic.w	r2, r2, #3
 8006dfe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d011      	beq.n	8006e2c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0c:	4a17      	ldr	r2, [pc, #92]	; (8006e6c <HAL_SPI_IRQHandler+0x1c8>)
 8006e0e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fc f9fa 	bl	800320e <HAL_DMA_Abort_IT>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d016      	beq.n	8006e62 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e38:	4a0c      	ldr	r2, [pc, #48]	; (8006e6c <HAL_SPI_IRQHandler+0x1c8>)
 8006e3a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fc f9e4 	bl	800320e <HAL_DMA_Abort_IT>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006e58:	e003      	b.n	8006e62 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f808 	bl	8006e70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e60:	e000      	b.n	8006e64 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006e62:	bf00      	nop
    return;
 8006e64:	bf00      	nop
  }
}
 8006e66:	3720      	adds	r7, #32
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	08006e83 	.word	0x08006e83

08006e70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr

08006e82 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff ffe7 	bl	8006e70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ebc:	f7fc f86e 	bl	8002f9c <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	4413      	add	r3, r2
 8006eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ecc:	f7fc f866 	bl	8002f9c <HAL_GetTick>
 8006ed0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ed2:	4b39      	ldr	r3, [pc, #228]	; (8006fb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	015b      	lsls	r3, r3, #5
 8006ed8:	0d1b      	lsrs	r3, r3, #20
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	fb02 f303 	mul.w	r3, r2, r3
 8006ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ee2:	e054      	b.n	8006f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d050      	beq.n	8006f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eec:	f7fc f856 	bl	8002f9c <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d902      	bls.n	8006f02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d13d      	bne.n	8006f7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f1a:	d111      	bne.n	8006f40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f24:	d004      	beq.n	8006f30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f2e:	d107      	bne.n	8006f40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f48:	d10f      	bne.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e017      	b.n	8006fae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4013      	ands	r3, r2
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d19b      	bne.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000340 	.word	0x20000340

08006fbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fc8:	4b1b      	ldr	r3, [pc, #108]	; (8007038 <SPI_EndRxTxTransaction+0x7c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1b      	ldr	r2, [pc, #108]	; (800703c <SPI_EndRxTxTransaction+0x80>)
 8006fce:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd2:	0d5b      	lsrs	r3, r3, #21
 8006fd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fd8:	fb02 f303 	mul.w	r3, r2, r3
 8006fdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fe6:	d112      	bne.n	800700e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2180      	movs	r1, #128	; 0x80
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7ff ff5a 	bl	8006eac <SPI_WaitFlagStateUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d016      	beq.n	800702c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007002:	f043 0220 	orr.w	r2, r3, #32
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e00f      	b.n	800702e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	3b01      	subs	r3, #1
 8007018:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d0f2      	beq.n	800700e <SPI_EndRxTxTransaction+0x52>
 8007028:	e000      	b.n	800702c <SPI_EndRxTxTransaction+0x70>
        break;
 800702a:	bf00      	nop
  }

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20000340 	.word	0x20000340
 800703c:	165e9f81 	.word	0x165e9f81

08007040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e031      	b.n	80070b6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fb fe06 	bl	8002c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f000 fad2 	bl	8007628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d001      	beq.n	80070d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e03a      	b.n	800714e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f8:	d00e      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x58>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a16      	ldr	r2, [pc, #88]	; (8007158 <HAL_TIM_Base_Start_IT+0x98>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d009      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x58>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a14      	ldr	r2, [pc, #80]	; (800715c <HAL_TIM_Base_Start_IT+0x9c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x58>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a13      	ldr	r2, [pc, #76]	; (8007160 <HAL_TIM_Base_Start_IT+0xa0>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d111      	bne.n	800713c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b06      	cmp	r3, #6
 8007128:	d010      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0201 	orr.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713a:	e007      	b.n	800714c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	bc80      	pop	{r7}
 8007156:	4770      	bx	lr
 8007158:	40000400 	.word	0x40000400
 800715c:	40000800 	.word	0x40000800
 8007160:	40010800 	.word	0x40010800

08007164 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e08f      	b.n	8007298 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7fb fd99 	bl	8002cc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6812      	ldr	r2, [r2, #0]
 80071a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a8:	f023 0307 	bic.w	r3, r3, #7
 80071ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4619      	mov	r1, r3
 80071b8:	4610      	mov	r0, r2
 80071ba:	f000 fa35 	bl	8007628 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	4313      	orrs	r3, r2
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007204:	f023 030c 	bic.w	r3, r3, #12
 8007208:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	4313      	orrs	r3, r2
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	011a      	lsls	r2, r3, #4
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	031b      	lsls	r3, r3, #12
 8007234:	4313      	orrs	r3, r2
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007242:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800724a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	4313      	orrs	r3, r2
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d122      	bne.n	80072fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d11b      	bne.n	80072fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f06f 0202 	mvn.w	r2, #2
 80072cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f985 	bl	80075f2 <HAL_TIM_IC_CaptureCallback>
 80072e8:	e005      	b.n	80072f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f978 	bl	80075e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f987 	bl	8007604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b04      	cmp	r3, #4
 8007308:	d122      	bne.n	8007350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b04      	cmp	r3, #4
 8007316:	d11b      	bne.n	8007350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0204 	mvn.w	r2, #4
 8007320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2202      	movs	r2, #2
 8007326:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f95b 	bl	80075f2 <HAL_TIM_IC_CaptureCallback>
 800733c:	e005      	b.n	800734a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f94e 	bl	80075e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f95d 	bl	8007604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f003 0308 	and.w	r3, r3, #8
 800735a:	2b08      	cmp	r3, #8
 800735c:	d122      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b08      	cmp	r3, #8
 800736a:	d11b      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f06f 0208 	mvn.w	r2, #8
 8007374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2204      	movs	r2, #4
 800737a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f931 	bl	80075f2 <HAL_TIM_IC_CaptureCallback>
 8007390:	e005      	b.n	800739e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f924 	bl	80075e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f933 	bl	8007604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2b10      	cmp	r3, #16
 80073b0:	d122      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b10      	cmp	r3, #16
 80073be:	d11b      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0210 	mvn.w	r2, #16
 80073c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2208      	movs	r2, #8
 80073ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f907 	bl	80075f2 <HAL_TIM_IC_CaptureCallback>
 80073e4:	e005      	b.n	80073f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f8fa 	bl	80075e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f909 	bl	8007604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b01      	cmp	r3, #1
 8007404:	d10e      	bne.n	8007424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	d107      	bne.n	8007424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0201 	mvn.w	r2, #1
 800741c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fb f8e4 	bl	80025ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742e:	2b40      	cmp	r3, #64	; 0x40
 8007430:	d10e      	bne.n	8007450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	d107      	bne.n	8007450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f8e3 	bl	8007616 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_TIM_ConfigClockSource+0x18>
 800746c:	2302      	movs	r3, #2
 800746e:	e0b3      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x180>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800748e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007496:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a8:	d03e      	beq.n	8007528 <HAL_TIM_ConfigClockSource+0xd0>
 80074aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ae:	f200 8087 	bhi.w	80075c0 <HAL_TIM_ConfigClockSource+0x168>
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b6:	f000 8085 	beq.w	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074be:	d87f      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x168>
 80074c0:	2b70      	cmp	r3, #112	; 0x70
 80074c2:	d01a      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0xa2>
 80074c4:	2b70      	cmp	r3, #112	; 0x70
 80074c6:	d87b      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x168>
 80074c8:	2b60      	cmp	r3, #96	; 0x60
 80074ca:	d050      	beq.n	800756e <HAL_TIM_ConfigClockSource+0x116>
 80074cc:	2b60      	cmp	r3, #96	; 0x60
 80074ce:	d877      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x168>
 80074d0:	2b50      	cmp	r3, #80	; 0x50
 80074d2:	d03c      	beq.n	800754e <HAL_TIM_ConfigClockSource+0xf6>
 80074d4:	2b50      	cmp	r3, #80	; 0x50
 80074d6:	d873      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x168>
 80074d8:	2b40      	cmp	r3, #64	; 0x40
 80074da:	d058      	beq.n	800758e <HAL_TIM_ConfigClockSource+0x136>
 80074dc:	2b40      	cmp	r3, #64	; 0x40
 80074de:	d86f      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x168>
 80074e0:	2b30      	cmp	r3, #48	; 0x30
 80074e2:	d064      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x156>
 80074e4:	2b30      	cmp	r3, #48	; 0x30
 80074e6:	d86b      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x168>
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d060      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x156>
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d867      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x168>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d05c      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x156>
 80074f4:	2b10      	cmp	r3, #16
 80074f6:	d05a      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074f8:	e062      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6899      	ldr	r1, [r3, #8]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f000 f966 	bl	80077da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800751c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	609a      	str	r2, [r3, #8]
      break;
 8007526:	e04e      	b.n	80075c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	6899      	ldr	r1, [r3, #8]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f000 f94f 	bl	80077da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800754a:	609a      	str	r2, [r3, #8]
      break;
 800754c:	e03b      	b.n	80075c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	6859      	ldr	r1, [r3, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	461a      	mov	r2, r3
 800755c:	f000 f8c6 	bl	80076ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2150      	movs	r1, #80	; 0x50
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f91d 	bl	80077a6 <TIM_ITRx_SetConfig>
      break;
 800756c:	e02b      	b.n	80075c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6859      	ldr	r1, [r3, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	461a      	mov	r2, r3
 800757c:	f000 f8e4 	bl	8007748 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2160      	movs	r1, #96	; 0x60
 8007586:	4618      	mov	r0, r3
 8007588:	f000 f90d 	bl	80077a6 <TIM_ITRx_SetConfig>
      break;
 800758c:	e01b      	b.n	80075c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	6859      	ldr	r1, [r3, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	461a      	mov	r2, r3
 800759c:	f000 f8a6 	bl	80076ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2140      	movs	r1, #64	; 0x40
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 f8fd 	bl	80077a6 <TIM_ITRx_SetConfig>
      break;
 80075ac:	e00b      	b.n	80075c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f000 f8f4 	bl	80077a6 <TIM_ITRx_SetConfig>
        break;
 80075be:	e002      	b.n	80075c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80075c0:	bf00      	nop
 80075c2:	e000      	b.n	80075c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80075c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr

080075f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr

08007604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr

08007616 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr

08007628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763e:	d007      	beq.n	8007650 <TIM_Base_SetConfig+0x28>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a25      	ldr	r2, [pc, #148]	; (80076d8 <TIM_Base_SetConfig+0xb0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_Base_SetConfig+0x28>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a24      	ldr	r2, [pc, #144]	; (80076dc <TIM_Base_SetConfig+0xb4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d108      	bne.n	8007662 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007668:	d013      	beq.n	8007692 <TIM_Base_SetConfig+0x6a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a1a      	ldr	r2, [pc, #104]	; (80076d8 <TIM_Base_SetConfig+0xb0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d00f      	beq.n	8007692 <TIM_Base_SetConfig+0x6a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a19      	ldr	r2, [pc, #100]	; (80076dc <TIM_Base_SetConfig+0xb4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00b      	beq.n	8007692 <TIM_Base_SetConfig+0x6a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a18      	ldr	r2, [pc, #96]	; (80076e0 <TIM_Base_SetConfig+0xb8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d007      	beq.n	8007692 <TIM_Base_SetConfig+0x6a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a17      	ldr	r2, [pc, #92]	; (80076e4 <TIM_Base_SetConfig+0xbc>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d003      	beq.n	8007692 <TIM_Base_SetConfig+0x6a>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a16      	ldr	r2, [pc, #88]	; (80076e8 <TIM_Base_SetConfig+0xc0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d108      	bne.n	80076a4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	615a      	str	r2, [r3, #20]
}
 80076ce:	bf00      	nop
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bc80      	pop	{r7}
 80076d6:	4770      	bx	lr
 80076d8:	40000400 	.word	0x40000400
 80076dc:	40000800 	.word	0x40000800
 80076e0:	40010800 	.word	0x40010800
 80076e4:	40010c00 	.word	0x40010c00
 80076e8:	40011000 	.word	0x40011000

080076ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	f023 0201 	bic.w	r2, r3, #1
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f023 030a 	bic.w	r3, r3, #10
 8007728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4313      	orrs	r3, r2
 8007730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	621a      	str	r2, [r3, #32]
}
 800773e:	bf00      	nop
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	bc80      	pop	{r7}
 8007746:	4770      	bx	lr

08007748 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	f023 0210 	bic.w	r2, r3, #16
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007772:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	031b      	lsls	r3, r3, #12
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007784:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	4313      	orrs	r3, r2
 800778e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	621a      	str	r2, [r3, #32]
}
 800779c:	bf00      	nop
 800779e:	371c      	adds	r7, #28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr

080077a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	f043 0307 	orr.w	r3, r3, #7
 80077c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	609a      	str	r2, [r3, #8]
}
 80077d0:	bf00      	nop
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bc80      	pop	{r7}
 80077d8:	4770      	bx	lr

080077da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077da:	b480      	push	{r7}
 80077dc:	b087      	sub	sp, #28
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	021a      	lsls	r2, r3, #8
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	431a      	orrs	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4313      	orrs	r3, r2
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	609a      	str	r2, [r3, #8]
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr

08007818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800782c:	2302      	movs	r3, #2
 800782e:	e046      	b.n	80078be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007872:	d00e      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a13      	ldr	r2, [pc, #76]	; (80078c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a12      	ldr	r2, [pc, #72]	; (80078cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d004      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a10      	ldr	r2, [pc, #64]	; (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d10c      	bne.n	80078ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr
 80078c8:	40000400 	.word	0x40000400
 80078cc:	40000800 	.word	0x40000800
 80078d0:	40010800 	.word	0x40010800

080078d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80078e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80078e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr

08007900 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007908:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800790c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	b29b      	uxth	r3, r3
 800791a:	43db      	mvns	r3, r3
 800791c:	b29b      	uxth	r3, r3
 800791e:	4013      	ands	r3, r2
 8007920:	b29a      	uxth	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007934:	b084      	sub	sp, #16
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	f107 0014 	add.w	r0, r7, #20
 8007942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	bc80      	pop	{r7}
 8007970:	b004      	add	sp, #16
 8007972:	4770      	bx	lr

08007974 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007974:	b480      	push	{r7}
 8007976:	b09b      	sub	sp, #108	; 0x6c
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	78db      	ldrb	r3, [r3, #3]
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d81f      	bhi.n	80079e6 <USB_ActivateEndpoint+0x72>
 80079a6:	a201      	add	r2, pc, #4	; (adr r2, 80079ac <USB_ActivateEndpoint+0x38>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	080079bd 	.word	0x080079bd
 80079b0:	080079d9 	.word	0x080079d9
 80079b4:	080079ef 	.word	0x080079ef
 80079b8:	080079cb 	.word	0x080079cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80079bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80079c8:	e012      	b.n	80079f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80079ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80079d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80079d6:	e00b      	b.n	80079f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80079d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80079e4:	e004      	b.n	80079f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80079ec:	e000      	b.n	80079f0 <USB_ActivateEndpoint+0x7c>
      break;
 80079ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	441a      	add	r2, r3
 80079fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	441a      	add	r2, r3
 8007a40:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	7b1b      	ldrb	r3, [r3, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f040 8149 	bne.w	8007cf4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8084 	beq.w	8007b74 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	011a      	lsls	r2, r3, #4
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a8e:	613b      	str	r3, [r7, #16]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	88db      	ldrh	r3, [r3, #6]
 8007a94:	085b      	lsrs	r3, r3, #1
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	81fb      	strh	r3, [r7, #14]
 8007aae:	89fb      	ldrh	r3, [r7, #14]
 8007ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01b      	beq.n	8007af0 <USB_ActivateEndpoint+0x17c>
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ace:	81bb      	strh	r3, [r7, #12]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	441a      	add	r2, r3
 8007ada:	89bb      	ldrh	r3, [r7, #12]
 8007adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	78db      	ldrb	r3, [r3, #3]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d020      	beq.n	8007b3a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0e:	813b      	strh	r3, [r7, #8]
 8007b10:	893b      	ldrh	r3, [r7, #8]
 8007b12:	f083 0320 	eor.w	r3, r3, #32
 8007b16:	813b      	strh	r3, [r7, #8]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	441a      	add	r2, r3
 8007b22:	893b      	ldrh	r3, [r7, #8]
 8007b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	8013      	strh	r3, [r2, #0]
 8007b38:	e27f      	b.n	800803a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b50:	817b      	strh	r3, [r7, #10]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	441a      	add	r2, r3
 8007b5c:	897b      	ldrh	r3, [r7, #10]
 8007b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	8013      	strh	r3, [r2, #0]
 8007b72:	e262      	b.n	800803a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b84:	4413      	add	r3, r2
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	011a      	lsls	r2, r3, #4
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	88db      	ldrh	r3, [r3, #6]
 8007b9c:	085b      	lsrs	r3, r3, #1
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	4413      	add	r3, r2
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	011a      	lsls	r2, r3, #4
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bca:	623b      	str	r3, [r7, #32]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d112      	bne.n	8007bfa <USB_ActivateEndpoint+0x286>
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	801a      	strh	r2, [r3, #0]
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	801a      	strh	r2, [r3, #0]
 8007bf8:	e02f      	b.n	8007c5a <USB_ActivateEndpoint+0x2e6>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b3e      	cmp	r3, #62	; 0x3e
 8007c00:	d813      	bhi.n	8007c2a <USB_ActivateEndpoint+0x2b6>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	085b      	lsrs	r3, r3, #1
 8007c08:	663b      	str	r3, [r7, #96]	; 0x60
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <USB_ActivateEndpoint+0x2a8>
 8007c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c18:	3301      	adds	r3, #1
 8007c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8007c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	029b      	lsls	r3, r3, #10
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	801a      	strh	r2, [r3, #0]
 8007c28:	e017      	b.n	8007c5a <USB_ActivateEndpoint+0x2e6>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	095b      	lsrs	r3, r3, #5
 8007c30:	663b      	str	r3, [r7, #96]	; 0x60
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 031f 	and.w	r3, r3, #31
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <USB_ActivateEndpoint+0x2d0>
 8007c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c40:	3b01      	subs	r3, #1
 8007c42:	663b      	str	r3, [r7, #96]	; 0x60
 8007c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	029b      	lsls	r3, r3, #10
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	83fb      	strh	r3, [r7, #30]
 8007c68:	8bfb      	ldrh	r3, [r7, #30]
 8007c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d01b      	beq.n	8007caa <USB_ActivateEndpoint+0x336>
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c88:	83bb      	strh	r3, [r7, #28]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	441a      	add	r2, r3
 8007c94:	8bbb      	ldrh	r3, [r7, #28]
 8007c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc0:	837b      	strh	r3, [r7, #26]
 8007cc2:	8b7b      	ldrh	r3, [r7, #26]
 8007cc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cc8:	837b      	strh	r3, [r7, #26]
 8007cca:	8b7b      	ldrh	r3, [r7, #26]
 8007ccc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007cd0:	837b      	strh	r3, [r7, #26]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	441a      	add	r2, r3
 8007cdc:	8b7b      	ldrh	r3, [r7, #26]
 8007cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	8013      	strh	r3, [r2, #0]
 8007cf2:	e1a2      	b.n	800803a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	441a      	add	r2, r3
 8007d18:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d40:	4413      	add	r3, r2
 8007d42:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	011a      	lsls	r2, r3, #4
 8007d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d52:	657b      	str	r3, [r7, #84]	; 0x54
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	891b      	ldrh	r3, [r3, #8]
 8007d58:	085b      	lsrs	r3, r3, #1
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	653b      	str	r3, [r7, #80]	; 0x50
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	461a      	mov	r2, r3
 8007d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d74:	4413      	add	r3, r2
 8007d76:	653b      	str	r3, [r7, #80]	; 0x50
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	011a      	lsls	r2, r3, #4
 8007d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	895b      	ldrh	r3, [r3, #10]
 8007d8c:	085b      	lsrs	r3, r3, #1
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d96:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f040 8091 	bne.w	8007ec4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007db0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d01b      	beq.n	8007df2 <USB_ActivateEndpoint+0x47e>
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	441a      	add	r2, r3
 8007ddc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	873b      	strh	r3, [r7, #56]	; 0x38
 8007e00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d01b      	beq.n	8007e42 <USB_ActivateEndpoint+0x4ce>
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e20:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	441a      	add	r2, r3
 8007e2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	441a      	add	r2, r3
 8007e74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ea0:	867b      	strh	r3, [r7, #50]	; 0x32
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	441a      	add	r2, r3
 8007eac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	8013      	strh	r3, [r2, #0]
 8007ec2:	e0ba      	b.n	800803a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ed4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d01d      	beq.n	8007f1c <USB_ActivateEndpoint+0x5a8>
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	441a      	add	r2, r3
 8007f04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007f2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01d      	beq.n	8007f74 <USB_ActivateEndpoint+0x600>
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	441a      	add	r2, r3
 8007f5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	78db      	ldrb	r3, [r3, #3]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d024      	beq.n	8007fc6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f9a:	f083 0320 	eor.w	r3, r3, #32
 8007f9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	441a      	add	r2, r3
 8007fac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	8013      	strh	r3, [r2, #0]
 8007fc4:	e01d      	b.n	8008002 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	441a      	add	r2, r3
 8007fea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008018:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	441a      	add	r2, r3
 8008024:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800802a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008036:	b29b      	uxth	r3, r3
 8008038:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800803a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800803e:	4618      	mov	r0, r3
 8008040:	376c      	adds	r7, #108	; 0x6c
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr

08008048 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008048:	b480      	push	{r7}
 800804a:	b08d      	sub	sp, #52	; 0x34
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	7b1b      	ldrb	r3, [r3, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f040 808e 	bne.w	8008178 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	785b      	ldrb	r3, [r3, #1]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d044      	beq.n	80080ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	81bb      	strh	r3, [r7, #12]
 8008072:	89bb      	ldrh	r3, [r7, #12]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01b      	beq.n	80080b4 <USB_DeactivateEndpoint+0x6c>
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008092:	817b      	strh	r3, [r7, #10]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	441a      	add	r2, r3
 800809e:	897b      	ldrh	r3, [r7, #10]
 80080a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ca:	813b      	strh	r3, [r7, #8]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	441a      	add	r2, r3
 80080d6:	893b      	ldrh	r3, [r7, #8]
 80080d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	8013      	strh	r3, [r2, #0]
 80080ec:	e192      	b.n	8008414 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	827b      	strh	r3, [r7, #18]
 80080fc:	8a7b      	ldrh	r3, [r7, #18]
 80080fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d01b      	beq.n	800813e <USB_DeactivateEndpoint+0xf6>
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811c:	823b      	strh	r3, [r7, #16]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	441a      	add	r2, r3
 8008128:	8a3b      	ldrh	r3, [r7, #16]
 800812a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800812e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813a:	b29b      	uxth	r3, r3
 800813c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008154:	81fb      	strh	r3, [r7, #14]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	441a      	add	r2, r3
 8008160:	89fb      	ldrh	r3, [r7, #14]
 8008162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800816a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800816e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008172:	b29b      	uxth	r3, r3
 8008174:	8013      	strh	r3, [r2, #0]
 8008176:	e14d      	b.n	8008414 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	785b      	ldrb	r3, [r3, #1]
 800817c:	2b00      	cmp	r3, #0
 800817e:	f040 80a5 	bne.w	80082cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	843b      	strh	r3, [r7, #32]
 8008190:	8c3b      	ldrh	r3, [r7, #32]
 8008192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d01b      	beq.n	80081d2 <USB_DeactivateEndpoint+0x18a>
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b0:	83fb      	strh	r3, [r7, #30]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	441a      	add	r2, r3
 80081bc:	8bfb      	ldrh	r3, [r7, #30]
 80081be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	83bb      	strh	r3, [r7, #28]
 80081e0:	8bbb      	ldrh	r3, [r7, #28]
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d01b      	beq.n	8008222 <USB_DeactivateEndpoint+0x1da>
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008200:	837b      	strh	r3, [r7, #26]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	441a      	add	r2, r3
 800820c:	8b7b      	ldrh	r3, [r7, #26]
 800820e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800821a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800821e:	b29b      	uxth	r3, r3
 8008220:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008238:	833b      	strh	r3, [r7, #24]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	441a      	add	r2, r3
 8008244:	8b3b      	ldrh	r3, [r7, #24]
 8008246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800824e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008252:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008256:	b29b      	uxth	r3, r3
 8008258:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	b29b      	uxth	r3, r3
 8008268:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800826c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008270:	82fb      	strh	r3, [r7, #22]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	441a      	add	r2, r3
 800827c:	8afb      	ldrh	r3, [r7, #22]
 800827e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800828a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828e:	b29b      	uxth	r3, r3
 8008290:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a8:	82bb      	strh	r3, [r7, #20]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	441a      	add	r2, r3
 80082b4:	8abb      	ldrh	r3, [r7, #20]
 80082b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	8013      	strh	r3, [r2, #0]
 80082ca:	e0a3      	b.n	8008414 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80082da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01b      	beq.n	800831c <USB_DeactivateEndpoint+0x2d4>
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	441a      	add	r2, r3
 8008306:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800830c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008318:	b29b      	uxth	r3, r3
 800831a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	857b      	strh	r3, [r7, #42]	; 0x2a
 800832a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800832c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01b      	beq.n	800836c <USB_DeactivateEndpoint+0x324>
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	b29b      	uxth	r3, r3
 8008342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834a:	853b      	strh	r3, [r7, #40]	; 0x28
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	441a      	add	r2, r3
 8008356:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800835c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008364:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008368:	b29b      	uxth	r3, r3
 800836a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	b29b      	uxth	r3, r3
 800837a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008382:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	441a      	add	r2, r3
 800838e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800839c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	441a      	add	r2, r3
 80083c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d8:	b29b      	uxth	r3, r3
 80083da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	441a      	add	r2, r3
 80083fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800840c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008410:	b29b      	uxth	r3, r3
 8008412:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3734      	adds	r7, #52	; 0x34
 800841a:	46bd      	mov	sp, r7
 800841c:	bc80      	pop	{r7}
 800841e:	4770      	bx	lr

08008420 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b0cc      	sub	sp, #304	; 0x130
 8008424:	af00      	add	r7, sp, #0
 8008426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800842e:	6018      	str	r0, [r3, #0]
 8008430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008438:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800843a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	2b01      	cmp	r3, #1
 8008448:	f041 817d 	bne.w	8009746 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800844c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	429a      	cmp	r2, r3
 8008466:	d908      	bls.n	800847a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008478:	e007      	b.n	800848a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800847a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800848a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	7b1b      	ldrb	r3, [r3, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d152      	bne.n	8008540 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800849a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6959      	ldr	r1, [r3, #20]
 80084a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	88da      	ldrh	r2, [r3, #6]
 80084b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80084bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80084c0:	6800      	ldr	r0, [r0, #0]
 80084c2:	f001 ff0e 	bl	800a2e2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80084c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80084ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084d2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	4619      	mov	r1, r3
 80084ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80084f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084f8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80084fc:	6812      	ldr	r2, [r2, #0]
 80084fe:	440a      	add	r2, r1
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	011a      	lsls	r2, r3, #4
 8008510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008514:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4413      	add	r3, r2
 800851c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008524:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852e:	b29a      	uxth	r2, r3
 8008530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008534:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	801a      	strh	r2, [r3, #0]
 800853c:	f001 b8b5 	b.w	80096aa <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008544:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	78db      	ldrb	r3, [r3, #3]
 800854c:	2b02      	cmp	r3, #2
 800854e:	f040 84c6 	bne.w	8008ede <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6a1a      	ldr	r2, [r3, #32]
 800855e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	429a      	cmp	r2, r3
 800856c:	f240 8443 	bls.w	8008df6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800857e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	b29b      	uxth	r3, r3
 800858e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008596:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800859a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800859e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	441a      	add	r2, r3
 80085b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80085b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80085c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80085cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6a1a      	ldr	r2, [r3, #32]
 80085d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085dc:	1ad2      	subs	r2, r2, r3
 80085de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80085ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	b29b      	uxth	r3, r3
 8008608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 823e 	beq.w	8008a8e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008616:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800861a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800861e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008622:	6812      	ldr	r2, [r2, #0]
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	2b00      	cmp	r3, #0
 8008634:	f040 809a 	bne.w	800876c <USB_EPStartXfer+0x34c>
 8008638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008640:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008644:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008650:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800865a:	b29b      	uxth	r3, r3
 800865c:	4619      	mov	r1, r3
 800865e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008666:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800866a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800866e:	6812      	ldr	r2, [r2, #0]
 8008670:	440a      	add	r2, r1
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	011a      	lsls	r2, r3, #4
 8008682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4413      	add	r3, r2
 800868e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008696:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d122      	bne.n	80086ea <USB_EPStartXfer+0x2ca>
 80086a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	801a      	strh	r2, [r3, #0]
 80086c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086da:	b29a      	uxth	r2, r3
 80086dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	801a      	strh	r2, [r3, #0]
 80086e8:	e079      	b.n	80087de <USB_EPStartXfer+0x3be>
 80086ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ee:	2b3e      	cmp	r3, #62	; 0x3e
 80086f0:	d81b      	bhi.n	800872a <USB_EPStartXfer+0x30a>
 80086f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f6:	085b      	lsrs	r3, r3, #1
 80086f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80086fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <USB_EPStartXfer+0x2f2>
 8008708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800870c:	3301      	adds	r3, #1
 800870e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008712:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008716:	b29b      	uxth	r3, r3
 8008718:	029b      	lsls	r3, r3, #10
 800871a:	b29a      	uxth	r2, r3
 800871c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008720:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	801a      	strh	r2, [r3, #0]
 8008728:	e059      	b.n	80087de <USB_EPStartXfer+0x3be>
 800872a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872e:	095b      	lsrs	r3, r3, #5
 8008730:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008738:	f003 031f 	and.w	r3, r3, #31
 800873c:	2b00      	cmp	r3, #0
 800873e:	d104      	bne.n	800874a <USB_EPStartXfer+0x32a>
 8008740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008744:	3b01      	subs	r3, #1
 8008746:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800874a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800874e:	b29b      	uxth	r3, r3
 8008750:	029b      	lsls	r3, r3, #10
 8008752:	b29b      	uxth	r3, r3
 8008754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800875c:	b29a      	uxth	r2, r3
 800875e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008762:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	801a      	strh	r2, [r3, #0]
 800876a:	e038      	b.n	80087de <USB_EPStartXfer+0x3be>
 800876c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008770:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d130      	bne.n	80087de <USB_EPStartXfer+0x3be>
 800877c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008780:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800878a:	b29b      	uxth	r3, r3
 800878c:	4619      	mov	r1, r3
 800878e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008792:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008796:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800879a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800879e:	6812      	ldr	r2, [r2, #0]
 80087a0:	440a      	add	r2, r1
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	011a      	lsls	r2, r3, #4
 80087b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4413      	add	r3, r2
 80087be:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80087c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80087de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	895b      	ldrh	r3, [r3, #10]
 80087ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6959      	ldr	r1, [r3, #20]
 80087fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fe:	b29b      	uxth	r3, r3
 8008800:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008804:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008808:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800880c:	6800      	ldr	r0, [r0, #0]
 800880e:	f001 fd68 	bl	800a2e2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	695a      	ldr	r2, [r3, #20]
 800881e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008822:	441a      	add	r2, r3
 8008824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6a1a      	ldr	r2, [r3, #32]
 800883c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	429a      	cmp	r2, r3
 800884a:	d90f      	bls.n	800886c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800884c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6a1a      	ldr	r2, [r3, #32]
 8008858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800885c:	1ad2      	subs	r2, r2, r3
 800885e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	621a      	str	r2, [r3, #32]
 800886a:	e00e      	b.n	800888a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800886c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6a1b      	ldr	r3, [r3, #32]
 8008878:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800887c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2200      	movs	r2, #0
 8008888:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800888a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	785b      	ldrb	r3, [r3, #1]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f040 809a 	bne.w	80089d0 <USB_EPStartXfer+0x5b0>
 800889c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80088a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088a8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80088ac:	6812      	ldr	r2, [r2, #0]
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088be:	b29b      	uxth	r3, r3
 80088c0:	4619      	mov	r1, r3
 80088c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80088ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088ce:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80088d2:	6812      	ldr	r2, [r2, #0]
 80088d4:	440a      	add	r2, r1
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	011a      	lsls	r2, r3, #4
 80088e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4413      	add	r3, r2
 80088f2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80088f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d122      	bne.n	800894e <USB_EPStartXfer+0x52e>
 8008908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	b29b      	uxth	r3, r3
 8008916:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800891a:	b29a      	uxth	r2, r3
 800891c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008920:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	801a      	strh	r2, [r3, #0]
 8008928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800893e:	b29a      	uxth	r2, r3
 8008940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008944:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	801a      	strh	r2, [r3, #0]
 800894c:	e083      	b.n	8008a56 <USB_EPStartXfer+0x636>
 800894e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008952:	2b3e      	cmp	r3, #62	; 0x3e
 8008954:	d81b      	bhi.n	800898e <USB_EPStartXfer+0x56e>
 8008956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800895a:	085b      	lsrs	r3, r3, #1
 800895c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	d004      	beq.n	8008976 <USB_EPStartXfer+0x556>
 800896c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008970:	3301      	adds	r3, #1
 8008972:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008976:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800897a:	b29b      	uxth	r3, r3
 800897c:	029b      	lsls	r3, r3, #10
 800897e:	b29a      	uxth	r2, r3
 8008980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008984:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	801a      	strh	r2, [r3, #0]
 800898c:	e063      	b.n	8008a56 <USB_EPStartXfer+0x636>
 800898e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008992:	095b      	lsrs	r3, r3, #5
 8008994:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800899c:	f003 031f 	and.w	r3, r3, #31
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d104      	bne.n	80089ae <USB_EPStartXfer+0x58e>
 80089a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80089a8:	3b01      	subs	r3, #1
 80089aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80089ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	029b      	lsls	r3, r3, #10
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	801a      	strh	r2, [r3, #0]
 80089ce:	e042      	b.n	8008a56 <USB_EPStartXfer+0x636>
 80089d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	785b      	ldrb	r3, [r3, #1]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d13a      	bne.n	8008a56 <USB_EPStartXfer+0x636>
 80089e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80089e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089ec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80089f0:	6812      	ldr	r2, [r2, #0]
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	4619      	mov	r1, r3
 8008a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008a0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a12:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008a16:	6812      	ldr	r2, [r2, #0]
 8008a18:	440a      	add	r2, r1
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	011a      	lsls	r2, r3, #4
 8008a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4413      	add	r3, r2
 8008a36:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	891b      	ldrh	r3, [r3, #8]
 8008a62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6959      	ldr	r1, [r3, #20]
 8008a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008a80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008a84:	6800      	ldr	r0, [r0, #0]
 8008a86:	f001 fc2c 	bl	800a2e2 <USB_WritePMA>
 8008a8a:	f000 be0e 	b.w	80096aa <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d16d      	bne.n	8008b7a <USB_EPStartXfer+0x75a>
 8008a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	461a      	mov	r2, r3
 8008abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008abe:	4413      	add	r3, r2
 8008ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	011a      	lsls	r2, r3, #4
 8008ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8008ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d112      	bne.n	8008b08 <USB_EPStartXfer+0x6e8>
 8008ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b04:	801a      	strh	r2, [r3, #0]
 8008b06:	e063      	b.n	8008bd0 <USB_EPStartXfer+0x7b0>
 8008b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8008b0e:	d817      	bhi.n	8008b40 <USB_EPStartXfer+0x720>
 8008b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b14:	085b      	lsrs	r3, r3, #1
 8008b16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <USB_EPStartXfer+0x710>
 8008b26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008b30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	029b      	lsls	r3, r3, #10
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b3c:	801a      	strh	r2, [r3, #0]
 8008b3e:	e047      	b.n	8008bd0 <USB_EPStartXfer+0x7b0>
 8008b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b44:	095b      	lsrs	r3, r3, #5
 8008b46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b4e:	f003 031f 	and.w	r3, r3, #31
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d104      	bne.n	8008b60 <USB_EPStartXfer+0x740>
 8008b56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008b60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	029b      	lsls	r3, r3, #10
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b76:	801a      	strh	r2, [r3, #0]
 8008b78:	e02a      	b.n	8008bd0 <USB_EPStartXfer+0x7b0>
 8008b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d122      	bne.n	8008bd0 <USB_EPStartXfer+0x7b0>
 8008b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	653b      	str	r3, [r7, #80]	; 0x50
 8008b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008baa:	4413      	add	r3, r2
 8008bac:	653b      	str	r3, [r7, #80]	; 0x50
 8008bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	011a      	lsls	r2, r3, #4
 8008bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	891b      	ldrh	r3, [r3, #8]
 8008bdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6959      	ldr	r1, [r3, #20]
 8008bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008bf6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008bfa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008bfe:	6800      	ldr	r0, [r0, #0]
 8008c00:	f001 fb6f 	bl	800a2e2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	695a      	ldr	r2, [r3, #20]
 8008c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c14:	441a      	add	r2, r3
 8008c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6a1a      	ldr	r2, [r3, #32]
 8008c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d90f      	bls.n	8008c5e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8008c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6a1a      	ldr	r2, [r3, #32]
 8008c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c4e:	1ad2      	subs	r2, r2, r3
 8008c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	621a      	str	r2, [r3, #32]
 8008c5c:	e00e      	b.n	8008c7c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8008c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	643b      	str	r3, [r7, #64]	; 0x40
 8008c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	785b      	ldrb	r3, [r3, #1]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d16d      	bne.n	8008d74 <USB_EPStartXfer+0x954>
 8008c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb8:	4413      	add	r3, r2
 8008cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	011a      	lsls	r2, r3, #4
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	4413      	add	r3, r2
 8008cce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d112      	bne.n	8008d02 <USB_EPStartXfer+0x8e2>
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfe:	801a      	strh	r2, [r3, #0]
 8008d00:	e05d      	b.n	8008dbe <USB_EPStartXfer+0x99e>
 8008d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d06:	2b3e      	cmp	r3, #62	; 0x3e
 8008d08:	d817      	bhi.n	8008d3a <USB_EPStartXfer+0x91a>
 8008d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d004      	beq.n	8008d2a <USB_EPStartXfer+0x90a>
 8008d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008d24:	3301      	adds	r3, #1
 8008d26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	029b      	lsls	r3, r3, #10
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d36:	801a      	strh	r2, [r3, #0]
 8008d38:	e041      	b.n	8008dbe <USB_EPStartXfer+0x99e>
 8008d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d3e:	095b      	lsrs	r3, r3, #5
 8008d40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d48:	f003 031f 	and.w	r3, r3, #31
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d104      	bne.n	8008d5a <USB_EPStartXfer+0x93a>
 8008d50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008d54:	3b01      	subs	r3, #1
 8008d56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008d5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	029b      	lsls	r3, r3, #10
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d70:	801a      	strh	r2, [r3, #0]
 8008d72:	e024      	b.n	8008dbe <USB_EPStartXfer+0x99e>
 8008d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	785b      	ldrb	r3, [r3, #1]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d11c      	bne.n	8008dbe <USB_EPStartXfer+0x99e>
 8008d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d98:	4413      	add	r3, r2
 8008d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8008d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	011a      	lsls	r2, r3, #4
 8008daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dac:	4413      	add	r3, r2
 8008dae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	895b      	ldrh	r3, [r3, #10]
 8008dca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6959      	ldr	r1, [r3, #20]
 8008dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008de4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008de8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008dec:	6800      	ldr	r0, [r0, #0]
 8008dee:	f001 fa78 	bl	800a2e2 <USB_WritePMA>
 8008df2:	f000 bc5a 	b.w	80096aa <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	441a      	add	r2, r3
 8008e4a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e82:	4413      	add	r3, r2
 8008e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	011a      	lsls	r2, r3, #4
 8008e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e96:	4413      	add	r3, r2
 8008e98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ea6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	891b      	ldrh	r3, [r3, #8]
 8008eb4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6959      	ldr	r1, [r3, #20]
 8008ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ece:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008ed2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008ed6:	6800      	ldr	r0, [r0, #0]
 8008ed8:	f001 fa03 	bl	800a2e2 <USB_WritePMA>
 8008edc:	e3e5      	b.n	80096aa <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f04:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	441a      	add	r2, r3
 8008f22:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f2e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6a1a      	ldr	r2, [r3, #32]
 8008f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f4a:	1ad2      	subs	r2, r2, r3
 8008f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 81bc 	beq.w	80092f8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	785b      	ldrb	r3, [r3, #1]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d16d      	bne.n	800907a <USB_EPStartXfer+0xc5a>
 8008f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	461a      	mov	r2, r3
 8008fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fbe:	4413      	add	r3, r2
 8008fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	011a      	lsls	r2, r3, #4
 8008fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fd8:	677b      	str	r3, [r7, #116]	; 0x74
 8008fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d112      	bne.n	8009008 <USB_EPStartXfer+0xbe8>
 8008fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009000:	b29a      	uxth	r2, r3
 8009002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009004:	801a      	strh	r2, [r3, #0]
 8009006:	e060      	b.n	80090ca <USB_EPStartXfer+0xcaa>
 8009008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800900c:	2b3e      	cmp	r3, #62	; 0x3e
 800900e:	d817      	bhi.n	8009040 <USB_EPStartXfer+0xc20>
 8009010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009014:	085b      	lsrs	r3, r3, #1
 8009016:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800901a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d004      	beq.n	8009030 <USB_EPStartXfer+0xc10>
 8009026:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800902a:	3301      	adds	r3, #1
 800902c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009030:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009034:	b29b      	uxth	r3, r3
 8009036:	029b      	lsls	r3, r3, #10
 8009038:	b29a      	uxth	r2, r3
 800903a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800903c:	801a      	strh	r2, [r3, #0]
 800903e:	e044      	b.n	80090ca <USB_EPStartXfer+0xcaa>
 8009040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800904a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800904e:	f003 031f 	and.w	r3, r3, #31
 8009052:	2b00      	cmp	r3, #0
 8009054:	d104      	bne.n	8009060 <USB_EPStartXfer+0xc40>
 8009056:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800905a:	3b01      	subs	r3, #1
 800905c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009060:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009064:	b29b      	uxth	r3, r3
 8009066:	029b      	lsls	r3, r3, #10
 8009068:	b29b      	uxth	r3, r3
 800906a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800906e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009072:	b29a      	uxth	r2, r3
 8009074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009076:	801a      	strh	r2, [r3, #0]
 8009078:	e027      	b.n	80090ca <USB_EPStartXfer+0xcaa>
 800907a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800907e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	785b      	ldrb	r3, [r3, #1]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d11f      	bne.n	80090ca <USB_EPStartXfer+0xcaa>
 800908a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800908e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009098:	b29b      	uxth	r3, r3
 800909a:	461a      	mov	r2, r3
 800909c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090a0:	4413      	add	r3, r2
 80090a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	011a      	lsls	r2, r3, #4
 80090b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090b8:	4413      	add	r3, r2
 80090ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80090c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80090ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	895b      	ldrh	r3, [r3, #10]
 80090d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6959      	ldr	r1, [r3, #20]
 80090e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80090f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80090f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80090f8:	6800      	ldr	r0, [r0, #0]
 80090fa:	f001 f8f2 	bl	800a2e2 <USB_WritePMA>
          ep->xfer_buff += len;
 80090fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	695a      	ldr	r2, [r3, #20]
 800910a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800910e:	441a      	add	r2, r3
 8009110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800911c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6a1a      	ldr	r2, [r3, #32]
 8009128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800912c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	429a      	cmp	r2, r3
 8009136:	d90f      	bls.n	8009158 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8009138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800913c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6a1a      	ldr	r2, [r3, #32]
 8009144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009148:	1ad2      	subs	r2, r2, r3
 800914a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	621a      	str	r2, [r3, #32]
 8009156:	e00e      	b.n	8009176 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8009158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800915c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800916c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2200      	movs	r2, #0
 8009174:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 8295 	beq.w	80096aa <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d16d      	bne.n	800926c <USB_EPStartXfer+0xe4c>
 8009190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	66bb      	str	r3, [r7, #104]	; 0x68
 800919c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	461a      	mov	r2, r3
 80091ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091b0:	4413      	add	r3, r2
 80091b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80091b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	011a      	lsls	r2, r3, #4
 80091c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091c4:	4413      	add	r3, r2
 80091c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091ca:	667b      	str	r3, [r7, #100]	; 0x64
 80091cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d112      	bne.n	80091fa <USB_EPStartXfer+0xdda>
 80091d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091de:	b29a      	uxth	r2, r3
 80091e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091e2:	801a      	strh	r2, [r3, #0]
 80091e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091f6:	801a      	strh	r2, [r3, #0]
 80091f8:	e063      	b.n	80092c2 <USB_EPStartXfer+0xea2>
 80091fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009200:	d817      	bhi.n	8009232 <USB_EPStartXfer+0xe12>
 8009202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800920c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	d004      	beq.n	8009222 <USB_EPStartXfer+0xe02>
 8009218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800921c:	3301      	adds	r3, #1
 800921e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009226:	b29b      	uxth	r3, r3
 8009228:	029b      	lsls	r3, r3, #10
 800922a:	b29a      	uxth	r2, r3
 800922c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	e047      	b.n	80092c2 <USB_EPStartXfer+0xea2>
 8009232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009236:	095b      	lsrs	r3, r3, #5
 8009238:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800923c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009240:	f003 031f 	and.w	r3, r3, #31
 8009244:	2b00      	cmp	r3, #0
 8009246:	d104      	bne.n	8009252 <USB_EPStartXfer+0xe32>
 8009248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800924c:	3b01      	subs	r3, #1
 800924e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009256:	b29b      	uxth	r3, r3
 8009258:	029b      	lsls	r3, r3, #10
 800925a:	b29b      	uxth	r3, r3
 800925c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009264:	b29a      	uxth	r2, r3
 8009266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009268:	801a      	strh	r2, [r3, #0]
 800926a:	e02a      	b.n	80092c2 <USB_EPStartXfer+0xea2>
 800926c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	785b      	ldrb	r3, [r3, #1]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d122      	bne.n	80092c2 <USB_EPStartXfer+0xea2>
 800927c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	673b      	str	r3, [r7, #112]	; 0x70
 8009288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009296:	b29b      	uxth	r3, r3
 8009298:	461a      	mov	r2, r3
 800929a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800929c:	4413      	add	r3, r2
 800929e:	673b      	str	r3, [r7, #112]	; 0x70
 80092a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	011a      	lsls	r2, r3, #4
 80092ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092b0:	4413      	add	r3, r2
 80092b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092bc:	b29a      	uxth	r2, r3
 80092be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80092c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	891b      	ldrh	r3, [r3, #8]
 80092ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6959      	ldr	r1, [r3, #20]
 80092de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80092e8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80092ec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80092f0:	6800      	ldr	r0, [r0, #0]
 80092f2:	f000 fff6 	bl	800a2e2 <USB_WritePMA>
 80092f6:	e1d8      	b.n	80096aa <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80092f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	785b      	ldrb	r3, [r3, #1]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d178      	bne.n	80093fa <USB_EPStartXfer+0xfda>
 8009308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800930c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009324:	b29b      	uxth	r3, r3
 8009326:	461a      	mov	r2, r3
 8009328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800932c:	4413      	add	r3, r2
 800932e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	011a      	lsls	r2, r3, #4
 8009340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009344:	4413      	add	r3, r2
 8009346:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800934a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800934e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009352:	2b00      	cmp	r3, #0
 8009354:	d116      	bne.n	8009384 <USB_EPStartXfer+0xf64>
 8009356:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	b29b      	uxth	r3, r3
 800935e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009362:	b29a      	uxth	r2, r3
 8009364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009368:	801a      	strh	r2, [r3, #0]
 800936a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800937a:	b29a      	uxth	r2, r3
 800937c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009380:	801a      	strh	r2, [r3, #0]
 8009382:	e06b      	b.n	800945c <USB_EPStartXfer+0x103c>
 8009384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009388:	2b3e      	cmp	r3, #62	; 0x3e
 800938a:	d818      	bhi.n	80093be <USB_EPStartXfer+0xf9e>
 800938c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009390:	085b      	lsrs	r3, r3, #1
 8009392:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d004      	beq.n	80093ac <USB_EPStartXfer+0xf8c>
 80093a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80093a6:	3301      	adds	r3, #1
 80093a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80093ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	029b      	lsls	r3, r3, #10
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093ba:	801a      	strh	r2, [r3, #0]
 80093bc:	e04e      	b.n	800945c <USB_EPStartXfer+0x103c>
 80093be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093c2:	095b      	lsrs	r3, r3, #5
 80093c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80093c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093cc:	f003 031f 	and.w	r3, r3, #31
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <USB_EPStartXfer+0xfbe>
 80093d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80093d8:	3b01      	subs	r3, #1
 80093da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80093de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	029b      	lsls	r3, r3, #10
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093f6:	801a      	strh	r2, [r3, #0]
 80093f8:	e030      	b.n	800945c <USB_EPStartXfer+0x103c>
 80093fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	785b      	ldrb	r3, [r3, #1]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d128      	bne.n	800945c <USB_EPStartXfer+0x103c>
 800940a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800940e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800941c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009426:	b29b      	uxth	r3, r3
 8009428:	461a      	mov	r2, r3
 800942a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800942e:	4413      	add	r3, r2
 8009430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	011a      	lsls	r2, r3, #4
 8009442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009446:	4413      	add	r3, r2
 8009448:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800944c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009454:	b29a      	uxth	r2, r3
 8009456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800945a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800945c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	891b      	ldrh	r3, [r3, #8]
 8009468:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800946c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6959      	ldr	r1, [r3, #20]
 8009478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800947c:	b29b      	uxth	r3, r3
 800947e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009482:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009486:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800948a:	6800      	ldr	r0, [r0, #0]
 800948c:	f000 ff29 	bl	800a2e2 <USB_WritePMA>
          ep->xfer_buff += len;
 8009490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	695a      	ldr	r2, [r3, #20]
 800949c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a0:	441a      	add	r2, r3
 80094a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80094ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6a1a      	ldr	r2, [r3, #32]
 80094ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d90f      	bls.n	80094ea <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80094ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6a1a      	ldr	r2, [r3, #32]
 80094d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094da:	1ad2      	subs	r2, r2, r3
 80094dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	621a      	str	r2, [r3, #32]
 80094e8:	e00e      	b.n	8009508 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80094ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80094fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2200      	movs	r2, #0
 8009506:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 80cc 	beq.w	80096aa <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009516:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	785b      	ldrb	r3, [r3, #1]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d178      	bne.n	8009622 <USB_EPStartXfer+0x1202>
 8009530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800953e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009542:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800954c:	b29b      	uxth	r3, r3
 800954e:	461a      	mov	r2, r3
 8009550:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009554:	4413      	add	r3, r2
 8009556:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800955a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800955e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	011a      	lsls	r2, r3, #4
 8009568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800956c:	4413      	add	r3, r2
 800956e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800957a:	2b00      	cmp	r3, #0
 800957c:	d116      	bne.n	80095ac <USB_EPStartXfer+0x118c>
 800957e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	b29b      	uxth	r3, r3
 8009586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800958a:	b29a      	uxth	r2, r3
 800958c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009590:	801a      	strh	r2, [r3, #0]
 8009592:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	b29b      	uxth	r3, r3
 800959a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800959e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095a8:	801a      	strh	r2, [r3, #0]
 80095aa:	e064      	b.n	8009676 <USB_EPStartXfer+0x1256>
 80095ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b0:	2b3e      	cmp	r3, #62	; 0x3e
 80095b2:	d818      	bhi.n	80095e6 <USB_EPStartXfer+0x11c6>
 80095b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b8:	085b      	lsrs	r3, r3, #1
 80095ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80095be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d004      	beq.n	80095d4 <USB_EPStartXfer+0x11b4>
 80095ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095ce:	3301      	adds	r3, #1
 80095d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80095d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095d8:	b29b      	uxth	r3, r3
 80095da:	029b      	lsls	r3, r3, #10
 80095dc:	b29a      	uxth	r2, r3
 80095de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095e2:	801a      	strh	r2, [r3, #0]
 80095e4:	e047      	b.n	8009676 <USB_EPStartXfer+0x1256>
 80095e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ea:	095b      	lsrs	r3, r3, #5
 80095ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80095f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f4:	f003 031f 	and.w	r3, r3, #31
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d104      	bne.n	8009606 <USB_EPStartXfer+0x11e6>
 80095fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009600:	3b01      	subs	r3, #1
 8009602:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800960a:	b29b      	uxth	r3, r3
 800960c:	029b      	lsls	r3, r3, #10
 800960e:	b29b      	uxth	r3, r3
 8009610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009618:	b29a      	uxth	r2, r3
 800961a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800961e:	801a      	strh	r2, [r3, #0]
 8009620:	e029      	b.n	8009676 <USB_EPStartXfer+0x1256>
 8009622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	785b      	ldrb	r3, [r3, #1]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d121      	bne.n	8009676 <USB_EPStartXfer+0x1256>
 8009632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009636:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009640:	b29b      	uxth	r3, r3
 8009642:	461a      	mov	r2, r3
 8009644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009648:	4413      	add	r3, r2
 800964a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800964e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	011a      	lsls	r2, r3, #4
 800965c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009660:	4413      	add	r3, r2
 8009662:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800966a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800966e:	b29a      	uxth	r2, r3
 8009670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009674:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800967a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	895b      	ldrh	r3, [r3, #10]
 8009682:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800968a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6959      	ldr	r1, [r3, #20]
 8009692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009696:	b29b      	uxth	r3, r3
 8009698:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800969c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80096a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80096a4:	6800      	ldr	r0, [r0, #0]
 80096a6:	f000 fe1c 	bl	800a2e2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80096aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096cc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80096d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d8:	8013      	strh	r3, [r2, #0]
 80096da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096de:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80096e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096e6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80096ea:	8812      	ldrh	r2, [r2, #0]
 80096ec:	f082 0210 	eor.w	r2, r2, #16
 80096f0:	801a      	strh	r2, [r3, #0]
 80096f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80096fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096fe:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009702:	8812      	ldrh	r2, [r2, #0]
 8009704:	f082 0220 	eor.w	r2, r2, #32
 8009708:	801a      	strh	r2, [r3, #0]
 800970a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800970e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	441a      	add	r2, r3
 8009724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009728:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800973a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973e:	b29b      	uxth	r3, r3
 8009740:	8013      	strh	r3, [r2, #0]
 8009742:	f000 bc9f 	b.w	800a084 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800974a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	7b1b      	ldrb	r3, [r3, #12]
 8009752:	2b00      	cmp	r3, #0
 8009754:	f040 80ae 	bne.w	80098b4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800975c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	699a      	ldr	r2, [r3, #24]
 8009764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	429a      	cmp	r2, r3
 8009772:	d917      	bls.n	80097a4 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	699a      	ldr	r2, [r3, #24]
 8009790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009794:	1ad2      	subs	r2, r2, r3
 8009796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800979a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	619a      	str	r2, [r3, #24]
 80097a2:	e00e      	b.n	80097c2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80097a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80097b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2200      	movs	r2, #0
 80097c0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80097c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097de:	b29b      	uxth	r3, r3
 80097e0:	461a      	mov	r2, r3
 80097e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80097e6:	4413      	add	r3, r2
 80097e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	011a      	lsls	r2, r3, #4
 80097fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80097fe:	4413      	add	r3, r2
 8009800:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800980c:	2b00      	cmp	r3, #0
 800980e:	d116      	bne.n	800983e <USB_EPStartXfer+0x141e>
 8009810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	b29b      	uxth	r3, r3
 8009818:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800981c:	b29a      	uxth	r2, r3
 800981e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009822:	801a      	strh	r2, [r3, #0]
 8009824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009828:	881b      	ldrh	r3, [r3, #0]
 800982a:	b29b      	uxth	r3, r3
 800982c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009834:	b29a      	uxth	r2, r3
 8009836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800983a:	801a      	strh	r2, [r3, #0]
 800983c:	e3e8      	b.n	800a010 <USB_EPStartXfer+0x1bf0>
 800983e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009842:	2b3e      	cmp	r3, #62	; 0x3e
 8009844:	d818      	bhi.n	8009878 <USB_EPStartXfer+0x1458>
 8009846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800984a:	085b      	lsrs	r3, r3, #1
 800984c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <USB_EPStartXfer+0x1446>
 800985c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009860:	3301      	adds	r3, #1
 8009862:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009866:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800986a:	b29b      	uxth	r3, r3
 800986c:	029b      	lsls	r3, r3, #10
 800986e:	b29a      	uxth	r2, r3
 8009870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009874:	801a      	strh	r2, [r3, #0]
 8009876:	e3cb      	b.n	800a010 <USB_EPStartXfer+0x1bf0>
 8009878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800987c:	095b      	lsrs	r3, r3, #5
 800987e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009886:	f003 031f 	and.w	r3, r3, #31
 800988a:	2b00      	cmp	r3, #0
 800988c:	d104      	bne.n	8009898 <USB_EPStartXfer+0x1478>
 800988e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009892:	3b01      	subs	r3, #1
 8009894:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009898:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800989c:	b29b      	uxth	r3, r3
 800989e:	029b      	lsls	r3, r3, #10
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098b0:	801a      	strh	r2, [r3, #0]
 80098b2:	e3ad      	b.n	800a010 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80098b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	78db      	ldrb	r3, [r3, #3]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	f040 8200 	bne.w	8009cc6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80098c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	785b      	ldrb	r3, [r3, #1]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f040 8091 	bne.w	80099fa <USB_EPStartXfer+0x15da>
 80098d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80098e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	461a      	mov	r2, r3
 80098f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80098fc:	4413      	add	r3, r2
 80098fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	011a      	lsls	r2, r3, #4
 8009910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009914:	4413      	add	r3, r2
 8009916:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800991a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800991e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d116      	bne.n	800995c <USB_EPStartXfer+0x153c>
 800992e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29b      	uxth	r3, r3
 8009936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800993a:	b29a      	uxth	r2, r3
 800993c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009940:	801a      	strh	r2, [r3, #0]
 8009942:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	b29b      	uxth	r3, r3
 800994a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009952:	b29a      	uxth	r2, r3
 8009954:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009958:	801a      	strh	r2, [r3, #0]
 800995a:	e083      	b.n	8009a64 <USB_EPStartXfer+0x1644>
 800995c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	2b3e      	cmp	r3, #62	; 0x3e
 800996a:	d820      	bhi.n	80099ae <USB_EPStartXfer+0x158e>
 800996c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	085b      	lsrs	r3, r3, #1
 800997a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800997e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d004      	beq.n	800999c <USB_EPStartXfer+0x157c>
 8009992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009996:	3301      	adds	r3, #1
 8009998:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800999c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	029b      	lsls	r3, r3, #10
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80099aa:	801a      	strh	r2, [r3, #0]
 80099ac:	e05a      	b.n	8009a64 <USB_EPStartXfer+0x1644>
 80099ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	095b      	lsrs	r3, r3, #5
 80099bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80099c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	f003 031f 	and.w	r3, r3, #31
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d104      	bne.n	80099de <USB_EPStartXfer+0x15be>
 80099d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d8:	3b01      	subs	r3, #1
 80099da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80099de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	029b      	lsls	r3, r3, #10
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80099f6:	801a      	strh	r2, [r3, #0]
 80099f8:	e034      	b.n	8009a64 <USB_EPStartXfer+0x1644>
 80099fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d12c      	bne.n	8009a64 <USB_EPStartXfer+0x1644>
 8009a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	461a      	mov	r2, r3
 8009a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a2e:	4413      	add	r3, r2
 8009a30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	011a      	lsls	r2, r3, #4
 8009a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a46:	4413      	add	r3, r2
 8009a48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009a62:	801a      	strh	r2, [r3, #0]
 8009a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	785b      	ldrb	r3, [r3, #1]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f040 8091 	bne.w	8009ba6 <USB_EPStartXfer+0x1786>
 8009a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	011a      	lsls	r2, r3, #4
 8009abc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ac6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d116      	bne.n	8009b08 <USB_EPStartXfer+0x16e8>
 8009ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009aec:	801a      	strh	r2, [r3, #0]
 8009aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009b04:	801a      	strh	r2, [r3, #0]
 8009b06:	e07c      	b.n	8009c02 <USB_EPStartXfer+0x17e2>
 8009b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	2b3e      	cmp	r3, #62	; 0x3e
 8009b16:	d820      	bhi.n	8009b5a <USB_EPStartXfer+0x173a>
 8009b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	085b      	lsrs	r3, r3, #1
 8009b26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d004      	beq.n	8009b48 <USB_EPStartXfer+0x1728>
 8009b3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b42:	3301      	adds	r3, #1
 8009b44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	029b      	lsls	r3, r3, #10
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009b56:	801a      	strh	r2, [r3, #0]
 8009b58:	e053      	b.n	8009c02 <USB_EPStartXfer+0x17e2>
 8009b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	095b      	lsrs	r3, r3, #5
 8009b68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	f003 031f 	and.w	r3, r3, #31
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d104      	bne.n	8009b8a <USB_EPStartXfer+0x176a>
 8009b80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b84:	3b01      	subs	r3, #1
 8009b86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	029b      	lsls	r3, r3, #10
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ba2:	801a      	strh	r2, [r3, #0]
 8009ba4:	e02d      	b.n	8009c02 <USB_EPStartXfer+0x17e2>
 8009ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	785b      	ldrb	r3, [r3, #1]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d125      	bne.n	8009c02 <USB_EPStartXfer+0x17e2>
 8009bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009bcc:	4413      	add	r3, r2
 8009bce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	011a      	lsls	r2, r3, #4
 8009be0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009be4:	4413      	add	r3, r2
 8009be6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c00:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 81fe 	beq.w	800a010 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c34:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <USB_EPStartXfer+0x182c>
 8009c40:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10d      	bne.n	8009c68 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c4c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f040 81db 	bne.w	800a010 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c5a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f040 81d4 	bne.w	800a010 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	881b      	ldrh	r3, [r3, #0]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c8e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	441a      	add	r2, r3
 8009cac:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	8013      	strh	r3, [r2, #0]
 8009cc4:	e1a4      	b.n	800a010 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	78db      	ldrb	r3, [r3, #3]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	f040 819a 	bne.w	800a00c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	699a      	ldr	r2, [r3, #24]
 8009ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d917      	bls.n	8009d24 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8009cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	699a      	ldr	r2, [r3, #24]
 8009d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d14:	1ad2      	subs	r2, r2, r3
 8009d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	619a      	str	r2, [r3, #24]
 8009d22:	e00e      	b.n	8009d42 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8009d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	785b      	ldrb	r3, [r3, #1]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d178      	bne.n	8009e44 <USB_EPStartXfer+0x1a24>
 8009d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	461a      	mov	r2, r3
 8009d72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009d76:	4413      	add	r3, r2
 8009d78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	011a      	lsls	r2, r3, #4
 8009d8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009d8e:	4413      	add	r3, r2
 8009d90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d116      	bne.n	8009dce <USB_EPStartXfer+0x19ae>
 8009da0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009db2:	801a      	strh	r2, [r3, #0]
 8009db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009dca:	801a      	strh	r2, [r3, #0]
 8009dcc:	e06b      	b.n	8009ea6 <USB_EPStartXfer+0x1a86>
 8009dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dd2:	2b3e      	cmp	r3, #62	; 0x3e
 8009dd4:	d818      	bhi.n	8009e08 <USB_EPStartXfer+0x19e8>
 8009dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dda:	085b      	lsrs	r3, r3, #1
 8009ddc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d004      	beq.n	8009df6 <USB_EPStartXfer+0x19d6>
 8009dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009df0:	3301      	adds	r3, #1
 8009df2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	029b      	lsls	r3, r3, #10
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e04:	801a      	strh	r2, [r3, #0]
 8009e06:	e04e      	b.n	8009ea6 <USB_EPStartXfer+0x1a86>
 8009e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e0c:	095b      	lsrs	r3, r3, #5
 8009e0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e16:	f003 031f 	and.w	r3, r3, #31
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d104      	bne.n	8009e28 <USB_EPStartXfer+0x1a08>
 8009e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e22:	3b01      	subs	r3, #1
 8009e24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	029b      	lsls	r3, r3, #10
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e40:	801a      	strh	r2, [r3, #0]
 8009e42:	e030      	b.n	8009ea6 <USB_EPStartXfer+0x1a86>
 8009e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d128      	bne.n	8009ea6 <USB_EPStartXfer+0x1a86>
 8009e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	461a      	mov	r2, r3
 8009e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e78:	4413      	add	r3, r2
 8009e7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	011a      	lsls	r2, r3, #4
 8009e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e90:	4413      	add	r3, r2
 8009e92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ea4:	801a      	strh	r2, [r3, #0]
 8009ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	785b      	ldrb	r3, [r3, #1]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d178      	bne.n	8009fb6 <USB_EPStartXfer+0x1b96>
 8009ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ee8:	4413      	add	r3, r2
 8009eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	011a      	lsls	r2, r3, #4
 8009efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f00:	4413      	add	r3, r2
 8009f02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d116      	bne.n	8009f40 <USB_EPStartXfer+0x1b20>
 8009f12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f16:	881b      	ldrh	r3, [r3, #0]
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f24:	801a      	strh	r2, [r3, #0]
 8009f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f2a:	881b      	ldrh	r3, [r3, #0]
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f3c:	801a      	strh	r2, [r3, #0]
 8009f3e:	e067      	b.n	800a010 <USB_EPStartXfer+0x1bf0>
 8009f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f44:	2b3e      	cmp	r3, #62	; 0x3e
 8009f46:	d818      	bhi.n	8009f7a <USB_EPStartXfer+0x1b5a>
 8009f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f4c:	085b      	lsrs	r3, r3, #1
 8009f4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d004      	beq.n	8009f68 <USB_EPStartXfer+0x1b48>
 8009f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f62:	3301      	adds	r3, #1
 8009f64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	029b      	lsls	r3, r3, #10
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f76:	801a      	strh	r2, [r3, #0]
 8009f78:	e04a      	b.n	800a010 <USB_EPStartXfer+0x1bf0>
 8009f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f7e:	095b      	lsrs	r3, r3, #5
 8009f80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f88:	f003 031f 	and.w	r3, r3, #31
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d104      	bne.n	8009f9a <USB_EPStartXfer+0x1b7a>
 8009f90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f94:	3b01      	subs	r3, #1
 8009f96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	029b      	lsls	r3, r3, #10
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fb2:	801a      	strh	r2, [r3, #0]
 8009fb4:	e02c      	b.n	800a010 <USB_EPStartXfer+0x1bf0>
 8009fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	785b      	ldrb	r3, [r3, #1]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d124      	bne.n	800a010 <USB_EPStartXfer+0x1bf0>
 8009fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fdc:	4413      	add	r3, r2
 8009fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	011a      	lsls	r2, r3, #4
 8009ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ffa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a002:	b29a      	uxth	r2, r3
 800a004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a008:	801a      	strh	r2, [r3, #0]
 800a00a:	e001      	b.n	800a010 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e03a      	b.n	800a086 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a036:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a03a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a03e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a042:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a046:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a04a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a04e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a056:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	441a      	add	r2, r3
 800a06c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a080:	b29b      	uxth	r3, r3
 800a082:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	785b      	ldrb	r3, [r3, #1]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d020      	beq.n	800a0e4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b8:	81bb      	strh	r3, [r7, #12]
 800a0ba:	89bb      	ldrh	r3, [r7, #12]
 800a0bc:	f083 0310 	eor.w	r3, r3, #16
 800a0c0:	81bb      	strh	r3, [r7, #12]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	441a      	add	r2, r3
 800a0cc:	89bb      	ldrh	r3, [r7, #12]
 800a0ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	8013      	strh	r3, [r2, #0]
 800a0e2:	e01f      	b.n	800a124 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fa:	81fb      	strh	r3, [r7, #14]
 800a0fc:	89fb      	ldrh	r3, [r7, #14]
 800a0fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a102:	81fb      	strh	r3, [r7, #14]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	441a      	add	r2, r3
 800a10e:	89fb      	ldrh	r3, [r7, #14]
 800a110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a120:	b29b      	uxth	r3, r3
 800a122:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bc80      	pop	{r7}
 800a12e:	4770      	bx	lr

0800a130 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	7b1b      	ldrb	r3, [r3, #12]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f040 809d 	bne.w	800a27e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	785b      	ldrb	r3, [r3, #1]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d04c      	beq.n	800a1e6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	881b      	ldrh	r3, [r3, #0]
 800a158:	823b      	strh	r3, [r7, #16]
 800a15a:	8a3b      	ldrh	r3, [r7, #16]
 800a15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01b      	beq.n	800a19c <USB_EPClearStall+0x6c>
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	b29b      	uxth	r3, r3
 800a172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a17a:	81fb      	strh	r3, [r7, #14]
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	441a      	add	r2, r3
 800a186:	89fb      	ldrh	r3, [r7, #14]
 800a188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a18c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a194:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a198:	b29b      	uxth	r3, r3
 800a19a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	78db      	ldrb	r3, [r3, #3]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d06c      	beq.n	800a27e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1ba:	81bb      	strh	r3, [r7, #12]
 800a1bc:	89bb      	ldrh	r3, [r7, #12]
 800a1be:	f083 0320 	eor.w	r3, r3, #32
 800a1c2:	81bb      	strh	r3, [r7, #12]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	441a      	add	r2, r3
 800a1ce:	89bb      	ldrh	r3, [r7, #12]
 800a1d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	8013      	strh	r3, [r2, #0]
 800a1e4:	e04b      	b.n	800a27e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	82fb      	strh	r3, [r7, #22]
 800a1f4:	8afb      	ldrh	r3, [r7, #22]
 800a1f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d01b      	beq.n	800a236 <USB_EPClearStall+0x106>
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4413      	add	r3, r2
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a214:	82bb      	strh	r3, [r7, #20]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	441a      	add	r2, r3
 800a220:	8abb      	ldrh	r3, [r7, #20]
 800a222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a22a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a22e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a232:	b29b      	uxth	r3, r3
 800a234:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	881b      	ldrh	r3, [r3, #0]
 800a242:	b29b      	uxth	r3, r3
 800a244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a24c:	827b      	strh	r3, [r7, #18]
 800a24e:	8a7b      	ldrh	r3, [r7, #18]
 800a250:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a254:	827b      	strh	r3, [r7, #18]
 800a256:	8a7b      	ldrh	r3, [r7, #18]
 800a258:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a25c:	827b      	strh	r3, [r7, #18]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	441a      	add	r2, r3
 800a268:	8a7b      	ldrh	r3, [r7, #18]
 800a26a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a26e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	371c      	adds	r7, #28
 800a284:	46bd      	mov	sp, r7
 800a286:	bc80      	pop	{r7}
 800a288:	4770      	bx	lr

0800a28a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b083      	sub	sp, #12
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	460b      	mov	r3, r1
 800a294:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a296:	78fb      	ldrb	r3, [r7, #3]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d103      	bne.n	800a2a4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2280      	movs	r2, #128	; 0x80
 800a2a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bc80      	pop	{r7}
 800a2ae:	4770      	bx	lr

0800a2b0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	370c      	adds	r7, #12
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bc80      	pop	{r7}
 800a2c2:	4770      	bx	lr

0800a2c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3714      	adds	r7, #20
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bc80      	pop	{r7}
 800a2e0:	4770      	bx	lr

0800a2e2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b08d      	sub	sp, #52	; 0x34
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	80fb      	strh	r3, [r7, #6]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a2f8:	88bb      	ldrh	r3, [r7, #4]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	085b      	lsrs	r3, r3, #1
 800a2fe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a308:	88fb      	ldrh	r3, [r7, #6]
 800a30a:	005a      	lsls	r2, r3, #1
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a314:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a31a:	e01e      	b.n	800a35a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a324:	3301      	adds	r3, #1
 800a326:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	021b      	lsls	r3, r3, #8
 800a330:	b29b      	uxth	r3, r3
 800a332:	461a      	mov	r2, r3
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	4313      	orrs	r3, r2
 800a338:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a340:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	3302      	adds	r3, #2
 800a346:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	3302      	adds	r3, #2
 800a34c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a350:	3301      	adds	r3, #1
 800a352:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	3b01      	subs	r3, #1
 800a358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1dd      	bne.n	800a31c <USB_WritePMA+0x3a>
  }
}
 800a360:	bf00      	nop
 800a362:	bf00      	nop
 800a364:	3734      	adds	r7, #52	; 0x34
 800a366:	46bd      	mov	sp, r7
 800a368:	bc80      	pop	{r7}
 800a36a:	4770      	bx	lr

0800a36c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b08b      	sub	sp, #44	; 0x2c
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4611      	mov	r1, r2
 800a378:	461a      	mov	r2, r3
 800a37a:	460b      	mov	r3, r1
 800a37c:	80fb      	strh	r3, [r7, #6]
 800a37e:	4613      	mov	r3, r2
 800a380:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a382:	88bb      	ldrh	r3, [r7, #4]
 800a384:	085b      	lsrs	r3, r3, #1
 800a386:	b29b      	uxth	r3, r3
 800a388:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a392:	88fb      	ldrh	r3, [r7, #6]
 800a394:	005a      	lsls	r2, r3, #1
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a39e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a4:	e01b      	b.n	800a3de <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	3302      	adds	r3, #2
 800a3b2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	0a1b      	lsrs	r3, r3, #8
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	3302      	adds	r3, #2
 800a3d6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1e0      	bne.n	800a3a6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a3e4:	88bb      	ldrh	r3, [r7, #4]
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d007      	beq.n	800a400 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	701a      	strb	r2, [r3, #0]
  }
}
 800a400:	bf00      	nop
 800a402:	372c      	adds	r7, #44	; 0x2c
 800a404:	46bd      	mov	sp, r7
 800a406:	bc80      	pop	{r7}
 800a408:	4770      	bx	lr

0800a40a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b084      	sub	sp, #16
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	7c1b      	ldrb	r3, [r3, #16]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d115      	bne.n	800a44e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a422:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a426:	2202      	movs	r2, #2
 800a428:	2181      	movs	r1, #129	; 0x81
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f001 fe75 	bl	800c11a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a43a:	2202      	movs	r2, #2
 800a43c:	2101      	movs	r1, #1
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f001 fe6b 	bl	800c11a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800a44c:	e012      	b.n	800a474 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a44e:	2340      	movs	r3, #64	; 0x40
 800a450:	2202      	movs	r2, #2
 800a452:	2181      	movs	r1, #129	; 0x81
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 fe60 	bl	800c11a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a460:	2340      	movs	r3, #64	; 0x40
 800a462:	2202      	movs	r2, #2
 800a464:	2101      	movs	r1, #1
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 fe57 	bl	800c11a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a474:	2308      	movs	r3, #8
 800a476:	2203      	movs	r2, #3
 800a478:	2182      	movs	r1, #130	; 0x82
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f001 fe4d 	bl	800c11a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800a486:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a48a:	f001 ff6d 	bl	800c368 <USBD_static_malloc>
 800a48e:	4602      	mov	r2, r0
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	73fb      	strb	r3, [r7, #15]
 800a4a4:	e026      	b.n	800a4f4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4ac:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	7c1b      	ldrb	r3, [r3, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d109      	bne.n	800a4e4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4da:	2101      	movs	r1, #1
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f001 ff0d 	bl	800c2fc <USBD_LL_PrepareReceive>
 800a4e2:	e007      	b.n	800a4f4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4ea:	2340      	movs	r3, #64	; 0x40
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f001 ff04 	bl	800c2fc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	460b      	mov	r3, r1
 800a508:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a50e:	2181      	movs	r1, #129	; 0x81
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f001 fe28 	bl	800c166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a51c:	2101      	movs	r1, #1
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f001 fe21 	bl	800c166 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a52c:	2182      	movs	r1, #130	; 0x82
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f001 fe19 	bl	800c166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00e      	beq.n	800a562 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a554:	4618      	mov	r0, r3
 800a556:	f001 ff13 	bl	800c380 <USBD_static_free>
    pdev->pClassData = NULL;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800a562:	7bfb      	ldrb	r3, [r7, #15]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a57c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a582:	2300      	movs	r3, #0
 800a584:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a592:	2b00      	cmp	r3, #0
 800a594:	d039      	beq.n	800a60a <USBD_CDC_Setup+0x9e>
 800a596:	2b20      	cmp	r3, #32
 800a598:	d17f      	bne.n	800a69a <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	88db      	ldrh	r3, [r3, #6]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d029      	beq.n	800a5f6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	b25b      	sxtb	r3, r3
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	da11      	bge.n	800a5d0 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	683a      	ldr	r2, [r7, #0]
 800a5b6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800a5b8:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	88d2      	ldrh	r2, [r2, #6]
 800a5be:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a5c0:	6939      	ldr	r1, [r7, #16]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	88db      	ldrh	r3, [r3, #6]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 f994 	bl	800b8f6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800a5ce:	e06b      	b.n	800a6a8 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	785a      	ldrb	r2, [r3, #1]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	88db      	ldrh	r3, [r3, #6]
 800a5de:	b2da      	uxtb	r2, r3
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a5e6:	6939      	ldr	r1, [r7, #16]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	88db      	ldrh	r3, [r3, #6]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 f9af 	bl	800b952 <USBD_CtlPrepareRx>
    break;
 800a5f4:	e058      	b.n	800a6a8 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	7850      	ldrb	r0, [r2, #1]
 800a602:	2200      	movs	r2, #0
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	4798      	blx	r3
    break;
 800a608:	e04e      	b.n	800a6a8 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b0b      	cmp	r3, #11
 800a610:	d02e      	beq.n	800a670 <USBD_CDC_Setup+0x104>
 800a612:	2b0b      	cmp	r3, #11
 800a614:	dc38      	bgt.n	800a688 <USBD_CDC_Setup+0x11c>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <USBD_CDC_Setup+0xb4>
 800a61a:	2b0a      	cmp	r3, #10
 800a61c:	d014      	beq.n	800a648 <USBD_CDC_Setup+0xdc>
 800a61e:	e033      	b.n	800a688 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a626:	2b03      	cmp	r3, #3
 800a628:	d107      	bne.n	800a63a <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800a62a:	f107 030c 	add.w	r3, r7, #12
 800a62e:	2202      	movs	r2, #2
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f001 f95f 	bl	800b8f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800a638:	e02e      	b.n	800a698 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f001 f8f0 	bl	800b822 <USBD_CtlError>
			  ret = USBD_FAIL;
 800a642:	2302      	movs	r3, #2
 800a644:	75fb      	strb	r3, [r7, #23]
      break;
 800a646:	e027      	b.n	800a698 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a64e:	2b03      	cmp	r3, #3
 800a650:	d107      	bne.n	800a662 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800a652:	f107 030f 	add.w	r3, r7, #15
 800a656:	2201      	movs	r2, #1
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f001 f94b 	bl	800b8f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800a660:	e01a      	b.n	800a698 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f001 f8dc 	bl	800b822 <USBD_CtlError>
			  ret = USBD_FAIL;
 800a66a:	2302      	movs	r3, #2
 800a66c:	75fb      	strb	r3, [r7, #23]
      break;
 800a66e:	e013      	b.n	800a698 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a676:	2b03      	cmp	r3, #3
 800a678:	d00d      	beq.n	800a696 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f001 f8d0 	bl	800b822 <USBD_CtlError>
			  ret = USBD_FAIL;
 800a682:	2302      	movs	r3, #2
 800a684:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a686:	e006      	b.n	800a696 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f001 f8c9 	bl	800b822 <USBD_CtlError>
      ret = USBD_FAIL;
 800a690:	2302      	movs	r3, #2
 800a692:	75fb      	strb	r3, [r7, #23]
      break;
 800a694:	e000      	b.n	800a698 <USBD_CDC_Setup+0x12c>
      break;
 800a696:	bf00      	nop
    }
    break;
 800a698:	e006      	b.n	800a6a8 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 f8c0 	bl	800b822 <USBD_CtlError>
    ret = USBD_FAIL;
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	75fb      	strb	r3, [r7, #23]
    break;
 800a6a6:	bf00      	nop
  }

  return ret;
 800a6a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b084      	sub	sp, #16
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a6c4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a6cc:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d03a      	beq.n	800a74e <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a6d8:	78fa      	ldrb	r2, [r7, #3]
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	440b      	add	r3, r1
 800a6e6:	331c      	adds	r3, #28
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d029      	beq.n	800a742 <USBD_CDC_DataIn+0x90>
 800a6ee:	78fa      	ldrb	r2, [r7, #3]
 800a6f0:	6879      	ldr	r1, [r7, #4]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	440b      	add	r3, r1
 800a6fc:	331c      	adds	r3, #28
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	78f9      	ldrb	r1, [r7, #3]
 800a702:	68b8      	ldr	r0, [r7, #8]
 800a704:	460b      	mov	r3, r1
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	440b      	add	r3, r1
 800a70a:	00db      	lsls	r3, r3, #3
 800a70c:	4403      	add	r3, r0
 800a70e:	3338      	adds	r3, #56	; 0x38
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	fbb2 f1f3 	udiv	r1, r2, r3
 800a716:	fb01 f303 	mul.w	r3, r1, r3
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d110      	bne.n	800a742 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a720:	78fa      	ldrb	r2, [r7, #3]
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	4613      	mov	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	331c      	adds	r3, #28
 800a730:	2200      	movs	r2, #0
 800a732:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800a734:	78f9      	ldrb	r1, [r7, #3]
 800a736:	2300      	movs	r3, #0
 800a738:	2200      	movs	r2, #0
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f001 fdbb 	bl	800c2b6 <USBD_LL_Transmit>
 800a740:	e003      	b.n	800a74a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	e000      	b.n	800a750 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a74e:	2302      	movs	r3, #2
  }
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800a76c:	78fb      	ldrb	r3, [r7, #3]
 800a76e:	4619      	mov	r1, r3
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f001 fde6 	bl	800c342 <USBD_LL_GetRxDataSize>
 800a776:	4602      	mov	r2, r0
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00d      	beq.n	800a7a4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a79c:	4611      	mov	r1, r2
 800a79e:	4798      	blx	r3

    return USBD_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	e000      	b.n	800a7a6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a7a4:	2302      	movs	r3, #2
  }
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a7bc:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d015      	beq.n	800a7f4 <USBD_CDC_EP0_RxReady+0x46>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a7ce:	2bff      	cmp	r3, #255	; 0xff
 800a7d0:	d010      	beq.n	800a7f4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a7e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7e8:	b292      	uxth	r2, r2
 800a7ea:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	22ff      	movs	r2, #255	; 0xff
 800a7f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
	...

0800a800 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2243      	movs	r2, #67	; 0x43
 800a80c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a80e:	4b03      	ldr	r3, [pc, #12]	; (800a81c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a810:	4618      	mov	r0, r3
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	bc80      	pop	{r7}
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	200003d8 	.word	0x200003d8

0800a820 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2243      	movs	r2, #67	; 0x43
 800a82c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a82e:	4b03      	ldr	r3, [pc, #12]	; (800a83c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a830:	4618      	mov	r0, r3
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	bc80      	pop	{r7}
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	20000394 	.word	0x20000394

0800a840 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2243      	movs	r2, #67	; 0x43
 800a84c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a84e:	4b03      	ldr	r3, [pc, #12]	; (800a85c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	bc80      	pop	{r7}
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	2000041c 	.word	0x2000041c

0800a860 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	220a      	movs	r2, #10
 800a86c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a86e:	4b03      	ldr	r3, [pc, #12]	; (800a87c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a870:	4618      	mov	r0, r3
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	bc80      	pop	{r7}
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	20000350 	.word	0x20000350

0800a880 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a88a:	2302      	movs	r3, #2
 800a88c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bc80      	pop	{r7}
 800a8aa:	4770      	bx	lr

0800a8ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b087      	sub	sp, #28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a8c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a8ca:	88fa      	ldrh	r2, [r7, #6]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	371c      	adds	r7, #28
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr

0800a8de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b085      	sub	sp, #20
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a8ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bc80      	pop	{r7}
 800a902:	4770      	bx	lr

0800a904 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a912:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d01c      	beq.n	800a958 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a924:	2b00      	cmp	r3, #0
 800a926:	d115      	bne.n	800a954 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a946:	b29b      	uxth	r3, r3
 800a948:	2181      	movs	r1, #129	; 0x81
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f001 fcb3 	bl	800c2b6 <USBD_LL_Transmit>

      return USBD_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	e002      	b.n	800a95a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a954:	2301      	movs	r3, #1
 800a956:	e000      	b.n	800a95a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a958:	2302      	movs	r3, #2
  }
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a970:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d017      	beq.n	800a9ac <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	7c1b      	ldrb	r3, [r3, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d109      	bne.n	800a998 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a98a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a98e:	2101      	movs	r1, #1
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 fcb3 	bl	800c2fc <USBD_LL_PrepareReceive>
 800a996:	e007      	b.n	800a9a8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a99e:	2340      	movs	r3, #64	; 0x40
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f001 fcaa 	bl	800c2fc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	e000      	b.n	800a9ae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a9ac:	2302      	movs	r3, #2
  }
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b084      	sub	sp, #16
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	60f8      	str	r0, [r7, #12]
 800a9be:	60b9      	str	r1, [r7, #8]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	e01a      	b.n	800aa04 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d003      	beq.n	800a9e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	79fa      	ldrb	r2, [r7, #7]
 800a9fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f001 fb17 	bl	800c030 <USBD_LL_Init>

  return USBD_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d006      	beq.n	800aa2e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	73fb      	strb	r3, [r7, #15]
 800aa2c:	e001      	b.n	800aa32 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bc80      	pop	{r7}
 800aa3c:	4770      	bx	lr

0800aa3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b082      	sub	sp, #8
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f001 fb4c 	bl	800c0e4 <USBD_LL_Start>

  return USBD_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bc80      	pop	{r7}
 800aa68:	4770      	bx	lr

0800aa6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	460b      	mov	r3, r1
 800aa74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800aa76:	2302      	movs	r3, #2
 800aa78:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00c      	beq.n	800aa9e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	78fa      	ldrb	r2, [r7, #3]
 800aa8e:	4611      	mov	r1, r2
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	4798      	blx	r3
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	78fa      	ldrb	r2, [r7, #3]
 800aabe:	4611      	mov	r1, r2
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	4798      	blx	r3
  return USBD_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 fe62 	bl	800b7aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800ab02:	f003 031f 	and.w	r3, r3, #31
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d016      	beq.n	800ab38 <USBD_LL_SetupStage+0x6a>
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d81c      	bhi.n	800ab48 <USBD_LL_SetupStage+0x7a>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d002      	beq.n	800ab18 <USBD_LL_SetupStage+0x4a>
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d008      	beq.n	800ab28 <USBD_LL_SetupStage+0x5a>
 800ab16:	e017      	b.n	800ab48 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f9c5 	bl	800aeb0 <USBD_StdDevReq>
    break;
 800ab26:	e01a      	b.n	800ab5e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fa27 	bl	800af84 <USBD_StdItfReq>
    break;
 800ab36:	e012      	b.n	800ab5e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fa67 	bl	800b014 <USBD_StdEPReq>
    break;
 800ab46:	e00a      	b.n	800ab5e <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800ab4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 fb24 	bl	800c1a4 <USBD_LL_StallEP>
    break;
 800ab5c:	bf00      	nop
  }

  return USBD_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	460b      	mov	r3, r1
 800ab72:	607a      	str	r2, [r7, #4]
 800ab74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800ab76:	7afb      	ldrb	r3, [r7, #11]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d14b      	bne.n	800ac14 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ab82:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d134      	bne.n	800abf8 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	68da      	ldr	r2, [r3, #12]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d919      	bls.n	800abce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	68da      	ldr	r2, [r3, #12]
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	1ad2      	subs	r2, r2, r3
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	68da      	ldr	r2, [r3, #12]
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d203      	bcs.n	800abbc <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800abb8:	b29b      	uxth	r3, r3
 800abba:	e002      	b.n	800abc2 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	461a      	mov	r2, r3
 800abc4:	6879      	ldr	r1, [r7, #4]
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f000 fee1 	bl	800b98e <USBD_CtlContinueRx>
 800abcc:	e038      	b.n	800ac40 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00a      	beq.n	800abf0 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800abe0:	2b03      	cmp	r3, #3
 800abe2:	d105      	bne.n	800abf0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 fede 	bl	800b9b2 <USBD_CtlSendStatus>
 800abf6:	e023      	b.n	800ac40 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800abfe:	2b05      	cmp	r3, #5
 800ac00:	d11e      	bne.n	800ac40 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f001 fac9 	bl	800c1a4 <USBD_LL_StallEP>
 800ac12:	e015      	b.n	800ac40 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00d      	beq.n	800ac3c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	d108      	bne.n	800ac3c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	7afa      	ldrb	r2, [r7, #11]
 800ac34:	4611      	mov	r1, r2
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	4798      	blx	r3
 800ac3a:	e001      	b.n	800ac40 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	e000      	b.n	800ac42 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b086      	sub	sp, #24
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	60f8      	str	r0, [r7, #12]
 800ac52:	460b      	mov	r3, r1
 800ac54:	607a      	str	r2, [r7, #4]
 800ac56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800ac58:	7afb      	ldrb	r3, [r7, #11]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d17f      	bne.n	800ad5e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3314      	adds	r3, #20
 800ac62:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d15c      	bne.n	800ad28 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	68da      	ldr	r2, [r3, #12]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d915      	bls.n	800aca6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	68da      	ldr	r2, [r3, #12]
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	1ad2      	subs	r2, r2, r3
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 fe4b 	bl	800b92e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ac98:	2300      	movs	r3, #0
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f001 fb2c 	bl	800c2fc <USBD_LL_PrepareReceive>
 800aca4:	e04e      	b.n	800ad44 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	6912      	ldr	r2, [r2, #16]
 800acae:	fbb3 f1f2 	udiv	r1, r3, r2
 800acb2:	fb01 f202 	mul.w	r2, r1, r2
 800acb6:	1a9b      	subs	r3, r3, r2
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d11c      	bne.n	800acf6 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	689a      	ldr	r2, [r3, #8]
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d316      	bcc.n	800acf6 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	689a      	ldr	r2, [r3, #8]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d20f      	bcs.n	800acf6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800acd6:	2200      	movs	r2, #0
 800acd8:	2100      	movs	r1, #0
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f000 fe27 	bl	800b92e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ace8:	2300      	movs	r3, #0
 800acea:	2200      	movs	r2, #0
 800acec:	2100      	movs	r1, #0
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f001 fb04 	bl	800c2fc <USBD_LL_PrepareReceive>
 800acf4:	e026      	b.n	800ad44 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00a      	beq.n	800ad18 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ad08:	2b03      	cmp	r3, #3
 800ad0a:	d105      	bne.n	800ad18 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ad18:	2180      	movs	r1, #128	; 0x80
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f001 fa42 	bl	800c1a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 fe59 	bl	800b9d8 <USBD_CtlReceiveStatus>
 800ad26:	e00d      	b.n	800ad44 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d004      	beq.n	800ad3c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d103      	bne.n	800ad44 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ad3c:	2180      	movs	r1, #128	; 0x80
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f001 fa30 	bl	800c1a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d11d      	bne.n	800ad8a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff fe81 	bl	800aa56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800ad5c:	e015      	b.n	800ad8a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ad64:	695b      	ldr	r3, [r3, #20]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00d      	beq.n	800ad86 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	d108      	bne.n	800ad86 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	7afa      	ldrb	r2, [r7, #11]
 800ad7e:	4611      	mov	r1, r2
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	4798      	blx	r3
 800ad84:	e001      	b.n	800ad8a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ad86:	2302      	movs	r3, #2
 800ad88:	e000      	b.n	800ad8c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3718      	adds	r7, #24
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad9c:	2340      	movs	r3, #64	; 0x40
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2100      	movs	r1, #0
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f001 f9b9 	bl	800c11a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2240      	movs	r2, #64	; 0x40
 800adb4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adb8:	2340      	movs	r3, #64	; 0x40
 800adba:	2200      	movs	r2, #0
 800adbc:	2180      	movs	r1, #128	; 0x80
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f001 f9ab 	bl	800c11a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2240      	movs	r2, #64	; 0x40
 800adce:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d009      	beq.n	800ae0c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	6852      	ldr	r2, [r2, #4]
 800ae04:	b2d2      	uxtb	r2, r2
 800ae06:	4611      	mov	r1, r2
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	4798      	blx	r3
  }

  return USBD_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b083      	sub	sp, #12
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	460b      	mov	r3, r1
 800ae20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	78fa      	ldrb	r2, [r7, #3]
 800ae26:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bc80      	pop	{r7}
 800ae32:	4770      	bx	lr

0800ae34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2204      	movs	r2, #4
 800ae4c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	370c      	adds	r7, #12
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bc80      	pop	{r7}
 800ae5a:	4770      	bx	lr

0800ae5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bc80      	pop	{r7}
 800ae7a:	4770      	bx	lr

0800ae7c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d10b      	bne.n	800aea6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ae94:	69db      	ldr	r3, [r3, #28]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d005      	beq.n	800aea6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aea0:	69db      	ldr	r3, [r3, #28]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aec6:	2b40      	cmp	r3, #64	; 0x40
 800aec8:	d005      	beq.n	800aed6 <USBD_StdDevReq+0x26>
 800aeca:	2b40      	cmp	r3, #64	; 0x40
 800aecc:	d84f      	bhi.n	800af6e <USBD_StdDevReq+0xbe>
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d009      	beq.n	800aee6 <USBD_StdDevReq+0x36>
 800aed2:	2b20      	cmp	r3, #32
 800aed4:	d14b      	bne.n	800af6e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	4798      	blx	r3
    break;
 800aee4:	e048      	b.n	800af78 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	785b      	ldrb	r3, [r3, #1]
 800aeea:	2b09      	cmp	r3, #9
 800aeec:	d839      	bhi.n	800af62 <USBD_StdDevReq+0xb2>
 800aeee:	a201      	add	r2, pc, #4	; (adr r2, 800aef4 <USBD_StdDevReq+0x44>)
 800aef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef4:	0800af45 	.word	0x0800af45
 800aef8:	0800af59 	.word	0x0800af59
 800aefc:	0800af63 	.word	0x0800af63
 800af00:	0800af4f 	.word	0x0800af4f
 800af04:	0800af63 	.word	0x0800af63
 800af08:	0800af27 	.word	0x0800af27
 800af0c:	0800af1d 	.word	0x0800af1d
 800af10:	0800af63 	.word	0x0800af63
 800af14:	0800af3b 	.word	0x0800af3b
 800af18:	0800af31 	.word	0x0800af31
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800af1c:	6839      	ldr	r1, [r7, #0]
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f9da 	bl	800b2d8 <USBD_GetDescriptor>
      break;
 800af24:	e022      	b.n	800af6c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 facf 	bl	800b4cc <USBD_SetAddress>
      break;
 800af2e:	e01d      	b.n	800af6c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fb0e 	bl	800b554 <USBD_SetConfig>
      break;
 800af38:	e018      	b.n	800af6c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fb97 	bl	800b670 <USBD_GetConfig>
      break;
 800af42:	e013      	b.n	800af6c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fbc7 	bl	800b6da <USBD_GetStatus>
      break;
 800af4c:	e00e      	b.n	800af6c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fbf5 	bl	800b740 <USBD_SetFeature>
      break;
 800af56:	e009      	b.n	800af6c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fc04 	bl	800b768 <USBD_ClrFeature>
      break;
 800af60:	e004      	b.n	800af6c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fc5c 	bl	800b822 <USBD_CtlError>
      break;
 800af6a:	bf00      	nop
    }
    break;
 800af6c:	e004      	b.n	800af78 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fc56 	bl	800b822 <USBD_CtlError>
    break;
 800af76:	bf00      	nop
  }

  return ret;
 800af78:	7bfb      	ldrb	r3, [r7, #15]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop

0800af84 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af9a:	2b40      	cmp	r3, #64	; 0x40
 800af9c:	d005      	beq.n	800afaa <USBD_StdItfReq+0x26>
 800af9e:	2b40      	cmp	r3, #64	; 0x40
 800afa0:	d82e      	bhi.n	800b000 <USBD_StdItfReq+0x7c>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d001      	beq.n	800afaa <USBD_StdItfReq+0x26>
 800afa6:	2b20      	cmp	r3, #32
 800afa8:	d12a      	bne.n	800b000 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800afb0:	3b01      	subs	r3, #1
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d81d      	bhi.n	800aff2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	889b      	ldrh	r3, [r3, #4]
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d813      	bhi.n	800afe8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	4798      	blx	r3
 800afce:	4603      	mov	r3, r0
 800afd0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	88db      	ldrh	r3, [r3, #6]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d110      	bne.n	800affc <USBD_StdItfReq+0x78>
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10d      	bne.n	800affc <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fce6 	bl	800b9b2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800afe6:	e009      	b.n	800affc <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fc19 	bl	800b822 <USBD_CtlError>
      break;
 800aff0:	e004      	b.n	800affc <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fc14 	bl	800b822 <USBD_CtlError>
      break;
 800affa:	e000      	b.n	800affe <USBD_StdItfReq+0x7a>
      break;
 800affc:	bf00      	nop
    }
    break;
 800affe:	e004      	b.n	800b00a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fc0d 	bl	800b822 <USBD_CtlError>
    break;
 800b008:	bf00      	nop
  }

  return USBD_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	889b      	ldrh	r3, [r3, #4]
 800b026:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b030:	2b40      	cmp	r3, #64	; 0x40
 800b032:	d007      	beq.n	800b044 <USBD_StdEPReq+0x30>
 800b034:	2b40      	cmp	r3, #64	; 0x40
 800b036:	f200 8144 	bhi.w	800b2c2 <USBD_StdEPReq+0x2ae>
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <USBD_StdEPReq+0x40>
 800b03e:	2b20      	cmp	r3, #32
 800b040:	f040 813f 	bne.w	800b2c2 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	4798      	blx	r3
    break;
 800b052:	e13b      	b.n	800b2cc <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b05c:	2b20      	cmp	r3, #32
 800b05e:	d10a      	bne.n	800b076 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	4798      	blx	r3
 800b06e:	4603      	mov	r3, r0
 800b070:	73fb      	strb	r3, [r7, #15]

      return ret;
 800b072:	7bfb      	ldrb	r3, [r7, #15]
 800b074:	e12b      	b.n	800b2ce <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	785b      	ldrb	r3, [r3, #1]
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d007      	beq.n	800b08e <USBD_StdEPReq+0x7a>
 800b07e:	2b03      	cmp	r3, #3
 800b080:	f300 8119 	bgt.w	800b2b6 <USBD_StdEPReq+0x2a2>
 800b084:	2b00      	cmp	r3, #0
 800b086:	d072      	beq.n	800b16e <USBD_StdEPReq+0x15a>
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d03a      	beq.n	800b102 <USBD_StdEPReq+0xee>
 800b08c:	e113      	b.n	800b2b6 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b094:	2b02      	cmp	r3, #2
 800b096:	d002      	beq.n	800b09e <USBD_StdEPReq+0x8a>
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d015      	beq.n	800b0c8 <USBD_StdEPReq+0xb4>
 800b09c:	e02b      	b.n	800b0f6 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00c      	beq.n	800b0be <USBD_StdEPReq+0xaa>
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	2b80      	cmp	r3, #128	; 0x80
 800b0a8:	d009      	beq.n	800b0be <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f001 f878 	bl	800c1a4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800b0b4:	2180      	movs	r1, #128	; 0x80
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f001 f874 	bl	800c1a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b0bc:	e020      	b.n	800b100 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fbae 	bl	800b822 <USBD_CtlError>
        break;
 800b0c6:	e01b      	b.n	800b100 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	885b      	ldrh	r3, [r3, #2]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10e      	bne.n	800b0ee <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00b      	beq.n	800b0ee <USBD_StdEPReq+0xda>
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
 800b0d8:	2b80      	cmp	r3, #128	; 0x80
 800b0da:	d008      	beq.n	800b0ee <USBD_StdEPReq+0xda>
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	88db      	ldrh	r3, [r3, #6]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d104      	bne.n	800b0ee <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f001 f85b 	bl	800c1a4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fc5f 	bl	800b9b2 <USBD_CtlSendStatus>

        break;
 800b0f4:	e004      	b.n	800b100 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fb92 	bl	800b822 <USBD_CtlError>
        break;
 800b0fe:	bf00      	nop
      }
      break;
 800b100:	e0de      	b.n	800b2c0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d002      	beq.n	800b112 <USBD_StdEPReq+0xfe>
 800b10c:	2b03      	cmp	r3, #3
 800b10e:	d015      	beq.n	800b13c <USBD_StdEPReq+0x128>
 800b110:	e026      	b.n	800b160 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b112:	7bbb      	ldrb	r3, [r7, #14]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00c      	beq.n	800b132 <USBD_StdEPReq+0x11e>
 800b118:	7bbb      	ldrb	r3, [r7, #14]
 800b11a:	2b80      	cmp	r3, #128	; 0x80
 800b11c:	d009      	beq.n	800b132 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	4619      	mov	r1, r3
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f001 f83e 	bl	800c1a4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800b128:	2180      	movs	r1, #128	; 0x80
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 f83a 	bl	800c1a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b130:	e01c      	b.n	800b16c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fb74 	bl	800b822 <USBD_CtlError>
        break;
 800b13a:	e017      	b.n	800b16c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	885b      	ldrh	r3, [r3, #2]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d112      	bne.n	800b16a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b144:	7bbb      	ldrb	r3, [r7, #14]
 800b146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d004      	beq.n	800b158 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	4619      	mov	r1, r3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f001 f845 	bl	800c1e2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fc2a 	bl	800b9b2 <USBD_CtlSendStatus>
        }
        break;
 800b15e:	e004      	b.n	800b16a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fb5d 	bl	800b822 <USBD_CtlError>
        break;
 800b168:	e000      	b.n	800b16c <USBD_StdEPReq+0x158>
        break;
 800b16a:	bf00      	nop
      }
      break;
 800b16c:	e0a8      	b.n	800b2c0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b174:	2b02      	cmp	r3, #2
 800b176:	d002      	beq.n	800b17e <USBD_StdEPReq+0x16a>
 800b178:	2b03      	cmp	r3, #3
 800b17a:	d031      	beq.n	800b1e0 <USBD_StdEPReq+0x1cc>
 800b17c:	e095      	b.n	800b2aa <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b17e:	7bbb      	ldrb	r3, [r7, #14]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d007      	beq.n	800b194 <USBD_StdEPReq+0x180>
 800b184:	7bbb      	ldrb	r3, [r7, #14]
 800b186:	2b80      	cmp	r3, #128	; 0x80
 800b188:	d004      	beq.n	800b194 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fb48 	bl	800b822 <USBD_CtlError>
          break;
 800b192:	e08f      	b.n	800b2b4 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	da0b      	bge.n	800b1b4 <USBD_StdEPReq+0x1a0>
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
 800b19e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4413      	add	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	3310      	adds	r3, #16
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	e00a      	b.n	800b1ca <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
 800b1b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	2202      	movs	r2, #2
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fb8c 	bl	800b8f6 <USBD_CtlSendData>
          break;
 800b1de:	e069      	b.n	800b2b4 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800b1e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	da11      	bge.n	800b20c <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1e8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ea:	f003 020f 	and.w	r2, r3, #15
 800b1ee:	6879      	ldr	r1, [r7, #4]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	440b      	add	r3, r1
 800b1fa:	3318      	adds	r3, #24
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d117      	bne.n	800b232 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fb0c 	bl	800b822 <USBD_CtlError>
            break;
 800b20a:	e053      	b.n	800b2b4 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	f003 020f 	and.w	r2, r3, #15
 800b212:	6879      	ldr	r1, [r7, #4]
 800b214:	4613      	mov	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	440b      	add	r3, r1
 800b21e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d104      	bne.n	800b232 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 faf9 	bl	800b822 <USBD_CtlError>
            break;
 800b230:	e040      	b.n	800b2b4 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b232:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b236:	2b00      	cmp	r3, #0
 800b238:	da0b      	bge.n	800b252 <USBD_StdEPReq+0x23e>
 800b23a:	7bbb      	ldrb	r3, [r7, #14]
 800b23c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b240:	4613      	mov	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	3310      	adds	r3, #16
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	4413      	add	r3, r2
 800b24e:	3304      	adds	r3, #4
 800b250:	e00a      	b.n	800b268 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800b252:	7bbb      	ldrb	r3, [r7, #14]
 800b254:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b258:	4613      	mov	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	4413      	add	r3, r2
 800b268:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b26a:	7bbb      	ldrb	r3, [r7, #14]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <USBD_StdEPReq+0x262>
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	2b80      	cmp	r3, #128	; 0x80
 800b274:	d103      	bne.n	800b27e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	2200      	movs	r2, #0
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	e00e      	b.n	800b29c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800b27e:	7bbb      	ldrb	r3, [r7, #14]
 800b280:	4619      	mov	r1, r3
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 ffcc 	bl	800c220 <USBD_LL_IsStallEP>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d003      	beq.n	800b296 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2201      	movs	r2, #1
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	e002      	b.n	800b29c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	2202      	movs	r2, #2
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fb27 	bl	800b8f6 <USBD_CtlSendData>
          break;
 800b2a8:	e004      	b.n	800b2b4 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 fab8 	bl	800b822 <USBD_CtlError>
        break;
 800b2b2:	bf00      	nop
      }
      break;
 800b2b4:	e004      	b.n	800b2c0 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800b2b6:	6839      	ldr	r1, [r7, #0]
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fab2 	bl	800b822 <USBD_CtlError>
      break;
 800b2be:	bf00      	nop
    }
    break;
 800b2c0:	e004      	b.n	800b2cc <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 faac 	bl	800b822 <USBD_CtlError>
    break;
 800b2ca:	bf00      	nop
  }

  return ret;
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
	...

0800b2d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	885b      	ldrh	r3, [r3, #2]
 800b2e6:	0a1b      	lsrs	r3, r3, #8
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	2b06      	cmp	r3, #6
 800b2ee:	f200 80c9 	bhi.w	800b484 <USBD_GetDescriptor+0x1ac>
 800b2f2:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <USBD_GetDescriptor+0x20>)
 800b2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f8:	0800b315 	.word	0x0800b315
 800b2fc:	0800b32d 	.word	0x0800b32d
 800b300:	0800b36d 	.word	0x0800b36d
 800b304:	0800b485 	.word	0x0800b485
 800b308:	0800b485 	.word	0x0800b485
 800b30c:	0800b431 	.word	0x0800b431
 800b310:	0800b457 	.word	0x0800b457
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	7c12      	ldrb	r2, [r2, #16]
 800b320:	f107 010a 	add.w	r1, r7, #10
 800b324:	4610      	mov	r0, r2
 800b326:	4798      	blx	r3
 800b328:	60f8      	str	r0, [r7, #12]
    break;
 800b32a:	e0b0      	b.n	800b48e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	7c1b      	ldrb	r3, [r3, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10d      	bne.n	800b350 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33c:	f107 020a 	add.w	r2, r7, #10
 800b340:	4610      	mov	r0, r2
 800b342:	4798      	blx	r3
 800b344:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3301      	adds	r3, #1
 800b34a:	2202      	movs	r2, #2
 800b34c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b34e:	e09e      	b.n	800b48e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b358:	f107 020a 	add.w	r2, r7, #10
 800b35c:	4610      	mov	r0, r2
 800b35e:	4798      	blx	r3
 800b360:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3301      	adds	r3, #1
 800b366:	2202      	movs	r2, #2
 800b368:	701a      	strb	r2, [r3, #0]
    break;
 800b36a:	e090      	b.n	800b48e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	885b      	ldrh	r3, [r3, #2]
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b05      	cmp	r3, #5
 800b374:	d856      	bhi.n	800b424 <USBD_GetDescriptor+0x14c>
 800b376:	a201      	add	r2, pc, #4	; (adr r2, 800b37c <USBD_GetDescriptor+0xa4>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b395 	.word	0x0800b395
 800b380:	0800b3ad 	.word	0x0800b3ad
 800b384:	0800b3c5 	.word	0x0800b3c5
 800b388:	0800b3dd 	.word	0x0800b3dd
 800b38c:	0800b3f5 	.word	0x0800b3f5
 800b390:	0800b40d 	.word	0x0800b40d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	7c12      	ldrb	r2, [r2, #16]
 800b3a0:	f107 010a 	add.w	r1, r7, #10
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	4798      	blx	r3
 800b3a8:	60f8      	str	r0, [r7, #12]
      break;
 800b3aa:	e040      	b.n	800b42e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	7c12      	ldrb	r2, [r2, #16]
 800b3b8:	f107 010a 	add.w	r1, r7, #10
 800b3bc:	4610      	mov	r0, r2
 800b3be:	4798      	blx	r3
 800b3c0:	60f8      	str	r0, [r7, #12]
      break;
 800b3c2:	e034      	b.n	800b42e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	7c12      	ldrb	r2, [r2, #16]
 800b3d0:	f107 010a 	add.w	r1, r7, #10
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	4798      	blx	r3
 800b3d8:	60f8      	str	r0, [r7, #12]
      break;
 800b3da:	e028      	b.n	800b42e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	7c12      	ldrb	r2, [r2, #16]
 800b3e8:	f107 010a 	add.w	r1, r7, #10
 800b3ec:	4610      	mov	r0, r2
 800b3ee:	4798      	blx	r3
 800b3f0:	60f8      	str	r0, [r7, #12]
      break;
 800b3f2:	e01c      	b.n	800b42e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b3fa:	695b      	ldr	r3, [r3, #20]
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	7c12      	ldrb	r2, [r2, #16]
 800b400:	f107 010a 	add.w	r1, r7, #10
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
 800b408:	60f8      	str	r0, [r7, #12]
      break;
 800b40a:	e010      	b.n	800b42e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	7c12      	ldrb	r2, [r2, #16]
 800b418:	f107 010a 	add.w	r1, r7, #10
 800b41c:	4610      	mov	r0, r2
 800b41e:	4798      	blx	r3
 800b420:	60f8      	str	r0, [r7, #12]
      break;
 800b422:	e004      	b.n	800b42e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f9fb 	bl	800b822 <USBD_CtlError>
      return;
 800b42c:	e04b      	b.n	800b4c6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800b42e:	e02e      	b.n	800b48e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7c1b      	ldrb	r3, [r3, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d109      	bne.n	800b44c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b440:	f107 020a 	add.w	r2, r7, #10
 800b444:	4610      	mov	r0, r2
 800b446:	4798      	blx	r3
 800b448:	60f8      	str	r0, [r7, #12]
      break;
 800b44a:	e020      	b.n	800b48e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f9e7 	bl	800b822 <USBD_CtlError>
      return;
 800b454:	e037      	b.n	800b4c6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	7c1b      	ldrb	r3, [r3, #16]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d10d      	bne.n	800b47a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b466:	f107 020a 	add.w	r2, r7, #10
 800b46a:	4610      	mov	r0, r2
 800b46c:	4798      	blx	r3
 800b46e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	3301      	adds	r3, #1
 800b474:	2207      	movs	r2, #7
 800b476:	701a      	strb	r2, [r3, #0]
      break;
 800b478:	e009      	b.n	800b48e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f9d0 	bl	800b822 <USBD_CtlError>
      return;
 800b482:	e020      	b.n	800b4c6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f9cb 	bl	800b822 <USBD_CtlError>
    return;
 800b48c:	e01b      	b.n	800b4c6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800b48e:	897b      	ldrh	r3, [r7, #10]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d011      	beq.n	800b4b8 <USBD_GetDescriptor+0x1e0>
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	88db      	ldrh	r3, [r3, #6]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00d      	beq.n	800b4b8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	88da      	ldrh	r2, [r3, #6]
 800b4a0:	897b      	ldrh	r3, [r7, #10]
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	bf28      	it	cs
 800b4a6:	4613      	movcs	r3, r2
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800b4ac:	897b      	ldrh	r3, [r7, #10]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	68f9      	ldr	r1, [r7, #12]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fa1f 	bl	800b8f6 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	88db      	ldrh	r3, [r3, #6]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d102      	bne.n	800b4c6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 fa76 	bl	800b9b2 <USBD_CtlSendStatus>
  }
}
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	889b      	ldrh	r3, [r3, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d130      	bne.n	800b540 <USBD_SetAddress+0x74>
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	88db      	ldrh	r3, [r3, #6]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d12c      	bne.n	800b540 <USBD_SetAddress+0x74>
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	885b      	ldrh	r3, [r3, #2]
 800b4ea:	2b7f      	cmp	r3, #127	; 0x7f
 800b4ec:	d828      	bhi.n	800b540 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	885b      	ldrh	r3, [r3, #2]
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b500:	2b03      	cmp	r3, #3
 800b502:	d104      	bne.n	800b50e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f98b 	bl	800b822 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50c:	e01d      	b.n	800b54a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	7bfa      	ldrb	r2, [r7, #15]
 800b512:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 feac 	bl	800c278 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fa46 	bl	800b9b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b526:	7bfb      	ldrb	r3, [r7, #15]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d004      	beq.n	800b536 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2202      	movs	r2, #2
 800b530:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b534:	e009      	b.n	800b54a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b53e:	e004      	b.n	800b54a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 f96d 	bl	800b822 <USBD_CtlError>
  }
}
 800b548:	bf00      	nop
 800b54a:	bf00      	nop
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
	...

0800b554 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	885b      	ldrh	r3, [r3, #2]
 800b562:	b2da      	uxtb	r2, r3
 800b564:	4b41      	ldr	r3, [pc, #260]	; (800b66c <USBD_SetConfig+0x118>)
 800b566:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b568:	4b40      	ldr	r3, [pc, #256]	; (800b66c <USBD_SetConfig+0x118>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d904      	bls.n	800b57a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f955 	bl	800b822 <USBD_CtlError>
 800b578:	e075      	b.n	800b666 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b580:	2b02      	cmp	r3, #2
 800b582:	d002      	beq.n	800b58a <USBD_SetConfig+0x36>
 800b584:	2b03      	cmp	r3, #3
 800b586:	d023      	beq.n	800b5d0 <USBD_SetConfig+0x7c>
 800b588:	e062      	b.n	800b650 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800b58a:	4b38      	ldr	r3, [pc, #224]	; (800b66c <USBD_SetConfig+0x118>)
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d01a      	beq.n	800b5c8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800b592:	4b36      	ldr	r3, [pc, #216]	; (800b66c <USBD_SetConfig+0x118>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2203      	movs	r2, #3
 800b5a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b5a4:	4b31      	ldr	r3, [pc, #196]	; (800b66c <USBD_SetConfig+0x118>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff fa5d 	bl	800aa6a <USBD_SetClassConfig>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d104      	bne.n	800b5c0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800b5b6:	6839      	ldr	r1, [r7, #0]
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f932 	bl	800b822 <USBD_CtlError>
          return;
 800b5be:	e052      	b.n	800b666 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f9f6 	bl	800b9b2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800b5c6:	e04e      	b.n	800b666 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f9f2 	bl	800b9b2 <USBD_CtlSendStatus>
      break;
 800b5ce:	e04a      	b.n	800b666 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5d0:	4b26      	ldr	r3, [pc, #152]	; (800b66c <USBD_SetConfig+0x118>)
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d112      	bne.n	800b5fe <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2202      	movs	r2, #2
 800b5dc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800b5e0:	4b22      	ldr	r3, [pc, #136]	; (800b66c <USBD_SetConfig+0x118>)
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800b5ea:	4b20      	ldr	r3, [pc, #128]	; (800b66c <USBD_SetConfig+0x118>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f7ff fa59 	bl	800aaa8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f9db 	bl	800b9b2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800b5fc:	e033      	b.n	800b666 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800b5fe:	4b1b      	ldr	r3, [pc, #108]	; (800b66c <USBD_SetConfig+0x118>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	461a      	mov	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d01d      	beq.n	800b648 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	b2db      	uxtb	r3, r3
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff fa47 	bl	800aaa8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b61a:	4b14      	ldr	r3, [pc, #80]	; (800b66c <USBD_SetConfig+0x118>)
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b624:	4b11      	ldr	r3, [pc, #68]	; (800b66c <USBD_SetConfig+0x118>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7ff fa1d 	bl	800aa6a <USBD_SetClassConfig>
 800b630:	4603      	mov	r3, r0
 800b632:	2b02      	cmp	r3, #2
 800b634:	d104      	bne.n	800b640 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f8f2 	bl	800b822 <USBD_CtlError>
          return;
 800b63e:	e012      	b.n	800b666 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f9b6 	bl	800b9b2 <USBD_CtlSendStatus>
      break;
 800b646:	e00e      	b.n	800b666 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f9b2 	bl	800b9b2 <USBD_CtlSendStatus>
      break;
 800b64e:	e00a      	b.n	800b666 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800b650:	6839      	ldr	r1, [r7, #0]
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f8e5 	bl	800b822 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800b658:	4b04      	ldr	r3, [pc, #16]	; (800b66c <USBD_SetConfig+0x118>)
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7ff fa22 	bl	800aaa8 <USBD_ClrClassConfig>
      break;
 800b664:	bf00      	nop
    }
  }
}
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	20000984 	.word	0x20000984

0800b670 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	88db      	ldrh	r3, [r3, #6]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d004      	beq.n	800b68c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f8cc 	bl	800b822 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800b68a:	e022      	b.n	800b6d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b692:	2b02      	cmp	r3, #2
 800b694:	dc02      	bgt.n	800b69c <USBD_GetConfig+0x2c>
 800b696:	2b00      	cmp	r3, #0
 800b698:	dc03      	bgt.n	800b6a2 <USBD_GetConfig+0x32>
 800b69a:	e015      	b.n	800b6c8 <USBD_GetConfig+0x58>
 800b69c:	2b03      	cmp	r3, #3
 800b69e:	d00b      	beq.n	800b6b8 <USBD_GetConfig+0x48>
 800b6a0:	e012      	b.n	800b6c8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	3308      	adds	r3, #8
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 f920 	bl	800b8f6 <USBD_CtlSendData>
      break;
 800b6b6:	e00c      	b.n	800b6d2 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	2201      	movs	r2, #1
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f918 	bl	800b8f6 <USBD_CtlSendData>
      break;
 800b6c6:	e004      	b.n	800b6d2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f8a9 	bl	800b822 <USBD_CtlError>
      break;
 800b6d0:	bf00      	nop
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d81e      	bhi.n	800b72e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	88db      	ldrh	r3, [r3, #6]
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d004      	beq.n	800b702 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b6f8:	6839      	ldr	r1, [r7, #0]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f891 	bl	800b822 <USBD_CtlError>
      break;
 800b700:	e01a      	b.n	800b738 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d005      	beq.n	800b71e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	f043 0202 	orr.w	r2, r3, #2
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	330c      	adds	r3, #12
 800b722:	2202      	movs	r2, #2
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 f8e5 	bl	800b8f6 <USBD_CtlSendData>
    break;
 800b72c:	e004      	b.n	800b738 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f876 	bl	800b822 <USBD_CtlError>
    break;
 800b736:	bf00      	nop
  }
}
 800b738:	bf00      	nop
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	885b      	ldrh	r3, [r3, #2]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d106      	bne.n	800b760 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2201      	movs	r2, #1
 800b756:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f929 	bl	800b9b2 <USBD_CtlSendStatus>
  }

}
 800b760:	bf00      	nop
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b778:	3b01      	subs	r3, #1
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d80b      	bhi.n	800b796 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	885b      	ldrh	r3, [r3, #2]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d10c      	bne.n	800b7a0 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f90f 	bl	800b9b2 <USBD_CtlSendStatus>
    }
    break;
 800b794:	e004      	b.n	800b7a0 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f842 	bl	800b822 <USBD_CtlError>
    break;
 800b79e:	e000      	b.n	800b7a2 <USBD_ClrFeature+0x3a>
    break;
 800b7a0:	bf00      	nop
  }
}
 800b7a2:	bf00      	nop
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b083      	sub	sp, #12
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	781a      	ldrb	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	785a      	ldrb	r2, [r3, #1]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	3302      	adds	r3, #2
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	3303      	adds	r3, #3
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	021b      	lsls	r3, r3, #8
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	4413      	add	r3, r2
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	3305      	adds	r3, #5
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	021b      	lsls	r3, r3, #8
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	4413      	add	r3, r2
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	3306      	adds	r3, #6
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	b29a      	uxth	r2, r3
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	3307      	adds	r3, #7
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	021b      	lsls	r3, r3, #8
 800b80e:	b29b      	uxth	r3, r3
 800b810:	4413      	add	r3, r2
 800b812:	b29a      	uxth	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	80da      	strh	r2, [r3, #6]

}
 800b818:	bf00      	nop
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bc80      	pop	{r7}
 800b820:	4770      	bx	lr

0800b822 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b082      	sub	sp, #8
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800b82c:	2180      	movs	r1, #128	; 0x80
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fcb8 	bl	800c1a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b834:	2100      	movs	r1, #0
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 fcb4 	bl	800c1a4 <USBD_LL_StallEP>
}
 800b83c:	bf00      	nop
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b850:	2300      	movs	r3, #0
 800b852:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d032      	beq.n	800b8c0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f000 f834 	bl	800b8c8 <USBD_GetLen>
 800b860:	4603      	mov	r3, r0
 800b862:	3301      	adds	r3, #1
 800b864:	b29b      	uxth	r3, r3
 800b866:	005b      	lsls	r3, r3, #1
 800b868:	b29a      	uxth	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	1c5a      	adds	r2, r3, #1
 800b872:	75fa      	strb	r2, [r7, #23]
 800b874:	461a      	mov	r2, r3
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	4413      	add	r3, r2
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	7812      	ldrb	r2, [r2, #0]
 800b87e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	75fa      	strb	r2, [r7, #23]
 800b886:	461a      	mov	r2, r3
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	4413      	add	r3, r2
 800b88c:	2203      	movs	r2, #3
 800b88e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b890:	e012      	b.n	800b8b8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	1c5a      	adds	r2, r3, #1
 800b896:	60fa      	str	r2, [r7, #12]
 800b898:	7dfa      	ldrb	r2, [r7, #23]
 800b89a:	1c51      	adds	r1, r2, #1
 800b89c:	75f9      	strb	r1, [r7, #23]
 800b89e:	4611      	mov	r1, r2
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	440a      	add	r2, r1
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	75fa      	strb	r2, [r7, #23]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1e8      	bne.n	800b892 <USBD_GetString+0x4e>
    }
  }
}
 800b8c0:	bf00      	nop
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800b8d4:	e005      	b.n	800b8e2 <USBD_GetLen+0x1a>
    {
        len++;
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	73fb      	strb	r3, [r7, #15]
        buf++;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1f5      	bne.n	800b8d6 <USBD_GetLen+0xe>
    }

    return len;
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3714      	adds	r7, #20
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bc80      	pop	{r7}
 800b8f4:	4770      	bx	lr

0800b8f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	4613      	mov	r3, r2
 800b902:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2202      	movs	r2, #2
 800b908:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800b90c:	88fa      	ldrh	r2, [r7, #6]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b912:	88fa      	ldrh	r2, [r7, #6]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b918:	88fb      	ldrh	r3, [r7, #6]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	2100      	movs	r1, #0
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f000 fcc9 	bl	800c2b6 <USBD_LL_Transmit>

  return USBD_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b084      	sub	sp, #16
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	4613      	mov	r3, r2
 800b93a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b93c:	88fb      	ldrh	r3, [r7, #6]
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	2100      	movs	r1, #0
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f000 fcb7 	bl	800c2b6 <USBD_LL_Transmit>

  return USBD_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	60f8      	str	r0, [r7, #12]
 800b95a:	60b9      	str	r1, [r7, #8]
 800b95c:	4613      	mov	r3, r2
 800b95e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2203      	movs	r2, #3
 800b964:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800b968:	88fa      	ldrh	r2, [r7, #6]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800b970:	88fa      	ldrh	r2, [r7, #6]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800b978:	88fb      	ldrh	r3, [r7, #6]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	2100      	movs	r1, #0
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f000 fcbc 	bl	800c2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	60f8      	str	r0, [r7, #12]
 800b996:	60b9      	str	r1, [r7, #8]
 800b998:	4613      	mov	r3, r2
 800b99a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b99c:	88fb      	ldrh	r3, [r7, #6]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f000 fcaa 	bl	800c2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b082      	sub	sp, #8
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2204      	movs	r2, #4
 800b9be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fc74 	bl	800c2b6 <USBD_LL_Transmit>

  return USBD_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2205      	movs	r2, #5
 800b9e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fc84 	bl	800c2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
	...

0800ba00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba04:	2200      	movs	r2, #0
 800ba06:	4912      	ldr	r1, [pc, #72]	; (800ba50 <MX_USB_DEVICE_Init+0x50>)
 800ba08:	4812      	ldr	r0, [pc, #72]	; (800ba54 <MX_USB_DEVICE_Init+0x54>)
 800ba0a:	f7fe ffd4 	bl	800a9b6 <USBD_Init>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba14:	f7f6 fe44 	bl	80026a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba18:	490f      	ldr	r1, [pc, #60]	; (800ba58 <MX_USB_DEVICE_Init+0x58>)
 800ba1a:	480e      	ldr	r0, [pc, #56]	; (800ba54 <MX_USB_DEVICE_Init+0x54>)
 800ba1c:	f7fe fff6 	bl	800aa0c <USBD_RegisterClass>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba26:	f7f6 fe3b 	bl	80026a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba2a:	490c      	ldr	r1, [pc, #48]	; (800ba5c <MX_USB_DEVICE_Init+0x5c>)
 800ba2c:	4809      	ldr	r0, [pc, #36]	; (800ba54 <MX_USB_DEVICE_Init+0x54>)
 800ba2e:	f7fe ff27 	bl	800a880 <USBD_CDC_RegisterInterface>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d001      	beq.n	800ba3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba38:	f7f6 fe32 	bl	80026a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba3c:	4805      	ldr	r0, [pc, #20]	; (800ba54 <MX_USB_DEVICE_Init+0x54>)
 800ba3e:	f7fe fffe 	bl	800aa3e <USBD_Start>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba48:	f7f6 fe2a 	bl	80026a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba4c:	bf00      	nop
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	20000470 	.word	0x20000470
 800ba54:	20000988 	.word	0x20000988
 800ba58:	2000035c 	.word	0x2000035c
 800ba5c:	20000460 	.word	0x20000460

0800ba60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ba64:	2200      	movs	r2, #0
 800ba66:	4905      	ldr	r1, [pc, #20]	; (800ba7c <CDC_Init_FS+0x1c>)
 800ba68:	4805      	ldr	r0, [pc, #20]	; (800ba80 <CDC_Init_FS+0x20>)
 800ba6a:	f7fe ff1f 	bl	800a8ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ba6e:	4905      	ldr	r1, [pc, #20]	; (800ba84 <CDC_Init_FS+0x24>)
 800ba70:	4803      	ldr	r0, [pc, #12]	; (800ba80 <CDC_Init_FS+0x20>)
 800ba72:	f7fe ff34 	bl	800a8de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	20000ca4 	.word	0x20000ca4
 800ba80:	20000988 	.word	0x20000988
 800ba84:	20000c24 	.word	0x20000c24

0800ba88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ba8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bc80      	pop	{r7}
 800ba94:	4770      	bx	lr
	...

0800ba98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	6039      	str	r1, [r7, #0]
 800baa2:	71fb      	strb	r3, [r7, #7]
 800baa4:	4613      	mov	r3, r2
 800baa6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800baa8:	79fb      	ldrb	r3, [r7, #7]
 800baaa:	2b23      	cmp	r3, #35	; 0x23
 800baac:	d866      	bhi.n	800bb7c <CDC_Control_FS+0xe4>
 800baae:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <CDC_Control_FS+0x1c>)
 800bab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab4:	0800bb7d 	.word	0x0800bb7d
 800bab8:	0800bb7d 	.word	0x0800bb7d
 800babc:	0800bb7d 	.word	0x0800bb7d
 800bac0:	0800bb7d 	.word	0x0800bb7d
 800bac4:	0800bb7d 	.word	0x0800bb7d
 800bac8:	0800bb7d 	.word	0x0800bb7d
 800bacc:	0800bb7d 	.word	0x0800bb7d
 800bad0:	0800bb7d 	.word	0x0800bb7d
 800bad4:	0800bb7d 	.word	0x0800bb7d
 800bad8:	0800bb7d 	.word	0x0800bb7d
 800badc:	0800bb7d 	.word	0x0800bb7d
 800bae0:	0800bb7d 	.word	0x0800bb7d
 800bae4:	0800bb7d 	.word	0x0800bb7d
 800bae8:	0800bb7d 	.word	0x0800bb7d
 800baec:	0800bb7d 	.word	0x0800bb7d
 800baf0:	0800bb7d 	.word	0x0800bb7d
 800baf4:	0800bb7d 	.word	0x0800bb7d
 800baf8:	0800bb7d 	.word	0x0800bb7d
 800bafc:	0800bb7d 	.word	0x0800bb7d
 800bb00:	0800bb7d 	.word	0x0800bb7d
 800bb04:	0800bb7d 	.word	0x0800bb7d
 800bb08:	0800bb7d 	.word	0x0800bb7d
 800bb0c:	0800bb7d 	.word	0x0800bb7d
 800bb10:	0800bb7d 	.word	0x0800bb7d
 800bb14:	0800bb7d 	.word	0x0800bb7d
 800bb18:	0800bb7d 	.word	0x0800bb7d
 800bb1c:	0800bb7d 	.word	0x0800bb7d
 800bb20:	0800bb7d 	.word	0x0800bb7d
 800bb24:	0800bb7d 	.word	0x0800bb7d
 800bb28:	0800bb7d 	.word	0x0800bb7d
 800bb2c:	0800bb7d 	.word	0x0800bb7d
 800bb30:	0800bb7d 	.word	0x0800bb7d
 800bb34:	0800bb7d 	.word	0x0800bb7d
 800bb38:	0800bb45 	.word	0x0800bb45
 800bb3c:	0800bb7d 	.word	0x0800bb7d
 800bb40:	0800bb7d 	.word	0x0800bb7d
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	2220      	movs	r2, #32
 800bb48:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	22c2      	movs	r2, #194	; 0xc2
 800bb50:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	3302      	adds	r3, #2
 800bb56:	2201      	movs	r2, #1
 800bb58:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	3303      	adds	r3, #3
 800bb5e:	2200      	movs	r2, #0
 800bb60:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	3304      	adds	r3, #4
 800bb66:	2200      	movs	r2, #0
 800bb68:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	3305      	adds	r3, #5
 800bb6e:	2200      	movs	r2, #0
 800bb70:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	3306      	adds	r3, #6
 800bb76:	2208      	movs	r2, #8
 800bb78:	701a      	strb	r2, [r3, #0]
    break;
 800bb7a:	e000      	b.n	800bb7e <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bb7c:	bf00      	nop
  }

  return (USBD_OK);
 800bb7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bc80      	pop	{r7}
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop

0800bb8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800bb96:	2300      	movs	r3, #0
 800bb98:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800bb9a:	e018      	b.n	800bbce <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	4413      	add	r3, r2
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	2b0a      	cmp	r3, #10
 800bba6:	d005      	beq.n	800bbb4 <CDC_Receive_FS+0x28>
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	4413      	add	r3, r2
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	2b0d      	cmp	r3, #13
 800bbb2:	d102      	bne.n	800bbba <CDC_Receive_FS+0x2e>
 800bbb4:	4b12      	ldr	r3, [pc, #72]	; (800bc00 <CDC_Receive_FS+0x74>)
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7f6 fd26 	bl	8002614 <Write_to_circ_buffer>
	  i++;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d3e1      	bcc.n	800bb9c <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	4619      	mov	r1, r3
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f811 	bl	800bc08 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	4806      	ldr	r0, [pc, #24]	; (800bc04 <CDC_Receive_FS+0x78>)
 800bbea:	f7fe fe78 	bl	800a8de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bbee:	4805      	ldr	r0, [pc, #20]	; (800bc04 <CDC_Receive_FS+0x78>)
 800bbf0:	f7fe feb7 	bl	800a962 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bbf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000842 	.word	0x20000842
 800bc04:	20000988 	.word	0x20000988

0800bc08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	460b      	mov	r3, r1
 800bc12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc14:	2300      	movs	r3, #0
 800bc16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc18:	4b0d      	ldr	r3, [pc, #52]	; (800bc50 <CDC_Transmit_FS+0x48>)
 800bc1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d001      	beq.n	800bc2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e00b      	b.n	800bc46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bc2e:	887b      	ldrh	r3, [r7, #2]
 800bc30:	461a      	mov	r2, r3
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	4806      	ldr	r0, [pc, #24]	; (800bc50 <CDC_Transmit_FS+0x48>)
 800bc36:	f7fe fe39 	bl	800a8ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc3a:	4805      	ldr	r0, [pc, #20]	; (800bc50 <CDC_Transmit_FS+0x48>)
 800bc3c:	f7fe fe62 	bl	800a904 <USBD_CDC_TransmitPacket>
 800bc40:	4603      	mov	r3, r0
 800bc42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bc44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	20000988 	.word	0x20000988

0800bc54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	6039      	str	r1, [r7, #0]
 800bc5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	2212      	movs	r2, #18
 800bc64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc66:	4b03      	ldr	r3, [pc, #12]	; (800bc74 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bc80      	pop	{r7}
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	2000048c 	.word	0x2000048c

0800bc78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	4603      	mov	r3, r0
 800bc80:	6039      	str	r1, [r7, #0]
 800bc82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	2204      	movs	r2, #4
 800bc88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc8a:	4b03      	ldr	r3, [pc, #12]	; (800bc98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bc80      	pop	{r7}
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	200004a0 	.word	0x200004a0

0800bc9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	6039      	str	r1, [r7, #0]
 800bca6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bca8:	79fb      	ldrb	r3, [r7, #7]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d105      	bne.n	800bcba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	4907      	ldr	r1, [pc, #28]	; (800bcd0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcb2:	4808      	ldr	r0, [pc, #32]	; (800bcd4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcb4:	f7ff fdc6 	bl	800b844 <USBD_GetString>
 800bcb8:	e004      	b.n	800bcc4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	4904      	ldr	r1, [pc, #16]	; (800bcd0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcbe:	4805      	ldr	r0, [pc, #20]	; (800bcd4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcc0:	f7ff fdc0 	bl	800b844 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcc4:	4b02      	ldr	r3, [pc, #8]	; (800bcd0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	20000da4 	.word	0x20000da4
 800bcd4:	0800f2ec 	.word	0x0800f2ec

0800bcd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	6039      	str	r1, [r7, #0]
 800bce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	4904      	ldr	r1, [pc, #16]	; (800bcf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bce8:	4804      	ldr	r0, [pc, #16]	; (800bcfc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bcea:	f7ff fdab 	bl	800b844 <USBD_GetString>
  return USBD_StrDesc;
 800bcee:	4b02      	ldr	r3, [pc, #8]	; (800bcf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	20000da4 	.word	0x20000da4
 800bcfc:	0800f2f8 	.word	0x0800f2f8

0800bd00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	4603      	mov	r3, r0
 800bd08:	6039      	str	r1, [r7, #0]
 800bd0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	221a      	movs	r2, #26
 800bd10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd12:	f000 f843 	bl	800bd9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd16:	4b02      	ldr	r3, [pc, #8]	; (800bd20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	200004a4 	.word	0x200004a4

0800bd24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	6039      	str	r1, [r7, #0]
 800bd2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d105      	bne.n	800bd42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	4907      	ldr	r1, [pc, #28]	; (800bd58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd3a:	4808      	ldr	r0, [pc, #32]	; (800bd5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd3c:	f7ff fd82 	bl	800b844 <USBD_GetString>
 800bd40:	e004      	b.n	800bd4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	4904      	ldr	r1, [pc, #16]	; (800bd58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd46:	4805      	ldr	r0, [pc, #20]	; (800bd5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd48:	f7ff fd7c 	bl	800b844 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd4c:	4b02      	ldr	r3, [pc, #8]	; (800bd58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20000da4 	.word	0x20000da4
 800bd5c:	0800f308 	.word	0x0800f308

0800bd60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	4603      	mov	r3, r0
 800bd68:	6039      	str	r1, [r7, #0]
 800bd6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd6c:	79fb      	ldrb	r3, [r7, #7]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d105      	bne.n	800bd7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	4907      	ldr	r1, [pc, #28]	; (800bd94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd76:	4808      	ldr	r0, [pc, #32]	; (800bd98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd78:	f7ff fd64 	bl	800b844 <USBD_GetString>
 800bd7c:	e004      	b.n	800bd88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	4904      	ldr	r1, [pc, #16]	; (800bd94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd82:	4805      	ldr	r0, [pc, #20]	; (800bd98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd84:	f7ff fd5e 	bl	800b844 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd88:	4b02      	ldr	r3, [pc, #8]	; (800bd94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20000da4 	.word	0x20000da4
 800bd98:	0800f314 	.word	0x0800f314

0800bd9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bda2:	4b0f      	ldr	r3, [pc, #60]	; (800bde0 <Get_SerialNum+0x44>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bda8:	4b0e      	ldr	r3, [pc, #56]	; (800bde4 <Get_SerialNum+0x48>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdae:	4b0e      	ldr	r3, [pc, #56]	; (800bde8 <Get_SerialNum+0x4c>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4413      	add	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d009      	beq.n	800bdd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdc2:	2208      	movs	r2, #8
 800bdc4:	4909      	ldr	r1, [pc, #36]	; (800bdec <Get_SerialNum+0x50>)
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f000 f814 	bl	800bdf4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdcc:	2204      	movs	r2, #4
 800bdce:	4908      	ldr	r1, [pc, #32]	; (800bdf0 <Get_SerialNum+0x54>)
 800bdd0:	68b8      	ldr	r0, [r7, #8]
 800bdd2:	f000 f80f 	bl	800bdf4 <IntToUnicode>
  }
}
 800bdd6:	bf00      	nop
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	1ff80050 	.word	0x1ff80050
 800bde4:	1ff80054 	.word	0x1ff80054
 800bde8:	1ff80058 	.word	0x1ff80058
 800bdec:	200004a6 	.word	0x200004a6
 800bdf0:	200004b6 	.word	0x200004b6

0800bdf4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b087      	sub	sp, #28
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	4613      	mov	r3, r2
 800be00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be02:	2300      	movs	r3, #0
 800be04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be06:	2300      	movs	r3, #0
 800be08:	75fb      	strb	r3, [r7, #23]
 800be0a:	e027      	b.n	800be5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	0f1b      	lsrs	r3, r3, #28
 800be10:	2b09      	cmp	r3, #9
 800be12:	d80b      	bhi.n	800be2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	0f1b      	lsrs	r3, r3, #28
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
 800be1c:	005b      	lsls	r3, r3, #1
 800be1e:	4619      	mov	r1, r3
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	440b      	add	r3, r1
 800be24:	3230      	adds	r2, #48	; 0x30
 800be26:	b2d2      	uxtb	r2, r2
 800be28:	701a      	strb	r2, [r3, #0]
 800be2a:	e00a      	b.n	800be42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	0f1b      	lsrs	r3, r3, #28
 800be30:	b2da      	uxtb	r2, r3
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	4619      	mov	r1, r3
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	440b      	add	r3, r1
 800be3c:	3237      	adds	r2, #55	; 0x37
 800be3e:	b2d2      	uxtb	r2, r2
 800be40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	011b      	lsls	r3, r3, #4
 800be46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	3301      	adds	r3, #1
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	4413      	add	r3, r2
 800be52:	2200      	movs	r2, #0
 800be54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be56:	7dfb      	ldrb	r3, [r7, #23]
 800be58:	3301      	adds	r3, #1
 800be5a:	75fb      	strb	r3, [r7, #23]
 800be5c:	7dfa      	ldrb	r2, [r7, #23]
 800be5e:	79fb      	ldrb	r3, [r7, #7]
 800be60:	429a      	cmp	r2, r3
 800be62:	d3d3      	bcc.n	800be0c <IntToUnicode+0x18>
  }
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop
 800be68:	371c      	adds	r7, #28
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bc80      	pop	{r7}
 800be6e:	4770      	bx	lr

0800be70 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be70:	b480      	push	{r7}
 800be72:	b083      	sub	sp, #12
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800be7c:	78fb      	ldrb	r3, [r7, #3]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d106      	bne.n	800be90 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800be82:	4b09      	ldr	r3, [pc, #36]	; (800bea8 <HAL_PCDEx_SetConnectionState+0x38>)
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	4a08      	ldr	r2, [pc, #32]	; (800bea8 <HAL_PCDEx_SetConnectionState+0x38>)
 800be88:	f043 0301 	orr.w	r3, r3, #1
 800be8c:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800be8e:	e005      	b.n	800be9c <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800be90:	4b05      	ldr	r3, [pc, #20]	; (800bea8 <HAL_PCDEx_SetConnectionState+0x38>)
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	4a04      	ldr	r2, [pc, #16]	; (800bea8 <HAL_PCDEx_SetConnectionState+0x38>)
 800be96:	f023 0301 	bic.w	r3, r3, #1
 800be9a:	6053      	str	r3, [r2, #4]
}
 800be9c:	bf00      	nop
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bc80      	pop	{r7}
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	40010000 	.word	0x40010000

0800beac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a0d      	ldr	r2, [pc, #52]	; (800bef0 <HAL_PCD_MspInit+0x44>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d113      	bne.n	800bee6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bebe:	4b0d      	ldr	r3, [pc, #52]	; (800bef4 <HAL_PCD_MspInit+0x48>)
 800bec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec2:	4a0c      	ldr	r2, [pc, #48]	; (800bef4 <HAL_PCD_MspInit+0x48>)
 800bec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bec8:	6253      	str	r3, [r2, #36]	; 0x24
 800beca:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <HAL_PCD_MspInit+0x48>)
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bed2:	60fb      	str	r3, [r7, #12]
 800bed4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800bed6:	2200      	movs	r2, #0
 800bed8:	2101      	movs	r1, #1
 800beda:	2014      	movs	r0, #20
 800bedc:	f7f7 f961 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bee0:	2014      	movs	r0, #20
 800bee2:	f7f7 f97a 	bl	80031da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bee6:	bf00      	nop
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	40005c00 	.word	0x40005c00
 800bef4:	40023800 	.word	0x40023800

0800bef8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4610      	mov	r0, r2
 800bf10:	f7fe fddd 	bl	800aace <USBD_LL_SetupStage>
}
 800bf14:	bf00      	nop
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	460b      	mov	r3, r1
 800bf26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bf2e:	78fa      	ldrb	r2, [r7, #3]
 800bf30:	6879      	ldr	r1, [r7, #4]
 800bf32:	4613      	mov	r3, r2
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	4413      	add	r3, r2
 800bf38:	00db      	lsls	r3, r3, #3
 800bf3a:	440b      	add	r3, r1
 800bf3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	78fb      	ldrb	r3, [r7, #3]
 800bf44:	4619      	mov	r1, r3
 800bf46:	f7fe fe0f 	bl	800ab68 <USBD_LL_DataOutStage>
}
 800bf4a:	bf00      	nop
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bf64:	78fa      	ldrb	r2, [r7, #3]
 800bf66:	6879      	ldr	r1, [r7, #4]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	00db      	lsls	r3, r3, #3
 800bf70:	440b      	add	r3, r1
 800bf72:	333c      	adds	r3, #60	; 0x3c
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	78fb      	ldrb	r3, [r7, #3]
 800bf78:	4619      	mov	r1, r3
 800bf7a:	f7fe fe66 	bl	800ac4a <USBD_LL_DataInStage>
}
 800bf7e:	bf00      	nop
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b082      	sub	sp, #8
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fe ff71 	bl	800ae7c <USBD_LL_SOF>
}
 800bf9a:	bf00      	nop
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d001      	beq.n	800bfba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bfb6:	f7f6 fb73 	bl	80026a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bfc0:	7bfa      	ldrb	r2, [r7, #15]
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe ff26 	bl	800ae16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fe fedf 	bl	800ad94 <USBD_LL_Reset>
}
 800bfd6:	bf00      	nop
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
	...

0800bfe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fe ff20 	bl	800ae34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d005      	beq.n	800c008 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bffc:	4b04      	ldr	r3, [pc, #16]	; (800c010 <HAL_PCD_SuspendCallback+0x30>)
 800bffe:	691b      	ldr	r3, [r3, #16]
 800c000:	4a03      	ldr	r2, [pc, #12]	; (800c010 <HAL_PCD_SuspendCallback+0x30>)
 800c002:	f043 0306 	orr.w	r3, r3, #6
 800c006:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	e000ed00 	.word	0xe000ed00

0800c014 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe ff1a 	bl	800ae5c <USBD_LL_Resume>
}
 800c028:	bf00      	nop
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c038:	4a28      	ldr	r2, [pc, #160]	; (800c0dc <USBD_LL_Init+0xac>)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a26      	ldr	r2, [pc, #152]	; (800c0dc <USBD_LL_Init+0xac>)
 800c044:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800c048:	4b24      	ldr	r3, [pc, #144]	; (800c0dc <USBD_LL_Init+0xac>)
 800c04a:	4a25      	ldr	r2, [pc, #148]	; (800c0e0 <USBD_LL_Init+0xb0>)
 800c04c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c04e:	4b23      	ldr	r3, [pc, #140]	; (800c0dc <USBD_LL_Init+0xac>)
 800c050:	2208      	movs	r2, #8
 800c052:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c054:	4b21      	ldr	r3, [pc, #132]	; (800c0dc <USBD_LL_Init+0xac>)
 800c056:	2202      	movs	r2, #2
 800c058:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c05a:	4b20      	ldr	r3, [pc, #128]	; (800c0dc <USBD_LL_Init+0xac>)
 800c05c:	2202      	movs	r2, #2
 800c05e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c060:	4b1e      	ldr	r3, [pc, #120]	; (800c0dc <USBD_LL_Init+0xac>)
 800c062:	2200      	movs	r2, #0
 800c064:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c066:	4b1d      	ldr	r3, [pc, #116]	; (800c0dc <USBD_LL_Init+0xac>)
 800c068:	2200      	movs	r2, #0
 800c06a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c06c:	481b      	ldr	r0, [pc, #108]	; (800c0dc <USBD_LL_Init+0xac>)
 800c06e:	f7f8 fa53 	bl	8004518 <HAL_PCD_Init>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c078:	f7f6 fb12 	bl	80026a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c082:	2318      	movs	r3, #24
 800c084:	2200      	movs	r2, #0
 800c086:	2100      	movs	r1, #0
 800c088:	f7f9 fe30 	bl	8005cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c092:	2358      	movs	r3, #88	; 0x58
 800c094:	2200      	movs	r2, #0
 800c096:	2180      	movs	r1, #128	; 0x80
 800c098:	f7f9 fe28 	bl	8005cec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c0a2:	23c0      	movs	r3, #192	; 0xc0
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2181      	movs	r1, #129	; 0x81
 800c0a8:	f7f9 fe20 	bl	8005cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c0b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	2101      	movs	r1, #1
 800c0ba:	f7f9 fe17 	bl	8005cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c0c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	2182      	movs	r1, #130	; 0x82
 800c0cc:	f7f9 fe0e 	bl	8005cec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20000fa4 	.word	0x20000fa4
 800c0e0:	40005c00 	.word	0x40005c00

0800c0e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7f8 faea 	bl	80046d4 <HAL_PCD_Start>
 800c100:	4603      	mov	r3, r0
 800c102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c104:	7bfb      	ldrb	r3, [r7, #15]
 800c106:	4618      	mov	r0, r3
 800c108:	f000 f944 	bl	800c394 <USBD_Get_USB_Status>
 800c10c:	4603      	mov	r3, r0
 800c10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c110:	7bbb      	ldrb	r3, [r7, #14]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	4608      	mov	r0, r1
 800c124:	4611      	mov	r1, r2
 800c126:	461a      	mov	r2, r3
 800c128:	4603      	mov	r3, r0
 800c12a:	70fb      	strb	r3, [r7, #3]
 800c12c:	460b      	mov	r3, r1
 800c12e:	70bb      	strb	r3, [r7, #2]
 800c130:	4613      	mov	r3, r2
 800c132:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c138:	2300      	movs	r3, #0
 800c13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c142:	78bb      	ldrb	r3, [r7, #2]
 800c144:	883a      	ldrh	r2, [r7, #0]
 800c146:	78f9      	ldrb	r1, [r7, #3]
 800c148:	f7f8 fc06 	bl	8004958 <HAL_PCD_EP_Open>
 800c14c:	4603      	mov	r3, r0
 800c14e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	4618      	mov	r0, r3
 800c154:	f000 f91e 	bl	800c394 <USBD_Get_USB_Status>
 800c158:	4603      	mov	r3, r0
 800c15a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c15c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b084      	sub	sp, #16
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	460b      	mov	r3, r1
 800c170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c180:	78fa      	ldrb	r2, [r7, #3]
 800c182:	4611      	mov	r1, r2
 800c184:	4618      	mov	r0, r3
 800c186:	f7f8 fc4d 	bl	8004a24 <HAL_PCD_EP_Close>
 800c18a:	4603      	mov	r3, r0
 800c18c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c18e:	7bfb      	ldrb	r3, [r7, #15]
 800c190:	4618      	mov	r0, r3
 800c192:	f000 f8ff 	bl	800c394 <USBD_Get_USB_Status>
 800c196:	4603      	mov	r3, r0
 800c198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c19a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c1be:	78fa      	ldrb	r2, [r7, #3]
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7f8 fd0d 	bl	8004be2 <HAL_PCD_EP_SetStall>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 f8e0 	bl	800c394 <USBD_Get_USB_Status>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b084      	sub	sp, #16
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c1fc:	78fa      	ldrb	r2, [r7, #3]
 800c1fe:	4611      	mov	r1, r2
 800c200:	4618      	mov	r0, r3
 800c202:	f7f8 fd40 	bl	8004c86 <HAL_PCD_EP_ClrStall>
 800c206:	4603      	mov	r3, r0
 800c208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 f8c1 	bl	800c394 <USBD_Get_USB_Status>
 800c212:	4603      	mov	r3, r0
 800c214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c216:	7bbb      	ldrb	r3, [r7, #14]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	460b      	mov	r3, r1
 800c22a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c232:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	da0c      	bge.n	800c256 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c242:	68f9      	ldr	r1, [r7, #12]
 800c244:	1c5a      	adds	r2, r3, #1
 800c246:	4613      	mov	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	00db      	lsls	r3, r3, #3
 800c24e:	440b      	add	r3, r1
 800c250:	3302      	adds	r3, #2
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	e00b      	b.n	800c26e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c256:	78fb      	ldrb	r3, [r7, #3]
 800c258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c25c:	68f9      	ldr	r1, [r7, #12]
 800c25e:	4613      	mov	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4413      	add	r3, r2
 800c264:	00db      	lsls	r3, r3, #3
 800c266:	440b      	add	r3, r1
 800c268:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c26c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	bc80      	pop	{r7}
 800c276:	4770      	bx	lr

0800c278 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	460b      	mov	r3, r1
 800c282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c284:	2300      	movs	r3, #0
 800c286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c292:	78fa      	ldrb	r2, [r7, #3]
 800c294:	4611      	mov	r1, r2
 800c296:	4618      	mov	r0, r3
 800c298:	f7f8 fb39 	bl	800490e <HAL_PCD_SetAddress>
 800c29c:	4603      	mov	r3, r0
 800c29e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 f876 	bl	800c394 <USBD_Get_USB_Status>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b086      	sub	sp, #24
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	72fb      	strb	r3, [r7, #11]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c2d8:	893b      	ldrh	r3, [r7, #8]
 800c2da:	7af9      	ldrb	r1, [r7, #11]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	f7f8 fc3d 	bl	8004b5c <HAL_PCD_EP_Transmit>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2e6:	7dfb      	ldrb	r3, [r7, #23]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 f853 	bl	800c394 <USBD_Get_USB_Status>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3718      	adds	r7, #24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	607a      	str	r2, [r7, #4]
 800c306:	461a      	mov	r2, r3
 800c308:	460b      	mov	r3, r1
 800c30a:	72fb      	strb	r3, [r7, #11]
 800c30c:	4613      	mov	r3, r2
 800c30e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c31e:	893b      	ldrh	r3, [r7, #8]
 800c320:	7af9      	ldrb	r1, [r7, #11]
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	f7f8 fbc6 	bl	8004ab4 <HAL_PCD_EP_Receive>
 800c328:	4603      	mov	r3, r0
 800c32a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c32c:	7dfb      	ldrb	r3, [r7, #23]
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 f830 	bl	800c394 <USBD_Get_USB_Status>
 800c334:	4603      	mov	r3, r0
 800c336:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c338:	7dbb      	ldrb	r3, [r7, #22]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3718      	adds	r7, #24
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b082      	sub	sp, #8
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
 800c34a:	460b      	mov	r3, r1
 800c34c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c354:	78fa      	ldrb	r2, [r7, #3]
 800c356:	4611      	mov	r1, r2
 800c358:	4618      	mov	r0, r3
 800c35a:	f7f8 fbe8 	bl	8004b2e <HAL_PCD_EP_GetRxCount>
 800c35e:	4603      	mov	r3, r0
}
 800c360:	4618      	mov	r0, r3
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c370:	4b02      	ldr	r3, [pc, #8]	; (800c37c <USBD_static_malloc+0x14>)
}
 800c372:	4618      	mov	r0, r3
 800c374:	370c      	adds	r7, #12
 800c376:	46bd      	mov	sp, r7
 800c378:	bc80      	pop	{r7}
 800c37a:	4770      	bx	lr
 800c37c:	20001290 	.word	0x20001290

0800c380 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]

}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bc80      	pop	{r7}
 800c390:	4770      	bx	lr
	...

0800c394 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	4603      	mov	r3, r0
 800c39c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3a2:	79fb      	ldrb	r3, [r7, #7]
 800c3a4:	2b03      	cmp	r3, #3
 800c3a6:	d817      	bhi.n	800c3d8 <USBD_Get_USB_Status+0x44>
 800c3a8:	a201      	add	r2, pc, #4	; (adr r2, 800c3b0 <USBD_Get_USB_Status+0x1c>)
 800c3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ae:	bf00      	nop
 800c3b0:	0800c3c1 	.word	0x0800c3c1
 800c3b4:	0800c3c7 	.word	0x0800c3c7
 800c3b8:	0800c3cd 	.word	0x0800c3cd
 800c3bc:	0800c3d3 	.word	0x0800c3d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3c4:	e00b      	b.n	800c3de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3c6:	2302      	movs	r3, #2
 800c3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ca:	e008      	b.n	800c3de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d0:	e005      	b.n	800c3de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3d2:	2302      	movs	r3, #2
 800c3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d6:	e002      	b.n	800c3de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c3d8:	2302      	movs	r3, #2
 800c3da:	73fb      	strb	r3, [r7, #15]
    break;
 800c3dc:	bf00      	nop
  }
  return usb_status;
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bc80      	pop	{r7}
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop

0800c3ec <__errno>:
 800c3ec:	4b01      	ldr	r3, [pc, #4]	; (800c3f4 <__errno+0x8>)
 800c3ee:	6818      	ldr	r0, [r3, #0]
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	200004c0 	.word	0x200004c0

0800c3f8 <__libc_init_array>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	2600      	movs	r6, #0
 800c3fc:	4d0c      	ldr	r5, [pc, #48]	; (800c430 <__libc_init_array+0x38>)
 800c3fe:	4c0d      	ldr	r4, [pc, #52]	; (800c434 <__libc_init_array+0x3c>)
 800c400:	1b64      	subs	r4, r4, r5
 800c402:	10a4      	asrs	r4, r4, #2
 800c404:	42a6      	cmp	r6, r4
 800c406:	d109      	bne.n	800c41c <__libc_init_array+0x24>
 800c408:	f002 fefc 	bl	800f204 <_init>
 800c40c:	2600      	movs	r6, #0
 800c40e:	4d0a      	ldr	r5, [pc, #40]	; (800c438 <__libc_init_array+0x40>)
 800c410:	4c0a      	ldr	r4, [pc, #40]	; (800c43c <__libc_init_array+0x44>)
 800c412:	1b64      	subs	r4, r4, r5
 800c414:	10a4      	asrs	r4, r4, #2
 800c416:	42a6      	cmp	r6, r4
 800c418:	d105      	bne.n	800c426 <__libc_init_array+0x2e>
 800c41a:	bd70      	pop	{r4, r5, r6, pc}
 800c41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c420:	4798      	blx	r3
 800c422:	3601      	adds	r6, #1
 800c424:	e7ee      	b.n	800c404 <__libc_init_array+0xc>
 800c426:	f855 3b04 	ldr.w	r3, [r5], #4
 800c42a:	4798      	blx	r3
 800c42c:	3601      	adds	r6, #1
 800c42e:	e7f2      	b.n	800c416 <__libc_init_array+0x1e>
 800c430:	0800f730 	.word	0x0800f730
 800c434:	0800f730 	.word	0x0800f730
 800c438:	0800f730 	.word	0x0800f730
 800c43c:	0800f734 	.word	0x0800f734

0800c440 <memcpy>:
 800c440:	440a      	add	r2, r1
 800c442:	4291      	cmp	r1, r2
 800c444:	f100 33ff 	add.w	r3, r0, #4294967295
 800c448:	d100      	bne.n	800c44c <memcpy+0xc>
 800c44a:	4770      	bx	lr
 800c44c:	b510      	push	{r4, lr}
 800c44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c452:	4291      	cmp	r1, r2
 800c454:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c458:	d1f9      	bne.n	800c44e <memcpy+0xe>
 800c45a:	bd10      	pop	{r4, pc}

0800c45c <memset>:
 800c45c:	4603      	mov	r3, r0
 800c45e:	4402      	add	r2, r0
 800c460:	4293      	cmp	r3, r2
 800c462:	d100      	bne.n	800c466 <memset+0xa>
 800c464:	4770      	bx	lr
 800c466:	f803 1b01 	strb.w	r1, [r3], #1
 800c46a:	e7f9      	b.n	800c460 <memset+0x4>

0800c46c <__cvt>:
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c472:	461f      	mov	r7, r3
 800c474:	bfbb      	ittet	lt
 800c476:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c47a:	461f      	movlt	r7, r3
 800c47c:	2300      	movge	r3, #0
 800c47e:	232d      	movlt	r3, #45	; 0x2d
 800c480:	b088      	sub	sp, #32
 800c482:	4614      	mov	r4, r2
 800c484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c486:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c488:	7013      	strb	r3, [r2, #0]
 800c48a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c48c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800c490:	f023 0820 	bic.w	r8, r3, #32
 800c494:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c498:	d005      	beq.n	800c4a6 <__cvt+0x3a>
 800c49a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c49e:	d100      	bne.n	800c4a2 <__cvt+0x36>
 800c4a0:	3501      	adds	r5, #1
 800c4a2:	2302      	movs	r3, #2
 800c4a4:	e000      	b.n	800c4a8 <__cvt+0x3c>
 800c4a6:	2303      	movs	r3, #3
 800c4a8:	aa07      	add	r2, sp, #28
 800c4aa:	9204      	str	r2, [sp, #16]
 800c4ac:	aa06      	add	r2, sp, #24
 800c4ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c4b2:	e9cd 3500 	strd	r3, r5, [sp]
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	463b      	mov	r3, r7
 800c4ba:	f000 fd01 	bl	800cec0 <_dtoa_r>
 800c4be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	d102      	bne.n	800c4cc <__cvt+0x60>
 800c4c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4c8:	07db      	lsls	r3, r3, #31
 800c4ca:	d522      	bpl.n	800c512 <__cvt+0xa6>
 800c4cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c4d0:	eb06 0905 	add.w	r9, r6, r5
 800c4d4:	d110      	bne.n	800c4f8 <__cvt+0x8c>
 800c4d6:	7833      	ldrb	r3, [r6, #0]
 800c4d8:	2b30      	cmp	r3, #48	; 0x30
 800c4da:	d10a      	bne.n	800c4f2 <__cvt+0x86>
 800c4dc:	2200      	movs	r2, #0
 800c4de:	2300      	movs	r3, #0
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	4639      	mov	r1, r7
 800c4e4:	f7f4 fa78 	bl	80009d8 <__aeabi_dcmpeq>
 800c4e8:	b918      	cbnz	r0, 800c4f2 <__cvt+0x86>
 800c4ea:	f1c5 0501 	rsb	r5, r5, #1
 800c4ee:	f8ca 5000 	str.w	r5, [sl]
 800c4f2:	f8da 3000 	ldr.w	r3, [sl]
 800c4f6:	4499      	add	r9, r3
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	4639      	mov	r1, r7
 800c500:	f7f4 fa6a 	bl	80009d8 <__aeabi_dcmpeq>
 800c504:	b108      	cbz	r0, 800c50a <__cvt+0x9e>
 800c506:	f8cd 901c 	str.w	r9, [sp, #28]
 800c50a:	2230      	movs	r2, #48	; 0x30
 800c50c:	9b07      	ldr	r3, [sp, #28]
 800c50e:	454b      	cmp	r3, r9
 800c510:	d307      	bcc.n	800c522 <__cvt+0xb6>
 800c512:	4630      	mov	r0, r6
 800c514:	9b07      	ldr	r3, [sp, #28]
 800c516:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c518:	1b9b      	subs	r3, r3, r6
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	b008      	add	sp, #32
 800c51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c522:	1c59      	adds	r1, r3, #1
 800c524:	9107      	str	r1, [sp, #28]
 800c526:	701a      	strb	r2, [r3, #0]
 800c528:	e7f0      	b.n	800c50c <__cvt+0xa0>

0800c52a <__exponent>:
 800c52a:	4603      	mov	r3, r0
 800c52c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c52e:	2900      	cmp	r1, #0
 800c530:	f803 2b02 	strb.w	r2, [r3], #2
 800c534:	bfb6      	itet	lt
 800c536:	222d      	movlt	r2, #45	; 0x2d
 800c538:	222b      	movge	r2, #43	; 0x2b
 800c53a:	4249      	neglt	r1, r1
 800c53c:	2909      	cmp	r1, #9
 800c53e:	7042      	strb	r2, [r0, #1]
 800c540:	dd2b      	ble.n	800c59a <__exponent+0x70>
 800c542:	f10d 0407 	add.w	r4, sp, #7
 800c546:	46a4      	mov	ip, r4
 800c548:	270a      	movs	r7, #10
 800c54a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c54e:	460a      	mov	r2, r1
 800c550:	46a6      	mov	lr, r4
 800c552:	fb07 1516 	mls	r5, r7, r6, r1
 800c556:	2a63      	cmp	r2, #99	; 0x63
 800c558:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800c55c:	4631      	mov	r1, r6
 800c55e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c562:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c566:	dcf0      	bgt.n	800c54a <__exponent+0x20>
 800c568:	3130      	adds	r1, #48	; 0x30
 800c56a:	f1ae 0502 	sub.w	r5, lr, #2
 800c56e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c572:	4629      	mov	r1, r5
 800c574:	1c44      	adds	r4, r0, #1
 800c576:	4561      	cmp	r1, ip
 800c578:	d30a      	bcc.n	800c590 <__exponent+0x66>
 800c57a:	f10d 0209 	add.w	r2, sp, #9
 800c57e:	eba2 020e 	sub.w	r2, r2, lr
 800c582:	4565      	cmp	r5, ip
 800c584:	bf88      	it	hi
 800c586:	2200      	movhi	r2, #0
 800c588:	4413      	add	r3, r2
 800c58a:	1a18      	subs	r0, r3, r0
 800c58c:	b003      	add	sp, #12
 800c58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c590:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c594:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c598:	e7ed      	b.n	800c576 <__exponent+0x4c>
 800c59a:	2330      	movs	r3, #48	; 0x30
 800c59c:	3130      	adds	r1, #48	; 0x30
 800c59e:	7083      	strb	r3, [r0, #2]
 800c5a0:	70c1      	strb	r1, [r0, #3]
 800c5a2:	1d03      	adds	r3, r0, #4
 800c5a4:	e7f1      	b.n	800c58a <__exponent+0x60>
	...

0800c5a8 <_printf_float>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	b091      	sub	sp, #68	; 0x44
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c5b4:	4616      	mov	r6, r2
 800c5b6:	461f      	mov	r7, r3
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	f001 fa81 	bl	800dac0 <_localeconv_r>
 800c5be:	6803      	ldr	r3, [r0, #0]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c4:	f7f3 fddc 	bl	8000180 <strlen>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	930e      	str	r3, [sp, #56]	; 0x38
 800c5cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c5d0:	900a      	str	r0, [sp, #40]	; 0x28
 800c5d2:	3307      	adds	r3, #7
 800c5d4:	f023 0307 	bic.w	r3, r3, #7
 800c5d8:	f103 0208 	add.w	r2, r3, #8
 800c5dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c5e0:	f8d4 b000 	ldr.w	fp, [r4]
 800c5e4:	f8c8 2000 	str.w	r2, [r8]
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c5f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c5f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c5f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c5fe:	4640      	mov	r0, r8
 800c600:	4b9c      	ldr	r3, [pc, #624]	; (800c874 <_printf_float+0x2cc>)
 800c602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c604:	f7f4 fa1a 	bl	8000a3c <__aeabi_dcmpun>
 800c608:	bb70      	cbnz	r0, 800c668 <_printf_float+0xc0>
 800c60a:	f04f 32ff 	mov.w	r2, #4294967295
 800c60e:	4640      	mov	r0, r8
 800c610:	4b98      	ldr	r3, [pc, #608]	; (800c874 <_printf_float+0x2cc>)
 800c612:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c614:	f7f4 f9f4 	bl	8000a00 <__aeabi_dcmple>
 800c618:	bb30      	cbnz	r0, 800c668 <_printf_float+0xc0>
 800c61a:	2200      	movs	r2, #0
 800c61c:	2300      	movs	r3, #0
 800c61e:	4640      	mov	r0, r8
 800c620:	4651      	mov	r1, sl
 800c622:	f7f4 f9e3 	bl	80009ec <__aeabi_dcmplt>
 800c626:	b110      	cbz	r0, 800c62e <_printf_float+0x86>
 800c628:	232d      	movs	r3, #45	; 0x2d
 800c62a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c62e:	4b92      	ldr	r3, [pc, #584]	; (800c878 <_printf_float+0x2d0>)
 800c630:	4892      	ldr	r0, [pc, #584]	; (800c87c <_printf_float+0x2d4>)
 800c632:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c636:	bf94      	ite	ls
 800c638:	4698      	movls	r8, r3
 800c63a:	4680      	movhi	r8, r0
 800c63c:	2303      	movs	r3, #3
 800c63e:	f04f 0a00 	mov.w	sl, #0
 800c642:	6123      	str	r3, [r4, #16]
 800c644:	f02b 0304 	bic.w	r3, fp, #4
 800c648:	6023      	str	r3, [r4, #0]
 800c64a:	4633      	mov	r3, r6
 800c64c:	4621      	mov	r1, r4
 800c64e:	4628      	mov	r0, r5
 800c650:	9700      	str	r7, [sp, #0]
 800c652:	aa0f      	add	r2, sp, #60	; 0x3c
 800c654:	f000 f9d4 	bl	800ca00 <_printf_common>
 800c658:	3001      	adds	r0, #1
 800c65a:	f040 8090 	bne.w	800c77e <_printf_float+0x1d6>
 800c65e:	f04f 30ff 	mov.w	r0, #4294967295
 800c662:	b011      	add	sp, #68	; 0x44
 800c664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c668:	4642      	mov	r2, r8
 800c66a:	4653      	mov	r3, sl
 800c66c:	4640      	mov	r0, r8
 800c66e:	4651      	mov	r1, sl
 800c670:	f7f4 f9e4 	bl	8000a3c <__aeabi_dcmpun>
 800c674:	b148      	cbz	r0, 800c68a <_printf_float+0xe2>
 800c676:	f1ba 0f00 	cmp.w	sl, #0
 800c67a:	bfb8      	it	lt
 800c67c:	232d      	movlt	r3, #45	; 0x2d
 800c67e:	4880      	ldr	r0, [pc, #512]	; (800c880 <_printf_float+0x2d8>)
 800c680:	bfb8      	it	lt
 800c682:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c686:	4b7f      	ldr	r3, [pc, #508]	; (800c884 <_printf_float+0x2dc>)
 800c688:	e7d3      	b.n	800c632 <_printf_float+0x8a>
 800c68a:	6863      	ldr	r3, [r4, #4]
 800c68c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	d142      	bne.n	800c71a <_printf_float+0x172>
 800c694:	2306      	movs	r3, #6
 800c696:	6063      	str	r3, [r4, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	9206      	str	r2, [sp, #24]
 800c69c:	aa0e      	add	r2, sp, #56	; 0x38
 800c69e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c6a2:	aa0d      	add	r2, sp, #52	; 0x34
 800c6a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c6a8:	9203      	str	r2, [sp, #12]
 800c6aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c6ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c6b2:	6023      	str	r3, [r4, #0]
 800c6b4:	6863      	ldr	r3, [r4, #4]
 800c6b6:	4642      	mov	r2, r8
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	4653      	mov	r3, sl
 800c6be:	910b      	str	r1, [sp, #44]	; 0x2c
 800c6c0:	f7ff fed4 	bl	800c46c <__cvt>
 800c6c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6c6:	4680      	mov	r8, r0
 800c6c8:	2947      	cmp	r1, #71	; 0x47
 800c6ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c6cc:	d108      	bne.n	800c6e0 <_printf_float+0x138>
 800c6ce:	1cc8      	adds	r0, r1, #3
 800c6d0:	db02      	blt.n	800c6d8 <_printf_float+0x130>
 800c6d2:	6863      	ldr	r3, [r4, #4]
 800c6d4:	4299      	cmp	r1, r3
 800c6d6:	dd40      	ble.n	800c75a <_printf_float+0x1b2>
 800c6d8:	f1a9 0902 	sub.w	r9, r9, #2
 800c6dc:	fa5f f989 	uxtb.w	r9, r9
 800c6e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c6e4:	d81f      	bhi.n	800c726 <_printf_float+0x17e>
 800c6e6:	464a      	mov	r2, r9
 800c6e8:	3901      	subs	r1, #1
 800c6ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c6ee:	910d      	str	r1, [sp, #52]	; 0x34
 800c6f0:	f7ff ff1b 	bl	800c52a <__exponent>
 800c6f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6f6:	4682      	mov	sl, r0
 800c6f8:	1813      	adds	r3, r2, r0
 800c6fa:	2a01      	cmp	r2, #1
 800c6fc:	6123      	str	r3, [r4, #16]
 800c6fe:	dc02      	bgt.n	800c706 <_printf_float+0x15e>
 800c700:	6822      	ldr	r2, [r4, #0]
 800c702:	07d2      	lsls	r2, r2, #31
 800c704:	d501      	bpl.n	800c70a <_printf_float+0x162>
 800c706:	3301      	adds	r3, #1
 800c708:	6123      	str	r3, [r4, #16]
 800c70a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d09b      	beq.n	800c64a <_printf_float+0xa2>
 800c712:	232d      	movs	r3, #45	; 0x2d
 800c714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c718:	e797      	b.n	800c64a <_printf_float+0xa2>
 800c71a:	2947      	cmp	r1, #71	; 0x47
 800c71c:	d1bc      	bne.n	800c698 <_printf_float+0xf0>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1ba      	bne.n	800c698 <_printf_float+0xf0>
 800c722:	2301      	movs	r3, #1
 800c724:	e7b7      	b.n	800c696 <_printf_float+0xee>
 800c726:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c72a:	d118      	bne.n	800c75e <_printf_float+0x1b6>
 800c72c:	2900      	cmp	r1, #0
 800c72e:	6863      	ldr	r3, [r4, #4]
 800c730:	dd0b      	ble.n	800c74a <_printf_float+0x1a2>
 800c732:	6121      	str	r1, [r4, #16]
 800c734:	b913      	cbnz	r3, 800c73c <_printf_float+0x194>
 800c736:	6822      	ldr	r2, [r4, #0]
 800c738:	07d0      	lsls	r0, r2, #31
 800c73a:	d502      	bpl.n	800c742 <_printf_float+0x19a>
 800c73c:	3301      	adds	r3, #1
 800c73e:	440b      	add	r3, r1
 800c740:	6123      	str	r3, [r4, #16]
 800c742:	f04f 0a00 	mov.w	sl, #0
 800c746:	65a1      	str	r1, [r4, #88]	; 0x58
 800c748:	e7df      	b.n	800c70a <_printf_float+0x162>
 800c74a:	b913      	cbnz	r3, 800c752 <_printf_float+0x1aa>
 800c74c:	6822      	ldr	r2, [r4, #0]
 800c74e:	07d2      	lsls	r2, r2, #31
 800c750:	d501      	bpl.n	800c756 <_printf_float+0x1ae>
 800c752:	3302      	adds	r3, #2
 800c754:	e7f4      	b.n	800c740 <_printf_float+0x198>
 800c756:	2301      	movs	r3, #1
 800c758:	e7f2      	b.n	800c740 <_printf_float+0x198>
 800c75a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c75e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c760:	4299      	cmp	r1, r3
 800c762:	db05      	blt.n	800c770 <_printf_float+0x1c8>
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	6121      	str	r1, [r4, #16]
 800c768:	07d8      	lsls	r0, r3, #31
 800c76a:	d5ea      	bpl.n	800c742 <_printf_float+0x19a>
 800c76c:	1c4b      	adds	r3, r1, #1
 800c76e:	e7e7      	b.n	800c740 <_printf_float+0x198>
 800c770:	2900      	cmp	r1, #0
 800c772:	bfcc      	ite	gt
 800c774:	2201      	movgt	r2, #1
 800c776:	f1c1 0202 	rsble	r2, r1, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	e7e0      	b.n	800c740 <_printf_float+0x198>
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	055a      	lsls	r2, r3, #21
 800c782:	d407      	bmi.n	800c794 <_printf_float+0x1ec>
 800c784:	6923      	ldr	r3, [r4, #16]
 800c786:	4642      	mov	r2, r8
 800c788:	4631      	mov	r1, r6
 800c78a:	4628      	mov	r0, r5
 800c78c:	47b8      	blx	r7
 800c78e:	3001      	adds	r0, #1
 800c790:	d12b      	bne.n	800c7ea <_printf_float+0x242>
 800c792:	e764      	b.n	800c65e <_printf_float+0xb6>
 800c794:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c798:	f240 80dd 	bls.w	800c956 <_printf_float+0x3ae>
 800c79c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	f7f4 f918 	bl	80009d8 <__aeabi_dcmpeq>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d033      	beq.n	800c814 <_printf_float+0x26c>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	4a35      	ldr	r2, [pc, #212]	; (800c888 <_printf_float+0x2e0>)
 800c7b4:	47b8      	blx	r7
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	f43f af51 	beq.w	800c65e <_printf_float+0xb6>
 800c7bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	db02      	blt.n	800c7ca <_printf_float+0x222>
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	07d8      	lsls	r0, r3, #31
 800c7c8:	d50f      	bpl.n	800c7ea <_printf_float+0x242>
 800c7ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7ce:	4631      	mov	r1, r6
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	47b8      	blx	r7
 800c7d4:	3001      	adds	r0, #1
 800c7d6:	f43f af42 	beq.w	800c65e <_printf_float+0xb6>
 800c7da:	f04f 0800 	mov.w	r8, #0
 800c7de:	f104 091a 	add.w	r9, r4, #26
 800c7e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	4543      	cmp	r3, r8
 800c7e8:	dc09      	bgt.n	800c7fe <_printf_float+0x256>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	079b      	lsls	r3, r3, #30
 800c7ee:	f100 8102 	bmi.w	800c9f6 <_printf_float+0x44e>
 800c7f2:	68e0      	ldr	r0, [r4, #12]
 800c7f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7f6:	4298      	cmp	r0, r3
 800c7f8:	bfb8      	it	lt
 800c7fa:	4618      	movlt	r0, r3
 800c7fc:	e731      	b.n	800c662 <_printf_float+0xba>
 800c7fe:	2301      	movs	r3, #1
 800c800:	464a      	mov	r2, r9
 800c802:	4631      	mov	r1, r6
 800c804:	4628      	mov	r0, r5
 800c806:	47b8      	blx	r7
 800c808:	3001      	adds	r0, #1
 800c80a:	f43f af28 	beq.w	800c65e <_printf_float+0xb6>
 800c80e:	f108 0801 	add.w	r8, r8, #1
 800c812:	e7e6      	b.n	800c7e2 <_printf_float+0x23a>
 800c814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c816:	2b00      	cmp	r3, #0
 800c818:	dc38      	bgt.n	800c88c <_printf_float+0x2e4>
 800c81a:	2301      	movs	r3, #1
 800c81c:	4631      	mov	r1, r6
 800c81e:	4628      	mov	r0, r5
 800c820:	4a19      	ldr	r2, [pc, #100]	; (800c888 <_printf_float+0x2e0>)
 800c822:	47b8      	blx	r7
 800c824:	3001      	adds	r0, #1
 800c826:	f43f af1a 	beq.w	800c65e <_printf_float+0xb6>
 800c82a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c82e:	4313      	orrs	r3, r2
 800c830:	d102      	bne.n	800c838 <_printf_float+0x290>
 800c832:	6823      	ldr	r3, [r4, #0]
 800c834:	07d9      	lsls	r1, r3, #31
 800c836:	d5d8      	bpl.n	800c7ea <_printf_float+0x242>
 800c838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c83c:	4631      	mov	r1, r6
 800c83e:	4628      	mov	r0, r5
 800c840:	47b8      	blx	r7
 800c842:	3001      	adds	r0, #1
 800c844:	f43f af0b 	beq.w	800c65e <_printf_float+0xb6>
 800c848:	f04f 0900 	mov.w	r9, #0
 800c84c:	f104 0a1a 	add.w	sl, r4, #26
 800c850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c852:	425b      	negs	r3, r3
 800c854:	454b      	cmp	r3, r9
 800c856:	dc01      	bgt.n	800c85c <_printf_float+0x2b4>
 800c858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c85a:	e794      	b.n	800c786 <_printf_float+0x1de>
 800c85c:	2301      	movs	r3, #1
 800c85e:	4652      	mov	r2, sl
 800c860:	4631      	mov	r1, r6
 800c862:	4628      	mov	r0, r5
 800c864:	47b8      	blx	r7
 800c866:	3001      	adds	r0, #1
 800c868:	f43f aef9 	beq.w	800c65e <_printf_float+0xb6>
 800c86c:	f109 0901 	add.w	r9, r9, #1
 800c870:	e7ee      	b.n	800c850 <_printf_float+0x2a8>
 800c872:	bf00      	nop
 800c874:	7fefffff 	.word	0x7fefffff
 800c878:	0800f34c 	.word	0x0800f34c
 800c87c:	0800f350 	.word	0x0800f350
 800c880:	0800f358 	.word	0x0800f358
 800c884:	0800f354 	.word	0x0800f354
 800c888:	0800f35c 	.word	0x0800f35c
 800c88c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c88e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c890:	429a      	cmp	r2, r3
 800c892:	bfa8      	it	ge
 800c894:	461a      	movge	r2, r3
 800c896:	2a00      	cmp	r2, #0
 800c898:	4691      	mov	r9, r2
 800c89a:	dc37      	bgt.n	800c90c <_printf_float+0x364>
 800c89c:	f04f 0b00 	mov.w	fp, #0
 800c8a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8a4:	f104 021a 	add.w	r2, r4, #26
 800c8a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c8ac:	ebaa 0309 	sub.w	r3, sl, r9
 800c8b0:	455b      	cmp	r3, fp
 800c8b2:	dc33      	bgt.n	800c91c <_printf_float+0x374>
 800c8b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	db3b      	blt.n	800c934 <_printf_float+0x38c>
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	07da      	lsls	r2, r3, #31
 800c8c0:	d438      	bmi.n	800c934 <_printf_float+0x38c>
 800c8c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c8c6:	eba3 020a 	sub.w	r2, r3, sl
 800c8ca:	eba3 0901 	sub.w	r9, r3, r1
 800c8ce:	4591      	cmp	r9, r2
 800c8d0:	bfa8      	it	ge
 800c8d2:	4691      	movge	r9, r2
 800c8d4:	f1b9 0f00 	cmp.w	r9, #0
 800c8d8:	dc34      	bgt.n	800c944 <_printf_float+0x39c>
 800c8da:	f04f 0800 	mov.w	r8, #0
 800c8de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8e2:	f104 0a1a 	add.w	sl, r4, #26
 800c8e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c8ea:	1a9b      	subs	r3, r3, r2
 800c8ec:	eba3 0309 	sub.w	r3, r3, r9
 800c8f0:	4543      	cmp	r3, r8
 800c8f2:	f77f af7a 	ble.w	800c7ea <_printf_float+0x242>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	4652      	mov	r2, sl
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	47b8      	blx	r7
 800c900:	3001      	adds	r0, #1
 800c902:	f43f aeac 	beq.w	800c65e <_printf_float+0xb6>
 800c906:	f108 0801 	add.w	r8, r8, #1
 800c90a:	e7ec      	b.n	800c8e6 <_printf_float+0x33e>
 800c90c:	4613      	mov	r3, r2
 800c90e:	4631      	mov	r1, r6
 800c910:	4642      	mov	r2, r8
 800c912:	4628      	mov	r0, r5
 800c914:	47b8      	blx	r7
 800c916:	3001      	adds	r0, #1
 800c918:	d1c0      	bne.n	800c89c <_printf_float+0x2f4>
 800c91a:	e6a0      	b.n	800c65e <_printf_float+0xb6>
 800c91c:	2301      	movs	r3, #1
 800c91e:	4631      	mov	r1, r6
 800c920:	4628      	mov	r0, r5
 800c922:	920b      	str	r2, [sp, #44]	; 0x2c
 800c924:	47b8      	blx	r7
 800c926:	3001      	adds	r0, #1
 800c928:	f43f ae99 	beq.w	800c65e <_printf_float+0xb6>
 800c92c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c92e:	f10b 0b01 	add.w	fp, fp, #1
 800c932:	e7b9      	b.n	800c8a8 <_printf_float+0x300>
 800c934:	4631      	mov	r1, r6
 800c936:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c93a:	4628      	mov	r0, r5
 800c93c:	47b8      	blx	r7
 800c93e:	3001      	adds	r0, #1
 800c940:	d1bf      	bne.n	800c8c2 <_printf_float+0x31a>
 800c942:	e68c      	b.n	800c65e <_printf_float+0xb6>
 800c944:	464b      	mov	r3, r9
 800c946:	4631      	mov	r1, r6
 800c948:	4628      	mov	r0, r5
 800c94a:	eb08 020a 	add.w	r2, r8, sl
 800c94e:	47b8      	blx	r7
 800c950:	3001      	adds	r0, #1
 800c952:	d1c2      	bne.n	800c8da <_printf_float+0x332>
 800c954:	e683      	b.n	800c65e <_printf_float+0xb6>
 800c956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c958:	2a01      	cmp	r2, #1
 800c95a:	dc01      	bgt.n	800c960 <_printf_float+0x3b8>
 800c95c:	07db      	lsls	r3, r3, #31
 800c95e:	d537      	bpl.n	800c9d0 <_printf_float+0x428>
 800c960:	2301      	movs	r3, #1
 800c962:	4642      	mov	r2, r8
 800c964:	4631      	mov	r1, r6
 800c966:	4628      	mov	r0, r5
 800c968:	47b8      	blx	r7
 800c96a:	3001      	adds	r0, #1
 800c96c:	f43f ae77 	beq.w	800c65e <_printf_float+0xb6>
 800c970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c974:	4631      	mov	r1, r6
 800c976:	4628      	mov	r0, r5
 800c978:	47b8      	blx	r7
 800c97a:	3001      	adds	r0, #1
 800c97c:	f43f ae6f 	beq.w	800c65e <_printf_float+0xb6>
 800c980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c984:	2200      	movs	r2, #0
 800c986:	2300      	movs	r3, #0
 800c988:	f7f4 f826 	bl	80009d8 <__aeabi_dcmpeq>
 800c98c:	b9d8      	cbnz	r0, 800c9c6 <_printf_float+0x41e>
 800c98e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c990:	f108 0201 	add.w	r2, r8, #1
 800c994:	3b01      	subs	r3, #1
 800c996:	4631      	mov	r1, r6
 800c998:	4628      	mov	r0, r5
 800c99a:	47b8      	blx	r7
 800c99c:	3001      	adds	r0, #1
 800c99e:	d10e      	bne.n	800c9be <_printf_float+0x416>
 800c9a0:	e65d      	b.n	800c65e <_printf_float+0xb6>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	464a      	mov	r2, r9
 800c9a6:	4631      	mov	r1, r6
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	47b8      	blx	r7
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	f43f ae56 	beq.w	800c65e <_printf_float+0xb6>
 800c9b2:	f108 0801 	add.w	r8, r8, #1
 800c9b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	4543      	cmp	r3, r8
 800c9bc:	dcf1      	bgt.n	800c9a2 <_printf_float+0x3fa>
 800c9be:	4653      	mov	r3, sl
 800c9c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c9c4:	e6e0      	b.n	800c788 <_printf_float+0x1e0>
 800c9c6:	f04f 0800 	mov.w	r8, #0
 800c9ca:	f104 091a 	add.w	r9, r4, #26
 800c9ce:	e7f2      	b.n	800c9b6 <_printf_float+0x40e>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	4642      	mov	r2, r8
 800c9d4:	e7df      	b.n	800c996 <_printf_float+0x3ee>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	464a      	mov	r2, r9
 800c9da:	4631      	mov	r1, r6
 800c9dc:	4628      	mov	r0, r5
 800c9de:	47b8      	blx	r7
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	f43f ae3c 	beq.w	800c65e <_printf_float+0xb6>
 800c9e6:	f108 0801 	add.w	r8, r8, #1
 800c9ea:	68e3      	ldr	r3, [r4, #12]
 800c9ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c9ee:	1a5b      	subs	r3, r3, r1
 800c9f0:	4543      	cmp	r3, r8
 800c9f2:	dcf0      	bgt.n	800c9d6 <_printf_float+0x42e>
 800c9f4:	e6fd      	b.n	800c7f2 <_printf_float+0x24a>
 800c9f6:	f04f 0800 	mov.w	r8, #0
 800c9fa:	f104 0919 	add.w	r9, r4, #25
 800c9fe:	e7f4      	b.n	800c9ea <_printf_float+0x442>

0800ca00 <_printf_common>:
 800ca00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca04:	4616      	mov	r6, r2
 800ca06:	4699      	mov	r9, r3
 800ca08:	688a      	ldr	r2, [r1, #8]
 800ca0a:	690b      	ldr	r3, [r1, #16]
 800ca0c:	4607      	mov	r7, r0
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	bfb8      	it	lt
 800ca12:	4613      	movlt	r3, r2
 800ca14:	6033      	str	r3, [r6, #0]
 800ca16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca20:	b10a      	cbz	r2, 800ca26 <_printf_common+0x26>
 800ca22:	3301      	adds	r3, #1
 800ca24:	6033      	str	r3, [r6, #0]
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	0699      	lsls	r1, r3, #26
 800ca2a:	bf42      	ittt	mi
 800ca2c:	6833      	ldrmi	r3, [r6, #0]
 800ca2e:	3302      	addmi	r3, #2
 800ca30:	6033      	strmi	r3, [r6, #0]
 800ca32:	6825      	ldr	r5, [r4, #0]
 800ca34:	f015 0506 	ands.w	r5, r5, #6
 800ca38:	d106      	bne.n	800ca48 <_printf_common+0x48>
 800ca3a:	f104 0a19 	add.w	sl, r4, #25
 800ca3e:	68e3      	ldr	r3, [r4, #12]
 800ca40:	6832      	ldr	r2, [r6, #0]
 800ca42:	1a9b      	subs	r3, r3, r2
 800ca44:	42ab      	cmp	r3, r5
 800ca46:	dc28      	bgt.n	800ca9a <_printf_common+0x9a>
 800ca48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca4c:	1e13      	subs	r3, r2, #0
 800ca4e:	6822      	ldr	r2, [r4, #0]
 800ca50:	bf18      	it	ne
 800ca52:	2301      	movne	r3, #1
 800ca54:	0692      	lsls	r2, r2, #26
 800ca56:	d42d      	bmi.n	800cab4 <_printf_common+0xb4>
 800ca58:	4649      	mov	r1, r9
 800ca5a:	4638      	mov	r0, r7
 800ca5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca60:	47c0      	blx	r8
 800ca62:	3001      	adds	r0, #1
 800ca64:	d020      	beq.n	800caa8 <_printf_common+0xa8>
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	68e5      	ldr	r5, [r4, #12]
 800ca6a:	f003 0306 	and.w	r3, r3, #6
 800ca6e:	2b04      	cmp	r3, #4
 800ca70:	bf18      	it	ne
 800ca72:	2500      	movne	r5, #0
 800ca74:	6832      	ldr	r2, [r6, #0]
 800ca76:	f04f 0600 	mov.w	r6, #0
 800ca7a:	68a3      	ldr	r3, [r4, #8]
 800ca7c:	bf08      	it	eq
 800ca7e:	1aad      	subeq	r5, r5, r2
 800ca80:	6922      	ldr	r2, [r4, #16]
 800ca82:	bf08      	it	eq
 800ca84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	bfc4      	itt	gt
 800ca8c:	1a9b      	subgt	r3, r3, r2
 800ca8e:	18ed      	addgt	r5, r5, r3
 800ca90:	341a      	adds	r4, #26
 800ca92:	42b5      	cmp	r5, r6
 800ca94:	d11a      	bne.n	800cacc <_printf_common+0xcc>
 800ca96:	2000      	movs	r0, #0
 800ca98:	e008      	b.n	800caac <_printf_common+0xac>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	4652      	mov	r2, sl
 800ca9e:	4649      	mov	r1, r9
 800caa0:	4638      	mov	r0, r7
 800caa2:	47c0      	blx	r8
 800caa4:	3001      	adds	r0, #1
 800caa6:	d103      	bne.n	800cab0 <_printf_common+0xb0>
 800caa8:	f04f 30ff 	mov.w	r0, #4294967295
 800caac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab0:	3501      	adds	r5, #1
 800cab2:	e7c4      	b.n	800ca3e <_printf_common+0x3e>
 800cab4:	2030      	movs	r0, #48	; 0x30
 800cab6:	18e1      	adds	r1, r4, r3
 800cab8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cabc:	1c5a      	adds	r2, r3, #1
 800cabe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cac2:	4422      	add	r2, r4
 800cac4:	3302      	adds	r3, #2
 800cac6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800caca:	e7c5      	b.n	800ca58 <_printf_common+0x58>
 800cacc:	2301      	movs	r3, #1
 800cace:	4622      	mov	r2, r4
 800cad0:	4649      	mov	r1, r9
 800cad2:	4638      	mov	r0, r7
 800cad4:	47c0      	blx	r8
 800cad6:	3001      	adds	r0, #1
 800cad8:	d0e6      	beq.n	800caa8 <_printf_common+0xa8>
 800cada:	3601      	adds	r6, #1
 800cadc:	e7d9      	b.n	800ca92 <_printf_common+0x92>
	...

0800cae0 <_printf_i>:
 800cae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cae4:	7e0f      	ldrb	r7, [r1, #24]
 800cae6:	4691      	mov	r9, r2
 800cae8:	2f78      	cmp	r7, #120	; 0x78
 800caea:	4680      	mov	r8, r0
 800caec:	460c      	mov	r4, r1
 800caee:	469a      	mov	sl, r3
 800caf0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800caf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800caf6:	d807      	bhi.n	800cb08 <_printf_i+0x28>
 800caf8:	2f62      	cmp	r7, #98	; 0x62
 800cafa:	d80a      	bhi.n	800cb12 <_printf_i+0x32>
 800cafc:	2f00      	cmp	r7, #0
 800cafe:	f000 80d9 	beq.w	800ccb4 <_printf_i+0x1d4>
 800cb02:	2f58      	cmp	r7, #88	; 0x58
 800cb04:	f000 80a4 	beq.w	800cc50 <_printf_i+0x170>
 800cb08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb10:	e03a      	b.n	800cb88 <_printf_i+0xa8>
 800cb12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb16:	2b15      	cmp	r3, #21
 800cb18:	d8f6      	bhi.n	800cb08 <_printf_i+0x28>
 800cb1a:	a101      	add	r1, pc, #4	; (adr r1, 800cb20 <_printf_i+0x40>)
 800cb1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb20:	0800cb79 	.word	0x0800cb79
 800cb24:	0800cb8d 	.word	0x0800cb8d
 800cb28:	0800cb09 	.word	0x0800cb09
 800cb2c:	0800cb09 	.word	0x0800cb09
 800cb30:	0800cb09 	.word	0x0800cb09
 800cb34:	0800cb09 	.word	0x0800cb09
 800cb38:	0800cb8d 	.word	0x0800cb8d
 800cb3c:	0800cb09 	.word	0x0800cb09
 800cb40:	0800cb09 	.word	0x0800cb09
 800cb44:	0800cb09 	.word	0x0800cb09
 800cb48:	0800cb09 	.word	0x0800cb09
 800cb4c:	0800cc9b 	.word	0x0800cc9b
 800cb50:	0800cbbd 	.word	0x0800cbbd
 800cb54:	0800cc7d 	.word	0x0800cc7d
 800cb58:	0800cb09 	.word	0x0800cb09
 800cb5c:	0800cb09 	.word	0x0800cb09
 800cb60:	0800ccbd 	.word	0x0800ccbd
 800cb64:	0800cb09 	.word	0x0800cb09
 800cb68:	0800cbbd 	.word	0x0800cbbd
 800cb6c:	0800cb09 	.word	0x0800cb09
 800cb70:	0800cb09 	.word	0x0800cb09
 800cb74:	0800cc85 	.word	0x0800cc85
 800cb78:	682b      	ldr	r3, [r5, #0]
 800cb7a:	1d1a      	adds	r2, r3, #4
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	602a      	str	r2, [r5, #0]
 800cb80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e0a4      	b.n	800ccd6 <_printf_i+0x1f6>
 800cb8c:	6820      	ldr	r0, [r4, #0]
 800cb8e:	6829      	ldr	r1, [r5, #0]
 800cb90:	0606      	lsls	r6, r0, #24
 800cb92:	f101 0304 	add.w	r3, r1, #4
 800cb96:	d50a      	bpl.n	800cbae <_printf_i+0xce>
 800cb98:	680e      	ldr	r6, [r1, #0]
 800cb9a:	602b      	str	r3, [r5, #0]
 800cb9c:	2e00      	cmp	r6, #0
 800cb9e:	da03      	bge.n	800cba8 <_printf_i+0xc8>
 800cba0:	232d      	movs	r3, #45	; 0x2d
 800cba2:	4276      	negs	r6, r6
 800cba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cba8:	230a      	movs	r3, #10
 800cbaa:	485e      	ldr	r0, [pc, #376]	; (800cd24 <_printf_i+0x244>)
 800cbac:	e019      	b.n	800cbe2 <_printf_i+0x102>
 800cbae:	680e      	ldr	r6, [r1, #0]
 800cbb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cbb4:	602b      	str	r3, [r5, #0]
 800cbb6:	bf18      	it	ne
 800cbb8:	b236      	sxthne	r6, r6
 800cbba:	e7ef      	b.n	800cb9c <_printf_i+0xbc>
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	6820      	ldr	r0, [r4, #0]
 800cbc0:	1d19      	adds	r1, r3, #4
 800cbc2:	6029      	str	r1, [r5, #0]
 800cbc4:	0601      	lsls	r1, r0, #24
 800cbc6:	d501      	bpl.n	800cbcc <_printf_i+0xec>
 800cbc8:	681e      	ldr	r6, [r3, #0]
 800cbca:	e002      	b.n	800cbd2 <_printf_i+0xf2>
 800cbcc:	0646      	lsls	r6, r0, #25
 800cbce:	d5fb      	bpl.n	800cbc8 <_printf_i+0xe8>
 800cbd0:	881e      	ldrh	r6, [r3, #0]
 800cbd2:	2f6f      	cmp	r7, #111	; 0x6f
 800cbd4:	bf0c      	ite	eq
 800cbd6:	2308      	moveq	r3, #8
 800cbd8:	230a      	movne	r3, #10
 800cbda:	4852      	ldr	r0, [pc, #328]	; (800cd24 <_printf_i+0x244>)
 800cbdc:	2100      	movs	r1, #0
 800cbde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbe2:	6865      	ldr	r5, [r4, #4]
 800cbe4:	2d00      	cmp	r5, #0
 800cbe6:	bfa8      	it	ge
 800cbe8:	6821      	ldrge	r1, [r4, #0]
 800cbea:	60a5      	str	r5, [r4, #8]
 800cbec:	bfa4      	itt	ge
 800cbee:	f021 0104 	bicge.w	r1, r1, #4
 800cbf2:	6021      	strge	r1, [r4, #0]
 800cbf4:	b90e      	cbnz	r6, 800cbfa <_printf_i+0x11a>
 800cbf6:	2d00      	cmp	r5, #0
 800cbf8:	d04d      	beq.n	800cc96 <_printf_i+0x1b6>
 800cbfa:	4615      	mov	r5, r2
 800cbfc:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc00:	fb03 6711 	mls	r7, r3, r1, r6
 800cc04:	5dc7      	ldrb	r7, [r0, r7]
 800cc06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc0a:	4637      	mov	r7, r6
 800cc0c:	42bb      	cmp	r3, r7
 800cc0e:	460e      	mov	r6, r1
 800cc10:	d9f4      	bls.n	800cbfc <_printf_i+0x11c>
 800cc12:	2b08      	cmp	r3, #8
 800cc14:	d10b      	bne.n	800cc2e <_printf_i+0x14e>
 800cc16:	6823      	ldr	r3, [r4, #0]
 800cc18:	07de      	lsls	r6, r3, #31
 800cc1a:	d508      	bpl.n	800cc2e <_printf_i+0x14e>
 800cc1c:	6923      	ldr	r3, [r4, #16]
 800cc1e:	6861      	ldr	r1, [r4, #4]
 800cc20:	4299      	cmp	r1, r3
 800cc22:	bfde      	ittt	le
 800cc24:	2330      	movle	r3, #48	; 0x30
 800cc26:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc2e:	1b52      	subs	r2, r2, r5
 800cc30:	6122      	str	r2, [r4, #16]
 800cc32:	464b      	mov	r3, r9
 800cc34:	4621      	mov	r1, r4
 800cc36:	4640      	mov	r0, r8
 800cc38:	f8cd a000 	str.w	sl, [sp]
 800cc3c:	aa03      	add	r2, sp, #12
 800cc3e:	f7ff fedf 	bl	800ca00 <_printf_common>
 800cc42:	3001      	adds	r0, #1
 800cc44:	d14c      	bne.n	800cce0 <_printf_i+0x200>
 800cc46:	f04f 30ff 	mov.w	r0, #4294967295
 800cc4a:	b004      	add	sp, #16
 800cc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc50:	4834      	ldr	r0, [pc, #208]	; (800cd24 <_printf_i+0x244>)
 800cc52:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cc56:	6829      	ldr	r1, [r5, #0]
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc5e:	6029      	str	r1, [r5, #0]
 800cc60:	061d      	lsls	r5, r3, #24
 800cc62:	d514      	bpl.n	800cc8e <_printf_i+0x1ae>
 800cc64:	07df      	lsls	r7, r3, #31
 800cc66:	bf44      	itt	mi
 800cc68:	f043 0320 	orrmi.w	r3, r3, #32
 800cc6c:	6023      	strmi	r3, [r4, #0]
 800cc6e:	b91e      	cbnz	r6, 800cc78 <_printf_i+0x198>
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	f023 0320 	bic.w	r3, r3, #32
 800cc76:	6023      	str	r3, [r4, #0]
 800cc78:	2310      	movs	r3, #16
 800cc7a:	e7af      	b.n	800cbdc <_printf_i+0xfc>
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	f043 0320 	orr.w	r3, r3, #32
 800cc82:	6023      	str	r3, [r4, #0]
 800cc84:	2378      	movs	r3, #120	; 0x78
 800cc86:	4828      	ldr	r0, [pc, #160]	; (800cd28 <_printf_i+0x248>)
 800cc88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc8c:	e7e3      	b.n	800cc56 <_printf_i+0x176>
 800cc8e:	0659      	lsls	r1, r3, #25
 800cc90:	bf48      	it	mi
 800cc92:	b2b6      	uxthmi	r6, r6
 800cc94:	e7e6      	b.n	800cc64 <_printf_i+0x184>
 800cc96:	4615      	mov	r5, r2
 800cc98:	e7bb      	b.n	800cc12 <_printf_i+0x132>
 800cc9a:	682b      	ldr	r3, [r5, #0]
 800cc9c:	6826      	ldr	r6, [r4, #0]
 800cc9e:	1d18      	adds	r0, r3, #4
 800cca0:	6961      	ldr	r1, [r4, #20]
 800cca2:	6028      	str	r0, [r5, #0]
 800cca4:	0635      	lsls	r5, r6, #24
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	d501      	bpl.n	800ccae <_printf_i+0x1ce>
 800ccaa:	6019      	str	r1, [r3, #0]
 800ccac:	e002      	b.n	800ccb4 <_printf_i+0x1d4>
 800ccae:	0670      	lsls	r0, r6, #25
 800ccb0:	d5fb      	bpl.n	800ccaa <_printf_i+0x1ca>
 800ccb2:	8019      	strh	r1, [r3, #0]
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	4615      	mov	r5, r2
 800ccb8:	6123      	str	r3, [r4, #16]
 800ccba:	e7ba      	b.n	800cc32 <_printf_i+0x152>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	1d1a      	adds	r2, r3, #4
 800ccc2:	602a      	str	r2, [r5, #0]
 800ccc4:	681d      	ldr	r5, [r3, #0]
 800ccc6:	6862      	ldr	r2, [r4, #4]
 800ccc8:	4628      	mov	r0, r5
 800ccca:	f000 ff17 	bl	800dafc <memchr>
 800ccce:	b108      	cbz	r0, 800ccd4 <_printf_i+0x1f4>
 800ccd0:	1b40      	subs	r0, r0, r5
 800ccd2:	6060      	str	r0, [r4, #4]
 800ccd4:	6863      	ldr	r3, [r4, #4]
 800ccd6:	6123      	str	r3, [r4, #16]
 800ccd8:	2300      	movs	r3, #0
 800ccda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccde:	e7a8      	b.n	800cc32 <_printf_i+0x152>
 800cce0:	462a      	mov	r2, r5
 800cce2:	4649      	mov	r1, r9
 800cce4:	4640      	mov	r0, r8
 800cce6:	6923      	ldr	r3, [r4, #16]
 800cce8:	47d0      	blx	sl
 800ccea:	3001      	adds	r0, #1
 800ccec:	d0ab      	beq.n	800cc46 <_printf_i+0x166>
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	079b      	lsls	r3, r3, #30
 800ccf2:	d413      	bmi.n	800cd1c <_printf_i+0x23c>
 800ccf4:	68e0      	ldr	r0, [r4, #12]
 800ccf6:	9b03      	ldr	r3, [sp, #12]
 800ccf8:	4298      	cmp	r0, r3
 800ccfa:	bfb8      	it	lt
 800ccfc:	4618      	movlt	r0, r3
 800ccfe:	e7a4      	b.n	800cc4a <_printf_i+0x16a>
 800cd00:	2301      	movs	r3, #1
 800cd02:	4632      	mov	r2, r6
 800cd04:	4649      	mov	r1, r9
 800cd06:	4640      	mov	r0, r8
 800cd08:	47d0      	blx	sl
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	d09b      	beq.n	800cc46 <_printf_i+0x166>
 800cd0e:	3501      	adds	r5, #1
 800cd10:	68e3      	ldr	r3, [r4, #12]
 800cd12:	9903      	ldr	r1, [sp, #12]
 800cd14:	1a5b      	subs	r3, r3, r1
 800cd16:	42ab      	cmp	r3, r5
 800cd18:	dcf2      	bgt.n	800cd00 <_printf_i+0x220>
 800cd1a:	e7eb      	b.n	800ccf4 <_printf_i+0x214>
 800cd1c:	2500      	movs	r5, #0
 800cd1e:	f104 0619 	add.w	r6, r4, #25
 800cd22:	e7f5      	b.n	800cd10 <_printf_i+0x230>
 800cd24:	0800f35e 	.word	0x0800f35e
 800cd28:	0800f36f 	.word	0x0800f36f

0800cd2c <siprintf>:
 800cd2c:	b40e      	push	{r1, r2, r3}
 800cd2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd32:	b500      	push	{lr}
 800cd34:	b09c      	sub	sp, #112	; 0x70
 800cd36:	ab1d      	add	r3, sp, #116	; 0x74
 800cd38:	9002      	str	r0, [sp, #8]
 800cd3a:	9006      	str	r0, [sp, #24]
 800cd3c:	9107      	str	r1, [sp, #28]
 800cd3e:	9104      	str	r1, [sp, #16]
 800cd40:	4808      	ldr	r0, [pc, #32]	; (800cd64 <siprintf+0x38>)
 800cd42:	4909      	ldr	r1, [pc, #36]	; (800cd68 <siprintf+0x3c>)
 800cd44:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd48:	9105      	str	r1, [sp, #20]
 800cd4a:	6800      	ldr	r0, [r0, #0]
 800cd4c:	a902      	add	r1, sp, #8
 800cd4e:	9301      	str	r3, [sp, #4]
 800cd50:	f001 fbb0 	bl	800e4b4 <_svfiprintf_r>
 800cd54:	2200      	movs	r2, #0
 800cd56:	9b02      	ldr	r3, [sp, #8]
 800cd58:	701a      	strb	r2, [r3, #0]
 800cd5a:	b01c      	add	sp, #112	; 0x70
 800cd5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd60:	b003      	add	sp, #12
 800cd62:	4770      	bx	lr
 800cd64:	200004c0 	.word	0x200004c0
 800cd68:	ffff0208 	.word	0xffff0208

0800cd6c <__assert_func>:
 800cd6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd6e:	4614      	mov	r4, r2
 800cd70:	461a      	mov	r2, r3
 800cd72:	4b09      	ldr	r3, [pc, #36]	; (800cd98 <__assert_func+0x2c>)
 800cd74:	4605      	mov	r5, r0
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68d8      	ldr	r0, [r3, #12]
 800cd7a:	b14c      	cbz	r4, 800cd90 <__assert_func+0x24>
 800cd7c:	4b07      	ldr	r3, [pc, #28]	; (800cd9c <__assert_func+0x30>)
 800cd7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd82:	9100      	str	r1, [sp, #0]
 800cd84:	462b      	mov	r3, r5
 800cd86:	4906      	ldr	r1, [pc, #24]	; (800cda0 <__assert_func+0x34>)
 800cd88:	f000 fe88 	bl	800da9c <fiprintf>
 800cd8c:	f001 fec8 	bl	800eb20 <abort>
 800cd90:	4b04      	ldr	r3, [pc, #16]	; (800cda4 <__assert_func+0x38>)
 800cd92:	461c      	mov	r4, r3
 800cd94:	e7f3      	b.n	800cd7e <__assert_func+0x12>
 800cd96:	bf00      	nop
 800cd98:	200004c0 	.word	0x200004c0
 800cd9c:	0800f380 	.word	0x0800f380
 800cda0:	0800f38d 	.word	0x0800f38d
 800cda4:	0800f3bb 	.word	0x0800f3bb

0800cda8 <quorem>:
 800cda8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdac:	6903      	ldr	r3, [r0, #16]
 800cdae:	690c      	ldr	r4, [r1, #16]
 800cdb0:	4607      	mov	r7, r0
 800cdb2:	42a3      	cmp	r3, r4
 800cdb4:	f2c0 8082 	blt.w	800cebc <quorem+0x114>
 800cdb8:	3c01      	subs	r4, #1
 800cdba:	f100 0514 	add.w	r5, r0, #20
 800cdbe:	f101 0814 	add.w	r8, r1, #20
 800cdc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdc6:	9301      	str	r3, [sp, #4]
 800cdc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cdcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	fbb2 f6f3 	udiv	r6, r2, r3
 800cdd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cddc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cde0:	d331      	bcc.n	800ce46 <quorem+0x9e>
 800cde2:	f04f 0e00 	mov.w	lr, #0
 800cde6:	4640      	mov	r0, r8
 800cde8:	46ac      	mov	ip, r5
 800cdea:	46f2      	mov	sl, lr
 800cdec:	f850 2b04 	ldr.w	r2, [r0], #4
 800cdf0:	b293      	uxth	r3, r2
 800cdf2:	fb06 e303 	mla	r3, r6, r3, lr
 800cdf6:	0c12      	lsrs	r2, r2, #16
 800cdf8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	fb06 e202 	mla	r2, r6, r2, lr
 800ce02:	ebaa 0303 	sub.w	r3, sl, r3
 800ce06:	f8dc a000 	ldr.w	sl, [ip]
 800ce0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ce0e:	fa1f fa8a 	uxth.w	sl, sl
 800ce12:	4453      	add	r3, sl
 800ce14:	f8dc a000 	ldr.w	sl, [ip]
 800ce18:	b292      	uxth	r2, r2
 800ce1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ce1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce28:	4581      	cmp	r9, r0
 800ce2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ce2e:	f84c 3b04 	str.w	r3, [ip], #4
 800ce32:	d2db      	bcs.n	800cdec <quorem+0x44>
 800ce34:	f855 300b 	ldr.w	r3, [r5, fp]
 800ce38:	b92b      	cbnz	r3, 800ce46 <quorem+0x9e>
 800ce3a:	9b01      	ldr	r3, [sp, #4]
 800ce3c:	3b04      	subs	r3, #4
 800ce3e:	429d      	cmp	r5, r3
 800ce40:	461a      	mov	r2, r3
 800ce42:	d32f      	bcc.n	800cea4 <quorem+0xfc>
 800ce44:	613c      	str	r4, [r7, #16]
 800ce46:	4638      	mov	r0, r7
 800ce48:	f001 f8e4 	bl	800e014 <__mcmp>
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	db25      	blt.n	800ce9c <quorem+0xf4>
 800ce50:	4628      	mov	r0, r5
 800ce52:	f04f 0c00 	mov.w	ip, #0
 800ce56:	3601      	adds	r6, #1
 800ce58:	f858 1b04 	ldr.w	r1, [r8], #4
 800ce5c:	f8d0 e000 	ldr.w	lr, [r0]
 800ce60:	b28b      	uxth	r3, r1
 800ce62:	ebac 0303 	sub.w	r3, ip, r3
 800ce66:	fa1f f28e 	uxth.w	r2, lr
 800ce6a:	4413      	add	r3, r2
 800ce6c:	0c0a      	lsrs	r2, r1, #16
 800ce6e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ce72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce7c:	45c1      	cmp	r9, r8
 800ce7e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ce82:	f840 3b04 	str.w	r3, [r0], #4
 800ce86:	d2e7      	bcs.n	800ce58 <quorem+0xb0>
 800ce88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce90:	b922      	cbnz	r2, 800ce9c <quorem+0xf4>
 800ce92:	3b04      	subs	r3, #4
 800ce94:	429d      	cmp	r5, r3
 800ce96:	461a      	mov	r2, r3
 800ce98:	d30a      	bcc.n	800ceb0 <quorem+0x108>
 800ce9a:	613c      	str	r4, [r7, #16]
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	b003      	add	sp, #12
 800cea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea4:	6812      	ldr	r2, [r2, #0]
 800cea6:	3b04      	subs	r3, #4
 800cea8:	2a00      	cmp	r2, #0
 800ceaa:	d1cb      	bne.n	800ce44 <quorem+0x9c>
 800ceac:	3c01      	subs	r4, #1
 800ceae:	e7c6      	b.n	800ce3e <quorem+0x96>
 800ceb0:	6812      	ldr	r2, [r2, #0]
 800ceb2:	3b04      	subs	r3, #4
 800ceb4:	2a00      	cmp	r2, #0
 800ceb6:	d1f0      	bne.n	800ce9a <quorem+0xf2>
 800ceb8:	3c01      	subs	r4, #1
 800ceba:	e7eb      	b.n	800ce94 <quorem+0xec>
 800cebc:	2000      	movs	r0, #0
 800cebe:	e7ee      	b.n	800ce9e <quorem+0xf6>

0800cec0 <_dtoa_r>:
 800cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	4616      	mov	r6, r2
 800cec6:	461f      	mov	r7, r3
 800cec8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ceca:	b099      	sub	sp, #100	; 0x64
 800cecc:	4605      	mov	r5, r0
 800cece:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ced2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ced6:	b974      	cbnz	r4, 800cef6 <_dtoa_r+0x36>
 800ced8:	2010      	movs	r0, #16
 800ceda:	f000 fdf5 	bl	800dac8 <malloc>
 800cede:	4602      	mov	r2, r0
 800cee0:	6268      	str	r0, [r5, #36]	; 0x24
 800cee2:	b920      	cbnz	r0, 800ceee <_dtoa_r+0x2e>
 800cee4:	21ea      	movs	r1, #234	; 0xea
 800cee6:	4ba8      	ldr	r3, [pc, #672]	; (800d188 <_dtoa_r+0x2c8>)
 800cee8:	48a8      	ldr	r0, [pc, #672]	; (800d18c <_dtoa_r+0x2cc>)
 800ceea:	f7ff ff3f 	bl	800cd6c <__assert_func>
 800ceee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cef2:	6004      	str	r4, [r0, #0]
 800cef4:	60c4      	str	r4, [r0, #12]
 800cef6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cef8:	6819      	ldr	r1, [r3, #0]
 800cefa:	b151      	cbz	r1, 800cf12 <_dtoa_r+0x52>
 800cefc:	685a      	ldr	r2, [r3, #4]
 800cefe:	2301      	movs	r3, #1
 800cf00:	4093      	lsls	r3, r2
 800cf02:	604a      	str	r2, [r1, #4]
 800cf04:	608b      	str	r3, [r1, #8]
 800cf06:	4628      	mov	r0, r5
 800cf08:	f000 fe46 	bl	800db98 <_Bfree>
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cf10:	601a      	str	r2, [r3, #0]
 800cf12:	1e3b      	subs	r3, r7, #0
 800cf14:	bfaf      	iteee	ge
 800cf16:	2300      	movge	r3, #0
 800cf18:	2201      	movlt	r2, #1
 800cf1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cf1e:	9305      	strlt	r3, [sp, #20]
 800cf20:	bfa8      	it	ge
 800cf22:	f8c8 3000 	strge.w	r3, [r8]
 800cf26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800cf2a:	4b99      	ldr	r3, [pc, #612]	; (800d190 <_dtoa_r+0x2d0>)
 800cf2c:	bfb8      	it	lt
 800cf2e:	f8c8 2000 	strlt.w	r2, [r8]
 800cf32:	ea33 0309 	bics.w	r3, r3, r9
 800cf36:	d119      	bne.n	800cf6c <_dtoa_r+0xac>
 800cf38:	f242 730f 	movw	r3, #9999	; 0x270f
 800cf3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cf3e:	6013      	str	r3, [r2, #0]
 800cf40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf44:	4333      	orrs	r3, r6
 800cf46:	f000 857f 	beq.w	800da48 <_dtoa_r+0xb88>
 800cf4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cf4c:	b953      	cbnz	r3, 800cf64 <_dtoa_r+0xa4>
 800cf4e:	4b91      	ldr	r3, [pc, #580]	; (800d194 <_dtoa_r+0x2d4>)
 800cf50:	e022      	b.n	800cf98 <_dtoa_r+0xd8>
 800cf52:	4b91      	ldr	r3, [pc, #580]	; (800d198 <_dtoa_r+0x2d8>)
 800cf54:	9303      	str	r3, [sp, #12]
 800cf56:	3308      	adds	r3, #8
 800cf58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cf5a:	6013      	str	r3, [r2, #0]
 800cf5c:	9803      	ldr	r0, [sp, #12]
 800cf5e:	b019      	add	sp, #100	; 0x64
 800cf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf64:	4b8b      	ldr	r3, [pc, #556]	; (800d194 <_dtoa_r+0x2d4>)
 800cf66:	9303      	str	r3, [sp, #12]
 800cf68:	3303      	adds	r3, #3
 800cf6a:	e7f5      	b.n	800cf58 <_dtoa_r+0x98>
 800cf6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cf70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800cf74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf78:	2200      	movs	r2, #0
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	f7f3 fd2c 	bl	80009d8 <__aeabi_dcmpeq>
 800cf80:	4680      	mov	r8, r0
 800cf82:	b158      	cbz	r0, 800cf9c <_dtoa_r+0xdc>
 800cf84:	2301      	movs	r3, #1
 800cf86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cf88:	6013      	str	r3, [r2, #0]
 800cf8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f000 8558 	beq.w	800da42 <_dtoa_r+0xb82>
 800cf92:	4882      	ldr	r0, [pc, #520]	; (800d19c <_dtoa_r+0x2dc>)
 800cf94:	6018      	str	r0, [r3, #0]
 800cf96:	1e43      	subs	r3, r0, #1
 800cf98:	9303      	str	r3, [sp, #12]
 800cf9a:	e7df      	b.n	800cf5c <_dtoa_r+0x9c>
 800cf9c:	ab16      	add	r3, sp, #88	; 0x58
 800cf9e:	9301      	str	r3, [sp, #4]
 800cfa0:	ab17      	add	r3, sp, #92	; 0x5c
 800cfa2:	9300      	str	r3, [sp, #0]
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cfaa:	f001 f8db 	bl	800e164 <__d2b>
 800cfae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cfb2:	4683      	mov	fp, r0
 800cfb4:	2c00      	cmp	r4, #0
 800cfb6:	d07f      	beq.n	800d0b8 <_dtoa_r+0x1f8>
 800cfb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cfbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cfc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cfca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cfce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	4b72      	ldr	r3, [pc, #456]	; (800d1a0 <_dtoa_r+0x2e0>)
 800cfd6:	f7f3 f8df 	bl	8000198 <__aeabi_dsub>
 800cfda:	a365      	add	r3, pc, #404	; (adr r3, 800d170 <_dtoa_r+0x2b0>)
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	f7f3 fa92 	bl	8000508 <__aeabi_dmul>
 800cfe4:	a364      	add	r3, pc, #400	; (adr r3, 800d178 <_dtoa_r+0x2b8>)
 800cfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfea:	f7f3 f8d7 	bl	800019c <__adddf3>
 800cfee:	4606      	mov	r6, r0
 800cff0:	4620      	mov	r0, r4
 800cff2:	460f      	mov	r7, r1
 800cff4:	f7f3 fa1e 	bl	8000434 <__aeabi_i2d>
 800cff8:	a361      	add	r3, pc, #388	; (adr r3, 800d180 <_dtoa_r+0x2c0>)
 800cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffe:	f7f3 fa83 	bl	8000508 <__aeabi_dmul>
 800d002:	4602      	mov	r2, r0
 800d004:	460b      	mov	r3, r1
 800d006:	4630      	mov	r0, r6
 800d008:	4639      	mov	r1, r7
 800d00a:	f7f3 f8c7 	bl	800019c <__adddf3>
 800d00e:	4606      	mov	r6, r0
 800d010:	460f      	mov	r7, r1
 800d012:	f7f3 fd29 	bl	8000a68 <__aeabi_d2iz>
 800d016:	2200      	movs	r2, #0
 800d018:	4682      	mov	sl, r0
 800d01a:	2300      	movs	r3, #0
 800d01c:	4630      	mov	r0, r6
 800d01e:	4639      	mov	r1, r7
 800d020:	f7f3 fce4 	bl	80009ec <__aeabi_dcmplt>
 800d024:	b148      	cbz	r0, 800d03a <_dtoa_r+0x17a>
 800d026:	4650      	mov	r0, sl
 800d028:	f7f3 fa04 	bl	8000434 <__aeabi_i2d>
 800d02c:	4632      	mov	r2, r6
 800d02e:	463b      	mov	r3, r7
 800d030:	f7f3 fcd2 	bl	80009d8 <__aeabi_dcmpeq>
 800d034:	b908      	cbnz	r0, 800d03a <_dtoa_r+0x17a>
 800d036:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d03a:	f1ba 0f16 	cmp.w	sl, #22
 800d03e:	d858      	bhi.n	800d0f2 <_dtoa_r+0x232>
 800d040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d044:	4b57      	ldr	r3, [pc, #348]	; (800d1a4 <_dtoa_r+0x2e4>)
 800d046:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04e:	f7f3 fccd 	bl	80009ec <__aeabi_dcmplt>
 800d052:	2800      	cmp	r0, #0
 800d054:	d04f      	beq.n	800d0f6 <_dtoa_r+0x236>
 800d056:	2300      	movs	r3, #0
 800d058:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d05c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d05e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d060:	1b1c      	subs	r4, r3, r4
 800d062:	1e63      	subs	r3, r4, #1
 800d064:	9309      	str	r3, [sp, #36]	; 0x24
 800d066:	bf49      	itett	mi
 800d068:	f1c4 0301 	rsbmi	r3, r4, #1
 800d06c:	2300      	movpl	r3, #0
 800d06e:	9306      	strmi	r3, [sp, #24]
 800d070:	2300      	movmi	r3, #0
 800d072:	bf54      	ite	pl
 800d074:	9306      	strpl	r3, [sp, #24]
 800d076:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d078:	f1ba 0f00 	cmp.w	sl, #0
 800d07c:	db3d      	blt.n	800d0fa <_dtoa_r+0x23a>
 800d07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d080:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d084:	4453      	add	r3, sl
 800d086:	9309      	str	r3, [sp, #36]	; 0x24
 800d088:	2300      	movs	r3, #0
 800d08a:	930a      	str	r3, [sp, #40]	; 0x28
 800d08c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d08e:	2b09      	cmp	r3, #9
 800d090:	f200 808c 	bhi.w	800d1ac <_dtoa_r+0x2ec>
 800d094:	2b05      	cmp	r3, #5
 800d096:	bfc4      	itt	gt
 800d098:	3b04      	subgt	r3, #4
 800d09a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d09c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d09e:	bfc8      	it	gt
 800d0a0:	2400      	movgt	r4, #0
 800d0a2:	f1a3 0302 	sub.w	r3, r3, #2
 800d0a6:	bfd8      	it	le
 800d0a8:	2401      	movle	r4, #1
 800d0aa:	2b03      	cmp	r3, #3
 800d0ac:	f200 808a 	bhi.w	800d1c4 <_dtoa_r+0x304>
 800d0b0:	e8df f003 	tbb	[pc, r3]
 800d0b4:	5b4d4f2d 	.word	0x5b4d4f2d
 800d0b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d0bc:	441c      	add	r4, r3
 800d0be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d0c2:	2b20      	cmp	r3, #32
 800d0c4:	bfc3      	ittte	gt
 800d0c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d0ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d0ce:	fa09 f303 	lslgt.w	r3, r9, r3
 800d0d2:	f1c3 0320 	rsble	r3, r3, #32
 800d0d6:	bfc6      	itte	gt
 800d0d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d0dc:	4318      	orrgt	r0, r3
 800d0de:	fa06 f003 	lslle.w	r0, r6, r3
 800d0e2:	f7f3 f997 	bl	8000414 <__aeabi_ui2d>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d0ec:	3c01      	subs	r4, #1
 800d0ee:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0f0:	e76f      	b.n	800cfd2 <_dtoa_r+0x112>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e7b2      	b.n	800d05c <_dtoa_r+0x19c>
 800d0f6:	900f      	str	r0, [sp, #60]	; 0x3c
 800d0f8:	e7b1      	b.n	800d05e <_dtoa_r+0x19e>
 800d0fa:	9b06      	ldr	r3, [sp, #24]
 800d0fc:	eba3 030a 	sub.w	r3, r3, sl
 800d100:	9306      	str	r3, [sp, #24]
 800d102:	f1ca 0300 	rsb	r3, sl, #0
 800d106:	930a      	str	r3, [sp, #40]	; 0x28
 800d108:	2300      	movs	r3, #0
 800d10a:	930e      	str	r3, [sp, #56]	; 0x38
 800d10c:	e7be      	b.n	800d08c <_dtoa_r+0x1cc>
 800d10e:	2300      	movs	r3, #0
 800d110:	930b      	str	r3, [sp, #44]	; 0x2c
 800d112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d114:	2b00      	cmp	r3, #0
 800d116:	dc58      	bgt.n	800d1ca <_dtoa_r+0x30a>
 800d118:	f04f 0901 	mov.w	r9, #1
 800d11c:	464b      	mov	r3, r9
 800d11e:	f8cd 9020 	str.w	r9, [sp, #32]
 800d122:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800d126:	2200      	movs	r2, #0
 800d128:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d12a:	6042      	str	r2, [r0, #4]
 800d12c:	2204      	movs	r2, #4
 800d12e:	f102 0614 	add.w	r6, r2, #20
 800d132:	429e      	cmp	r6, r3
 800d134:	6841      	ldr	r1, [r0, #4]
 800d136:	d94e      	bls.n	800d1d6 <_dtoa_r+0x316>
 800d138:	4628      	mov	r0, r5
 800d13a:	f000 fced 	bl	800db18 <_Balloc>
 800d13e:	9003      	str	r0, [sp, #12]
 800d140:	2800      	cmp	r0, #0
 800d142:	d14c      	bne.n	800d1de <_dtoa_r+0x31e>
 800d144:	4602      	mov	r2, r0
 800d146:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d14a:	4b17      	ldr	r3, [pc, #92]	; (800d1a8 <_dtoa_r+0x2e8>)
 800d14c:	e6cc      	b.n	800cee8 <_dtoa_r+0x28>
 800d14e:	2301      	movs	r3, #1
 800d150:	e7de      	b.n	800d110 <_dtoa_r+0x250>
 800d152:	2300      	movs	r3, #0
 800d154:	930b      	str	r3, [sp, #44]	; 0x2c
 800d156:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d158:	eb0a 0903 	add.w	r9, sl, r3
 800d15c:	f109 0301 	add.w	r3, r9, #1
 800d160:	2b01      	cmp	r3, #1
 800d162:	9308      	str	r3, [sp, #32]
 800d164:	bfb8      	it	lt
 800d166:	2301      	movlt	r3, #1
 800d168:	e7dd      	b.n	800d126 <_dtoa_r+0x266>
 800d16a:	2301      	movs	r3, #1
 800d16c:	e7f2      	b.n	800d154 <_dtoa_r+0x294>
 800d16e:	bf00      	nop
 800d170:	636f4361 	.word	0x636f4361
 800d174:	3fd287a7 	.word	0x3fd287a7
 800d178:	8b60c8b3 	.word	0x8b60c8b3
 800d17c:	3fc68a28 	.word	0x3fc68a28
 800d180:	509f79fb 	.word	0x509f79fb
 800d184:	3fd34413 	.word	0x3fd34413
 800d188:	0800f3c9 	.word	0x0800f3c9
 800d18c:	0800f3e0 	.word	0x0800f3e0
 800d190:	7ff00000 	.word	0x7ff00000
 800d194:	0800f3c5 	.word	0x0800f3c5
 800d198:	0800f3bc 	.word	0x0800f3bc
 800d19c:	0800f35d 	.word	0x0800f35d
 800d1a0:	3ff80000 	.word	0x3ff80000
 800d1a4:	0800f4e0 	.word	0x0800f4e0
 800d1a8:	0800f43b 	.word	0x0800f43b
 800d1ac:	2401      	movs	r4, #1
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800d1b2:	9322      	str	r3, [sp, #136]	; 0x88
 800d1b4:	f04f 39ff 	mov.w	r9, #4294967295
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2312      	movs	r3, #18
 800d1bc:	f8cd 9020 	str.w	r9, [sp, #32]
 800d1c0:	9223      	str	r2, [sp, #140]	; 0x8c
 800d1c2:	e7b0      	b.n	800d126 <_dtoa_r+0x266>
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1c8:	e7f4      	b.n	800d1b4 <_dtoa_r+0x2f4>
 800d1ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800d1ce:	464b      	mov	r3, r9
 800d1d0:	f8cd 9020 	str.w	r9, [sp, #32]
 800d1d4:	e7a7      	b.n	800d126 <_dtoa_r+0x266>
 800d1d6:	3101      	adds	r1, #1
 800d1d8:	6041      	str	r1, [r0, #4]
 800d1da:	0052      	lsls	r2, r2, #1
 800d1dc:	e7a7      	b.n	800d12e <_dtoa_r+0x26e>
 800d1de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1e0:	9a03      	ldr	r2, [sp, #12]
 800d1e2:	601a      	str	r2, [r3, #0]
 800d1e4:	9b08      	ldr	r3, [sp, #32]
 800d1e6:	2b0e      	cmp	r3, #14
 800d1e8:	f200 80a8 	bhi.w	800d33c <_dtoa_r+0x47c>
 800d1ec:	2c00      	cmp	r4, #0
 800d1ee:	f000 80a5 	beq.w	800d33c <_dtoa_r+0x47c>
 800d1f2:	f1ba 0f00 	cmp.w	sl, #0
 800d1f6:	dd34      	ble.n	800d262 <_dtoa_r+0x3a2>
 800d1f8:	4a9a      	ldr	r2, [pc, #616]	; (800d464 <_dtoa_r+0x5a4>)
 800d1fa:	f00a 030f 	and.w	r3, sl, #15
 800d1fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d202:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d206:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d20a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d20e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800d212:	d016      	beq.n	800d242 <_dtoa_r+0x382>
 800d214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d218:	4b93      	ldr	r3, [pc, #588]	; (800d468 <_dtoa_r+0x5a8>)
 800d21a:	2703      	movs	r7, #3
 800d21c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d220:	f7f3 fa9c 	bl	800075c <__aeabi_ddiv>
 800d224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d228:	f004 040f 	and.w	r4, r4, #15
 800d22c:	4e8e      	ldr	r6, [pc, #568]	; (800d468 <_dtoa_r+0x5a8>)
 800d22e:	b954      	cbnz	r4, 800d246 <_dtoa_r+0x386>
 800d230:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d238:	f7f3 fa90 	bl	800075c <__aeabi_ddiv>
 800d23c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d240:	e029      	b.n	800d296 <_dtoa_r+0x3d6>
 800d242:	2702      	movs	r7, #2
 800d244:	e7f2      	b.n	800d22c <_dtoa_r+0x36c>
 800d246:	07e1      	lsls	r1, r4, #31
 800d248:	d508      	bpl.n	800d25c <_dtoa_r+0x39c>
 800d24a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d24e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d252:	f7f3 f959 	bl	8000508 <__aeabi_dmul>
 800d256:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d25a:	3701      	adds	r7, #1
 800d25c:	1064      	asrs	r4, r4, #1
 800d25e:	3608      	adds	r6, #8
 800d260:	e7e5      	b.n	800d22e <_dtoa_r+0x36e>
 800d262:	f000 80a5 	beq.w	800d3b0 <_dtoa_r+0x4f0>
 800d266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d26a:	f1ca 0400 	rsb	r4, sl, #0
 800d26e:	4b7d      	ldr	r3, [pc, #500]	; (800d464 <_dtoa_r+0x5a4>)
 800d270:	f004 020f 	and.w	r2, r4, #15
 800d274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27c:	f7f3 f944 	bl	8000508 <__aeabi_dmul>
 800d280:	2702      	movs	r7, #2
 800d282:	2300      	movs	r3, #0
 800d284:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d288:	4e77      	ldr	r6, [pc, #476]	; (800d468 <_dtoa_r+0x5a8>)
 800d28a:	1124      	asrs	r4, r4, #4
 800d28c:	2c00      	cmp	r4, #0
 800d28e:	f040 8084 	bne.w	800d39a <_dtoa_r+0x4da>
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1d2      	bne.n	800d23c <_dtoa_r+0x37c>
 800d296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 808b 	beq.w	800d3b4 <_dtoa_r+0x4f4>
 800d29e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d2a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d2a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	4b6f      	ldr	r3, [pc, #444]	; (800d46c <_dtoa_r+0x5ac>)
 800d2ae:	f7f3 fb9d 	bl	80009ec <__aeabi_dcmplt>
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	d07e      	beq.n	800d3b4 <_dtoa_r+0x4f4>
 800d2b6:	9b08      	ldr	r3, [sp, #32]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d07b      	beq.n	800d3b4 <_dtoa_r+0x4f4>
 800d2bc:	f1b9 0f00 	cmp.w	r9, #0
 800d2c0:	dd38      	ble.n	800d334 <_dtoa_r+0x474>
 800d2c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	4b69      	ldr	r3, [pc, #420]	; (800d470 <_dtoa_r+0x5b0>)
 800d2ca:	f7f3 f91d 	bl	8000508 <__aeabi_dmul>
 800d2ce:	464c      	mov	r4, r9
 800d2d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800d2d8:	3701      	adds	r7, #1
 800d2da:	4638      	mov	r0, r7
 800d2dc:	f7f3 f8aa 	bl	8000434 <__aeabi_i2d>
 800d2e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2e4:	f7f3 f910 	bl	8000508 <__aeabi_dmul>
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	4b62      	ldr	r3, [pc, #392]	; (800d474 <_dtoa_r+0x5b4>)
 800d2ec:	f7f2 ff56 	bl	800019c <__adddf3>
 800d2f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d2f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d2f8:	9611      	str	r6, [sp, #68]	; 0x44
 800d2fa:	2c00      	cmp	r4, #0
 800d2fc:	d15d      	bne.n	800d3ba <_dtoa_r+0x4fa>
 800d2fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d302:	2200      	movs	r2, #0
 800d304:	4b5c      	ldr	r3, [pc, #368]	; (800d478 <_dtoa_r+0x5b8>)
 800d306:	f7f2 ff47 	bl	8000198 <__aeabi_dsub>
 800d30a:	4602      	mov	r2, r0
 800d30c:	460b      	mov	r3, r1
 800d30e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d312:	4633      	mov	r3, r6
 800d314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d316:	f7f3 fb87 	bl	8000a28 <__aeabi_dcmpgt>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	f040 829c 	bne.w	800d858 <_dtoa_r+0x998>
 800d320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d324:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d326:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d32a:	f7f3 fb5f 	bl	80009ec <__aeabi_dcmplt>
 800d32e:	2800      	cmp	r0, #0
 800d330:	f040 8290 	bne.w	800d854 <_dtoa_r+0x994>
 800d334:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d338:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d33c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f2c0 8152 	blt.w	800d5e8 <_dtoa_r+0x728>
 800d344:	f1ba 0f0e 	cmp.w	sl, #14
 800d348:	f300 814e 	bgt.w	800d5e8 <_dtoa_r+0x728>
 800d34c:	4b45      	ldr	r3, [pc, #276]	; (800d464 <_dtoa_r+0x5a4>)
 800d34e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d352:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d356:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d35a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f280 80db 	bge.w	800d518 <_dtoa_r+0x658>
 800d362:	9b08      	ldr	r3, [sp, #32]
 800d364:	2b00      	cmp	r3, #0
 800d366:	f300 80d7 	bgt.w	800d518 <_dtoa_r+0x658>
 800d36a:	f040 8272 	bne.w	800d852 <_dtoa_r+0x992>
 800d36e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d372:	2200      	movs	r2, #0
 800d374:	4b40      	ldr	r3, [pc, #256]	; (800d478 <_dtoa_r+0x5b8>)
 800d376:	f7f3 f8c7 	bl	8000508 <__aeabi_dmul>
 800d37a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d37e:	f7f3 fb49 	bl	8000a14 <__aeabi_dcmpge>
 800d382:	9c08      	ldr	r4, [sp, #32]
 800d384:	4626      	mov	r6, r4
 800d386:	2800      	cmp	r0, #0
 800d388:	f040 8248 	bne.w	800d81c <_dtoa_r+0x95c>
 800d38c:	2331      	movs	r3, #49	; 0x31
 800d38e:	9f03      	ldr	r7, [sp, #12]
 800d390:	f10a 0a01 	add.w	sl, sl, #1
 800d394:	f807 3b01 	strb.w	r3, [r7], #1
 800d398:	e244      	b.n	800d824 <_dtoa_r+0x964>
 800d39a:	07e2      	lsls	r2, r4, #31
 800d39c:	d505      	bpl.n	800d3aa <_dtoa_r+0x4ea>
 800d39e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d3a2:	f7f3 f8b1 	bl	8000508 <__aeabi_dmul>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	3701      	adds	r7, #1
 800d3aa:	1064      	asrs	r4, r4, #1
 800d3ac:	3608      	adds	r6, #8
 800d3ae:	e76d      	b.n	800d28c <_dtoa_r+0x3cc>
 800d3b0:	2702      	movs	r7, #2
 800d3b2:	e770      	b.n	800d296 <_dtoa_r+0x3d6>
 800d3b4:	46d0      	mov	r8, sl
 800d3b6:	9c08      	ldr	r4, [sp, #32]
 800d3b8:	e78f      	b.n	800d2da <_dtoa_r+0x41a>
 800d3ba:	9903      	ldr	r1, [sp, #12]
 800d3bc:	4b29      	ldr	r3, [pc, #164]	; (800d464 <_dtoa_r+0x5a4>)
 800d3be:	4421      	add	r1, r4
 800d3c0:	9112      	str	r1, [sp, #72]	; 0x48
 800d3c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d3c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d3cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d3d0:	2900      	cmp	r1, #0
 800d3d2:	d055      	beq.n	800d480 <_dtoa_r+0x5c0>
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	4929      	ldr	r1, [pc, #164]	; (800d47c <_dtoa_r+0x5bc>)
 800d3d8:	f7f3 f9c0 	bl	800075c <__aeabi_ddiv>
 800d3dc:	463b      	mov	r3, r7
 800d3de:	4632      	mov	r2, r6
 800d3e0:	f7f2 feda 	bl	8000198 <__aeabi_dsub>
 800d3e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d3e8:	9f03      	ldr	r7, [sp, #12]
 800d3ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3ee:	f7f3 fb3b 	bl	8000a68 <__aeabi_d2iz>
 800d3f2:	4604      	mov	r4, r0
 800d3f4:	f7f3 f81e 	bl	8000434 <__aeabi_i2d>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d400:	f7f2 feca 	bl	8000198 <__aeabi_dsub>
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	3430      	adds	r4, #48	; 0x30
 800d40a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d40e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d412:	f807 4b01 	strb.w	r4, [r7], #1
 800d416:	f7f3 fae9 	bl	80009ec <__aeabi_dcmplt>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d174      	bne.n	800d508 <_dtoa_r+0x648>
 800d41e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d422:	2000      	movs	r0, #0
 800d424:	4911      	ldr	r1, [pc, #68]	; (800d46c <_dtoa_r+0x5ac>)
 800d426:	f7f2 feb7 	bl	8000198 <__aeabi_dsub>
 800d42a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d42e:	f7f3 fadd 	bl	80009ec <__aeabi_dcmplt>
 800d432:	2800      	cmp	r0, #0
 800d434:	f040 80b7 	bne.w	800d5a6 <_dtoa_r+0x6e6>
 800d438:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d43a:	429f      	cmp	r7, r3
 800d43c:	f43f af7a 	beq.w	800d334 <_dtoa_r+0x474>
 800d440:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d444:	2200      	movs	r2, #0
 800d446:	4b0a      	ldr	r3, [pc, #40]	; (800d470 <_dtoa_r+0x5b0>)
 800d448:	f7f3 f85e 	bl	8000508 <__aeabi_dmul>
 800d44c:	2200      	movs	r2, #0
 800d44e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d456:	4b06      	ldr	r3, [pc, #24]	; (800d470 <_dtoa_r+0x5b0>)
 800d458:	f7f3 f856 	bl	8000508 <__aeabi_dmul>
 800d45c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d460:	e7c3      	b.n	800d3ea <_dtoa_r+0x52a>
 800d462:	bf00      	nop
 800d464:	0800f4e0 	.word	0x0800f4e0
 800d468:	0800f4b8 	.word	0x0800f4b8
 800d46c:	3ff00000 	.word	0x3ff00000
 800d470:	40240000 	.word	0x40240000
 800d474:	401c0000 	.word	0x401c0000
 800d478:	40140000 	.word	0x40140000
 800d47c:	3fe00000 	.word	0x3fe00000
 800d480:	4630      	mov	r0, r6
 800d482:	4639      	mov	r1, r7
 800d484:	f7f3 f840 	bl	8000508 <__aeabi_dmul>
 800d488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d48a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d48e:	9c03      	ldr	r4, [sp, #12]
 800d490:	9314      	str	r3, [sp, #80]	; 0x50
 800d492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d496:	f7f3 fae7 	bl	8000a68 <__aeabi_d2iz>
 800d49a:	9015      	str	r0, [sp, #84]	; 0x54
 800d49c:	f7f2 ffca 	bl	8000434 <__aeabi_i2d>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4a8:	f7f2 fe76 	bl	8000198 <__aeabi_dsub>
 800d4ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	3330      	adds	r3, #48	; 0x30
 800d4b2:	f804 3b01 	strb.w	r3, [r4], #1
 800d4b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d4b8:	460f      	mov	r7, r1
 800d4ba:	429c      	cmp	r4, r3
 800d4bc:	f04f 0200 	mov.w	r2, #0
 800d4c0:	d124      	bne.n	800d50c <_dtoa_r+0x64c>
 800d4c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d4c6:	4bb0      	ldr	r3, [pc, #704]	; (800d788 <_dtoa_r+0x8c8>)
 800d4c8:	f7f2 fe68 	bl	800019c <__adddf3>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	f7f3 faa8 	bl	8000a28 <__aeabi_dcmpgt>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	d163      	bne.n	800d5a4 <_dtoa_r+0x6e4>
 800d4dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	49a9      	ldr	r1, [pc, #676]	; (800d788 <_dtoa_r+0x8c8>)
 800d4e4:	f7f2 fe58 	bl	8000198 <__aeabi_dsub>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	4639      	mov	r1, r7
 800d4f0:	f7f3 fa7c 	bl	80009ec <__aeabi_dcmplt>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	f43f af1d 	beq.w	800d334 <_dtoa_r+0x474>
 800d4fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d4fc:	1e7b      	subs	r3, r7, #1
 800d4fe:	9314      	str	r3, [sp, #80]	; 0x50
 800d500:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d504:	2b30      	cmp	r3, #48	; 0x30
 800d506:	d0f8      	beq.n	800d4fa <_dtoa_r+0x63a>
 800d508:	46c2      	mov	sl, r8
 800d50a:	e03b      	b.n	800d584 <_dtoa_r+0x6c4>
 800d50c:	4b9f      	ldr	r3, [pc, #636]	; (800d78c <_dtoa_r+0x8cc>)
 800d50e:	f7f2 fffb 	bl	8000508 <__aeabi_dmul>
 800d512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d516:	e7bc      	b.n	800d492 <_dtoa_r+0x5d2>
 800d518:	9f03      	ldr	r7, [sp, #12]
 800d51a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d51e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d522:	4640      	mov	r0, r8
 800d524:	4649      	mov	r1, r9
 800d526:	f7f3 f919 	bl	800075c <__aeabi_ddiv>
 800d52a:	f7f3 fa9d 	bl	8000a68 <__aeabi_d2iz>
 800d52e:	4604      	mov	r4, r0
 800d530:	f7f2 ff80 	bl	8000434 <__aeabi_i2d>
 800d534:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d538:	f7f2 ffe6 	bl	8000508 <__aeabi_dmul>
 800d53c:	4602      	mov	r2, r0
 800d53e:	460b      	mov	r3, r1
 800d540:	4640      	mov	r0, r8
 800d542:	4649      	mov	r1, r9
 800d544:	f7f2 fe28 	bl	8000198 <__aeabi_dsub>
 800d548:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d54c:	f807 6b01 	strb.w	r6, [r7], #1
 800d550:	9e03      	ldr	r6, [sp, #12]
 800d552:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d556:	1bbe      	subs	r6, r7, r6
 800d558:	45b4      	cmp	ip, r6
 800d55a:	4602      	mov	r2, r0
 800d55c:	460b      	mov	r3, r1
 800d55e:	d136      	bne.n	800d5ce <_dtoa_r+0x70e>
 800d560:	f7f2 fe1c 	bl	800019c <__adddf3>
 800d564:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d568:	4680      	mov	r8, r0
 800d56a:	4689      	mov	r9, r1
 800d56c:	f7f3 fa5c 	bl	8000a28 <__aeabi_dcmpgt>
 800d570:	bb58      	cbnz	r0, 800d5ca <_dtoa_r+0x70a>
 800d572:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d576:	4640      	mov	r0, r8
 800d578:	4649      	mov	r1, r9
 800d57a:	f7f3 fa2d 	bl	80009d8 <__aeabi_dcmpeq>
 800d57e:	b108      	cbz	r0, 800d584 <_dtoa_r+0x6c4>
 800d580:	07e1      	lsls	r1, r4, #31
 800d582:	d422      	bmi.n	800d5ca <_dtoa_r+0x70a>
 800d584:	4628      	mov	r0, r5
 800d586:	4659      	mov	r1, fp
 800d588:	f000 fb06 	bl	800db98 <_Bfree>
 800d58c:	2300      	movs	r3, #0
 800d58e:	703b      	strb	r3, [r7, #0]
 800d590:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d592:	f10a 0001 	add.w	r0, sl, #1
 800d596:	6018      	str	r0, [r3, #0]
 800d598:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f43f acde 	beq.w	800cf5c <_dtoa_r+0x9c>
 800d5a0:	601f      	str	r7, [r3, #0]
 800d5a2:	e4db      	b.n	800cf5c <_dtoa_r+0x9c>
 800d5a4:	4627      	mov	r7, r4
 800d5a6:	463b      	mov	r3, r7
 800d5a8:	461f      	mov	r7, r3
 800d5aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5ae:	2a39      	cmp	r2, #57	; 0x39
 800d5b0:	d107      	bne.n	800d5c2 <_dtoa_r+0x702>
 800d5b2:	9a03      	ldr	r2, [sp, #12]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d1f7      	bne.n	800d5a8 <_dtoa_r+0x6e8>
 800d5b8:	2230      	movs	r2, #48	; 0x30
 800d5ba:	9903      	ldr	r1, [sp, #12]
 800d5bc:	f108 0801 	add.w	r8, r8, #1
 800d5c0:	700a      	strb	r2, [r1, #0]
 800d5c2:	781a      	ldrb	r2, [r3, #0]
 800d5c4:	3201      	adds	r2, #1
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	e79e      	b.n	800d508 <_dtoa_r+0x648>
 800d5ca:	46d0      	mov	r8, sl
 800d5cc:	e7eb      	b.n	800d5a6 <_dtoa_r+0x6e6>
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	4b6e      	ldr	r3, [pc, #440]	; (800d78c <_dtoa_r+0x8cc>)
 800d5d2:	f7f2 ff99 	bl	8000508 <__aeabi_dmul>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4680      	mov	r8, r0
 800d5dc:	4689      	mov	r9, r1
 800d5de:	f7f3 f9fb 	bl	80009d8 <__aeabi_dcmpeq>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d09b      	beq.n	800d51e <_dtoa_r+0x65e>
 800d5e6:	e7cd      	b.n	800d584 <_dtoa_r+0x6c4>
 800d5e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5ea:	2a00      	cmp	r2, #0
 800d5ec:	f000 80d0 	beq.w	800d790 <_dtoa_r+0x8d0>
 800d5f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d5f2:	2a01      	cmp	r2, #1
 800d5f4:	f300 80ae 	bgt.w	800d754 <_dtoa_r+0x894>
 800d5f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d5fa:	2a00      	cmp	r2, #0
 800d5fc:	f000 80a6 	beq.w	800d74c <_dtoa_r+0x88c>
 800d600:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d604:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d606:	9f06      	ldr	r7, [sp, #24]
 800d608:	9a06      	ldr	r2, [sp, #24]
 800d60a:	2101      	movs	r1, #1
 800d60c:	441a      	add	r2, r3
 800d60e:	9206      	str	r2, [sp, #24]
 800d610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d612:	4628      	mov	r0, r5
 800d614:	441a      	add	r2, r3
 800d616:	9209      	str	r2, [sp, #36]	; 0x24
 800d618:	f000 fb74 	bl	800dd04 <__i2b>
 800d61c:	4606      	mov	r6, r0
 800d61e:	2f00      	cmp	r7, #0
 800d620:	dd0c      	ble.n	800d63c <_dtoa_r+0x77c>
 800d622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d624:	2b00      	cmp	r3, #0
 800d626:	dd09      	ble.n	800d63c <_dtoa_r+0x77c>
 800d628:	42bb      	cmp	r3, r7
 800d62a:	bfa8      	it	ge
 800d62c:	463b      	movge	r3, r7
 800d62e:	9a06      	ldr	r2, [sp, #24]
 800d630:	1aff      	subs	r7, r7, r3
 800d632:	1ad2      	subs	r2, r2, r3
 800d634:	9206      	str	r2, [sp, #24]
 800d636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	9309      	str	r3, [sp, #36]	; 0x24
 800d63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d63e:	b1f3      	cbz	r3, 800d67e <_dtoa_r+0x7be>
 800d640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d642:	2b00      	cmp	r3, #0
 800d644:	f000 80a8 	beq.w	800d798 <_dtoa_r+0x8d8>
 800d648:	2c00      	cmp	r4, #0
 800d64a:	dd10      	ble.n	800d66e <_dtoa_r+0x7ae>
 800d64c:	4631      	mov	r1, r6
 800d64e:	4622      	mov	r2, r4
 800d650:	4628      	mov	r0, r5
 800d652:	f000 fc15 	bl	800de80 <__pow5mult>
 800d656:	465a      	mov	r2, fp
 800d658:	4601      	mov	r1, r0
 800d65a:	4606      	mov	r6, r0
 800d65c:	4628      	mov	r0, r5
 800d65e:	f000 fb67 	bl	800dd30 <__multiply>
 800d662:	4680      	mov	r8, r0
 800d664:	4659      	mov	r1, fp
 800d666:	4628      	mov	r0, r5
 800d668:	f000 fa96 	bl	800db98 <_Bfree>
 800d66c:	46c3      	mov	fp, r8
 800d66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d670:	1b1a      	subs	r2, r3, r4
 800d672:	d004      	beq.n	800d67e <_dtoa_r+0x7be>
 800d674:	4659      	mov	r1, fp
 800d676:	4628      	mov	r0, r5
 800d678:	f000 fc02 	bl	800de80 <__pow5mult>
 800d67c:	4683      	mov	fp, r0
 800d67e:	2101      	movs	r1, #1
 800d680:	4628      	mov	r0, r5
 800d682:	f000 fb3f 	bl	800dd04 <__i2b>
 800d686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d688:	4604      	mov	r4, r0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f340 8086 	ble.w	800d79c <_dtoa_r+0x8dc>
 800d690:	461a      	mov	r2, r3
 800d692:	4601      	mov	r1, r0
 800d694:	4628      	mov	r0, r5
 800d696:	f000 fbf3 	bl	800de80 <__pow5mult>
 800d69a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d69c:	4604      	mov	r4, r0
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	dd7f      	ble.n	800d7a2 <_dtoa_r+0x8e2>
 800d6a2:	f04f 0800 	mov.w	r8, #0
 800d6a6:	6923      	ldr	r3, [r4, #16]
 800d6a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d6ac:	6918      	ldr	r0, [r3, #16]
 800d6ae:	f000 fadb 	bl	800dc68 <__hi0bits>
 800d6b2:	f1c0 0020 	rsb	r0, r0, #32
 800d6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b8:	4418      	add	r0, r3
 800d6ba:	f010 001f 	ands.w	r0, r0, #31
 800d6be:	f000 8092 	beq.w	800d7e6 <_dtoa_r+0x926>
 800d6c2:	f1c0 0320 	rsb	r3, r0, #32
 800d6c6:	2b04      	cmp	r3, #4
 800d6c8:	f340 808a 	ble.w	800d7e0 <_dtoa_r+0x920>
 800d6cc:	f1c0 001c 	rsb	r0, r0, #28
 800d6d0:	9b06      	ldr	r3, [sp, #24]
 800d6d2:	4407      	add	r7, r0
 800d6d4:	4403      	add	r3, r0
 800d6d6:	9306      	str	r3, [sp, #24]
 800d6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6da:	4403      	add	r3, r0
 800d6dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d6de:	9b06      	ldr	r3, [sp, #24]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	dd05      	ble.n	800d6f0 <_dtoa_r+0x830>
 800d6e4:	4659      	mov	r1, fp
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	f000 fc23 	bl	800df34 <__lshift>
 800d6ee:	4683      	mov	fp, r0
 800d6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	dd05      	ble.n	800d702 <_dtoa_r+0x842>
 800d6f6:	4621      	mov	r1, r4
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	f000 fc1a 	bl	800df34 <__lshift>
 800d700:	4604      	mov	r4, r0
 800d702:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d704:	2b00      	cmp	r3, #0
 800d706:	d070      	beq.n	800d7ea <_dtoa_r+0x92a>
 800d708:	4621      	mov	r1, r4
 800d70a:	4658      	mov	r0, fp
 800d70c:	f000 fc82 	bl	800e014 <__mcmp>
 800d710:	2800      	cmp	r0, #0
 800d712:	da6a      	bge.n	800d7ea <_dtoa_r+0x92a>
 800d714:	2300      	movs	r3, #0
 800d716:	4659      	mov	r1, fp
 800d718:	220a      	movs	r2, #10
 800d71a:	4628      	mov	r0, r5
 800d71c:	f000 fa5e 	bl	800dbdc <__multadd>
 800d720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d722:	4683      	mov	fp, r0
 800d724:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f000 8194 	beq.w	800da56 <_dtoa_r+0xb96>
 800d72e:	4631      	mov	r1, r6
 800d730:	2300      	movs	r3, #0
 800d732:	220a      	movs	r2, #10
 800d734:	4628      	mov	r0, r5
 800d736:	f000 fa51 	bl	800dbdc <__multadd>
 800d73a:	f1b9 0f00 	cmp.w	r9, #0
 800d73e:	4606      	mov	r6, r0
 800d740:	f300 8093 	bgt.w	800d86a <_dtoa_r+0x9aa>
 800d744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d746:	2b02      	cmp	r3, #2
 800d748:	dc57      	bgt.n	800d7fa <_dtoa_r+0x93a>
 800d74a:	e08e      	b.n	800d86a <_dtoa_r+0x9aa>
 800d74c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d74e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d752:	e757      	b.n	800d604 <_dtoa_r+0x744>
 800d754:	9b08      	ldr	r3, [sp, #32]
 800d756:	1e5c      	subs	r4, r3, #1
 800d758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d75a:	42a3      	cmp	r3, r4
 800d75c:	bfb7      	itett	lt
 800d75e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d760:	1b1c      	subge	r4, r3, r4
 800d762:	1ae2      	sublt	r2, r4, r3
 800d764:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d766:	bfbe      	ittt	lt
 800d768:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d76a:	189b      	addlt	r3, r3, r2
 800d76c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d76e:	9b08      	ldr	r3, [sp, #32]
 800d770:	bfb8      	it	lt
 800d772:	2400      	movlt	r4, #0
 800d774:	2b00      	cmp	r3, #0
 800d776:	bfbb      	ittet	lt
 800d778:	9b06      	ldrlt	r3, [sp, #24]
 800d77a:	9a08      	ldrlt	r2, [sp, #32]
 800d77c:	9f06      	ldrge	r7, [sp, #24]
 800d77e:	1a9f      	sublt	r7, r3, r2
 800d780:	bfac      	ite	ge
 800d782:	9b08      	ldrge	r3, [sp, #32]
 800d784:	2300      	movlt	r3, #0
 800d786:	e73f      	b.n	800d608 <_dtoa_r+0x748>
 800d788:	3fe00000 	.word	0x3fe00000
 800d78c:	40240000 	.word	0x40240000
 800d790:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d792:	9f06      	ldr	r7, [sp, #24]
 800d794:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d796:	e742      	b.n	800d61e <_dtoa_r+0x75e>
 800d798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d79a:	e76b      	b.n	800d674 <_dtoa_r+0x7b4>
 800d79c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	dc19      	bgt.n	800d7d6 <_dtoa_r+0x916>
 800d7a2:	9b04      	ldr	r3, [sp, #16]
 800d7a4:	b9bb      	cbnz	r3, 800d7d6 <_dtoa_r+0x916>
 800d7a6:	9b05      	ldr	r3, [sp, #20]
 800d7a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7ac:	b99b      	cbnz	r3, 800d7d6 <_dtoa_r+0x916>
 800d7ae:	9b05      	ldr	r3, [sp, #20]
 800d7b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d7b4:	0d1b      	lsrs	r3, r3, #20
 800d7b6:	051b      	lsls	r3, r3, #20
 800d7b8:	b183      	cbz	r3, 800d7dc <_dtoa_r+0x91c>
 800d7ba:	f04f 0801 	mov.w	r8, #1
 800d7be:	9b06      	ldr	r3, [sp, #24]
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	9306      	str	r3, [sp, #24]
 800d7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d7ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f47f af6a 	bne.w	800d6a6 <_dtoa_r+0x7e6>
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	e76f      	b.n	800d6b6 <_dtoa_r+0x7f6>
 800d7d6:	f04f 0800 	mov.w	r8, #0
 800d7da:	e7f6      	b.n	800d7ca <_dtoa_r+0x90a>
 800d7dc:	4698      	mov	r8, r3
 800d7de:	e7f4      	b.n	800d7ca <_dtoa_r+0x90a>
 800d7e0:	f43f af7d 	beq.w	800d6de <_dtoa_r+0x81e>
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	301c      	adds	r0, #28
 800d7e8:	e772      	b.n	800d6d0 <_dtoa_r+0x810>
 800d7ea:	9b08      	ldr	r3, [sp, #32]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	dc36      	bgt.n	800d85e <_dtoa_r+0x99e>
 800d7f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d7f2:	2b02      	cmp	r3, #2
 800d7f4:	dd33      	ble.n	800d85e <_dtoa_r+0x99e>
 800d7f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d7fa:	f1b9 0f00 	cmp.w	r9, #0
 800d7fe:	d10d      	bne.n	800d81c <_dtoa_r+0x95c>
 800d800:	4621      	mov	r1, r4
 800d802:	464b      	mov	r3, r9
 800d804:	2205      	movs	r2, #5
 800d806:	4628      	mov	r0, r5
 800d808:	f000 f9e8 	bl	800dbdc <__multadd>
 800d80c:	4601      	mov	r1, r0
 800d80e:	4604      	mov	r4, r0
 800d810:	4658      	mov	r0, fp
 800d812:	f000 fbff 	bl	800e014 <__mcmp>
 800d816:	2800      	cmp	r0, #0
 800d818:	f73f adb8 	bgt.w	800d38c <_dtoa_r+0x4cc>
 800d81c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d81e:	9f03      	ldr	r7, [sp, #12]
 800d820:	ea6f 0a03 	mvn.w	sl, r3
 800d824:	f04f 0800 	mov.w	r8, #0
 800d828:	4621      	mov	r1, r4
 800d82a:	4628      	mov	r0, r5
 800d82c:	f000 f9b4 	bl	800db98 <_Bfree>
 800d830:	2e00      	cmp	r6, #0
 800d832:	f43f aea7 	beq.w	800d584 <_dtoa_r+0x6c4>
 800d836:	f1b8 0f00 	cmp.w	r8, #0
 800d83a:	d005      	beq.n	800d848 <_dtoa_r+0x988>
 800d83c:	45b0      	cmp	r8, r6
 800d83e:	d003      	beq.n	800d848 <_dtoa_r+0x988>
 800d840:	4641      	mov	r1, r8
 800d842:	4628      	mov	r0, r5
 800d844:	f000 f9a8 	bl	800db98 <_Bfree>
 800d848:	4631      	mov	r1, r6
 800d84a:	4628      	mov	r0, r5
 800d84c:	f000 f9a4 	bl	800db98 <_Bfree>
 800d850:	e698      	b.n	800d584 <_dtoa_r+0x6c4>
 800d852:	2400      	movs	r4, #0
 800d854:	4626      	mov	r6, r4
 800d856:	e7e1      	b.n	800d81c <_dtoa_r+0x95c>
 800d858:	46c2      	mov	sl, r8
 800d85a:	4626      	mov	r6, r4
 800d85c:	e596      	b.n	800d38c <_dtoa_r+0x4cc>
 800d85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d860:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d864:	2b00      	cmp	r3, #0
 800d866:	f000 80fd 	beq.w	800da64 <_dtoa_r+0xba4>
 800d86a:	2f00      	cmp	r7, #0
 800d86c:	dd05      	ble.n	800d87a <_dtoa_r+0x9ba>
 800d86e:	4631      	mov	r1, r6
 800d870:	463a      	mov	r2, r7
 800d872:	4628      	mov	r0, r5
 800d874:	f000 fb5e 	bl	800df34 <__lshift>
 800d878:	4606      	mov	r6, r0
 800d87a:	f1b8 0f00 	cmp.w	r8, #0
 800d87e:	d05c      	beq.n	800d93a <_dtoa_r+0xa7a>
 800d880:	4628      	mov	r0, r5
 800d882:	6871      	ldr	r1, [r6, #4]
 800d884:	f000 f948 	bl	800db18 <_Balloc>
 800d888:	4607      	mov	r7, r0
 800d88a:	b928      	cbnz	r0, 800d898 <_dtoa_r+0x9d8>
 800d88c:	4602      	mov	r2, r0
 800d88e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d892:	4b7f      	ldr	r3, [pc, #508]	; (800da90 <_dtoa_r+0xbd0>)
 800d894:	f7ff bb28 	b.w	800cee8 <_dtoa_r+0x28>
 800d898:	6932      	ldr	r2, [r6, #16]
 800d89a:	f106 010c 	add.w	r1, r6, #12
 800d89e:	3202      	adds	r2, #2
 800d8a0:	0092      	lsls	r2, r2, #2
 800d8a2:	300c      	adds	r0, #12
 800d8a4:	f7fe fdcc 	bl	800c440 <memcpy>
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	4639      	mov	r1, r7
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	f000 fb41 	bl	800df34 <__lshift>
 800d8b2:	46b0      	mov	r8, r6
 800d8b4:	4606      	mov	r6, r0
 800d8b6:	9b03      	ldr	r3, [sp, #12]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	9308      	str	r3, [sp, #32]
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	444b      	add	r3, r9
 800d8c0:	930a      	str	r3, [sp, #40]	; 0x28
 800d8c2:	9b04      	ldr	r3, [sp, #16]
 800d8c4:	f003 0301 	and.w	r3, r3, #1
 800d8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ca:	9b08      	ldr	r3, [sp, #32]
 800d8cc:	4621      	mov	r1, r4
 800d8ce:	3b01      	subs	r3, #1
 800d8d0:	4658      	mov	r0, fp
 800d8d2:	9304      	str	r3, [sp, #16]
 800d8d4:	f7ff fa68 	bl	800cda8 <quorem>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	4641      	mov	r1, r8
 800d8dc:	3330      	adds	r3, #48	; 0x30
 800d8de:	9006      	str	r0, [sp, #24]
 800d8e0:	4658      	mov	r0, fp
 800d8e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8e4:	f000 fb96 	bl	800e014 <__mcmp>
 800d8e8:	4632      	mov	r2, r6
 800d8ea:	4681      	mov	r9, r0
 800d8ec:	4621      	mov	r1, r4
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	f000 fbac 	bl	800e04c <__mdiff>
 800d8f4:	68c2      	ldr	r2, [r0, #12]
 800d8f6:	4607      	mov	r7, r0
 800d8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8fa:	bb02      	cbnz	r2, 800d93e <_dtoa_r+0xa7e>
 800d8fc:	4601      	mov	r1, r0
 800d8fe:	4658      	mov	r0, fp
 800d900:	f000 fb88 	bl	800e014 <__mcmp>
 800d904:	4602      	mov	r2, r0
 800d906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d908:	4639      	mov	r1, r7
 800d90a:	4628      	mov	r0, r5
 800d90c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d910:	f000 f942 	bl	800db98 <_Bfree>
 800d914:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d918:	9f08      	ldr	r7, [sp, #32]
 800d91a:	ea43 0102 	orr.w	r1, r3, r2
 800d91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d920:	430b      	orrs	r3, r1
 800d922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d924:	d10d      	bne.n	800d942 <_dtoa_r+0xa82>
 800d926:	2b39      	cmp	r3, #57	; 0x39
 800d928:	d029      	beq.n	800d97e <_dtoa_r+0xabe>
 800d92a:	f1b9 0f00 	cmp.w	r9, #0
 800d92e:	dd01      	ble.n	800d934 <_dtoa_r+0xa74>
 800d930:	9b06      	ldr	r3, [sp, #24]
 800d932:	3331      	adds	r3, #49	; 0x31
 800d934:	9a04      	ldr	r2, [sp, #16]
 800d936:	7013      	strb	r3, [r2, #0]
 800d938:	e776      	b.n	800d828 <_dtoa_r+0x968>
 800d93a:	4630      	mov	r0, r6
 800d93c:	e7b9      	b.n	800d8b2 <_dtoa_r+0x9f2>
 800d93e:	2201      	movs	r2, #1
 800d940:	e7e2      	b.n	800d908 <_dtoa_r+0xa48>
 800d942:	f1b9 0f00 	cmp.w	r9, #0
 800d946:	db06      	blt.n	800d956 <_dtoa_r+0xa96>
 800d948:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d94a:	ea41 0909 	orr.w	r9, r1, r9
 800d94e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d950:	ea59 0101 	orrs.w	r1, r9, r1
 800d954:	d120      	bne.n	800d998 <_dtoa_r+0xad8>
 800d956:	2a00      	cmp	r2, #0
 800d958:	ddec      	ble.n	800d934 <_dtoa_r+0xa74>
 800d95a:	4659      	mov	r1, fp
 800d95c:	2201      	movs	r2, #1
 800d95e:	4628      	mov	r0, r5
 800d960:	9308      	str	r3, [sp, #32]
 800d962:	f000 fae7 	bl	800df34 <__lshift>
 800d966:	4621      	mov	r1, r4
 800d968:	4683      	mov	fp, r0
 800d96a:	f000 fb53 	bl	800e014 <__mcmp>
 800d96e:	2800      	cmp	r0, #0
 800d970:	9b08      	ldr	r3, [sp, #32]
 800d972:	dc02      	bgt.n	800d97a <_dtoa_r+0xaba>
 800d974:	d1de      	bne.n	800d934 <_dtoa_r+0xa74>
 800d976:	07da      	lsls	r2, r3, #31
 800d978:	d5dc      	bpl.n	800d934 <_dtoa_r+0xa74>
 800d97a:	2b39      	cmp	r3, #57	; 0x39
 800d97c:	d1d8      	bne.n	800d930 <_dtoa_r+0xa70>
 800d97e:	2339      	movs	r3, #57	; 0x39
 800d980:	9a04      	ldr	r2, [sp, #16]
 800d982:	7013      	strb	r3, [r2, #0]
 800d984:	463b      	mov	r3, r7
 800d986:	461f      	mov	r7, r3
 800d988:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	2a39      	cmp	r2, #57	; 0x39
 800d990:	d050      	beq.n	800da34 <_dtoa_r+0xb74>
 800d992:	3201      	adds	r2, #1
 800d994:	701a      	strb	r2, [r3, #0]
 800d996:	e747      	b.n	800d828 <_dtoa_r+0x968>
 800d998:	2a00      	cmp	r2, #0
 800d99a:	dd03      	ble.n	800d9a4 <_dtoa_r+0xae4>
 800d99c:	2b39      	cmp	r3, #57	; 0x39
 800d99e:	d0ee      	beq.n	800d97e <_dtoa_r+0xabe>
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	e7c7      	b.n	800d934 <_dtoa_r+0xa74>
 800d9a4:	9a08      	ldr	r2, [sp, #32]
 800d9a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d9a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d9ac:	428a      	cmp	r2, r1
 800d9ae:	d02a      	beq.n	800da06 <_dtoa_r+0xb46>
 800d9b0:	4659      	mov	r1, fp
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	220a      	movs	r2, #10
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	f000 f910 	bl	800dbdc <__multadd>
 800d9bc:	45b0      	cmp	r8, r6
 800d9be:	4683      	mov	fp, r0
 800d9c0:	f04f 0300 	mov.w	r3, #0
 800d9c4:	f04f 020a 	mov.w	r2, #10
 800d9c8:	4641      	mov	r1, r8
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	d107      	bne.n	800d9de <_dtoa_r+0xb1e>
 800d9ce:	f000 f905 	bl	800dbdc <__multadd>
 800d9d2:	4680      	mov	r8, r0
 800d9d4:	4606      	mov	r6, r0
 800d9d6:	9b08      	ldr	r3, [sp, #32]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	9308      	str	r3, [sp, #32]
 800d9dc:	e775      	b.n	800d8ca <_dtoa_r+0xa0a>
 800d9de:	f000 f8fd 	bl	800dbdc <__multadd>
 800d9e2:	4631      	mov	r1, r6
 800d9e4:	4680      	mov	r8, r0
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	220a      	movs	r2, #10
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	f000 f8f6 	bl	800dbdc <__multadd>
 800d9f0:	4606      	mov	r6, r0
 800d9f2:	e7f0      	b.n	800d9d6 <_dtoa_r+0xb16>
 800d9f4:	f1b9 0f00 	cmp.w	r9, #0
 800d9f8:	bfcc      	ite	gt
 800d9fa:	464f      	movgt	r7, r9
 800d9fc:	2701      	movle	r7, #1
 800d9fe:	f04f 0800 	mov.w	r8, #0
 800da02:	9a03      	ldr	r2, [sp, #12]
 800da04:	4417      	add	r7, r2
 800da06:	4659      	mov	r1, fp
 800da08:	2201      	movs	r2, #1
 800da0a:	4628      	mov	r0, r5
 800da0c:	9308      	str	r3, [sp, #32]
 800da0e:	f000 fa91 	bl	800df34 <__lshift>
 800da12:	4621      	mov	r1, r4
 800da14:	4683      	mov	fp, r0
 800da16:	f000 fafd 	bl	800e014 <__mcmp>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	dcb2      	bgt.n	800d984 <_dtoa_r+0xac4>
 800da1e:	d102      	bne.n	800da26 <_dtoa_r+0xb66>
 800da20:	9b08      	ldr	r3, [sp, #32]
 800da22:	07db      	lsls	r3, r3, #31
 800da24:	d4ae      	bmi.n	800d984 <_dtoa_r+0xac4>
 800da26:	463b      	mov	r3, r7
 800da28:	461f      	mov	r7, r3
 800da2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da2e:	2a30      	cmp	r2, #48	; 0x30
 800da30:	d0fa      	beq.n	800da28 <_dtoa_r+0xb68>
 800da32:	e6f9      	b.n	800d828 <_dtoa_r+0x968>
 800da34:	9a03      	ldr	r2, [sp, #12]
 800da36:	429a      	cmp	r2, r3
 800da38:	d1a5      	bne.n	800d986 <_dtoa_r+0xac6>
 800da3a:	2331      	movs	r3, #49	; 0x31
 800da3c:	f10a 0a01 	add.w	sl, sl, #1
 800da40:	e779      	b.n	800d936 <_dtoa_r+0xa76>
 800da42:	4b14      	ldr	r3, [pc, #80]	; (800da94 <_dtoa_r+0xbd4>)
 800da44:	f7ff baa8 	b.w	800cf98 <_dtoa_r+0xd8>
 800da48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f47f aa81 	bne.w	800cf52 <_dtoa_r+0x92>
 800da50:	4b11      	ldr	r3, [pc, #68]	; (800da98 <_dtoa_r+0xbd8>)
 800da52:	f7ff baa1 	b.w	800cf98 <_dtoa_r+0xd8>
 800da56:	f1b9 0f00 	cmp.w	r9, #0
 800da5a:	dc03      	bgt.n	800da64 <_dtoa_r+0xba4>
 800da5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da5e:	2b02      	cmp	r3, #2
 800da60:	f73f aecb 	bgt.w	800d7fa <_dtoa_r+0x93a>
 800da64:	9f03      	ldr	r7, [sp, #12]
 800da66:	4621      	mov	r1, r4
 800da68:	4658      	mov	r0, fp
 800da6a:	f7ff f99d 	bl	800cda8 <quorem>
 800da6e:	9a03      	ldr	r2, [sp, #12]
 800da70:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800da74:	f807 3b01 	strb.w	r3, [r7], #1
 800da78:	1aba      	subs	r2, r7, r2
 800da7a:	4591      	cmp	r9, r2
 800da7c:	ddba      	ble.n	800d9f4 <_dtoa_r+0xb34>
 800da7e:	4659      	mov	r1, fp
 800da80:	2300      	movs	r3, #0
 800da82:	220a      	movs	r2, #10
 800da84:	4628      	mov	r0, r5
 800da86:	f000 f8a9 	bl	800dbdc <__multadd>
 800da8a:	4683      	mov	fp, r0
 800da8c:	e7eb      	b.n	800da66 <_dtoa_r+0xba6>
 800da8e:	bf00      	nop
 800da90:	0800f43b 	.word	0x0800f43b
 800da94:	0800f35c 	.word	0x0800f35c
 800da98:	0800f3bc 	.word	0x0800f3bc

0800da9c <fiprintf>:
 800da9c:	b40e      	push	{r1, r2, r3}
 800da9e:	b503      	push	{r0, r1, lr}
 800daa0:	4601      	mov	r1, r0
 800daa2:	ab03      	add	r3, sp, #12
 800daa4:	4805      	ldr	r0, [pc, #20]	; (800dabc <fiprintf+0x20>)
 800daa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800daaa:	6800      	ldr	r0, [r0, #0]
 800daac:	9301      	str	r3, [sp, #4]
 800daae:	f000 fe29 	bl	800e704 <_vfiprintf_r>
 800dab2:	b002      	add	sp, #8
 800dab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dab8:	b003      	add	sp, #12
 800daba:	4770      	bx	lr
 800dabc:	200004c0 	.word	0x200004c0

0800dac0 <_localeconv_r>:
 800dac0:	4800      	ldr	r0, [pc, #0]	; (800dac4 <_localeconv_r+0x4>)
 800dac2:	4770      	bx	lr
 800dac4:	20000614 	.word	0x20000614

0800dac8 <malloc>:
 800dac8:	4b02      	ldr	r3, [pc, #8]	; (800dad4 <malloc+0xc>)
 800daca:	4601      	mov	r1, r0
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f000 bc21 	b.w	800e314 <_malloc_r>
 800dad2:	bf00      	nop
 800dad4:	200004c0 	.word	0x200004c0

0800dad8 <__ascii_mbtowc>:
 800dad8:	b082      	sub	sp, #8
 800dada:	b901      	cbnz	r1, 800dade <__ascii_mbtowc+0x6>
 800dadc:	a901      	add	r1, sp, #4
 800dade:	b142      	cbz	r2, 800daf2 <__ascii_mbtowc+0x1a>
 800dae0:	b14b      	cbz	r3, 800daf6 <__ascii_mbtowc+0x1e>
 800dae2:	7813      	ldrb	r3, [r2, #0]
 800dae4:	600b      	str	r3, [r1, #0]
 800dae6:	7812      	ldrb	r2, [r2, #0]
 800dae8:	1e10      	subs	r0, r2, #0
 800daea:	bf18      	it	ne
 800daec:	2001      	movne	r0, #1
 800daee:	b002      	add	sp, #8
 800daf0:	4770      	bx	lr
 800daf2:	4610      	mov	r0, r2
 800daf4:	e7fb      	b.n	800daee <__ascii_mbtowc+0x16>
 800daf6:	f06f 0001 	mvn.w	r0, #1
 800dafa:	e7f8      	b.n	800daee <__ascii_mbtowc+0x16>

0800dafc <memchr>:
 800dafc:	4603      	mov	r3, r0
 800dafe:	b510      	push	{r4, lr}
 800db00:	b2c9      	uxtb	r1, r1
 800db02:	4402      	add	r2, r0
 800db04:	4293      	cmp	r3, r2
 800db06:	4618      	mov	r0, r3
 800db08:	d101      	bne.n	800db0e <memchr+0x12>
 800db0a:	2000      	movs	r0, #0
 800db0c:	e003      	b.n	800db16 <memchr+0x1a>
 800db0e:	7804      	ldrb	r4, [r0, #0]
 800db10:	3301      	adds	r3, #1
 800db12:	428c      	cmp	r4, r1
 800db14:	d1f6      	bne.n	800db04 <memchr+0x8>
 800db16:	bd10      	pop	{r4, pc}

0800db18 <_Balloc>:
 800db18:	b570      	push	{r4, r5, r6, lr}
 800db1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800db1c:	4604      	mov	r4, r0
 800db1e:	460d      	mov	r5, r1
 800db20:	b976      	cbnz	r6, 800db40 <_Balloc+0x28>
 800db22:	2010      	movs	r0, #16
 800db24:	f7ff ffd0 	bl	800dac8 <malloc>
 800db28:	4602      	mov	r2, r0
 800db2a:	6260      	str	r0, [r4, #36]	; 0x24
 800db2c:	b920      	cbnz	r0, 800db38 <_Balloc+0x20>
 800db2e:	2166      	movs	r1, #102	; 0x66
 800db30:	4b17      	ldr	r3, [pc, #92]	; (800db90 <_Balloc+0x78>)
 800db32:	4818      	ldr	r0, [pc, #96]	; (800db94 <_Balloc+0x7c>)
 800db34:	f7ff f91a 	bl	800cd6c <__assert_func>
 800db38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db3c:	6006      	str	r6, [r0, #0]
 800db3e:	60c6      	str	r6, [r0, #12]
 800db40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800db42:	68f3      	ldr	r3, [r6, #12]
 800db44:	b183      	cbz	r3, 800db68 <_Balloc+0x50>
 800db46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db4e:	b9b8      	cbnz	r0, 800db80 <_Balloc+0x68>
 800db50:	2101      	movs	r1, #1
 800db52:	fa01 f605 	lsl.w	r6, r1, r5
 800db56:	1d72      	adds	r2, r6, #5
 800db58:	4620      	mov	r0, r4
 800db5a:	0092      	lsls	r2, r2, #2
 800db5c:	f000 fb5e 	bl	800e21c <_calloc_r>
 800db60:	b160      	cbz	r0, 800db7c <_Balloc+0x64>
 800db62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800db66:	e00e      	b.n	800db86 <_Balloc+0x6e>
 800db68:	2221      	movs	r2, #33	; 0x21
 800db6a:	2104      	movs	r1, #4
 800db6c:	4620      	mov	r0, r4
 800db6e:	f000 fb55 	bl	800e21c <_calloc_r>
 800db72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db74:	60f0      	str	r0, [r6, #12]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d1e4      	bne.n	800db46 <_Balloc+0x2e>
 800db7c:	2000      	movs	r0, #0
 800db7e:	bd70      	pop	{r4, r5, r6, pc}
 800db80:	6802      	ldr	r2, [r0, #0]
 800db82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db86:	2300      	movs	r3, #0
 800db88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db8c:	e7f7      	b.n	800db7e <_Balloc+0x66>
 800db8e:	bf00      	nop
 800db90:	0800f3c9 	.word	0x0800f3c9
 800db94:	0800f456 	.word	0x0800f456

0800db98 <_Bfree>:
 800db98:	b570      	push	{r4, r5, r6, lr}
 800db9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800db9c:	4605      	mov	r5, r0
 800db9e:	460c      	mov	r4, r1
 800dba0:	b976      	cbnz	r6, 800dbc0 <_Bfree+0x28>
 800dba2:	2010      	movs	r0, #16
 800dba4:	f7ff ff90 	bl	800dac8 <malloc>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	6268      	str	r0, [r5, #36]	; 0x24
 800dbac:	b920      	cbnz	r0, 800dbb8 <_Bfree+0x20>
 800dbae:	218a      	movs	r1, #138	; 0x8a
 800dbb0:	4b08      	ldr	r3, [pc, #32]	; (800dbd4 <_Bfree+0x3c>)
 800dbb2:	4809      	ldr	r0, [pc, #36]	; (800dbd8 <_Bfree+0x40>)
 800dbb4:	f7ff f8da 	bl	800cd6c <__assert_func>
 800dbb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbbc:	6006      	str	r6, [r0, #0]
 800dbbe:	60c6      	str	r6, [r0, #12]
 800dbc0:	b13c      	cbz	r4, 800dbd2 <_Bfree+0x3a>
 800dbc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dbc4:	6862      	ldr	r2, [r4, #4]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dbcc:	6021      	str	r1, [r4, #0]
 800dbce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dbd2:	bd70      	pop	{r4, r5, r6, pc}
 800dbd4:	0800f3c9 	.word	0x0800f3c9
 800dbd8:	0800f456 	.word	0x0800f456

0800dbdc <__multadd>:
 800dbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe0:	4607      	mov	r7, r0
 800dbe2:	460c      	mov	r4, r1
 800dbe4:	461e      	mov	r6, r3
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	690d      	ldr	r5, [r1, #16]
 800dbea:	f101 0c14 	add.w	ip, r1, #20
 800dbee:	f8dc 3000 	ldr.w	r3, [ip]
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	b299      	uxth	r1, r3
 800dbf6:	fb02 6101 	mla	r1, r2, r1, r6
 800dbfa:	0c1e      	lsrs	r6, r3, #16
 800dbfc:	0c0b      	lsrs	r3, r1, #16
 800dbfe:	fb02 3306 	mla	r3, r2, r6, r3
 800dc02:	b289      	uxth	r1, r1
 800dc04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc08:	4285      	cmp	r5, r0
 800dc0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc0e:	f84c 1b04 	str.w	r1, [ip], #4
 800dc12:	dcec      	bgt.n	800dbee <__multadd+0x12>
 800dc14:	b30e      	cbz	r6, 800dc5a <__multadd+0x7e>
 800dc16:	68a3      	ldr	r3, [r4, #8]
 800dc18:	42ab      	cmp	r3, r5
 800dc1a:	dc19      	bgt.n	800dc50 <__multadd+0x74>
 800dc1c:	6861      	ldr	r1, [r4, #4]
 800dc1e:	4638      	mov	r0, r7
 800dc20:	3101      	adds	r1, #1
 800dc22:	f7ff ff79 	bl	800db18 <_Balloc>
 800dc26:	4680      	mov	r8, r0
 800dc28:	b928      	cbnz	r0, 800dc36 <__multadd+0x5a>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	21b5      	movs	r1, #181	; 0xb5
 800dc2e:	4b0c      	ldr	r3, [pc, #48]	; (800dc60 <__multadd+0x84>)
 800dc30:	480c      	ldr	r0, [pc, #48]	; (800dc64 <__multadd+0x88>)
 800dc32:	f7ff f89b 	bl	800cd6c <__assert_func>
 800dc36:	6922      	ldr	r2, [r4, #16]
 800dc38:	f104 010c 	add.w	r1, r4, #12
 800dc3c:	3202      	adds	r2, #2
 800dc3e:	0092      	lsls	r2, r2, #2
 800dc40:	300c      	adds	r0, #12
 800dc42:	f7fe fbfd 	bl	800c440 <memcpy>
 800dc46:	4621      	mov	r1, r4
 800dc48:	4638      	mov	r0, r7
 800dc4a:	f7ff ffa5 	bl	800db98 <_Bfree>
 800dc4e:	4644      	mov	r4, r8
 800dc50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc54:	3501      	adds	r5, #1
 800dc56:	615e      	str	r6, [r3, #20]
 800dc58:	6125      	str	r5, [r4, #16]
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc60:	0800f43b 	.word	0x0800f43b
 800dc64:	0800f456 	.word	0x0800f456

0800dc68 <__hi0bits>:
 800dc68:	0c02      	lsrs	r2, r0, #16
 800dc6a:	0412      	lsls	r2, r2, #16
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	b9ca      	cbnz	r2, 800dca4 <__hi0bits+0x3c>
 800dc70:	0403      	lsls	r3, r0, #16
 800dc72:	2010      	movs	r0, #16
 800dc74:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dc78:	bf04      	itt	eq
 800dc7a:	021b      	lsleq	r3, r3, #8
 800dc7c:	3008      	addeq	r0, #8
 800dc7e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dc82:	bf04      	itt	eq
 800dc84:	011b      	lsleq	r3, r3, #4
 800dc86:	3004      	addeq	r0, #4
 800dc88:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dc8c:	bf04      	itt	eq
 800dc8e:	009b      	lsleq	r3, r3, #2
 800dc90:	3002      	addeq	r0, #2
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	db05      	blt.n	800dca2 <__hi0bits+0x3a>
 800dc96:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800dc9a:	f100 0001 	add.w	r0, r0, #1
 800dc9e:	bf08      	it	eq
 800dca0:	2020      	moveq	r0, #32
 800dca2:	4770      	bx	lr
 800dca4:	2000      	movs	r0, #0
 800dca6:	e7e5      	b.n	800dc74 <__hi0bits+0xc>

0800dca8 <__lo0bits>:
 800dca8:	6803      	ldr	r3, [r0, #0]
 800dcaa:	4602      	mov	r2, r0
 800dcac:	f013 0007 	ands.w	r0, r3, #7
 800dcb0:	d00b      	beq.n	800dcca <__lo0bits+0x22>
 800dcb2:	07d9      	lsls	r1, r3, #31
 800dcb4:	d421      	bmi.n	800dcfa <__lo0bits+0x52>
 800dcb6:	0798      	lsls	r0, r3, #30
 800dcb8:	bf49      	itett	mi
 800dcba:	085b      	lsrmi	r3, r3, #1
 800dcbc:	089b      	lsrpl	r3, r3, #2
 800dcbe:	2001      	movmi	r0, #1
 800dcc0:	6013      	strmi	r3, [r2, #0]
 800dcc2:	bf5c      	itt	pl
 800dcc4:	2002      	movpl	r0, #2
 800dcc6:	6013      	strpl	r3, [r2, #0]
 800dcc8:	4770      	bx	lr
 800dcca:	b299      	uxth	r1, r3
 800dccc:	b909      	cbnz	r1, 800dcd2 <__lo0bits+0x2a>
 800dcce:	2010      	movs	r0, #16
 800dcd0:	0c1b      	lsrs	r3, r3, #16
 800dcd2:	b2d9      	uxtb	r1, r3
 800dcd4:	b909      	cbnz	r1, 800dcda <__lo0bits+0x32>
 800dcd6:	3008      	adds	r0, #8
 800dcd8:	0a1b      	lsrs	r3, r3, #8
 800dcda:	0719      	lsls	r1, r3, #28
 800dcdc:	bf04      	itt	eq
 800dcde:	091b      	lsreq	r3, r3, #4
 800dce0:	3004      	addeq	r0, #4
 800dce2:	0799      	lsls	r1, r3, #30
 800dce4:	bf04      	itt	eq
 800dce6:	089b      	lsreq	r3, r3, #2
 800dce8:	3002      	addeq	r0, #2
 800dcea:	07d9      	lsls	r1, r3, #31
 800dcec:	d403      	bmi.n	800dcf6 <__lo0bits+0x4e>
 800dcee:	085b      	lsrs	r3, r3, #1
 800dcf0:	f100 0001 	add.w	r0, r0, #1
 800dcf4:	d003      	beq.n	800dcfe <__lo0bits+0x56>
 800dcf6:	6013      	str	r3, [r2, #0]
 800dcf8:	4770      	bx	lr
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	4770      	bx	lr
 800dcfe:	2020      	movs	r0, #32
 800dd00:	4770      	bx	lr
	...

0800dd04 <__i2b>:
 800dd04:	b510      	push	{r4, lr}
 800dd06:	460c      	mov	r4, r1
 800dd08:	2101      	movs	r1, #1
 800dd0a:	f7ff ff05 	bl	800db18 <_Balloc>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	b928      	cbnz	r0, 800dd1e <__i2b+0x1a>
 800dd12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dd16:	4b04      	ldr	r3, [pc, #16]	; (800dd28 <__i2b+0x24>)
 800dd18:	4804      	ldr	r0, [pc, #16]	; (800dd2c <__i2b+0x28>)
 800dd1a:	f7ff f827 	bl	800cd6c <__assert_func>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	6144      	str	r4, [r0, #20]
 800dd22:	6103      	str	r3, [r0, #16]
 800dd24:	bd10      	pop	{r4, pc}
 800dd26:	bf00      	nop
 800dd28:	0800f43b 	.word	0x0800f43b
 800dd2c:	0800f456 	.word	0x0800f456

0800dd30 <__multiply>:
 800dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd34:	4691      	mov	r9, r2
 800dd36:	690a      	ldr	r2, [r1, #16]
 800dd38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd3c:	460c      	mov	r4, r1
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	bfbe      	ittt	lt
 800dd42:	460b      	movlt	r3, r1
 800dd44:	464c      	movlt	r4, r9
 800dd46:	4699      	movlt	r9, r3
 800dd48:	6927      	ldr	r7, [r4, #16]
 800dd4a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd4e:	68a3      	ldr	r3, [r4, #8]
 800dd50:	6861      	ldr	r1, [r4, #4]
 800dd52:	eb07 060a 	add.w	r6, r7, sl
 800dd56:	42b3      	cmp	r3, r6
 800dd58:	b085      	sub	sp, #20
 800dd5a:	bfb8      	it	lt
 800dd5c:	3101      	addlt	r1, #1
 800dd5e:	f7ff fedb 	bl	800db18 <_Balloc>
 800dd62:	b930      	cbnz	r0, 800dd72 <__multiply+0x42>
 800dd64:	4602      	mov	r2, r0
 800dd66:	f240 115d 	movw	r1, #349	; 0x15d
 800dd6a:	4b43      	ldr	r3, [pc, #268]	; (800de78 <__multiply+0x148>)
 800dd6c:	4843      	ldr	r0, [pc, #268]	; (800de7c <__multiply+0x14c>)
 800dd6e:	f7fe fffd 	bl	800cd6c <__assert_func>
 800dd72:	f100 0514 	add.w	r5, r0, #20
 800dd76:	462b      	mov	r3, r5
 800dd78:	2200      	movs	r2, #0
 800dd7a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd7e:	4543      	cmp	r3, r8
 800dd80:	d321      	bcc.n	800ddc6 <__multiply+0x96>
 800dd82:	f104 0314 	add.w	r3, r4, #20
 800dd86:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd8a:	f109 0314 	add.w	r3, r9, #20
 800dd8e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dd92:	9202      	str	r2, [sp, #8]
 800dd94:	1b3a      	subs	r2, r7, r4
 800dd96:	3a15      	subs	r2, #21
 800dd98:	f022 0203 	bic.w	r2, r2, #3
 800dd9c:	3204      	adds	r2, #4
 800dd9e:	f104 0115 	add.w	r1, r4, #21
 800dda2:	428f      	cmp	r7, r1
 800dda4:	bf38      	it	cc
 800dda6:	2204      	movcc	r2, #4
 800dda8:	9201      	str	r2, [sp, #4]
 800ddaa:	9a02      	ldr	r2, [sp, #8]
 800ddac:	9303      	str	r3, [sp, #12]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d80c      	bhi.n	800ddcc <__multiply+0x9c>
 800ddb2:	2e00      	cmp	r6, #0
 800ddb4:	dd03      	ble.n	800ddbe <__multiply+0x8e>
 800ddb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d059      	beq.n	800de72 <__multiply+0x142>
 800ddbe:	6106      	str	r6, [r0, #16]
 800ddc0:	b005      	add	sp, #20
 800ddc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc6:	f843 2b04 	str.w	r2, [r3], #4
 800ddca:	e7d8      	b.n	800dd7e <__multiply+0x4e>
 800ddcc:	f8b3 a000 	ldrh.w	sl, [r3]
 800ddd0:	f1ba 0f00 	cmp.w	sl, #0
 800ddd4:	d023      	beq.n	800de1e <__multiply+0xee>
 800ddd6:	46a9      	mov	r9, r5
 800ddd8:	f04f 0c00 	mov.w	ip, #0
 800dddc:	f104 0e14 	add.w	lr, r4, #20
 800dde0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dde4:	f8d9 1000 	ldr.w	r1, [r9]
 800dde8:	fa1f fb82 	uxth.w	fp, r2
 800ddec:	b289      	uxth	r1, r1
 800ddee:	fb0a 110b 	mla	r1, sl, fp, r1
 800ddf2:	4461      	add	r1, ip
 800ddf4:	f8d9 c000 	ldr.w	ip, [r9]
 800ddf8:	0c12      	lsrs	r2, r2, #16
 800ddfa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ddfe:	fb0a c202 	mla	r2, sl, r2, ip
 800de02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800de06:	b289      	uxth	r1, r1
 800de08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800de0c:	4577      	cmp	r7, lr
 800de0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800de12:	f849 1b04 	str.w	r1, [r9], #4
 800de16:	d8e3      	bhi.n	800dde0 <__multiply+0xb0>
 800de18:	9a01      	ldr	r2, [sp, #4]
 800de1a:	f845 c002 	str.w	ip, [r5, r2]
 800de1e:	9a03      	ldr	r2, [sp, #12]
 800de20:	3304      	adds	r3, #4
 800de22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800de26:	f1b9 0f00 	cmp.w	r9, #0
 800de2a:	d020      	beq.n	800de6e <__multiply+0x13e>
 800de2c:	46ae      	mov	lr, r5
 800de2e:	f04f 0a00 	mov.w	sl, #0
 800de32:	6829      	ldr	r1, [r5, #0]
 800de34:	f104 0c14 	add.w	ip, r4, #20
 800de38:	f8bc b000 	ldrh.w	fp, [ip]
 800de3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800de40:	b289      	uxth	r1, r1
 800de42:	fb09 220b 	mla	r2, r9, fp, r2
 800de46:	4492      	add	sl, r2
 800de48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800de4c:	f84e 1b04 	str.w	r1, [lr], #4
 800de50:	f85c 2b04 	ldr.w	r2, [ip], #4
 800de54:	f8be 1000 	ldrh.w	r1, [lr]
 800de58:	0c12      	lsrs	r2, r2, #16
 800de5a:	fb09 1102 	mla	r1, r9, r2, r1
 800de5e:	4567      	cmp	r7, ip
 800de60:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800de64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800de68:	d8e6      	bhi.n	800de38 <__multiply+0x108>
 800de6a:	9a01      	ldr	r2, [sp, #4]
 800de6c:	50a9      	str	r1, [r5, r2]
 800de6e:	3504      	adds	r5, #4
 800de70:	e79b      	b.n	800ddaa <__multiply+0x7a>
 800de72:	3e01      	subs	r6, #1
 800de74:	e79d      	b.n	800ddb2 <__multiply+0x82>
 800de76:	bf00      	nop
 800de78:	0800f43b 	.word	0x0800f43b
 800de7c:	0800f456 	.word	0x0800f456

0800de80 <__pow5mult>:
 800de80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de84:	4615      	mov	r5, r2
 800de86:	f012 0203 	ands.w	r2, r2, #3
 800de8a:	4606      	mov	r6, r0
 800de8c:	460f      	mov	r7, r1
 800de8e:	d007      	beq.n	800dea0 <__pow5mult+0x20>
 800de90:	4c25      	ldr	r4, [pc, #148]	; (800df28 <__pow5mult+0xa8>)
 800de92:	3a01      	subs	r2, #1
 800de94:	2300      	movs	r3, #0
 800de96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de9a:	f7ff fe9f 	bl	800dbdc <__multadd>
 800de9e:	4607      	mov	r7, r0
 800dea0:	10ad      	asrs	r5, r5, #2
 800dea2:	d03d      	beq.n	800df20 <__pow5mult+0xa0>
 800dea4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dea6:	b97c      	cbnz	r4, 800dec8 <__pow5mult+0x48>
 800dea8:	2010      	movs	r0, #16
 800deaa:	f7ff fe0d 	bl	800dac8 <malloc>
 800deae:	4602      	mov	r2, r0
 800deb0:	6270      	str	r0, [r6, #36]	; 0x24
 800deb2:	b928      	cbnz	r0, 800dec0 <__pow5mult+0x40>
 800deb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800deb8:	4b1c      	ldr	r3, [pc, #112]	; (800df2c <__pow5mult+0xac>)
 800deba:	481d      	ldr	r0, [pc, #116]	; (800df30 <__pow5mult+0xb0>)
 800debc:	f7fe ff56 	bl	800cd6c <__assert_func>
 800dec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dec4:	6004      	str	r4, [r0, #0]
 800dec6:	60c4      	str	r4, [r0, #12]
 800dec8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800decc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ded0:	b94c      	cbnz	r4, 800dee6 <__pow5mult+0x66>
 800ded2:	f240 2171 	movw	r1, #625	; 0x271
 800ded6:	4630      	mov	r0, r6
 800ded8:	f7ff ff14 	bl	800dd04 <__i2b>
 800dedc:	2300      	movs	r3, #0
 800dede:	4604      	mov	r4, r0
 800dee0:	f8c8 0008 	str.w	r0, [r8, #8]
 800dee4:	6003      	str	r3, [r0, #0]
 800dee6:	f04f 0900 	mov.w	r9, #0
 800deea:	07eb      	lsls	r3, r5, #31
 800deec:	d50a      	bpl.n	800df04 <__pow5mult+0x84>
 800deee:	4639      	mov	r1, r7
 800def0:	4622      	mov	r2, r4
 800def2:	4630      	mov	r0, r6
 800def4:	f7ff ff1c 	bl	800dd30 <__multiply>
 800def8:	4680      	mov	r8, r0
 800defa:	4639      	mov	r1, r7
 800defc:	4630      	mov	r0, r6
 800defe:	f7ff fe4b 	bl	800db98 <_Bfree>
 800df02:	4647      	mov	r7, r8
 800df04:	106d      	asrs	r5, r5, #1
 800df06:	d00b      	beq.n	800df20 <__pow5mult+0xa0>
 800df08:	6820      	ldr	r0, [r4, #0]
 800df0a:	b938      	cbnz	r0, 800df1c <__pow5mult+0x9c>
 800df0c:	4622      	mov	r2, r4
 800df0e:	4621      	mov	r1, r4
 800df10:	4630      	mov	r0, r6
 800df12:	f7ff ff0d 	bl	800dd30 <__multiply>
 800df16:	6020      	str	r0, [r4, #0]
 800df18:	f8c0 9000 	str.w	r9, [r0]
 800df1c:	4604      	mov	r4, r0
 800df1e:	e7e4      	b.n	800deea <__pow5mult+0x6a>
 800df20:	4638      	mov	r0, r7
 800df22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df26:	bf00      	nop
 800df28:	0800f5a8 	.word	0x0800f5a8
 800df2c:	0800f3c9 	.word	0x0800f3c9
 800df30:	0800f456 	.word	0x0800f456

0800df34 <__lshift>:
 800df34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df38:	460c      	mov	r4, r1
 800df3a:	4607      	mov	r7, r0
 800df3c:	4691      	mov	r9, r2
 800df3e:	6923      	ldr	r3, [r4, #16]
 800df40:	6849      	ldr	r1, [r1, #4]
 800df42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df46:	68a3      	ldr	r3, [r4, #8]
 800df48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df4c:	f108 0601 	add.w	r6, r8, #1
 800df50:	42b3      	cmp	r3, r6
 800df52:	db0b      	blt.n	800df6c <__lshift+0x38>
 800df54:	4638      	mov	r0, r7
 800df56:	f7ff fddf 	bl	800db18 <_Balloc>
 800df5a:	4605      	mov	r5, r0
 800df5c:	b948      	cbnz	r0, 800df72 <__lshift+0x3e>
 800df5e:	4602      	mov	r2, r0
 800df60:	f240 11d9 	movw	r1, #473	; 0x1d9
 800df64:	4b29      	ldr	r3, [pc, #164]	; (800e00c <__lshift+0xd8>)
 800df66:	482a      	ldr	r0, [pc, #168]	; (800e010 <__lshift+0xdc>)
 800df68:	f7fe ff00 	bl	800cd6c <__assert_func>
 800df6c:	3101      	adds	r1, #1
 800df6e:	005b      	lsls	r3, r3, #1
 800df70:	e7ee      	b.n	800df50 <__lshift+0x1c>
 800df72:	2300      	movs	r3, #0
 800df74:	f100 0114 	add.w	r1, r0, #20
 800df78:	f100 0210 	add.w	r2, r0, #16
 800df7c:	4618      	mov	r0, r3
 800df7e:	4553      	cmp	r3, sl
 800df80:	db37      	blt.n	800dff2 <__lshift+0xbe>
 800df82:	6920      	ldr	r0, [r4, #16]
 800df84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df88:	f104 0314 	add.w	r3, r4, #20
 800df8c:	f019 091f 	ands.w	r9, r9, #31
 800df90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800df98:	d02f      	beq.n	800dffa <__lshift+0xc6>
 800df9a:	468a      	mov	sl, r1
 800df9c:	f04f 0c00 	mov.w	ip, #0
 800dfa0:	f1c9 0e20 	rsb	lr, r9, #32
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	fa02 f209 	lsl.w	r2, r2, r9
 800dfaa:	ea42 020c 	orr.w	r2, r2, ip
 800dfae:	f84a 2b04 	str.w	r2, [sl], #4
 800dfb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfb6:	4298      	cmp	r0, r3
 800dfb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dfbc:	d8f2      	bhi.n	800dfa4 <__lshift+0x70>
 800dfbe:	1b03      	subs	r3, r0, r4
 800dfc0:	3b15      	subs	r3, #21
 800dfc2:	f023 0303 	bic.w	r3, r3, #3
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	f104 0215 	add.w	r2, r4, #21
 800dfcc:	4290      	cmp	r0, r2
 800dfce:	bf38      	it	cc
 800dfd0:	2304      	movcc	r3, #4
 800dfd2:	f841 c003 	str.w	ip, [r1, r3]
 800dfd6:	f1bc 0f00 	cmp.w	ip, #0
 800dfda:	d001      	beq.n	800dfe0 <__lshift+0xac>
 800dfdc:	f108 0602 	add.w	r6, r8, #2
 800dfe0:	3e01      	subs	r6, #1
 800dfe2:	4638      	mov	r0, r7
 800dfe4:	4621      	mov	r1, r4
 800dfe6:	612e      	str	r6, [r5, #16]
 800dfe8:	f7ff fdd6 	bl	800db98 <_Bfree>
 800dfec:	4628      	mov	r0, r5
 800dfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dff2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dff6:	3301      	adds	r3, #1
 800dff8:	e7c1      	b.n	800df7e <__lshift+0x4a>
 800dffa:	3904      	subs	r1, #4
 800dffc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e000:	4298      	cmp	r0, r3
 800e002:	f841 2f04 	str.w	r2, [r1, #4]!
 800e006:	d8f9      	bhi.n	800dffc <__lshift+0xc8>
 800e008:	e7ea      	b.n	800dfe0 <__lshift+0xac>
 800e00a:	bf00      	nop
 800e00c:	0800f43b 	.word	0x0800f43b
 800e010:	0800f456 	.word	0x0800f456

0800e014 <__mcmp>:
 800e014:	4603      	mov	r3, r0
 800e016:	690a      	ldr	r2, [r1, #16]
 800e018:	6900      	ldr	r0, [r0, #16]
 800e01a:	b530      	push	{r4, r5, lr}
 800e01c:	1a80      	subs	r0, r0, r2
 800e01e:	d10d      	bne.n	800e03c <__mcmp+0x28>
 800e020:	3314      	adds	r3, #20
 800e022:	3114      	adds	r1, #20
 800e024:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e028:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e02c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e030:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e034:	4295      	cmp	r5, r2
 800e036:	d002      	beq.n	800e03e <__mcmp+0x2a>
 800e038:	d304      	bcc.n	800e044 <__mcmp+0x30>
 800e03a:	2001      	movs	r0, #1
 800e03c:	bd30      	pop	{r4, r5, pc}
 800e03e:	42a3      	cmp	r3, r4
 800e040:	d3f4      	bcc.n	800e02c <__mcmp+0x18>
 800e042:	e7fb      	b.n	800e03c <__mcmp+0x28>
 800e044:	f04f 30ff 	mov.w	r0, #4294967295
 800e048:	e7f8      	b.n	800e03c <__mcmp+0x28>
	...

0800e04c <__mdiff>:
 800e04c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e050:	460d      	mov	r5, r1
 800e052:	4607      	mov	r7, r0
 800e054:	4611      	mov	r1, r2
 800e056:	4628      	mov	r0, r5
 800e058:	4614      	mov	r4, r2
 800e05a:	f7ff ffdb 	bl	800e014 <__mcmp>
 800e05e:	1e06      	subs	r6, r0, #0
 800e060:	d111      	bne.n	800e086 <__mdiff+0x3a>
 800e062:	4631      	mov	r1, r6
 800e064:	4638      	mov	r0, r7
 800e066:	f7ff fd57 	bl	800db18 <_Balloc>
 800e06a:	4602      	mov	r2, r0
 800e06c:	b928      	cbnz	r0, 800e07a <__mdiff+0x2e>
 800e06e:	f240 2132 	movw	r1, #562	; 0x232
 800e072:	4b3a      	ldr	r3, [pc, #232]	; (800e15c <__mdiff+0x110>)
 800e074:	483a      	ldr	r0, [pc, #232]	; (800e160 <__mdiff+0x114>)
 800e076:	f7fe fe79 	bl	800cd6c <__assert_func>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e080:	4610      	mov	r0, r2
 800e082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e086:	bfa4      	itt	ge
 800e088:	4623      	movge	r3, r4
 800e08a:	462c      	movge	r4, r5
 800e08c:	4638      	mov	r0, r7
 800e08e:	6861      	ldr	r1, [r4, #4]
 800e090:	bfa6      	itte	ge
 800e092:	461d      	movge	r5, r3
 800e094:	2600      	movge	r6, #0
 800e096:	2601      	movlt	r6, #1
 800e098:	f7ff fd3e 	bl	800db18 <_Balloc>
 800e09c:	4602      	mov	r2, r0
 800e09e:	b918      	cbnz	r0, 800e0a8 <__mdiff+0x5c>
 800e0a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e0a4:	4b2d      	ldr	r3, [pc, #180]	; (800e15c <__mdiff+0x110>)
 800e0a6:	e7e5      	b.n	800e074 <__mdiff+0x28>
 800e0a8:	f102 0814 	add.w	r8, r2, #20
 800e0ac:	46c2      	mov	sl, r8
 800e0ae:	f04f 0c00 	mov.w	ip, #0
 800e0b2:	6927      	ldr	r7, [r4, #16]
 800e0b4:	60c6      	str	r6, [r0, #12]
 800e0b6:	692e      	ldr	r6, [r5, #16]
 800e0b8:	f104 0014 	add.w	r0, r4, #20
 800e0bc:	f105 0914 	add.w	r9, r5, #20
 800e0c0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800e0c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e0c8:	3410      	adds	r4, #16
 800e0ca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800e0ce:	f859 3b04 	ldr.w	r3, [r9], #4
 800e0d2:	fa1f f18b 	uxth.w	r1, fp
 800e0d6:	448c      	add	ip, r1
 800e0d8:	b299      	uxth	r1, r3
 800e0da:	0c1b      	lsrs	r3, r3, #16
 800e0dc:	ebac 0101 	sub.w	r1, ip, r1
 800e0e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e0e4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e0e8:	b289      	uxth	r1, r1
 800e0ea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e0ee:	454e      	cmp	r6, r9
 800e0f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e0f4:	f84a 3b04 	str.w	r3, [sl], #4
 800e0f8:	d8e7      	bhi.n	800e0ca <__mdiff+0x7e>
 800e0fa:	1b73      	subs	r3, r6, r5
 800e0fc:	3b15      	subs	r3, #21
 800e0fe:	f023 0303 	bic.w	r3, r3, #3
 800e102:	3515      	adds	r5, #21
 800e104:	3304      	adds	r3, #4
 800e106:	42ae      	cmp	r6, r5
 800e108:	bf38      	it	cc
 800e10a:	2304      	movcc	r3, #4
 800e10c:	4418      	add	r0, r3
 800e10e:	4443      	add	r3, r8
 800e110:	461e      	mov	r6, r3
 800e112:	4605      	mov	r5, r0
 800e114:	4575      	cmp	r5, lr
 800e116:	d30e      	bcc.n	800e136 <__mdiff+0xea>
 800e118:	f10e 0103 	add.w	r1, lr, #3
 800e11c:	1a09      	subs	r1, r1, r0
 800e11e:	f021 0103 	bic.w	r1, r1, #3
 800e122:	3803      	subs	r0, #3
 800e124:	4586      	cmp	lr, r0
 800e126:	bf38      	it	cc
 800e128:	2100      	movcc	r1, #0
 800e12a:	4419      	add	r1, r3
 800e12c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e130:	b18b      	cbz	r3, 800e156 <__mdiff+0x10a>
 800e132:	6117      	str	r7, [r2, #16]
 800e134:	e7a4      	b.n	800e080 <__mdiff+0x34>
 800e136:	f855 8b04 	ldr.w	r8, [r5], #4
 800e13a:	fa1f f188 	uxth.w	r1, r8
 800e13e:	4461      	add	r1, ip
 800e140:	140c      	asrs	r4, r1, #16
 800e142:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e146:	b289      	uxth	r1, r1
 800e148:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e14c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800e150:	f846 1b04 	str.w	r1, [r6], #4
 800e154:	e7de      	b.n	800e114 <__mdiff+0xc8>
 800e156:	3f01      	subs	r7, #1
 800e158:	e7e8      	b.n	800e12c <__mdiff+0xe0>
 800e15a:	bf00      	nop
 800e15c:	0800f43b 	.word	0x0800f43b
 800e160:	0800f456 	.word	0x0800f456

0800e164 <__d2b>:
 800e164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e168:	2101      	movs	r1, #1
 800e16a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800e16e:	4690      	mov	r8, r2
 800e170:	461d      	mov	r5, r3
 800e172:	f7ff fcd1 	bl	800db18 <_Balloc>
 800e176:	4604      	mov	r4, r0
 800e178:	b930      	cbnz	r0, 800e188 <__d2b+0x24>
 800e17a:	4602      	mov	r2, r0
 800e17c:	f240 310a 	movw	r1, #778	; 0x30a
 800e180:	4b24      	ldr	r3, [pc, #144]	; (800e214 <__d2b+0xb0>)
 800e182:	4825      	ldr	r0, [pc, #148]	; (800e218 <__d2b+0xb4>)
 800e184:	f7fe fdf2 	bl	800cd6c <__assert_func>
 800e188:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800e18c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800e190:	bb2d      	cbnz	r5, 800e1de <__d2b+0x7a>
 800e192:	9301      	str	r3, [sp, #4]
 800e194:	f1b8 0300 	subs.w	r3, r8, #0
 800e198:	d026      	beq.n	800e1e8 <__d2b+0x84>
 800e19a:	4668      	mov	r0, sp
 800e19c:	9300      	str	r3, [sp, #0]
 800e19e:	f7ff fd83 	bl	800dca8 <__lo0bits>
 800e1a2:	9900      	ldr	r1, [sp, #0]
 800e1a4:	b1f0      	cbz	r0, 800e1e4 <__d2b+0x80>
 800e1a6:	9a01      	ldr	r2, [sp, #4]
 800e1a8:	f1c0 0320 	rsb	r3, r0, #32
 800e1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e1b0:	430b      	orrs	r3, r1
 800e1b2:	40c2      	lsrs	r2, r0
 800e1b4:	6163      	str	r3, [r4, #20]
 800e1b6:	9201      	str	r2, [sp, #4]
 800e1b8:	9b01      	ldr	r3, [sp, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	bf14      	ite	ne
 800e1be:	2102      	movne	r1, #2
 800e1c0:	2101      	moveq	r1, #1
 800e1c2:	61a3      	str	r3, [r4, #24]
 800e1c4:	6121      	str	r1, [r4, #16]
 800e1c6:	b1c5      	cbz	r5, 800e1fa <__d2b+0x96>
 800e1c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e1cc:	4405      	add	r5, r0
 800e1ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e1d2:	603d      	str	r5, [r7, #0]
 800e1d4:	6030      	str	r0, [r6, #0]
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	b002      	add	sp, #8
 800e1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1e2:	e7d6      	b.n	800e192 <__d2b+0x2e>
 800e1e4:	6161      	str	r1, [r4, #20]
 800e1e6:	e7e7      	b.n	800e1b8 <__d2b+0x54>
 800e1e8:	a801      	add	r0, sp, #4
 800e1ea:	f7ff fd5d 	bl	800dca8 <__lo0bits>
 800e1ee:	2101      	movs	r1, #1
 800e1f0:	9b01      	ldr	r3, [sp, #4]
 800e1f2:	6121      	str	r1, [r4, #16]
 800e1f4:	6163      	str	r3, [r4, #20]
 800e1f6:	3020      	adds	r0, #32
 800e1f8:	e7e5      	b.n	800e1c6 <__d2b+0x62>
 800e1fa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800e1fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e202:	6038      	str	r0, [r7, #0]
 800e204:	6918      	ldr	r0, [r3, #16]
 800e206:	f7ff fd2f 	bl	800dc68 <__hi0bits>
 800e20a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800e20e:	6031      	str	r1, [r6, #0]
 800e210:	e7e1      	b.n	800e1d6 <__d2b+0x72>
 800e212:	bf00      	nop
 800e214:	0800f43b 	.word	0x0800f43b
 800e218:	0800f456 	.word	0x0800f456

0800e21c <_calloc_r>:
 800e21c:	b570      	push	{r4, r5, r6, lr}
 800e21e:	fba1 5402 	umull	r5, r4, r1, r2
 800e222:	b934      	cbnz	r4, 800e232 <_calloc_r+0x16>
 800e224:	4629      	mov	r1, r5
 800e226:	f000 f875 	bl	800e314 <_malloc_r>
 800e22a:	4606      	mov	r6, r0
 800e22c:	b928      	cbnz	r0, 800e23a <_calloc_r+0x1e>
 800e22e:	4630      	mov	r0, r6
 800e230:	bd70      	pop	{r4, r5, r6, pc}
 800e232:	220c      	movs	r2, #12
 800e234:	2600      	movs	r6, #0
 800e236:	6002      	str	r2, [r0, #0]
 800e238:	e7f9      	b.n	800e22e <_calloc_r+0x12>
 800e23a:	462a      	mov	r2, r5
 800e23c:	4621      	mov	r1, r4
 800e23e:	f7fe f90d 	bl	800c45c <memset>
 800e242:	e7f4      	b.n	800e22e <_calloc_r+0x12>

0800e244 <_free_r>:
 800e244:	b538      	push	{r3, r4, r5, lr}
 800e246:	4605      	mov	r5, r0
 800e248:	2900      	cmp	r1, #0
 800e24a:	d040      	beq.n	800e2ce <_free_r+0x8a>
 800e24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e250:	1f0c      	subs	r4, r1, #4
 800e252:	2b00      	cmp	r3, #0
 800e254:	bfb8      	it	lt
 800e256:	18e4      	addlt	r4, r4, r3
 800e258:	f000 fea0 	bl	800ef9c <__malloc_lock>
 800e25c:	4a1c      	ldr	r2, [pc, #112]	; (800e2d0 <_free_r+0x8c>)
 800e25e:	6813      	ldr	r3, [r2, #0]
 800e260:	b933      	cbnz	r3, 800e270 <_free_r+0x2c>
 800e262:	6063      	str	r3, [r4, #4]
 800e264:	6014      	str	r4, [r2, #0]
 800e266:	4628      	mov	r0, r5
 800e268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e26c:	f000 be9c 	b.w	800efa8 <__malloc_unlock>
 800e270:	42a3      	cmp	r3, r4
 800e272:	d908      	bls.n	800e286 <_free_r+0x42>
 800e274:	6820      	ldr	r0, [r4, #0]
 800e276:	1821      	adds	r1, r4, r0
 800e278:	428b      	cmp	r3, r1
 800e27a:	bf01      	itttt	eq
 800e27c:	6819      	ldreq	r1, [r3, #0]
 800e27e:	685b      	ldreq	r3, [r3, #4]
 800e280:	1809      	addeq	r1, r1, r0
 800e282:	6021      	streq	r1, [r4, #0]
 800e284:	e7ed      	b.n	800e262 <_free_r+0x1e>
 800e286:	461a      	mov	r2, r3
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	b10b      	cbz	r3, 800e290 <_free_r+0x4c>
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	d9fa      	bls.n	800e286 <_free_r+0x42>
 800e290:	6811      	ldr	r1, [r2, #0]
 800e292:	1850      	adds	r0, r2, r1
 800e294:	42a0      	cmp	r0, r4
 800e296:	d10b      	bne.n	800e2b0 <_free_r+0x6c>
 800e298:	6820      	ldr	r0, [r4, #0]
 800e29a:	4401      	add	r1, r0
 800e29c:	1850      	adds	r0, r2, r1
 800e29e:	4283      	cmp	r3, r0
 800e2a0:	6011      	str	r1, [r2, #0]
 800e2a2:	d1e0      	bne.n	800e266 <_free_r+0x22>
 800e2a4:	6818      	ldr	r0, [r3, #0]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	4401      	add	r1, r0
 800e2aa:	6011      	str	r1, [r2, #0]
 800e2ac:	6053      	str	r3, [r2, #4]
 800e2ae:	e7da      	b.n	800e266 <_free_r+0x22>
 800e2b0:	d902      	bls.n	800e2b8 <_free_r+0x74>
 800e2b2:	230c      	movs	r3, #12
 800e2b4:	602b      	str	r3, [r5, #0]
 800e2b6:	e7d6      	b.n	800e266 <_free_r+0x22>
 800e2b8:	6820      	ldr	r0, [r4, #0]
 800e2ba:	1821      	adds	r1, r4, r0
 800e2bc:	428b      	cmp	r3, r1
 800e2be:	bf01      	itttt	eq
 800e2c0:	6819      	ldreq	r1, [r3, #0]
 800e2c2:	685b      	ldreq	r3, [r3, #4]
 800e2c4:	1809      	addeq	r1, r1, r0
 800e2c6:	6021      	streq	r1, [r4, #0]
 800e2c8:	6063      	str	r3, [r4, #4]
 800e2ca:	6054      	str	r4, [r2, #4]
 800e2cc:	e7cb      	b.n	800e266 <_free_r+0x22>
 800e2ce:	bd38      	pop	{r3, r4, r5, pc}
 800e2d0:	200014b0 	.word	0x200014b0

0800e2d4 <sbrk_aligned>:
 800e2d4:	b570      	push	{r4, r5, r6, lr}
 800e2d6:	4e0e      	ldr	r6, [pc, #56]	; (800e310 <sbrk_aligned+0x3c>)
 800e2d8:	460c      	mov	r4, r1
 800e2da:	6831      	ldr	r1, [r6, #0]
 800e2dc:	4605      	mov	r5, r0
 800e2de:	b911      	cbnz	r1, 800e2e6 <sbrk_aligned+0x12>
 800e2e0:	f000 fb40 	bl	800e964 <_sbrk_r>
 800e2e4:	6030      	str	r0, [r6, #0]
 800e2e6:	4621      	mov	r1, r4
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	f000 fb3b 	bl	800e964 <_sbrk_r>
 800e2ee:	1c43      	adds	r3, r0, #1
 800e2f0:	d00a      	beq.n	800e308 <sbrk_aligned+0x34>
 800e2f2:	1cc4      	adds	r4, r0, #3
 800e2f4:	f024 0403 	bic.w	r4, r4, #3
 800e2f8:	42a0      	cmp	r0, r4
 800e2fa:	d007      	beq.n	800e30c <sbrk_aligned+0x38>
 800e2fc:	1a21      	subs	r1, r4, r0
 800e2fe:	4628      	mov	r0, r5
 800e300:	f000 fb30 	bl	800e964 <_sbrk_r>
 800e304:	3001      	adds	r0, #1
 800e306:	d101      	bne.n	800e30c <sbrk_aligned+0x38>
 800e308:	f04f 34ff 	mov.w	r4, #4294967295
 800e30c:	4620      	mov	r0, r4
 800e30e:	bd70      	pop	{r4, r5, r6, pc}
 800e310:	200014b4 	.word	0x200014b4

0800e314 <_malloc_r>:
 800e314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e318:	1ccd      	adds	r5, r1, #3
 800e31a:	f025 0503 	bic.w	r5, r5, #3
 800e31e:	3508      	adds	r5, #8
 800e320:	2d0c      	cmp	r5, #12
 800e322:	bf38      	it	cc
 800e324:	250c      	movcc	r5, #12
 800e326:	2d00      	cmp	r5, #0
 800e328:	4607      	mov	r7, r0
 800e32a:	db01      	blt.n	800e330 <_malloc_r+0x1c>
 800e32c:	42a9      	cmp	r1, r5
 800e32e:	d905      	bls.n	800e33c <_malloc_r+0x28>
 800e330:	230c      	movs	r3, #12
 800e332:	2600      	movs	r6, #0
 800e334:	603b      	str	r3, [r7, #0]
 800e336:	4630      	mov	r0, r6
 800e338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e33c:	4e2e      	ldr	r6, [pc, #184]	; (800e3f8 <_malloc_r+0xe4>)
 800e33e:	f000 fe2d 	bl	800ef9c <__malloc_lock>
 800e342:	6833      	ldr	r3, [r6, #0]
 800e344:	461c      	mov	r4, r3
 800e346:	bb34      	cbnz	r4, 800e396 <_malloc_r+0x82>
 800e348:	4629      	mov	r1, r5
 800e34a:	4638      	mov	r0, r7
 800e34c:	f7ff ffc2 	bl	800e2d4 <sbrk_aligned>
 800e350:	1c43      	adds	r3, r0, #1
 800e352:	4604      	mov	r4, r0
 800e354:	d14d      	bne.n	800e3f2 <_malloc_r+0xde>
 800e356:	6834      	ldr	r4, [r6, #0]
 800e358:	4626      	mov	r6, r4
 800e35a:	2e00      	cmp	r6, #0
 800e35c:	d140      	bne.n	800e3e0 <_malloc_r+0xcc>
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	4631      	mov	r1, r6
 800e362:	4638      	mov	r0, r7
 800e364:	eb04 0803 	add.w	r8, r4, r3
 800e368:	f000 fafc 	bl	800e964 <_sbrk_r>
 800e36c:	4580      	cmp	r8, r0
 800e36e:	d13a      	bne.n	800e3e6 <_malloc_r+0xd2>
 800e370:	6821      	ldr	r1, [r4, #0]
 800e372:	3503      	adds	r5, #3
 800e374:	1a6d      	subs	r5, r5, r1
 800e376:	f025 0503 	bic.w	r5, r5, #3
 800e37a:	3508      	adds	r5, #8
 800e37c:	2d0c      	cmp	r5, #12
 800e37e:	bf38      	it	cc
 800e380:	250c      	movcc	r5, #12
 800e382:	4638      	mov	r0, r7
 800e384:	4629      	mov	r1, r5
 800e386:	f7ff ffa5 	bl	800e2d4 <sbrk_aligned>
 800e38a:	3001      	adds	r0, #1
 800e38c:	d02b      	beq.n	800e3e6 <_malloc_r+0xd2>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	442b      	add	r3, r5
 800e392:	6023      	str	r3, [r4, #0]
 800e394:	e00e      	b.n	800e3b4 <_malloc_r+0xa0>
 800e396:	6822      	ldr	r2, [r4, #0]
 800e398:	1b52      	subs	r2, r2, r5
 800e39a:	d41e      	bmi.n	800e3da <_malloc_r+0xc6>
 800e39c:	2a0b      	cmp	r2, #11
 800e39e:	d916      	bls.n	800e3ce <_malloc_r+0xba>
 800e3a0:	1961      	adds	r1, r4, r5
 800e3a2:	42a3      	cmp	r3, r4
 800e3a4:	6025      	str	r5, [r4, #0]
 800e3a6:	bf18      	it	ne
 800e3a8:	6059      	strne	r1, [r3, #4]
 800e3aa:	6863      	ldr	r3, [r4, #4]
 800e3ac:	bf08      	it	eq
 800e3ae:	6031      	streq	r1, [r6, #0]
 800e3b0:	5162      	str	r2, [r4, r5]
 800e3b2:	604b      	str	r3, [r1, #4]
 800e3b4:	4638      	mov	r0, r7
 800e3b6:	f104 060b 	add.w	r6, r4, #11
 800e3ba:	f000 fdf5 	bl	800efa8 <__malloc_unlock>
 800e3be:	f026 0607 	bic.w	r6, r6, #7
 800e3c2:	1d23      	adds	r3, r4, #4
 800e3c4:	1af2      	subs	r2, r6, r3
 800e3c6:	d0b6      	beq.n	800e336 <_malloc_r+0x22>
 800e3c8:	1b9b      	subs	r3, r3, r6
 800e3ca:	50a3      	str	r3, [r4, r2]
 800e3cc:	e7b3      	b.n	800e336 <_malloc_r+0x22>
 800e3ce:	6862      	ldr	r2, [r4, #4]
 800e3d0:	42a3      	cmp	r3, r4
 800e3d2:	bf0c      	ite	eq
 800e3d4:	6032      	streq	r2, [r6, #0]
 800e3d6:	605a      	strne	r2, [r3, #4]
 800e3d8:	e7ec      	b.n	800e3b4 <_malloc_r+0xa0>
 800e3da:	4623      	mov	r3, r4
 800e3dc:	6864      	ldr	r4, [r4, #4]
 800e3de:	e7b2      	b.n	800e346 <_malloc_r+0x32>
 800e3e0:	4634      	mov	r4, r6
 800e3e2:	6876      	ldr	r6, [r6, #4]
 800e3e4:	e7b9      	b.n	800e35a <_malloc_r+0x46>
 800e3e6:	230c      	movs	r3, #12
 800e3e8:	4638      	mov	r0, r7
 800e3ea:	603b      	str	r3, [r7, #0]
 800e3ec:	f000 fddc 	bl	800efa8 <__malloc_unlock>
 800e3f0:	e7a1      	b.n	800e336 <_malloc_r+0x22>
 800e3f2:	6025      	str	r5, [r4, #0]
 800e3f4:	e7de      	b.n	800e3b4 <_malloc_r+0xa0>
 800e3f6:	bf00      	nop
 800e3f8:	200014b0 	.word	0x200014b0

0800e3fc <__ssputs_r>:
 800e3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e400:	688e      	ldr	r6, [r1, #8]
 800e402:	4682      	mov	sl, r0
 800e404:	429e      	cmp	r6, r3
 800e406:	460c      	mov	r4, r1
 800e408:	4690      	mov	r8, r2
 800e40a:	461f      	mov	r7, r3
 800e40c:	d838      	bhi.n	800e480 <__ssputs_r+0x84>
 800e40e:	898a      	ldrh	r2, [r1, #12]
 800e410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e414:	d032      	beq.n	800e47c <__ssputs_r+0x80>
 800e416:	6825      	ldr	r5, [r4, #0]
 800e418:	6909      	ldr	r1, [r1, #16]
 800e41a:	3301      	adds	r3, #1
 800e41c:	eba5 0901 	sub.w	r9, r5, r1
 800e420:	6965      	ldr	r5, [r4, #20]
 800e422:	444b      	add	r3, r9
 800e424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e428:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e42c:	106d      	asrs	r5, r5, #1
 800e42e:	429d      	cmp	r5, r3
 800e430:	bf38      	it	cc
 800e432:	461d      	movcc	r5, r3
 800e434:	0553      	lsls	r3, r2, #21
 800e436:	d531      	bpl.n	800e49c <__ssputs_r+0xa0>
 800e438:	4629      	mov	r1, r5
 800e43a:	f7ff ff6b 	bl	800e314 <_malloc_r>
 800e43e:	4606      	mov	r6, r0
 800e440:	b950      	cbnz	r0, 800e458 <__ssputs_r+0x5c>
 800e442:	230c      	movs	r3, #12
 800e444:	f04f 30ff 	mov.w	r0, #4294967295
 800e448:	f8ca 3000 	str.w	r3, [sl]
 800e44c:	89a3      	ldrh	r3, [r4, #12]
 800e44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e452:	81a3      	strh	r3, [r4, #12]
 800e454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e458:	464a      	mov	r2, r9
 800e45a:	6921      	ldr	r1, [r4, #16]
 800e45c:	f7fd fff0 	bl	800c440 <memcpy>
 800e460:	89a3      	ldrh	r3, [r4, #12]
 800e462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e46a:	81a3      	strh	r3, [r4, #12]
 800e46c:	6126      	str	r6, [r4, #16]
 800e46e:	444e      	add	r6, r9
 800e470:	6026      	str	r6, [r4, #0]
 800e472:	463e      	mov	r6, r7
 800e474:	6165      	str	r5, [r4, #20]
 800e476:	eba5 0509 	sub.w	r5, r5, r9
 800e47a:	60a5      	str	r5, [r4, #8]
 800e47c:	42be      	cmp	r6, r7
 800e47e:	d900      	bls.n	800e482 <__ssputs_r+0x86>
 800e480:	463e      	mov	r6, r7
 800e482:	4632      	mov	r2, r6
 800e484:	4641      	mov	r1, r8
 800e486:	6820      	ldr	r0, [r4, #0]
 800e488:	f000 fd6e 	bl	800ef68 <memmove>
 800e48c:	68a3      	ldr	r3, [r4, #8]
 800e48e:	2000      	movs	r0, #0
 800e490:	1b9b      	subs	r3, r3, r6
 800e492:	60a3      	str	r3, [r4, #8]
 800e494:	6823      	ldr	r3, [r4, #0]
 800e496:	4433      	add	r3, r6
 800e498:	6023      	str	r3, [r4, #0]
 800e49a:	e7db      	b.n	800e454 <__ssputs_r+0x58>
 800e49c:	462a      	mov	r2, r5
 800e49e:	f000 fd89 	bl	800efb4 <_realloc_r>
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	d1e1      	bne.n	800e46c <__ssputs_r+0x70>
 800e4a8:	4650      	mov	r0, sl
 800e4aa:	6921      	ldr	r1, [r4, #16]
 800e4ac:	f7ff feca 	bl	800e244 <_free_r>
 800e4b0:	e7c7      	b.n	800e442 <__ssputs_r+0x46>
	...

0800e4b4 <_svfiprintf_r>:
 800e4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b8:	4698      	mov	r8, r3
 800e4ba:	898b      	ldrh	r3, [r1, #12]
 800e4bc:	4607      	mov	r7, r0
 800e4be:	061b      	lsls	r3, r3, #24
 800e4c0:	460d      	mov	r5, r1
 800e4c2:	4614      	mov	r4, r2
 800e4c4:	b09d      	sub	sp, #116	; 0x74
 800e4c6:	d50e      	bpl.n	800e4e6 <_svfiprintf_r+0x32>
 800e4c8:	690b      	ldr	r3, [r1, #16]
 800e4ca:	b963      	cbnz	r3, 800e4e6 <_svfiprintf_r+0x32>
 800e4cc:	2140      	movs	r1, #64	; 0x40
 800e4ce:	f7ff ff21 	bl	800e314 <_malloc_r>
 800e4d2:	6028      	str	r0, [r5, #0]
 800e4d4:	6128      	str	r0, [r5, #16]
 800e4d6:	b920      	cbnz	r0, 800e4e2 <_svfiprintf_r+0x2e>
 800e4d8:	230c      	movs	r3, #12
 800e4da:	603b      	str	r3, [r7, #0]
 800e4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e0:	e0d1      	b.n	800e686 <_svfiprintf_r+0x1d2>
 800e4e2:	2340      	movs	r3, #64	; 0x40
 800e4e4:	616b      	str	r3, [r5, #20]
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ea:	2320      	movs	r3, #32
 800e4ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4f0:	2330      	movs	r3, #48	; 0x30
 800e4f2:	f04f 0901 	mov.w	r9, #1
 800e4f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e6a0 <_svfiprintf_r+0x1ec>
 800e4fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e502:	4623      	mov	r3, r4
 800e504:	469a      	mov	sl, r3
 800e506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e50a:	b10a      	cbz	r2, 800e510 <_svfiprintf_r+0x5c>
 800e50c:	2a25      	cmp	r2, #37	; 0x25
 800e50e:	d1f9      	bne.n	800e504 <_svfiprintf_r+0x50>
 800e510:	ebba 0b04 	subs.w	fp, sl, r4
 800e514:	d00b      	beq.n	800e52e <_svfiprintf_r+0x7a>
 800e516:	465b      	mov	r3, fp
 800e518:	4622      	mov	r2, r4
 800e51a:	4629      	mov	r1, r5
 800e51c:	4638      	mov	r0, r7
 800e51e:	f7ff ff6d 	bl	800e3fc <__ssputs_r>
 800e522:	3001      	adds	r0, #1
 800e524:	f000 80aa 	beq.w	800e67c <_svfiprintf_r+0x1c8>
 800e528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e52a:	445a      	add	r2, fp
 800e52c:	9209      	str	r2, [sp, #36]	; 0x24
 800e52e:	f89a 3000 	ldrb.w	r3, [sl]
 800e532:	2b00      	cmp	r3, #0
 800e534:	f000 80a2 	beq.w	800e67c <_svfiprintf_r+0x1c8>
 800e538:	2300      	movs	r3, #0
 800e53a:	f04f 32ff 	mov.w	r2, #4294967295
 800e53e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e542:	f10a 0a01 	add.w	sl, sl, #1
 800e546:	9304      	str	r3, [sp, #16]
 800e548:	9307      	str	r3, [sp, #28]
 800e54a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e54e:	931a      	str	r3, [sp, #104]	; 0x68
 800e550:	4654      	mov	r4, sl
 800e552:	2205      	movs	r2, #5
 800e554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e558:	4851      	ldr	r0, [pc, #324]	; (800e6a0 <_svfiprintf_r+0x1ec>)
 800e55a:	f7ff facf 	bl	800dafc <memchr>
 800e55e:	9a04      	ldr	r2, [sp, #16]
 800e560:	b9d8      	cbnz	r0, 800e59a <_svfiprintf_r+0xe6>
 800e562:	06d0      	lsls	r0, r2, #27
 800e564:	bf44      	itt	mi
 800e566:	2320      	movmi	r3, #32
 800e568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e56c:	0711      	lsls	r1, r2, #28
 800e56e:	bf44      	itt	mi
 800e570:	232b      	movmi	r3, #43	; 0x2b
 800e572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e576:	f89a 3000 	ldrb.w	r3, [sl]
 800e57a:	2b2a      	cmp	r3, #42	; 0x2a
 800e57c:	d015      	beq.n	800e5aa <_svfiprintf_r+0xf6>
 800e57e:	4654      	mov	r4, sl
 800e580:	2000      	movs	r0, #0
 800e582:	f04f 0c0a 	mov.w	ip, #10
 800e586:	9a07      	ldr	r2, [sp, #28]
 800e588:	4621      	mov	r1, r4
 800e58a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e58e:	3b30      	subs	r3, #48	; 0x30
 800e590:	2b09      	cmp	r3, #9
 800e592:	d94e      	bls.n	800e632 <_svfiprintf_r+0x17e>
 800e594:	b1b0      	cbz	r0, 800e5c4 <_svfiprintf_r+0x110>
 800e596:	9207      	str	r2, [sp, #28]
 800e598:	e014      	b.n	800e5c4 <_svfiprintf_r+0x110>
 800e59a:	eba0 0308 	sub.w	r3, r0, r8
 800e59e:	fa09 f303 	lsl.w	r3, r9, r3
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	46a2      	mov	sl, r4
 800e5a6:	9304      	str	r3, [sp, #16]
 800e5a8:	e7d2      	b.n	800e550 <_svfiprintf_r+0x9c>
 800e5aa:	9b03      	ldr	r3, [sp, #12]
 800e5ac:	1d19      	adds	r1, r3, #4
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	9103      	str	r1, [sp, #12]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	bfbb      	ittet	lt
 800e5b6:	425b      	neglt	r3, r3
 800e5b8:	f042 0202 	orrlt.w	r2, r2, #2
 800e5bc:	9307      	strge	r3, [sp, #28]
 800e5be:	9307      	strlt	r3, [sp, #28]
 800e5c0:	bfb8      	it	lt
 800e5c2:	9204      	strlt	r2, [sp, #16]
 800e5c4:	7823      	ldrb	r3, [r4, #0]
 800e5c6:	2b2e      	cmp	r3, #46	; 0x2e
 800e5c8:	d10c      	bne.n	800e5e4 <_svfiprintf_r+0x130>
 800e5ca:	7863      	ldrb	r3, [r4, #1]
 800e5cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ce:	d135      	bne.n	800e63c <_svfiprintf_r+0x188>
 800e5d0:	9b03      	ldr	r3, [sp, #12]
 800e5d2:	3402      	adds	r4, #2
 800e5d4:	1d1a      	adds	r2, r3, #4
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	9203      	str	r2, [sp, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	bfb8      	it	lt
 800e5de:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5e2:	9305      	str	r3, [sp, #20]
 800e5e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800e6a4 <_svfiprintf_r+0x1f0>
 800e5e8:	2203      	movs	r2, #3
 800e5ea:	4650      	mov	r0, sl
 800e5ec:	7821      	ldrb	r1, [r4, #0]
 800e5ee:	f7ff fa85 	bl	800dafc <memchr>
 800e5f2:	b140      	cbz	r0, 800e606 <_svfiprintf_r+0x152>
 800e5f4:	2340      	movs	r3, #64	; 0x40
 800e5f6:	eba0 000a 	sub.w	r0, r0, sl
 800e5fa:	fa03 f000 	lsl.w	r0, r3, r0
 800e5fe:	9b04      	ldr	r3, [sp, #16]
 800e600:	3401      	adds	r4, #1
 800e602:	4303      	orrs	r3, r0
 800e604:	9304      	str	r3, [sp, #16]
 800e606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e60a:	2206      	movs	r2, #6
 800e60c:	4826      	ldr	r0, [pc, #152]	; (800e6a8 <_svfiprintf_r+0x1f4>)
 800e60e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e612:	f7ff fa73 	bl	800dafc <memchr>
 800e616:	2800      	cmp	r0, #0
 800e618:	d038      	beq.n	800e68c <_svfiprintf_r+0x1d8>
 800e61a:	4b24      	ldr	r3, [pc, #144]	; (800e6ac <_svfiprintf_r+0x1f8>)
 800e61c:	bb1b      	cbnz	r3, 800e666 <_svfiprintf_r+0x1b2>
 800e61e:	9b03      	ldr	r3, [sp, #12]
 800e620:	3307      	adds	r3, #7
 800e622:	f023 0307 	bic.w	r3, r3, #7
 800e626:	3308      	adds	r3, #8
 800e628:	9303      	str	r3, [sp, #12]
 800e62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e62c:	4433      	add	r3, r6
 800e62e:	9309      	str	r3, [sp, #36]	; 0x24
 800e630:	e767      	b.n	800e502 <_svfiprintf_r+0x4e>
 800e632:	460c      	mov	r4, r1
 800e634:	2001      	movs	r0, #1
 800e636:	fb0c 3202 	mla	r2, ip, r2, r3
 800e63a:	e7a5      	b.n	800e588 <_svfiprintf_r+0xd4>
 800e63c:	2300      	movs	r3, #0
 800e63e:	f04f 0c0a 	mov.w	ip, #10
 800e642:	4619      	mov	r1, r3
 800e644:	3401      	adds	r4, #1
 800e646:	9305      	str	r3, [sp, #20]
 800e648:	4620      	mov	r0, r4
 800e64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e64e:	3a30      	subs	r2, #48	; 0x30
 800e650:	2a09      	cmp	r2, #9
 800e652:	d903      	bls.n	800e65c <_svfiprintf_r+0x1a8>
 800e654:	2b00      	cmp	r3, #0
 800e656:	d0c5      	beq.n	800e5e4 <_svfiprintf_r+0x130>
 800e658:	9105      	str	r1, [sp, #20]
 800e65a:	e7c3      	b.n	800e5e4 <_svfiprintf_r+0x130>
 800e65c:	4604      	mov	r4, r0
 800e65e:	2301      	movs	r3, #1
 800e660:	fb0c 2101 	mla	r1, ip, r1, r2
 800e664:	e7f0      	b.n	800e648 <_svfiprintf_r+0x194>
 800e666:	ab03      	add	r3, sp, #12
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	462a      	mov	r2, r5
 800e66c:	4638      	mov	r0, r7
 800e66e:	4b10      	ldr	r3, [pc, #64]	; (800e6b0 <_svfiprintf_r+0x1fc>)
 800e670:	a904      	add	r1, sp, #16
 800e672:	f7fd ff99 	bl	800c5a8 <_printf_float>
 800e676:	1c42      	adds	r2, r0, #1
 800e678:	4606      	mov	r6, r0
 800e67a:	d1d6      	bne.n	800e62a <_svfiprintf_r+0x176>
 800e67c:	89ab      	ldrh	r3, [r5, #12]
 800e67e:	065b      	lsls	r3, r3, #25
 800e680:	f53f af2c 	bmi.w	800e4dc <_svfiprintf_r+0x28>
 800e684:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e686:	b01d      	add	sp, #116	; 0x74
 800e688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68c:	ab03      	add	r3, sp, #12
 800e68e:	9300      	str	r3, [sp, #0]
 800e690:	462a      	mov	r2, r5
 800e692:	4638      	mov	r0, r7
 800e694:	4b06      	ldr	r3, [pc, #24]	; (800e6b0 <_svfiprintf_r+0x1fc>)
 800e696:	a904      	add	r1, sp, #16
 800e698:	f7fe fa22 	bl	800cae0 <_printf_i>
 800e69c:	e7eb      	b.n	800e676 <_svfiprintf_r+0x1c2>
 800e69e:	bf00      	nop
 800e6a0:	0800f5b4 	.word	0x0800f5b4
 800e6a4:	0800f5ba 	.word	0x0800f5ba
 800e6a8:	0800f5be 	.word	0x0800f5be
 800e6ac:	0800c5a9 	.word	0x0800c5a9
 800e6b0:	0800e3fd 	.word	0x0800e3fd

0800e6b4 <__sfputc_r>:
 800e6b4:	6893      	ldr	r3, [r2, #8]
 800e6b6:	b410      	push	{r4}
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	6093      	str	r3, [r2, #8]
 800e6be:	da07      	bge.n	800e6d0 <__sfputc_r+0x1c>
 800e6c0:	6994      	ldr	r4, [r2, #24]
 800e6c2:	42a3      	cmp	r3, r4
 800e6c4:	db01      	blt.n	800e6ca <__sfputc_r+0x16>
 800e6c6:	290a      	cmp	r1, #10
 800e6c8:	d102      	bne.n	800e6d0 <__sfputc_r+0x1c>
 800e6ca:	bc10      	pop	{r4}
 800e6cc:	f000 b95a 	b.w	800e984 <__swbuf_r>
 800e6d0:	6813      	ldr	r3, [r2, #0]
 800e6d2:	1c58      	adds	r0, r3, #1
 800e6d4:	6010      	str	r0, [r2, #0]
 800e6d6:	7019      	strb	r1, [r3, #0]
 800e6d8:	4608      	mov	r0, r1
 800e6da:	bc10      	pop	{r4}
 800e6dc:	4770      	bx	lr

0800e6de <__sfputs_r>:
 800e6de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e0:	4606      	mov	r6, r0
 800e6e2:	460f      	mov	r7, r1
 800e6e4:	4614      	mov	r4, r2
 800e6e6:	18d5      	adds	r5, r2, r3
 800e6e8:	42ac      	cmp	r4, r5
 800e6ea:	d101      	bne.n	800e6f0 <__sfputs_r+0x12>
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	e007      	b.n	800e700 <__sfputs_r+0x22>
 800e6f0:	463a      	mov	r2, r7
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6f8:	f7ff ffdc 	bl	800e6b4 <__sfputc_r>
 800e6fc:	1c43      	adds	r3, r0, #1
 800e6fe:	d1f3      	bne.n	800e6e8 <__sfputs_r+0xa>
 800e700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e704 <_vfiprintf_r>:
 800e704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e708:	460d      	mov	r5, r1
 800e70a:	4614      	mov	r4, r2
 800e70c:	4698      	mov	r8, r3
 800e70e:	4606      	mov	r6, r0
 800e710:	b09d      	sub	sp, #116	; 0x74
 800e712:	b118      	cbz	r0, 800e71c <_vfiprintf_r+0x18>
 800e714:	6983      	ldr	r3, [r0, #24]
 800e716:	b90b      	cbnz	r3, 800e71c <_vfiprintf_r+0x18>
 800e718:	f000 fb20 	bl	800ed5c <__sinit>
 800e71c:	4b89      	ldr	r3, [pc, #548]	; (800e944 <_vfiprintf_r+0x240>)
 800e71e:	429d      	cmp	r5, r3
 800e720:	d11b      	bne.n	800e75a <_vfiprintf_r+0x56>
 800e722:	6875      	ldr	r5, [r6, #4]
 800e724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e726:	07d9      	lsls	r1, r3, #31
 800e728:	d405      	bmi.n	800e736 <_vfiprintf_r+0x32>
 800e72a:	89ab      	ldrh	r3, [r5, #12]
 800e72c:	059a      	lsls	r2, r3, #22
 800e72e:	d402      	bmi.n	800e736 <_vfiprintf_r+0x32>
 800e730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e732:	f000 fbb1 	bl	800ee98 <__retarget_lock_acquire_recursive>
 800e736:	89ab      	ldrh	r3, [r5, #12]
 800e738:	071b      	lsls	r3, r3, #28
 800e73a:	d501      	bpl.n	800e740 <_vfiprintf_r+0x3c>
 800e73c:	692b      	ldr	r3, [r5, #16]
 800e73e:	b9eb      	cbnz	r3, 800e77c <_vfiprintf_r+0x78>
 800e740:	4629      	mov	r1, r5
 800e742:	4630      	mov	r0, r6
 800e744:	f000 f97e 	bl	800ea44 <__swsetup_r>
 800e748:	b1c0      	cbz	r0, 800e77c <_vfiprintf_r+0x78>
 800e74a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e74c:	07dc      	lsls	r4, r3, #31
 800e74e:	d50e      	bpl.n	800e76e <_vfiprintf_r+0x6a>
 800e750:	f04f 30ff 	mov.w	r0, #4294967295
 800e754:	b01d      	add	sp, #116	; 0x74
 800e756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75a:	4b7b      	ldr	r3, [pc, #492]	; (800e948 <_vfiprintf_r+0x244>)
 800e75c:	429d      	cmp	r5, r3
 800e75e:	d101      	bne.n	800e764 <_vfiprintf_r+0x60>
 800e760:	68b5      	ldr	r5, [r6, #8]
 800e762:	e7df      	b.n	800e724 <_vfiprintf_r+0x20>
 800e764:	4b79      	ldr	r3, [pc, #484]	; (800e94c <_vfiprintf_r+0x248>)
 800e766:	429d      	cmp	r5, r3
 800e768:	bf08      	it	eq
 800e76a:	68f5      	ldreq	r5, [r6, #12]
 800e76c:	e7da      	b.n	800e724 <_vfiprintf_r+0x20>
 800e76e:	89ab      	ldrh	r3, [r5, #12]
 800e770:	0598      	lsls	r0, r3, #22
 800e772:	d4ed      	bmi.n	800e750 <_vfiprintf_r+0x4c>
 800e774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e776:	f000 fb90 	bl	800ee9a <__retarget_lock_release_recursive>
 800e77a:	e7e9      	b.n	800e750 <_vfiprintf_r+0x4c>
 800e77c:	2300      	movs	r3, #0
 800e77e:	9309      	str	r3, [sp, #36]	; 0x24
 800e780:	2320      	movs	r3, #32
 800e782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e786:	2330      	movs	r3, #48	; 0x30
 800e788:	f04f 0901 	mov.w	r9, #1
 800e78c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e790:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e950 <_vfiprintf_r+0x24c>
 800e794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e798:	4623      	mov	r3, r4
 800e79a:	469a      	mov	sl, r3
 800e79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7a0:	b10a      	cbz	r2, 800e7a6 <_vfiprintf_r+0xa2>
 800e7a2:	2a25      	cmp	r2, #37	; 0x25
 800e7a4:	d1f9      	bne.n	800e79a <_vfiprintf_r+0x96>
 800e7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800e7aa:	d00b      	beq.n	800e7c4 <_vfiprintf_r+0xc0>
 800e7ac:	465b      	mov	r3, fp
 800e7ae:	4622      	mov	r2, r4
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	f7ff ff93 	bl	800e6de <__sfputs_r>
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	f000 80aa 	beq.w	800e912 <_vfiprintf_r+0x20e>
 800e7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7c0:	445a      	add	r2, fp
 800e7c2:	9209      	str	r2, [sp, #36]	; 0x24
 800e7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	f000 80a2 	beq.w	800e912 <_vfiprintf_r+0x20e>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7d8:	f10a 0a01 	add.w	sl, sl, #1
 800e7dc:	9304      	str	r3, [sp, #16]
 800e7de:	9307      	str	r3, [sp, #28]
 800e7e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7e4:	931a      	str	r3, [sp, #104]	; 0x68
 800e7e6:	4654      	mov	r4, sl
 800e7e8:	2205      	movs	r2, #5
 800e7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ee:	4858      	ldr	r0, [pc, #352]	; (800e950 <_vfiprintf_r+0x24c>)
 800e7f0:	f7ff f984 	bl	800dafc <memchr>
 800e7f4:	9a04      	ldr	r2, [sp, #16]
 800e7f6:	b9d8      	cbnz	r0, 800e830 <_vfiprintf_r+0x12c>
 800e7f8:	06d1      	lsls	r1, r2, #27
 800e7fa:	bf44      	itt	mi
 800e7fc:	2320      	movmi	r3, #32
 800e7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e802:	0713      	lsls	r3, r2, #28
 800e804:	bf44      	itt	mi
 800e806:	232b      	movmi	r3, #43	; 0x2b
 800e808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e80c:	f89a 3000 	ldrb.w	r3, [sl]
 800e810:	2b2a      	cmp	r3, #42	; 0x2a
 800e812:	d015      	beq.n	800e840 <_vfiprintf_r+0x13c>
 800e814:	4654      	mov	r4, sl
 800e816:	2000      	movs	r0, #0
 800e818:	f04f 0c0a 	mov.w	ip, #10
 800e81c:	9a07      	ldr	r2, [sp, #28]
 800e81e:	4621      	mov	r1, r4
 800e820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e824:	3b30      	subs	r3, #48	; 0x30
 800e826:	2b09      	cmp	r3, #9
 800e828:	d94e      	bls.n	800e8c8 <_vfiprintf_r+0x1c4>
 800e82a:	b1b0      	cbz	r0, 800e85a <_vfiprintf_r+0x156>
 800e82c:	9207      	str	r2, [sp, #28]
 800e82e:	e014      	b.n	800e85a <_vfiprintf_r+0x156>
 800e830:	eba0 0308 	sub.w	r3, r0, r8
 800e834:	fa09 f303 	lsl.w	r3, r9, r3
 800e838:	4313      	orrs	r3, r2
 800e83a:	46a2      	mov	sl, r4
 800e83c:	9304      	str	r3, [sp, #16]
 800e83e:	e7d2      	b.n	800e7e6 <_vfiprintf_r+0xe2>
 800e840:	9b03      	ldr	r3, [sp, #12]
 800e842:	1d19      	adds	r1, r3, #4
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	9103      	str	r1, [sp, #12]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	bfbb      	ittet	lt
 800e84c:	425b      	neglt	r3, r3
 800e84e:	f042 0202 	orrlt.w	r2, r2, #2
 800e852:	9307      	strge	r3, [sp, #28]
 800e854:	9307      	strlt	r3, [sp, #28]
 800e856:	bfb8      	it	lt
 800e858:	9204      	strlt	r2, [sp, #16]
 800e85a:	7823      	ldrb	r3, [r4, #0]
 800e85c:	2b2e      	cmp	r3, #46	; 0x2e
 800e85e:	d10c      	bne.n	800e87a <_vfiprintf_r+0x176>
 800e860:	7863      	ldrb	r3, [r4, #1]
 800e862:	2b2a      	cmp	r3, #42	; 0x2a
 800e864:	d135      	bne.n	800e8d2 <_vfiprintf_r+0x1ce>
 800e866:	9b03      	ldr	r3, [sp, #12]
 800e868:	3402      	adds	r4, #2
 800e86a:	1d1a      	adds	r2, r3, #4
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	9203      	str	r2, [sp, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	bfb8      	it	lt
 800e874:	f04f 33ff 	movlt.w	r3, #4294967295
 800e878:	9305      	str	r3, [sp, #20]
 800e87a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e954 <_vfiprintf_r+0x250>
 800e87e:	2203      	movs	r2, #3
 800e880:	4650      	mov	r0, sl
 800e882:	7821      	ldrb	r1, [r4, #0]
 800e884:	f7ff f93a 	bl	800dafc <memchr>
 800e888:	b140      	cbz	r0, 800e89c <_vfiprintf_r+0x198>
 800e88a:	2340      	movs	r3, #64	; 0x40
 800e88c:	eba0 000a 	sub.w	r0, r0, sl
 800e890:	fa03 f000 	lsl.w	r0, r3, r0
 800e894:	9b04      	ldr	r3, [sp, #16]
 800e896:	3401      	adds	r4, #1
 800e898:	4303      	orrs	r3, r0
 800e89a:	9304      	str	r3, [sp, #16]
 800e89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8a0:	2206      	movs	r2, #6
 800e8a2:	482d      	ldr	r0, [pc, #180]	; (800e958 <_vfiprintf_r+0x254>)
 800e8a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8a8:	f7ff f928 	bl	800dafc <memchr>
 800e8ac:	2800      	cmp	r0, #0
 800e8ae:	d03f      	beq.n	800e930 <_vfiprintf_r+0x22c>
 800e8b0:	4b2a      	ldr	r3, [pc, #168]	; (800e95c <_vfiprintf_r+0x258>)
 800e8b2:	bb1b      	cbnz	r3, 800e8fc <_vfiprintf_r+0x1f8>
 800e8b4:	9b03      	ldr	r3, [sp, #12]
 800e8b6:	3307      	adds	r3, #7
 800e8b8:	f023 0307 	bic.w	r3, r3, #7
 800e8bc:	3308      	adds	r3, #8
 800e8be:	9303      	str	r3, [sp, #12]
 800e8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8c2:	443b      	add	r3, r7
 800e8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c6:	e767      	b.n	800e798 <_vfiprintf_r+0x94>
 800e8c8:	460c      	mov	r4, r1
 800e8ca:	2001      	movs	r0, #1
 800e8cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8d0:	e7a5      	b.n	800e81e <_vfiprintf_r+0x11a>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	f04f 0c0a 	mov.w	ip, #10
 800e8d8:	4619      	mov	r1, r3
 800e8da:	3401      	adds	r4, #1
 800e8dc:	9305      	str	r3, [sp, #20]
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8e4:	3a30      	subs	r2, #48	; 0x30
 800e8e6:	2a09      	cmp	r2, #9
 800e8e8:	d903      	bls.n	800e8f2 <_vfiprintf_r+0x1ee>
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d0c5      	beq.n	800e87a <_vfiprintf_r+0x176>
 800e8ee:	9105      	str	r1, [sp, #20]
 800e8f0:	e7c3      	b.n	800e87a <_vfiprintf_r+0x176>
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8fa:	e7f0      	b.n	800e8de <_vfiprintf_r+0x1da>
 800e8fc:	ab03      	add	r3, sp, #12
 800e8fe:	9300      	str	r3, [sp, #0]
 800e900:	462a      	mov	r2, r5
 800e902:	4630      	mov	r0, r6
 800e904:	4b16      	ldr	r3, [pc, #88]	; (800e960 <_vfiprintf_r+0x25c>)
 800e906:	a904      	add	r1, sp, #16
 800e908:	f7fd fe4e 	bl	800c5a8 <_printf_float>
 800e90c:	4607      	mov	r7, r0
 800e90e:	1c78      	adds	r0, r7, #1
 800e910:	d1d6      	bne.n	800e8c0 <_vfiprintf_r+0x1bc>
 800e912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e914:	07d9      	lsls	r1, r3, #31
 800e916:	d405      	bmi.n	800e924 <_vfiprintf_r+0x220>
 800e918:	89ab      	ldrh	r3, [r5, #12]
 800e91a:	059a      	lsls	r2, r3, #22
 800e91c:	d402      	bmi.n	800e924 <_vfiprintf_r+0x220>
 800e91e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e920:	f000 fabb 	bl	800ee9a <__retarget_lock_release_recursive>
 800e924:	89ab      	ldrh	r3, [r5, #12]
 800e926:	065b      	lsls	r3, r3, #25
 800e928:	f53f af12 	bmi.w	800e750 <_vfiprintf_r+0x4c>
 800e92c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e92e:	e711      	b.n	800e754 <_vfiprintf_r+0x50>
 800e930:	ab03      	add	r3, sp, #12
 800e932:	9300      	str	r3, [sp, #0]
 800e934:	462a      	mov	r2, r5
 800e936:	4630      	mov	r0, r6
 800e938:	4b09      	ldr	r3, [pc, #36]	; (800e960 <_vfiprintf_r+0x25c>)
 800e93a:	a904      	add	r1, sp, #16
 800e93c:	f7fe f8d0 	bl	800cae0 <_printf_i>
 800e940:	e7e4      	b.n	800e90c <_vfiprintf_r+0x208>
 800e942:	bf00      	nop
 800e944:	0800f6e8 	.word	0x0800f6e8
 800e948:	0800f708 	.word	0x0800f708
 800e94c:	0800f6c8 	.word	0x0800f6c8
 800e950:	0800f5b4 	.word	0x0800f5b4
 800e954:	0800f5ba 	.word	0x0800f5ba
 800e958:	0800f5be 	.word	0x0800f5be
 800e95c:	0800c5a9 	.word	0x0800c5a9
 800e960:	0800e6df 	.word	0x0800e6df

0800e964 <_sbrk_r>:
 800e964:	b538      	push	{r3, r4, r5, lr}
 800e966:	2300      	movs	r3, #0
 800e968:	4d05      	ldr	r5, [pc, #20]	; (800e980 <_sbrk_r+0x1c>)
 800e96a:	4604      	mov	r4, r0
 800e96c:	4608      	mov	r0, r1
 800e96e:	602b      	str	r3, [r5, #0]
 800e970:	f7f4 f8a4 	bl	8002abc <_sbrk>
 800e974:	1c43      	adds	r3, r0, #1
 800e976:	d102      	bne.n	800e97e <_sbrk_r+0x1a>
 800e978:	682b      	ldr	r3, [r5, #0]
 800e97a:	b103      	cbz	r3, 800e97e <_sbrk_r+0x1a>
 800e97c:	6023      	str	r3, [r4, #0]
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	200014bc 	.word	0x200014bc

0800e984 <__swbuf_r>:
 800e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e986:	460e      	mov	r6, r1
 800e988:	4614      	mov	r4, r2
 800e98a:	4605      	mov	r5, r0
 800e98c:	b118      	cbz	r0, 800e996 <__swbuf_r+0x12>
 800e98e:	6983      	ldr	r3, [r0, #24]
 800e990:	b90b      	cbnz	r3, 800e996 <__swbuf_r+0x12>
 800e992:	f000 f9e3 	bl	800ed5c <__sinit>
 800e996:	4b21      	ldr	r3, [pc, #132]	; (800ea1c <__swbuf_r+0x98>)
 800e998:	429c      	cmp	r4, r3
 800e99a:	d12b      	bne.n	800e9f4 <__swbuf_r+0x70>
 800e99c:	686c      	ldr	r4, [r5, #4]
 800e99e:	69a3      	ldr	r3, [r4, #24]
 800e9a0:	60a3      	str	r3, [r4, #8]
 800e9a2:	89a3      	ldrh	r3, [r4, #12]
 800e9a4:	071a      	lsls	r2, r3, #28
 800e9a6:	d52f      	bpl.n	800ea08 <__swbuf_r+0x84>
 800e9a8:	6923      	ldr	r3, [r4, #16]
 800e9aa:	b36b      	cbz	r3, 800ea08 <__swbuf_r+0x84>
 800e9ac:	6923      	ldr	r3, [r4, #16]
 800e9ae:	6820      	ldr	r0, [r4, #0]
 800e9b0:	b2f6      	uxtb	r6, r6
 800e9b2:	1ac0      	subs	r0, r0, r3
 800e9b4:	6963      	ldr	r3, [r4, #20]
 800e9b6:	4637      	mov	r7, r6
 800e9b8:	4283      	cmp	r3, r0
 800e9ba:	dc04      	bgt.n	800e9c6 <__swbuf_r+0x42>
 800e9bc:	4621      	mov	r1, r4
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f000 f938 	bl	800ec34 <_fflush_r>
 800e9c4:	bb30      	cbnz	r0, 800ea14 <__swbuf_r+0x90>
 800e9c6:	68a3      	ldr	r3, [r4, #8]
 800e9c8:	3001      	adds	r0, #1
 800e9ca:	3b01      	subs	r3, #1
 800e9cc:	60a3      	str	r3, [r4, #8]
 800e9ce:	6823      	ldr	r3, [r4, #0]
 800e9d0:	1c5a      	adds	r2, r3, #1
 800e9d2:	6022      	str	r2, [r4, #0]
 800e9d4:	701e      	strb	r6, [r3, #0]
 800e9d6:	6963      	ldr	r3, [r4, #20]
 800e9d8:	4283      	cmp	r3, r0
 800e9da:	d004      	beq.n	800e9e6 <__swbuf_r+0x62>
 800e9dc:	89a3      	ldrh	r3, [r4, #12]
 800e9de:	07db      	lsls	r3, r3, #31
 800e9e0:	d506      	bpl.n	800e9f0 <__swbuf_r+0x6c>
 800e9e2:	2e0a      	cmp	r6, #10
 800e9e4:	d104      	bne.n	800e9f0 <__swbuf_r+0x6c>
 800e9e6:	4621      	mov	r1, r4
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	f000 f923 	bl	800ec34 <_fflush_r>
 800e9ee:	b988      	cbnz	r0, 800ea14 <__swbuf_r+0x90>
 800e9f0:	4638      	mov	r0, r7
 800e9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ea20 <__swbuf_r+0x9c>)
 800e9f6:	429c      	cmp	r4, r3
 800e9f8:	d101      	bne.n	800e9fe <__swbuf_r+0x7a>
 800e9fa:	68ac      	ldr	r4, [r5, #8]
 800e9fc:	e7cf      	b.n	800e99e <__swbuf_r+0x1a>
 800e9fe:	4b09      	ldr	r3, [pc, #36]	; (800ea24 <__swbuf_r+0xa0>)
 800ea00:	429c      	cmp	r4, r3
 800ea02:	bf08      	it	eq
 800ea04:	68ec      	ldreq	r4, [r5, #12]
 800ea06:	e7ca      	b.n	800e99e <__swbuf_r+0x1a>
 800ea08:	4621      	mov	r1, r4
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	f000 f81a 	bl	800ea44 <__swsetup_r>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d0cb      	beq.n	800e9ac <__swbuf_r+0x28>
 800ea14:	f04f 37ff 	mov.w	r7, #4294967295
 800ea18:	e7ea      	b.n	800e9f0 <__swbuf_r+0x6c>
 800ea1a:	bf00      	nop
 800ea1c:	0800f6e8 	.word	0x0800f6e8
 800ea20:	0800f708 	.word	0x0800f708
 800ea24:	0800f6c8 	.word	0x0800f6c8

0800ea28 <__ascii_wctomb>:
 800ea28:	4603      	mov	r3, r0
 800ea2a:	4608      	mov	r0, r1
 800ea2c:	b141      	cbz	r1, 800ea40 <__ascii_wctomb+0x18>
 800ea2e:	2aff      	cmp	r2, #255	; 0xff
 800ea30:	d904      	bls.n	800ea3c <__ascii_wctomb+0x14>
 800ea32:	228a      	movs	r2, #138	; 0x8a
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295
 800ea38:	601a      	str	r2, [r3, #0]
 800ea3a:	4770      	bx	lr
 800ea3c:	2001      	movs	r0, #1
 800ea3e:	700a      	strb	r2, [r1, #0]
 800ea40:	4770      	bx	lr
	...

0800ea44 <__swsetup_r>:
 800ea44:	4b32      	ldr	r3, [pc, #200]	; (800eb10 <__swsetup_r+0xcc>)
 800ea46:	b570      	push	{r4, r5, r6, lr}
 800ea48:	681d      	ldr	r5, [r3, #0]
 800ea4a:	4606      	mov	r6, r0
 800ea4c:	460c      	mov	r4, r1
 800ea4e:	b125      	cbz	r5, 800ea5a <__swsetup_r+0x16>
 800ea50:	69ab      	ldr	r3, [r5, #24]
 800ea52:	b913      	cbnz	r3, 800ea5a <__swsetup_r+0x16>
 800ea54:	4628      	mov	r0, r5
 800ea56:	f000 f981 	bl	800ed5c <__sinit>
 800ea5a:	4b2e      	ldr	r3, [pc, #184]	; (800eb14 <__swsetup_r+0xd0>)
 800ea5c:	429c      	cmp	r4, r3
 800ea5e:	d10f      	bne.n	800ea80 <__swsetup_r+0x3c>
 800ea60:	686c      	ldr	r4, [r5, #4]
 800ea62:	89a3      	ldrh	r3, [r4, #12]
 800ea64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea68:	0719      	lsls	r1, r3, #28
 800ea6a:	d42c      	bmi.n	800eac6 <__swsetup_r+0x82>
 800ea6c:	06dd      	lsls	r5, r3, #27
 800ea6e:	d411      	bmi.n	800ea94 <__swsetup_r+0x50>
 800ea70:	2309      	movs	r3, #9
 800ea72:	6033      	str	r3, [r6, #0]
 800ea74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea78:	f04f 30ff 	mov.w	r0, #4294967295
 800ea7c:	81a3      	strh	r3, [r4, #12]
 800ea7e:	e03e      	b.n	800eafe <__swsetup_r+0xba>
 800ea80:	4b25      	ldr	r3, [pc, #148]	; (800eb18 <__swsetup_r+0xd4>)
 800ea82:	429c      	cmp	r4, r3
 800ea84:	d101      	bne.n	800ea8a <__swsetup_r+0x46>
 800ea86:	68ac      	ldr	r4, [r5, #8]
 800ea88:	e7eb      	b.n	800ea62 <__swsetup_r+0x1e>
 800ea8a:	4b24      	ldr	r3, [pc, #144]	; (800eb1c <__swsetup_r+0xd8>)
 800ea8c:	429c      	cmp	r4, r3
 800ea8e:	bf08      	it	eq
 800ea90:	68ec      	ldreq	r4, [r5, #12]
 800ea92:	e7e6      	b.n	800ea62 <__swsetup_r+0x1e>
 800ea94:	0758      	lsls	r0, r3, #29
 800ea96:	d512      	bpl.n	800eabe <__swsetup_r+0x7a>
 800ea98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea9a:	b141      	cbz	r1, 800eaae <__swsetup_r+0x6a>
 800ea9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eaa0:	4299      	cmp	r1, r3
 800eaa2:	d002      	beq.n	800eaaa <__swsetup_r+0x66>
 800eaa4:	4630      	mov	r0, r6
 800eaa6:	f7ff fbcd 	bl	800e244 <_free_r>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	6363      	str	r3, [r4, #52]	; 0x34
 800eaae:	89a3      	ldrh	r3, [r4, #12]
 800eab0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eab4:	81a3      	strh	r3, [r4, #12]
 800eab6:	2300      	movs	r3, #0
 800eab8:	6063      	str	r3, [r4, #4]
 800eaba:	6923      	ldr	r3, [r4, #16]
 800eabc:	6023      	str	r3, [r4, #0]
 800eabe:	89a3      	ldrh	r3, [r4, #12]
 800eac0:	f043 0308 	orr.w	r3, r3, #8
 800eac4:	81a3      	strh	r3, [r4, #12]
 800eac6:	6923      	ldr	r3, [r4, #16]
 800eac8:	b94b      	cbnz	r3, 800eade <__swsetup_r+0x9a>
 800eaca:	89a3      	ldrh	r3, [r4, #12]
 800eacc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ead0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ead4:	d003      	beq.n	800eade <__swsetup_r+0x9a>
 800ead6:	4621      	mov	r1, r4
 800ead8:	4630      	mov	r0, r6
 800eada:	f000 fa05 	bl	800eee8 <__smakebuf_r>
 800eade:	89a0      	ldrh	r0, [r4, #12]
 800eae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eae4:	f010 0301 	ands.w	r3, r0, #1
 800eae8:	d00a      	beq.n	800eb00 <__swsetup_r+0xbc>
 800eaea:	2300      	movs	r3, #0
 800eaec:	60a3      	str	r3, [r4, #8]
 800eaee:	6963      	ldr	r3, [r4, #20]
 800eaf0:	425b      	negs	r3, r3
 800eaf2:	61a3      	str	r3, [r4, #24]
 800eaf4:	6923      	ldr	r3, [r4, #16]
 800eaf6:	b943      	cbnz	r3, 800eb0a <__swsetup_r+0xc6>
 800eaf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eafc:	d1ba      	bne.n	800ea74 <__swsetup_r+0x30>
 800eafe:	bd70      	pop	{r4, r5, r6, pc}
 800eb00:	0781      	lsls	r1, r0, #30
 800eb02:	bf58      	it	pl
 800eb04:	6963      	ldrpl	r3, [r4, #20]
 800eb06:	60a3      	str	r3, [r4, #8]
 800eb08:	e7f4      	b.n	800eaf4 <__swsetup_r+0xb0>
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	e7f7      	b.n	800eafe <__swsetup_r+0xba>
 800eb0e:	bf00      	nop
 800eb10:	200004c0 	.word	0x200004c0
 800eb14:	0800f6e8 	.word	0x0800f6e8
 800eb18:	0800f708 	.word	0x0800f708
 800eb1c:	0800f6c8 	.word	0x0800f6c8

0800eb20 <abort>:
 800eb20:	2006      	movs	r0, #6
 800eb22:	b508      	push	{r3, lr}
 800eb24:	f000 fa9e 	bl	800f064 <raise>
 800eb28:	2001      	movs	r0, #1
 800eb2a:	f7f3 ff54 	bl	80029d6 <_exit>
	...

0800eb30 <__sflush_r>:
 800eb30:	898a      	ldrh	r2, [r1, #12]
 800eb32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb34:	4605      	mov	r5, r0
 800eb36:	0710      	lsls	r0, r2, #28
 800eb38:	460c      	mov	r4, r1
 800eb3a:	d457      	bmi.n	800ebec <__sflush_r+0xbc>
 800eb3c:	684b      	ldr	r3, [r1, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	dc04      	bgt.n	800eb4c <__sflush_r+0x1c>
 800eb42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	dc01      	bgt.n	800eb4c <__sflush_r+0x1c>
 800eb48:	2000      	movs	r0, #0
 800eb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb4e:	2e00      	cmp	r6, #0
 800eb50:	d0fa      	beq.n	800eb48 <__sflush_r+0x18>
 800eb52:	2300      	movs	r3, #0
 800eb54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb58:	682f      	ldr	r7, [r5, #0]
 800eb5a:	602b      	str	r3, [r5, #0]
 800eb5c:	d032      	beq.n	800ebc4 <__sflush_r+0x94>
 800eb5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb60:	89a3      	ldrh	r3, [r4, #12]
 800eb62:	075a      	lsls	r2, r3, #29
 800eb64:	d505      	bpl.n	800eb72 <__sflush_r+0x42>
 800eb66:	6863      	ldr	r3, [r4, #4]
 800eb68:	1ac0      	subs	r0, r0, r3
 800eb6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb6c:	b10b      	cbz	r3, 800eb72 <__sflush_r+0x42>
 800eb6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb70:	1ac0      	subs	r0, r0, r3
 800eb72:	2300      	movs	r3, #0
 800eb74:	4602      	mov	r2, r0
 800eb76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb78:	4628      	mov	r0, r5
 800eb7a:	6a21      	ldr	r1, [r4, #32]
 800eb7c:	47b0      	blx	r6
 800eb7e:	1c43      	adds	r3, r0, #1
 800eb80:	89a3      	ldrh	r3, [r4, #12]
 800eb82:	d106      	bne.n	800eb92 <__sflush_r+0x62>
 800eb84:	6829      	ldr	r1, [r5, #0]
 800eb86:	291d      	cmp	r1, #29
 800eb88:	d82c      	bhi.n	800ebe4 <__sflush_r+0xb4>
 800eb8a:	4a29      	ldr	r2, [pc, #164]	; (800ec30 <__sflush_r+0x100>)
 800eb8c:	40ca      	lsrs	r2, r1
 800eb8e:	07d6      	lsls	r6, r2, #31
 800eb90:	d528      	bpl.n	800ebe4 <__sflush_r+0xb4>
 800eb92:	2200      	movs	r2, #0
 800eb94:	6062      	str	r2, [r4, #4]
 800eb96:	6922      	ldr	r2, [r4, #16]
 800eb98:	04d9      	lsls	r1, r3, #19
 800eb9a:	6022      	str	r2, [r4, #0]
 800eb9c:	d504      	bpl.n	800eba8 <__sflush_r+0x78>
 800eb9e:	1c42      	adds	r2, r0, #1
 800eba0:	d101      	bne.n	800eba6 <__sflush_r+0x76>
 800eba2:	682b      	ldr	r3, [r5, #0]
 800eba4:	b903      	cbnz	r3, 800eba8 <__sflush_r+0x78>
 800eba6:	6560      	str	r0, [r4, #84]	; 0x54
 800eba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebaa:	602f      	str	r7, [r5, #0]
 800ebac:	2900      	cmp	r1, #0
 800ebae:	d0cb      	beq.n	800eb48 <__sflush_r+0x18>
 800ebb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebb4:	4299      	cmp	r1, r3
 800ebb6:	d002      	beq.n	800ebbe <__sflush_r+0x8e>
 800ebb8:	4628      	mov	r0, r5
 800ebba:	f7ff fb43 	bl	800e244 <_free_r>
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	6360      	str	r0, [r4, #52]	; 0x34
 800ebc2:	e7c2      	b.n	800eb4a <__sflush_r+0x1a>
 800ebc4:	6a21      	ldr	r1, [r4, #32]
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	4628      	mov	r0, r5
 800ebca:	47b0      	blx	r6
 800ebcc:	1c41      	adds	r1, r0, #1
 800ebce:	d1c7      	bne.n	800eb60 <__sflush_r+0x30>
 800ebd0:	682b      	ldr	r3, [r5, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d0c4      	beq.n	800eb60 <__sflush_r+0x30>
 800ebd6:	2b1d      	cmp	r3, #29
 800ebd8:	d001      	beq.n	800ebde <__sflush_r+0xae>
 800ebda:	2b16      	cmp	r3, #22
 800ebdc:	d101      	bne.n	800ebe2 <__sflush_r+0xb2>
 800ebde:	602f      	str	r7, [r5, #0]
 800ebe0:	e7b2      	b.n	800eb48 <__sflush_r+0x18>
 800ebe2:	89a3      	ldrh	r3, [r4, #12]
 800ebe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebe8:	81a3      	strh	r3, [r4, #12]
 800ebea:	e7ae      	b.n	800eb4a <__sflush_r+0x1a>
 800ebec:	690f      	ldr	r7, [r1, #16]
 800ebee:	2f00      	cmp	r7, #0
 800ebf0:	d0aa      	beq.n	800eb48 <__sflush_r+0x18>
 800ebf2:	0793      	lsls	r3, r2, #30
 800ebf4:	bf18      	it	ne
 800ebf6:	2300      	movne	r3, #0
 800ebf8:	680e      	ldr	r6, [r1, #0]
 800ebfa:	bf08      	it	eq
 800ebfc:	694b      	ldreq	r3, [r1, #20]
 800ebfe:	1bf6      	subs	r6, r6, r7
 800ec00:	600f      	str	r7, [r1, #0]
 800ec02:	608b      	str	r3, [r1, #8]
 800ec04:	2e00      	cmp	r6, #0
 800ec06:	dd9f      	ble.n	800eb48 <__sflush_r+0x18>
 800ec08:	4633      	mov	r3, r6
 800ec0a:	463a      	mov	r2, r7
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	6a21      	ldr	r1, [r4, #32]
 800ec10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ec14:	47e0      	blx	ip
 800ec16:	2800      	cmp	r0, #0
 800ec18:	dc06      	bgt.n	800ec28 <__sflush_r+0xf8>
 800ec1a:	89a3      	ldrh	r3, [r4, #12]
 800ec1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec24:	81a3      	strh	r3, [r4, #12]
 800ec26:	e790      	b.n	800eb4a <__sflush_r+0x1a>
 800ec28:	4407      	add	r7, r0
 800ec2a:	1a36      	subs	r6, r6, r0
 800ec2c:	e7ea      	b.n	800ec04 <__sflush_r+0xd4>
 800ec2e:	bf00      	nop
 800ec30:	20400001 	.word	0x20400001

0800ec34 <_fflush_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	690b      	ldr	r3, [r1, #16]
 800ec38:	4605      	mov	r5, r0
 800ec3a:	460c      	mov	r4, r1
 800ec3c:	b913      	cbnz	r3, 800ec44 <_fflush_r+0x10>
 800ec3e:	2500      	movs	r5, #0
 800ec40:	4628      	mov	r0, r5
 800ec42:	bd38      	pop	{r3, r4, r5, pc}
 800ec44:	b118      	cbz	r0, 800ec4e <_fflush_r+0x1a>
 800ec46:	6983      	ldr	r3, [r0, #24]
 800ec48:	b90b      	cbnz	r3, 800ec4e <_fflush_r+0x1a>
 800ec4a:	f000 f887 	bl	800ed5c <__sinit>
 800ec4e:	4b14      	ldr	r3, [pc, #80]	; (800eca0 <_fflush_r+0x6c>)
 800ec50:	429c      	cmp	r4, r3
 800ec52:	d11b      	bne.n	800ec8c <_fflush_r+0x58>
 800ec54:	686c      	ldr	r4, [r5, #4]
 800ec56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d0ef      	beq.n	800ec3e <_fflush_r+0xa>
 800ec5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec60:	07d0      	lsls	r0, r2, #31
 800ec62:	d404      	bmi.n	800ec6e <_fflush_r+0x3a>
 800ec64:	0599      	lsls	r1, r3, #22
 800ec66:	d402      	bmi.n	800ec6e <_fflush_r+0x3a>
 800ec68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec6a:	f000 f915 	bl	800ee98 <__retarget_lock_acquire_recursive>
 800ec6e:	4628      	mov	r0, r5
 800ec70:	4621      	mov	r1, r4
 800ec72:	f7ff ff5d 	bl	800eb30 <__sflush_r>
 800ec76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec78:	4605      	mov	r5, r0
 800ec7a:	07da      	lsls	r2, r3, #31
 800ec7c:	d4e0      	bmi.n	800ec40 <_fflush_r+0xc>
 800ec7e:	89a3      	ldrh	r3, [r4, #12]
 800ec80:	059b      	lsls	r3, r3, #22
 800ec82:	d4dd      	bmi.n	800ec40 <_fflush_r+0xc>
 800ec84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec86:	f000 f908 	bl	800ee9a <__retarget_lock_release_recursive>
 800ec8a:	e7d9      	b.n	800ec40 <_fflush_r+0xc>
 800ec8c:	4b05      	ldr	r3, [pc, #20]	; (800eca4 <_fflush_r+0x70>)
 800ec8e:	429c      	cmp	r4, r3
 800ec90:	d101      	bne.n	800ec96 <_fflush_r+0x62>
 800ec92:	68ac      	ldr	r4, [r5, #8]
 800ec94:	e7df      	b.n	800ec56 <_fflush_r+0x22>
 800ec96:	4b04      	ldr	r3, [pc, #16]	; (800eca8 <_fflush_r+0x74>)
 800ec98:	429c      	cmp	r4, r3
 800ec9a:	bf08      	it	eq
 800ec9c:	68ec      	ldreq	r4, [r5, #12]
 800ec9e:	e7da      	b.n	800ec56 <_fflush_r+0x22>
 800eca0:	0800f6e8 	.word	0x0800f6e8
 800eca4:	0800f708 	.word	0x0800f708
 800eca8:	0800f6c8 	.word	0x0800f6c8

0800ecac <std>:
 800ecac:	2300      	movs	r3, #0
 800ecae:	b510      	push	{r4, lr}
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	e9c0 3300 	strd	r3, r3, [r0]
 800ecb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecba:	6083      	str	r3, [r0, #8]
 800ecbc:	8181      	strh	r1, [r0, #12]
 800ecbe:	6643      	str	r3, [r0, #100]	; 0x64
 800ecc0:	81c2      	strh	r2, [r0, #14]
 800ecc2:	6183      	str	r3, [r0, #24]
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	2208      	movs	r2, #8
 800ecc8:	305c      	adds	r0, #92	; 0x5c
 800ecca:	f7fd fbc7 	bl	800c45c <memset>
 800ecce:	4b05      	ldr	r3, [pc, #20]	; (800ece4 <std+0x38>)
 800ecd0:	6224      	str	r4, [r4, #32]
 800ecd2:	6263      	str	r3, [r4, #36]	; 0x24
 800ecd4:	4b04      	ldr	r3, [pc, #16]	; (800ece8 <std+0x3c>)
 800ecd6:	62a3      	str	r3, [r4, #40]	; 0x28
 800ecd8:	4b04      	ldr	r3, [pc, #16]	; (800ecec <std+0x40>)
 800ecda:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ecdc:	4b04      	ldr	r3, [pc, #16]	; (800ecf0 <std+0x44>)
 800ecde:	6323      	str	r3, [r4, #48]	; 0x30
 800ece0:	bd10      	pop	{r4, pc}
 800ece2:	bf00      	nop
 800ece4:	0800f09d 	.word	0x0800f09d
 800ece8:	0800f0bf 	.word	0x0800f0bf
 800ecec:	0800f0f7 	.word	0x0800f0f7
 800ecf0:	0800f11b 	.word	0x0800f11b

0800ecf4 <_cleanup_r>:
 800ecf4:	4901      	ldr	r1, [pc, #4]	; (800ecfc <_cleanup_r+0x8>)
 800ecf6:	f000 b8af 	b.w	800ee58 <_fwalk_reent>
 800ecfa:	bf00      	nop
 800ecfc:	0800ec35 	.word	0x0800ec35

0800ed00 <__sfmoreglue>:
 800ed00:	2268      	movs	r2, #104	; 0x68
 800ed02:	b570      	push	{r4, r5, r6, lr}
 800ed04:	1e4d      	subs	r5, r1, #1
 800ed06:	4355      	muls	r5, r2
 800ed08:	460e      	mov	r6, r1
 800ed0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed0e:	f7ff fb01 	bl	800e314 <_malloc_r>
 800ed12:	4604      	mov	r4, r0
 800ed14:	b140      	cbz	r0, 800ed28 <__sfmoreglue+0x28>
 800ed16:	2100      	movs	r1, #0
 800ed18:	e9c0 1600 	strd	r1, r6, [r0]
 800ed1c:	300c      	adds	r0, #12
 800ed1e:	60a0      	str	r0, [r4, #8]
 800ed20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed24:	f7fd fb9a 	bl	800c45c <memset>
 800ed28:	4620      	mov	r0, r4
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}

0800ed2c <__sfp_lock_acquire>:
 800ed2c:	4801      	ldr	r0, [pc, #4]	; (800ed34 <__sfp_lock_acquire+0x8>)
 800ed2e:	f000 b8b3 	b.w	800ee98 <__retarget_lock_acquire_recursive>
 800ed32:	bf00      	nop
 800ed34:	200014b9 	.word	0x200014b9

0800ed38 <__sfp_lock_release>:
 800ed38:	4801      	ldr	r0, [pc, #4]	; (800ed40 <__sfp_lock_release+0x8>)
 800ed3a:	f000 b8ae 	b.w	800ee9a <__retarget_lock_release_recursive>
 800ed3e:	bf00      	nop
 800ed40:	200014b9 	.word	0x200014b9

0800ed44 <__sinit_lock_acquire>:
 800ed44:	4801      	ldr	r0, [pc, #4]	; (800ed4c <__sinit_lock_acquire+0x8>)
 800ed46:	f000 b8a7 	b.w	800ee98 <__retarget_lock_acquire_recursive>
 800ed4a:	bf00      	nop
 800ed4c:	200014ba 	.word	0x200014ba

0800ed50 <__sinit_lock_release>:
 800ed50:	4801      	ldr	r0, [pc, #4]	; (800ed58 <__sinit_lock_release+0x8>)
 800ed52:	f000 b8a2 	b.w	800ee9a <__retarget_lock_release_recursive>
 800ed56:	bf00      	nop
 800ed58:	200014ba 	.word	0x200014ba

0800ed5c <__sinit>:
 800ed5c:	b510      	push	{r4, lr}
 800ed5e:	4604      	mov	r4, r0
 800ed60:	f7ff fff0 	bl	800ed44 <__sinit_lock_acquire>
 800ed64:	69a3      	ldr	r3, [r4, #24]
 800ed66:	b11b      	cbz	r3, 800ed70 <__sinit+0x14>
 800ed68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed6c:	f7ff bff0 	b.w	800ed50 <__sinit_lock_release>
 800ed70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ed74:	6523      	str	r3, [r4, #80]	; 0x50
 800ed76:	4b13      	ldr	r3, [pc, #76]	; (800edc4 <__sinit+0x68>)
 800ed78:	4a13      	ldr	r2, [pc, #76]	; (800edc8 <__sinit+0x6c>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed7e:	42a3      	cmp	r3, r4
 800ed80:	bf08      	it	eq
 800ed82:	2301      	moveq	r3, #1
 800ed84:	4620      	mov	r0, r4
 800ed86:	bf08      	it	eq
 800ed88:	61a3      	streq	r3, [r4, #24]
 800ed8a:	f000 f81f 	bl	800edcc <__sfp>
 800ed8e:	6060      	str	r0, [r4, #4]
 800ed90:	4620      	mov	r0, r4
 800ed92:	f000 f81b 	bl	800edcc <__sfp>
 800ed96:	60a0      	str	r0, [r4, #8]
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f000 f817 	bl	800edcc <__sfp>
 800ed9e:	2200      	movs	r2, #0
 800eda0:	2104      	movs	r1, #4
 800eda2:	60e0      	str	r0, [r4, #12]
 800eda4:	6860      	ldr	r0, [r4, #4]
 800eda6:	f7ff ff81 	bl	800ecac <std>
 800edaa:	2201      	movs	r2, #1
 800edac:	2109      	movs	r1, #9
 800edae:	68a0      	ldr	r0, [r4, #8]
 800edb0:	f7ff ff7c 	bl	800ecac <std>
 800edb4:	2202      	movs	r2, #2
 800edb6:	2112      	movs	r1, #18
 800edb8:	68e0      	ldr	r0, [r4, #12]
 800edba:	f7ff ff77 	bl	800ecac <std>
 800edbe:	2301      	movs	r3, #1
 800edc0:	61a3      	str	r3, [r4, #24]
 800edc2:	e7d1      	b.n	800ed68 <__sinit+0xc>
 800edc4:	0800f348 	.word	0x0800f348
 800edc8:	0800ecf5 	.word	0x0800ecf5

0800edcc <__sfp>:
 800edcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edce:	4607      	mov	r7, r0
 800edd0:	f7ff ffac 	bl	800ed2c <__sfp_lock_acquire>
 800edd4:	4b1e      	ldr	r3, [pc, #120]	; (800ee50 <__sfp+0x84>)
 800edd6:	681e      	ldr	r6, [r3, #0]
 800edd8:	69b3      	ldr	r3, [r6, #24]
 800edda:	b913      	cbnz	r3, 800ede2 <__sfp+0x16>
 800eddc:	4630      	mov	r0, r6
 800edde:	f7ff ffbd 	bl	800ed5c <__sinit>
 800ede2:	3648      	adds	r6, #72	; 0x48
 800ede4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ede8:	3b01      	subs	r3, #1
 800edea:	d503      	bpl.n	800edf4 <__sfp+0x28>
 800edec:	6833      	ldr	r3, [r6, #0]
 800edee:	b30b      	cbz	r3, 800ee34 <__sfp+0x68>
 800edf0:	6836      	ldr	r6, [r6, #0]
 800edf2:	e7f7      	b.n	800ede4 <__sfp+0x18>
 800edf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800edf8:	b9d5      	cbnz	r5, 800ee30 <__sfp+0x64>
 800edfa:	4b16      	ldr	r3, [pc, #88]	; (800ee54 <__sfp+0x88>)
 800edfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee00:	60e3      	str	r3, [r4, #12]
 800ee02:	6665      	str	r5, [r4, #100]	; 0x64
 800ee04:	f000 f847 	bl	800ee96 <__retarget_lock_init_recursive>
 800ee08:	f7ff ff96 	bl	800ed38 <__sfp_lock_release>
 800ee0c:	2208      	movs	r2, #8
 800ee0e:	4629      	mov	r1, r5
 800ee10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee18:	6025      	str	r5, [r4, #0]
 800ee1a:	61a5      	str	r5, [r4, #24]
 800ee1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee20:	f7fd fb1c 	bl	800c45c <memset>
 800ee24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee30:	3468      	adds	r4, #104	; 0x68
 800ee32:	e7d9      	b.n	800ede8 <__sfp+0x1c>
 800ee34:	2104      	movs	r1, #4
 800ee36:	4638      	mov	r0, r7
 800ee38:	f7ff ff62 	bl	800ed00 <__sfmoreglue>
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	6030      	str	r0, [r6, #0]
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d1d5      	bne.n	800edf0 <__sfp+0x24>
 800ee44:	f7ff ff78 	bl	800ed38 <__sfp_lock_release>
 800ee48:	230c      	movs	r3, #12
 800ee4a:	603b      	str	r3, [r7, #0]
 800ee4c:	e7ee      	b.n	800ee2c <__sfp+0x60>
 800ee4e:	bf00      	nop
 800ee50:	0800f348 	.word	0x0800f348
 800ee54:	ffff0001 	.word	0xffff0001

0800ee58 <_fwalk_reent>:
 800ee58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	4688      	mov	r8, r1
 800ee60:	2700      	movs	r7, #0
 800ee62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee6a:	f1b9 0901 	subs.w	r9, r9, #1
 800ee6e:	d505      	bpl.n	800ee7c <_fwalk_reent+0x24>
 800ee70:	6824      	ldr	r4, [r4, #0]
 800ee72:	2c00      	cmp	r4, #0
 800ee74:	d1f7      	bne.n	800ee66 <_fwalk_reent+0xe>
 800ee76:	4638      	mov	r0, r7
 800ee78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee7c:	89ab      	ldrh	r3, [r5, #12]
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d907      	bls.n	800ee92 <_fwalk_reent+0x3a>
 800ee82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee86:	3301      	adds	r3, #1
 800ee88:	d003      	beq.n	800ee92 <_fwalk_reent+0x3a>
 800ee8a:	4629      	mov	r1, r5
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	47c0      	blx	r8
 800ee90:	4307      	orrs	r7, r0
 800ee92:	3568      	adds	r5, #104	; 0x68
 800ee94:	e7e9      	b.n	800ee6a <_fwalk_reent+0x12>

0800ee96 <__retarget_lock_init_recursive>:
 800ee96:	4770      	bx	lr

0800ee98 <__retarget_lock_acquire_recursive>:
 800ee98:	4770      	bx	lr

0800ee9a <__retarget_lock_release_recursive>:
 800ee9a:	4770      	bx	lr

0800ee9c <__swhatbuf_r>:
 800ee9c:	b570      	push	{r4, r5, r6, lr}
 800ee9e:	460e      	mov	r6, r1
 800eea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea4:	4614      	mov	r4, r2
 800eea6:	2900      	cmp	r1, #0
 800eea8:	461d      	mov	r5, r3
 800eeaa:	b096      	sub	sp, #88	; 0x58
 800eeac:	da08      	bge.n	800eec0 <__swhatbuf_r+0x24>
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800eeb4:	602a      	str	r2, [r5, #0]
 800eeb6:	061a      	lsls	r2, r3, #24
 800eeb8:	d410      	bmi.n	800eedc <__swhatbuf_r+0x40>
 800eeba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eebe:	e00e      	b.n	800eede <__swhatbuf_r+0x42>
 800eec0:	466a      	mov	r2, sp
 800eec2:	f000 f951 	bl	800f168 <_fstat_r>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	dbf1      	blt.n	800eeae <__swhatbuf_r+0x12>
 800eeca:	9a01      	ldr	r2, [sp, #4]
 800eecc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eed0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eed4:	425a      	negs	r2, r3
 800eed6:	415a      	adcs	r2, r3
 800eed8:	602a      	str	r2, [r5, #0]
 800eeda:	e7ee      	b.n	800eeba <__swhatbuf_r+0x1e>
 800eedc:	2340      	movs	r3, #64	; 0x40
 800eede:	2000      	movs	r0, #0
 800eee0:	6023      	str	r3, [r4, #0]
 800eee2:	b016      	add	sp, #88	; 0x58
 800eee4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eee8 <__smakebuf_r>:
 800eee8:	898b      	ldrh	r3, [r1, #12]
 800eeea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eeec:	079d      	lsls	r5, r3, #30
 800eeee:	4606      	mov	r6, r0
 800eef0:	460c      	mov	r4, r1
 800eef2:	d507      	bpl.n	800ef04 <__smakebuf_r+0x1c>
 800eef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eef8:	6023      	str	r3, [r4, #0]
 800eefa:	6123      	str	r3, [r4, #16]
 800eefc:	2301      	movs	r3, #1
 800eefe:	6163      	str	r3, [r4, #20]
 800ef00:	b002      	add	sp, #8
 800ef02:	bd70      	pop	{r4, r5, r6, pc}
 800ef04:	466a      	mov	r2, sp
 800ef06:	ab01      	add	r3, sp, #4
 800ef08:	f7ff ffc8 	bl	800ee9c <__swhatbuf_r>
 800ef0c:	9900      	ldr	r1, [sp, #0]
 800ef0e:	4605      	mov	r5, r0
 800ef10:	4630      	mov	r0, r6
 800ef12:	f7ff f9ff 	bl	800e314 <_malloc_r>
 800ef16:	b948      	cbnz	r0, 800ef2c <__smakebuf_r+0x44>
 800ef18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef1c:	059a      	lsls	r2, r3, #22
 800ef1e:	d4ef      	bmi.n	800ef00 <__smakebuf_r+0x18>
 800ef20:	f023 0303 	bic.w	r3, r3, #3
 800ef24:	f043 0302 	orr.w	r3, r3, #2
 800ef28:	81a3      	strh	r3, [r4, #12]
 800ef2a:	e7e3      	b.n	800eef4 <__smakebuf_r+0xc>
 800ef2c:	4b0d      	ldr	r3, [pc, #52]	; (800ef64 <__smakebuf_r+0x7c>)
 800ef2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef30:	89a3      	ldrh	r3, [r4, #12]
 800ef32:	6020      	str	r0, [r4, #0]
 800ef34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef38:	81a3      	strh	r3, [r4, #12]
 800ef3a:	9b00      	ldr	r3, [sp, #0]
 800ef3c:	6120      	str	r0, [r4, #16]
 800ef3e:	6163      	str	r3, [r4, #20]
 800ef40:	9b01      	ldr	r3, [sp, #4]
 800ef42:	b15b      	cbz	r3, 800ef5c <__smakebuf_r+0x74>
 800ef44:	4630      	mov	r0, r6
 800ef46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef4a:	f000 f91f 	bl	800f18c <_isatty_r>
 800ef4e:	b128      	cbz	r0, 800ef5c <__smakebuf_r+0x74>
 800ef50:	89a3      	ldrh	r3, [r4, #12]
 800ef52:	f023 0303 	bic.w	r3, r3, #3
 800ef56:	f043 0301 	orr.w	r3, r3, #1
 800ef5a:	81a3      	strh	r3, [r4, #12]
 800ef5c:	89a0      	ldrh	r0, [r4, #12]
 800ef5e:	4305      	orrs	r5, r0
 800ef60:	81a5      	strh	r5, [r4, #12]
 800ef62:	e7cd      	b.n	800ef00 <__smakebuf_r+0x18>
 800ef64:	0800ecf5 	.word	0x0800ecf5

0800ef68 <memmove>:
 800ef68:	4288      	cmp	r0, r1
 800ef6a:	b510      	push	{r4, lr}
 800ef6c:	eb01 0402 	add.w	r4, r1, r2
 800ef70:	d902      	bls.n	800ef78 <memmove+0x10>
 800ef72:	4284      	cmp	r4, r0
 800ef74:	4623      	mov	r3, r4
 800ef76:	d807      	bhi.n	800ef88 <memmove+0x20>
 800ef78:	1e43      	subs	r3, r0, #1
 800ef7a:	42a1      	cmp	r1, r4
 800ef7c:	d008      	beq.n	800ef90 <memmove+0x28>
 800ef7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef86:	e7f8      	b.n	800ef7a <memmove+0x12>
 800ef88:	4601      	mov	r1, r0
 800ef8a:	4402      	add	r2, r0
 800ef8c:	428a      	cmp	r2, r1
 800ef8e:	d100      	bne.n	800ef92 <memmove+0x2a>
 800ef90:	bd10      	pop	{r4, pc}
 800ef92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef9a:	e7f7      	b.n	800ef8c <memmove+0x24>

0800ef9c <__malloc_lock>:
 800ef9c:	4801      	ldr	r0, [pc, #4]	; (800efa4 <__malloc_lock+0x8>)
 800ef9e:	f7ff bf7b 	b.w	800ee98 <__retarget_lock_acquire_recursive>
 800efa2:	bf00      	nop
 800efa4:	200014b8 	.word	0x200014b8

0800efa8 <__malloc_unlock>:
 800efa8:	4801      	ldr	r0, [pc, #4]	; (800efb0 <__malloc_unlock+0x8>)
 800efaa:	f7ff bf76 	b.w	800ee9a <__retarget_lock_release_recursive>
 800efae:	bf00      	nop
 800efb0:	200014b8 	.word	0x200014b8

0800efb4 <_realloc_r>:
 800efb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb8:	4680      	mov	r8, r0
 800efba:	4614      	mov	r4, r2
 800efbc:	460e      	mov	r6, r1
 800efbe:	b921      	cbnz	r1, 800efca <_realloc_r+0x16>
 800efc0:	4611      	mov	r1, r2
 800efc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efc6:	f7ff b9a5 	b.w	800e314 <_malloc_r>
 800efca:	b92a      	cbnz	r2, 800efd8 <_realloc_r+0x24>
 800efcc:	f7ff f93a 	bl	800e244 <_free_r>
 800efd0:	4625      	mov	r5, r4
 800efd2:	4628      	mov	r0, r5
 800efd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd8:	f000 f8fa 	bl	800f1d0 <_malloc_usable_size_r>
 800efdc:	4284      	cmp	r4, r0
 800efde:	4607      	mov	r7, r0
 800efe0:	d802      	bhi.n	800efe8 <_realloc_r+0x34>
 800efe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efe6:	d812      	bhi.n	800f00e <_realloc_r+0x5a>
 800efe8:	4621      	mov	r1, r4
 800efea:	4640      	mov	r0, r8
 800efec:	f7ff f992 	bl	800e314 <_malloc_r>
 800eff0:	4605      	mov	r5, r0
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d0ed      	beq.n	800efd2 <_realloc_r+0x1e>
 800eff6:	42bc      	cmp	r4, r7
 800eff8:	4622      	mov	r2, r4
 800effa:	4631      	mov	r1, r6
 800effc:	bf28      	it	cs
 800effe:	463a      	movcs	r2, r7
 800f000:	f7fd fa1e 	bl	800c440 <memcpy>
 800f004:	4631      	mov	r1, r6
 800f006:	4640      	mov	r0, r8
 800f008:	f7ff f91c 	bl	800e244 <_free_r>
 800f00c:	e7e1      	b.n	800efd2 <_realloc_r+0x1e>
 800f00e:	4635      	mov	r5, r6
 800f010:	e7df      	b.n	800efd2 <_realloc_r+0x1e>

0800f012 <_raise_r>:
 800f012:	291f      	cmp	r1, #31
 800f014:	b538      	push	{r3, r4, r5, lr}
 800f016:	4604      	mov	r4, r0
 800f018:	460d      	mov	r5, r1
 800f01a:	d904      	bls.n	800f026 <_raise_r+0x14>
 800f01c:	2316      	movs	r3, #22
 800f01e:	6003      	str	r3, [r0, #0]
 800f020:	f04f 30ff 	mov.w	r0, #4294967295
 800f024:	bd38      	pop	{r3, r4, r5, pc}
 800f026:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f028:	b112      	cbz	r2, 800f030 <_raise_r+0x1e>
 800f02a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f02e:	b94b      	cbnz	r3, 800f044 <_raise_r+0x32>
 800f030:	4620      	mov	r0, r4
 800f032:	f000 f831 	bl	800f098 <_getpid_r>
 800f036:	462a      	mov	r2, r5
 800f038:	4601      	mov	r1, r0
 800f03a:	4620      	mov	r0, r4
 800f03c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f040:	f000 b818 	b.w	800f074 <_kill_r>
 800f044:	2b01      	cmp	r3, #1
 800f046:	d00a      	beq.n	800f05e <_raise_r+0x4c>
 800f048:	1c59      	adds	r1, r3, #1
 800f04a:	d103      	bne.n	800f054 <_raise_r+0x42>
 800f04c:	2316      	movs	r3, #22
 800f04e:	6003      	str	r3, [r0, #0]
 800f050:	2001      	movs	r0, #1
 800f052:	e7e7      	b.n	800f024 <_raise_r+0x12>
 800f054:	2400      	movs	r4, #0
 800f056:	4628      	mov	r0, r5
 800f058:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f05c:	4798      	blx	r3
 800f05e:	2000      	movs	r0, #0
 800f060:	e7e0      	b.n	800f024 <_raise_r+0x12>
	...

0800f064 <raise>:
 800f064:	4b02      	ldr	r3, [pc, #8]	; (800f070 <raise+0xc>)
 800f066:	4601      	mov	r1, r0
 800f068:	6818      	ldr	r0, [r3, #0]
 800f06a:	f7ff bfd2 	b.w	800f012 <_raise_r>
 800f06e:	bf00      	nop
 800f070:	200004c0 	.word	0x200004c0

0800f074 <_kill_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	2300      	movs	r3, #0
 800f078:	4d06      	ldr	r5, [pc, #24]	; (800f094 <_kill_r+0x20>)
 800f07a:	4604      	mov	r4, r0
 800f07c:	4608      	mov	r0, r1
 800f07e:	4611      	mov	r1, r2
 800f080:	602b      	str	r3, [r5, #0]
 800f082:	f7f3 fc98 	bl	80029b6 <_kill>
 800f086:	1c43      	adds	r3, r0, #1
 800f088:	d102      	bne.n	800f090 <_kill_r+0x1c>
 800f08a:	682b      	ldr	r3, [r5, #0]
 800f08c:	b103      	cbz	r3, 800f090 <_kill_r+0x1c>
 800f08e:	6023      	str	r3, [r4, #0]
 800f090:	bd38      	pop	{r3, r4, r5, pc}
 800f092:	bf00      	nop
 800f094:	200014bc 	.word	0x200014bc

0800f098 <_getpid_r>:
 800f098:	f7f3 bc86 	b.w	80029a8 <_getpid>

0800f09c <__sread>:
 800f09c:	b510      	push	{r4, lr}
 800f09e:	460c      	mov	r4, r1
 800f0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0a4:	f000 f89c 	bl	800f1e0 <_read_r>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	bfab      	itete	ge
 800f0ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0ae:	89a3      	ldrhlt	r3, [r4, #12]
 800f0b0:	181b      	addge	r3, r3, r0
 800f0b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0b6:	bfac      	ite	ge
 800f0b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0ba:	81a3      	strhlt	r3, [r4, #12]
 800f0bc:	bd10      	pop	{r4, pc}

0800f0be <__swrite>:
 800f0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c2:	461f      	mov	r7, r3
 800f0c4:	898b      	ldrh	r3, [r1, #12]
 800f0c6:	4605      	mov	r5, r0
 800f0c8:	05db      	lsls	r3, r3, #23
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	4616      	mov	r6, r2
 800f0ce:	d505      	bpl.n	800f0dc <__swrite+0x1e>
 800f0d0:	2302      	movs	r3, #2
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d8:	f000 f868 	bl	800f1ac <_lseek_r>
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	4632      	mov	r2, r6
 800f0e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0e4:	81a3      	strh	r3, [r4, #12]
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	463b      	mov	r3, r7
 800f0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f2:	f000 b817 	b.w	800f124 <_write_r>

0800f0f6 <__sseek>:
 800f0f6:	b510      	push	{r4, lr}
 800f0f8:	460c      	mov	r4, r1
 800f0fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0fe:	f000 f855 	bl	800f1ac <_lseek_r>
 800f102:	1c43      	adds	r3, r0, #1
 800f104:	89a3      	ldrh	r3, [r4, #12]
 800f106:	bf15      	itete	ne
 800f108:	6560      	strne	r0, [r4, #84]	; 0x54
 800f10a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f10e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f112:	81a3      	strheq	r3, [r4, #12]
 800f114:	bf18      	it	ne
 800f116:	81a3      	strhne	r3, [r4, #12]
 800f118:	bd10      	pop	{r4, pc}

0800f11a <__sclose>:
 800f11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f11e:	f000 b813 	b.w	800f148 <_close_r>
	...

0800f124 <_write_r>:
 800f124:	b538      	push	{r3, r4, r5, lr}
 800f126:	4604      	mov	r4, r0
 800f128:	4608      	mov	r0, r1
 800f12a:	4611      	mov	r1, r2
 800f12c:	2200      	movs	r2, #0
 800f12e:	4d05      	ldr	r5, [pc, #20]	; (800f144 <_write_r+0x20>)
 800f130:	602a      	str	r2, [r5, #0]
 800f132:	461a      	mov	r2, r3
 800f134:	f7f3 fc76 	bl	8002a24 <_write>
 800f138:	1c43      	adds	r3, r0, #1
 800f13a:	d102      	bne.n	800f142 <_write_r+0x1e>
 800f13c:	682b      	ldr	r3, [r5, #0]
 800f13e:	b103      	cbz	r3, 800f142 <_write_r+0x1e>
 800f140:	6023      	str	r3, [r4, #0]
 800f142:	bd38      	pop	{r3, r4, r5, pc}
 800f144:	200014bc 	.word	0x200014bc

0800f148 <_close_r>:
 800f148:	b538      	push	{r3, r4, r5, lr}
 800f14a:	2300      	movs	r3, #0
 800f14c:	4d05      	ldr	r5, [pc, #20]	; (800f164 <_close_r+0x1c>)
 800f14e:	4604      	mov	r4, r0
 800f150:	4608      	mov	r0, r1
 800f152:	602b      	str	r3, [r5, #0]
 800f154:	f7f3 fc82 	bl	8002a5c <_close>
 800f158:	1c43      	adds	r3, r0, #1
 800f15a:	d102      	bne.n	800f162 <_close_r+0x1a>
 800f15c:	682b      	ldr	r3, [r5, #0]
 800f15e:	b103      	cbz	r3, 800f162 <_close_r+0x1a>
 800f160:	6023      	str	r3, [r4, #0]
 800f162:	bd38      	pop	{r3, r4, r5, pc}
 800f164:	200014bc 	.word	0x200014bc

0800f168 <_fstat_r>:
 800f168:	b538      	push	{r3, r4, r5, lr}
 800f16a:	2300      	movs	r3, #0
 800f16c:	4d06      	ldr	r5, [pc, #24]	; (800f188 <_fstat_r+0x20>)
 800f16e:	4604      	mov	r4, r0
 800f170:	4608      	mov	r0, r1
 800f172:	4611      	mov	r1, r2
 800f174:	602b      	str	r3, [r5, #0]
 800f176:	f7f3 fc7c 	bl	8002a72 <_fstat>
 800f17a:	1c43      	adds	r3, r0, #1
 800f17c:	d102      	bne.n	800f184 <_fstat_r+0x1c>
 800f17e:	682b      	ldr	r3, [r5, #0]
 800f180:	b103      	cbz	r3, 800f184 <_fstat_r+0x1c>
 800f182:	6023      	str	r3, [r4, #0]
 800f184:	bd38      	pop	{r3, r4, r5, pc}
 800f186:	bf00      	nop
 800f188:	200014bc 	.word	0x200014bc

0800f18c <_isatty_r>:
 800f18c:	b538      	push	{r3, r4, r5, lr}
 800f18e:	2300      	movs	r3, #0
 800f190:	4d05      	ldr	r5, [pc, #20]	; (800f1a8 <_isatty_r+0x1c>)
 800f192:	4604      	mov	r4, r0
 800f194:	4608      	mov	r0, r1
 800f196:	602b      	str	r3, [r5, #0]
 800f198:	f7f3 fc7a 	bl	8002a90 <_isatty>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d102      	bne.n	800f1a6 <_isatty_r+0x1a>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	b103      	cbz	r3, 800f1a6 <_isatty_r+0x1a>
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	200014bc 	.word	0x200014bc

0800f1ac <_lseek_r>:
 800f1ac:	b538      	push	{r3, r4, r5, lr}
 800f1ae:	4604      	mov	r4, r0
 800f1b0:	4608      	mov	r0, r1
 800f1b2:	4611      	mov	r1, r2
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	4d05      	ldr	r5, [pc, #20]	; (800f1cc <_lseek_r+0x20>)
 800f1b8:	602a      	str	r2, [r5, #0]
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	f7f3 fc72 	bl	8002aa4 <_lseek>
 800f1c0:	1c43      	adds	r3, r0, #1
 800f1c2:	d102      	bne.n	800f1ca <_lseek_r+0x1e>
 800f1c4:	682b      	ldr	r3, [r5, #0]
 800f1c6:	b103      	cbz	r3, 800f1ca <_lseek_r+0x1e>
 800f1c8:	6023      	str	r3, [r4, #0]
 800f1ca:	bd38      	pop	{r3, r4, r5, pc}
 800f1cc:	200014bc 	.word	0x200014bc

0800f1d0 <_malloc_usable_size_r>:
 800f1d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1d4:	1f18      	subs	r0, r3, #4
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	bfbc      	itt	lt
 800f1da:	580b      	ldrlt	r3, [r1, r0]
 800f1dc:	18c0      	addlt	r0, r0, r3
 800f1de:	4770      	bx	lr

0800f1e0 <_read_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	4608      	mov	r0, r1
 800f1e6:	4611      	mov	r1, r2
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	4d05      	ldr	r5, [pc, #20]	; (800f200 <_read_r+0x20>)
 800f1ec:	602a      	str	r2, [r5, #0]
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	f7f3 fbfb 	bl	80029ea <_read>
 800f1f4:	1c43      	adds	r3, r0, #1
 800f1f6:	d102      	bne.n	800f1fe <_read_r+0x1e>
 800f1f8:	682b      	ldr	r3, [r5, #0]
 800f1fa:	b103      	cbz	r3, 800f1fe <_read_r+0x1e>
 800f1fc:	6023      	str	r3, [r4, #0]
 800f1fe:	bd38      	pop	{r3, r4, r5, pc}
 800f200:	200014bc 	.word	0x200014bc

0800f204 <_init>:
 800f204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f206:	bf00      	nop
 800f208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f20a:	bc08      	pop	{r3}
 800f20c:	469e      	mov	lr, r3
 800f20e:	4770      	bx	lr

0800f210 <_fini>:
 800f210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f212:	bf00      	nop
 800f214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f216:	bc08      	pop	{r3}
 800f218:	469e      	mov	lr, r3
 800f21a:	4770      	bx	lr
