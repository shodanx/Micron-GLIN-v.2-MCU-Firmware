
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a18  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  08012b58  08012b58  00022b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013238  08013238  00030a90  2**0
                  CONTENTS
  4 .ARM          00000008  08013238  08013238  00023238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013240  08013240  00030a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013240  08013240  00023240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013244  08013244  00023244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a90  20000000  08013248  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb4  20000a90  08013cd8  00030a90  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001944  08013cd8  00031944  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030a90  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b541  00000000  00000000  00030ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d2c  00000000  00000000  0004bffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00050d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  00052620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6de  00000000  00000000  00053ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002020a  00000000  00000000  0006e3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008806e  00000000  00000000  0008e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011663e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d60  00000000  00000000  00116690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000a90 	.word	0x20000a90
 800015c:	00000000 	.word	0x00000000
 8000160:	08012b40 	.word	0x08012b40

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000a94 	.word	0x20000a94
 800017c:	08012b40 	.word	0x08012b40

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_frsub>:
 8000bac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	e002      	b.n	8000bb8 <__addsf3>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_fsub>:
 8000bb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb8 <__addsf3>:
 8000bb8:	0042      	lsls	r2, r0, #1
 8000bba:	bf1f      	itttt	ne
 8000bbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc0:	ea92 0f03 	teqne	r2, r3
 8000bc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bcc:	d06a      	beq.n	8000ca4 <__addsf3+0xec>
 8000bce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd6:	bfc1      	itttt	gt
 8000bd8:	18d2      	addgt	r2, r2, r3
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	4048      	eorgt	r0, r1
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	bfb8      	it	lt
 8000be2:	425b      	neglt	r3, r3
 8000be4:	2b19      	cmp	r3, #25
 8000be6:	bf88      	it	hi
 8000be8:	4770      	bxhi	lr
 8000bea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c06:	bf18      	it	ne
 8000c08:	4249      	negne	r1, r1
 8000c0a:	ea92 0f03 	teq	r2, r3
 8000c0e:	d03f      	beq.n	8000c90 <__addsf3+0xd8>
 8000c10:	f1a2 0201 	sub.w	r2, r2, #1
 8000c14:	fa41 fc03 	asr.w	ip, r1, r3
 8000c18:	eb10 000c 	adds.w	r0, r0, ip
 8000c1c:	f1c3 0320 	rsb	r3, r3, #32
 8000c20:	fa01 f103 	lsl.w	r1, r1, r3
 8000c24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__addsf3+0x78>
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c34:	d313      	bcc.n	8000c5e <__addsf3+0xa6>
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3a:	d306      	bcc.n	8000c4a <__addsf3+0x92>
 8000c3c:	0840      	lsrs	r0, r0, #1
 8000c3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c42:	f102 0201 	add.w	r2, r2, #1
 8000c46:	2afe      	cmp	r2, #254	; 0xfe
 8000c48:	d251      	bcs.n	8000cee <__addsf3+0x136>
 8000c4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	ea40 0003 	orr.w	r0, r0, r3
 8000c5c:	4770      	bx	lr
 8000c5e:	0049      	lsls	r1, r1, #1
 8000c60:	eb40 0000 	adc.w	r0, r0, r0
 8000c64:	3a01      	subs	r2, #1
 8000c66:	bf28      	it	cs
 8000c68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c6c:	d2ed      	bcs.n	8000c4a <__addsf3+0x92>
 8000c6e:	fab0 fc80 	clz	ip, r0
 8000c72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c76:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7e:	bfaa      	itet	ge
 8000c80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c84:	4252      	neglt	r2, r2
 8000c86:	4318      	orrge	r0, r3
 8000c88:	bfbc      	itt	lt
 8000c8a:	40d0      	lsrlt	r0, r2
 8000c8c:	4318      	orrlt	r0, r3
 8000c8e:	4770      	bx	lr
 8000c90:	f092 0f00 	teq	r2, #0
 8000c94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c98:	bf06      	itte	eq
 8000c9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9e:	3201      	addeq	r2, #1
 8000ca0:	3b01      	subne	r3, #1
 8000ca2:	e7b5      	b.n	8000c10 <__addsf3+0x58>
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d021      	beq.n	8000cf8 <__addsf3+0x140>
 8000cb4:	ea92 0f03 	teq	r2, r3
 8000cb8:	d004      	beq.n	8000cc4 <__addsf3+0x10c>
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	4608      	moveq	r0, r1
 8000cc2:	4770      	bx	lr
 8000cc4:	ea90 0f01 	teq	r0, r1
 8000cc8:	bf1c      	itt	ne
 8000cca:	2000      	movne	r0, #0
 8000ccc:	4770      	bxne	lr
 8000cce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cd2:	d104      	bne.n	8000cde <__addsf3+0x126>
 8000cd4:	0040      	lsls	r0, r0, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ce2:	bf3c      	itt	cc
 8000ce4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bxcc	lr
 8000cea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf6:	4770      	bx	lr
 8000cf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cfc:	bf16      	itet	ne
 8000cfe:	4608      	movne	r0, r1
 8000d00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d04:	4601      	movne	r1, r0
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	bf06      	itte	eq
 8000d0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0e:	ea90 0f01 	teqeq	r0, r1
 8000d12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_ui2f>:
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e004      	b.n	8000d28 <__aeabi_i2f+0x8>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_i2f>:
 8000d20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	bf48      	it	mi
 8000d26:	4240      	negmi	r0, r0
 8000d28:	ea5f 0c00 	movs.w	ip, r0
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d34:	4601      	mov	r1, r0
 8000d36:	f04f 0000 	mov.w	r0, #0
 8000d3a:	e01c      	b.n	8000d76 <__aeabi_l2f+0x2a>

08000d3c <__aeabi_ul2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e00a      	b.n	8000d60 <__aeabi_l2f+0x14>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_l2f>:
 8000d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d58:	d502      	bpl.n	8000d60 <__aeabi_l2f+0x14>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	ea5f 0c01 	movs.w	ip, r1
 8000d64:	bf02      	ittt	eq
 8000d66:	4684      	moveq	ip, r0
 8000d68:	4601      	moveq	r1, r0
 8000d6a:	2000      	moveq	r0, #0
 8000d6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d70:	bf08      	it	eq
 8000d72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d7a:	fabc f28c 	clz	r2, ip
 8000d7e:	3a08      	subs	r2, #8
 8000d80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d84:	db10      	blt.n	8000da8 <__aeabi_l2f+0x5c>
 8000d86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d90:	f1c2 0220 	rsb	r2, r2, #32
 8000d94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d98:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9c:	eb43 0002 	adc.w	r0, r3, r2
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f102 0220 	add.w	r2, r2, #32
 8000dac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_fmul>:
 8000dc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd0:	bf1e      	ittt	ne
 8000dd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd6:	ea92 0f0c 	teqne	r2, ip
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d06f      	beq.n	8000ec0 <__aeabi_fmul+0xf8>
 8000de0:	441a      	add	r2, r3
 8000de2:	ea80 0c01 	eor.w	ip, r0, r1
 8000de6:	0240      	lsls	r0, r0, #9
 8000de8:	bf18      	it	ne
 8000dea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dee:	d01e      	beq.n	8000e2e <__aeabi_fmul+0x66>
 8000df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000e00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e08:	bf3e      	ittt	cc
 8000e0a:	0049      	lslcc	r1, r1, #1
 8000e0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e10:	005b      	lslcc	r3, r3, #1
 8000e12:	ea40 0001 	orr.w	r0, r0, r1
 8000e16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e1a:	2afd      	cmp	r2, #253	; 0xfd
 8000e1c:	d81d      	bhi.n	8000e5a <__aeabi_fmul+0x92>
 8000e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e26:	bf08      	it	eq
 8000e28:	f020 0001 	biceq.w	r0, r0, #1
 8000e2c:	4770      	bx	lr
 8000e2e:	f090 0f00 	teq	r0, #0
 8000e32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e36:	bf08      	it	eq
 8000e38:	0249      	lsleq	r1, r1, #9
 8000e3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e42:	3a7f      	subs	r2, #127	; 0x7f
 8000e44:	bfc2      	ittt	gt
 8000e46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4e:	4770      	bxgt	lr
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	dc5d      	bgt.n	8000f18 <__aeabi_fmul+0x150>
 8000e5c:	f112 0f19 	cmn.w	r2, #25
 8000e60:	bfdc      	itt	le
 8000e62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e66:	4770      	bxle	lr
 8000e68:	f1c2 0200 	rsb	r2, r2, #0
 8000e6c:	0041      	lsls	r1, r0, #1
 8000e6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e72:	f1c2 0220 	rsb	r2, r2, #32
 8000e76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7e:	f140 0000 	adc.w	r0, r0, #0
 8000e82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e86:	bf08      	it	eq
 8000e88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e8c:	4770      	bx	lr
 8000e8e:	f092 0f00 	teq	r2, #0
 8000e92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e96:	bf02      	ittt	eq
 8000e98:	0040      	lsleq	r0, r0, #1
 8000e9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9e:	3a01      	subeq	r2, #1
 8000ea0:	d0f9      	beq.n	8000e96 <__aeabi_fmul+0xce>
 8000ea2:	ea40 000c 	orr.w	r0, r0, ip
 8000ea6:	f093 0f00 	teq	r3, #0
 8000eaa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0049      	lsleq	r1, r1, #1
 8000eb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb6:	3b01      	subeq	r3, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xe6>
 8000eba:	ea41 010c 	orr.w	r1, r1, ip
 8000ebe:	e78f      	b.n	8000de0 <__aeabi_fmul+0x18>
 8000ec0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	bf18      	it	ne
 8000eca:	ea93 0f0c 	teqne	r3, ip
 8000ece:	d00a      	beq.n	8000ee6 <__aeabi_fmul+0x11e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1d8      	bne.n	8000e8e <__aeabi_fmul+0xc6>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	4770      	bx	lr
 8000ee6:	f090 0f00 	teq	r0, #0
 8000eea:	bf17      	itett	ne
 8000eec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ef0:	4608      	moveq	r0, r1
 8000ef2:	f091 0f00 	teqne	r1, #0
 8000ef6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000efa:	d014      	beq.n	8000f26 <__aeabi_fmul+0x15e>
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d101      	bne.n	8000f06 <__aeabi_fmul+0x13e>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d10f      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f06:	ea93 0f0c 	teq	r3, ip
 8000f0a:	d103      	bne.n	8000f14 <__aeabi_fmul+0x14c>
 8000f0c:	024b      	lsls	r3, r1, #9
 8000f0e:	bf18      	it	ne
 8000f10:	4608      	movne	r0, r1
 8000f12:	d108      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f14:	ea80 0001 	eor.w	r0, r0, r1
 8000f18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f24:	4770      	bx	lr
 8000f26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_fdiv>:
 8000f30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f38:	bf1e      	ittt	ne
 8000f3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3e:	ea92 0f0c 	teqne	r2, ip
 8000f42:	ea93 0f0c 	teqne	r3, ip
 8000f46:	d069      	beq.n	800101c <__aeabi_fdiv+0xec>
 8000f48:	eba2 0203 	sub.w	r2, r2, r3
 8000f4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f56:	d037      	beq.n	8000fc8 <__aeabi_fdiv+0x98>
 8000f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	bf38      	it	cc
 8000f6c:	005b      	lslcc	r3, r3, #1
 8000f6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f76:	428b      	cmp	r3, r1
 8000f78:	bf24      	itt	cs
 8000f7a:	1a5b      	subcs	r3, r3, r1
 8000f7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f84:	bf24      	itt	cs
 8000f86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f92:	bf24      	itt	cs
 8000f94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa0:	bf24      	itt	cs
 8000fa2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	bf18      	it	ne
 8000fae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb2:	d1e0      	bne.n	8000f76 <__aeabi_fdiv+0x46>
 8000fb4:	2afd      	cmp	r2, #253	; 0xfd
 8000fb6:	f63f af50 	bhi.w	8000e5a <__aeabi_fmul+0x92>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc0:	bf08      	it	eq
 8000fc2:	f020 0001 	biceq.w	r0, r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd0:	327f      	adds	r2, #127	; 0x7f
 8000fd2:	bfc2      	ittt	gt
 8000fd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fdc:	4770      	bxgt	lr
 8000fde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	e737      	b.n	8000e5a <__aeabi_fmul+0x92>
 8000fea:	f092 0f00 	teq	r2, #0
 8000fee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ff2:	bf02      	ittt	eq
 8000ff4:	0040      	lsleq	r0, r0, #1
 8000ff6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ffa:	3a01      	subeq	r2, #1
 8000ffc:	d0f9      	beq.n	8000ff2 <__aeabi_fdiv+0xc2>
 8000ffe:	ea40 000c 	orr.w	r0, r0, ip
 8001002:	f093 0f00 	teq	r3, #0
 8001006:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0049      	lsleq	r1, r1, #1
 800100e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001012:	3b01      	subeq	r3, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xda>
 8001016:	ea41 010c 	orr.w	r1, r1, ip
 800101a:	e795      	b.n	8000f48 <__aeabi_fdiv+0x18>
 800101c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001020:	ea92 0f0c 	teq	r2, ip
 8001024:	d108      	bne.n	8001038 <__aeabi_fdiv+0x108>
 8001026:	0242      	lsls	r2, r0, #9
 8001028:	f47f af7d 	bne.w	8000f26 <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	f47f af70 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 8001034:	4608      	mov	r0, r1
 8001036:	e776      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001038:	ea93 0f0c 	teq	r3, ip
 800103c:	d104      	bne.n	8001048 <__aeabi_fdiv+0x118>
 800103e:	024b      	lsls	r3, r1, #9
 8001040:	f43f af4c 	beq.w	8000edc <__aeabi_fmul+0x114>
 8001044:	4608      	mov	r0, r1
 8001046:	e76e      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001048:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800104c:	bf18      	it	ne
 800104e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001052:	d1ca      	bne.n	8000fea <__aeabi_fdiv+0xba>
 8001054:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001058:	f47f af5c 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 800105c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001060:	f47f af3c 	bne.w	8000edc <__aeabi_fmul+0x114>
 8001064:	e75f      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001066:	bf00      	nop

08001068 <__gesf2>:
 8001068:	f04f 3cff 	mov.w	ip, #4294967295
 800106c:	e006      	b.n	800107c <__cmpsf2+0x4>
 800106e:	bf00      	nop

08001070 <__lesf2>:
 8001070:	f04f 0c01 	mov.w	ip, #1
 8001074:	e002      	b.n	800107c <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__cmpsf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	bf18      	it	ne
 800108e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001092:	d011      	beq.n	80010b8 <__cmpsf2+0x40>
 8001094:	b001      	add	sp, #4
 8001096:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800109a:	bf18      	it	ne
 800109c:	ea90 0f01 	teqne	r0, r1
 80010a0:	bf58      	it	pl
 80010a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a6:	bf88      	it	hi
 80010a8:	17c8      	asrhi	r0, r1, #31
 80010aa:	bf38      	it	cc
 80010ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b0:	bf18      	it	ne
 80010b2:	f040 0001 	orrne.w	r0, r0, #1
 80010b6:	4770      	bx	lr
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__cmpsf2+0x4c>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d105      	bne.n	80010d0 <__cmpsf2+0x58>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d1e4      	bne.n	8001094 <__cmpsf2+0x1c>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d0e1      	beq.n	8001094 <__cmpsf2+0x1c>
 80010d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <__aeabi_cfrcmple>:
 80010d8:	4684      	mov	ip, r0
 80010da:	4608      	mov	r0, r1
 80010dc:	4661      	mov	r1, ip
 80010de:	e7ff      	b.n	80010e0 <__aeabi_cfcmpeq>

080010e0 <__aeabi_cfcmpeq>:
 80010e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010e2:	f7ff ffc9 	bl	8001078 <__cmpsf2>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	bf48      	it	mi
 80010ea:	f110 0f00 	cmnmi.w	r0, #0
 80010ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f0 <__aeabi_fcmpeq>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff fff4 	bl	80010e0 <__aeabi_cfcmpeq>
 80010f8:	bf0c      	ite	eq
 80010fa:	2001      	moveq	r0, #1
 80010fc:	2000      	movne	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmplt>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffea 	bl	80010e0 <__aeabi_cfcmpeq>
 800110c:	bf34      	ite	cc
 800110e:	2001      	movcc	r0, #1
 8001110:	2000      	movcs	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmple>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffe0 	bl	80010e0 <__aeabi_cfcmpeq>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpge>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffd2 	bl	80010d8 <__aeabi_cfrcmple>
 8001134:	bf94      	ite	ls
 8001136:	2001      	movls	r0, #1
 8001138:	2000      	movhi	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpgt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffc8 	bl	80010d8 <__aeabi_cfrcmple>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_f2uiz>:
 8001154:	0042      	lsls	r2, r0, #1
 8001156:	d20e      	bcs.n	8001176 <__aeabi_f2uiz+0x22>
 8001158:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800115c:	d30b      	bcc.n	8001176 <__aeabi_f2uiz+0x22>
 800115e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001162:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001166:	d409      	bmi.n	800117c <__aeabi_f2uiz+0x28>
 8001168:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	4770      	bx	lr
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	4770      	bx	lr
 800117c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001180:	d101      	bne.n	8001186 <__aeabi_f2uiz+0x32>
 8001182:	0242      	lsls	r2, r0, #9
 8001184:	d102      	bne.n	800118c <__aeabi_f2uiz+0x38>
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	4770      	bx	lr
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <__aeabi_uldivmod>:
 8001194:	b953      	cbnz	r3, 80011ac <__aeabi_uldivmod+0x18>
 8001196:	b94a      	cbnz	r2, 80011ac <__aeabi_uldivmod+0x18>
 8001198:	2900      	cmp	r1, #0
 800119a:	bf08      	it	eq
 800119c:	2800      	cmpeq	r0, #0
 800119e:	bf1c      	itt	ne
 80011a0:	f04f 31ff 	movne.w	r1, #4294967295
 80011a4:	f04f 30ff 	movne.w	r0, #4294967295
 80011a8:	f000 b9ae 	b.w	8001508 <__aeabi_idiv0>
 80011ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b4:	f000 f83e 	bl	8001234 <__udivmoddi4>
 80011b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c0:	b004      	add	sp, #16
 80011c2:	4770      	bx	lr

080011c4 <__aeabi_d2lz>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4605      	mov	r5, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4628      	mov	r0, r5
 80011d0:	4621      	mov	r1, r4
 80011d2:	f7ff fc15 	bl	8000a00 <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x20>
 80011d8:	4628      	mov	r0, r5
 80011da:	4621      	mov	r1, r4
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4628      	mov	r0, r5
 80011e6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f98b 	bl	800051c <__aeabi_dmul>
 8001206:	f7ff fc61 	bl	8000acc <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f90c 	bl	8000428 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f982 	bl	800051c <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffc4 	bl	80001ac <__aeabi_dsub>
 8001224:	f7ff fc52 	bl	8000acc <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000

08001234 <__udivmoddi4>:
 8001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001238:	9e08      	ldr	r6, [sp, #32]
 800123a:	460d      	mov	r5, r1
 800123c:	4604      	mov	r4, r0
 800123e:	4688      	mov	r8, r1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d14d      	bne.n	80012e0 <__udivmoddi4+0xac>
 8001244:	428a      	cmp	r2, r1
 8001246:	4694      	mov	ip, r2
 8001248:	d968      	bls.n	800131c <__udivmoddi4+0xe8>
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b152      	cbz	r2, 8001266 <__udivmoddi4+0x32>
 8001250:	fa01 f302 	lsl.w	r3, r1, r2
 8001254:	f1c2 0120 	rsb	r1, r2, #32
 8001258:	fa20 f101 	lsr.w	r1, r0, r1
 800125c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001260:	ea41 0803 	orr.w	r8, r1, r3
 8001264:	4094      	lsls	r4, r2
 8001266:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800126a:	fbb8 f7f1 	udiv	r7, r8, r1
 800126e:	fa1f fe8c 	uxth.w	lr, ip
 8001272:	fb01 8817 	mls	r8, r1, r7, r8
 8001276:	fb07 f00e 	mul.w	r0, r7, lr
 800127a:	0c23      	lsrs	r3, r4, #16
 800127c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001280:	4298      	cmp	r0, r3
 8001282:	d90a      	bls.n	800129a <__udivmoddi4+0x66>
 8001284:	eb1c 0303 	adds.w	r3, ip, r3
 8001288:	f107 35ff 	add.w	r5, r7, #4294967295
 800128c:	f080 811e 	bcs.w	80014cc <__udivmoddi4+0x298>
 8001290:	4298      	cmp	r0, r3
 8001292:	f240 811b 	bls.w	80014cc <__udivmoddi4+0x298>
 8001296:	3f02      	subs	r7, #2
 8001298:	4463      	add	r3, ip
 800129a:	1a1b      	subs	r3, r3, r0
 800129c:	fbb3 f0f1 	udiv	r0, r3, r1
 80012a0:	fb01 3310 	mls	r3, r1, r0, r3
 80012a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80012a8:	b2a4      	uxth	r4, r4
 80012aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012ae:	45a6      	cmp	lr, r4
 80012b0:	d90a      	bls.n	80012c8 <__udivmoddi4+0x94>
 80012b2:	eb1c 0404 	adds.w	r4, ip, r4
 80012b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80012ba:	f080 8109 	bcs.w	80014d0 <__udivmoddi4+0x29c>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f240 8106 	bls.w	80014d0 <__udivmoddi4+0x29c>
 80012c4:	4464      	add	r4, ip
 80012c6:	3802      	subs	r0, #2
 80012c8:	2100      	movs	r1, #0
 80012ca:	eba4 040e 	sub.w	r4, r4, lr
 80012ce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012d2:	b11e      	cbz	r6, 80012dc <__udivmoddi4+0xa8>
 80012d4:	2300      	movs	r3, #0
 80012d6:	40d4      	lsrs	r4, r2
 80012d8:	e9c6 4300 	strd	r4, r3, [r6]
 80012dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0xc2>
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	f000 80ee 	beq.w	80014c6 <__udivmoddi4+0x292>
 80012ea:	2100      	movs	r1, #0
 80012ec:	e9c6 0500 	strd	r0, r5, [r6]
 80012f0:	4608      	mov	r0, r1
 80012f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f6:	fab3 f183 	clz	r1, r3
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d14a      	bne.n	8001394 <__udivmoddi4+0x160>
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d302      	bcc.n	8001308 <__udivmoddi4+0xd4>
 8001302:	4282      	cmp	r2, r0
 8001304:	f200 80fc 	bhi.w	8001500 <__udivmoddi4+0x2cc>
 8001308:	1a84      	subs	r4, r0, r2
 800130a:	eb65 0303 	sbc.w	r3, r5, r3
 800130e:	2001      	movs	r0, #1
 8001310:	4698      	mov	r8, r3
 8001312:	2e00      	cmp	r6, #0
 8001314:	d0e2      	beq.n	80012dc <__udivmoddi4+0xa8>
 8001316:	e9c6 4800 	strd	r4, r8, [r6]
 800131a:	e7df      	b.n	80012dc <__udivmoddi4+0xa8>
 800131c:	b902      	cbnz	r2, 8001320 <__udivmoddi4+0xec>
 800131e:	deff      	udf	#255	; 0xff
 8001320:	fab2 f282 	clz	r2, r2
 8001324:	2a00      	cmp	r2, #0
 8001326:	f040 8091 	bne.w	800144c <__udivmoddi4+0x218>
 800132a:	eba1 000c 	sub.w	r0, r1, ip
 800132e:	2101      	movs	r1, #1
 8001330:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001334:	fa1f fe8c 	uxth.w	lr, ip
 8001338:	fbb0 f3f7 	udiv	r3, r0, r7
 800133c:	fb07 0013 	mls	r0, r7, r3, r0
 8001340:	0c25      	lsrs	r5, r4, #16
 8001342:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001346:	fb0e f003 	mul.w	r0, lr, r3
 800134a:	42a8      	cmp	r0, r5
 800134c:	d908      	bls.n	8001360 <__udivmoddi4+0x12c>
 800134e:	eb1c 0505 	adds.w	r5, ip, r5
 8001352:	f103 38ff 	add.w	r8, r3, #4294967295
 8001356:	d202      	bcs.n	800135e <__udivmoddi4+0x12a>
 8001358:	42a8      	cmp	r0, r5
 800135a:	f200 80ce 	bhi.w	80014fa <__udivmoddi4+0x2c6>
 800135e:	4643      	mov	r3, r8
 8001360:	1a2d      	subs	r5, r5, r0
 8001362:	fbb5 f0f7 	udiv	r0, r5, r7
 8001366:	fb07 5510 	mls	r5, r7, r0, r5
 800136a:	fb0e fe00 	mul.w	lr, lr, r0
 800136e:	b2a4      	uxth	r4, r4
 8001370:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001374:	45a6      	cmp	lr, r4
 8001376:	d908      	bls.n	800138a <__udivmoddi4+0x156>
 8001378:	eb1c 0404 	adds.w	r4, ip, r4
 800137c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001380:	d202      	bcs.n	8001388 <__udivmoddi4+0x154>
 8001382:	45a6      	cmp	lr, r4
 8001384:	f200 80b6 	bhi.w	80014f4 <__udivmoddi4+0x2c0>
 8001388:	4628      	mov	r0, r5
 800138a:	eba4 040e 	sub.w	r4, r4, lr
 800138e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001392:	e79e      	b.n	80012d2 <__udivmoddi4+0x9e>
 8001394:	f1c1 0720 	rsb	r7, r1, #32
 8001398:	408b      	lsls	r3, r1
 800139a:	fa22 fc07 	lsr.w	ip, r2, r7
 800139e:	ea4c 0c03 	orr.w	ip, ip, r3
 80013a2:	fa25 fa07 	lsr.w	sl, r5, r7
 80013a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013aa:	fbba f8f9 	udiv	r8, sl, r9
 80013ae:	fa20 f307 	lsr.w	r3, r0, r7
 80013b2:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b6:	408d      	lsls	r5, r1
 80013b8:	fa1f fe8c 	uxth.w	lr, ip
 80013bc:	431d      	orrs	r5, r3
 80013be:	fa00 f301 	lsl.w	r3, r0, r1
 80013c2:	fb08 f00e 	mul.w	r0, r8, lr
 80013c6:	0c2c      	lsrs	r4, r5, #16
 80013c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013cc:	42a0      	cmp	r0, r4
 80013ce:	fa02 f201 	lsl.w	r2, r2, r1
 80013d2:	d90b      	bls.n	80013ec <__udivmoddi4+0x1b8>
 80013d4:	eb1c 0404 	adds.w	r4, ip, r4
 80013d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80013dc:	f080 8088 	bcs.w	80014f0 <__udivmoddi4+0x2bc>
 80013e0:	42a0      	cmp	r0, r4
 80013e2:	f240 8085 	bls.w	80014f0 <__udivmoddi4+0x2bc>
 80013e6:	f1a8 0802 	sub.w	r8, r8, #2
 80013ea:	4464      	add	r4, ip
 80013ec:	1a24      	subs	r4, r4, r0
 80013ee:	fbb4 f0f9 	udiv	r0, r4, r9
 80013f2:	fb09 4410 	mls	r4, r9, r0, r4
 80013f6:	fb00 fe0e 	mul.w	lr, r0, lr
 80013fa:	b2ad      	uxth	r5, r5
 80013fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001400:	45a6      	cmp	lr, r4
 8001402:	d908      	bls.n	8001416 <__udivmoddi4+0x1e2>
 8001404:	eb1c 0404 	adds.w	r4, ip, r4
 8001408:	f100 35ff 	add.w	r5, r0, #4294967295
 800140c:	d26c      	bcs.n	80014e8 <__udivmoddi4+0x2b4>
 800140e:	45a6      	cmp	lr, r4
 8001410:	d96a      	bls.n	80014e8 <__udivmoddi4+0x2b4>
 8001412:	3802      	subs	r0, #2
 8001414:	4464      	add	r4, ip
 8001416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800141a:	fba0 9502 	umull	r9, r5, r0, r2
 800141e:	eba4 040e 	sub.w	r4, r4, lr
 8001422:	42ac      	cmp	r4, r5
 8001424:	46c8      	mov	r8, r9
 8001426:	46ae      	mov	lr, r5
 8001428:	d356      	bcc.n	80014d8 <__udivmoddi4+0x2a4>
 800142a:	d053      	beq.n	80014d4 <__udivmoddi4+0x2a0>
 800142c:	2e00      	cmp	r6, #0
 800142e:	d069      	beq.n	8001504 <__udivmoddi4+0x2d0>
 8001430:	ebb3 0208 	subs.w	r2, r3, r8
 8001434:	eb64 040e 	sbc.w	r4, r4, lr
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	fa04 f707 	lsl.w	r7, r4, r7
 8001440:	431f      	orrs	r7, r3
 8001442:	40cc      	lsrs	r4, r1
 8001444:	e9c6 7400 	strd	r7, r4, [r6]
 8001448:	2100      	movs	r1, #0
 800144a:	e747      	b.n	80012dc <__udivmoddi4+0xa8>
 800144c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001450:	f1c2 0120 	rsb	r1, r2, #32
 8001454:	fa25 f301 	lsr.w	r3, r5, r1
 8001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800145c:	fa20 f101 	lsr.w	r1, r0, r1
 8001460:	4095      	lsls	r5, r2
 8001462:	430d      	orrs	r5, r1
 8001464:	fbb3 f1f7 	udiv	r1, r3, r7
 8001468:	fb07 3311 	mls	r3, r7, r1, r3
 800146c:	fa1f fe8c 	uxth.w	lr, ip
 8001470:	0c28      	lsrs	r0, r5, #16
 8001472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001476:	fb01 f30e 	mul.w	r3, r1, lr
 800147a:	4283      	cmp	r3, r0
 800147c:	fa04 f402 	lsl.w	r4, r4, r2
 8001480:	d908      	bls.n	8001494 <__udivmoddi4+0x260>
 8001482:	eb1c 0000 	adds.w	r0, ip, r0
 8001486:	f101 38ff 	add.w	r8, r1, #4294967295
 800148a:	d22f      	bcs.n	80014ec <__udivmoddi4+0x2b8>
 800148c:	4283      	cmp	r3, r0
 800148e:	d92d      	bls.n	80014ec <__udivmoddi4+0x2b8>
 8001490:	3902      	subs	r1, #2
 8001492:	4460      	add	r0, ip
 8001494:	1ac0      	subs	r0, r0, r3
 8001496:	fbb0 f3f7 	udiv	r3, r0, r7
 800149a:	fb07 0013 	mls	r0, r7, r3, r0
 800149e:	b2ad      	uxth	r5, r5
 80014a0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014a4:	fb03 f00e 	mul.w	r0, r3, lr
 80014a8:	42a8      	cmp	r0, r5
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x28a>
 80014ac:	eb1c 0505 	adds.w	r5, ip, r5
 80014b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80014b4:	d216      	bcs.n	80014e4 <__udivmoddi4+0x2b0>
 80014b6:	42a8      	cmp	r0, r5
 80014b8:	d914      	bls.n	80014e4 <__udivmoddi4+0x2b0>
 80014ba:	3b02      	subs	r3, #2
 80014bc:	4465      	add	r5, ip
 80014be:	1a28      	subs	r0, r5, r0
 80014c0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014c4:	e738      	b.n	8001338 <__udivmoddi4+0x104>
 80014c6:	4631      	mov	r1, r6
 80014c8:	4630      	mov	r0, r6
 80014ca:	e707      	b.n	80012dc <__udivmoddi4+0xa8>
 80014cc:	462f      	mov	r7, r5
 80014ce:	e6e4      	b.n	800129a <__udivmoddi4+0x66>
 80014d0:	4618      	mov	r0, r3
 80014d2:	e6f9      	b.n	80012c8 <__udivmoddi4+0x94>
 80014d4:	454b      	cmp	r3, r9
 80014d6:	d2a9      	bcs.n	800142c <__udivmoddi4+0x1f8>
 80014d8:	ebb9 0802 	subs.w	r8, r9, r2
 80014dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80014e0:	3801      	subs	r0, #1
 80014e2:	e7a3      	b.n	800142c <__udivmoddi4+0x1f8>
 80014e4:	4643      	mov	r3, r8
 80014e6:	e7ea      	b.n	80014be <__udivmoddi4+0x28a>
 80014e8:	4628      	mov	r0, r5
 80014ea:	e794      	b.n	8001416 <__udivmoddi4+0x1e2>
 80014ec:	4641      	mov	r1, r8
 80014ee:	e7d1      	b.n	8001494 <__udivmoddi4+0x260>
 80014f0:	46d0      	mov	r8, sl
 80014f2:	e77b      	b.n	80013ec <__udivmoddi4+0x1b8>
 80014f4:	4464      	add	r4, ip
 80014f6:	3802      	subs	r0, #2
 80014f8:	e747      	b.n	800138a <__udivmoddi4+0x156>
 80014fa:	3b02      	subs	r3, #2
 80014fc:	4465      	add	r5, ip
 80014fe:	e72f      	b.n	8001360 <__udivmoddi4+0x12c>
 8001500:	4608      	mov	r0, r1
 8001502:	e706      	b.n	8001312 <__udivmoddi4+0xde>
 8001504:	4631      	mov	r1, r6
 8001506:	e6e9      	b.n	80012dc <__udivmoddi4+0xa8>

08001508 <__aeabi_idiv0>:
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	889b      	ldrh	r3, [r3, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	88db      	ldrh	r3, [r3, #6]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
	if (total < 0)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da05      	bge.n	8001538 <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	891b      	ldrh	r3, [r3, #8]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4413      	add	r3, r2
 8001536:	617b      	str	r3, [r7, #20]

	if (total == 0)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e031      	b.n	80015a8 <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	88db      	ldrh	r3, [r3, #6]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	8912      	ldrh	r2, [r2, #8]
 8001550:	fbb3 f0f2 	udiv	r0, r3, r2
 8001554:	fb00 f202 	mul.w	r2, r0, r2
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
			* circ_buf->element_size);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	895b      	ldrh	r3, [r3, #10]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001566:	440b      	add	r3, r1
 8001568:	613b      	str	r3, [r7, #16]

	if (elem)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	895b      	ldrh	r3, [r3, #10]
 8001574:	461a      	mov	r2, r3
 8001576:	6939      	ldr	r1, [r7, #16]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f00d f8cb 	bl	800e714 <memcpy>

	if (!read_only) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d110      	bne.n	80015a6 <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	88db      	ldrh	r3, [r3, #6]
 8001588:	3301      	adds	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	88db      	ldrh	r3, [r3, #6]
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	429a      	cmp	r2, r3
 800159e:	db02      	blt.n	80015a6 <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	889b      	ldrh	r3, [r3, #4]
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	88db      	ldrh	r3, [r3, #6]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	891b      	ldrh	r3, [r3, #8]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	891b      	ldrh	r3, [r3, #8]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	db02      	blt.n	80015ec <__circ_gbuf_push+0x3c>
		return -1; // Full
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e02b      	b.n	8001644 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	889b      	ldrh	r3, [r3, #4]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	8912      	ldrh	r2, [r2, #8]
 80015f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80015fc:	fb00 f202 	mul.w	r2, r0, r2
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
			* circ_buf->element_size );
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	895b      	ldrh	r3, [r3, #10]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 800160e:	440b      	add	r3, r1
 8001610:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	895b      	ldrh	r3, [r3, #10]
 8001616:	461a      	mov	r2, r3
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f00d f87a 	bl	800e714 <memcpy>
	circ_buf->push_count++;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	891b      	ldrh	r3, [r3, #8]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	429a      	cmp	r2, r3
 800163a:	db02      	blt.n	8001642 <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	809a      	strh	r2, [r3, #4]
	return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <Relay_control>:
extern uint16_t DAC_tx_tmp_buffer[2];
extern float DDS_FTW;


//==============================================================================================
void Relay_control(uint8_t relay,uint8_t state){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
	int Relay_address=0;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
	if(relay>3 || state>1) return;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b03      	cmp	r3, #3
 8001664:	f200 80a3 	bhi.w	80017ae <Relay_control+0x162>
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	2b01      	cmp	r3, #1
 800166c:	f200 809f 	bhi.w	80017ae <Relay_control+0x162>

	if(relay==0x00 && state==0x00)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d141      	bne.n	80016fa <Relay_control+0xae>
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d13e      	bne.n	80016fa <Relay_control+0xae>
	{
		while(Relay_address<=0x5) // Set all OUTx to zero
 800167c:	e039      	b.n	80016f2 <Relay_control+0xa6>
		{
			HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	2102      	movs	r1, #2
 800168c:	484a      	ldr	r0, [pc, #296]	; (80017b8 <Relay_control+0x16c>)
 800168e:	f004 f804 	bl	800569a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	105b      	asrs	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	2104      	movs	r1, #4
 80016a2:	4845      	ldr	r0, [pc, #276]	; (80017b8 <Relay_control+0x16c>)
 80016a4:	f003 fff9 	bl	800569a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	109b      	asrs	r3, r3, #2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	2108      	movs	r1, #8
 80016b8:	483f      	ldr	r0, [pc, #252]	; (80017b8 <Relay_control+0x16c>)
 80016ba:	f003 ffee 	bl	800569a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 80016be:	2200      	movs	r2, #0
 80016c0:	2101      	movs	r1, #1
 80016c2:	483d      	ldr	r0, [pc, #244]	; (80017b8 <Relay_control+0x16c>)
 80016c4:	f003 ffe9 	bl	800569a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ce:	483b      	ldr	r0, [pc, #236]	; (80017bc <Relay_control+0x170>)
 80016d0:	f003 ffe3 	bl	800569a <HAL_GPIO_WritePin>
			HAL_Delay(1); // wait 1ms
 80016d4:	2001      	movs	r0, #1
 80016d6:	f003 f97b 	bl	80049d0 <HAL_Delay>
			HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e0:	4836      	ldr	r0, [pc, #216]	; (80017bc <Relay_control+0x170>)
 80016e2:	f003 ffda 	bl	800569a <HAL_GPIO_WritePin>
			HAL_Delay(1); // wait 1ms
 80016e6:	2001      	movs	r0, #1
 80016e8:	f003 f972 	bl	80049d0 <HAL_Delay>
			Relay_address++;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
		while(Relay_address<=0x5) // Set all OUTx to zero
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	ddc2      	ble.n	800167e <Relay_control+0x32>
		}
		return;
 80016f8:	e05a      	b.n	80017b0 <Relay_control+0x164>
	}


	switch (relay)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d006      	beq.n	800170e <Relay_control+0xc2>
 8001700:	2b03      	cmp	r3, #3
 8001702:	dc1f      	bgt.n	8001744 <Relay_control+0xf8>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d014      	beq.n	8001732 <Relay_control+0xe6>
 8001708:	2b02      	cmp	r3, #2
 800170a:	d009      	beq.n	8001720 <Relay_control+0xd4>
 800170c:	e01a      	b.n	8001744 <Relay_control+0xf8>
	{
	case 3:
		if (state==1){
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <Relay_control+0xce>
			Relay_address=0x5; //OUT6
 8001714:	2305      	movs	r3, #5
 8001716:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x4; //OUT5
		} break;
 8001718:	e014      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x4; //OUT5
 800171a:	2304      	movs	r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
		} break;
 800171e:	e011      	b.n	8001744 <Relay_control+0xf8>
	case 2:
		if (state==1){
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <Relay_control+0xe0>
			Relay_address=0x3; //OUT4
 8001726:	2303      	movs	r3, #3
 8001728:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x2; //OUT3
		} break;
 800172a:	e00b      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x2; //OUT3
 800172c:	2302      	movs	r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
		} break;
 8001730:	e008      	b.n	8001744 <Relay_control+0xf8>
	case 1:
		if (state==1){
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <Relay_control+0xf2>
			Relay_address=0x1; //OUT2
 8001738:	2301      	movs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x0; //OUT1
		} break;
 800173c:	e001      	b.n	8001742 <Relay_control+0xf6>
			Relay_address=0x0; //OUT1
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
		} break;
 8001742:	bf00      	nop
	}

	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	2102      	movs	r1, #2
 8001752:	4819      	ldr	r0, [pc, #100]	; (80017b8 <Relay_control+0x16c>)
 8001754:	f003 ffa1 	bl	800569a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	105b      	asrs	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	2104      	movs	r1, #4
 8001768:	4813      	ldr	r0, [pc, #76]	; (80017b8 <Relay_control+0x16c>)
 800176a:	f003 ff96 	bl	800569a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	109b      	asrs	r3, r3, #2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	2108      	movs	r1, #8
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <Relay_control+0x16c>)
 8001780:	f003 ff8b 	bl	800569a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 1); // LVL 1
 8001784:	2201      	movs	r2, #1
 8001786:	2101      	movs	r1, #1
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <Relay_control+0x16c>)
 800178a:	f003 ff86 	bl	800569a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <Relay_control+0x170>)
 8001796:	f003 ff80 	bl	800569a <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 800179a:	2001      	movs	r0, #1
 800179c:	f003 f918 	bl	80049d0 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <Relay_control+0x170>)
 80017a8:	f003 ff77 	bl	800569a <HAL_GPIO_WritePin>
 80017ac:	e000      	b.n	80017b0 <Relay_control+0x164>
	if(relay>3 || state>1) return;
 80017ae:	bf00      	nop
}
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020800 	.word	0x40020800

080017c0 <CPLD_control>:
//==============================================================================================



//==============================================================================================
void CPLD_control(FunctionalState state){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	uint8_t send_word=0x00;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]

	// Calculate CPLD divider to expand DDS FTW to 0.1 ppm
	float dds_tmp_calc=DDS_clock_frequecny;
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <CPLD_control+0x10c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
	dds_tmp_calc/=(float)0xFFFFFFFF; // 10MHz / 2^32 = 0.0023283 Hz DDS FTW resolution
 80017d4:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff fba9 	bl	8000f30 <__aeabi_fdiv>
 80017de:	4603      	mov	r3, r0
 80017e0:	60fb      	str	r3, [r7, #12]
	dds_tmp_calc=dds_tmp_calc/(DDS_target_frequecny/(float)1E7); // 0.0023283 Hz / (74.898214 Hz / 1E7) = 310.86 minimum CPLD divider
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <CPLD_control+0x110>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	493b      	ldr	r1, [pc, #236]	; (80018d4 <CPLD_control+0x114>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fba1 	bl	8000f30 <__aeabi_fdiv>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4619      	mov	r1, r3
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f7ff fb9c 	bl	8000f30 <__aeabi_fdiv>
 80017f8:	4603      	mov	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<0x0F; i++) // find CPLD tuning word
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e017      	b.n	8001832 <CPLD_control+0x72>
	{
		if(((1<<i)+1) > dds_tmp_calc)
 8001802:	2201      	movs	r2, #1
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	3301      	adds	r3, #1
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fa87 	bl	8000d20 <__aeabi_i2f>
 8001812:	4603      	mov	r3, r0
 8001814:	4619      	mov	r1, r3
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff fc74 	bl	8001104 <__aeabi_fcmplt>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <CPLD_control+0x6c>
		{
			CPLD_WORD=i;
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <CPLD_control+0x118>)
 8001828:	701a      	strb	r2, [r3, #0]
			break;
 800182a:	e005      	b.n	8001838 <CPLD_control+0x78>
	for(int i=1; i<0x0F; i++) // find CPLD tuning word
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	3301      	adds	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b0e      	cmp	r3, #14
 8001836:	dde4      	ble.n	8001802 <CPLD_control+0x42>
		}
	}

	if(state==CPLD_ON_STATE)send_word=CPLD_WORD;
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <CPLD_control+0x84>
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <CPLD_control+0x118>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin,  send_word & 0x1     );
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	2101      	movs	r1, #1
 8001850:	4822      	ldr	r0, [pc, #136]	; (80018dc <CPLD_control+0x11c>)
 8001852:	f003 ff22 	bl	800569a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin, (send_word & 0x2) >>1);
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	105b      	asrs	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	2102      	movs	r1, #2
 8001866:	481d      	ldr	r0, [pc, #116]	; (80018dc <CPLD_control+0x11c>)
 8001868:	f003 ff17 	bl	800569a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (send_word & 0x4) >>2);
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	109b      	asrs	r3, r3, #2
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	2104      	movs	r1, #4
 800187c:	4817      	ldr	r0, [pc, #92]	; (80018dc <CPLD_control+0x11c>)
 800187e:	f003 ff0c 	bl	800569a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (send_word & 0x8) >>3);
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	10db      	asrs	r3, r3, #3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	2108      	movs	r1, #8
 8001892:	4812      	ldr	r0, [pc, #72]	; (80018dc <CPLD_control+0x11c>)
 8001894:	f003 ff01 	bl	800569a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_SET); // Send strobe
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189e:	4810      	ldr	r0, [pc, #64]	; (80018e0 <CPLD_control+0x120>)
 80018a0:	f003 fefb 	bl	800569a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <CPLD_control+0x120>)
 80018ac:	f003 fef5 	bl	800569a <HAL_GPIO_WritePin>

	if(state==CPLD_OFF_STATE)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <CPLD_control+0xfe>
	{
		cfg.LDACMODE=0;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <CPLD_control+0x124>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		cfg.LDACMODE=1;
	}
}
 80018bc:	e002      	b.n	80018c4 <CPLD_control+0x104>
		cfg.LDACMODE=1;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <CPLD_control+0x124>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	709a      	strb	r2, [r3, #2]
}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000738 	.word	0x20000738
 80018d0:	20000c54 	.word	0x20000c54
 80018d4:	4b189680 	.word	0x4b189680
 80018d8:	20000c4e 	.word	0x20000c4e
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020800 	.word	0x40020800
 80018e4:	20000c44 	.word	0x20000c44

080018e8 <DAC_Write>:



//==============================================================================================
void DAC_Write(uint32_t value)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <DAC_Write+0x6c>)
 80018f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	4a13      	ldr	r2, [pc, #76]	; (8001954 <DAC_Write+0x6c>)
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	4413      	add	r3, r2
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <DAC_Write+0x6c>)
 800190c:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <DAC_Write+0x6c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0c1b      	lsrs	r3, r3, #16
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <DAC_Write+0x70>)
 8001918:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <DAC_Write+0x6c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <DAC_Write+0x70>)
 8001922:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2110      	movs	r1, #16
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <DAC_Write+0x74>)
 800192a:	f003 feb6 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 800192e:	2302      	movs	r3, #2
 8001930:	2202      	movs	r2, #2
 8001932:	4909      	ldr	r1, [pc, #36]	; (8001958 <DAC_Write+0x70>)
 8001934:	480a      	ldr	r0, [pc, #40]	; (8001960 <DAC_Write+0x78>)
 8001936:	f006 fdb5 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2110      	movs	r1, #16
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <DAC_Write+0x74>)
 8001940:	f003 feab 	bl	800569a <HAL_GPIO_WritePin>
	DAC_code=value;
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <DAC_Write+0x7c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000c3c 	.word	0x20000c3c
 8001958:	20000c40 	.word	0x20000c40
 800195c:	40020000 	.word	0x40020000
 8001960:	20000c74 	.word	0x20000c74
 8001964:	20000c6c 	.word	0x20000c6c

08001968 <DAC_Write_FAST>:

//==============================================================================================
void DAC_Write_FAST(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	2110      	movs	r1, #16
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <DAC_Write_FAST+0x28>)
 8001972:	f003 fe92 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001976:	2302      	movs	r3, #2
 8001978:	2202      	movs	r2, #2
 800197a:	4906      	ldr	r1, [pc, #24]	; (8001994 <DAC_Write_FAST+0x2c>)
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <DAC_Write_FAST+0x30>)
 800197e:	f006 fd91 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	2110      	movs	r1, #16
 8001986:	4802      	ldr	r0, [pc, #8]	; (8001990 <DAC_Write_FAST+0x28>)
 8001988:	f003 fe87 	bl	800569a <HAL_GPIO_WritePin>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40020000 	.word	0x40020000
 8001994:	20000c40 	.word	0x20000c40
 8001998:	20000c74 	.word	0x20000c74

0800199c <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

	DAC_tx_buffer=0x02000000; // Write CONFIG1
 80019a0:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <DAC_SendInit+0xfc>)
 80019a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 80019a8:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <DAC_SendInit+0x100>)
 80019aa:	7a1b      	ldrb	r3, [r3, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	f003 0210 	and.w	r2, r3, #16
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <DAC_SendInit+0xfc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a37      	ldr	r2, [pc, #220]	; (8001a98 <DAC_SendInit+0xfc>)
 80019ba:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x06)<<6;
 80019bc:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <DAC_SendInit+0x100>)
 80019be:	79db      	ldrb	r3, [r3, #7]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <DAC_SendInit+0xfc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <DAC_SendInit+0xfc>)
 80019ce:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 80019d0:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <DAC_SendInit+0x100>)
 80019d2:	799b      	ldrb	r3, [r3, #6]
 80019d4:	029b      	lsls	r3, r3, #10
 80019d6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <DAC_SendInit+0xfc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <DAC_SendInit+0xfc>)
 80019e2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <DAC_SendInit+0x100>)
 80019e6:	795b      	ldrb	r3, [r3, #5]
 80019e8:	02db      	lsls	r3, r3, #11
 80019ea:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <DAC_SendInit+0xfc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <DAC_SendInit+0xfc>)
 80019f6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <DAC_SendInit+0x100>)
 80019fa:	791b      	ldrb	r3, [r3, #4]
 80019fc:	031b      	lsls	r3, r3, #12
 80019fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a0a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <DAC_SendInit+0x100>)
 8001a0e:	78db      	ldrb	r3, [r3, #3]
 8001a10:	035b      	lsls	r3, r3, #13
 8001a12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a1e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <DAC_SendInit+0x100>)
 8001a22:	789b      	ldrb	r3, [r3, #2]
 8001a24:	039b      	lsls	r3, r3, #14
 8001a26:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a32:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <DAC_SendInit+0x100>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	049b      	lsls	r3, r3, #18
 8001a3a:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a46:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <DAC_SendInit+0x100>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	05db      	lsls	r3, r3, #23
 8001a4e:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a5a:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0c1b      	lsrs	r3, r3, #16
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a66:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <DAC_SendInit+0xfc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a70:	805a      	strh	r2, [r3, #2]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2110      	movs	r1, #16
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <DAC_SendInit+0x108>)
 8001a78:	f003 fe0f 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <DAC_SendInit+0x104>)
 8001a82:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <DAC_SendInit+0x10c>)
 8001a84:	f006 fd0e 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <DAC_SendInit+0x108>)
 8001a8e:	f003 fe04 	bl	800569a <HAL_GPIO_WritePin>

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000c3c 	.word	0x20000c3c
 8001a9c:	20000c44 	.word	0x20000c44
 8001aa0:	20000c40 	.word	0x20000c40
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	20000c74 	.word	0x20000c74

08001aac <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
	uint32_t DAC_tx_buffer;
	uint16_t DAC_tx_tmp_buffer[2];

	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	813b      	strh	r3, [r7, #8]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	817b      	strh	r3, [r7, #10]
 8001aba:	2300      	movs	r3, #0
 8001abc:	82fb      	strh	r3, [r7, #22]

	//CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal

	cfg.EN_TMP_CAL=1;
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <DAC_TEMP_CAL+0xd0>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
	DAC_SendInit();
 8001ac4:	f7ff ff6a 	bl	800199c <DAC_SendInit>

	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <DAC_TEMP_CAL+0xd4>)
 8001aca:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	81bb      	strh	r3, [r7, #12]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	81fb      	strh	r3, [r7, #14]

	DAC_tx_buffer=0x85000000; // read status register
 8001ada:	f04f 4305 	mov.w	r3, #2231369728	; 0x85000000
 8001ade:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	80bb      	strh	r3, [r7, #4]
	DAC_tx_tmp_buffer2[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2110      	movs	r1, #16
 8001af2:	4824      	ldr	r0, [pc, #144]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001af4:	f003 fdd1 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001af8:	f107 010c 	add.w	r1, r7, #12
 8001afc:	2302      	movs	r3, #2
 8001afe:	2202      	movs	r2, #2
 8001b00:	4821      	ldr	r0, [pc, #132]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b02:	f006 fccf 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2110      	movs	r1, #16
 8001b0a:	481e      	ldr	r0, [pc, #120]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b0c:	f003 fdc5 	bl	800569a <HAL_GPIO_WritePin>

	do{ // Check complete flag
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2110      	movs	r1, #16
 8001b14:	481b      	ldr	r0, [pc, #108]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b16:	f003 fdc0 	bl	800569a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 8001b1a:	1d39      	adds	r1, r7, #4
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4819      	ldr	r0, [pc, #100]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b22:	f006 fcbf 	bl	80084a4 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2110      	movs	r1, #16
 8001b2a:	4816      	ldr	r0, [pc, #88]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b2c:	f003 fdb5 	bl	800569a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2110      	movs	r1, #16
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b36:	f003 fdb0 	bl	800569a <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 2, 2);
 8001b3a:	f107 0108 	add.w	r1, r7, #8
 8001b3e:	2302      	movs	r3, #2
 8001b40:	2202      	movs	r2, #2
 8001b42:	4811      	ldr	r0, [pc, #68]	; (8001b88 <DAC_TEMP_CAL+0xdc>)
 8001b44:	f006 fdea 	bl	800871c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <DAC_TEMP_CAL+0xd8>)
 8001b4e:	f003 fda4 	bl	800569a <HAL_GPIO_WritePin>
		ALM=(spi_receive[1] & 0x1000) >> 12;
 8001b52:	897b      	ldrh	r3, [r7, #10]
 8001b54:	131b      	asrs	r3, r3, #12
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	82fb      	strh	r3, [r7, #22]
		if(ALM!=1)HAL_Delay(10);
 8001b5e:	8afb      	ldrh	r3, [r7, #22]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d002      	beq.n	8001b6a <DAC_TEMP_CAL+0xbe>
 8001b64:	200a      	movs	r0, #10
 8001b66:	f002 ff33 	bl	80049d0 <HAL_Delay>
	}while(ALM!=1);
 8001b6a:	8afb      	ldrh	r3, [r7, #22]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d1cf      	bne.n	8001b10 <DAC_TEMP_CAL+0x64>
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000c44 	.word	0x20000c44
 8001b80:	04000100 	.word	0x04000100
 8001b84:	40020000 	.word	0x40020000
 8001b88:	20000c74 	.word	0x20000c74

08001b8c <DDS_Calculation>:

void DDS_Calculation(void)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
	float hw_limit=1000; // 1kHz hardware optimized limit
 8001b92:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <DDS_Calculation+0x1f0>)
 8001b94:	613b      	str	r3, [r7, #16]
	float dac_counts=DAC_CODE_TOP-1;
 8001b96:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <DDS_Calculation+0x1f4>)
 8001b98:	60fb      	str	r3, [r7, #12]
	float corr_coeff;
	float dac_tmp=DAC_code;
 8001b9a:	4b7a      	ldr	r3, [pc, #488]	; (8001d84 <DDS_Calculation+0x1f8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f8ba 	bl	8000d18 <__aeabi_ui2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60bb      	str	r3, [r7, #8]
	float second_left;
	uint32_t codes_left;

	// Linearity correction
	corr_coeff=corr_coeff_1*dac_tmp*dac_tmp;
 8001ba8:	4b77      	ldr	r3, [pc, #476]	; (8001d88 <DDS_Calculation+0x1fc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f90a 	bl	8000dc8 <__aeabi_fmul>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68b8      	ldr	r0, [r7, #8]
 8001bba:	f7ff f905 	bl	8000dc8 <__aeabi_fmul>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_2*dac_tmp;
 8001bc2:	4b72      	ldr	r3, [pc, #456]	; (8001d8c <DDS_Calculation+0x200>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f8fd 	bl	8000dc8 <__aeabi_fmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fff0 	bl	8000bb8 <__addsf3>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_3;
 8001bdc:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <DDS_Calculation+0x204>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe ffe8 	bl	8000bb8 <__addsf3>
 8001be8:	4603      	mov	r3, r0
 8001bea:	607b      	str	r3, [r7, #4]

	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed); // 1048575 / (14V / 0.01V/s) = 74.898214 Hz
 8001bec:	4b69      	ldr	r3, [pc, #420]	; (8001d94 <DDS_Calculation+0x208>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a69      	ldr	r2, [pc, #420]	; (8001d98 <DDS_Calculation+0x20c>)
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f99a 	bl	8000f30 <__aeabi_fdiv>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff f995 	bl	8000f30 <__aeabi_fdiv>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b64      	ldr	r3, [pc, #400]	; (8001d9c <DDS_Calculation+0x210>)
 8001c0c:	601a      	str	r2, [r3, #0]

	if(DDS_target_frequecny>hw_limit)
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <DDS_Calculation+0x210>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	6938      	ldr	r0, [r7, #16]
 8001c16:	f7ff fa75 	bl	8001104 <__aeabi_fcmplt>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d02e      	beq.n	8001c7e <DDS_Calculation+0xf2>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 8001c20:	4b5e      	ldr	r3, [pc, #376]	; (8001d9c <DDS_Calculation+0x210>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6939      	ldr	r1, [r7, #16]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f982 	bl	8000f30 <__aeabi_fdiv>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fa90 	bl	8001154 <__aeabi_f2uiz>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4a5a      	ldr	r2, [pc, #360]	; (8001da0 <DDS_Calculation+0x214>)
 8001c38:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001c3a:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <DDS_Calculation+0x208>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <DDS_Calculation+0x20c>)
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f973 	bl	8000f30 <__aeabi_fdiv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff f96e 	bl	8000f30 <__aeabi_fdiv>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <DDS_Calculation+0x210>)
 8001c5a:	601a      	str	r2, [r3, #0]
		DDS_target_frequecny/=(float)DDS_target_multipiller;
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <DDS_Calculation+0x210>)
 8001c5e:	681c      	ldr	r4, [r3, #0]
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <DDS_Calculation+0x214>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f857 	bl	8000d18 <__aeabi_ui2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff f95e 	bl	8000f30 <__aeabi_fdiv>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <DDS_Calculation+0x210>)
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e002      	b.n	8001c84 <DDS_Calculation+0xf8>
	} else DDS_target_multipiller = 1;
 8001c7e:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <DDS_Calculation+0x214>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

	DDS_FTW=(((DDS_target_frequecny/corr_coeff)*((1<<CPLD_WORD)+1))/DDS_clock_frequecny)*(float)0xFFFFFFFF;
 8001c84:	4b45      	ldr	r3, [pc, #276]	; (8001d9c <DDS_Calculation+0x210>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f950 	bl	8000f30 <__aeabi_fdiv>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461c      	mov	r4, r3
 8001c94:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <DDS_Calculation+0x218>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f83d 	bl	8000d20 <__aeabi_i2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff f88c 	bl	8000dc8 <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <DDS_Calculation+0x21c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f7ff f938 	bl	8000f30 <__aeabi_fdiv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f87e 	bl	8000dc8 <__aeabi_fmul>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <DDS_Calculation+0x220>)
 8001cd2:	601a      	str	r2, [r3, #0]

	if(DAC_code_direction)
 8001cd4:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <DDS_Calculation+0x224>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <DDS_Calculation+0x160>
	{
		codes_left=0xFFFFF-DAC_code;
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <DDS_Calculation+0x1f8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8001ce4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e002      	b.n	8001cf2 <DDS_Calculation+0x166>
	}
	else
	{
		codes_left=DAC_code;
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <DDS_Calculation+0x1f8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	617b      	str	r3, [r7, #20]
	}

	second_left=codes_left/DDS_target_multipiller/DDS_target_frequecny;
 8001cf2:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <DDS_Calculation+0x214>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff f80b 	bl	8000d18 <__aeabi_ui2f>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <DDS_Calculation+0x210>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7ff f910 	bl	8000f30 <__aeabi_fdiv>
 8001d10:	4603      	mov	r3, r0
 8001d12:	603b      	str	r3, [r7, #0]
	eta_second=(uint32_t)second_left % 60;
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff fa1d 	bl	8001154 <__aeabi_f2uiz>
 8001d1a:	4601      	mov	r1, r0
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <DDS_Calculation+0x228>)
 8001d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8001d22:	095a      	lsrs	r2, r3, #5
 8001d24:	4613      	mov	r3, r2
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	1aca      	subs	r2, r1, r3
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <DDS_Calculation+0x22c>)
 8001d32:	701a      	strb	r2, [r3, #0]
	eta_minute=(uint32_t)(second_left / 60) % 60;
 8001d34:	4921      	ldr	r1, [pc, #132]	; (8001dbc <DDS_Calculation+0x230>)
 8001d36:	6838      	ldr	r0, [r7, #0]
 8001d38:	f7ff f8fa 	bl	8000f30 <__aeabi_fdiv>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fa08 	bl	8001154 <__aeabi_f2uiz>
 8001d44:	4601      	mov	r1, r0
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <DDS_Calculation+0x228>)
 8001d48:	fba3 2301 	umull	r2, r3, r3, r1
 8001d4c:	095a      	lsrs	r2, r3, #5
 8001d4e:	4613      	mov	r3, r2
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	1aca      	subs	r2, r1, r3
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <DDS_Calculation+0x234>)
 8001d5c:	701a      	strb	r2, [r3, #0]
	eta_hours=(uint32_t) second_left / 3600;
 8001d5e:	6838      	ldr	r0, [r7, #0]
 8001d60:	f7ff f9f8 	bl	8001154 <__aeabi_f2uiz>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <DDS_Calculation+0x238>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	0adb      	lsrs	r3, r3, #11
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <DDS_Calculation+0x23c>)
 8001d72:	701a      	strb	r2, [r3, #0]
}
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd90      	pop	{r4, r7, pc}
 8001d7c:	447a0000 	.word	0x447a0000
 8001d80:	497fffe0 	.word	0x497fffe0
 8001d84:	20000c6c 	.word	0x20000c6c
 8001d88:	20000aac 	.word	0x20000aac
 8001d8c:	20000ab0 	.word	0x20000ab0
 8001d90:	20000ab4 	.word	0x20000ab4
 8001d94:	20000c5c 	.word	0x20000c5c
 8001d98:	20000c58 	.word	0x20000c58
 8001d9c:	20000c54 	.word	0x20000c54
 8001da0:	20000734 	.word	0x20000734
 8001da4:	20000c4e 	.word	0x20000c4e
 8001da8:	20000738 	.word	0x20000738
 8001dac:	20000c50 	.word	0x20000c50
 8001db0:	20000c70 	.word	0x20000c70
 8001db4:	88888889 	.word	0x88888889
 8001db8:	20000c1a 	.word	0x20000c1a
 8001dbc:	42700000 	.word	0x42700000
 8001dc0:	20000c19 	.word	0x20000c19
 8001dc4:	91a2b3c5 	.word	0x91a2b3c5
 8001dc8:	20000c18 	.word	0x20000c18

08001dcc <DDS_Init>:

//==============================================================================================
void DDS_Init(void)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];
	DDS_Calculation();
 8001dd2:	f7ff fedb 	bl	8001b8c <DDS_Calculation>

	HAL_Delay(100);
 8001dd6:	2064      	movs	r0, #100	; 0x64
 8001dd8:	f002 fdfa 	bl	80049d0 <HAL_Delay>

	//CONTROL REGISTER WRITE SLEEP =1 ,	RESET = 1,	CLR = 1
	DDS_tx_buffer[0]=0xC000; // Control DDS (D15=1, D14=1)
 8001ddc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001de0:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=0x7 << 11; //  SLEEP = 1 , RESET = 1,	CLR = 1
 8001de2:	88bb      	ldrh	r3, [r7, #4]
 8001de4:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df2:	4861      	ldr	r0, [pc, #388]	; (8001f78 <DDS_Init+0x1ac>)
 8001df4:	f003 fc51 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001df8:	1d39      	adds	r1, r7, #4
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	485f      	ldr	r0, [pc, #380]	; (8001f7c <DDS_Init+0x1b0>)
 8001e00:	f006 fb50 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e0a:	485b      	ldr	r0, [pc, #364]	; (8001f78 <DDS_Init+0x1ac>)
 8001e0c:	f003 fc45 	bl	800569a <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001e10:	2064      	movs	r0, #100	; 0x64
 8001e12:	f002 fddd 	bl	80049d0 <HAL_Delay>
	//DO NOT !!! SET SYNC AND/OR SELSRC TO 1

	//WRITE INITIAL DATA

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001e16:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001e1a:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001e1c:	88bc      	ldrh	r4, [r7, #4]
 8001e1e:	4b58      	ldr	r3, [pc, #352]	; (8001f80 <DDS_Init+0x1b4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f996 	bl	8001154 <__aeabi_f2uiz>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	0e1b      	lsrs	r3, r3, #24
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4423      	add	r3, r4
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3a:	484f      	ldr	r0, [pc, #316]	; (8001f78 <DDS_Init+0x1ac>)
 8001e3c:	f003 fc2d 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e40:	1d39      	adds	r1, r7, #4
 8001e42:	2305      	movs	r3, #5
 8001e44:	2201      	movs	r2, #1
 8001e46:	484d      	ldr	r0, [pc, #308]	; (8001f7c <DDS_Init+0x1b0>)
 8001e48:	f006 fb2c 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e52:	4849      	ldr	r0, [pc, #292]	; (8001f78 <DDS_Init+0x1ac>)
 8001e54:	f003 fc21 	bl	800569a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001e58:	2032      	movs	r0, #50	; 0x32
 8001e5a:	f002 fdb9 	bl	80049d0 <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001e5e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001e62:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001e64:	88bc      	ldrh	r4, [r7, #4]
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <DDS_Init+0x1b4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f972 	bl	8001154 <__aeabi_f2uiz>
 8001e70:	4603      	mov	r3, r0
 8001e72:	0c1b      	lsrs	r3, r3, #16
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4423      	add	r3, r4
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e80:	2200      	movs	r2, #0
 8001e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e86:	483c      	ldr	r0, [pc, #240]	; (8001f78 <DDS_Init+0x1ac>)
 8001e88:	f003 fc07 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e8c:	1d39      	adds	r1, r7, #4
 8001e8e:	2305      	movs	r3, #5
 8001e90:	2201      	movs	r2, #1
 8001e92:	483a      	ldr	r0, [pc, #232]	; (8001f7c <DDS_Init+0x1b0>)
 8001e94:	f006 fb06 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e9e:	4836      	ldr	r0, [pc, #216]	; (8001f78 <DDS_Init+0x1ac>)
 8001ea0:	f003 fbfb 	bl	800569a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001ea4:	2032      	movs	r0, #50	; 0x32
 8001ea6:	f002 fd93 	bl	80049d0 <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001eaa:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001eae:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001eb0:	88bc      	ldrh	r4, [r7, #4]
 8001eb2:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <DDS_Init+0x1b4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f94c 	bl	8001154 <__aeabi_f2uiz>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	4423      	add	r3, r4
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed2:	4829      	ldr	r0, [pc, #164]	; (8001f78 <DDS_Init+0x1ac>)
 8001ed4:	f003 fbe1 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ed8:	1d39      	adds	r1, r7, #4
 8001eda:	2305      	movs	r3, #5
 8001edc:	2201      	movs	r2, #1
 8001ede:	4827      	ldr	r0, [pc, #156]	; (8001f7c <DDS_Init+0x1b0>)
 8001ee0:	f006 fae0 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eea:	4823      	ldr	r0, [pc, #140]	; (8001f78 <DDS_Init+0x1ac>)
 8001eec:	f003 fbd5 	bl	800569a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001ef0:	2032      	movs	r0, #50	; 0x32
 8001ef2:	f002 fd6d 	bl	80049d0 <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001efa:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001efc:	88bc      	ldrh	r4, [r7, #4]
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <DDS_Init+0x1b4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f926 	bl	8001154 <__aeabi_f2uiz>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4423      	add	r3, r4
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1c:	4816      	ldr	r0, [pc, #88]	; (8001f78 <DDS_Init+0x1ac>)
 8001f1e:	f003 fbbc 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f22:	1d39      	adds	r1, r7, #4
 8001f24:	2305      	movs	r3, #5
 8001f26:	2201      	movs	r2, #1
 8001f28:	4814      	ldr	r0, [pc, #80]	; (8001f7c <DDS_Init+0x1b0>)
 8001f2a:	f006 fabb 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f34:	4810      	ldr	r0, [pc, #64]	; (8001f78 <DDS_Init+0x1ac>)
 8001f36:	f003 fbb0 	bl	800569a <HAL_GPIO_WritePin>


	HAL_Delay(100);
 8001f3a:	2064      	movs	r0, #100	; 0x64
 8001f3c:	f002 fd48 	bl	80049d0 <HAL_Delay>

	// CONTROL REGISTER WRITE, 	SLEEP = 0,	RESET = 0, CLR = 0

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Exit DAC from Sleep+Reset mode
 8001f40:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f44:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4c:	480a      	ldr	r0, [pc, #40]	; (8001f78 <DDS_Init+0x1ac>)
 8001f4e:	f003 fba4 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f52:	1d39      	adds	r1, r7, #4
 8001f54:	2305      	movs	r3, #5
 8001f56:	2201      	movs	r2, #1
 8001f58:	4808      	ldr	r0, [pc, #32]	; (8001f7c <DDS_Init+0x1b0>)
 8001f5a:	f006 faa3 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f64:	4804      	ldr	r0, [pc, #16]	; (8001f78 <DDS_Init+0x1ac>)
 8001f66:	f003 fb98 	bl	800569a <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001f6a:	2064      	movs	r0, #100	; 0x64
 8001f6c:	f002 fd30 	bl	80049d0 <HAL_Delay>

}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	20000ccc 	.word	0x20000ccc
 8001f80:	20000c50 	.word	0x20000c50

08001f84 <DDS_Update>:

//==============================================================================================
void DDS_Update(void)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001f8a:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001f8e:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001f90:	88bc      	ldrh	r4, [r7, #4]
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <DDS_Update+0x120>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff f8dc 	bl	8001154 <__aeabi_f2uiz>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	0e1b      	lsrs	r3, r3, #24
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4423      	add	r3, r4
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fae:	483e      	ldr	r0, [pc, #248]	; (80020a8 <DDS_Update+0x124>)
 8001fb0:	f003 fb73 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001fb4:	1d39      	adds	r1, r7, #4
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	2201      	movs	r2, #1
 8001fba:	483c      	ldr	r0, [pc, #240]	; (80020ac <DDS_Update+0x128>)
 8001fbc:	f006 fa72 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc6:	4838      	ldr	r0, [pc, #224]	; (80020a8 <DDS_Update+0x124>)
 8001fc8:	f003 fb67 	bl	800569a <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001fcc:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001fd0:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001fd2:	88bc      	ldrh	r4, [r7, #4]
 8001fd4:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <DDS_Update+0x120>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f8bb 	bl	8001154 <__aeabi_f2uiz>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4423      	add	r3, r4
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff4:	482c      	ldr	r0, [pc, #176]	; (80020a8 <DDS_Update+0x124>)
 8001ff6:	f003 fb50 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ffa:	1d39      	adds	r1, r7, #4
 8001ffc:	2305      	movs	r3, #5
 8001ffe:	2201      	movs	r2, #1
 8002000:	482a      	ldr	r0, [pc, #168]	; (80020ac <DDS_Update+0x128>)
 8002002:	f006 fa4f 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200c:	4826      	ldr	r0, [pc, #152]	; (80020a8 <DDS_Update+0x124>)
 800200e:	f003 fb44 	bl	800569a <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8002012:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8002016:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8002018:	88bc      	ldrh	r4, [r7, #4]
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <DDS_Update+0x120>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f898 	bl	8001154 <__aeabi_f2uiz>
 8002024:	4603      	mov	r3, r0
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	b29b      	uxth	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	b29b      	uxth	r3, r3
 800202e:	4423      	add	r3, r4
 8002030:	b29b      	uxth	r3, r3
 8002032:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002034:	2200      	movs	r2, #0
 8002036:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800203a:	481b      	ldr	r0, [pc, #108]	; (80020a8 <DDS_Update+0x124>)
 800203c:	f003 fb2d 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8002040:	1d39      	adds	r1, r7, #4
 8002042:	2305      	movs	r3, #5
 8002044:	2201      	movs	r2, #1
 8002046:	4819      	ldr	r0, [pc, #100]	; (80020ac <DDS_Update+0x128>)
 8002048:	f006 fa2c 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002052:	4815      	ldr	r0, [pc, #84]	; (80020a8 <DDS_Update+0x124>)
 8002054:	f003 fb21 	bl	800569a <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8002058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205c:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 800205e:	88bc      	ldrh	r4, [r7, #4]
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <DDS_Update+0x120>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f875 	bl	8001154 <__aeabi_f2uiz>
 800206a:	4603      	mov	r3, r0
 800206c:	b29b      	uxth	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	b29b      	uxth	r3, r3
 8002072:	4423      	add	r3, r4
 8002074:	b29b      	uxth	r3, r3
 8002076:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800207e:	480a      	ldr	r0, [pc, #40]	; (80020a8 <DDS_Update+0x124>)
 8002080:	f003 fb0b 	bl	800569a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8002084:	1d39      	adds	r1, r7, #4
 8002086:	2305      	movs	r3, #5
 8002088:	2201      	movs	r2, #1
 800208a:	4808      	ldr	r0, [pc, #32]	; (80020ac <DDS_Update+0x128>)
 800208c:	f006 fa0a 	bl	80084a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002090:	2201      	movs	r2, #1
 8002092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002096:	4804      	ldr	r0, [pc, #16]	; (80020a8 <DDS_Update+0x124>)
 8002098:	f003 faff 	bl	800569a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
*/
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd90      	pop	{r4, r7, pc}
 80020a4:	20000c50 	.word	0x20000c50
 80020a8:	40020400 	.word	0x40020400
 80020ac:	20000ccc 	.word	0x20000ccc

080020b0 <LcdSend>:
unsigned char LcdCache[LCD_CACHSIZE];   // Фреймбуфер
unsigned int LcdCacheIdx = 0;   // Текущий адрес во фреймбуфере


void LcdSend(uint8_t data, uint8_t cmd) //Sends data to display controller
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	460a      	mov	r2, r1
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	4613      	mov	r3, r2
 80020be:	71bb      	strb	r3, [r7, #6]
  uint8_t sdata = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]

  lcd44780_RW_0;
 80020c4:	2200      	movs	r2, #0
 80020c6:	2102      	movs	r1, #2
 80020c8:	4811      	ldr	r0, [pc, #68]	; (8002110 <LcdSend+0x60>)
 80020ca:	f003 fae6 	bl	800569a <HAL_GPIO_WritePin>

  sdata = data;
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	73fb      	strb	r3, [r7, #15]
  if(cmd == lcd_CMD)
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <LcdSend+0x34>
  {
	  lcd44780_RS_0;
 80020d8:	2201      	movs	r2, #1
 80020da:	2101      	movs	r1, #1
 80020dc:	480c      	ldr	r0, [pc, #48]	; (8002110 <LcdSend+0x60>)
 80020de:	f003 fadc 	bl	800569a <HAL_GPIO_WritePin>
 80020e2:	e004      	b.n	80020ee <LcdSend+0x3e>
  }                             //идентефикатор кода
  else
  {
	  lcd44780_RS_1;
 80020e4:	2200      	movs	r2, #0
 80020e6:	2101      	movs	r1, #1
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <LcdSend+0x60>)
 80020ea:	f003 fad6 	bl	800569a <HAL_GPIO_WritePin>
  }                             //идентефикатор данных
  send_data(sdata);
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 f97d 	bl	80023f0 <send_data>

  if(cmd == lcd_CMD)while(check_busy_flag());
 80020f6:	79bb      	ldrb	r3, [r7, #6]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <LcdSend+0x58>
 80020fc:	bf00      	nop
 80020fe:	f000 f98d 	bl	800241c <check_busy_flag>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1fa      	bne.n	80020fe <LcdSend+0x4e>
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40020400 	.word	0x40020400

08002114 <LcdUpdate>:

void LcdUpdate(void)            //Copies the LCD cache into the device RAM
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
  int i = 0, j = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	2300      	movs	r3, #0
 8002120:	603b      	str	r3, [r7, #0]

  LcdSend(HD44780_SET_CGRAM_ADD, lcd_CMD);//Позицианируем курсор на начало координат
 8002122:	2101      	movs	r1, #1
 8002124:	2040      	movs	r0, #64	; 0x40
 8002126:	f7ff ffc3 	bl	80020b0 <LcdSend>
  LcdSend(HD44780_SET_DDRAM_ADD, lcd_CMD);
 800212a:	2101      	movs	r1, #1
 800212c:	2080      	movs	r0, #128	; 0x80
 800212e:	f7ff ffbf 	bl	80020b0 <LcdSend>

  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	e017      	b.n	8002168 <LcdUpdate+0x54>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 8002138:	2300      	movs	r3, #0
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	e00e      	b.n	800215c <LcdUpdate+0x48>
    {
      LcdSend(LcdCache[((i * LCD_X_RES) + j)], lcd_DATA);       //вычисляем адрес в фрейм буфере, и данные от туда грузим в дисплей.
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2264      	movs	r2, #100	; 0x64
 8002142:	fb03 f202 	mul.w	r2, r3, r2
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	4413      	add	r3, r2
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <LcdUpdate+0x64>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	2102      	movs	r1, #2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ffad 	bl	80020b0 <LcdSend>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b63      	cmp	r3, #99	; 0x63
 8002160:	dded      	ble.n	800213e <LcdUpdate+0x2a>
  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3301      	adds	r3, #1
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	dde4      	ble.n	8002138 <LcdUpdate+0x24>
    }
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000ad4 	.word	0x20000ad4

0800217c <LcdClear_massive>:
  LcdUpdate();
}


void LcdClear_massive(void)     //Clears the display
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
  int i = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]

  for (i = 0; i < LCD_CACHSIZE; i++)
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	e007      	b.n	800219c <LcdClear_massive+0x20>
    LcdCache[i] = 0;            //забиваем всю память 0
 800218c:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <LcdClear_massive+0x34>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < LCD_CACHSIZE; i++)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3301      	adds	r3, #1
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2bc7      	cmp	r3, #199	; 0xc7
 80021a0:	ddf4      	ble.n	800218c <LcdClear_massive+0x10>
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000ad4 	.word	0x20000ad4

080021b4 <LcdGotoXYFont>:
  }
}


void LcdGotoXYFont(unsigned char x, unsigned char y)    //Sets cursor location to xy location. Range: 1,1 .. 14,6
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	460a      	mov	r2, r1
 80021be:	71fb      	strb	r3, [r7, #7]
 80021c0:	4613      	mov	r3, r2
 80021c2:	71bb      	strb	r3, [r7, #6]
  LcdCacheIdx = ((int) (y) - 1) * Cntr_X_RES + ((int) (x) - 1) * Cntr_Y_RES;
 80021c4:	79bb      	ldrb	r3, [r7, #6]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	2264      	movs	r2, #100	; 0x64
 80021ca:	fb03 f202 	mul.w	r2, r3, r2
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	4413      	add	r3, r2
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <LcdGotoXYFont+0x34>)
 80021da:	601a      	str	r2, [r3, #0]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000b9c 	.word	0x20000b9c

080021ec <clean_lcd_buf>:

void clean_lcd_buf(void)        //очистка текстового буфера
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	71fb      	strb	r3, [r7, #7]

  for (i = 0; i < 20; i++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	71fb      	strb	r3, [r7, #7]
 80021fa:	e006      	b.n	800220a <clean_lcd_buf+0x1e>
    lcd_buf[i] = 0;
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	4a07      	ldr	r2, [pc, #28]	; (800221c <clean_lcd_buf+0x30>)
 8002200:	2100      	movs	r1, #0
 8002202:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 20; i++)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	3301      	adds	r3, #1
 8002208:	71fb      	strb	r3, [r7, #7]
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	2b13      	cmp	r3, #19
 800220e:	d9f5      	bls.n	80021fc <clean_lcd_buf+0x10>
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000ac0 	.word	0x20000ac0

08002220 <LcdChr>:

void LcdChr(int ch)             //Displays a character at current cursor location and increment cursor location
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  char i = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]
  if(ch > 0x7f)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b7f      	cmp	r3, #127	; 0x7f
 8002230:	dd1a      	ble.n	8002268 <LcdChr+0x48>
  {
    for (i = 0; i < 5; i++)
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e013      	b.n	8002260 <LcdChr+0x40>
      LcdCache[LcdCacheIdx++] = lcd_font_table_rus[(ch * 5 + (i) - 0x3C0)];     //выделяем байт-столбик из символа и грузим в массив - 5 раз
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	441a      	add	r2, r3
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	4413      	add	r3, r2
 8002244:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <LcdChr+0x98>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	1c59      	adds	r1, r3, #1
 800224e:	481a      	ldr	r0, [pc, #104]	; (80022b8 <LcdChr+0x98>)
 8002250:	6001      	str	r1, [r0, #0]
 8002252:	491a      	ldr	r1, [pc, #104]	; (80022bc <LcdChr+0x9c>)
 8002254:	5c89      	ldrb	r1, [r1, r2]
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <LcdChr+0xa0>)
 8002258:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	3301      	adds	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b04      	cmp	r3, #4
 8002264:	d9e8      	bls.n	8002238 <LcdChr+0x18>
 8002266:	e019      	b.n	800229c <LcdChr+0x7c>
  } else
  {
    for (i = 0; i < 5; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e013      	b.n	8002296 <LcdChr+0x76>
      LcdCache[LcdCacheIdx++] = lcd_font_table[(ch * 5 + (i) - 0xA0)];  //выделяем байт-столбик из символа и грузим в массив - 5 раз
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	441a      	add	r2, r3
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	4413      	add	r3, r2
 800227a:	f1a3 02a0 	sub.w	r2, r3, #160	; 0xa0
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <LcdChr+0x98>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1c59      	adds	r1, r3, #1
 8002284:	480c      	ldr	r0, [pc, #48]	; (80022b8 <LcdChr+0x98>)
 8002286:	6001      	str	r1, [r0, #0]
 8002288:	490e      	ldr	r1, [pc, #56]	; (80022c4 <LcdChr+0xa4>)
 800228a:	5c89      	ldrb	r1, [r1, r2]
 800228c:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <LcdChr+0xa0>)
 800228e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	3301      	adds	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	2b04      	cmp	r3, #4
 800229a:	d9e8      	bls.n	800226e <LcdChr+0x4e>
  }
  LcdCache[LcdCacheIdx++] = 0x00;       //добавляем пробел между символами
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <LcdChr+0x98>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	4905      	ldr	r1, [pc, #20]	; (80022b8 <LcdChr+0x98>)
 80022a4:	600a      	str	r2, [r1, #0]
 80022a6:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <LcdChr+0xa0>)
 80022a8:	2100      	movs	r1, #0
 80022aa:	54d1      	strb	r1, [r2, r3]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000b9c 	.word	0x20000b9c
 80022bc:	200001e0 	.word	0x200001e0
 80022c0:	20000ad4 	.word	0x20000ad4
 80022c4:	20000000 	.word	0x20000000

080022c8 <LcdString>:
  }
  LcdCache[LcdCacheIdx++] = 0xFF;       //добавляем пробел между символами
}

void LcdString(unsigned char x, unsigned char y)        //Displays a string at current cursor location
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	460a      	mov	r2, r1
 80022d2:	71fb      	strb	r3, [r7, #7]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71bb      	strb	r3, [r7, #6]
  unsigned char i = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]

  if(x > 17 || y > 8)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b11      	cmp	r3, #17
 80022e0:	d81f      	bhi.n	8002322 <LcdString+0x5a>
 80022e2:	79bb      	ldrb	r3, [r7, #6]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d81c      	bhi.n	8002322 <LcdString+0x5a>
    return;
  LcdGotoXYFont(x, y);
 80022e8:	79ba      	ldrb	r2, [r7, #6]
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff60 	bl	80021b4 <LcdGotoXYFont>
  for (i = 0; i < 17; i++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e00d      	b.n	8002316 <LcdString+0x4e>
    if(lcd_buf[i])
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	4a0b      	ldr	r2, [pc, #44]	; (800232c <LcdString+0x64>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <LcdString+0x48>
      LcdChr(lcd_buf[i]);
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <LcdString+0x64>)
 8002308:	5cd3      	ldrb	r3, [r2, r3]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff88 	bl	8002220 <LcdChr>
  for (i = 0; i < 17; i++)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	2b10      	cmp	r3, #16
 800231a:	d9ee      	bls.n	80022fa <LcdString+0x32>
  clean_lcd_buf();
 800231c:	f7ff ff66 	bl	80021ec <clean_lcd_buf>
 8002320:	e000      	b.n	8002324 <LcdString+0x5c>
    return;
 8002322:	bf00      	nop
}
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000ac0 	.word	0x20000ac0

08002330 <pulse_e>:
//////////////////////////////////////////////////////////////////////////////////////



void pulse_e() //импульс на вход Е индикатора
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_SET);//    PIN_ON(PIN_E);
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <pulse_e+0x20>)
 800233c:	f003 f9ad 	bl	800569a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 8002340:	2200      	movs	r2, #0
 8002342:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002346:	4802      	ldr	r0, [pc, #8]	; (8002350 <pulse_e+0x20>)
 8002348:	f003 f9a7 	bl	800569a <HAL_GPIO_WritePin>
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020400 	.word	0x40020400

08002354 <send_nibble>:

void send_nibble(unsigned char data) //полубайтовый вывод
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  //выводим половину байта на соответствующие контакты
  if(data & 0x01)
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <send_nibble+0x20>
	HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB4);
 8002368:	2201      	movs	r2, #1
 800236a:	2104      	movs	r1, #4
 800236c:	481f      	ldr	r0, [pc, #124]	; (80023ec <send_nibble+0x98>)
 800236e:	f003 f994 	bl	800569a <HAL_GPIO_WritePin>
 8002372:	e004      	b.n	800237e <send_nibble+0x2a>
  else
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 8002374:	2200      	movs	r2, #0
 8002376:	2104      	movs	r1, #4
 8002378:	481c      	ldr	r0, [pc, #112]	; (80023ec <send_nibble+0x98>)
 800237a:	f003 f98e 	bl	800569a <HAL_GPIO_WritePin>

  if(data & 0x02)
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <send_nibble+0x40>
		HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB5);
 8002388:	2201      	movs	r2, #1
 800238a:	2108      	movs	r1, #8
 800238c:	4817      	ldr	r0, [pc, #92]	; (80023ec <send_nibble+0x98>)
 800238e:	f003 f984 	bl	800569a <HAL_GPIO_WritePin>
 8002392:	e004      	b.n	800239e <send_nibble+0x4a>
	  else
	    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 8002394:	2200      	movs	r2, #0
 8002396:	2108      	movs	r1, #8
 8002398:	4814      	ldr	r0, [pc, #80]	; (80023ec <send_nibble+0x98>)
 800239a:	f003 f97e 	bl	800569a <HAL_GPIO_WritePin>

  if(data & 0x04)
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <send_nibble+0x60>
		HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB6);
 80023a8:	2201      	movs	r2, #1
 80023aa:	2110      	movs	r1, #16
 80023ac:	480f      	ldr	r0, [pc, #60]	; (80023ec <send_nibble+0x98>)
 80023ae:	f003 f974 	bl	800569a <HAL_GPIO_WritePin>
 80023b2:	e004      	b.n	80023be <send_nibble+0x6a>
	  else
	    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2110      	movs	r1, #16
 80023b8:	480c      	ldr	r0, [pc, #48]	; (80023ec <send_nibble+0x98>)
 80023ba:	f003 f96e 	bl	800569a <HAL_GPIO_WritePin>

  if(data & 0x08)
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <send_nibble+0x80>
		HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB7);
 80023c8:	2201      	movs	r2, #1
 80023ca:	2120      	movs	r1, #32
 80023cc:	4807      	ldr	r0, [pc, #28]	; (80023ec <send_nibble+0x98>)
 80023ce:	f003 f964 	bl	800569a <HAL_GPIO_WritePin>
 80023d2:	e004      	b.n	80023de <send_nibble+0x8a>
	  else
	    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2120      	movs	r1, #32
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <send_nibble+0x98>)
 80023da:	f003 f95e 	bl	800569a <HAL_GPIO_WritePin>

  pulse_e(); //чтобы индикатор проглотил данные
 80023de:	f7ff ffa7 	bl	8002330 <pulse_e>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40020400 	.word	0x40020400

080023f0 <send_data>:

void send_data(unsigned char data) //вывод 2хполбайта на индикатор
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  //Первым шлем старшие полбайта: по инструкции
  //сначала столбец, потом строка таблицы знакогенератора
  send_nibble((data>>4) & 0x0F);
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ffa7 	bl	8002354 <send_nibble>
  send_nibble(data & 0x0F);
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ffa0 	bl	8002354 <send_nibble>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <check_busy_flag>:

int check_busy_flag(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002422:	463b      	mov	r3, r7
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
	GPIO_PinState status;

	lcd44780_RW_1; // Read
 8002430:	2201      	movs	r2, #1
 8002432:	2102      	movs	r1, #2
 8002434:	4822      	ldr	r0, [pc, #136]	; (80024c0 <check_busy_flag+0xa4>)
 8002436:	f003 f930 	bl	800569a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 800243a:	2320      	movs	r3, #32
 800243c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002446:	2302      	movs	r3, #2
 8002448:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	463b      	mov	r3, r7
 800244c:	4619      	mov	r1, r3
 800244e:	481c      	ldr	r0, [pc, #112]	; (80024c0 <check_busy_flag+0xa4>)
 8002450:	f002 ff8c 	bl	800536c <HAL_GPIO_Init>

	lcd44780_E_1;
 8002454:	2201      	movs	r2, #1
 8002456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800245a:	4819      	ldr	r0, [pc, #100]	; (80024c0 <check_busy_flag+0xa4>)
 800245c:	f003 f91d 	bl	800569a <HAL_GPIO_WritePin>
	status=HAL_GPIO_ReadPin(Display_DB7_GPIO_Port, Display_DB7_Pin);
 8002460:	2120      	movs	r1, #32
 8002462:	4817      	ldr	r0, [pc, #92]	; (80024c0 <check_busy_flag+0xa4>)
 8002464:	f003 f902 	bl	800566c <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	75fb      	strb	r3, [r7, #23]
	lcd44780_E_0;
 800246c:	2200      	movs	r2, #0
 800246e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002472:	4813      	ldr	r0, [pc, #76]	; (80024c0 <check_busy_flag+0xa4>)
 8002474:	f003 f911 	bl	800569a <HAL_GPIO_WritePin>
	lcd44780_E_1;
 8002478:	2201      	movs	r2, #1
 800247a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800247e:	4810      	ldr	r0, [pc, #64]	; (80024c0 <check_busy_flag+0xa4>)
 8002480:	f003 f90b 	bl	800569a <HAL_GPIO_WritePin>
	lcd44780_E_0;
 8002484:	2200      	movs	r2, #0
 8002486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800248a:	480d      	ldr	r0, [pc, #52]	; (80024c0 <check_busy_flag+0xa4>)
 800248c:	f003 f905 	bl	800569a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 8002490:	2320      	movs	r3, #32
 8002492:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002494:	2311      	movs	r3, #17
 8002496:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800249c:	2302      	movs	r3, #2
 800249e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a0:	463b      	mov	r3, r7
 80024a2:	4619      	mov	r1, r3
 80024a4:	4806      	ldr	r0, [pc, #24]	; (80024c0 <check_busy_flag+0xa4>)
 80024a6:	f002 ff61 	bl	800536c <HAL_GPIO_Init>
	lcd44780_RW_0;
 80024aa:	2200      	movs	r2, #0
 80024ac:	2102      	movs	r1, #2
 80024ae:	4804      	ldr	r0, [pc, #16]	; (80024c0 <check_busy_flag+0xa4>)
 80024b0:	f003 f8f3 	bl	800569a <HAL_GPIO_WritePin>
	return status;
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40020400 	.word	0x40020400

080024c4 <init_LCD>:

void init_LCD() //инициализация ЖК
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_Power_GPIO_Port, Display_Power_Pin, GPIO_PIN_RESET);
 80024c8:	2200      	movs	r2, #0
 80024ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ce:	4847      	ldr	r0, [pc, #284]	; (80025ec <init_LCD+0x128>)
 80024d0:	f003 f8e3 	bl	800569a <HAL_GPIO_WritePin>
  //Выводы в 0
    HAL_GPIO_WritePin(Display_RS_GPIO_Port, Display_RS_Pin, GPIO_PIN_SET);//  PIN_OFF(PIN_RS); !!!
 80024d4:	2201      	movs	r2, #1
 80024d6:	2101      	movs	r1, #1
 80024d8:	4844      	ldr	r0, [pc, #272]	; (80025ec <init_LCD+0x128>)
 80024da:	f003 f8de 	bl	800569a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024e4:	4841      	ldr	r0, [pc, #260]	; (80025ec <init_LCD+0x128>)
 80024e6:	f003 f8d8 	bl	800569a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2104      	movs	r1, #4
 80024ee:	483f      	ldr	r0, [pc, #252]	; (80025ec <init_LCD+0x128>)
 80024f0:	f003 f8d3 	bl	800569a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2108      	movs	r1, #8
 80024f8:	483c      	ldr	r0, [pc, #240]	; (80025ec <init_LCD+0x128>)
 80024fa:	f003 f8ce 	bl	800569a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 80024fe:	2200      	movs	r2, #0
 8002500:	2110      	movs	r1, #16
 8002502:	483a      	ldr	r0, [pc, #232]	; (80025ec <init_LCD+0x128>)
 8002504:	f003 f8c9 	bl	800569a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 8002508:	2200      	movs	r2, #0
 800250a:	2120      	movs	r1, #32
 800250c:	4837      	ldr	r0, [pc, #220]	; (80025ec <init_LCD+0x128>)
 800250e:	f003 f8c4 	bl	800569a <HAL_GPIO_WritePin>

	//Ждем включения ЖКИ
    HAL_Delay(500);
 8002512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002516:	f002 fa5b 	bl	80049d0 <HAL_Delay>
    lcd44780_RS_0;
 800251a:	2201      	movs	r2, #1
 800251c:	2101      	movs	r1, #1
 800251e:	4833      	ldr	r0, [pc, #204]	; (80025ec <init_LCD+0x128>)
 8002520:	f003 f8bb 	bl	800569a <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 8002524:	2200      	movs	r2, #0
 8002526:	2102      	movs	r1, #2
 8002528:	4830      	ldr	r0, [pc, #192]	; (80025ec <init_LCD+0x128>)
 800252a:	f003 f8b6 	bl	800569a <HAL_GPIO_WritePin>
	send_nibble(0x02);
 800252e:	2002      	movs	r0, #2
 8002530:	f7ff ff10 	bl	8002354 <send_nibble>
	send_nibble(0x02);
 8002534:	2002      	movs	r0, #2
 8002536:	f7ff ff0d 	bl	8002354 <send_nibble>
	send_nibble(0x08);// N=1 F=0
 800253a:	2008      	movs	r0, #8
 800253c:	f7ff ff0a 	bl	8002354 <send_nibble>

	while(check_busy_flag());
 8002540:	bf00      	nop
 8002542:	f7ff ff6b 	bl	800241c <check_busy_flag>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1fa      	bne.n	8002542 <init_LCD+0x7e>

	send_nibble(0x00);
 800254c:	2000      	movs	r0, #0
 800254e:	f7ff ff01 	bl	8002354 <send_nibble>
	send_nibble(0x0E);// D=1 C=1 B=0
 8002552:	200e      	movs	r0, #14
 8002554:	f7ff fefe 	bl	8002354 <send_nibble>

	while(check_busy_flag());
 8002558:	bf00      	nop
 800255a:	f7ff ff5f 	bl	800241c <check_busy_flag>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1fa      	bne.n	800255a <init_LCD+0x96>
	send_nibble(0x00);
 8002564:	2000      	movs	r0, #0
 8002566:	f7ff fef5 	bl	8002354 <send_nibble>
	send_nibble(0x01);
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff fef2 	bl	8002354 <send_nibble>

	while(check_busy_flag());
 8002570:	bf00      	nop
 8002572:	f7ff ff53 	bl	800241c <check_busy_flag>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1fa      	bne.n	8002572 <init_LCD+0xae>
	send_nibble(0x00);
 800257c:	2000      	movs	r0, #0
 800257e:	f7ff fee9 	bl	8002354 <send_nibble>
	send_nibble(0x06); // I/D=1  S/H=0
 8002582:	2006      	movs	r0, #6
 8002584:	f7ff fee6 	bl	8002354 <send_nibble>
//	send_nibble(0x04); // I/D=0  S/H=0

	while(check_busy_flag());
 8002588:	bf00      	nop
 800258a:	f7ff ff47 	bl	800241c <check_busy_flag>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1fa      	bne.n	800258a <init_LCD+0xc6>

    lcd44780_RS_0;
 8002594:	2201      	movs	r2, #1
 8002596:	2101      	movs	r1, #1
 8002598:	4814      	ldr	r0, [pc, #80]	; (80025ec <init_LCD+0x128>)
 800259a:	f003 f87e 	bl	800569a <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 800259e:	2200      	movs	r2, #0
 80025a0:	2102      	movs	r1, #2
 80025a2:	4812      	ldr	r0, [pc, #72]	; (80025ec <init_LCD+0x128>)
 80025a4:	f003 f879 	bl	800569a <HAL_GPIO_WritePin>
	send_nibble(0x02); // DL=0
 80025a8:	2002      	movs	r0, #2
 80025aa:	f7ff fed3 	bl	8002354 <send_nibble>
	send_nibble(0x0A);// N=1 F=0 FT1=1 FT0=0
 80025ae:	200a      	movs	r0, #10
 80025b0:	f7ff fed0 	bl	8002354 <send_nibble>
	while(check_busy_flag());
 80025b4:	bf00      	nop
 80025b6:	f7ff ff31 	bl	800241c <check_busy_flag>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1fa      	bne.n	80025b6 <init_LCD+0xf2>


    send_data(0x1F); //переключение в графику
 80025c0:	201f      	movs	r0, #31
 80025c2:	f7ff ff15 	bl	80023f0 <send_data>
    while(check_busy_flag());
 80025c6:	bf00      	nop
 80025c8:	f7ff ff28 	bl	800241c <check_busy_flag>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1fa      	bne.n	80025c8 <init_LCD+0x104>

    send_data(0x01); //очистили от мусора ОЗУ (т.с. что clear())
 80025d2:	2001      	movs	r0, #1
 80025d4:	f7ff ff0c 	bl	80023f0 <send_data>
    while(check_busy_flag());
 80025d8:	bf00      	nop
 80025da:	f7ff ff1f 	bl	800241c <check_busy_flag>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1fa      	bne.n	80025da <init_LCD+0x116>

    LcdClear_massive();
 80025e4:	f7ff fdca 	bl	800217c <LcdClear_massive>

}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40020400 	.word	0x40020400

080025f0 <LcdBarLine>:
while(check_busy_flag());

}

void LcdBarLine(uint32_t fill)    // рисуем прогресс-бар в второй строке
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	uint16_t i, full_fill_position;
	float y;

	if(fill>0xFFFFF)return;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025fe:	f080 808f 	bcs.w	8002720 <LcdBarLine+0x130>

	// поиск свободного места в массиве кеша дисплея
//	for (i = LCD_CACHSIZE-1; i > LCD_X_RES; i--) // поиск свободного места в массиве кеша дисплея, в указанной строке
//		if(LcdCache[i]==0x00)
//			found_free_position=i;
	y=LCD_X_RES;
 8002602:	4b49      	ldr	r3, [pc, #292]	; (8002728 <LcdBarLine+0x138>)
 8002604:	613b      	str	r3, [r7, #16]
	y*=8; //сколько всего диступно места
 8002606:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800260a:	6938      	ldr	r0, [r7, #16]
 800260c:	f7fe fbdc 	bl	8000dc8 <__aeabi_fmul>
 8002610:	4603      	mov	r3, r0
 8002612:	613b      	str	r3, [r7, #16]
	y/=(float)0xFFFFF;
 8002614:	4945      	ldr	r1, [pc, #276]	; (800272c <LcdBarLine+0x13c>)
 8002616:	6938      	ldr	r0, [r7, #16]
 8002618:	f7fe fc8a 	bl	8000f30 <__aeabi_fdiv>
 800261c:	4603      	mov	r3, r0
 800261e:	613b      	str	r3, [r7, #16]
	y*=(float)fill;// получаем коэфицент заполнения прогрессбара
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fe fb79 	bl	8000d18 <__aeabi_ui2f>
 8002626:	4603      	mov	r3, r0
 8002628:	4619      	mov	r1, r3
 800262a:	6938      	ldr	r0, [r7, #16]
 800262c:	f7fe fbcc 	bl	8000dc8 <__aeabi_fmul>
 8002630:	4603      	mov	r3, r0
 8002632:	613b      	str	r3, [r7, #16]
	full_fill_position=floor(y/8);
 8002634:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002638:	6938      	ldr	r0, [r7, #16]
 800263a:	f7fe fc79 	bl	8000f30 <__aeabi_fdiv>
 800263e:	4603      	mov	r3, r0
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ff13 	bl	800046c <__aeabi_f2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f00b ffb3 	bl	800e5b8 <floor>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f7fe fa37 	bl	8000acc <__aeabi_d2uiz>
 800265e:	4603      	mov	r3, r0
 8002660:	81fb      	strh	r3, [r7, #14]
	//need_to_be_filled=(LCD_CACHSIZE-1-found_free_position)*8 - ;
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 8002662:	2364      	movs	r3, #100	; 0x64
 8002664:	82fb      	strh	r3, [r7, #22]
 8002666:	e057      	b.n	8002718 <LcdBarLine+0x128>
		if(y!=0)
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	6938      	ldr	r0, [r7, #16]
 800266e:	f7fe fd3f 	bl	80010f0 <__aeabi_fcmpeq>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d14c      	bne.n	8002712 <LcdBarLine+0x122>
		{
			if(full_fill_position>(i-LCD_X_RES))
 8002678:	8afb      	ldrh	r3, [r7, #22]
 800267a:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800267e:	89fb      	ldrh	r3, [r7, #14]
 8002680:	429a      	cmp	r2, r3
 8002682:	dc08      	bgt.n	8002696 <LcdBarLine+0xa6>
			{
				LcdCache[i]=LcdCache[i]^0xFF;
 8002684:	8afb      	ldrh	r3, [r7, #22]
 8002686:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <LcdBarLine+0x140>)
 8002688:	5cd2      	ldrb	r2, [r2, r3]
 800268a:	8afb      	ldrh	r3, [r7, #22]
 800268c:	43d2      	mvns	r2, r2
 800268e:	b2d1      	uxtb	r1, r2
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <LcdBarLine+0x140>)
 8002692:	54d1      	strb	r1, [r2, r3]
 8002694:	e03d      	b.n	8002712 <LcdBarLine+0x122>
			} else
			{
				y-=floor(y/8)*8;
 8002696:	6938      	ldr	r0, [r7, #16]
 8002698:	f7fd fee8 	bl	800046c <__aeabi_f2d>
 800269c:	4604      	mov	r4, r0
 800269e:	460d      	mov	r5, r1
 80026a0:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80026a4:	6938      	ldr	r0, [r7, #16]
 80026a6:	f7fe fc43 	bl	8000f30 <__aeabi_fdiv>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fd fedd 	bl	800046c <__aeabi_f2d>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	f00b ff7d 	bl	800e5b8 <floor>
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <LcdBarLine+0x144>)
 80026c4:	f7fd ff2a 	bl	800051c <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4620      	mov	r0, r4
 80026ce:	4629      	mov	r1, r5
 80026d0:	f7fd fd6c 	bl	80001ac <__aeabi_dsub>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	f7fe fa16 	bl	8000b0c <__aeabi_d2f>
 80026e0:	4603      	mov	r3, r0
 80026e2:	613b      	str	r3, [r7, #16]
				LcdCache[i]=LcdCache[i]^((1<<(uint16_t)y)-1);
 80026e4:	8afb      	ldrh	r3, [r7, #22]
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <LcdBarLine+0x140>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	b25c      	sxtb	r4, r3
 80026ec:	6938      	ldr	r0, [r7, #16]
 80026ee:	f7fe fd31 	bl	8001154 <__aeabi_f2uiz>
 80026f2:	4603      	mov	r3, r0
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	2301      	movs	r3, #1
 80026fa:	4093      	lsls	r3, r2
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	b25b      	sxtb	r3, r3
 8002704:	4063      	eors	r3, r4
 8002706:	b25a      	sxtb	r2, r3
 8002708:	8afb      	ldrh	r3, [r7, #22]
 800270a:	b2d1      	uxtb	r1, r2
 800270c:	4a08      	ldr	r2, [pc, #32]	; (8002730 <LcdBarLine+0x140>)
 800270e:	54d1      	strb	r1, [r2, r3]
				break;
 8002710:	e007      	b.n	8002722 <LcdBarLine+0x132>
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 8002712:	8afb      	ldrh	r3, [r7, #22]
 8002714:	3301      	adds	r3, #1
 8002716:	82fb      	strh	r3, [r7, #22]
 8002718:	8afb      	ldrh	r3, [r7, #22]
 800271a:	2bc7      	cmp	r3, #199	; 0xc7
 800271c:	d9a4      	bls.n	8002668 <LcdBarLine+0x78>
 800271e:	e000      	b.n	8002722 <LcdBarLine+0x132>
	if(fill>0xFFFFF)return;
 8002720:	bf00      	nop
			}
		}
	}

}
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bdb0      	pop	{r4, r5, r7, pc}
 8002728:	42c80000 	.word	0x42c80000
 800272c:	497ffff0 	.word	0x497ffff0
 8002730:	20000ad4 	.word	0x20000ad4
 8002734:	40200000 	.word	0x40200000

08002738 <output_state>:
//==============================================================================================


//==============================================================================================
void output_state(uint8_t type)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
	int relay_settling_time_ms=50;
 8002742:	2332      	movs	r3, #50	; 0x32
 8002744:	60fb      	str	r3, [r7, #12]
	switch(type)
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2b04      	cmp	r3, #4
 800274a:	f200 80f2 	bhi.w	8002932 <output_state+0x1fa>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <output_state+0x1c>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	08002769 	.word	0x08002769
 8002758:	080027a1 	.word	0x080027a1
 800275c:	080027f1 	.word	0x080027f1
 8002760:	08002851 	.word	0x08002851
 8002764:	080028b1 	.word	0x080028b1
	{
	//----------------------------------------------------------//
	case Output_off_STATE:
	  Relay_control(0,0); // set all coils off
 8002768:	2100      	movs	r1, #0
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe ff6e 	bl	800164c <Relay_control>
	  Relay_control(1,0); // x1 mode
 8002770:	2100      	movs	r1, #0
 8002772:	2001      	movs	r0, #1
 8002774:	f7fe ff6a 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 8002778:	2100      	movs	r1, #0
 800277a:	2002      	movs	r0, #2
 800277c:	f7fe ff66 	bl	800164c <Relay_control>
	  Relay_control(3,0); // Output Enable
 8002780:	2100      	movs	r1, #0
 8002782:	2003      	movs	r0, #3
 8002784:	f7fe ff62 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4618      	mov	r0, r3
 800278c:	f002 f920 	bl	80049d0 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 8002790:	2100      	movs	r1, #0
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe ff5a 	bl	800164c <Relay_control>
	  Current_output_status=Output_off_STATE;
 8002798:	4b68      	ldr	r3, [pc, #416]	; (800293c <output_state+0x204>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
	  break;
 800279e:	e0c8      	b.n	8002932 <output_state+0x1fa>

	case Output_x1_STATE:
	  Relay_control(0,0); // set all coils off
 80027a0:	2100      	movs	r1, #0
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7fe ff52 	bl	800164c <Relay_control>
	  Relay_control(1,0); // x1 mode
 80027a8:	2100      	movs	r1, #0
 80027aa:	2001      	movs	r0, #1
 80027ac:	f7fe ff4e 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 80027b0:	2100      	movs	r1, #0
 80027b2:	2002      	movs	r0, #2
 80027b4:	f7fe ff4a 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 80027b8:	2101      	movs	r1, #1
 80027ba:	2003      	movs	r0, #3
 80027bc:	f7fe ff46 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 f904 	bl	80049d0 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 80027c8:	2100      	movs	r1, #0
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fe ff3e 	bl	800164c <Relay_control>
	  Current_output_status=Output_x1_STATE;
 80027d0:	4b5a      	ldr	r3, [pc, #360]	; (800293c <output_state+0x204>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 80027d6:	4b5a      	ldr	r3, [pc, #360]	; (8002940 <output_state+0x208>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5a      	ldr	r2, [pc, #360]	; (8002944 <output_state+0x20c>)
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe f9e7 	bl	8000bb4 <__aeabi_fsub>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b57      	ldr	r3, [pc, #348]	; (8002948 <output_state+0x210>)
 80027ec:	601a      	str	r2, [r3, #0]
	  break;
 80027ee:	e0a0      	b.n	8002932 <output_state+0x1fa>

	case Output_x2_STATE:
	  Relay_control(0,0); // set all coils off
 80027f0:	2100      	movs	r1, #0
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe ff2a 	bl	800164c <Relay_control>
	  Relay_control(1,1); // x1 mode
 80027f8:	2101      	movs	r1, #1
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7fe ff26 	bl	800164c <Relay_control>
	  Relay_control(2,1); // x2/x4 mode
 8002800:	2101      	movs	r1, #1
 8002802:	2002      	movs	r0, #2
 8002804:	f7fe ff22 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 8002808:	2101      	movs	r1, #1
 800280a:	2003      	movs	r0, #3
 800280c:	f7fe ff1e 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f002 f8dc 	bl	80049d0 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 8002818:	2100      	movs	r1, #0
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe ff16 	bl	800164c <Relay_control>
	  Current_output_status=Output_x2_STATE;
 8002820:	4b46      	ldr	r3, [pc, #280]	; (800293c <output_state+0x204>)
 8002822:	2202      	movs	r2, #2
 8002824:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x2_coeff;
 8002826:	4b46      	ldr	r3, [pc, #280]	; (8002940 <output_state+0x208>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a46      	ldr	r2, [pc, #280]	; (8002944 <output_state+0x20c>)
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe f9bf 	bl	8000bb4 <__aeabi_fsub>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	4b44      	ldr	r3, [pc, #272]	; (800294c <output_state+0x214>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f7fe fac1 	bl	8000dc8 <__aeabi_fmul>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <output_state+0x210>)
 800284c:	601a      	str	r2, [r3, #0]
	  break;
 800284e:	e070      	b.n	8002932 <output_state+0x1fa>

	case Output_x4_STATE:
	  Relay_control(0,0); // set all coils off
 8002850:	2100      	movs	r1, #0
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe fefa 	bl	800164c <Relay_control>
	  Relay_control(1,1); // x1 mode
 8002858:	2101      	movs	r1, #1
 800285a:	2001      	movs	r0, #1
 800285c:	f7fe fef6 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 8002860:	2100      	movs	r1, #0
 8002862:	2002      	movs	r0, #2
 8002864:	f7fe fef2 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 8002868:	2101      	movs	r1, #1
 800286a:	2003      	movs	r0, #3
 800286c:	f7fe feee 	bl	800164c <Relay_control>
	  HAL_Delay(relay_settling_time_ms); // wait
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4618      	mov	r0, r3
 8002874:	f002 f8ac 	bl	80049d0 <HAL_Delay>
	  Relay_control(0,0); // set all coils off
 8002878:	2100      	movs	r1, #0
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe fee6 	bl	800164c <Relay_control>
	  Current_output_status=Output_x4_STATE;
 8002880:	4b2e      	ldr	r3, [pc, #184]	; (800293c <output_state+0x204>)
 8002882:	2203      	movs	r2, #3
 8002884:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x4_coeff;
 8002886:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <output_state+0x208>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2e      	ldr	r2, [pc, #184]	; (8002944 <output_state+0x20c>)
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe f98f 	bl	8000bb4 <__aeabi_fsub>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <output_state+0x218>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4619      	mov	r1, r3
 80028a0:	4610      	mov	r0, r2
 80028a2:	f7fe fa91 	bl	8000dc8 <__aeabi_fmul>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <output_state+0x210>)
 80028ac:	601a      	str	r2, [r3, #0]
	  break;
 80028ae:	e040      	b.n	8002932 <output_state+0x1fa>

	case Output_auto_STATE:
		if((cal_DAC_up_voltage-cal_DAC_down_voltage)/DAC_target_speed > 600)
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <output_state+0x208>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a23      	ldr	r2, [pc, #140]	; (8002944 <output_state+0x20c>)
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe f97a 	bl	8000bb4 <__aeabi_fsub>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b23      	ldr	r3, [pc, #140]	; (8002954 <output_state+0x21c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f7fe fb30 	bl	8000f30 <__aeabi_fdiv>
 80028d0:	4603      	mov	r3, r0
 80028d2:	4921      	ldr	r1, [pc, #132]	; (8002958 <output_state+0x220>)
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fc33 	bl	8001140 <__aeabi_fcmpgt>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <output_state+0x1b0>
		{
			output_state(Output_x1_STATE);
 80028e0:	2001      	movs	r0, #1
 80028e2:	f7ff ff29 	bl	8002738 <output_state>
				output_state(Output_x2_STATE);
			}
			else
				output_state(Output_x4_STATE);

		break;
 80028e6:	e023      	b.n	8002930 <output_state+0x1f8>
			if (((cal_DAC_up_voltage-cal_DAC_down_voltage)*2)/DAC_target_speed > 600)
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <output_state+0x208>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a15      	ldr	r2, [pc, #84]	; (8002944 <output_state+0x20c>)
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f95e 	bl	8000bb4 <__aeabi_fsub>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4619      	mov	r1, r3
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe f95b 	bl	8000bb8 <__addsf3>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <output_state+0x21c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f7fe fb0f 	bl	8000f30 <__aeabi_fdiv>
 8002912:	4603      	mov	r3, r0
 8002914:	4910      	ldr	r1, [pc, #64]	; (8002958 <output_state+0x220>)
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fc12 	bl	8001140 <__aeabi_fcmpgt>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <output_state+0x1f2>
				output_state(Output_x2_STATE);
 8002922:	2002      	movs	r0, #2
 8002924:	f7ff ff08 	bl	8002738 <output_state>
		break;
 8002928:	e002      	b.n	8002930 <output_state+0x1f8>
				output_state(Output_x4_STATE);
 800292a:	2003      	movs	r0, #3
 800292c:	f7ff ff04 	bl	8002738 <output_state>
		break;
 8002930:	bf00      	nop
}
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000c68 	.word	0x20000c68
 8002940:	20000c60 	.word	0x20000c60
 8002944:	20000c64 	.word	0x20000c64
 8002948:	20000c5c 	.word	0x20000c5c
 800294c:	20000ab8 	.word	0x20000ab8
 8002950:	20000abc 	.word	0x20000abc
 8002954:	20000c58 	.word	0x20000c58
 8002958:	44160000 	.word	0x44160000

0800295c <display_screen>:
//==============================================================================================


//==============================================================================================
void display_screen(uint8_t type)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b087      	sub	sp, #28
 8002960:	af02      	add	r7, sp, #8
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
	char sign;
	switch(type)
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	2b03      	cmp	r3, #3
 800296a:	f200 808c 	bhi.w	8002a86 <display_screen+0x12a>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <display_screen+0x18>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	08002985 	.word	0x08002985
 8002978:	08002a21 	.word	0x08002a21
 800297c:	08002a43 	.word	0x08002a43
 8002980:	08002a65 	.word	0x08002a65
	{
	//----------------------------------------------------------//
	case dU_dt_SCREEN:
		if(DAC_code_direction==1)
 8002984:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <display_screen+0x134>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d102      	bne.n	8002992 <display_screen+0x36>
		{
			sign='+';
 800298c:	232b      	movs	r3, #43	; 0x2b
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e001      	b.n	8002996 <display_screen+0x3a>
		}
		else
		{
			sign='-';
 8002992:	232d      	movs	r3, #45	; 0x2d
 8002994:	73fb      	strb	r3, [r7, #15]
		}
		sprintf(lcd_buf,"' %c%1.4EV/s",sign, DAC_target_speed);
 8002996:	7bfc      	ldrb	r4, [r7, #15]
 8002998:	4b3e      	ldr	r3, [pc, #248]	; (8002a94 <display_screen+0x138>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fd65 	bl	800046c <__aeabi_f2d>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	e9cd 2300 	strd	r2, r3, [sp]
 80029aa:	4622      	mov	r2, r4
 80029ac:	493a      	ldr	r1, [pc, #232]	; (8002a98 <display_screen+0x13c>)
 80029ae:	483b      	ldr	r0, [pc, #236]	; (8002a9c <display_screen+0x140>)
 80029b0:	f00c fb26 	bl	800f000 <siprintf>
		LcdString(1, 1);
 80029b4:	2101      	movs	r1, #1
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff fc86 	bl	80022c8 <LcdString>

		if(cfg.LDACMODE==1){
 80029bc:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <display_screen+0x144>)
 80029be:	789b      	ldrb	r3, [r3, #2]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d117      	bne.n	80029f4 <display_screen+0x98>
			sprintf(lcd_buf,"ARM      %01u:%02u:%02u",eta_hours,eta_minute,eta_second);
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <display_screen+0x148>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <display_screen+0x14c>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4619      	mov	r1, r3
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <display_screen+0x150>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	460b      	mov	r3, r1
 80029d8:	4935      	ldr	r1, [pc, #212]	; (8002ab0 <display_screen+0x154>)
 80029da:	4830      	ldr	r0, [pc, #192]	; (8002a9c <display_screen+0x140>)
 80029dc:	f00c fb10 	bl	800f000 <siprintf>
			LcdString(1, 2);
 80029e0:	2102      	movs	r1, #2
 80029e2:	2001      	movs	r0, #1
 80029e4:	f7ff fc70 	bl	80022c8 <LcdString>
			LcdBarLine(DAC_code);
 80029e8:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <display_screen+0x158>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fdff 	bl	80025f0 <LcdBarLine>
			{
				sprintf(lcd_buf,"READY TO GO");
				LcdString(1, 2);
			}
		}
		break;
 80029f2:	e048      	b.n	8002a86 <display_screen+0x12a>
			if(Current_output_status==Output_off_STATE)
 80029f4:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <display_screen+0x15c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d108      	bne.n	8002a0e <display_screen+0xb2>
				sprintf(lcd_buf,"OUTPUT DISABLED");
 80029fc:	492f      	ldr	r1, [pc, #188]	; (8002abc <display_screen+0x160>)
 80029fe:	4827      	ldr	r0, [pc, #156]	; (8002a9c <display_screen+0x140>)
 8002a00:	f00c fafe 	bl	800f000 <siprintf>
				LcdString(1, 2);
 8002a04:	2102      	movs	r1, #2
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7ff fc5e 	bl	80022c8 <LcdString>
		break;
 8002a0c:	e03b      	b.n	8002a86 <display_screen+0x12a>
				sprintf(lcd_buf,"READY TO GO");
 8002a0e:	492c      	ldr	r1, [pc, #176]	; (8002ac0 <display_screen+0x164>)
 8002a10:	4822      	ldr	r0, [pc, #136]	; (8002a9c <display_screen+0x140>)
 8002a12:	f00c faf5 	bl	800f000 <siprintf>
				LcdString(1, 2);
 8002a16:	2102      	movs	r1, #2
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f7ff fc55 	bl	80022c8 <LcdString>
		break;
 8002a1e:	e032      	b.n	8002a86 <display_screen+0x12a>
	//----------------------------------------------------------//
	case Hello_SCREEN:
		sprintf(lcd_buf,"Hello AmpNuts!");
 8002a20:	4928      	ldr	r1, [pc, #160]	; (8002ac4 <display_screen+0x168>)
 8002a22:	481e      	ldr	r0, [pc, #120]	; (8002a9c <display_screen+0x140>)
 8002a24:	f00c faec 	bl	800f000 <siprintf>
		LcdString(1, 1);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f7ff fc4c 	bl	80022c8 <LcdString>
		sprintf(lcd_buf,"I`m Micron-GLIN");
 8002a30:	4925      	ldr	r1, [pc, #148]	; (8002ac8 <display_screen+0x16c>)
 8002a32:	481a      	ldr	r0, [pc, #104]	; (8002a9c <display_screen+0x140>)
 8002a34:	f00c fae4 	bl	800f000 <siprintf>
		LcdString(1, 2);
 8002a38:	2102      	movs	r1, #2
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff fc44 	bl	80022c8 <LcdString>
		break;
 8002a40:	e021      	b.n	8002a86 <display_screen+0x12a>
	//----------------------------------------------------------//
	case Warm_up_SCREEN:
		sprintf(lcd_buf,"need time to");
 8002a42:	4922      	ldr	r1, [pc, #136]	; (8002acc <display_screen+0x170>)
 8002a44:	4815      	ldr	r0, [pc, #84]	; (8002a9c <display_screen+0x140>)
 8002a46:	f00c fadb 	bl	800f000 <siprintf>
		LcdString(1, 1);
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7ff fc3b 	bl	80022c8 <LcdString>
		sprintf(lcd_buf,"warm-up my refs");
 8002a52:	491f      	ldr	r1, [pc, #124]	; (8002ad0 <display_screen+0x174>)
 8002a54:	4811      	ldr	r0, [pc, #68]	; (8002a9c <display_screen+0x140>)
 8002a56:	f00c fad3 	bl	800f000 <siprintf>
		LcdString(1, 2);
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f7ff fc33 	bl	80022c8 <LcdString>
		break;
 8002a62:	e010      	b.n	8002a86 <display_screen+0x12a>
	//----------------------------------------------------------//
	case Ready_SCREEN:
		sprintf(lcd_buf,"I`m ready...");
 8002a64:	491b      	ldr	r1, [pc, #108]	; (8002ad4 <display_screen+0x178>)
 8002a66:	480d      	ldr	r0, [pc, #52]	; (8002a9c <display_screen+0x140>)
 8002a68:	f00c faca 	bl	800f000 <siprintf>
		LcdString(1, 1);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7ff fc2a 	bl	80022c8 <LcdString>
		sprintf(lcd_buf,"      Let`s start!");
 8002a74:	4918      	ldr	r1, [pc, #96]	; (8002ad8 <display_screen+0x17c>)
 8002a76:	4809      	ldr	r0, [pc, #36]	; (8002a9c <display_screen+0x140>)
 8002a78:	f00c fac2 	bl	800f000 <siprintf>
		LcdString(1, 2);
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f7ff fc22 	bl	80022c8 <LcdString>
		break;
 8002a84:	bf00      	nop
	}
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd90      	pop	{r4, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000c70 	.word	0x20000c70
 8002a94:	20000c58 	.word	0x20000c58
 8002a98:	08012b58 	.word	0x08012b58
 8002a9c:	20000ac0 	.word	0x20000ac0
 8002aa0:	20000c44 	.word	0x20000c44
 8002aa4:	20000c18 	.word	0x20000c18
 8002aa8:	20000c19 	.word	0x20000c19
 8002aac:	20000c1a 	.word	0x20000c1a
 8002ab0:	08012b68 	.word	0x08012b68
 8002ab4:	20000c6c 	.word	0x20000c6c
 8002ab8:	20000c68 	.word	0x20000c68
 8002abc:	08012b80 	.word	0x08012b80
 8002ac0:	08012b90 	.word	0x08012b90
 8002ac4:	08012b9c 	.word	0x08012b9c
 8002ac8:	08012bac 	.word	0x08012bac
 8002acc:	08012bbc 	.word	0x08012bbc
 8002ad0:	08012bcc 	.word	0x08012bcc
 8002ad4:	08012bdc 	.word	0x08012bdc
 8002ad8:	08012bec 	.word	0x08012bec

08002adc <send_answer_to_CDC>:
//==============================================================================================


//==============================================================================================
void send_answer_to_CDC(uint8_t type)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
	uint8_t cdc_counter=0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]

	switch(type)
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	2b0f      	cmp	r3, #15
 8002aee:	f200 80b5 	bhi.w	8002c5c <send_answer_to_CDC+0x180>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <send_answer_to_CDC+0x1c>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b3f 	.word	0x08002b3f
 8002afc:	08002b65 	.word	0x08002b65
 8002b00:	08002b8b 	.word	0x08002b8b
 8002b04:	08002bb1 	.word	0x08002bb1
 8002b08:	08002bd7 	.word	0x08002bd7
 8002b0c:	08002bfd 	.word	0x08002bfd
 8002b10:	08002c5d 	.word	0x08002c5d
 8002b14:	08002c5d 	.word	0x08002c5d
 8002b18:	08002c5d 	.word	0x08002c5d
 8002b1c:	08002c5d 	.word	0x08002c5d
 8002b20:	08002c5d 	.word	0x08002c5d
 8002b24:	08002c5d 	.word	0x08002c5d
 8002b28:	08002c5d 	.word	0x08002c5d
 8002b2c:	08002c5d 	.word	0x08002c5d
 8002b30:	08002c5d 	.word	0x08002c5d
 8002b34:	08002c23 	.word	0x08002c23
	{
	case ERROR_TYPE_1:
		while((CDC_Transmit_FS(Error1, strlen((const char *)Error1))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	4849      	ldr	r0, [pc, #292]	; (8002c64 <send_answer_to_CDC+0x188>)
 8002b40:	f7fd fb28 	bl	8000194 <strlen>
 8002b44:	4603      	mov	r3, r0
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4846      	ldr	r0, [pc, #280]	; (8002c64 <send_answer_to_CDC+0x188>)
 8002b4c:	f00b f940 	bl	800ddd0 <CDC_Transmit_FS>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d075      	beq.n	8002c42 <send_answer_to_CDC+0x166>
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	2bff      	cmp	r3, #255	; 0xff
 8002b5a:	d1ed      	bne.n	8002b38 <send_answer_to_CDC+0x5c>
		break;
 8002b5c:	e071      	b.n	8002c42 <send_answer_to_CDC+0x166>
	case ERROR_TYPE_2:
		while((CDC_Transmit_FS(Error2, strlen((const char *)Error2))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	3301      	adds	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	4840      	ldr	r0, [pc, #256]	; (8002c68 <send_answer_to_CDC+0x18c>)
 8002b66:	f7fd fb15 	bl	8000194 <strlen>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	4619      	mov	r1, r3
 8002b70:	483d      	ldr	r0, [pc, #244]	; (8002c68 <send_answer_to_CDC+0x18c>)
 8002b72:	f00b f92d 	bl	800ddd0 <CDC_Transmit_FS>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d064      	beq.n	8002c46 <send_answer_to_CDC+0x16a>
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	2bff      	cmp	r3, #255	; 0xff
 8002b80:	d1ed      	bne.n	8002b5e <send_answer_to_CDC+0x82>
		break;
 8002b82:	e060      	b.n	8002c46 <send_answer_to_CDC+0x16a>
	case OK_TYPE_1:
		while((CDC_Transmit_FS(OK, strlen((const char *)OK))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	3301      	adds	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	4838      	ldr	r0, [pc, #224]	; (8002c6c <send_answer_to_CDC+0x190>)
 8002b8c:	f7fd fb02 	bl	8000194 <strlen>
 8002b90:	4603      	mov	r3, r0
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	4835      	ldr	r0, [pc, #212]	; (8002c6c <send_answer_to_CDC+0x190>)
 8002b98:	f00b f91a 	bl	800ddd0 <CDC_Transmit_FS>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d053      	beq.n	8002c4a <send_answer_to_CDC+0x16e>
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	2bff      	cmp	r3, #255	; 0xff
 8002ba6:	d1ed      	bne.n	8002b84 <send_answer_to_CDC+0xa8>
		break;
 8002ba8:	e04f      	b.n	8002c4a <send_answer_to_CDC+0x16e>
	case OK_TYPE_2:
		while((CDC_Transmit_FS(OK_Enter, strlen((const char *)OK_Enter))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	3301      	adds	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	482f      	ldr	r0, [pc, #188]	; (8002c70 <send_answer_to_CDC+0x194>)
 8002bb2:	f7fd faef 	bl	8000194 <strlen>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4619      	mov	r1, r3
 8002bbc:	482c      	ldr	r0, [pc, #176]	; (8002c70 <send_answer_to_CDC+0x194>)
 8002bbe:	f00b f907 	bl	800ddd0 <CDC_Transmit_FS>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d042      	beq.n	8002c4e <send_answer_to_CDC+0x172>
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2bff      	cmp	r3, #255	; 0xff
 8002bcc:	d1ed      	bne.n	8002baa <send_answer_to_CDC+0xce>
		break;
 8002bce:	e03e      	b.n	8002c4e <send_answer_to_CDC+0x172>
	case CLEAR_TYPE_1:
		while((CDC_Transmit_FS(clear, strlen((const char *)clear))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	4827      	ldr	r0, [pc, #156]	; (8002c74 <send_answer_to_CDC+0x198>)
 8002bd8:	f7fd fadc 	bl	8000194 <strlen>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	4619      	mov	r1, r3
 8002be2:	4824      	ldr	r0, [pc, #144]	; (8002c74 <send_answer_to_CDC+0x198>)
 8002be4:	f00b f8f4 	bl	800ddd0 <CDC_Transmit_FS>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d031      	beq.n	8002c52 <send_answer_to_CDC+0x176>
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2bff      	cmp	r3, #255	; 0xff
 8002bf2:	d1ed      	bne.n	8002bd0 <send_answer_to_CDC+0xf4>
		break;
 8002bf4:	e02d      	b.n	8002c52 <send_answer_to_CDC+0x176>
	case DONE_TYPE_1:
		while((CDC_Transmit_FS(Done, strlen((const char *)Done))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	481e      	ldr	r0, [pc, #120]	; (8002c78 <send_answer_to_CDC+0x19c>)
 8002bfe:	f7fd fac9 	bl	8000194 <strlen>
 8002c02:	4603      	mov	r3, r0
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	4619      	mov	r1, r3
 8002c08:	481b      	ldr	r0, [pc, #108]	; (8002c78 <send_answer_to_CDC+0x19c>)
 8002c0a:	f00b f8e1 	bl	800ddd0 <CDC_Transmit_FS>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <send_answer_to_CDC+0x17a>
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2bff      	cmp	r3, #255	; 0xff
 8002c18:	d1ed      	bne.n	8002bf6 <send_answer_to_CDC+0x11a>
		break;
 8002c1a:	e01c      	b.n	8002c56 <send_answer_to_CDC+0x17a>
	case RUN_CAL_TYPE_TEMP:
		while((CDC_Transmit_FS(run_cal, strlen((const char *)run_cal))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	4816      	ldr	r0, [pc, #88]	; (8002c7c <send_answer_to_CDC+0x1a0>)
 8002c24:	f7fd fab6 	bl	8000194 <strlen>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4813      	ldr	r0, [pc, #76]	; (8002c7c <send_answer_to_CDC+0x1a0>)
 8002c30:	f00b f8ce 	bl	800ddd0 <CDC_Transmit_FS>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00f      	beq.n	8002c5a <send_answer_to_CDC+0x17e>
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2bff      	cmp	r3, #255	; 0xff
 8002c3e:	d1ed      	bne.n	8002c1c <send_answer_to_CDC+0x140>
		break;
 8002c40:	e00b      	b.n	8002c5a <send_answer_to_CDC+0x17e>
		break;
 8002c42:	bf00      	nop
 8002c44:	e00a      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c46:	bf00      	nop
 8002c48:	e008      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c4a:	bf00      	nop
 8002c4c:	e006      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c4e:	bf00      	nop
 8002c50:	e004      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c52:	bf00      	nop
 8002c54:	e002      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c56:	bf00      	nop
 8002c58:	e000      	b.n	8002c5c <send_answer_to_CDC+0x180>
		break;
 8002c5a:	bf00      	nop
	}
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	2000034c 	.word	0x2000034c
 8002c68:	200006e4 	.word	0x200006e4
 8002c6c:	20000320 	.word	0x20000320
 8002c70:	200006cc 	.word	0x200006cc
 8002c74:	20000344 	.word	0x20000344
 8002c78:	20000710 	.word	0x20000710
 8002c7c:	20000328 	.word	0x20000328

08002c80 <cmd_SWEEP_START>:
//==============================================================================================


//==============================================================================================
void cmd_SWEEP_START()
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	output_state(Output_auto_STATE);
 8002c84:	2004      	movs	r0, #4
 8002c86:	f7ff fd57 	bl	8002738 <output_state>
	DDS_Calculation();
 8002c8a:	f7fe ff7f 	bl	8001b8c <DDS_Calculation>
	DAC_TEMP_CAL();
 8002c8e:	f7fe ff0d 	bl	8001aac <DAC_TEMP_CAL>
	CPLD_control(CPLD_ON_STATE); // Enable LDAC signal
 8002c92:	2001      	movs	r0, #1
 8002c94:	f7fe fd94 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002c98:	f7fe fe80 	bl	800199c <DAC_SendInit>
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <cmd_SWEEP_STOP>:
//==============================================================================================


//==============================================================================================
void cmd_SWEEP_STOP()
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7fe fd8b 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002caa:	f7fe fe77 	bl	800199c <DAC_SendInit>
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <cmd_DAC_SET>:
//==============================================================================================


//==============================================================================================
void cmd_DAC_SET(uint32_t code)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	if (code>0xFFFFF)return;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cc2:	d21a      	bcs.n	8002cfa <cmd_DAC_SET+0x46>

	switch(code)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <cmd_DAC_SET+0x20>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <cmd_DAC_SET+0x50>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <cmd_DAC_SET+0x28>
 8002cd2:	e007      	b.n	8002ce4 <cmd_DAC_SET+0x30>
	{
	case DAC_CODE_DOWN:
		DAC_code_direction=1;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <cmd_DAC_SET+0x54>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
		break;
 8002cda:	e003      	b.n	8002ce4 <cmd_DAC_SET+0x30>
	case DAC_CODE_TOP:
		DAC_code_direction=0;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <cmd_DAC_SET+0x54>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
		break;
 8002ce2:	bf00      	nop
	}

	CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fe fd6b 	bl	80017c0 <CPLD_control>
	DAC_SendInit();
 8002cea:	f7fe fe57 	bl	800199c <DAC_SendInit>
	DAC_TEMP_CAL();
 8002cee:	f7fe fedd 	bl	8001aac <DAC_TEMP_CAL>
	DAC_Write(code);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fdf8 	bl	80018e8 <DAC_Write>
 8002cf8:	e000      	b.n	8002cfc <cmd_DAC_SET+0x48>
	if (code>0xFFFFF)return;
 8002cfa:	bf00      	nop
}
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	000fffff 	.word	0x000fffff
 8002d08:	20000c70 	.word	0x20000c70

08002d0c <cmd_SET_OUTPUT_VOLTAGE>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_SET_OUTPUT_VOLTAGE(float volt)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	float dac_resolution;

	if(volt>=cal_DAC_down_voltage && volt<=cal_DAC_up_voltage)
 8002d14:	4b80      	ldr	r3, [pc, #512]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fa06 	bl	800112c <__aeabi_fcmpge>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d037      	beq.n	8002d96 <cmd_SET_OUTPUT_VOLTAGE+0x8a>
 8002d26:	4b7d      	ldr	r3, [pc, #500]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7fe f9f3 	bl	8001118 <__aeabi_fcmple>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d02e      	beq.n	8002d96 <cmd_SET_OUTPUT_VOLTAGE+0x8a>
	{
		if(Current_output_status!=Output_x1_STATE)output_state(Output_x1_STATE);
 8002d38:	4b79      	ldr	r3, [pc, #484]	; (8002f20 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d002      	beq.n	8002d46 <cmd_SET_OUTPUT_VOLTAGE+0x3a>
 8002d40:	2001      	movs	r0, #1
 8002d42:	f7ff fcf9 	bl	8002738 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 8002d46:	4b75      	ldr	r3, [pc, #468]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a73      	ldr	r2, [pc, #460]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd ff2f 	bl	8000bb4 <__aeabi_fsub>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4972      	ldr	r1, [pc, #456]	; (8002f24 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe f8e8 	bl	8000f30 <__aeabi_fdiv>
 8002d60:	4603      	mov	r3, r0
 8002d62:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage)/dac_resolution);
 8002d64:	4b6c      	ldr	r3, [pc, #432]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd ff22 	bl	8000bb4 <__aeabi_fsub>
 8002d70:	4603      	mov	r3, r0
 8002d72:	68f9      	ldr	r1, [r7, #12]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe f8db 	bl	8000f30 <__aeabi_fdiv>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe f9e9 	bl	8001154 <__aeabi_f2uiz>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4a68      	ldr	r2, [pc, #416]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002d86:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002d88:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff91 	bl	8002cb4 <cmd_DAC_SET>
		return 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0bc      	b.n	8002f10 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}
	if(volt>=(cal_DAC_down_voltage*gain_x2_coeff) && volt<=(cal_DAC_up_voltage*gain_x2_coeff))
 8002d96:	4b60      	ldr	r3, [pc, #384]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a64      	ldr	r2, [pc, #400]	; (8002f2c <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe f811 	bl	8000dc8 <__aeabi_fmul>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe f9be 	bl	800112c <__aeabi_fcmpge>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d04d      	beq.n	8002e52 <cmd_SET_OUTPUT_VOLTAGE+0x146>
 8002db6:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a5c      	ldr	r2, [pc, #368]	; (8002f2c <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe f801 	bl	8000dc8 <__aeabi_fmul>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe f9a4 	bl	8001118 <__aeabi_fcmple>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03d      	beq.n	8002e52 <cmd_SET_OUTPUT_VOLTAGE+0x146>
	{
		if(Current_output_status!=Output_x2_STATE)output_state(Output_x2_STATE);
 8002dd6:	4b52      	ldr	r3, [pc, #328]	; (8002f20 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d002      	beq.n	8002de4 <cmd_SET_OUTPUT_VOLTAGE+0xd8>
 8002dde:	2002      	movs	r0, #2
 8002de0:	f7ff fcaa 	bl	8002738 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x2_coeff/0xFFFFF; // Calculate 1 LSB resolution
 8002de4:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a4b      	ldr	r2, [pc, #300]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fee0 	bl	8000bb4 <__aeabi_fsub>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b4c      	ldr	r3, [pc, #304]	; (8002f2c <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f7fd ffe2 	bl	8000dc8 <__aeabi_fmul>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4947      	ldr	r1, [pc, #284]	; (8002f24 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe f891 	bl	8000f30 <__aeabi_fdiv>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage*gain_x2_coeff)/dac_resolution);
 8002e12:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a45      	ldr	r2, [pc, #276]	; (8002f2c <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd ffd3 	bl	8000dc8 <__aeabi_fmul>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fd fec4 	bl	8000bb4 <__aeabi_fsub>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	68f9      	ldr	r1, [r7, #12]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f87d 	bl	8000f30 <__aeabi_fdiv>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe f98b 	bl	8001154 <__aeabi_f2uiz>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a39      	ldr	r2, [pc, #228]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002e42:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002e44:	4b38      	ldr	r3, [pc, #224]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff33 	bl	8002cb4 <cmd_DAC_SET>
		return 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e05e      	b.n	8002f10 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}
	if(volt>=(cal_DAC_down_voltage*gain_x4_coeff) && volt<=(cal_DAC_up_voltage*gain_x4_coeff))
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a36      	ldr	r2, [pc, #216]	; (8002f30 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd ffb3 	bl	8000dc8 <__aeabi_fmul>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe f960 	bl	800112c <__aeabi_fcmpge>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d04d      	beq.n	8002f0e <cmd_SET_OUTPUT_VOLTAGE+0x202>
 8002e72:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2e      	ldr	r2, [pc, #184]	; (8002f30 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd ffa3 	bl	8000dc8 <__aeabi_fmul>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe f946 	bl	8001118 <__aeabi_fcmple>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03d      	beq.n	8002f0e <cmd_SET_OUTPUT_VOLTAGE+0x202>
	{
		if(Current_output_status!=Output_x4_STATE)output_state(Output_x4_STATE);
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d002      	beq.n	8002ea0 <cmd_SET_OUTPUT_VOLTAGE+0x194>
 8002e9a:	2003      	movs	r0, #3
 8002e9c:	f7ff fc4c 	bl	8002738 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x4_coeff/0xFFFFF; // Calculate 1 LSB resolution
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fe82 	bl	8000bb4 <__aeabi_fsub>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f7fd ff84 	bl	8000dc8 <__aeabi_fmul>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4918      	ldr	r1, [pc, #96]	; (8002f24 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe f833 	bl	8000f30 <__aeabi_fdiv>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage*gain_x4_coeff)/dac_resolution);
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd ff75 	bl	8000dc8 <__aeabi_fmul>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fe66 	bl	8000bb4 <__aeabi_fsub>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	68f9      	ldr	r1, [r7, #12]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f81f 	bl	8000f30 <__aeabi_fdiv>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe f92d 	bl	8001154 <__aeabi_f2uiz>
 8002efa:	4603      	mov	r3, r0
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002efe:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fed5 	bl	8002cb4 <cmd_DAC_SET>
		return 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}

	return 0;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000c64 	.word	0x20000c64
 8002f1c:	20000c60 	.word	0x20000c60
 8002f20:	20000c68 	.word	0x20000c68
 8002f24:	497ffff0 	.word	0x497ffff0
 8002f28:	20000c6c 	.word	0x20000c6c
 8002f2c:	20000ab8 	.word	0x20000ab8
 8002f30:	20000abc 	.word	0x20000abc
 8002f34:	00000000 	.word	0x00000000

08002f38 <cmd_SWEEP_RATE>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_SWEEP_RATE(float rate)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
		if(rate<0.0009 || rate>1.1) // V/s
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7fd fa93 	bl	800046c <__aeabi_f2d>
 8002f46:	a316      	add	r3, pc, #88	; (adr r3, 8002fa0 <cmd_SWEEP_RATE+0x68>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	f7fd fd58 	bl	8000a00 <__aeabi_dcmplt>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <cmd_SWEEP_RATE+0x34>
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd fa88 	bl	800046c <__aeabi_f2d>
 8002f5c:	a312      	add	r3, pc, #72	; (adr r3, 8002fa8 <cmd_SWEEP_RATE+0x70>)
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f7fd fd6b 	bl	8000a3c <__aeabi_dcmpgt>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <cmd_SWEEP_RATE+0x38>
		{
			return 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e010      	b.n	8002f92 <cmd_SWEEP_RATE+0x5a>
		}
		else
		{
			DAC_target_speed=rate;
 8002f70:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <cmd_SWEEP_RATE+0x78>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6013      	str	r3, [r2, #0]
			if(cfg.LDACMODE==0)
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <cmd_SWEEP_RATE+0x7c>)
 8002f78:	789b      	ldrb	r3, [r3, #2]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d103      	bne.n	8002f86 <cmd_SWEEP_RATE+0x4e>
			{
				CPLD_control(CPLD_OFF_STATE);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fe fc1e 	bl	80017c0 <CPLD_control>
 8002f84:	e002      	b.n	8002f8c <cmd_SWEEP_RATE+0x54>
			}
			else
			{
				CPLD_control(CPLD_ON_STATE);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f7fe fc1a 	bl	80017c0 <CPLD_control>
			}

			DDS_Calculation();
 8002f8c:	f7fe fdfe 	bl	8001b8c <DDS_Calculation>
			return 1;
 8002f90:	2301      	movs	r3, #1
		}
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	f3af 8000 	nop.w
 8002fa0:	487fcb92 	.word	0x487fcb92
 8002fa4:	3f4d7dbf 	.word	0x3f4d7dbf
 8002fa8:	9999999a 	.word	0x9999999a
 8002fac:	3ff19999 	.word	0x3ff19999
 8002fb0:	20000c58 	.word	0x20000c58
 8002fb4:	20000c44 	.word	0x20000c44

08002fb8 <cmd_CAL>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_CAL(uint8_t cmd, float coeff)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
	float tmpx;

	tmpx=coeff;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	3b06      	subs	r3, #6
 8002fcc:	2b07      	cmp	r3, #7
 8002fce:	f200 80e7 	bhi.w	80031a0 <cmd_CAL+0x1e8>
 8002fd2:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <cmd_CAL+0x20>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	08002ff9 	.word	0x08002ff9
 8002fdc:	0800300b 	.word	0x0800300b
 8002fe0:	0800301d 	.word	0x0800301d
 8002fe4:	0800302f 	.word	0x0800302f
 8002fe8:	080030c5 	.word	0x080030c5
 8002fec:	08003133 	.word	0x08003133
 8002ff0:	08003041 	.word	0x08003041
 8002ff4:	08003083 	.word	0x08003083
	{
	case DAC_CAL_TEMP:
		DAC_Write(DAC_CODE_MIDDLE);
 8002ff8:	4885      	ldr	r0, [pc, #532]	; (8003210 <cmd_CAL+0x258>)
 8002ffa:	f7fe fc75 	bl	80018e8 <DAC_Write>
		DAC_TEMP_CAL();
 8002ffe:	f7fe fd55 	bl	8001aac <DAC_TEMP_CAL>
		DAC_Write(DAC_CODE_MIDDLE);
 8003002:	4883      	ldr	r0, [pc, #524]	; (8003210 <cmd_CAL+0x258>)
 8003004:	f7fe fc70 	bl	80018e8 <DAC_Write>
		break;
 8003008:	e0ca      	b.n	80031a0 <cmd_CAL+0x1e8>

	case DAC_CAL_POLY_A:
		EEPROM_write(corr_coeff_1_EEPROM_ADDRESS,float_to_binary(tmpx));
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f97b 	bl	8003306 <float_to_binary>
 8003010:	4603      	mov	r3, r0
 8003012:	4619      	mov	r1, r3
 8003014:	2010      	movs	r0, #16
 8003016:	f000 f9b5 	bl	8003384 <EEPROM_write>
		break;
 800301a:	e0c1      	b.n	80031a0 <cmd_CAL+0x1e8>
	case DAC_CAL_POLY_B:
		EEPROM_write(corr_coeff_2_EEPROM_ADDRESS,float_to_binary(tmpx));
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f972 	bl	8003306 <float_to_binary>
 8003022:	4603      	mov	r3, r0
 8003024:	4619      	mov	r1, r3
 8003026:	2018      	movs	r0, #24
 8003028:	f000 f9ac 	bl	8003384 <EEPROM_write>
		break;
 800302c:	e0b8      	b.n	80031a0 <cmd_CAL+0x1e8>
	case DAC_CAL_POLY_C:
		EEPROM_write(corr_coeff_3_EEPROM_ADDRESS,float_to_binary(tmpx));
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f969 	bl	8003306 <float_to_binary>
 8003034:	4603      	mov	r3, r0
 8003036:	4619      	mov	r1, r3
 8003038:	2020      	movs	r0, #32
 800303a:	f000 f9a3 	bl	8003384 <EEPROM_write>
		break;
 800303e:	e0af      	b.n	80031a0 <cmd_CAL+0x1e8>

	case GAIN_X2_CAL:
		if((tmpx<2.1 && tmpx>1.9))
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7fd fa13 	bl	800046c <__aeabi_f2d>
 8003046:	a35a      	add	r3, pc, #360	; (adr r3, 80031b0 <cmd_CAL+0x1f8>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f7fd fcd8 	bl	8000a00 <__aeabi_dcmplt>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d013      	beq.n	800307e <cmd_CAL+0xc6>
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7fd fa08 	bl	800046c <__aeabi_f2d>
 800305c:	a356      	add	r3, pc, #344	; (adr r3, 80031b8 <cmd_CAL+0x200>)
 800305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003062:	f7fd fceb 	bl	8000a3c <__aeabi_dcmpgt>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <cmd_CAL+0xc6>
		{
			EEPROM_write(gain_x2_EEPROM_ADDRESS,float_to_binary(tmpx));
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f94a 	bl	8003306 <float_to_binary>
 8003072:	4603      	mov	r3, r0
 8003074:	4619      	mov	r1, r3
 8003076:	2028      	movs	r0, #40	; 0x28
 8003078:	f000 f984 	bl	8003384 <EEPROM_write>
		}
		else return 0;
		break;
 800307c:	e090      	b.n	80031a0 <cmd_CAL+0x1e8>
		else return 0;
 800307e:	2300      	movs	r3, #0
 8003080:	e091      	b.n	80031a6 <cmd_CAL+0x1ee>
	case GAIN_X4_CAL:
		if((tmpx<4.1 && tmpx>3.9))
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7fd f9f2 	bl	800046c <__aeabi_f2d>
 8003088:	a34d      	add	r3, pc, #308	; (adr r3, 80031c0 <cmd_CAL+0x208>)
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	f7fd fcb7 	bl	8000a00 <__aeabi_dcmplt>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <cmd_CAL+0x108>
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7fd f9e7 	bl	800046c <__aeabi_f2d>
 800309e:	a34a      	add	r3, pc, #296	; (adr r3, 80031c8 <cmd_CAL+0x210>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f7fd fcca 	bl	8000a3c <__aeabi_dcmpgt>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <cmd_CAL+0x108>
		{
			EEPROM_write(gain_x4_EEPROM_ADDRESS,float_to_binary(tmpx));
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f929 	bl	8003306 <float_to_binary>
 80030b4:	4603      	mov	r3, r0
 80030b6:	4619      	mov	r1, r3
 80030b8:	2030      	movs	r0, #48	; 0x30
 80030ba:	f000 f963 	bl	8003384 <EEPROM_write>
		}
		else return 0;
		break;
 80030be:	e06f      	b.n	80031a0 <cmd_CAL+0x1e8>
		else return 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e070      	b.n	80031a6 <cmd_CAL+0x1ee>
	case DAC_CAL_TOP:
		if((tmpx<10.1 && tmpx>9.9) || (tmpx>6.8 && tmpx<7.1))
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7fd f9d1 	bl	800046c <__aeabi_f2d>
 80030ca:	a341      	add	r3, pc, #260	; (adr r3, 80031d0 <cmd_CAL+0x218>)
 80030cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d0:	f7fd fc96 	bl	8000a00 <__aeabi_dcmplt>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <cmd_CAL+0x138>
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7fd f9c6 	bl	800046c <__aeabi_f2d>
 80030e0:	a33d      	add	r3, pc, #244	; (adr r3, 80031d8 <cmd_CAL+0x220>)
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	f7fd fca9 	bl	8000a3c <__aeabi_dcmpgt>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d115      	bne.n	800311c <cmd_CAL+0x164>
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7fd f9bb 	bl	800046c <__aeabi_f2d>
 80030f6:	a33a      	add	r3, pc, #232	; (adr r3, 80031e0 <cmd_CAL+0x228>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd fc9e 	bl	8000a3c <__aeabi_dcmpgt>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d013      	beq.n	800312e <cmd_CAL+0x176>
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7fd f9b0 	bl	800046c <__aeabi_f2d>
 800310c:	a336      	add	r3, pc, #216	; (adr r3, 80031e8 <cmd_CAL+0x230>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd fc75 	bl	8000a00 <__aeabi_dcmplt>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <cmd_CAL+0x176>
		{
			EEPROM_write(cal_DAC_up_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f8f2 	bl	8003306 <float_to_binary>
 8003122:	4603      	mov	r3, r0
 8003124:	4619      	mov	r1, r3
 8003126:	2000      	movs	r0, #0
 8003128:	f000 f92c 	bl	8003384 <EEPROM_write>
		}
		else return 0;
		break;
 800312c:	e038      	b.n	80031a0 <cmd_CAL+0x1e8>
		else return 0;
 800312e:	2300      	movs	r3, #0
 8003130:	e039      	b.n	80031a6 <cmd_CAL+0x1ee>
	case DAC_CAL_DOWN:
		if((tmpx>-10.1 && tmpx<-9.9) || (tmpx<-6.8 && tmpx>-7.1))
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f7fd f99a 	bl	800046c <__aeabi_f2d>
 8003138:	a32d      	add	r3, pc, #180	; (adr r3, 80031f0 <cmd_CAL+0x238>)
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	f7fd fc7d 	bl	8000a3c <__aeabi_dcmpgt>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <cmd_CAL+0x1a6>
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7fd f98f 	bl	800046c <__aeabi_f2d>
 800314e:	a32a      	add	r3, pc, #168	; (adr r3, 80031f8 <cmd_CAL+0x240>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	f7fd fc54 	bl	8000a00 <__aeabi_dcmplt>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <cmd_CAL+0x1d2>
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f7fd f984 	bl	800046c <__aeabi_f2d>
 8003164:	a326      	add	r3, pc, #152	; (adr r3, 8003200 <cmd_CAL+0x248>)
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f7fd fc49 	bl	8000a00 <__aeabi_dcmplt>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <cmd_CAL+0x1e4>
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7fd f979 	bl	800046c <__aeabi_f2d>
 800317a:	a323      	add	r3, pc, #140	; (adr r3, 8003208 <cmd_CAL+0x250>)
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f7fd fc5c 	bl	8000a3c <__aeabi_dcmpgt>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <cmd_CAL+0x1e4>
		{
			EEPROM_write(cal_DAC_down_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f8bb 	bl	8003306 <float_to_binary>
 8003190:	4603      	mov	r3, r0
 8003192:	4619      	mov	r1, r3
 8003194:	2008      	movs	r0, #8
 8003196:	f000 f8f5 	bl	8003384 <EEPROM_write>
		}
		else return 0;
		break;
 800319a:	e001      	b.n	80031a0 <cmd_CAL+0x1e8>
		else return 0;
 800319c:	2300      	movs	r3, #0
 800319e:	e002      	b.n	80031a6 <cmd_CAL+0x1ee>
	}

	load_data_from_EEPROM();
 80031a0:	f000 f838 	bl	8003214 <load_data_from_EEPROM>
	return 1;
 80031a4:	2301      	movs	r3, #1
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	cccccccd 	.word	0xcccccccd
 80031b4:	4000cccc 	.word	0x4000cccc
 80031b8:	66666666 	.word	0x66666666
 80031bc:	3ffe6666 	.word	0x3ffe6666
 80031c0:	66666666 	.word	0x66666666
 80031c4:	40106666 	.word	0x40106666
 80031c8:	33333333 	.word	0x33333333
 80031cc:	400f3333 	.word	0x400f3333
 80031d0:	33333333 	.word	0x33333333
 80031d4:	40243333 	.word	0x40243333
 80031d8:	cccccccd 	.word	0xcccccccd
 80031dc:	4023cccc 	.word	0x4023cccc
 80031e0:	33333333 	.word	0x33333333
 80031e4:	401b3333 	.word	0x401b3333
 80031e8:	66666666 	.word	0x66666666
 80031ec:	401c6666 	.word	0x401c6666
 80031f0:	33333333 	.word	0x33333333
 80031f4:	c0243333 	.word	0xc0243333
 80031f8:	cccccccd 	.word	0xcccccccd
 80031fc:	c023cccc 	.word	0xc023cccc
 8003200:	33333333 	.word	0x33333333
 8003204:	c01b3333 	.word	0xc01b3333
 8003208:	66666666 	.word	0x66666666
 800320c:	c01c6666 	.word	0xc01c6666
 8003210:	0007ffff 	.word	0x0007ffff

08003214 <load_data_from_EEPROM>:
//==============================================================================================


//==============================================================================================
void load_data_from_EEPROM(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	cal_DAC_up_voltage=binary_to_float(EEPROM_read(cal_DAC_up_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 8003218:	2000      	movs	r0, #0
 800321a:	f000 f899 	bl	8003350 <EEPROM_read>
 800321e:	4603      	mov	r3, r0
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f85d 	bl	80032e0 <binary_to_float>
 8003226:	4603      	mov	r3, r0
 8003228:	4a25      	ldr	r2, [pc, #148]	; (80032c0 <load_data_from_EEPROM+0xac>)
 800322a:	6013      	str	r3, [r2, #0]
	cal_DAC_down_voltage=binary_to_float(EEPROM_read(cal_DAC_down_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 800322c:	2008      	movs	r0, #8
 800322e:	f000 f88f 	bl	8003350 <EEPROM_read>
 8003232:	4603      	mov	r3, r0
 8003234:	4618      	mov	r0, r3
 8003236:	f000 f853 	bl	80032e0 <binary_to_float>
 800323a:	4603      	mov	r3, r0
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <load_data_from_EEPROM+0xb0>)
 800323e:	6013      	str	r3, [r2, #0]
	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8003240:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <load_data_from_EEPROM+0xac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <load_data_from_EEPROM+0xb0>)
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd fcb2 	bl	8000bb4 <__aeabi_fsub>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <load_data_from_EEPROM+0xb4>)
 8003256:	601a      	str	r2, [r3, #0]

	corr_coeff_1=binary_to_float(EEPROM_read(corr_coeff_1_EEPROM_ADDRESS));
 8003258:	2010      	movs	r0, #16
 800325a:	f000 f879 	bl	8003350 <EEPROM_read>
 800325e:	4603      	mov	r3, r0
 8003260:	4618      	mov	r0, r3
 8003262:	f000 f83d 	bl	80032e0 <binary_to_float>
 8003266:	4603      	mov	r3, r0
 8003268:	4a18      	ldr	r2, [pc, #96]	; (80032cc <load_data_from_EEPROM+0xb8>)
 800326a:	6013      	str	r3, [r2, #0]
	corr_coeff_2=binary_to_float(EEPROM_read(corr_coeff_2_EEPROM_ADDRESS));
 800326c:	2018      	movs	r0, #24
 800326e:	f000 f86f 	bl	8003350 <EEPROM_read>
 8003272:	4603      	mov	r3, r0
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f833 	bl	80032e0 <binary_to_float>
 800327a:	4603      	mov	r3, r0
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <load_data_from_EEPROM+0xbc>)
 800327e:	6013      	str	r3, [r2, #0]
	corr_coeff_3=binary_to_float(EEPROM_read(corr_coeff_3_EEPROM_ADDRESS));
 8003280:	2020      	movs	r0, #32
 8003282:	f000 f865 	bl	8003350 <EEPROM_read>
 8003286:	4603      	mov	r3, r0
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f829 	bl	80032e0 <binary_to_float>
 800328e:	4603      	mov	r3, r0
 8003290:	4a10      	ldr	r2, [pc, #64]	; (80032d4 <load_data_from_EEPROM+0xc0>)
 8003292:	6013      	str	r3, [r2, #0]
	gain_x2_coeff=binary_to_float(EEPROM_read(gain_x2_EEPROM_ADDRESS));
 8003294:	2028      	movs	r0, #40	; 0x28
 8003296:	f000 f85b 	bl	8003350 <EEPROM_read>
 800329a:	4603      	mov	r3, r0
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f81f 	bl	80032e0 <binary_to_float>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <load_data_from_EEPROM+0xc4>)
 80032a6:	6013      	str	r3, [r2, #0]
	gain_x4_coeff=binary_to_float(EEPROM_read(gain_x4_EEPROM_ADDRESS));
 80032a8:	2030      	movs	r0, #48	; 0x30
 80032aa:	f000 f851 	bl	8003350 <EEPROM_read>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f815 	bl	80032e0 <binary_to_float>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4a08      	ldr	r2, [pc, #32]	; (80032dc <load_data_from_EEPROM+0xc8>)
 80032ba:	6013      	str	r3, [r2, #0]
}
 80032bc:	bf00      	nop
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000c60 	.word	0x20000c60
 80032c4:	20000c64 	.word	0x20000c64
 80032c8:	20000c5c 	.word	0x20000c5c
 80032cc:	20000aac 	.word	0x20000aac
 80032d0:	20000ab0 	.word	0x20000ab0
 80032d4:	20000ab4 	.word	0x20000ab4
 80032d8:	20000ab8 	.word	0x20000ab8
 80032dc:	20000abc 	.word	0x20000abc

080032e0 <binary_to_float>:
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC push_options
#pragma GCC optimize ("O0")

float binary_to_float(uint32_t a)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	    int * p;
	    float out=0;
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]

	    p = &out;
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	60fb      	str	r3, [r7, #12]
	    (*p)=a;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	601a      	str	r2, [r3, #0]
	    return out;
 80032fa:	68bb      	ldr	r3, [r7, #8]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <float_to_binary>:


uint32_t float_to_binary(float a)
{
 8003306:	b480      	push	{r7}
 8003308:	b087      	sub	sp, #28
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
	    int i;
	    int * p;
	    uint32_t out=0;
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]

	    p = &a;
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	60fb      	str	r3, [r7, #12]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 8003316:	231f      	movs	r3, #31
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e010      	b.n	800333e <float_to_binary+0x38>
	    {
	    	out+=((*p) >> i & 1)<<i;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa42 f303 	asr.w	r3, r2, r3
 8003326:	f003 0201 	and.w	r2, r3, #1
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	461a      	mov	r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3b01      	subs	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	daeb      	bge.n	800331c <float_to_binary+0x16>
	    }

	    return out;
 8003344:	693b      	ldr	r3, [r7, #16]
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <EEPROM_read>:
//==============================================================================================


//==============================================================================================
uint32_t EEPROM_read(uint32_t address_of_read)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	uint32_t Address;

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800335e:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8003362:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4a06      	ldr	r2, [pc, #24]	; (8003380 <EEPROM_read+0x30>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d301      	bcc.n	8003370 <EEPROM_read+0x20>
	{
		return 0x00;
 800336c:	2300      	movs	r3, #0
 800336e:	e001      	b.n	8003374 <EEPROM_read+0x24>
	}
	return *(__IO uint32_t *) Address;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	08082800 	.word	0x08082800

08003384 <EEPROM_write>:
//==============================================================================================


//==============================================================================================
void EEPROM_write(uint32_t address_of_read, uint32_t data)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
	/* Clear all pending flags */
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR | FLASH_FLAG_OPTVERRUSR);

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
	     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003394:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8003398:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <EEPROM_write+0x50>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d212      	bcs.n	80033c8 <EEPROM_write+0x44>
	{
		return;
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 80033a2:	f001 fd2b 	bl	8004dfc <HAL_FLASHEx_DATAEEPROM_Unlock>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	68f9      	ldr	r1, [r7, #12]
 80033aa:	2002      	movs	r0, #2
 80033ac:	f001 fd84 	bl	8004eb8 <HAL_FLASHEx_DATAEEPROM_Program>
 80033b0:	4603      	mov	r3, r0
 80033b2:	72fb      	strb	r3, [r7, #11]
	HAL_FLASHEx_DATAEEPROM_Lock();
 80033b4:	f001 fd3e 	bl	8004e34 <HAL_FLASHEx_DATAEEPROM_Lock>

	if(FLASHStatus != HAL_OK)
 80033b8:	7afb      	ldrb	r3, [r7, #11]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <EEPROM_write+0x48>
	{
		return;
	}
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR);

	if(*(__IO uint32_t *) Address != data)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	e002      	b.n	80033ce <EEPROM_write+0x4a>
		return;
 80033c8:	bf00      	nop
 80033ca:	e000      	b.n	80033ce <EEPROM_write+0x4a>
		return;
 80033cc:	bf00      	nop
	{
		return;
	}

}
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	08082800 	.word	0x08082800

080033d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033de:	f107 0314 	add.w	r3, r7, #20
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	609a      	str	r2, [r3, #8]
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ee:	4b7c      	ldr	r3, [pc, #496]	; (80035e0 <MX_GPIO_Init+0x208>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4a7b      	ldr	r2, [pc, #492]	; (80035e0 <MX_GPIO_Init+0x208>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	61d3      	str	r3, [r2, #28]
 80033fa:	4b79      	ldr	r3, [pc, #484]	; (80035e0 <MX_GPIO_Init+0x208>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003406:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4a75      	ldr	r2, [pc, #468]	; (80035e0 <MX_GPIO_Init+0x208>)
 800340c:	f043 0320 	orr.w	r3, r3, #32
 8003410:	61d3      	str	r3, [r2, #28]
 8003412:	4b73      	ldr	r3, [pc, #460]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800341e:	4b70      	ldr	r3, [pc, #448]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a6f      	ldr	r2, [pc, #444]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	61d3      	str	r3, [r2, #28]
 800342a:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <MX_GPIO_Init+0x208>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003436:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4a69      	ldr	r2, [pc, #420]	; (80035e0 <MX_GPIO_Init+0x208>)
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	61d3      	str	r3, [r2, #28]
 8003442:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <MX_GPIO_Init+0x208>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 800344e:	2200      	movs	r2, #0
 8003450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003454:	4863      	ldr	r0, [pc, #396]	; (80035e4 <MX_GPIO_Init+0x20c>)
 8003456:	f002 f920 	bl	800569a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, GPIO_PIN_SET);
 800345a:	2201      	movs	r2, #1
 800345c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003460:	4860      	ldr	r0, [pc, #384]	; (80035e4 <MX_GPIO_Init+0x20c>)
 8003462:	f002 f91a 	bl	800569a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 8003466:	2201      	movs	r2, #1
 8003468:	f248 011f 	movw	r1, #32799	; 0x801f
 800346c:	485e      	ldr	r0, [pc, #376]	; (80035e8 <MX_GPIO_Init+0x210>)
 800346e:	f002 f914 	bl	800569a <HAL_GPIO_WritePin>
                          |DAC_SYNC_Pin|DAC_CLR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RS_Pin|Display_Power_Pin, GPIO_PIN_RESET);
 8003472:	2200      	movs	r2, #0
 8003474:	f640 0101 	movw	r1, #2049	; 0x801
 8003478:	485c      	ldr	r0, [pc, #368]	; (80035ec <MX_GPIO_Init+0x214>)
 800347a:	f002 f90e 	bl	800569a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|SPI2_NSS_Pin
 800347e:	2201      	movs	r2, #1
 8003480:	f241 413e 	movw	r1, #5182	; 0x143e
 8003484:	4859      	ldr	r0, [pc, #356]	; (80035ec <MX_GPIO_Init+0x214>)
 8003486:	f002 f908 	bl	800569a <HAL_GPIO_WritePin>
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Start_button_Pin;
 800348a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800348e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003490:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003496:	2301      	movs	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Start_button_GPIO_Port, &GPIO_InitStruct);
 800349a:	f107 0314 	add.w	r3, r7, #20
 800349e:	4619      	mov	r1, r3
 80034a0:	4850      	ldr	r0, [pc, #320]	; (80035e4 <MX_GPIO_Init+0x20c>)
 80034a2:	f001 ff63 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Count_EN_Pin;
 80034a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ac:	2301      	movs	r3, #1
 80034ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b4:	2302      	movs	r3, #2
 80034b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Count_EN_GPIO_Port, &GPIO_InitStruct);
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4619      	mov	r1, r3
 80034be:	4849      	ldr	r0, [pc, #292]	; (80035e4 <MX_GPIO_Init+0x20c>)
 80034c0:	f001 ff54 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_cs_Pin;
 80034c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_cs_GPIO_Port, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4841      	ldr	r0, [pc, #260]	; (80035e4 <MX_GPIO_Init+0x20c>)
 80034de:	f001 ff45 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 80034e2:	f248 030f 	movw	r3, #32783	; 0x800f
 80034e6:	617b      	str	r3, [r7, #20]
                          |DAC_CLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e8:	2301      	movs	r3, #1
 80034ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f0:	2303      	movs	r3, #3
 80034f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4619      	mov	r1, r3
 80034fa:	483b      	ldr	r0, [pc, #236]	; (80035e8 <MX_GPIO_Init+0x210>)
 80034fc:	f001 ff36 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8003500:	2310      	movs	r3, #16
 8003502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003504:	2301      	movs	r3, #1
 8003506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003508:	2301      	movs	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350c:	2303      	movs	r3, #3
 800350e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	4619      	mov	r1, r3
 8003516:	4834      	ldr	r0, [pc, #208]	; (80035e8 <MX_GPIO_Init+0x210>)
 8003518:	f001 ff28 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Display_RS_Pin;
 800351c:	2301      	movs	r3, #1
 800351e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003520:	2301      	movs	r3, #1
 8003522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003528:	2302      	movs	r3, #2
 800352a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Display_RS_GPIO_Port, &GPIO_InitStruct);
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	482e      	ldr	r0, [pc, #184]	; (80035ec <MX_GPIO_Init+0x214>)
 8003534:	f001 ff1a 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|Display_Power_Pin
 8003538:	f640 433e 	movw	r3, #3134	; 0xc3e
 800353c:	617b      	str	r3, [r7, #20]
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800353e:	2311      	movs	r3, #17
 8003540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003546:	2302      	movs	r3, #2
 8003548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354a:	f107 0314 	add.w	r3, r7, #20
 800354e:	4619      	mov	r1, r3
 8003550:	4826      	ldr	r0, [pc, #152]	; (80035ec <MX_GPIO_Init+0x214>)
 8003552:	f001 ff0b 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8003556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800355a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355c:	2301      	movs	r3, #1
 800355e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003564:	2303      	movs	r3, #3
 8003566:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8003568:	f107 0314 	add.w	r3, r7, #20
 800356c:	4619      	mov	r1, r3
 800356e:	481f      	ldr	r0, [pc, #124]	; (80035ec <MX_GPIO_Init+0x214>)
 8003570:	f001 fefc 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encode_Push_Pin;
 8003574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800357a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800357e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003580:	2301      	movs	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encode_Push_GPIO_Port, &GPIO_InitStruct);
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4619      	mov	r1, r3
 800358a:	4817      	ldr	r0, [pc, #92]	; (80035e8 <MX_GPIO_Init+0x210>)
 800358c:	f001 feee 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003596:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800359a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4619      	mov	r1, r3
 80035a6:	4810      	ldr	r0, [pc, #64]	; (80035e8 <MX_GPIO_Init+0x210>)
 80035a8:	f001 fee0 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 80035ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	4619      	mov	r1, r3
 80035c0:	4809      	ldr	r0, [pc, #36]	; (80035e8 <MX_GPIO_Init+0x210>)
 80035c2:	f001 fed3 	bl	800536c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2101      	movs	r1, #1
 80035ca:	2028      	movs	r0, #40	; 0x28
 80035cc:	f001 faf9 	bl	8004bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80035d0:	2028      	movs	r0, #40	; 0x28
 80035d2:	f001 fb12 	bl	8004bfa <HAL_NVIC_EnableIRQ>

}
 80035d6:	bf00      	nop
 80035d8:	3728      	adds	r7, #40	; 0x28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40020800 	.word	0x40020800
 80035e8:	40020000 	.word	0x40020000
 80035ec:	40020400 	.word	0x40020400

080035f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <MX_I2C1_Init+0x50>)
 80035f6:	4a13      	ldr	r2, [pc, #76]	; (8003644 <MX_I2C1_Init+0x54>)
 80035f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035fa:	4b11      	ldr	r3, [pc, #68]	; (8003640 <MX_I2C1_Init+0x50>)
 80035fc:	4a12      	ldr	r2, [pc, #72]	; (8003648 <MX_I2C1_Init+0x58>)
 80035fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <MX_I2C1_Init+0x50>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003606:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <MX_I2C1_Init+0x50>)
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <MX_I2C1_Init+0x50>)
 800360e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <MX_I2C1_Init+0x50>)
 8003616:	2200      	movs	r2, #0
 8003618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <MX_I2C1_Init+0x50>)
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <MX_I2C1_Init+0x50>)
 8003622:	2200      	movs	r2, #0
 8003624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <MX_I2C1_Init+0x50>)
 8003628:	2200      	movs	r2, #0
 800362a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800362c:	4804      	ldr	r0, [pc, #16]	; (8003640 <MX_I2C1_Init+0x50>)
 800362e:	f002 f865 	bl	80056fc <HAL_I2C_Init>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003638:	f000 fcfe 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800363c:	bf00      	nop
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000bc4 	.word	0x20000bc4
 8003644:	40005400 	.word	0x40005400
 8003648:	000186a0 	.word	0x000186a0

0800364c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <HAL_I2C_MspInit+0x7c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d128      	bne.n	80036c0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <HAL_I2C_MspInit+0x80>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	4a16      	ldr	r2, [pc, #88]	; (80036cc <HAL_I2C_MspInit+0x80>)
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	61d3      	str	r3, [r2, #28]
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_I2C_MspInit+0x80>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TMP117_SCL_Pin|TMP117_SDA_Pin;
 8003686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800368a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800368c:	2312      	movs	r3, #18
 800368e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003690:	2301      	movs	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003698:	2304      	movs	r3, #4
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	4619      	mov	r1, r3
 80036a2:	480b      	ldr	r0, [pc, #44]	; (80036d0 <HAL_I2C_MspInit+0x84>)
 80036a4:	f001 fe62 	bl	800536c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036a8:	4b08      	ldr	r3, [pc, #32]	; (80036cc <HAL_I2C_MspInit+0x80>)
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	4a07      	ldr	r2, [pc, #28]	; (80036cc <HAL_I2C_MspInit+0x80>)
 80036ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036b2:	6253      	str	r3, [r2, #36]	; 0x24
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_I2C_MspInit+0x80>)
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80036c0:	bf00      	nop
 80036c2:	3728      	adds	r7, #40	; 0x28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40005400 	.word	0x40005400
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40020400 	.word	0x40020400

080036d4 <USB_rx_command_buffer_push_refd>:

uint8_t eta_hours,eta_minute,eta_second;

int16_t Enc_Counter = 0;

CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4804      	ldr	r0, [pc, #16]	; (80036f0 <USB_rx_command_buffer_push_refd+0x1c>)
 80036e0:	f7fd ff66 	bl	80015b0 <__circ_gbuf_push>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000728 	.word	0x20000728

080036f4 <USB_rx_command_buffer_pop_refd>:
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4803      	ldr	r0, [pc, #12]	; (8003710 <USB_rx_command_buffer_pop_refd+0x1c>)
 8003702:	f7fd ff03 	bl	800150c <__circ_gbuf_pop>
 8003706:	4603      	mov	r3, r0
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000728 	.word	0x20000728

08003714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b095      	sub	sp, #84	; 0x54
 8003718:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 800371a:	4b67      	ldr	r3, [pc, #412]	; (80038b8 <main+0x1a4>)
 800371c:	2200      	movs	r2, #0
 800371e:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 8003720:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <main+0x1a4>)
 8003722:	2208      	movs	r2, #8
 8003724:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8003726:	4b64      	ldr	r3, [pc, #400]	; (80038b8 <main+0x1a4>)
 8003728:	2201      	movs	r2, #1
 800372a:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 800372c:	4b62      	ldr	r3, [pc, #392]	; (80038b8 <main+0x1a4>)
 800372e:	2201      	movs	r2, #1
 8003730:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 8003732:	4b61      	ldr	r3, [pc, #388]	; (80038b8 <main+0x1a4>)
 8003734:	2200      	movs	r2, #0
 8003736:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8003738:	4b5f      	ldr	r3, [pc, #380]	; (80038b8 <main+0x1a4>)
 800373a:	2200      	movs	r2, #0
 800373c:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 800373e:	4b5e      	ldr	r3, [pc, #376]	; (80038b8 <main+0x1a4>)
 8003740:	2200      	movs	r2, #0
 8003742:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 8003744:	4b5c      	ldr	r3, [pc, #368]	; (80038b8 <main+0x1a4>)
 8003746:	2200      	movs	r2, #0
 8003748:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 800374a:	4b5b      	ldr	r3, [pc, #364]	; (80038b8 <main+0x1a4>)
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]

	DAC_target_speed=0.01; //  V/s
 8003750:	4b5a      	ldr	r3, [pc, #360]	; (80038bc <main+0x1a8>)
 8003752:	4a5b      	ldr	r2, [pc, #364]	; (80038c0 <main+0x1ac>)
 8003754:	601a      	str	r2, [r3, #0]
	DAC_code=DAC_CODE_MIDDLE;
 8003756:	4b5b      	ldr	r3, [pc, #364]	; (80038c4 <main+0x1b0>)
 8003758:	4a5b      	ldr	r2, [pc, #364]	; (80038c8 <main+0x1b4>)
 800375a:	601a      	str	r2, [r3, #0]
	DAC_code_direction=1;
 800375c:	4b5b      	ldr	r3, [pc, #364]	; (80038cc <main+0x1b8>)
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003762:	f001 f8c6 	bl	80048f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003766:	f000 f8c5 	bl	80038f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800376a:	f7ff fe35 	bl	80033d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800376e:	f000 fc69 	bl	8004044 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003772:	f000 fc9b 	bl	80040ac <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8003776:	f00a fa27 	bl	800dbc8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800377a:	f000 ff11 	bl	80045a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800377e:	f000 ff5d 	bl	800463c <MX_TIM4_Init>
  MX_I2C1_Init();
 8003782:	f7ff ff35 	bl	80035f0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003786:	f000 febf 	bl	8004508 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800378a:	f000 f8ff 	bl	800398c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  init_LCD();
 800378e:	f7fe fe99 	bl	80024c4 <init_LCD>


  display_screen(Hello_SCREEN);
 8003792:	2001      	movs	r0, #1
 8003794:	f7ff f8e2 	bl	800295c <display_screen>
  LcdUpdate();
 8003798:	f7fe fcbc 	bl	8002114 <LcdUpdate>
  LcdClear_massive();
 800379c:	f7fe fcee 	bl	800217c <LcdClear_massive>
  HAL_Delay(5000); //WarmUP
 80037a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80037a4:	f001 f914 	bl	80049d0 <HAL_Delay>

  display_screen(Warm_up_SCREEN);
 80037a8:	2002      	movs	r0, #2
 80037aa:	f7ff f8d7 	bl	800295c <display_screen>
  LcdUpdate();
 80037ae:	f7fe fcb1 	bl	8002114 <LcdUpdate>
  LcdClear_massive();
 80037b2:	f7fe fce3 	bl	800217c <LcdClear_massive>
  HAL_Delay(12000); //WarmUP
 80037b6:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 80037ba:	f001 f909 	bl	80049d0 <HAL_Delay>

  display_screen(Ready_SCREEN);
 80037be:	2003      	movs	r0, #3
 80037c0:	f7ff f8cc 	bl	800295c <display_screen>
  LcdUpdate();
 80037c4:	f7fe fca6 	bl	8002114 <LcdUpdate>
  LcdClear_massive();
 80037c8:	f7fe fcd8 	bl	800217c <LcdClear_massive>
  HAL_Delay(3000); //WarmUP
 80037cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80037d0:	f001 f8fe 	bl	80049d0 <HAL_Delay>


  load_data_from_EEPROM();
 80037d4:	f7ff fd1e 	bl	8003214 <load_data_from_EEPROM>
  TMP117_Initialization(hi2c1);
 80037d8:	4c3d      	ldr	r4, [pc, #244]	; (80038d0 <main+0x1bc>)
 80037da:	4668      	mov	r0, sp
 80037dc:	f104 0310 	add.w	r3, r4, #16
 80037e0:	2244      	movs	r2, #68	; 0x44
 80037e2:	4619      	mov	r1, r3
 80037e4:	f00a ff96 	bl	800e714 <memcpy>
 80037e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80037ec:	f001 f82a 	bl	8004844 <TMP117_Initialization>
  DDS_Init();
 80037f0:	f7fe faec 	bl	8001dcc <DDS_Init>
  DAC_SendInit();
 80037f4:	f7fe f8d2 	bl	800199c <DAC_SendInit>
  DAC_Write(DAC_code);
 80037f8:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <main+0x1b0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fe f873 	bl	80018e8 <DAC_Write>

  HAL_TIM_Base_Start_IT(&htim3);
 8003802:	4834      	ldr	r0, [pc, #208]	; (80038d4 <main+0x1c0>)
 8003804:	f005 fcb2 	bl	800916c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8003808:	4833      	ldr	r0, [pc, #204]	; (80038d8 <main+0x1c4>)
 800380a:	f005 fcaf 	bl	800916c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800380e:	213c      	movs	r1, #60	; 0x3c
 8003810:	4832      	ldr	r0, [pc, #200]	; (80038dc <main+0x1c8>)
 8003812:	f005 fd9b 	bl	800934c <HAL_TIM_Encoder_Start>


  output_state(Output_off_STATE);
 8003816:	2000      	movs	r0, #0
 8003818:	f7fe ff8e 	bl	8002738 <output_state>
  CPLD_control(CPLD_OFF_STATE);
 800381c:	2000      	movs	r0, #0
 800381e:	f7fd ffcf 	bl	80017c0 <CPLD_control>

  send_answer_to_CDC(CLEAR_TYPE_1);
 8003822:	2004      	movs	r0, #4
 8003824:	f7ff f95a 	bl	8002adc <send_answer_to_CDC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(USB_CDC_End_Line_Received)
 8003828:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <main+0x1cc>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d021      	beq.n	8003876 <main+0x162>
		{
			uint8_t i=0;
 8003832:	2300      	movs	r3, #0
 8003834:	71fb      	strb	r3, [r7, #7]
			USB_CDC_End_Line_Received=0;
 8003836:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <main+0x1cc>)
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
			while (1) {
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	4a29      	ldr	r2, [pc, #164]	; (80038e4 <main+0x1d0>)
 8003840:	4413      	add	r3, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ff56 	bl	80036f4 <USB_rx_command_buffer_pop_refd>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <main+0x142>
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	4a24      	ldr	r2, [pc, #144]	; (80038e4 <main+0x1d0>)
 8003852:	210a      	movs	r1, #10
 8003854:	54d1      	strb	r1, [r2, r3]
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	4a22      	ldr	r2, [pc, #136]	; (80038e4 <main+0x1d0>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	2b0a      	cmp	r3, #10
 800385e:	d008      	beq.n	8003872 <main+0x15e>
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	4a20      	ldr	r2, [pc, #128]	; (80038e4 <main+0x1d0>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	2b0d      	cmp	r3, #13
 8003868:	d003      	beq.n	8003872 <main+0x15e>
				i++;
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	3301      	adds	r3, #1
 800386e:	71fb      	strb	r3, [r7, #7]
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8003870:	e7e4      	b.n	800383c <main+0x128>
			}
			Parsing_USB_command();
 8003872:	f000 f947 	bl	8003b04 <Parsing_USB_command>
		}

		if(Need_update_DDS)
 8003876:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <main+0x1d4>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00d      	beq.n	800389a <main+0x186>
		{
			if(Ramp_dac_step_complete)
 800387e:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <main+0x1d8>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <main+0x182>
			{
				DDS_Update();
 8003886:	f7fe fb7d 	bl	8001f84 <DDS_Update>
				Need_update_DDS=0;
 800388a:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <main+0x1d4>)
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
				Ramp_dac_step_complete=0;
 8003890:	4b16      	ldr	r3, [pc, #88]	; (80038ec <main+0x1d8>)
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
			}
			DDS_Calculation();
 8003896:	f7fe f979 	bl	8001b8c <DDS_Calculation>

		}
		if(Need_update_Display)
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <main+0x1dc>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0c2      	beq.n	8003828 <main+0x114>
		{
			display_screen(dU_dt_SCREEN);
 80038a2:	2000      	movs	r0, #0
 80038a4:	f7ff f85a 	bl	800295c <display_screen>
			LcdUpdate();
 80038a8:	f7fe fc34 	bl	8002114 <LcdUpdate>
			LcdClear_massive();
 80038ac:	f7fe fc66 	bl	800217c <LcdClear_massive>
			Need_update_Display=0;
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <main+0x1dc>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
		if(USB_CDC_End_Line_Received)
 80038b6:	e7b7      	b.n	8003828 <main+0x114>
 80038b8:	20000c44 	.word	0x20000c44
 80038bc:	20000c58 	.word	0x20000c58
 80038c0:	3c23d70a 	.word	0x3c23d70a
 80038c4:	20000c6c 	.word	0x20000c6c
 80038c8:	0007ffff 	.word	0x0007ffff
 80038cc:	20000c70 	.word	0x20000c70
 80038d0:	20000bc4 	.word	0x20000bc4
 80038d4:	20000d68 	.word	0x20000d68
 80038d8:	20000d28 	.word	0x20000d28
 80038dc:	20000da8 	.word	0x20000da8
 80038e0:	20000ba0 	.word	0x20000ba0
 80038e4:	20000ba4 	.word	0x20000ba4
 80038e8:	20000c72 	.word	0x20000c72
 80038ec:	20000c73 	.word	0x20000c73
 80038f0:	20000c71 	.word	0x20000c71

080038f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b092      	sub	sp, #72	; 0x48
 80038f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	2234      	movs	r2, #52	; 0x34
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f00a ff14 	bl	800e730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003908:	463b      	mov	r3, r7
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <SystemClock_Config+0x94>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800391e:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <SystemClock_Config+0x94>)
 8003920:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003924:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003926:	2301      	movs	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800392a:	2301      	movs	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800392e:	2302      	movs	r3, #2
 8003930:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003938:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800393c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800393e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003942:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	4618      	mov	r0, r3
 800394a:	f003 ff4d 	bl	80077e8 <HAL_RCC_OscConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8003954:	f000 fb70 	bl	8004038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003958:	230f      	movs	r3, #15
 800395a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800395c:	2303      	movs	r3, #3
 800395e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003960:	2300      	movs	r3, #0
 8003962:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800396c:	463b      	mov	r3, r7
 800396e:	2101      	movs	r1, #1
 8003970:	4618      	mov	r0, r3
 8003972:	f004 fa69 	bl	8007e48 <HAL_RCC_ClockConfig>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800397c:	f000 fb5c 	bl	8004038 <Error_Handler>
  }
}
 8003980:	bf00      	nop
 8003982:	3748      	adds	r7, #72	; 0x48
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40007000 	.word	0x40007000

0800398c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003990:	2200      	movs	r2, #0
 8003992:	2100      	movs	r1, #0
 8003994:	2017      	movs	r0, #23
 8003996:	f001 f914 	bl	8004bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800399a:	2017      	movs	r0, #23
 800399c:	f001 f92d 	bl	8004bfa <HAL_NVIC_EnableIRQ>
}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_PeriodElapsedCallback>:
//==============================================================================================


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	if (htim == &htim3 )// INL correction, each 500ms
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a0b      	ldr	r2, [pc, #44]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d106      	bne.n	80039c2 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		if(cfg.LDACMODE==1)Need_update_DDS=1;
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80039b6:	789b      	ldrb	r3, [r3, #2]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d102      	bne.n	80039c2 <HAL_TIM_PeriodElapsedCallback+0x1e>
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim2 )//User interface workload, each 10ms
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d102      	bne.n	80039d0 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		Need_update_Display=1;
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
	}

}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000d68 	.word	0x20000d68
 80039e0:	20000c44 	.word	0x20000c44
 80039e4:	20000c72 	.word	0x20000c72
 80039e8:	20000d28 	.word	0x20000d28
 80039ec:	20000c71 	.word	0x20000c71

080039f0 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
	DAC_Write_FAST();
 80039fa:	f7fd ffb5 	bl	8001968 <DAC_Write_FAST>
	Ramp_dac_step_complete=1;
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_GPIO_EXTI_Callback+0xfc>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_9)
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0a:	d16b      	bne.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xf4>
	{
		if(DAC_code_direction)
 8003a0c:	4b38      	ldr	r3, [pc, #224]	; (8003af0 <HAL_GPIO_EXTI_Callback+0x100>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d035      	beq.n	8003a80 <HAL_GPIO_EXTI_Callback+0x90>
		{
			if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 8003a14:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <HAL_GPIO_EXTI_Callback+0x104>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8003a1c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003a20:	4a35      	ldr	r2, [pc, #212]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d322      	bcc.n	8003a6e <HAL_GPIO_EXTI_Callback+0x7e>
			{
				DAC_code+=DDS_target_multipiller;
 8003a28:	4b33      	ldr	r3, [pc, #204]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <HAL_GPIO_EXTI_Callback+0x104>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4413      	add	r3, r2
 8003a32:	4a31      	ldr	r2, [pc, #196]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a34:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8003a36:	4b31      	ldr	r3, [pc, #196]	; (8003afc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a3c:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8003a3e:	4b2e      	ldr	r3, [pc, #184]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a48:	f023 030f 	bic.w	r3, r3, #15
 8003a4c:	4a2b      	ldr	r2, [pc, #172]	; (8003afc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	4413      	add	r3, r2
 8003a52:	4a2a      	ldr	r2, [pc, #168]	; (8003afc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a54:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <HAL_GPIO_EXTI_Callback+0x110>)
 8003a60:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8003a62:	4b26      	ldr	r3, [pc, #152]	; (8003afc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	4b25      	ldr	r3, [pc, #148]	; (8003b00 <HAL_GPIO_EXTI_Callback+0x110>)
 8003a6a:	805a      	strh	r2, [r3, #2]
 8003a6c:	e03a      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xf4>

			} else  {
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f7fd fea6 	bl	80017c0 <CPLD_control>
				DAC_SendInit();
 8003a74:	f7fd ff92 	bl	800199c <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 8003a78:	2005      	movs	r0, #5
 8003a7a:	f7ff f82f 	bl	8002adc <send_answer_to_CDC>
				return;
 8003a7e:	e031      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xf4>
			}
		}
		else
		{
			if(DAC_code>=DDS_target_multipiller)
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_GPIO_EXTI_Callback+0x104>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d322      	bcc.n	8003ad2 <HAL_GPIO_EXTI_Callback+0xe2>
			{
				DAC_code-=DDS_target_multipiller;
 8003a8c:	4b1a      	ldr	r3, [pc, #104]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <HAL_GPIO_EXTI_Callback+0x104>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a98:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8003a9a:	4b18      	ldr	r3, [pc, #96]	; (8003afc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aa0:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8003aa2:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003aac:	f023 030f 	bic.w	r3, r3, #15
 8003ab0:	4a12      	ldr	r2, [pc, #72]	; (8003afc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	4a11      	ldr	r2, [pc, #68]	; (8003afc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003ab8:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <HAL_GPIO_EXTI_Callback+0x110>)
 8003ac4:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_GPIO_EXTI_Callback+0x110>)
 8003ace:	805a      	strh	r2, [r3, #2]
 8003ad0:	e008      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xf4>

			} else {
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f7fd fe74 	bl	80017c0 <CPLD_control>
				DAC_SendInit();
 8003ad8:	f7fd ff60 	bl	800199c <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 8003adc:	2005      	movs	r0, #5
 8003ade:	f7fe fffd 	bl	8002adc <send_answer_to_CDC>
				return;
 8003ae2:	bf00      	nop
			}
		}
	}
}
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000c73 	.word	0x20000c73
 8003af0:	20000c70 	.word	0x20000c70
 8003af4:	20000734 	.word	0x20000734
 8003af8:	20000c6c 	.word	0x20000c6c
 8003afc:	20000c3c 	.word	0x20000c3c
 8003b00:	20000c40 	.word	0x20000c40

08003b04 <Parsing_USB_command>:

void Parsing_USB_command(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b092      	sub	sp, #72	; 0x48
 8003b08:	af00      	add	r7, sp, #0
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];

	found = strtok((char *)command_buffer," ");
 8003b0a:	49c3      	ldr	r1, [pc, #780]	; (8003e18 <Parsing_USB_command+0x314>)
 8003b0c:	48c3      	ldr	r0, [pc, #780]	; (8003e1c <Parsing_USB_command+0x318>)
 8003b0e:	f00c f8b7 	bl	800fc80 <strtok>
 8003b12:	6438      	str	r0, [r7, #64]	; 0x40
	if(found!=NULL)
 8003b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00e      	beq.n	8003b38 <Parsing_USB_command+0x34>
	{
		strcpy(decoded_string_1,found);
 8003b1a:	f107 0320 	add.w	r3, r7, #32
 8003b1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b20:	4618      	mov	r0, r3
 8003b22:	f00b fa8d 	bl	800f040 <strcpy>
	{
		send_answer_to_CDC(ERROR_TYPE_1);
		return;
	}

	found = strtok(NULL,"\r");
 8003b26:	49be      	ldr	r1, [pc, #760]	; (8003e20 <Parsing_USB_command+0x31c>)
 8003b28:	2000      	movs	r0, #0
 8003b2a:	f00c f8a9 	bl	800fc80 <strtok>
 8003b2e:	6438      	str	r0, [r7, #64]	; 0x40
	if(found!=NULL)
 8003b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d023      	beq.n	8003b7e <Parsing_USB_command+0x7a>
 8003b36:	e003      	b.n	8003b40 <Parsing_USB_command+0x3c>
		send_answer_to_CDC(ERROR_TYPE_1);
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7fe ffcf 	bl	8002adc <send_answer_to_CDC>
		return;
 8003b3e:	e24f      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
	{
		strcpy(decoded_string_2,found);
 8003b40:	463b      	mov	r3, r7
 8003b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b44:	4618      	mov	r0, r3
 8003b46:	f00b fa7b 	bl	800f040 <strcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b4e:	e00d      	b.n	8003b6c <Parsing_USB_command+0x68>
 8003b50:	463a      	mov	r2, r7
 8003b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b54:	4413      	add	r3, r2
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d104      	bne.n	8003b66 <Parsing_USB_command+0x62>
 8003b5c:	463a      	mov	r2, r7
 8003b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b60:	4413      	add	r3, r2
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b68:	3301      	adds	r3, #1
 8003b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b6c:	463b      	mov	r3, r7
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fc fb10 	bl	8000194 <strlen>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d8e9      	bhi.n	8003b50 <Parsing_USB_command+0x4c>
 8003b7c:	e003      	b.n	8003b86 <Parsing_USB_command+0x82>
	}
	else
	{
		send_answer_to_CDC(ERROR_TYPE_1);
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7fe ffac 	bl	8002adc <send_answer_to_CDC>
		return;
 8003b84:	e22c      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8003b86:	f107 0320 	add.w	r3, r7, #32
 8003b8a:	49a6      	ldr	r1, [pc, #664]	; (8003e24 <Parsing_USB_command+0x320>)
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fc faf7 	bl	8000180 <strcmp>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11f      	bne.n	8003bd8 <Parsing_USB_command+0xd4>
	{
		if(!(strcmp(decoded_string_2,"START")))
 8003b98:	463b      	mov	r3, r7
 8003b9a:	49a3      	ldr	r1, [pc, #652]	; (8003e28 <Parsing_USB_command+0x324>)
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fc faef 	bl	8000180 <strcmp>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <Parsing_USB_command+0xb0>
		{
			cmd_SWEEP_START();
 8003ba8:	f7ff f86a 	bl	8002c80 <cmd_SWEEP_START>
			send_answer_to_CDC(OK_TYPE_2);
 8003bac:	2003      	movs	r0, #3
 8003bae:	f7fe ff95 	bl	8002adc <send_answer_to_CDC>
			return;
 8003bb2:	e215      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP")))
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	499d      	ldr	r1, [pc, #628]	; (8003e2c <Parsing_USB_command+0x328>)
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fc fae1 	bl	8000180 <strcmp>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d105      	bne.n	8003bd0 <Parsing_USB_command+0xcc>
			{
				cmd_SWEEP_STOP();
 8003bc4:	f7ff f86c 	bl	8002ca0 <cmd_SWEEP_STOP>
				send_answer_to_CDC(OK_TYPE_2);
 8003bc8:	2003      	movs	r0, #3
 8003bca:	f7fe ff87 	bl	8002adc <send_answer_to_CDC>
				return;
 8003bce:	e207      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f7fe ff83 	bl	8002adc <send_answer_to_CDC>
				return;
 8003bd6:	e203      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 8003bd8:	f107 0320 	add.w	r3, r7, #32
 8003bdc:	4994      	ldr	r1, [pc, #592]	; (8003e30 <Parsing_USB_command+0x32c>)
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fc face 	bl	8000180 <strcmp>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d136      	bne.n	8003c58 <Parsing_USB_command+0x154>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 8003bea:	463b      	mov	r3, r7
 8003bec:	4991      	ldr	r1, [pc, #580]	; (8003e34 <Parsing_USB_command+0x330>)
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fc fac6 	bl	8000180 <strcmp>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <Parsing_USB_command+0x104>
			cmd_DAC_SET(DAC_CODE_TOP);
 8003bfa:	488f      	ldr	r0, [pc, #572]	; (8003e38 <Parsing_USB_command+0x334>)
 8003bfc:	f7ff f85a 	bl	8002cb4 <cmd_DAC_SET>
			send_answer_to_CDC(OK_TYPE_2);
 8003c00:	2003      	movs	r0, #3
 8003c02:	f7fe ff6b 	bl	8002adc <send_answer_to_CDC>
			return;
 8003c06:	e1eb      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8003c08:	463b      	mov	r3, r7
 8003c0a:	498c      	ldr	r1, [pc, #560]	; (8003e3c <Parsing_USB_command+0x338>)
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fc fab7 	bl	8000180 <strcmp>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <Parsing_USB_command+0x122>
				cmd_DAC_SET(DAC_CODE_DOWN);
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f7ff f84b 	bl	8002cb4 <cmd_DAC_SET>
				send_answer_to_CDC(OK_TYPE_2);
 8003c1e:	2003      	movs	r0, #3
 8003c20:	f7fe ff5c 	bl	8002adc <send_answer_to_CDC>
				return;
 8003c24:	e1dc      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
			}
			else
			{
				if(cmd_SET_OUTPUT_VOLTAGE(atof(decoded_string_2)))
 8003c26:	463b      	mov	r3, r7
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f00a fd45 	bl	800e6b8 <atof>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f7fc ff69 	bl	8000b0c <__aeabi_d2f>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff f865 	bl	8002d0c <cmd_SET_OUTPUT_VOLTAGE>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <Parsing_USB_command+0x14c>
				{
					send_answer_to_CDC(OK_TYPE_2);
 8003c48:	2003      	movs	r0, #3
 8003c4a:	f7fe ff47 	bl	8002adc <send_answer_to_CDC>
					return;
 8003c4e:	e1c7      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
				}
				else
				{
					send_answer_to_CDC(ERROR_TYPE_2);
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7fe ff43 	bl	8002adc <send_answer_to_CDC>
					return;
 8003c56:	e1c3      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
	}


	// ==== OUTPUT command ====
	if(!(strcmp(decoded_string_1,"OUTPUT")))
 8003c58:	f107 0320 	add.w	r3, r7, #32
 8003c5c:	4978      	ldr	r1, [pc, #480]	; (8003e40 <Parsing_USB_command+0x33c>)
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc fa8e 	bl	8000180 <strcmp>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d13f      	bne.n	8003cea <Parsing_USB_command+0x1e6>
	{
		if(!(strcmp(decoded_string_2,"OFF"))){
 8003c6a:	463b      	mov	r3, r7
 8003c6c:	4975      	ldr	r1, [pc, #468]	; (8003e44 <Parsing_USB_command+0x340>)
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fa86 	bl	8000180 <strcmp>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <Parsing_USB_command+0x184>
			output_state(Output_off_STATE);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7fe fd5c 	bl	8002738 <output_state>
			send_answer_to_CDC(OK_TYPE_2);
 8003c80:	2003      	movs	r0, #3
 8003c82:	f7fe ff2b 	bl	8002adc <send_answer_to_CDC>
			return;
 8003c86:	e1ab      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"X1"))){
 8003c88:	463b      	mov	r3, r7
 8003c8a:	496f      	ldr	r1, [pc, #444]	; (8003e48 <Parsing_USB_command+0x344>)
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fc fa77 	bl	8000180 <strcmp>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d106      	bne.n	8003ca6 <Parsing_USB_command+0x1a2>
				output_state(Output_x1_STATE);
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f7fe fd4d 	bl	8002738 <output_state>
				send_answer_to_CDC(OK_TYPE_2);
 8003c9e:	2003      	movs	r0, #3
 8003ca0:	f7fe ff1c 	bl	8002adc <send_answer_to_CDC>
				return;
 8003ca4:	e19c      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
			}
			else
			{
				if(!(strcmp(decoded_string_2,"X2"))){
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	4968      	ldr	r1, [pc, #416]	; (8003e4c <Parsing_USB_command+0x348>)
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fa68 	bl	8000180 <strcmp>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <Parsing_USB_command+0x1c0>
					output_state(Output_x2_STATE);
 8003cb6:	2002      	movs	r0, #2
 8003cb8:	f7fe fd3e 	bl	8002738 <output_state>
					send_answer_to_CDC(OK_TYPE_2);
 8003cbc:	2003      	movs	r0, #3
 8003cbe:	f7fe ff0d 	bl	8002adc <send_answer_to_CDC>
					return;
 8003cc2:	e18d      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
				}
				else
				{
					if(!(strcmp(decoded_string_2,"X4"))){
 8003cc4:	463b      	mov	r3, r7
 8003cc6:	4962      	ldr	r1, [pc, #392]	; (8003e50 <Parsing_USB_command+0x34c>)
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc fa59 	bl	8000180 <strcmp>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <Parsing_USB_command+0x1de>
						output_state(Output_x4_STATE);
 8003cd4:	2003      	movs	r0, #3
 8003cd6:	f7fe fd2f 	bl	8002738 <output_state>
						send_answer_to_CDC(OK_TYPE_2);
 8003cda:	2003      	movs	r0, #3
 8003cdc:	f7fe fefe 	bl	8002adc <send_answer_to_CDC>
						return;
 8003ce0:	e17e      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
					}
					else
					{
						send_answer_to_CDC(ERROR_TYPE_2);
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f7fe fefa 	bl	8002adc <send_answer_to_CDC>
						return;
 8003ce8:	e17a      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
			}
		}
	}

	// ==== DAC_CAL_TEMP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TEMP")))
 8003cea:	f107 0320 	add.w	r3, r7, #32
 8003cee:	4959      	ldr	r1, [pc, #356]	; (8003e54 <Parsing_USB_command+0x350>)
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fc fa45 	bl	8000180 <strcmp>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d116      	bne.n	8003d2a <Parsing_USB_command+0x226>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	494a      	ldr	r1, [pc, #296]	; (8003e28 <Parsing_USB_command+0x324>)
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fc fa3d 	bl	8000180 <strcmp>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <Parsing_USB_command+0x21e>
			send_answer_to_CDC(RUN_CAL_TYPE_TEMP);
 8003d0c:	200f      	movs	r0, #15
 8003d0e:	f7fe fee5 	bl	8002adc <send_answer_to_CDC>
			cmd_CAL(DAC_CAL_TEMP,NONE);
 8003d12:	4951      	ldr	r1, [pc, #324]	; (8003e58 <Parsing_USB_command+0x354>)
 8003d14:	2006      	movs	r0, #6
 8003d16:	f7ff f94f 	bl	8002fb8 <cmd_CAL>
			send_answer_to_CDC(OK_TYPE_1);
 8003d1a:	2002      	movs	r0, #2
 8003d1c:	f7fe fede 	bl	8002adc <send_answer_to_CDC>
			return;
 8003d20:	e15e      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 8003d22:	2000      	movs	r0, #0
 8003d24:	f7fe feda 	bl	8002adc <send_answer_to_CDC>
			return;
 8003d28:	e15a      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
	}

	// ==== DAC_CAL_POLY_A command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_A")))
 8003d2a:	f107 0320 	add.w	r3, r7, #32
 8003d2e:	494b      	ldr	r1, [pc, #300]	; (8003e5c <Parsing_USB_command+0x358>)
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fa25 	bl	8000180 <strcmp>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d112      	bne.n	8003d62 <Parsing_USB_command+0x25e>
	{
		cmd_CAL(DAC_CAL_POLY_A,atof(decoded_string_2));
 8003d3c:	463b      	mov	r3, r7
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f00a fcba 	bl	800e6b8 <atof>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fc fede 	bl	8000b0c <__aeabi_d2f>
 8003d50:	4603      	mov	r3, r0
 8003d52:	4619      	mov	r1, r3
 8003d54:	2007      	movs	r0, #7
 8003d56:	f7ff f92f 	bl	8002fb8 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003d5a:	2003      	movs	r0, #3
 8003d5c:	f7fe febe 	bl	8002adc <send_answer_to_CDC>
		return;
 8003d60:	e13e      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
	}

	// ==== DAC_CAL_POLY_B command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_B")))
 8003d62:	f107 0320 	add.w	r3, r7, #32
 8003d66:	493e      	ldr	r1, [pc, #248]	; (8003e60 <Parsing_USB_command+0x35c>)
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fc fa09 	bl	8000180 <strcmp>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d112      	bne.n	8003d9a <Parsing_USB_command+0x296>
	{
		cmd_CAL(DAC_CAL_POLY_B,atof(decoded_string_2));
 8003d74:	463b      	mov	r3, r7
 8003d76:	4618      	mov	r0, r3
 8003d78:	f00a fc9e 	bl	800e6b8 <atof>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	f7fc fec2 	bl	8000b0c <__aeabi_d2f>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	2008      	movs	r0, #8
 8003d8e:	f7ff f913 	bl	8002fb8 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003d92:	2003      	movs	r0, #3
 8003d94:	f7fe fea2 	bl	8002adc <send_answer_to_CDC>
		return;
 8003d98:	e122      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
	}

	// ==== DAC_CAL_POLY_C command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_C")))
 8003d9a:	f107 0320 	add.w	r3, r7, #32
 8003d9e:	4931      	ldr	r1, [pc, #196]	; (8003e64 <Parsing_USB_command+0x360>)
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc f9ed 	bl	8000180 <strcmp>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d112      	bne.n	8003dd2 <Parsing_USB_command+0x2ce>
	{
		cmd_CAL(DAC_CAL_POLY_C,atof(decoded_string_2));
 8003dac:	463b      	mov	r3, r7
 8003dae:	4618      	mov	r0, r3
 8003db0:	f00a fc82 	bl	800e6b8 <atof>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f7fc fea6 	bl	8000b0c <__aeabi_d2f>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	2009      	movs	r0, #9
 8003dc6:	f7ff f8f7 	bl	8002fb8 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003dca:	2003      	movs	r0, #3
 8003dcc:	f7fe fe86 	bl	8002adc <send_answer_to_CDC>
		return;
 8003dd0:	e106      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
	}

	// ==== GAIN_X2_CAL command ====
	if(!(strcmp(decoded_string_1,"GAIN_X2_CAL")))
 8003dd2:	f107 0320 	add.w	r3, r7, #32
 8003dd6:	4924      	ldr	r1, [pc, #144]	; (8003e68 <Parsing_USB_command+0x364>)
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fc f9d1 	bl	8000180 <strcmp>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d143      	bne.n	8003e6c <Parsing_USB_command+0x368>
	{
		if(cmd_CAL(GAIN_X2_CAL,atof(decoded_string_2)))
 8003de4:	463b      	mov	r3, r7
 8003de6:	4618      	mov	r0, r3
 8003de8:	f00a fc66 	bl	800e6b8 <atof>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	f7fc fe8a 	bl	8000b0c <__aeabi_d2f>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	200c      	movs	r0, #12
 8003dfe:	f7ff f8db 	bl	8002fb8 <cmd_CAL>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <Parsing_USB_command+0x30c>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003e08:	2003      	movs	r0, #3
 8003e0a:	f7fe fe67 	bl	8002adc <send_answer_to_CDC>
			return;
 8003e0e:	e0e7      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003e10:	2001      	movs	r0, #1
 8003e12:	f7fe fe63 	bl	8002adc <send_answer_to_CDC>
			return;
 8003e16:	e0e3      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
 8003e18:	08012c00 	.word	0x08012c00
 8003e1c:	20000ba4 	.word	0x20000ba4
 8003e20:	08012c04 	.word	0x08012c04
 8003e24:	08012c08 	.word	0x08012c08
 8003e28:	08012c10 	.word	0x08012c10
 8003e2c:	08012c18 	.word	0x08012c18
 8003e30:	08012c20 	.word	0x08012c20
 8003e34:	08012c28 	.word	0x08012c28
 8003e38:	000fffff 	.word	0x000fffff
 8003e3c:	08012c2c 	.word	0x08012c2c
 8003e40:	08012c34 	.word	0x08012c34
 8003e44:	08012c3c 	.word	0x08012c3c
 8003e48:	08012c40 	.word	0x08012c40
 8003e4c:	08012c44 	.word	0x08012c44
 8003e50:	08012c48 	.word	0x08012c48
 8003e54:	08012c4c 	.word	0x08012c4c
 8003e58:	41600000 	.word	0x41600000
 8003e5c:	08012c5c 	.word	0x08012c5c
 8003e60:	08012c6c 	.word	0x08012c6c
 8003e64:	08012c7c 	.word	0x08012c7c
 8003e68:	08012c8c 	.word	0x08012c8c
		}
	}

	// ==== GAIN_X4_CAL command ====
	if(!(strcmp(decoded_string_1,"GAIN_X4_CAL")))
 8003e6c:	f107 0320 	add.w	r3, r7, #32
 8003e70:	495d      	ldr	r1, [pc, #372]	; (8003fe8 <Parsing_USB_command+0x4e4>)
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fc f984 	bl	8000180 <strcmp>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d119      	bne.n	8003eb2 <Parsing_USB_command+0x3ae>
	{
		if(cmd_CAL(GAIN_X4_CAL,atof(decoded_string_2)))
 8003e7e:	463b      	mov	r3, r7
 8003e80:	4618      	mov	r0, r3
 8003e82:	f00a fc19 	bl	800e6b8 <atof>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f7fc fe3d 	bl	8000b0c <__aeabi_d2f>
 8003e92:	4603      	mov	r3, r0
 8003e94:	4619      	mov	r1, r3
 8003e96:	200d      	movs	r0, #13
 8003e98:	f7ff f88e 	bl	8002fb8 <cmd_CAL>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <Parsing_USB_command+0x3a6>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003ea2:	2003      	movs	r0, #3
 8003ea4:	f7fe fe1a 	bl	8002adc <send_answer_to_CDC>
			return;
 8003ea8:	e09a      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003eaa:	2001      	movs	r0, #1
 8003eac:	f7fe fe16 	bl	8002adc <send_answer_to_CDC>
			return;
 8003eb0:	e096      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
	}


	// ==== DAC_CAL_TOP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TOP")))
 8003eb2:	f107 0320 	add.w	r3, r7, #32
 8003eb6:	494d      	ldr	r1, [pc, #308]	; (8003fec <Parsing_USB_command+0x4e8>)
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fc f961 	bl	8000180 <strcmp>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d119      	bne.n	8003ef8 <Parsing_USB_command+0x3f4>
	{
		if(cmd_CAL(DAC_CAL_TOP,atof(decoded_string_2)))
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f00a fbf6 	bl	800e6b8 <atof>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f7fc fe1a 	bl	8000b0c <__aeabi_d2f>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4619      	mov	r1, r3
 8003edc:	200a      	movs	r0, #10
 8003ede:	f7ff f86b 	bl	8002fb8 <cmd_CAL>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <Parsing_USB_command+0x3ec>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003ee8:	2003      	movs	r0, #3
 8003eea:	f7fe fdf7 	bl	8002adc <send_answer_to_CDC>
			return;
 8003eee:	e077      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	f7fe fdf3 	bl	8002adc <send_answer_to_CDC>
			return;
 8003ef6:	e073      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
	}


	// ==== DAC_CAL_DOWN command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_DOWN")))
 8003ef8:	f107 0320 	add.w	r3, r7, #32
 8003efc:	493c      	ldr	r1, [pc, #240]	; (8003ff0 <Parsing_USB_command+0x4ec>)
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fc f93e 	bl	8000180 <strcmp>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d119      	bne.n	8003f3e <Parsing_USB_command+0x43a>
	{
		if(cmd_CAL(DAC_CAL_DOWN,atof(decoded_string_2)))
 8003f0a:	463b      	mov	r3, r7
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f00a fbd3 	bl	800e6b8 <atof>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f7fc fdf7 	bl	8000b0c <__aeabi_d2f>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4619      	mov	r1, r3
 8003f22:	200b      	movs	r0, #11
 8003f24:	f7ff f848 	bl	8002fb8 <cmd_CAL>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <Parsing_USB_command+0x432>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003f2e:	2003      	movs	r0, #3
 8003f30:	f7fe fdd4 	bl	8002adc <send_answer_to_CDC>
			return;
 8003f34:	e054      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003f36:	2001      	movs	r0, #1
 8003f38:	f7fe fdd0 	bl	8002adc <send_answer_to_CDC>
			return;
 8003f3c:	e050      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 8003f3e:	f107 0320 	add.w	r3, r7, #32
 8003f42:	492c      	ldr	r1, [pc, #176]	; (8003ff4 <Parsing_USB_command+0x4f0>)
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fc f91b 	bl	8000180 <strcmp>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d118      	bne.n	8003f82 <Parsing_USB_command+0x47e>
	{
		if(cmd_SWEEP_RATE(atof(decoded_string_2)))
 8003f50:	463b      	mov	r3, r7
 8003f52:	4618      	mov	r0, r3
 8003f54:	f00a fbb0 	bl	800e6b8 <atof>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f7fc fdd4 	bl	8000b0c <__aeabi_d2f>
 8003f64:	4603      	mov	r3, r0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe ffe6 	bl	8002f38 <cmd_SWEEP_RATE>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <Parsing_USB_command+0x476>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003f72:	2003      	movs	r0, #3
 8003f74:	f7fe fdb2 	bl	8002adc <send_answer_to_CDC>
			return;
 8003f78:	e032      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f7fe fdae 	bl	8002adc <send_answer_to_CDC>
			return;
 8003f80:	e02e      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
	}

	// ==== SWEEP_DIRECTION command ====
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 8003f82:	f107 0320 	add.w	r3, r7, #32
 8003f86:	491c      	ldr	r1, [pc, #112]	; (8003ff8 <Parsing_USB_command+0x4f4>)
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fc f8f9 	bl	8000180 <strcmp>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d121      	bne.n	8003fd8 <Parsing_USB_command+0x4d4>
	{
		if(!(strcmp(decoded_string_2,"UP"))){
 8003f94:	463b      	mov	r3, r7
 8003f96:	4919      	ldr	r1, [pc, #100]	; (8003ffc <Parsing_USB_command+0x4f8>)
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fc f8f1 	bl	8000180 <strcmp>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <Parsing_USB_command+0x4ae>
			DAC_code_direction=1;
 8003fa4:	4b16      	ldr	r3, [pc, #88]	; (8004000 <Parsing_USB_command+0x4fc>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
			send_answer_to_CDC(OK_TYPE_2);
 8003faa:	2003      	movs	r0, #3
 8003fac:	f7fe fd96 	bl	8002adc <send_answer_to_CDC>
			return;
 8003fb0:	e016      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8003fb2:	463b      	mov	r3, r7
 8003fb4:	4913      	ldr	r1, [pc, #76]	; (8004004 <Parsing_USB_command+0x500>)
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc f8e2 	bl	8000180 <strcmp>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <Parsing_USB_command+0x4cc>
				DAC_code_direction=0;
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <Parsing_USB_command+0x4fc>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
				send_answer_to_CDC(OK_TYPE_2);
 8003fc8:	2003      	movs	r0, #3
 8003fca:	f7fe fd87 	bl	8002adc <send_answer_to_CDC>
				return;
 8003fce:	e007      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f7fe fd83 	bl	8002adc <send_answer_to_CDC>
				return;
 8003fd6:	e003      	b.n	8003fe0 <Parsing_USB_command+0x4dc>
			}

		}
	}

	send_answer_to_CDC(ERROR_TYPE_1);
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f7fe fd7f 	bl	8002adc <send_answer_to_CDC>
	return;
 8003fde:	bf00      	nop
}
 8003fe0:	3748      	adds	r7, #72	; 0x48
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	08012c98 	.word	0x08012c98
 8003fec:	08012ca4 	.word	0x08012ca4
 8003ff0:	08012cb0 	.word	0x08012cb0
 8003ff4:	08012cc0 	.word	0x08012cc0
 8003ff8:	08012ccc 	.word	0x08012ccc
 8003ffc:	08012cdc 	.word	0x08012cdc
 8004000:	20000c70 	.word	0x20000c70
 8004004:	08012c2c 	.word	0x08012c2c

08004008 <Write_to_circ_buffer>:

void Write_to_circ_buffer(uint8_t Buf)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 8004012:	1dfb      	adds	r3, r7, #7
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fb5d 	bl	80036d4 <USB_rx_command_buffer_push_refd>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <Write_to_circ_buffer+0x24>
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <Write_to_circ_buffer+0x2c>)
 8004022:	2200      	movs	r2, #0
 8004024:	809a      	strh	r2, [r3, #4]
 8004026:	4b03      	ldr	r3, [pc, #12]	; (8004034 <Write_to_circ_buffer+0x2c>)
 8004028:	2200      	movs	r2, #0
 800402a:	80da      	strh	r2, [r3, #6]
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20000728 	.word	0x20000728

08004038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800403c:	b672      	cpsid	i
}
 800403e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004040:	e7fe      	b.n	8004040 <Error_Handler+0x8>
	...

08004044 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004048:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <MX_SPI1_Init+0x60>)
 800404a:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <MX_SPI1_Init+0x64>)
 800404c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <MX_SPI1_Init+0x60>)
 8004050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004054:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004056:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <MX_SPI1_Init+0x60>)
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <MX_SPI1_Init+0x60>)
 800405e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004062:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <MX_SPI1_Init+0x60>)
 8004066:	2200      	movs	r2, #0
 8004068:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <MX_SPI1_Init+0x60>)
 800406c:	2201      	movs	r2, #1
 800406e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <MX_SPI1_Init+0x60>)
 8004072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004076:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <MX_SPI1_Init+0x60>)
 800407a:	2218      	movs	r2, #24
 800407c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <MX_SPI1_Init+0x60>)
 8004080:	2200      	movs	r2, #0
 8004082:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <MX_SPI1_Init+0x60>)
 8004086:	2200      	movs	r2, #0
 8004088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <MX_SPI1_Init+0x60>)
 800408c:	220a      	movs	r2, #10
 800408e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004090:	4804      	ldr	r0, [pc, #16]	; (80040a4 <MX_SPI1_Init+0x60>)
 8004092:	f004 f98b 	bl	80083ac <HAL_SPI_Init>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 800409c:	f7ff ffcc 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80040a0:	bf00      	nop
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000c74 	.word	0x20000c74
 80040a8:	40013000 	.word	0x40013000

080040ac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80040b0:	4b16      	ldr	r3, [pc, #88]	; (800410c <MX_SPI2_Init+0x60>)
 80040b2:	4a17      	ldr	r2, [pc, #92]	; (8004110 <MX_SPI2_Init+0x64>)
 80040b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <MX_SPI2_Init+0x60>)
 80040b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <MX_SPI2_Init+0x60>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80040c4:	4b11      	ldr	r3, [pc, #68]	; (800410c <MX_SPI2_Init+0x60>)
 80040c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <MX_SPI2_Init+0x60>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80040d2:	4b0e      	ldr	r3, [pc, #56]	; (800410c <MX_SPI2_Init+0x60>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <MX_SPI2_Init+0x60>)
 80040da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <MX_SPI2_Init+0x60>)
 80040e2:	2218      	movs	r2, #24
 80040e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <MX_SPI2_Init+0x60>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ec:	4b07      	ldr	r3, [pc, #28]	; (800410c <MX_SPI2_Init+0x60>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <MX_SPI2_Init+0x60>)
 80040f4:	220a      	movs	r2, #10
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040f8:	4804      	ldr	r0, [pc, #16]	; (800410c <MX_SPI2_Init+0x60>)
 80040fa:	f004 f957 	bl	80083ac <HAL_SPI_Init>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8004104:	f7ff ff98 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004108:	bf00      	nop
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20000ccc 	.word	0x20000ccc
 8004110:	40003800 	.word	0x40003800

08004114 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08c      	sub	sp, #48	; 0x30
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411c:	f107 031c 	add.w	r3, r7, #28
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a32      	ldr	r2, [pc, #200]	; (80041fc <HAL_SPI_MspInit+0xe8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d130      	bne.n	8004198 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004136:	4b32      	ldr	r3, [pc, #200]	; (8004200 <HAL_SPI_MspInit+0xec>)
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	4a31      	ldr	r2, [pc, #196]	; (8004200 <HAL_SPI_MspInit+0xec>)
 800413c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004140:	6213      	str	r3, [r2, #32]
 8004142:	4b2f      	ldr	r3, [pc, #188]	; (8004200 <HAL_SPI_MspInit+0xec>)
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800414e:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <HAL_SPI_MspInit+0xec>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	4a2b      	ldr	r2, [pc, #172]	; (8004200 <HAL_SPI_MspInit+0xec>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	61d3      	str	r3, [r2, #28]
 800415a:	4b29      	ldr	r3, [pc, #164]	; (8004200 <HAL_SPI_MspInit+0xec>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004166:	23e0      	movs	r3, #224	; 0xe0
 8004168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416a:	2302      	movs	r3, #2
 800416c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004172:	2303      	movs	r3, #3
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004176:	2305      	movs	r3, #5
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800417a:	f107 031c 	add.w	r3, r7, #28
 800417e:	4619      	mov	r1, r3
 8004180:	4820      	ldr	r0, [pc, #128]	; (8004204 <HAL_SPI_MspInit+0xf0>)
 8004182:	f001 f8f3 	bl	800536c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8004186:	2200      	movs	r2, #0
 8004188:	2101      	movs	r1, #1
 800418a:	2023      	movs	r0, #35	; 0x23
 800418c:	f000 fd19 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004190:	2023      	movs	r0, #35	; 0x23
 8004192:	f000 fd32 	bl	8004bfa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004196:	e02d      	b.n	80041f4 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1a      	ldr	r2, [pc, #104]	; (8004208 <HAL_SPI_MspInit+0xf4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d128      	bne.n	80041f4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <HAL_SPI_MspInit+0xec>)
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	4a16      	ldr	r2, [pc, #88]	; (8004200 <HAL_SPI_MspInit+0xec>)
 80041a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ac:	6253      	str	r3, [r2, #36]	; 0x24
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <HAL_SPI_MspInit+0xec>)
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <HAL_SPI_MspInit+0xec>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	4a10      	ldr	r2, [pc, #64]	; (8004200 <HAL_SPI_MspInit+0xec>)
 80041c0:	f043 0302 	orr.w	r3, r3, #2
 80041c4:	61d3      	str	r3, [r2, #28]
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <HAL_SPI_MspInit+0xec>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80041d2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80041d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d8:	2302      	movs	r3, #2
 80041da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e0:	2303      	movs	r3, #3
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041e4:	2305      	movs	r3, #5
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e8:	f107 031c 	add.w	r3, r7, #28
 80041ec:	4619      	mov	r1, r3
 80041ee:	4807      	ldr	r0, [pc, #28]	; (800420c <HAL_SPI_MspInit+0xf8>)
 80041f0:	f001 f8bc 	bl	800536c <HAL_GPIO_Init>
}
 80041f4:	bf00      	nop
 80041f6:	3730      	adds	r7, #48	; 0x30
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40013000 	.word	0x40013000
 8004200:	40023800 	.word	0x40023800
 8004204:	40020000 	.word	0x40020000
 8004208:	40003800 	.word	0x40003800
 800420c:	40020400 	.word	0x40020400

08004210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004216:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <HAL_MspInit+0xa0>)
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <HAL_MspInit+0xa0>)
 800421c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004220:	6253      	str	r3, [r2, #36]	; 0x24
 8004222:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <HAL_MspInit+0xa0>)
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_MspInit+0xa0>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a1f      	ldr	r2, [pc, #124]	; (80042b0 <HAL_MspInit+0xa0>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <HAL_MspInit+0xa0>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	4b1a      	ldr	r3, [pc, #104]	; (80042b0 <HAL_MspInit+0xa0>)
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <HAL_MspInit+0xa0>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	6253      	str	r3, [r2, #36]	; 0x24
 8004252:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <HAL_MspInit+0xa0>)
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800425e:	2200      	movs	r2, #0
 8004260:	2101      	movs	r1, #1
 8004262:	f06f 000b 	mvn.w	r0, #11
 8004266:	f000 fcac 	bl	8004bc2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	2101      	movs	r1, #1
 800426e:	f06f 000a 	mvn.w	r0, #10
 8004272:	f000 fca6 	bl	8004bc2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8004276:	2200      	movs	r2, #0
 8004278:	2101      	movs	r1, #1
 800427a:	f06f 0009 	mvn.w	r0, #9
 800427e:	f000 fca0 	bl	8004bc2 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 8004282:	2200      	movs	r2, #0
 8004284:	2101      	movs	r1, #1
 8004286:	f06f 0004 	mvn.w	r0, #4
 800428a:	f000 fc9a 	bl	8004bc2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	2101      	movs	r1, #1
 8004292:	f06f 0003 	mvn.w	r0, #3
 8004296:	f000 fc94 	bl	8004bc2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 800429a:	2200      	movs	r2, #0
 800429c:	2101      	movs	r1, #1
 800429e:	f06f 0001 	mvn.w	r0, #1
 80042a2:	f000 fc8e 	bl	8004bc2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800

080042b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042b8:	e7fe      	b.n	80042b8 <NMI_Handler+0x4>

080042ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ba:	b480      	push	{r7}
 80042bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042be:	e7fe      	b.n	80042be <HardFault_Handler+0x4>

080042c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042c4:	e7fe      	b.n	80042c4 <MemManage_Handler+0x4>

080042c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042c6:	b480      	push	{r7}
 80042c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042ca:	e7fe      	b.n	80042ca <BusFault_Handler+0x4>

080042cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042d0:	e7fe      	b.n	80042d0 <UsageFault_Handler+0x4>

080042d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042d2:	b480      	push	{r7}
 80042d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80042d6:	bf00      	nop
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042de:	b480      	push	{r7}
 80042e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ea:	b480      	push	{r7}
 80042ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042fa:	f000 fb4d 	bl	8004998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <USB_LP_IRQHandler+0x10>)
 800430a:	f001 ff45 	bl	8006198 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20001428 	.word	0x20001428

08004318 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encode_Push_Pin);
 800431c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004320:	f001 f9d4 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004324:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004328:	f001 f9d0 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800432c:	bf00      	nop
 800432e:	bd80      	pop	{r7, pc}

08004330 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <TIM2_IRQHandler+0x10>)
 8004336:	f005 f873 	bl	8009420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000d28 	.word	0x20000d28

08004344 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004348:	4802      	ldr	r0, [pc, #8]	; (8004354 <TIM3_IRQHandler+0x10>)
 800434a:	f005 f869 	bl	8009420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000d68 	.word	0x20000d68

08004358 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800435c:	4802      	ldr	r0, [pc, #8]	; (8004368 <SPI1_IRQHandler+0x10>)
 800435e:	f004 fc91 	bl	8008c84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000c74 	.word	0x20000c74

0800436c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Start_button_Pin);
 8004370:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004374:	f001 f9aa 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}

0800437c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
	return 1;
 8004380:	2301      	movs	r3, #1
}
 8004382:	4618      	mov	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <_kill>:

int _kill(int pid, int sig)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004394:	f00a f994 	bl	800e6c0 <__errno>
 8004398:	4603      	mov	r3, r0
 800439a:	2216      	movs	r2, #22
 800439c:	601a      	str	r2, [r3, #0]
	return -1;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <_exit>:

void _exit (int status)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80043b2:	f04f 31ff 	mov.w	r1, #4294967295
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ffe7 	bl	800438a <_kill>
	while (1) {}		/* Make sure we hang here */
 80043bc:	e7fe      	b.n	80043bc <_exit+0x12>

080043be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e00a      	b.n	80043e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043d0:	f3af 8000 	nop.w
 80043d4:	4601      	mov	r1, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	60ba      	str	r2, [r7, #8]
 80043dc:	b2ca      	uxtb	r2, r1
 80043de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3301      	adds	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	dbf0      	blt.n	80043d0 <_read+0x12>
	}

return len;
 80043ee:	687b      	ldr	r3, [r7, #4]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	e009      	b.n	800441e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	60ba      	str	r2, [r7, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	3301      	adds	r3, #1
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	429a      	cmp	r2, r3
 8004424:	dbf1      	blt.n	800440a <_write+0x12>
	}
	return len;
 8004426:	687b      	ldr	r3, [r7, #4]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <_close>:

int _close(int file)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
	return -1;
 8004438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004456:	605a      	str	r2, [r3, #4]
	return 0;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <_isatty>:

int _isatty(int file)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	return 1;
 800446c:	2301      	movs	r3, #1
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
	return 0;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004498:	4a14      	ldr	r2, [pc, #80]	; (80044ec <_sbrk+0x5c>)
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <_sbrk+0x60>)
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044a4:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <_sbrk+0x64>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044ac:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <_sbrk+0x64>)
 80044ae:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <_sbrk+0x68>)
 80044b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <_sbrk+0x64>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4413      	add	r3, r2
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d207      	bcs.n	80044d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044c0:	f00a f8fe 	bl	800e6c0 <__errno>
 80044c4:	4603      	mov	r3, r0
 80044c6:	220c      	movs	r2, #12
 80044c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044ca:	f04f 33ff 	mov.w	r3, #4294967295
 80044ce:	e009      	b.n	80044e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044d0:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <_sbrk+0x64>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <_sbrk+0x64>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	4a05      	ldr	r2, [pc, #20]	; (80044f4 <_sbrk+0x64>)
 80044e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044e2:	68fb      	ldr	r3, [r7, #12]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20004000 	.word	0x20004000
 80044f0:	00000400 	.word	0x00000400
 80044f4:	20000d24 	.word	0x20000d24
 80044f8:	20001948 	.word	0x20001948

080044fc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800450e:	f107 0308 	add.w	r3, r7, #8
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	605a      	str	r2, [r3, #4]
 8004518:	609a      	str	r2, [r3, #8]
 800451a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800451c:	463b      	mov	r3, r7
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004524:	4b1d      	ldr	r3, [pc, #116]	; (800459c <MX_TIM2_Init+0x94>)
 8004526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800452a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 -1;
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <MX_TIM2_Init+0x94>)
 800452e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8004532:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004534:	4b19      	ldr	r3, [pc, #100]	; (800459c <MX_TIM2_Init+0x94>)
 8004536:	2200      	movs	r2, #0
 8004538:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 800453a:	4b18      	ldr	r3, [pc, #96]	; (800459c <MX_TIM2_Init+0x94>)
 800453c:	2231      	movs	r2, #49	; 0x31
 800453e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004540:	4b16      	ldr	r3, [pc, #88]	; (800459c <MX_TIM2_Init+0x94>)
 8004542:	2200      	movs	r2, #0
 8004544:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <MX_TIM2_Init+0x94>)
 8004548:	2200      	movs	r2, #0
 800454a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800454c:	4813      	ldr	r0, [pc, #76]	; (800459c <MX_TIM2_Init+0x94>)
 800454e:	f004 fdcd 	bl	80090ec <HAL_TIM_Base_Init>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004558:	f7ff fd6e 	bl	8004038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800455c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004562:	f107 0308 	add.w	r3, r7, #8
 8004566:	4619      	mov	r1, r3
 8004568:	480c      	ldr	r0, [pc, #48]	; (800459c <MX_TIM2_Init+0x94>)
 800456a:	f005 f835 	bl	80095d8 <HAL_TIM_ConfigClockSource>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004574:	f7ff fd60 	bl	8004038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004578:	2300      	movs	r3, #0
 800457a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800457c:	2300      	movs	r3, #0
 800457e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004580:	463b      	mov	r3, r7
 8004582:	4619      	mov	r1, r3
 8004584:	4805      	ldr	r0, [pc, #20]	; (800459c <MX_TIM2_Init+0x94>)
 8004586:	f005 fa2b 	bl	80099e0 <HAL_TIMEx_MasterConfigSynchronization>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004590:	f7ff fd52 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004594:	bf00      	nop
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000d28 	.word	0x20000d28

080045a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045a6:	f107 0308 	add.w	r3, r7, #8
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
 80045b0:	609a      	str	r2, [r3, #8]
 80045b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045b4:	463b      	mov	r3, r7
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045bc:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <MX_TIM3_Init+0x94>)
 80045be:	4a1e      	ldr	r2, [pc, #120]	; (8004638 <MX_TIM3_Init+0x98>)
 80045c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 -1;
 80045c2:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <MX_TIM3_Init+0x94>)
 80045c4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80045c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ca:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <MX_TIM3_Init+0x94>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 -1;
 80045d0:	4b18      	ldr	r3, [pc, #96]	; (8004634 <MX_TIM3_Init+0x94>)
 80045d2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80045d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d8:	4b16      	ldr	r3, [pc, #88]	; (8004634 <MX_TIM3_Init+0x94>)
 80045da:	2200      	movs	r2, #0
 80045dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <MX_TIM3_Init+0x94>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045e4:	4813      	ldr	r0, [pc, #76]	; (8004634 <MX_TIM3_Init+0x94>)
 80045e6:	f004 fd81 	bl	80090ec <HAL_TIM_Base_Init>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80045f0:	f7ff fd22 	bl	8004038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80045fa:	f107 0308 	add.w	r3, r7, #8
 80045fe:	4619      	mov	r1, r3
 8004600:	480c      	ldr	r0, [pc, #48]	; (8004634 <MX_TIM3_Init+0x94>)
 8004602:	f004 ffe9 	bl	80095d8 <HAL_TIM_ConfigClockSource>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800460c:	f7ff fd14 	bl	8004038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004610:	2300      	movs	r3, #0
 8004612:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004614:	2300      	movs	r3, #0
 8004616:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004618:	463b      	mov	r3, r7
 800461a:	4619      	mov	r1, r3
 800461c:	4805      	ldr	r0, [pc, #20]	; (8004634 <MX_TIM3_Init+0x94>)
 800461e:	f005 f9df 	bl	80099e0 <HAL_TIMEx_MasterConfigSynchronization>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004628:	f7ff fd06 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800462c:	bf00      	nop
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20000d68 	.word	0x20000d68
 8004638:	40000400 	.word	0x40000400

0800463c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08c      	sub	sp, #48	; 0x30
 8004640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004642:	f107 030c 	add.w	r3, r7, #12
 8004646:	2224      	movs	r2, #36	; 0x24
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f00a f870 	bl	800e730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004650:	1d3b      	adds	r3, r7, #4
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004658:	4b20      	ldr	r3, [pc, #128]	; (80046dc <MX_TIM4_Init+0xa0>)
 800465a:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <MX_TIM4_Init+0xa4>)
 800465c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800465e:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <MX_TIM4_Init+0xa0>)
 8004660:	2200      	movs	r2, #0
 8004662:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <MX_TIM4_Init+0xa0>)
 8004666:	2200      	movs	r2, #0
 8004668:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800466a:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <MX_TIM4_Init+0xa0>)
 800466c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004670:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004672:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <MX_TIM4_Init+0xa0>)
 8004674:	2200      	movs	r2, #0
 8004676:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004678:	4b18      	ldr	r3, [pc, #96]	; (80046dc <MX_TIM4_Init+0xa0>)
 800467a:	2200      	movs	r2, #0
 800467c:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800467e:	2301      	movs	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004686:	2301      	movs	r3, #1
 8004688:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004692:	2302      	movs	r3, #2
 8004694:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004696:	2301      	movs	r3, #1
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800469a:	2300      	movs	r3, #0
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80046a2:	f107 030c 	add.w	r3, r7, #12
 80046a6:	4619      	mov	r1, r3
 80046a8:	480c      	ldr	r0, [pc, #48]	; (80046dc <MX_TIM4_Init+0xa0>)
 80046aa:	f004 fdb1 	bl	8009210 <HAL_TIM_Encoder_Init>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80046b4:	f7ff fcc0 	bl	8004038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046b8:	2300      	movs	r3, #0
 80046ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046bc:	2300      	movs	r3, #0
 80046be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80046c0:	1d3b      	adds	r3, r7, #4
 80046c2:	4619      	mov	r1, r3
 80046c4:	4805      	ldr	r0, [pc, #20]	; (80046dc <MX_TIM4_Init+0xa0>)
 80046c6:	f005 f98b 	bl	80099e0 <HAL_TIMEx_MasterConfigSynchronization>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80046d0:	f7ff fcb2 	bl	8004038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80046d4:	bf00      	nop
 80046d6:	3730      	adds	r7, #48	; 0x30
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000da8 	.word	0x20000da8
 80046e0:	40000800 	.word	0x40000800

080046e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f4:	d114      	bne.n	8004720 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046f6:	4b19      	ldr	r3, [pc, #100]	; (800475c <HAL_TIM_Base_MspInit+0x78>)
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	4a18      	ldr	r2, [pc, #96]	; (800475c <HAL_TIM_Base_MspInit+0x78>)
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	6253      	str	r3, [r2, #36]	; 0x24
 8004702:	4b16      	ldr	r3, [pc, #88]	; (800475c <HAL_TIM_Base_MspInit+0x78>)
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800470e:	2200      	movs	r2, #0
 8004710:	2101      	movs	r1, #1
 8004712:	201c      	movs	r0, #28
 8004714:	f000 fa55 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004718:	201c      	movs	r0, #28
 800471a:	f000 fa6e 	bl	8004bfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800471e:	e018      	b.n	8004752 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <HAL_TIM_Base_MspInit+0x7c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d113      	bne.n	8004752 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800472a:	4b0c      	ldr	r3, [pc, #48]	; (800475c <HAL_TIM_Base_MspInit+0x78>)
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	4a0b      	ldr	r2, [pc, #44]	; (800475c <HAL_TIM_Base_MspInit+0x78>)
 8004730:	f043 0302 	orr.w	r3, r3, #2
 8004734:	6253      	str	r3, [r2, #36]	; 0x24
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_TIM_Base_MspInit+0x78>)
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004742:	2200      	movs	r2, #0
 8004744:	2101      	movs	r1, #1
 8004746:	201d      	movs	r0, #29
 8004748:	f000 fa3b 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800474c:	201d      	movs	r0, #29
 800474e:	f000 fa54 	bl	8004bfa <HAL_NVIC_EnableIRQ>
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800
 8004760:	40000400 	.word	0x40000400

08004764 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d127      	bne.n	80047d6 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004786:	4b17      	ldr	r3, [pc, #92]	; (80047e4 <HAL_TIM_Encoder_MspInit+0x80>)
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <HAL_TIM_Encoder_MspInit+0x80>)
 800478c:	f043 0304 	orr.w	r3, r3, #4
 8004790:	6253      	str	r3, [r2, #36]	; 0x24
 8004792:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <HAL_TIM_Encoder_MspInit+0x80>)
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800479e:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4a10      	ldr	r2, [pc, #64]	; (80047e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80047a4:	f043 0302 	orr.w	r3, r3, #2
 80047a8:	61d3      	str	r3, [r2, #28]
 80047aa:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047b6:	23c0      	movs	r3, #192	; 0xc0
 80047b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ba:	2302      	movs	r3, #2
 80047bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c2:	2300      	movs	r3, #0
 80047c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80047c6:	2302      	movs	r3, #2
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ca:	f107 0314 	add.w	r3, r7, #20
 80047ce:	4619      	mov	r1, r3
 80047d0:	4805      	ldr	r0, [pc, #20]	; (80047e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80047d2:	f000 fdcb 	bl	800536c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80047d6:	bf00      	nop
 80047d8:	3728      	adds	r7, #40	; 0x28
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40020400 	.word	0x40020400

080047ec <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second)
{
 80047ec:	b084      	sub	sp, #16
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af02      	add	r7, sp, #8
 80047f4:	f107 0c08 	add.w	ip, r7, #8
 80047f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 80047fc:	4b0f      	ldr	r3, [pc, #60]	; (800483c <TMP117_set_Configuration+0x50>)
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 8004802:	4a0e      	ldr	r2, [pc, #56]	; (800483c <TMP117_set_Configuration+0x50>)
 8004804:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8004808:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 800480a:	4a0c      	ldr	r2, [pc, #48]	; (800483c <TMP117_set_Configuration+0x50>)
 800480c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8004810:	7093      	strb	r3, [r2, #2]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,2,100);
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <TMP117_set_Configuration+0x54>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	b299      	uxth	r1, r3
 8004818:	2364      	movs	r3, #100	; 0x64
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	2302      	movs	r3, #2
 800481e:	4a07      	ldr	r2, [pc, #28]	; (800483c <TMP117_set_Configuration+0x50>)
 8004820:	f107 0008 	add.w	r0, r7, #8
 8004824:	f001 f8ae 	bl	8005984 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8004828:	2001      	movs	r0, #1
 800482a:	f000 f8d1 	bl	80049d0 <HAL_Delay>
}
 800482e:	bf00      	nop
 8004830:	46bd      	mov	sp, r7
 8004832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004836:	b004      	add	sp, #16
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000de8 	.word	0x20000de8
 8004840:	20000740 	.word	0x20000740

08004844 <TMP117_Initialization>:
   @Description   Custom Parameters for Sensor
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  void
 */
void TMP117_Initialization               (I2C_HandleTypeDef i2c)
{
 8004844:	b084      	sub	sp, #16
 8004846:	b580      	push	{r7, lr}
 8004848:	b094      	sub	sp, #80	; 0x50
 800484a:	af14      	add	r7, sp, #80	; 0x50
 800484c:	f107 0c08 	add.w	ip, r7, #8
 8004850:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    TMP117_set_Configuration(i2c,0x02,0x22);
 8004854:	2322      	movs	r3, #34	; 0x22
 8004856:	9312      	str	r3, [sp, #72]	; 0x48
 8004858:	2302      	movs	r3, #2
 800485a:	9311      	str	r3, [sp, #68]	; 0x44
 800485c:	4668      	mov	r0, sp
 800485e:	f107 0318 	add.w	r3, r7, #24
 8004862:	2244      	movs	r2, #68	; 0x44
 8004864:	4619      	mov	r1, r3
 8004866:	f009 ff55 	bl	800e714 <memcpy>
 800486a:	f107 0308 	add.w	r3, r7, #8
 800486e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004870:	f7ff ffbc 	bl	80047ec <TMP117_set_Configuration>
	HAL_Delay(100); // wait 1ms
 8004874:	2064      	movs	r0, #100	; 0x64
 8004876:	f000 f8ab 	bl	80049d0 <HAL_Delay>
	TMP117_set_Configuration(i2c,0x02,0x20);
 800487a:	2320      	movs	r3, #32
 800487c:	9312      	str	r3, [sp, #72]	; 0x48
 800487e:	2302      	movs	r3, #2
 8004880:	9311      	str	r3, [sp, #68]	; 0x44
 8004882:	4668      	mov	r0, sp
 8004884:	f107 0318 	add.w	r3, r7, #24
 8004888:	2244      	movs	r2, #68	; 0x44
 800488a:	4619      	mov	r1, r3
 800488c:	f009 ff42 	bl	800e714 <memcpy>
 8004890:	f107 0308 	add.w	r3, r7, #8
 8004894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004896:	f7ff ffa9 	bl	80047ec <TMP117_set_Configuration>
//      TMP117_set_Temperature_Offset(i2c,0x00,0x00); //Default Value
//      TMP117_set_LowLimit(i2c,0x12,0x80);           //Set 10 Celcius
//      TMP117_set_HighLimit(i2c,0x51,0x20);          //Set 40 Celcius
}
 800489a:	bf00      	nop
 800489c:	46bd      	mov	sp, r7
 800489e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048a2:	b004      	add	sp, #16
 80048a4:	4770      	bx	lr
	...

080048a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048a8:	480c      	ldr	r0, [pc, #48]	; (80048dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048aa:	490d      	ldr	r1, [pc, #52]	; (80048e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80048ac:	4a0d      	ldr	r2, [pc, #52]	; (80048e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80048ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048b0:	e002      	b.n	80048b8 <LoopCopyDataInit>

080048b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048b6:	3304      	adds	r3, #4

080048b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048bc:	d3f9      	bcc.n	80048b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048be:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80048c0:	4c0a      	ldr	r4, [pc, #40]	; (80048ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80048c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048c4:	e001      	b.n	80048ca <LoopFillZerobss>

080048c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048c8:	3204      	adds	r2, #4

080048ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048cc:	d3fb      	bcc.n	80048c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80048ce:	f7ff fe15 	bl	80044fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048d2:	f009 fefb 	bl	800e6cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048d6:	f7fe ff1d 	bl	8003714 <main>
  bx lr
 80048da:	4770      	bx	lr
  ldr r0, =_sdata
 80048dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048e0:	20000a90 	.word	0x20000a90
  ldr r2, =_sidata
 80048e4:	08013248 	.word	0x08013248
  ldr r2, =_sbss
 80048e8:	20000a90 	.word	0x20000a90
  ldr r4, =_ebss
 80048ec:	20001944 	.word	0x20001944

080048f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048f0:	e7fe      	b.n	80048f0 <ADC1_IRQHandler>

080048f2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048fc:	2003      	movs	r0, #3
 80048fe:	f000 f955 	bl	8004bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004902:	200f      	movs	r0, #15
 8004904:	f000 f80e 	bl	8004924 <HAL_InitTick>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	71fb      	strb	r3, [r7, #7]
 8004912:	e001      	b.n	8004918 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004914:	f7ff fc7c 	bl	8004210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004918:	79fb      	ldrb	r3, [r7, #7]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004930:	4b16      	ldr	r3, [pc, #88]	; (800498c <HAL_InitTick+0x68>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d022      	beq.n	800497e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <HAL_InitTick+0x6c>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4b13      	ldr	r3, [pc, #76]	; (800498c <HAL_InitTick+0x68>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004944:	fbb1 f3f3 	udiv	r3, r1, r3
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f962 	bl	8004c16 <HAL_SYSTICK_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10f      	bne.n	8004978 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b0f      	cmp	r3, #15
 800495c:	d809      	bhi.n	8004972 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800495e:	2200      	movs	r2, #0
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	f04f 30ff 	mov.w	r0, #4294967295
 8004966:	f000 f92c 	bl	8004bc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800496a:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <HAL_InitTick+0x70>)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e007      	b.n	8004982 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	e004      	b.n	8004982 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]
 800497c:	e001      	b.n	8004982 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000748 	.word	0x20000748
 8004990:	2000073c 	.word	0x2000073c
 8004994:	20000744 	.word	0x20000744

08004998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_IncTick+0x1c>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <HAL_IncTick+0x20>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4413      	add	r3, r2
 80049a6:	4a03      	ldr	r2, [pc, #12]	; (80049b4 <HAL_IncTick+0x1c>)
 80049a8:	6013      	str	r3, [r2, #0]
}
 80049aa:	bf00      	nop
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000dec 	.word	0x20000dec
 80049b8:	20000748 	.word	0x20000748

080049bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return uwTick;
 80049c0:	4b02      	ldr	r3, [pc, #8]	; (80049cc <HAL_GetTick+0x10>)
 80049c2:	681b      	ldr	r3, [r3, #0]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	20000dec 	.word	0x20000dec

080049d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049d8:	f7ff fff0 	bl	80049bc <HAL_GetTick>
 80049dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e8:	d004      	beq.n	80049f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_Delay+0x40>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049f4:	bf00      	nop
 80049f6:	f7ff ffe1 	bl	80049bc <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d8f7      	bhi.n	80049f6 <HAL_Delay+0x26>
  {
  }
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000748 	.word	0x20000748

08004a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <__NVIC_SetPriorityGrouping+0x44>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a30:	4013      	ands	r3, r2
 8004a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a46:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <__NVIC_SetPriorityGrouping+0x44>)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	60d3      	str	r3, [r2, #12]
}
 8004a4c:	bf00      	nop
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	e000ed00 	.word	0xe000ed00

08004a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a60:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <__NVIC_GetPriorityGrouping+0x18>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	0a1b      	lsrs	r3, r3, #8
 8004a66:	f003 0307 	and.w	r3, r3, #7
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	e000ed00 	.word	0xe000ed00

08004a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	db0b      	blt.n	8004aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	f003 021f 	and.w	r2, r3, #31
 8004a90:	4906      	ldr	r1, [pc, #24]	; (8004aac <__NVIC_EnableIRQ+0x34>)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	2001      	movs	r0, #1
 8004a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	e000e100 	.word	0xe000e100

08004ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	6039      	str	r1, [r7, #0]
 8004aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	db0a      	blt.n	8004ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	490c      	ldr	r1, [pc, #48]	; (8004afc <__NVIC_SetPriority+0x4c>)
 8004aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ace:	0112      	lsls	r2, r2, #4
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ad8:	e00a      	b.n	8004af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	4908      	ldr	r1, [pc, #32]	; (8004b00 <__NVIC_SetPriority+0x50>)
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	3b04      	subs	r3, #4
 8004ae8:	0112      	lsls	r2, r2, #4
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	440b      	add	r3, r1
 8004aee:	761a      	strb	r2, [r3, #24]
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	e000e100 	.word	0xe000e100
 8004b00:	e000ed00 	.word	0xe000ed00

08004b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b089      	sub	sp, #36	; 0x24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f1c3 0307 	rsb	r3, r3, #7
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	bf28      	it	cs
 8004b22:	2304      	movcs	r3, #4
 8004b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	2b06      	cmp	r3, #6
 8004b2c:	d902      	bls.n	8004b34 <NVIC_EncodePriority+0x30>
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	3b03      	subs	r3, #3
 8004b32:	e000      	b.n	8004b36 <NVIC_EncodePriority+0x32>
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	43da      	mvns	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	401a      	ands	r2, r3
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	fa01 f303 	lsl.w	r3, r1, r3
 8004b56:	43d9      	mvns	r1, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b5c:	4313      	orrs	r3, r2
         );
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3724      	adds	r7, #36	; 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b78:	d301      	bcc.n	8004b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e00f      	b.n	8004b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <SysTick_Config+0x40>)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b86:	210f      	movs	r1, #15
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	f7ff ff90 	bl	8004ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <SysTick_Config+0x40>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b96:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <SysTick_Config+0x40>)
 8004b98:	2207      	movs	r2, #7
 8004b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	e000e010 	.word	0xe000e010

08004bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ff2d 	bl	8004a14 <__NVIC_SetPriorityGrouping>
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	4603      	mov	r3, r0
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bd4:	f7ff ff42 	bl	8004a5c <__NVIC_GetPriorityGrouping>
 8004bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	6978      	ldr	r0, [r7, #20]
 8004be0:	f7ff ff90 	bl	8004b04 <NVIC_EncodePriority>
 8004be4:	4602      	mov	r2, r0
 8004be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bea:	4611      	mov	r1, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff5f 	bl	8004ab0 <__NVIC_SetPriority>
}
 8004bf2:	bf00      	nop
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	4603      	mov	r3, r0
 8004c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff ff35 	bl	8004a78 <__NVIC_EnableIRQ>
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ffa2 	bl	8004b68 <SysTick_Config>
 8004c24:	4603      	mov	r3, r0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d005      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	e029      	b.n	8004ca6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 020e 	bic.w	r2, r2, #14
 8004c60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f003 021c 	and.w	r2, r3, #28
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	2101      	movs	r1, #1
 8004c80:	fa01 f202 	lsl.w	r2, r1, r2
 8004c84:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
    }
  }
  return status;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004cb8:	f7ff fe80 	bl	80049bc <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004cbe:	e010      	b.n	8004ce2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d00c      	beq.n	8004ce2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <FLASH_WaitForLastOperation+0x2e>
 8004cce:	f7ff fe75 	bl	80049bc <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d201      	bcs.n	8004ce2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e02f      	b.n	8004d42 <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004ce2:	4b1a      	ldr	r3, [pc, #104]	; (8004d4c <FLASH_WaitForLastOperation+0x9c>)
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d0e8      	beq.n	8004cc0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004cee:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <FLASH_WaitForLastOperation+0x9c>)
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d102      	bne.n	8004d00 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004cfa:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <FLASH_WaitForLastOperation+0x9c>)
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004d00:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <FLASH_WaitForLastOperation+0x9c>)
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0c:	d014      	beq.n	8004d38 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <FLASH_WaitForLastOperation+0x9c>)
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1a:	d00d      	beq.n	8004d38 <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <FLASH_WaitForLastOperation+0x9c>)
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d28:	d006      	beq.n	8004d38 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <FLASH_WaitForLastOperation+0x9c>)
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8004d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d36:	d103      	bne.n	8004d40 <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004d38:	f000 f80a 	bl	8004d50 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023c00 	.word	0x40023c00

08004d50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004d5a:	4b26      	ldr	r3, [pc, #152]	; (8004df4 <FLASH_SetErrorCode+0xa4>)
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d66:	d109      	bne.n	8004d7c <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004d68:	4b23      	ldr	r3, [pc, #140]	; (8004df8 <FLASH_SetErrorCode+0xa8>)
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	f043 0302 	orr.w	r3, r3, #2
 8004d70:	4a21      	ldr	r2, [pc, #132]	; (8004df8 <FLASH_SetErrorCode+0xa8>)
 8004d72:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8004d7c:	4b1d      	ldr	r3, [pc, #116]	; (8004df4 <FLASH_SetErrorCode+0xa4>)
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d88:	d109      	bne.n	8004d9e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004d8a:	4b1b      	ldr	r3, [pc, #108]	; (8004df8 <FLASH_SetErrorCode+0xa8>)
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <FLASH_SetErrorCode+0xa8>)
 8004d94:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d9c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <FLASH_SetErrorCode+0xa4>)
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004daa:	d109      	bne.n	8004dc0 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004dac:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <FLASH_SetErrorCode+0xa8>)
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	f043 0304 	orr.w	r3, r3, #4
 8004db4:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <FLASH_SetErrorCode+0xa8>)
 8004db6:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dbe:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <FLASH_SetErrorCode+0xa4>)
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dcc:	d109      	bne.n	8004de2 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <FLASH_SetErrorCode+0xa8>)
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f043 0308 	orr.w	r3, r3, #8
 8004dd6:	4a08      	ldr	r2, [pc, #32]	; (8004df8 <FLASH_SetErrorCode+0xa8>)
 8004dd8:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004de0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004de2:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <FLASH_SetErrorCode+0xa4>)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6193      	str	r3, [r2, #24]
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40023c00 	.word	0x40023c00
 8004df8:	20000df0 	.word	0x20000df0

08004dfc <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8004e0e:	4a07      	ldr	r2, [pc, #28]	; (8004e2c <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 8004e10:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8004e14:	4a06      	ldr	r2, [pc, #24]	; (8004e30 <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 8004e16:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e000      	b.n	8004e1e <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40023c00 	.word	0x40023c00
 8004e2c:	89abcdef 	.word	0x89abcdef
 8004e30:	02030405 	.word	0x02030405

08004e34 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40023c00 	.word	0x40023c00

08004e54 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e66:	f7ff ff23 	bl	8004cb0 <FLASH_WaitForLastOperation>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11a      	bne.n	8004eaa <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d102      	bne.n	8004e86 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d102      	bne.n	8004e92 <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ea2:	f7ff ff05 	bl	8004cb0 <FLASH_WaitForLastOperation>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000df0 	.word	0x20000df0

08004eb8 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ec8:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004eca:	7c1b      	ldrb	r3, [r3, #16]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e058      	b.n	8004f86 <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 8004ed4:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004eda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ede:	f7ff fee7 	bl	8004cb0 <FLASH_WaitForLastOperation>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d148      	bne.n	8004f7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004eec:	4b28      	ldr	r3, [pc, #160]	; (8004f90 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d106      	bne.n	8004f06 <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	68b8      	ldr	r0, [r7, #8]
 8004efc:	f000 fa18 	bl	8005330 <FLASH_DATAEEPROM_ProgramWord>
 8004f00:	4603      	mov	r3, r0
 8004f02:	75fb      	strb	r3, [r7, #23]
 8004f04:	e03b      	b.n	8004f7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d108      	bne.n	8004f1e <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	4619      	mov	r1, r3
 8004f12:	68b8      	ldr	r0, [r7, #8]
 8004f14:	f000 f99c 	bl	8005250 <FLASH_DATAEEPROM_ProgramHalfWord>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	75fb      	strb	r3, [r7, #23]
 8004f1c:	e02f      	b.n	8004f7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d108      	bne.n	8004f36 <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	4619      	mov	r1, r3
 8004f2a:	68b8      	ldr	r0, [r7, #8]
 8004f2c:	f000 f934 	bl	8005198 <FLASH_DATAEEPROM_ProgramByte>
 8004f30:	4603      	mov	r3, r0
 8004f32:	75fb      	strb	r3, [r7, #23]
 8004f34:	e023      	b.n	8004f7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d108      	bne.n	8004f4e <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	4619      	mov	r1, r3
 8004f42:	68b8      	ldr	r0, [r7, #8]
 8004f44:	f000 f826 	bl	8004f94 <FLASH_DATAEEPROM_FastProgramByte>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	75fb      	strb	r3, [r7, #23]
 8004f4c:	e017      	b.n	8004f7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d108      	bne.n	8004f66 <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	4619      	mov	r1, r3
 8004f5a:	68b8      	ldr	r0, [r7, #8]
 8004f5c:	f000 f87e 	bl	800505c <FLASH_DATAEEPROM_FastProgramHalfWord>
 8004f60:	4603      	mov	r3, r0
 8004f62:	75fb      	strb	r3, [r7, #23]
 8004f64:	e00b      	b.n	8004f7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d106      	bne.n	8004f7a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	68b8      	ldr	r0, [r7, #8]
 8004f70:	f000 f8ec 	bl	800514c <FLASH_DATAEEPROM_FastProgramWord>
 8004f74:	4603      	mov	r3, r0
 8004f76:	75fb      	strb	r3, [r7, #23]
 8004f78:	e001      	b.n	8004f7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f7e:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	741a      	strb	r2, [r3, #16]

  return status;
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000df0 	.word	0x20000df0

08004f94 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fb0:	f7ff fe7e 	bl	8004cb0 <FLASH_WaitForLastOperation>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d145      	bne.n	800504a <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8004fbe:	4b25      	ldr	r3, [pc, #148]	; (8005054 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4a24      	ldr	r2, [pc, #144]	; (8005054 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8004fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc8:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d009      	beq.n	8004fe4 <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	78fa      	ldrb	r2, [r7, #3]
 8004fd4:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fd6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fda:	f7ff fe69 	bl	8004cb0 <FLASH_WaitForLastOperation>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	75fb      	strb	r3, [r7, #23]
 8004fe2:	e032      	b.n	800504a <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	22ff      	movs	r2, #255	; 0xff
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	43db      	mvns	r3, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4013      	ands	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	4619      	mov	r1, r3
 8005014:	2002      	movs	r0, #2
 8005016:	f7ff ff1d 	bl	8004e54 <HAL_FLASHEx_DATAEEPROM_Erase>
 800501a:	4603      	mov	r3, r0
 800501c:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800501e:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8005020:	2200      	movs	r2, #0
 8005022:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4619      	mov	r1, r3
 800502e:	2010      	movs	r0, #16
 8005030:	f7ff ff42 	bl	8004eb8 <HAL_FLASHEx_DATAEEPROM_Program>
 8005034:	4603      	mov	r3, r0
 8005036:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 800503a:	7c1b      	ldrb	r3, [r3, #16]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 8005040:	2302      	movs	r3, #2
 8005042:	e003      	b.n	800504c <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8005046:	2201      	movs	r2, #1
 8005048:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800504a:	7dfb      	ldrb	r3, [r7, #23]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40023c00 	.word	0x40023c00
 8005058:	20000df0 	.word	0x20000df0

0800505c <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005074:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005078:	f7ff fe1a 	bl	8004cb0 <FLASH_WaitForLastOperation>
 800507c:	4603      	mov	r3, r0
 800507e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d158      	bne.n	8005138 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8005086:	4b2f      	ldr	r3, [pc, #188]	; (8005144 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4a2e      	ldr	r2, [pc, #184]	; (8005144 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 800508c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005090:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 8005092:	887b      	ldrh	r3, [r7, #2]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d009      	beq.n	80050ac <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	887a      	ldrh	r2, [r7, #2]
 800509c:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800509e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050a2:	f7ff fe05 	bl	8004cb0 <FLASH_WaitForLastOperation>
 80050a6:	4603      	mov	r3, r0
 80050a8:	75fb      	strb	r3, [r7, #23]
 80050aa:	e045      	b.n	8005138 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80050ac:	4b26      	ldr	r3, [pc, #152]	; (8005148 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d028      	beq.n	800510e <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	43db      	mvns	r3, r3
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4013      	ands	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f023 0303 	bic.w	r3, r3, #3
 80050ec:	4619      	mov	r1, r3
 80050ee:	2002      	movs	r0, #2
 80050f0:	f7ff feb0 	bl	8004e54 <HAL_FLASHEx_DATAEEPROM_Erase>
 80050f4:	4603      	mov	r3, r0
 80050f6:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4619      	mov	r1, r3
 8005102:	2010      	movs	r0, #16
 8005104:	f7ff fed8 	bl	8004eb8 <HAL_FLASHEx_DATAEEPROM_Program>
 8005108:	4603      	mov	r3, r0
 800510a:	75fb      	strb	r3, [r7, #23]
 800510c:	e00b      	b.n	8005126 <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 800510e:	2200      	movs	r2, #0
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	2004      	movs	r0, #4
 8005114:	f7ff fed0 	bl	8004eb8 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3301      	adds	r3, #1
 800511c:	2200      	movs	r2, #0
 800511e:	4619      	mov	r1, r3
 8005120:	2004      	movs	r0, #4
 8005122:	f7ff fec9 	bl	8004eb8 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8005126:	4b08      	ldr	r3, [pc, #32]	; (8005148 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8005128:	7c1b      	ldrb	r3, [r3, #16]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 800512e:	2302      	movs	r3, #2
 8005130:	e003      	b.n	800513a <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8005134:	2201      	movs	r2, #1
 8005136:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005138:	7dfb      	ldrb	r3, [r7, #23]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40023c00 	.word	0x40023c00
 8005148:	20000df0 	.word	0x20000df0

0800514c <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800515a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800515e:	f7ff fda7 	bl	8004cb0 <FLASH_WaitForLastOperation>
 8005162:	4603      	mov	r3, r0
 8005164:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10e      	bne.n	800518a <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a08      	ldr	r2, [pc, #32]	; (8005194 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8005172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005176:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800517e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005182:	f7ff fd95 	bl	8004cb0 <FLASH_WaitForLastOperation>
 8005186:	4603      	mov	r3, r0
 8005188:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40023c00 	.word	0x40023c00

08005198 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80051b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051b4:	f7ff fd7c 	bl	8004cb0 <FLASH_WaitForLastOperation>
 80051b8:	4603      	mov	r3, r0
 80051ba:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d13f      	bne.n	8005242 <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d009      	beq.n	80051dc <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	78fa      	ldrb	r2, [r7, #3]
 80051cc:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80051ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051d2:	f7ff fd6d 	bl	8004cb0 <FLASH_WaitForLastOperation>
 80051d6:	4603      	mov	r3, r0
 80051d8:	75fb      	strb	r3, [r7, #23]
 80051da:	e032      	b.n	8005242 <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f023 0303 	bic.w	r3, r3, #3
 80051e2:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	22ff      	movs	r2, #255	; 0xff
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	43db      	mvns	r3, r3
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4013      	ands	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f023 0303 	bic.w	r3, r3, #3
 800520a:	4619      	mov	r1, r3
 800520c:	2002      	movs	r0, #2
 800520e:	f7ff fe21 	bl	8004e54 <HAL_FLASHEx_DATAEEPROM_Erase>
 8005212:	4603      	mov	r3, r0
 8005214:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8005218:	2200      	movs	r2, #0
 800521a:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f023 0303 	bic.w	r3, r3, #3
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4619      	mov	r1, r3
 8005226:	2010      	movs	r0, #16
 8005228:	f7ff fe46 	bl	8004eb8 <HAL_FLASHEx_DATAEEPROM_Program>
 800522c:	4603      	mov	r3, r0
 800522e:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8005232:	7c1b      	ldrb	r3, [r3, #16]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <FLASH_DATAEEPROM_ProgramByte+0xa4>
 8005238:	2302      	movs	r3, #2
 800523a:	e003      	b.n	8005244 <FLASH_DATAEEPROM_ProgramByte+0xac>
 800523c:	4b03      	ldr	r3, [pc, #12]	; (800524c <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 800523e:	2201      	movs	r2, #1
 8005240:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005242:	7dfb      	ldrb	r3, [r7, #23]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000df0 	.word	0x20000df0

08005250 <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005268:	f24c 3050 	movw	r0, #50000	; 0xc350
 800526c:	f7ff fd20 	bl	8004cb0 <FLASH_WaitForLastOperation>
 8005270:	4603      	mov	r3, r0
 8005272:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005274:	7dfb      	ldrb	r3, [r7, #23]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d152      	bne.n	8005320 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 800527a:	887b      	ldrh	r3, [r7, #2]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	887a      	ldrh	r2, [r7, #2]
 8005284:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005286:	f24c 3050 	movw	r0, #50000	; 0xc350
 800528a:	f7ff fd11 	bl	8004cb0 <FLASH_WaitForLastOperation>
 800528e:	4603      	mov	r3, r0
 8005290:	75fb      	strb	r3, [r7, #23]
 8005292:	e045      	b.n	8005320 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8005294:	4b25      	ldr	r3, [pc, #148]	; (800532c <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8005296:	2200      	movs	r2, #0
 8005298:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d028      	beq.n	80052f6 <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f023 0303 	bic.w	r3, r3, #3
 80052aa:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	43db      	mvns	r3, r3
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4013      	ands	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f023 0303 	bic.w	r3, r3, #3
 80052d4:	4619      	mov	r1, r3
 80052d6:	2002      	movs	r0, #2
 80052d8:	f7ff fdbc 	bl	8004e54 <HAL_FLASHEx_DATAEEPROM_Erase>
 80052dc:	4603      	mov	r3, r0
 80052de:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4619      	mov	r1, r3
 80052ea:	2010      	movs	r0, #16
 80052ec:	f7ff fde4 	bl	8004eb8 <HAL_FLASHEx_DATAEEPROM_Program>
 80052f0:	4603      	mov	r3, r0
 80052f2:	75fb      	strb	r3, [r7, #23]
 80052f4:	e00b      	b.n	800530e <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 80052f6:	2200      	movs	r2, #0
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	2004      	movs	r0, #4
 80052fc:	f7ff fddc 	bl	8004eb8 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3301      	adds	r3, #1
 8005304:	2200      	movs	r2, #0
 8005306:	4619      	mov	r1, r3
 8005308:	2004      	movs	r0, #4
 800530a:	f7ff fdd5 	bl	8004eb8 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 800530e:	4b07      	ldr	r3, [pc, #28]	; (800532c <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8005310:	7c1b      	ldrb	r3, [r3, #16]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 8005316:	2302      	movs	r3, #2
 8005318:	e003      	b.n	8005322 <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 800531a:	4b04      	ldr	r3, [pc, #16]	; (800532c <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 800531c:	2201      	movs	r2, #1
 800531e:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000df0 	.word	0x20000df0

08005330 <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800533e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005342:	f7ff fcb5 	bl	8004cb0 <FLASH_WaitForLastOperation>
 8005346:	4603      	mov	r3, r0
 8005348:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d108      	bne.n	8005362 <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005356:	f24c 3050 	movw	r0, #50000	; 0xc350
 800535a:	f7ff fca9 	bl	8004cb0 <FLASH_WaitForLastOperation>
 800535e:	4603      	mov	r3, r0
 8005360:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8005362:	7bfb      	ldrb	r3, [r7, #15]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800537e:	2300      	movs	r3, #0
 8005380:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005382:	e154      	b.n	800562e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	2101      	movs	r1, #1
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	fa01 f303 	lsl.w	r3, r1, r3
 8005390:	4013      	ands	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 8146 	beq.w	8005628 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d005      	beq.n	80053b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d130      	bne.n	8005416 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	2203      	movs	r2, #3
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	43db      	mvns	r3, r3
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4013      	ands	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80053ea:	2201      	movs	r2, #1
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4013      	ands	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	091b      	lsrs	r3, r3, #4
 8005400:	f003 0201 	and.w	r2, r3, #1
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	2b03      	cmp	r3, #3
 8005420:	d017      	beq.n	8005452 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	2203      	movs	r2, #3
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43db      	mvns	r3, r3
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4013      	ands	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d123      	bne.n	80054a6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	08da      	lsrs	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3208      	adds	r2, #8
 8005466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	220f      	movs	r2, #15
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4013      	ands	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	08da      	lsrs	r2, r3, #3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3208      	adds	r2, #8
 80054a0:	6939      	ldr	r1, [r7, #16]
 80054a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	2203      	movs	r2, #3
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43db      	mvns	r3, r3
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4013      	ands	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f003 0203 	and.w	r2, r3, #3
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 80a0 	beq.w	8005628 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054e8:	4b58      	ldr	r3, [pc, #352]	; (800564c <HAL_GPIO_Init+0x2e0>)
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	4a57      	ldr	r2, [pc, #348]	; (800564c <HAL_GPIO_Init+0x2e0>)
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	6213      	str	r3, [r2, #32]
 80054f4:	4b55      	ldr	r3, [pc, #340]	; (800564c <HAL_GPIO_Init+0x2e0>)
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8005500:	4a53      	ldr	r2, [pc, #332]	; (8005650 <HAL_GPIO_Init+0x2e4>)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	089b      	lsrs	r3, r3, #2
 8005506:	3302      	adds	r3, #2
 8005508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800550c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	220f      	movs	r2, #15
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	43db      	mvns	r3, r3
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4013      	ands	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a4b      	ldr	r2, [pc, #300]	; (8005654 <HAL_GPIO_Init+0x2e8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d019      	beq.n	8005560 <HAL_GPIO_Init+0x1f4>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a4a      	ldr	r2, [pc, #296]	; (8005658 <HAL_GPIO_Init+0x2ec>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d013      	beq.n	800555c <HAL_GPIO_Init+0x1f0>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a49      	ldr	r2, [pc, #292]	; (800565c <HAL_GPIO_Init+0x2f0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00d      	beq.n	8005558 <HAL_GPIO_Init+0x1ec>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a48      	ldr	r2, [pc, #288]	; (8005660 <HAL_GPIO_Init+0x2f4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d007      	beq.n	8005554 <HAL_GPIO_Init+0x1e8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a47      	ldr	r2, [pc, #284]	; (8005664 <HAL_GPIO_Init+0x2f8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d101      	bne.n	8005550 <HAL_GPIO_Init+0x1e4>
 800554c:	2304      	movs	r3, #4
 800554e:	e008      	b.n	8005562 <HAL_GPIO_Init+0x1f6>
 8005550:	2305      	movs	r3, #5
 8005552:	e006      	b.n	8005562 <HAL_GPIO_Init+0x1f6>
 8005554:	2303      	movs	r3, #3
 8005556:	e004      	b.n	8005562 <HAL_GPIO_Init+0x1f6>
 8005558:	2302      	movs	r3, #2
 800555a:	e002      	b.n	8005562 <HAL_GPIO_Init+0x1f6>
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <HAL_GPIO_Init+0x1f6>
 8005560:	2300      	movs	r3, #0
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	f002 0203 	and.w	r2, r2, #3
 8005568:	0092      	lsls	r2, r2, #2
 800556a:	4093      	lsls	r3, r2
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005572:	4937      	ldr	r1, [pc, #220]	; (8005650 <HAL_GPIO_Init+0x2e4>)
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	089b      	lsrs	r3, r3, #2
 8005578:	3302      	adds	r3, #2
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005580:	4b39      	ldr	r3, [pc, #228]	; (8005668 <HAL_GPIO_Init+0x2fc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	43db      	mvns	r3, r3
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4013      	ands	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80055a4:	4a30      	ldr	r2, [pc, #192]	; (8005668 <HAL_GPIO_Init+0x2fc>)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80055aa:	4b2f      	ldr	r3, [pc, #188]	; (8005668 <HAL_GPIO_Init+0x2fc>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	43db      	mvns	r3, r3
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4013      	ands	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80055ce:	4a26      	ldr	r2, [pc, #152]	; (8005668 <HAL_GPIO_Init+0x2fc>)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055d4:	4b24      	ldr	r3, [pc, #144]	; (8005668 <HAL_GPIO_Init+0x2fc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	43db      	mvns	r3, r3
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4013      	ands	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80055f8:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <HAL_GPIO_Init+0x2fc>)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055fe:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <HAL_GPIO_Init+0x2fc>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	43db      	mvns	r3, r3
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4013      	ands	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005622:	4a11      	ldr	r2, [pc, #68]	; (8005668 <HAL_GPIO_Init+0x2fc>)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	3301      	adds	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	fa22 f303 	lsr.w	r3, r2, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	f47f aea3 	bne.w	8005384 <HAL_GPIO_Init+0x18>
  }
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800
 8005650:	40010000 	.word	0x40010000
 8005654:	40020000 	.word	0x40020000
 8005658:	40020400 	.word	0x40020400
 800565c:	40020800 	.word	0x40020800
 8005660:	40020c00 	.word	0x40020c00
 8005664:	40021000 	.word	0x40021000
 8005668:	40010400 	.word	0x40010400

0800566c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	887b      	ldrh	r3, [r7, #2]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005684:	2301      	movs	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
 8005688:	e001      	b.n	800568e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800568e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	460b      	mov	r3, r1
 80056a4:	807b      	strh	r3, [r7, #2]
 80056a6:	4613      	mov	r3, r2
 80056a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056aa:	787b      	ldrb	r3, [r7, #1]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056b0:	887a      	ldrh	r2, [r7, #2]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80056b6:	e003      	b.n	80056c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80056b8:	887b      	ldrh	r3, [r7, #2]
 80056ba:	041a      	lsls	r2, r3, #16
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	619a      	str	r2, [r3, #24]
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr
	...

080056cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80056d6:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	4013      	ands	r3, r2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d006      	beq.n	80056f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056e2:	4a05      	ldr	r2, [pc, #20]	; (80056f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe f980 	bl	80039f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40010400 	.word	0x40010400

080056fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e12b      	b.n	8005966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fd ff92 	bl	800364c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2224      	movs	r2, #36	; 0x24
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0201 	bic.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800574e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800575e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005760:	f002 fdb0 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 8005764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	4a81      	ldr	r2, [pc, #516]	; (8005970 <HAL_I2C_Init+0x274>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d807      	bhi.n	8005780 <HAL_I2C_Init+0x84>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a80      	ldr	r2, [pc, #512]	; (8005974 <HAL_I2C_Init+0x278>)
 8005774:	4293      	cmp	r3, r2
 8005776:	bf94      	ite	ls
 8005778:	2301      	movls	r3, #1
 800577a:	2300      	movhi	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	e006      	b.n	800578e <HAL_I2C_Init+0x92>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a7d      	ldr	r2, [pc, #500]	; (8005978 <HAL_I2C_Init+0x27c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	bf94      	ite	ls
 8005788:	2301      	movls	r3, #1
 800578a:	2300      	movhi	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e0e7      	b.n	8005966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4a78      	ldr	r2, [pc, #480]	; (800597c <HAL_I2C_Init+0x280>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	0c9b      	lsrs	r3, r3, #18
 80057a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4a6a      	ldr	r2, [pc, #424]	; (8005970 <HAL_I2C_Init+0x274>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d802      	bhi.n	80057d0 <HAL_I2C_Init+0xd4>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	3301      	adds	r3, #1
 80057ce:	e009      	b.n	80057e4 <HAL_I2C_Init+0xe8>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80057d6:	fb02 f303 	mul.w	r3, r2, r3
 80057da:	4a69      	ldr	r2, [pc, #420]	; (8005980 <HAL_I2C_Init+0x284>)
 80057dc:	fba2 2303 	umull	r2, r3, r2, r3
 80057e0:	099b      	lsrs	r3, r3, #6
 80057e2:	3301      	adds	r3, #1
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	430b      	orrs	r3, r1
 80057ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	495c      	ldr	r1, [pc, #368]	; (8005970 <HAL_I2C_Init+0x274>)
 8005800:	428b      	cmp	r3, r1
 8005802:	d819      	bhi.n	8005838 <HAL_I2C_Init+0x13c>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	1e59      	subs	r1, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005812:	1c59      	adds	r1, r3, #1
 8005814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005818:	400b      	ands	r3, r1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <HAL_I2C_Init+0x138>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	1e59      	subs	r1, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	fbb1 f3f3 	udiv	r3, r1, r3
 800582c:	3301      	adds	r3, #1
 800582e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005832:	e051      	b.n	80058d8 <HAL_I2C_Init+0x1dc>
 8005834:	2304      	movs	r3, #4
 8005836:	e04f      	b.n	80058d8 <HAL_I2C_Init+0x1dc>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d111      	bne.n	8005864 <HAL_I2C_Init+0x168>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	1e58      	subs	r0, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6859      	ldr	r1, [r3, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	440b      	add	r3, r1
 800584e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005852:	3301      	adds	r3, #1
 8005854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005858:	2b00      	cmp	r3, #0
 800585a:	bf0c      	ite	eq
 800585c:	2301      	moveq	r3, #1
 800585e:	2300      	movne	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	e012      	b.n	800588a <HAL_I2C_Init+0x18e>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	1e58      	subs	r0, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6859      	ldr	r1, [r3, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	0099      	lsls	r1, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	fbb0 f3f3 	udiv	r3, r0, r3
 800587a:	3301      	adds	r3, #1
 800587c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_I2C_Init+0x196>
 800588e:	2301      	movs	r3, #1
 8005890:	e022      	b.n	80058d8 <HAL_I2C_Init+0x1dc>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10e      	bne.n	80058b8 <HAL_I2C_Init+0x1bc>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1e58      	subs	r0, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	440b      	add	r3, r1
 80058a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ac:	3301      	adds	r3, #1
 80058ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b6:	e00f      	b.n	80058d8 <HAL_I2C_Init+0x1dc>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	1e58      	subs	r0, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6859      	ldr	r1, [r3, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	0099      	lsls	r1, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ce:	3301      	adds	r3, #1
 80058d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	6809      	ldr	r1, [r1, #0]
 80058dc:	4313      	orrs	r3, r2
 80058de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69da      	ldr	r2, [r3, #28]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6911      	ldr	r1, [r2, #16]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68d2      	ldr	r2, [r2, #12]
 8005912:	4311      	orrs	r1, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	430b      	orrs	r3, r1
 800591a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	000186a0 	.word	0x000186a0
 8005974:	001e847f 	.word	0x001e847f
 8005978:	003d08ff 	.word	0x003d08ff
 800597c:	431bde83 	.word	0x431bde83
 8005980:	10624dd3 	.word	0x10624dd3

08005984 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af02      	add	r7, sp, #8
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	607a      	str	r2, [r7, #4]
 800598e:	461a      	mov	r2, r3
 8005990:	460b      	mov	r3, r1
 8005992:	817b      	strh	r3, [r7, #10]
 8005994:	4613      	mov	r3, r2
 8005996:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005998:	f7ff f810 	bl	80049bc <HAL_GetTick>
 800599c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	f040 80e0 	bne.w	8005b6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	2319      	movs	r3, #25
 80059b2:	2201      	movs	r2, #1
 80059b4:	4970      	ldr	r1, [pc, #448]	; (8005b78 <HAL_I2C_Master_Transmit+0x1f4>)
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f964 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80059c2:	2302      	movs	r3, #2
 80059c4:	e0d3      	b.n	8005b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_I2C_Master_Transmit+0x50>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e0cc      	b.n	8005b6e <HAL_I2C_Master_Transmit+0x1ea>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d007      	beq.n	80059fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0201 	orr.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2221      	movs	r2, #33	; 0x21
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2210      	movs	r2, #16
 8005a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	893a      	ldrh	r2, [r7, #8]
 8005a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4a50      	ldr	r2, [pc, #320]	; (8005b7c <HAL_I2C_Master_Transmit+0x1f8>)
 8005a3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a3c:	8979      	ldrh	r1, [r7, #10]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f89c 	bl	8005b80 <I2C_MasterRequestWrite>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e08d      	b.n	8005b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005a68:	e066      	b.n	8005b38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	6a39      	ldr	r1, [r7, #32]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f9de 	bl	8005e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00d      	beq.n	8005a96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d107      	bne.n	8005a92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e06b      	b.n	8005b6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d11b      	bne.n	8005b0c <HAL_I2C_Master_Transmit+0x188>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d017      	beq.n	8005b0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	781a      	ldrb	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	6a39      	ldr	r1, [r7, #32]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f9ce 	bl	8005eb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00d      	beq.n	8005b38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d107      	bne.n	8005b34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e01a      	b.n	8005b6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d194      	bne.n	8005a6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e000      	b.n	8005b6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005b6c:	2302      	movs	r3, #2
  }
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	00100002 	.word	0x00100002
 8005b7c:	ffff0000 	.word	0xffff0000

08005b80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d006      	beq.n	8005baa <I2C_MasterRequestWrite+0x2a>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d003      	beq.n	8005baa <I2C_MasterRequestWrite+0x2a>
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ba8:	d108      	bne.n	8005bbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e00b      	b.n	8005bd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	2b12      	cmp	r3, #18
 8005bc2:	d107      	bne.n	8005bd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f84f 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfa:	d103      	bne.n	8005c04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e035      	b.n	8005c74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c10:	d108      	bne.n	8005c24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c12:	897b      	ldrh	r3, [r7, #10]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c20:	611a      	str	r2, [r3, #16]
 8005c22:	e01b      	b.n	8005c5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c24:	897b      	ldrh	r3, [r7, #10]
 8005c26:	11db      	asrs	r3, r3, #7
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f003 0306 	and.w	r3, r3, #6
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	f063 030f 	orn	r3, r3, #15
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	490e      	ldr	r1, [pc, #56]	; (8005c7c <I2C_MasterRequestWrite+0xfc>)
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f875 	bl	8005d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e010      	b.n	8005c74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c52:	897b      	ldrh	r3, [r7, #10]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	4907      	ldr	r1, [pc, #28]	; (8005c80 <I2C_MasterRequestWrite+0x100>)
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f865 	bl	8005d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	00010008 	.word	0x00010008
 8005c80:	00010002 	.word	0x00010002

08005c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	4613      	mov	r3, r2
 8005c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c94:	e025      	b.n	8005ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9c:	d021      	beq.n	8005ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9e:	f7fe fe8d 	bl	80049bc <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d302      	bcc.n	8005cb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d116      	bne.n	8005ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e023      	b.n	8005d2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	0c1b      	lsrs	r3, r3, #16
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d10d      	bne.n	8005d08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	43da      	mvns	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2301      	moveq	r3, #1
 8005d00:	2300      	movne	r3, #0
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	e00c      	b.n	8005d22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	43da      	mvns	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4013      	ands	r3, r2
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bf0c      	ite	eq
 8005d1a:	2301      	moveq	r3, #1
 8005d1c:	2300      	movne	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d0b6      	beq.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d40:	e051      	b.n	8005de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d50:	d123      	bne.n	8005d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	f043 0204 	orr.w	r2, r3, #4
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e046      	b.n	8005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d021      	beq.n	8005de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da2:	f7fe fe0b 	bl	80049bc <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d302      	bcc.n	8005db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d116      	bne.n	8005de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f043 0220 	orr.w	r2, r3, #32
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e020      	b.n	8005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	0c1b      	lsrs	r3, r3, #16
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d10c      	bne.n	8005e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	43da      	mvns	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	bf14      	ite	ne
 8005e02:	2301      	movne	r3, #1
 8005e04:	2300      	moveq	r3, #0
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	e00b      	b.n	8005e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	43da      	mvns	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	4013      	ands	r3, r2
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	bf14      	ite	ne
 8005e1c:	2301      	movne	r3, #1
 8005e1e:	2300      	moveq	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d18d      	bne.n	8005d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e3c:	e02d      	b.n	8005e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f878 	bl	8005f34 <I2C_IsAcknowledgeFailed>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e02d      	b.n	8005eaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e54:	d021      	beq.n	8005e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e56:	f7fe fdb1 	bl	80049bc <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d302      	bcc.n	8005e6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d116      	bne.n	8005e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f043 0220 	orr.w	r2, r3, #32
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e007      	b.n	8005eaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea4:	2b80      	cmp	r3, #128	; 0x80
 8005ea6:	d1ca      	bne.n	8005e3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ebe:	e02d      	b.n	8005f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f837 	bl	8005f34 <I2C_IsAcknowledgeFailed>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e02d      	b.n	8005f2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d021      	beq.n	8005f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed8:	f7fe fd70 	bl	80049bc <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d302      	bcc.n	8005eee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d116      	bne.n	8005f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	f043 0220 	orr.w	r2, r3, #32
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e007      	b.n	8005f2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d1ca      	bne.n	8005ec0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4a:	d11b      	bne.n	8005f84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	f043 0204 	orr.w	r2, r3, #4
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr

08005f90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f92:	b08b      	sub	sp, #44	; 0x2c
 8005f94:	af06      	add	r7, sp, #24
 8005f96:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e0d0      	b.n	8006144 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f008 f85c 	bl	800e074 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f003 fd7d 	bl	8009ac8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]
 8005fd2:	e04c      	b.n	800606e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	440b      	add	r3, r1
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	440b      	add	r3, r1
 8005ffa:	7bfa      	ldrb	r2, [r7, #15]
 8005ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ffe:	7bfa      	ldrb	r2, [r7, #15]
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	b298      	uxth	r0, r3
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	440b      	add	r3, r1
 8006010:	3336      	adds	r3, #54	; 0x36
 8006012:	4602      	mov	r2, r0
 8006014:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	440b      	add	r3, r1
 8006026:	3303      	adds	r3, #3
 8006028:	2200      	movs	r2, #0
 800602a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800602c:	7bfa      	ldrb	r2, [r7, #15]
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	440b      	add	r3, r1
 800603a:	3338      	adds	r3, #56	; 0x38
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006040:	7bfa      	ldrb	r2, [r7, #15]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	440b      	add	r3, r1
 800604e:	333c      	adds	r3, #60	; 0x3c
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006054:	7bfa      	ldrb	r2, [r7, #15]
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	440b      	add	r3, r1
 8006062:	3340      	adds	r3, #64	; 0x40
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	3301      	adds	r3, #1
 800606c:	73fb      	strb	r3, [r7, #15]
 800606e:	7bfa      	ldrb	r2, [r7, #15]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	d3ad      	bcc.n	8005fd4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
 800607c:	e044      	b.n	8006108 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	440b      	add	r3, r1
 800608c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006094:	7bfa      	ldrb	r2, [r7, #15]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	440b      	add	r3, r1
 80060a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060aa:	7bfa      	ldrb	r2, [r7, #15]
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	440b      	add	r3, r1
 80060b8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80060bc:	2200      	movs	r2, #0
 80060be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060c0:	7bfa      	ldrb	r2, [r7, #15]
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	440b      	add	r3, r1
 80060ce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80060d6:	7bfa      	ldrb	r2, [r7, #15]
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	440b      	add	r3, r1
 80060e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80060ec:	7bfa      	ldrb	r2, [r7, #15]
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	440b      	add	r3, r1
 80060fa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	3301      	adds	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]
 8006108:	7bfa      	ldrb	r2, [r7, #15]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	429a      	cmp	r2, r3
 8006110:	d3b5      	bcc.n	800607e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	687e      	ldr	r6, [r7, #4]
 800611a:	466d      	mov	r5, sp
 800611c:	f106 0410 	add.w	r4, r6, #16
 8006120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	602b      	str	r3, [r5, #0]
 8006128:	1d33      	adds	r3, r6, #4
 800612a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800612c:	6838      	ldr	r0, [r7, #0]
 800612e:	f003 fce5 	bl	8009afc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800614c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_PCD_Start+0x16>
 800615e:	2302      	movs	r3, #2
 8006160:	e016      	b.n	8006190 <HAL_PCD_Start+0x44>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f003 fc94 	bl	8009a9c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006174:	2101      	movs	r1, #1
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f007 ff5e 	bl	800e038 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f006 f979 	bl	800c478 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f006 f971 	bl	800c48c <USB_ReadInterrupts>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b4:	d102      	bne.n	80061bc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 faf5 	bl	80067a6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f006 f963 	bl	800c48c <USB_ReadInterrupts>
 80061c6:	4603      	mov	r3, r0
 80061c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d0:	d112      	bne.n	80061f8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061da:	b29a      	uxth	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e4:	b292      	uxth	r2, r2
 80061e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f007 ffbd 	bl	800e16a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80061f0:	2100      	movs	r1, #0
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f8c7 	bl	8006386 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f006 f945 	bl	800c48c <USB_ReadInterrupts>
 8006202:	4603      	mov	r3, r0
 8006204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800620c:	d10b      	bne.n	8006226 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006220:	b292      	uxth	r2, r2
 8006222:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f006 f92e 	bl	800c48c <USB_ReadInterrupts>
 8006230:	4603      	mov	r3, r0
 8006232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800623a:	d10b      	bne.n	8006254 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006244:	b29a      	uxth	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800624e:	b292      	uxth	r2, r2
 8006250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f006 f917 	bl	800c48c <USB_ReadInterrupts>
 800625e:	4603      	mov	r3, r0
 8006260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006268:	d126      	bne.n	80062b8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006272:	b29a      	uxth	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0204 	bic.w	r2, r2, #4
 800627c:	b292      	uxth	r2, r2
 800627e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0208 	bic.w	r2, r2, #8
 8006294:	b292      	uxth	r2, r2
 8006296:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f007 ff9e 	bl	800e1dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062b2:	b292      	uxth	r2, r2
 80062b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4618      	mov	r0, r3
 80062be:	f006 f8e5 	bl	800c48c <USB_ReadInterrupts>
 80062c2:	4603      	mov	r3, r0
 80062c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062cc:	d126      	bne.n	800631c <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0208 	orr.w	r2, r2, #8
 80062e0:	b292      	uxth	r2, r2
 80062e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062f8:	b292      	uxth	r2, r2
 80062fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006306:	b29a      	uxth	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0204 	orr.w	r2, r2, #4
 8006310:	b292      	uxth	r2, r2
 8006312:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f007 ff46 	bl	800e1a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f006 f8b3 	bl	800c48c <USB_ReadInterrupts>
 8006326:	4603      	mov	r3, r0
 8006328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800632c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006330:	d10e      	bne.n	8006350 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800633a:	b29a      	uxth	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006344:	b292      	uxth	r2, r2
 8006346:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f007 feff 	bl	800e14e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f006 f899 	bl	800c48c <USB_ReadInterrupts>
 800635a:	4603      	mov	r3, r0
 800635c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006364:	d10b      	bne.n	800637e <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800636e:	b29a      	uxth	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006378:	b292      	uxth	r2, r2
 800637a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_PCD_SetAddress+0x1a>
 800639c:	2302      	movs	r3, #2
 800639e:	e013      	b.n	80063c8 <HAL_PCD_SetAddress+0x42>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	78fa      	ldrb	r2, [r7, #3]
 80063b6:	4611      	mov	r1, r2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f006 f84a 	bl	800c452 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	4608      	mov	r0, r1
 80063da:	4611      	mov	r1, r2
 80063dc:	461a      	mov	r2, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	70fb      	strb	r3, [r7, #3]
 80063e2:	460b      	mov	r3, r1
 80063e4:	803b      	strh	r3, [r7, #0]
 80063e6:	4613      	mov	r3, r2
 80063e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	da0e      	bge.n	8006414 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	4413      	add	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2201      	movs	r2, #1
 8006410:	705a      	strb	r2, [r3, #1]
 8006412:	e00e      	b.n	8006432 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	f003 0207 	and.w	r2, r3, #7
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4413      	add	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	b2da      	uxtb	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800643e:	883a      	ldrh	r2, [r7, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	78ba      	ldrb	r2, [r7, #2]
 8006448:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	b29a      	uxth	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800645c:	78bb      	ldrb	r3, [r7, #2]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d102      	bne.n	8006468 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_PCD_EP_Open+0xa6>
 8006472:	2302      	movs	r3, #2
 8006474:	e00e      	b.n	8006494 <HAL_PCD_EP_Open+0xc4>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	4618      	mov	r0, r3
 8006486:	f003 fb59 	bl	8009b3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006492:	7afb      	ldrb	r3, [r7, #11]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	da0e      	bge.n	80064ce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	705a      	strb	r2, [r3, #1]
 80064cc:	e00e      	b.n	80064ec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	f003 0207 	and.w	r2, r3, #7
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_PCD_EP_Close+0x6a>
 8006502:	2302      	movs	r3, #2
 8006504:	e00e      	b.n	8006524 <HAL_PCD_EP_Close+0x88>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68f9      	ldr	r1, [r7, #12]
 8006514:	4618      	mov	r0, r3
 8006516:	f003 fe7b 	bl	800a210 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	607a      	str	r2, [r7, #4]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	460b      	mov	r3, r1
 800653a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800653c:	7afb      	ldrb	r3, [r7, #11]
 800653e:	f003 0207 	and.w	r2, r3, #7
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2200      	movs	r2, #0
 8006564:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2200      	movs	r2, #0
 800656a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800656c:	7afb      	ldrb	r3, [r7, #11]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	b2da      	uxtb	r2, r3
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006578:	7afb      	ldrb	r3, [r7, #11]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6979      	ldr	r1, [r7, #20]
 8006588:	4618      	mov	r0, r3
 800658a:	f004 f82d 	bl	800a5e8 <USB_EPStartXfer>
 800658e:	e005      	b.n	800659c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6979      	ldr	r1, [r7, #20]
 8006596:	4618      	mov	r0, r3
 8006598:	f004 f826 	bl	800a5e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	f003 0207 	and.w	r2, r3, #7
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	440b      	add	r3, r1
 80065c4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80065c8:	681b      	ldr	r3, [r3, #0]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr

080065d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	460b      	mov	r3, r1
 80065e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065e4:	7afb      	ldrb	r3, [r7, #11]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2200      	movs	r2, #0
 8006618:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2201      	movs	r2, #1
 800661e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006620:	7afb      	ldrb	r3, [r7, #11]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	b2da      	uxtb	r2, r3
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800662c:	7afb      	ldrb	r3, [r7, #11]
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6979      	ldr	r1, [r7, #20]
 800663c:	4618      	mov	r0, r3
 800663e:	f003 ffd3 	bl	800a5e8 <USB_EPStartXfer>
 8006642:	e005      	b.n	8006650 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6979      	ldr	r1, [r7, #20]
 800664a:	4618      	mov	r0, r3
 800664c:	f003 ffcc 	bl	800a5e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	f003 0207 	and.w	r2, r3, #7
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	429a      	cmp	r2, r3
 8006672:	d901      	bls.n	8006678 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e03e      	b.n	80066f6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800667c:	2b00      	cmp	r3, #0
 800667e:	da0e      	bge.n	800669e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	4413      	add	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	705a      	strb	r2, [r3, #1]
 800669c:	e00c      	b.n	80066b8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800669e:	78fa      	ldrb	r2, [r7, #3]
 80066a0:	4613      	mov	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	4413      	add	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_PCD_EP_SetStall+0x7e>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e00e      	b.n	80066f6 <HAL_PCD_EP_SetStall+0x9c>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68f9      	ldr	r1, [r7, #12]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f005 fdb6 	bl	800c258 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b084      	sub	sp, #16
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	f003 020f 	and.w	r2, r3, #15
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	429a      	cmp	r2, r3
 8006716:	d901      	bls.n	800671c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e040      	b.n	800679e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800671c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006720:	2b00      	cmp	r3, #0
 8006722:	da0e      	bge.n	8006742 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	4413      	add	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2201      	movs	r2, #1
 800673e:	705a      	strb	r2, [r3, #1]
 8006740:	e00e      	b.n	8006760 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	f003 0207 	and.w	r2, r3, #7
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	4413      	add	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	b2da      	uxtb	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_PCD_EP_ClrStall+0x82>
 800677c:	2302      	movs	r3, #2
 800677e:	e00e      	b.n	800679e <HAL_PCD_EP_ClrStall+0xa0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68f9      	ldr	r1, [r7, #12]
 800678e:	4618      	mov	r0, r3
 8006790:	f005 fdb2 	bl	800c2f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b08e      	sub	sp, #56	; 0x38
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80067ae:	e2ec      	b.n	8006d8a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067b8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80067ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80067c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 8161 	bne.w	8006a92 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80067d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d152      	bne.n	8006880 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	81fb      	strh	r3, [r7, #14]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	89fb      	ldrh	r3, [r7, #14]
 80067f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3328      	adds	r3, #40	; 0x28
 8006802:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680c:	b29b      	uxth	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	4413      	add	r3, r2
 8006818:	3302      	adds	r3, #2
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	695a      	ldr	r2, [r3, #20]
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	441a      	add	r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800683e:	2100      	movs	r1, #0
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f007 fc6a 	bl	800e11a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 829b 	beq.w	8006d8a <PCD_EP_ISR_Handler+0x5e4>
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f040 8296 	bne.w	8006d8a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800686a:	b2da      	uxtb	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	b292      	uxth	r2, r2
 8006872:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800687e:	e284      	b.n	8006d8a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006890:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006896:	2b00      	cmp	r3, #0
 8006898:	d034      	beq.n	8006904 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	4413      	add	r3, r2
 80068ae:	3306      	adds	r3, #6
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f005 fe2b 	bl	800c534 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80068ea:	4013      	ands	r3, r2
 80068ec:	823b      	strh	r3, [r7, #16]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	8a3a      	ldrh	r2, [r7, #16]
 80068f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068f8:	b292      	uxth	r2, r2
 80068fa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f007 fbdf 	bl	800e0c0 <HAL_PCD_SetupStageCallback>
 8006902:	e242      	b.n	8006d8a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006904:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006908:	2b00      	cmp	r3, #0
 800690a:	f280 823e 	bge.w	8006d8a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29a      	uxth	r2, r3
 8006916:	f640 738f 	movw	r3, #3983	; 0xf8f
 800691a:	4013      	ands	r3, r2
 800691c:	83bb      	strh	r3, [r7, #28]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	8bba      	ldrh	r2, [r7, #28]
 8006924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006928:	b292      	uxth	r2, r2
 800692a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006934:	b29b      	uxth	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	4413      	add	r3, r2
 8006940:	3306      	adds	r3, #6
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d019      	beq.n	8006994 <PCD_EP_ISR_Handler+0x1ee>
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d015      	beq.n	8006994 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	6959      	ldr	r1, [r3, #20]
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006978:	b29b      	uxth	r3, r3
 800697a:	f005 fddb 	bl	800c534 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	695a      	ldr	r2, [r3, #20]
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	441a      	add	r2, r3
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800698c:	2100      	movs	r1, #0
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f007 fba8 	bl	800e0e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f040 81f2 	bne.w	8006d8a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	4413      	add	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d112      	bne.n	80069f4 <PCD_EP_ISR_Handler+0x24e>
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069d8:	b29a      	uxth	r2, r3
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	801a      	strh	r2, [r3, #0]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	801a      	strh	r2, [r3, #0]
 80069f2:	e02f      	b.n	8006a54 <PCD_EP_ISR_Handler+0x2ae>
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b3e      	cmp	r3, #62	; 0x3e
 80069fa:	d813      	bhi.n	8006a24 <PCD_EP_ISR_Handler+0x27e>
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	633b      	str	r3, [r7, #48]	; 0x30
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <PCD_EP_ISR_Handler+0x270>
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	3301      	adds	r3, #1
 8006a14:	633b      	str	r3, [r7, #48]	; 0x30
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	029b      	lsls	r3, r3, #10
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	801a      	strh	r2, [r3, #0]
 8006a22:	e017      	b.n	8006a54 <PCD_EP_ISR_Handler+0x2ae>
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 031f 	and.w	r3, r3, #31
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <PCD_EP_ISR_Handler+0x298>
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	029b      	lsls	r3, r3, #10
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a64:	827b      	strh	r3, [r7, #18]
 8006a66:	8a7b      	ldrh	r3, [r7, #18]
 8006a68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a6c:	827b      	strh	r3, [r7, #18]
 8006a6e:	8a7b      	ldrh	r3, [r7, #18]
 8006a70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a74:	827b      	strh	r3, [r7, #18]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	8a7b      	ldrh	r3, [r7, #18]
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]
 8006a90:	e17b      	b.n	8006d8a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006aa4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f280 80ea 	bge.w	8006c82 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006adc:	b292      	uxth	r2, r2
 8006ade:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006ae0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	7b1b      	ldrb	r3, [r3, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d122      	bne.n	8006b44 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	4413      	add	r3, r2
 8006b12:	3306      	adds	r3, #6
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6812      	ldr	r2, [r2, #0]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b26:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006b28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 8087 	beq.w	8006c3e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	6959      	ldr	r1, [r3, #20]
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	88da      	ldrh	r2, [r3, #6]
 8006b3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b3e:	f005 fcf9 	bl	800c534 <USB_ReadPMA>
 8006b42:	e07c      	b.n	8006c3e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	78db      	ldrb	r3, [r3, #3]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d108      	bne.n	8006b5e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006b4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b4e:	461a      	mov	r2, r3
 8006b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f927 	bl	8006da6 <HAL_PCD_EP_DB_Receive>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006b5c:	e06f      	b.n	8006c3e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b78:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d021      	beq.n	8006bfc <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	4413      	add	r3, r2
 8006bcc:	3302      	adds	r3, #2
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6812      	ldr	r2, [r2, #0]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006be0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006be2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d02a      	beq.n	8006c3e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	6959      	ldr	r1, [r3, #20]
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	891a      	ldrh	r2, [r3, #8]
 8006bf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bf6:	f005 fc9d 	bl	800c534 <USB_ReadPMA>
 8006bfa:	e020      	b.n	8006c3e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	461a      	mov	r2, r3
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	4413      	add	r3, r2
 8006c10:	3306      	adds	r3, #6
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6812      	ldr	r2, [r2, #0]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c24:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006c26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d008      	beq.n	8006c3e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	6959      	ldr	r1, [r3, #20]
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	895a      	ldrh	r2, [r3, #10]
 8006c38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c3a:	f005 fc7b 	bl	800c534 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	69da      	ldr	r2, [r3, #28]
 8006c42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c44:	441a      	add	r2, r3
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	695a      	ldr	r2, [r3, #20]
 8006c4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c50:	441a      	add	r2, r3
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <PCD_EP_ISR_Handler+0x4c2>
 8006c5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d206      	bcs.n	8006c76 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f007 fa38 	bl	800e0e4 <HAL_PCD_DataOutStageCallback>
 8006c74:	e005      	b.n	8006c82 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f003 fcb3 	bl	800a5e8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006c82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d07e      	beq.n	8006d8a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8006c8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cba:	843b      	strh	r3, [r7, #32]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	8c3b      	ldrh	r3, [r7, #32]
 8006ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	78db      	ldrb	r3, [r3, #3]
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d00c      	beq.n	8006cfa <PCD_EP_ISR_Handler+0x554>
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	78db      	ldrb	r3, [r3, #3]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d146      	bne.n	8006d7e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006cf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d141      	bne.n	8006d7e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	3302      	adds	r3, #2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6812      	ldr	r2, [r2, #0]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d22:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	699a      	ldr	r2, [r3, #24]
 8006d28:	8bfb      	ldrh	r3, [r7, #30]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d906      	bls.n	8006d3c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	8bfb      	ldrh	r3, [r7, #30]
 8006d34:	1ad2      	subs	r2, r2, r3
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	619a      	str	r2, [r3, #24]
 8006d3a:	e002      	b.n	8006d42 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	2200      	movs	r2, #0
 8006d40:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f007 f9e2 	bl	800e11a <HAL_PCD_DataInStageCallback>
 8006d56:	e018      	b.n	8006d8a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	695a      	ldr	r2, [r3, #20]
 8006d5c:	8bfb      	ldrh	r3, [r7, #30]
 8006d5e:	441a      	add	r2, r3
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	8bfb      	ldrh	r3, [r7, #30]
 8006d6a:	441a      	add	r2, r3
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d76:	4618      	mov	r0, r3
 8006d78:	f003 fc36 	bl	800a5e8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006d7c:	e005      	b.n	8006d8a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006d7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d80:	461a      	mov	r2, r3
 8006d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f91b 	bl	8006fc0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	b21b      	sxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f6ff ad0a 	blt.w	80067b0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3738      	adds	r7, #56	; 0x38
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b088      	sub	sp, #32
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	4613      	mov	r3, r2
 8006db2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d07e      	beq.n	8006ebc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3302      	adds	r3, #2
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	6812      	ldr	r2, [r2, #0]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006de6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	8b7b      	ldrh	r3, [r7, #26]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d306      	bcc.n	8006e00 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	8b7b      	ldrh	r3, [r7, #26]
 8006df8:	1ad2      	subs	r2, r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	619a      	str	r2, [r3, #24]
 8006dfe:	e002      	b.n	8006e06 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d123      	bne.n	8006e56 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e28:	833b      	strh	r3, [r7, #24]
 8006e2a:	8b3b      	ldrh	r3, [r7, #24]
 8006e2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e30:	833b      	strh	r3, [r7, #24]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	441a      	add	r2, r3
 8006e40:	8b3b      	ldrh	r3, [r7, #24]
 8006e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01f      	beq.n	8006ea0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	82fb      	strh	r3, [r7, #22]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	441a      	add	r2, r3
 8006e8a:	8afb      	ldrh	r3, [r7, #22]
 8006e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006ea0:	8b7b      	ldrh	r3, [r7, #26]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8087 	beq.w	8006fb6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6959      	ldr	r1, [r3, #20]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	891a      	ldrh	r2, [r3, #8]
 8006eb4:	8b7b      	ldrh	r3, [r7, #26]
 8006eb6:	f005 fb3d 	bl	800c534 <USB_ReadPMA>
 8006eba:	e07c      	b.n	8006fb6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	4413      	add	r3, r2
 8006ed0:	3306      	adds	r3, #6
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ee4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	699a      	ldr	r2, [r3, #24]
 8006eea:	8b7b      	ldrh	r3, [r7, #26]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d306      	bcc.n	8006efe <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	8b7b      	ldrh	r3, [r7, #26]
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	619a      	str	r2, [r3, #24]
 8006efc:	e002      	b.n	8006f04 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d123      	bne.n	8006f54 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	83fb      	strh	r3, [r7, #30]
 8006f28:	8bfb      	ldrh	r3, [r7, #30]
 8006f2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f2e:	83fb      	strh	r3, [r7, #30]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	441a      	add	r2, r3
 8006f3e:	8bfb      	ldrh	r3, [r7, #30]
 8006f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d11f      	bne.n	8006f9e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f78:	83bb      	strh	r3, [r7, #28]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	441a      	add	r2, r3
 8006f88:	8bbb      	ldrh	r3, [r7, #28]
 8006f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006f9e:	8b7b      	ldrh	r3, [r7, #26]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d008      	beq.n	8006fb6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6818      	ldr	r0, [r3, #0]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	6959      	ldr	r1, [r3, #20]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	895a      	ldrh	r2, [r3, #10]
 8006fb0:	8b7b      	ldrh	r3, [r7, #26]
 8006fb2:	f005 fabf 	bl	800c534 <USB_ReadPMA>
    }
  }

  return count;
 8006fb6:	8b7b      	ldrh	r3, [r7, #26]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3720      	adds	r7, #32
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b0a2      	sub	sp, #136	; 0x88
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006fce:	88fb      	ldrh	r3, [r7, #6]
 8006fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 81c7 	beq.w	8007368 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	4413      	add	r3, r2
 8006fee:	3302      	adds	r3, #2
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007002:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800700e:	429a      	cmp	r2, r3
 8007010:	d907      	bls.n	8007022 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	699a      	ldr	r2, [r3, #24]
 8007016:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800701a:	1ad2      	subs	r2, r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	619a      	str	r2, [r3, #24]
 8007020:	e002      	b.n	8007028 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f040 80b9 	bne.w	80071a4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d126      	bne.n	8007088 <HAL_PCD_EP_DB_Transmit+0xc8>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007048:	b29b      	uxth	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	4413      	add	r3, r2
 8007050:	62bb      	str	r3, [r7, #40]	; 0x28
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	011a      	lsls	r2, r3, #4
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	4413      	add	r3, r2
 800705c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800706c:	b29a      	uxth	r2, r3
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800707c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007080:	b29a      	uxth	r2, r3
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	e01a      	b.n	80070be <HAL_PCD_EP_DB_Transmit+0xfe>
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d116      	bne.n	80070be <HAL_PCD_EP_DB_Transmit+0xfe>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	633b      	str	r3, [r7, #48]	; 0x30
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709e:	b29b      	uxth	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	4413      	add	r3, r2
 80070a6:	633b      	str	r3, [r7, #48]	; 0x30
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	011a      	lsls	r2, r3, #4
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	4413      	add	r3, r2
 80070b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	2200      	movs	r2, #0
 80070bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	623b      	str	r3, [r7, #32]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	785b      	ldrb	r3, [r3, #1]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d126      	bne.n	800711a <HAL_PCD_EP_DB_Transmit+0x15a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070da:	b29b      	uxth	r3, r3
 80070dc:	461a      	mov	r2, r3
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	4413      	add	r3, r2
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	011a      	lsls	r2, r3, #4
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	4413      	add	r3, r2
 80070ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070fe:	b29a      	uxth	r2, r3
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007112:	b29a      	uxth	r2, r3
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	801a      	strh	r2, [r3, #0]
 8007118:	e017      	b.n	800714a <HAL_PCD_EP_DB_Transmit+0x18a>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d113      	bne.n	800714a <HAL_PCD_EP_DB_Transmit+0x18a>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800712a:	b29b      	uxth	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	4413      	add	r3, r2
 8007132:	623b      	str	r3, [r7, #32]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	011a      	lsls	r2, r3, #4
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	4413      	add	r3, r2
 800713e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2200      	movs	r2, #0
 8007148:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	4619      	mov	r1, r3
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f006 ffe2 	bl	800e11a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007156:	88fb      	ldrh	r3, [r7, #6]
 8007158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 82d4 	beq.w	800770a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717c:	827b      	strh	r3, [r7, #18]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	441a      	add	r2, r3
 800718c:	8a7b      	ldrh	r3, [r7, #18]
 800718e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007196:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800719a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719e:	b29b      	uxth	r3, r3
 80071a0:	8013      	strh	r3, [r2, #0]
 80071a2:	e2b2      	b.n	800770a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80071a4:	88fb      	ldrh	r3, [r7, #6]
 80071a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d021      	beq.n	80071f2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	461a      	mov	r2, r3
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	441a      	add	r2, r3
 80071da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80071de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	f040 8286 	bne.w	800770a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	695a      	ldr	r2, [r3, #20]
 8007202:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007206:	441a      	add	r2, r3
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007214:	441a      	add	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6a1a      	ldr	r2, [r3, #32]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	429a      	cmp	r2, r3
 8007224:	d309      	bcc.n	800723a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	6a1a      	ldr	r2, [r3, #32]
 8007230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007232:	1ad2      	subs	r2, r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	621a      	str	r2, [r3, #32]
 8007238:	e015      	b.n	8007266 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d107      	bne.n	8007252 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8007242:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007246:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007250:	e009      	b.n	8007266 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2200      	movs	r2, #0
 8007264:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	785b      	ldrb	r3, [r3, #1]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d155      	bne.n	800731a <HAL_PCD_EP_DB_Transmit+0x35a>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	63bb      	str	r3, [r7, #56]	; 0x38
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800727c:	b29b      	uxth	r3, r3
 800727e:	461a      	mov	r2, r3
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	4413      	add	r3, r2
 8007284:	63bb      	str	r3, [r7, #56]	; 0x38
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	011a      	lsls	r2, r3, #4
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	4413      	add	r3, r2
 8007290:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
 8007296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007298:	2b00      	cmp	r3, #0
 800729a:	d112      	bne.n	80072c2 <HAL_PCD_EP_DB_Transmit+0x302>
 800729c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	e047      	b.n	8007352 <HAL_PCD_EP_DB_Transmit+0x392>
 80072c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c4:	2b3e      	cmp	r3, #62	; 0x3e
 80072c6:	d811      	bhi.n	80072ec <HAL_PCD_EP_DB_Transmit+0x32c>
 80072c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80072ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <HAL_PCD_EP_DB_Transmit+0x31e>
 80072d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072da:	3301      	adds	r3, #1
 80072dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80072de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	029b      	lsls	r3, r3, #10
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e8:	801a      	strh	r2, [r3, #0]
 80072ea:	e032      	b.n	8007352 <HAL_PCD_EP_DB_Transmit+0x392>
 80072ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80072f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d102      	bne.n	8007302 <HAL_PCD_EP_DB_Transmit+0x342>
 80072fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072fe:	3b01      	subs	r3, #1
 8007300:	64bb      	str	r3, [r7, #72]	; 0x48
 8007302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007304:	b29b      	uxth	r3, r3
 8007306:	029b      	lsls	r3, r3, #10
 8007308:	b29b      	uxth	r3, r3
 800730a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007312:	b29a      	uxth	r2, r3
 8007314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007316:	801a      	strh	r2, [r3, #0]
 8007318:	e01b      	b.n	8007352 <HAL_PCD_EP_DB_Transmit+0x392>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	785b      	ldrb	r3, [r3, #1]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d117      	bne.n	8007352 <HAL_PCD_EP_DB_Transmit+0x392>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	643b      	str	r3, [r7, #64]	; 0x40
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007330:	b29b      	uxth	r3, r3
 8007332:	461a      	mov	r2, r3
 8007334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007336:	4413      	add	r3, r2
 8007338:	643b      	str	r3, [r7, #64]	; 0x40
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	011a      	lsls	r2, r3, #4
 8007340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007342:	4413      	add	r3, r2
 8007344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800734a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800734c:	b29a      	uxth	r2, r3
 800734e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007350:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6818      	ldr	r0, [r3, #0]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6959      	ldr	r1, [r3, #20]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	891a      	ldrh	r2, [r3, #8]
 800735e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007360:	b29b      	uxth	r3, r3
 8007362:	f005 f8a2 	bl	800c4aa <USB_WritePMA>
 8007366:	e1d0      	b.n	800770a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007370:	b29b      	uxth	r3, r3
 8007372:	461a      	mov	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	4413      	add	r3, r2
 800737c:	3306      	adds	r3, #6
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	6812      	ldr	r2, [r2, #0]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007390:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800739c:	429a      	cmp	r2, r3
 800739e:	d307      	bcc.n	80073b0 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	699a      	ldr	r2, [r3, #24]
 80073a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073a8:	1ad2      	subs	r2, r2, r3
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	619a      	str	r2, [r3, #24]
 80073ae:	e002      	b.n	80073b6 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2200      	movs	r2, #0
 80073b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 80c4 	bne.w	8007548 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	785b      	ldrb	r3, [r3, #1]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d126      	bne.n	8007416 <HAL_PCD_EP_DB_Transmit+0x456>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073dc:	4413      	add	r3, r2
 80073de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	011a      	lsls	r2, r3, #4
 80073e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e8:	4413      	add	r3, r2
 80073ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80073f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073fe:	801a      	strh	r2, [r3, #0]
 8007400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740e:	b29a      	uxth	r2, r3
 8007410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007412:	801a      	strh	r2, [r3, #0]
 8007414:	e01a      	b.n	800744c <HAL_PCD_EP_DB_Transmit+0x48c>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	785b      	ldrb	r3, [r3, #1]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d116      	bne.n	800744c <HAL_PCD_EP_DB_Transmit+0x48c>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	677b      	str	r3, [r7, #116]	; 0x74
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800742c:	b29b      	uxth	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007432:	4413      	add	r3, r2
 8007434:	677b      	str	r3, [r7, #116]	; 0x74
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	011a      	lsls	r2, r3, #4
 800743c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800743e:	4413      	add	r3, r2
 8007440:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007444:	673b      	str	r3, [r7, #112]	; 0x70
 8007446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007448:	2200      	movs	r2, #0
 800744a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	67bb      	str	r3, [r7, #120]	; 0x78
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d12f      	bne.n	80074ba <HAL_PCD_EP_DB_Transmit+0x4fa>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746a:	b29b      	uxth	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007472:	4413      	add	r3, r2
 8007474:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	011a      	lsls	r2, r3, #4
 800747e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007482:	4413      	add	r3, r2
 8007484:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800748c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007498:	b29a      	uxth	r2, r3
 800749a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800749e:	801a      	strh	r2, [r3, #0]
 80074a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074b6:	801a      	strh	r2, [r3, #0]
 80074b8:	e017      	b.n	80074ea <HAL_PCD_EP_DB_Transmit+0x52a>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	785b      	ldrb	r3, [r3, #1]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d113      	bne.n	80074ea <HAL_PCD_EP_DB_Transmit+0x52a>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074d0:	4413      	add	r3, r2
 80074d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	011a      	lsls	r2, r3, #4
 80074da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074dc:	4413      	add	r3, r2
 80074de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80074e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074e6:	2200      	movs	r2, #0
 80074e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	4619      	mov	r1, r3
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f006 fe12 	bl	800e11a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f040 8104 	bne.w	800770a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800753a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800753e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007542:	b29b      	uxth	r3, r3
 8007544:	8013      	strh	r3, [r2, #0]
 8007546:	e0e0      	b.n	800770a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007548:	88fb      	ldrh	r3, [r7, #6]
 800754a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d121      	bne.n	8007596 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	881b      	ldrh	r3, [r3, #0]
 8007562:	b29b      	uxth	r3, r3
 8007564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	441a      	add	r2, r3
 800757e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800758e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007592:	b29b      	uxth	r3, r3
 8007594:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800759c:	2b01      	cmp	r3, #1
 800759e:	f040 80b4 	bne.w	800770a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	695a      	ldr	r2, [r3, #20]
 80075a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075aa:	441a      	add	r2, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	69da      	ldr	r2, [r3, #28]
 80075b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075b8:	441a      	add	r2, r3
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	6a1a      	ldr	r2, [r3, #32]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d309      	bcc.n	80075de <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	6a1a      	ldr	r2, [r3, #32]
 80075d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d6:	1ad2      	subs	r2, r2, r3
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	621a      	str	r2, [r3, #32]
 80075dc:	e015      	b.n	800760a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d107      	bne.n	80075f6 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80075e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80075f4:	e009      	b.n	800760a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2200      	movs	r2, #0
 8007600:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	667b      	str	r3, [r7, #100]	; 0x64
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d155      	bne.n	80076c4 <HAL_PCD_EP_DB_Transmit+0x704>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007626:	b29b      	uxth	r3, r3
 8007628:	461a      	mov	r2, r3
 800762a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800762c:	4413      	add	r3, r2
 800762e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	011a      	lsls	r2, r3, #4
 8007636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007638:	4413      	add	r3, r2
 800763a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800763e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007642:	2b00      	cmp	r3, #0
 8007644:	d112      	bne.n	800766c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007650:	b29a      	uxth	r2, r3
 8007652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007664:	b29a      	uxth	r2, r3
 8007666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007668:	801a      	strh	r2, [r3, #0]
 800766a:	e044      	b.n	80076f6 <HAL_PCD_EP_DB_Transmit+0x736>
 800766c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800766e:	2b3e      	cmp	r3, #62	; 0x3e
 8007670:	d811      	bhi.n	8007696 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007674:	085b      	lsrs	r3, r3, #1
 8007676:	657b      	str	r3, [r7, #84]	; 0x54
 8007678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8007682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007684:	3301      	adds	r3, #1
 8007686:	657b      	str	r3, [r7, #84]	; 0x54
 8007688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800768a:	b29b      	uxth	r3, r3
 800768c:	029b      	lsls	r3, r3, #10
 800768e:	b29a      	uxth	r2, r3
 8007690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007692:	801a      	strh	r2, [r3, #0]
 8007694:	e02f      	b.n	80076f6 <HAL_PCD_EP_DB_Transmit+0x736>
 8007696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007698:	095b      	lsrs	r3, r3, #5
 800769a:	657b      	str	r3, [r7, #84]	; 0x54
 800769c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d102      	bne.n	80076ac <HAL_PCD_EP_DB_Transmit+0x6ec>
 80076a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076a8:	3b01      	subs	r3, #1
 80076aa:	657b      	str	r3, [r7, #84]	; 0x54
 80076ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	029b      	lsls	r3, r3, #10
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076bc:	b29a      	uxth	r2, r3
 80076be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076c0:	801a      	strh	r2, [r3, #0]
 80076c2:	e018      	b.n	80076f6 <HAL_PCD_EP_DB_Transmit+0x736>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d114      	bne.n	80076f6 <HAL_PCD_EP_DB_Transmit+0x736>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	461a      	mov	r2, r3
 80076d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076da:	4413      	add	r3, r2
 80076dc:	667b      	str	r3, [r7, #100]	; 0x64
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	011a      	lsls	r2, r3, #4
 80076e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076e6:	4413      	add	r3, r2
 80076e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076ec:	663b      	str	r3, [r7, #96]	; 0x60
 80076ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076f4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6959      	ldr	r1, [r3, #20]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	895a      	ldrh	r2, [r3, #10]
 8007702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007704:	b29b      	uxth	r3, r3
 8007706:	f004 fed0 	bl	800c4aa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29b      	uxth	r3, r3
 800771c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007724:	823b      	strh	r3, [r7, #16]
 8007726:	8a3b      	ldrh	r3, [r7, #16]
 8007728:	f083 0310 	eor.w	r3, r3, #16
 800772c:	823b      	strh	r3, [r7, #16]
 800772e:	8a3b      	ldrh	r3, [r7, #16]
 8007730:	f083 0320 	eor.w	r3, r3, #32
 8007734:	823b      	strh	r3, [r7, #16]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	441a      	add	r2, r3
 8007744:	8a3b      	ldrh	r3, [r7, #16]
 8007746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800774a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800774e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007756:	b29b      	uxth	r3, r3
 8007758:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3788      	adds	r7, #136	; 0x88
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	460b      	mov	r3, r1
 8007770:	817b      	strh	r3, [r7, #10]
 8007772:	4613      	mov	r3, r2
 8007774:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007776:	897b      	ldrh	r3, [r7, #10]
 8007778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00b      	beq.n	800779a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007782:	897b      	ldrh	r3, [r7, #10]
 8007784:	f003 0307 	and.w	r3, r3, #7
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4413      	add	r3, r2
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	e009      	b.n	80077ae <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800779a:	897a      	ldrh	r2, [r7, #10]
 800779c:	4613      	mov	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4413      	add	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80077ae:	893b      	ldrh	r3, [r7, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d107      	bne.n	80077c4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2200      	movs	r2, #0
 80077b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	b29a      	uxth	r2, r3
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	80da      	strh	r2, [r3, #6]
 80077c2:	e00b      	b.n	80077dc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2201      	movs	r2, #1
 80077c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	0c1b      	lsrs	r3, r3, #16
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr

080077e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e31d      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077fa:	4b94      	ldr	r3, [pc, #592]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 030c 	and.w	r3, r3, #12
 8007802:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007804:	4b91      	ldr	r3, [pc, #580]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800780c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d07b      	beq.n	8007912 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	2b08      	cmp	r3, #8
 800781e:	d006      	beq.n	800782e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	2b0c      	cmp	r3, #12
 8007824:	d10f      	bne.n	8007846 <HAL_RCC_OscConfig+0x5e>
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782c:	d10b      	bne.n	8007846 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800782e:	4b87      	ldr	r3, [pc, #540]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d06a      	beq.n	8007910 <HAL_RCC_OscConfig+0x128>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d166      	bne.n	8007910 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e2f7      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d106      	bne.n	800785c <HAL_RCC_OscConfig+0x74>
 800784e:	4b7f      	ldr	r3, [pc, #508]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a7e      	ldr	r2, [pc, #504]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	e02d      	b.n	80078b8 <HAL_RCC_OscConfig+0xd0>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10c      	bne.n	800787e <HAL_RCC_OscConfig+0x96>
 8007864:	4b79      	ldr	r3, [pc, #484]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a78      	ldr	r2, [pc, #480]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 800786a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	4b76      	ldr	r3, [pc, #472]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a75      	ldr	r2, [pc, #468]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	e01c      	b.n	80078b8 <HAL_RCC_OscConfig+0xd0>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b05      	cmp	r3, #5
 8007884:	d10c      	bne.n	80078a0 <HAL_RCC_OscConfig+0xb8>
 8007886:	4b71      	ldr	r3, [pc, #452]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a70      	ldr	r2, [pc, #448]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 800788c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	4b6e      	ldr	r3, [pc, #440]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a6d      	ldr	r2, [pc, #436]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	e00b      	b.n	80078b8 <HAL_RCC_OscConfig+0xd0>
 80078a0:	4b6a      	ldr	r3, [pc, #424]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a69      	ldr	r2, [pc, #420]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 80078a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	4b67      	ldr	r3, [pc, #412]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a66      	ldr	r2, [pc, #408]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 80078b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d013      	beq.n	80078e8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078c0:	f7fd f87c 	bl	80049bc <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078c8:	f7fd f878 	bl	80049bc <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b64      	cmp	r3, #100	; 0x64
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e2ad      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078da:	4b5c      	ldr	r3, [pc, #368]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <HAL_RCC_OscConfig+0xe0>
 80078e6:	e014      	b.n	8007912 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e8:	f7fd f868 	bl	80049bc <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078f0:	f7fd f864 	bl	80049bc <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b64      	cmp	r3, #100	; 0x64
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e299      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007902:	4b52      	ldr	r3, [pc, #328]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1f0      	bne.n	80078f0 <HAL_RCC_OscConfig+0x108>
 800790e:	e000      	b.n	8007912 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d05a      	beq.n	80079d4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b04      	cmp	r3, #4
 8007922:	d005      	beq.n	8007930 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	2b0c      	cmp	r3, #12
 8007928:	d119      	bne.n	800795e <HAL_RCC_OscConfig+0x176>
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d116      	bne.n	800795e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007930:	4b46      	ldr	r3, [pc, #280]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <HAL_RCC_OscConfig+0x160>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d001      	beq.n	8007948 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e276      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007948:	4b40      	ldr	r3, [pc, #256]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	493d      	ldr	r1, [pc, #244]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007958:	4313      	orrs	r3, r2
 800795a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800795c:	e03a      	b.n	80079d4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d020      	beq.n	80079a8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007966:	4b3a      	ldr	r3, [pc, #232]	; (8007a50 <HAL_RCC_OscConfig+0x268>)
 8007968:	2201      	movs	r2, #1
 800796a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800796c:	f7fd f826 	bl	80049bc <HAL_GetTick>
 8007970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007972:	e008      	b.n	8007986 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007974:	f7fd f822 	bl	80049bc <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d901      	bls.n	8007986 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e257      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007986:	4b31      	ldr	r3, [pc, #196]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0f0      	beq.n	8007974 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007992:	4b2e      	ldr	r3, [pc, #184]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	492a      	ldr	r1, [pc, #168]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	604b      	str	r3, [r1, #4]
 80079a6:	e015      	b.n	80079d4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079a8:	4b29      	ldr	r3, [pc, #164]	; (8007a50 <HAL_RCC_OscConfig+0x268>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ae:	f7fd f805 	bl	80049bc <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079b4:	e008      	b.n	80079c8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079b6:	f7fd f801 	bl	80049bc <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e236      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079c8:	4b20      	ldr	r3, [pc, #128]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f0      	bne.n	80079b6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0310 	and.w	r3, r3, #16
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 80b8 	beq.w	8007b52 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d170      	bne.n	8007aca <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80079e8:	4b18      	ldr	r3, [pc, #96]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d005      	beq.n	8007a00 <HAL_RCC_OscConfig+0x218>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e21a      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a1a      	ldr	r2, [r3, #32]
 8007a04:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d921      	bls.n	8007a54 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fc69 	bl	80082ec <RCC_SetFlashLatencyFromMSIRange>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e208      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a24:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	4906      	ldr	r1, [pc, #24]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a36:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	061b      	lsls	r3, r3, #24
 8007a44:	4901      	ldr	r1, [pc, #4]	; (8007a4c <HAL_RCC_OscConfig+0x264>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	604b      	str	r3, [r1, #4]
 8007a4a:	e020      	b.n	8007a8e <HAL_RCC_OscConfig+0x2a6>
 8007a4c:	40023800 	.word	0x40023800
 8007a50:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a54:	4b99      	ldr	r3, [pc, #612]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	4996      	ldr	r1, [pc, #600]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a66:	4b95      	ldr	r3, [pc, #596]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	061b      	lsls	r3, r3, #24
 8007a74:	4991      	ldr	r1, [pc, #580]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 fc34 	bl	80082ec <RCC_SetFlashLatencyFromMSIRange>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e1d3      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	0b5b      	lsrs	r3, r3, #13
 8007a94:	3301      	adds	r3, #1
 8007a96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007a9e:	4a87      	ldr	r2, [pc, #540]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007aa0:	6892      	ldr	r2, [r2, #8]
 8007aa2:	0912      	lsrs	r2, r2, #4
 8007aa4:	f002 020f 	and.w	r2, r2, #15
 8007aa8:	4985      	ldr	r1, [pc, #532]	; (8007cc0 <HAL_RCC_OscConfig+0x4d8>)
 8007aaa:	5c8a      	ldrb	r2, [r1, r2]
 8007aac:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007aae:	4a85      	ldr	r2, [pc, #532]	; (8007cc4 <HAL_RCC_OscConfig+0x4dc>)
 8007ab0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007ab2:	4b85      	ldr	r3, [pc, #532]	; (8007cc8 <HAL_RCC_OscConfig+0x4e0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fc ff34 	bl	8004924 <HAL_InitTick>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d045      	beq.n	8007b52 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	e1b5      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d029      	beq.n	8007b26 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007ad2:	4b7e      	ldr	r3, [pc, #504]	; (8007ccc <HAL_RCC_OscConfig+0x4e4>)
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad8:	f7fc ff70 	bl	80049bc <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007ade:	e008      	b.n	8007af2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007ae0:	f7fc ff6c 	bl	80049bc <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d901      	bls.n	8007af2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e1a1      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007af2:	4b72      	ldr	r3, [pc, #456]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0f0      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007afe:	4b6f      	ldr	r3, [pc, #444]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	496c      	ldr	r1, [pc, #432]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b10:	4b6a      	ldr	r3, [pc, #424]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	061b      	lsls	r3, r3, #24
 8007b1e:	4967      	ldr	r1, [pc, #412]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	604b      	str	r3, [r1, #4]
 8007b24:	e015      	b.n	8007b52 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007b26:	4b69      	ldr	r3, [pc, #420]	; (8007ccc <HAL_RCC_OscConfig+0x4e4>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b2c:	f7fc ff46 	bl	80049bc <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007b32:	e008      	b.n	8007b46 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b34:	f7fc ff42 	bl	80049bc <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e177      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007b46:	4b5d      	ldr	r3, [pc, #372]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1f0      	bne.n	8007b34 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0308 	and.w	r3, r3, #8
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d030      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d016      	beq.n	8007b94 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b66:	4b5a      	ldr	r3, [pc, #360]	; (8007cd0 <HAL_RCC_OscConfig+0x4e8>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b6c:	f7fc ff26 	bl	80049bc <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b74:	f7fc ff22 	bl	80049bc <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e157      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b86:	4b4d      	ldr	r3, [pc, #308]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0f0      	beq.n	8007b74 <HAL_RCC_OscConfig+0x38c>
 8007b92:	e015      	b.n	8007bc0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b94:	4b4e      	ldr	r3, [pc, #312]	; (8007cd0 <HAL_RCC_OscConfig+0x4e8>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b9a:	f7fc ff0f 	bl	80049bc <HAL_GetTick>
 8007b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ba0:	e008      	b.n	8007bb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ba2:	f7fc ff0b 	bl	80049bc <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d901      	bls.n	8007bb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e140      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bb4:	4b41      	ldr	r3, [pc, #260]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1f0      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80b5 	beq.w	8007d38 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bd2:	4b3a      	ldr	r3, [pc, #232]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10d      	bne.n	8007bfa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bde:	4b37      	ldr	r3, [pc, #220]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	4a36      	ldr	r2, [pc, #216]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be8:	6253      	str	r3, [r2, #36]	; 0x24
 8007bea:	4b34      	ldr	r3, [pc, #208]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf2:	60bb      	str	r3, [r7, #8]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bfa:	4b36      	ldr	r3, [pc, #216]	; (8007cd4 <HAL_RCC_OscConfig+0x4ec>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d118      	bne.n	8007c38 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c06:	4b33      	ldr	r3, [pc, #204]	; (8007cd4 <HAL_RCC_OscConfig+0x4ec>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a32      	ldr	r2, [pc, #200]	; (8007cd4 <HAL_RCC_OscConfig+0x4ec>)
 8007c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c12:	f7fc fed3 	bl	80049bc <HAL_GetTick>
 8007c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c18:	e008      	b.n	8007c2c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c1a:	f7fc fecf 	bl	80049bc <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b64      	cmp	r3, #100	; 0x64
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e104      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c2c:	4b29      	ldr	r3, [pc, #164]	; (8007cd4 <HAL_RCC_OscConfig+0x4ec>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0f0      	beq.n	8007c1a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d106      	bne.n	8007c4e <HAL_RCC_OscConfig+0x466>
 8007c40:	4b1e      	ldr	r3, [pc, #120]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c44:	4a1d      	ldr	r2, [pc, #116]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c4a:	6353      	str	r3, [r2, #52]	; 0x34
 8007c4c:	e02d      	b.n	8007caa <HAL_RCC_OscConfig+0x4c2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10c      	bne.n	8007c70 <HAL_RCC_OscConfig+0x488>
 8007c56:	4b19      	ldr	r3, [pc, #100]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5a:	4a18      	ldr	r2, [pc, #96]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c60:	6353      	str	r3, [r2, #52]	; 0x34
 8007c62:	4b16      	ldr	r3, [pc, #88]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	4a15      	ldr	r2, [pc, #84]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c6c:	6353      	str	r3, [r2, #52]	; 0x34
 8007c6e:	e01c      	b.n	8007caa <HAL_RCC_OscConfig+0x4c2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b05      	cmp	r3, #5
 8007c76:	d10c      	bne.n	8007c92 <HAL_RCC_OscConfig+0x4aa>
 8007c78:	4b10      	ldr	r3, [pc, #64]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7c:	4a0f      	ldr	r2, [pc, #60]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c82:	6353      	str	r3, [r2, #52]	; 0x34
 8007c84:	4b0d      	ldr	r3, [pc, #52]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c88:	4a0c      	ldr	r2, [pc, #48]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c8e:	6353      	str	r3, [r2, #52]	; 0x34
 8007c90:	e00b      	b.n	8007caa <HAL_RCC_OscConfig+0x4c2>
 8007c92:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c96:	4a09      	ldr	r2, [pc, #36]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c9c:	6353      	str	r3, [r2, #52]	; 0x34
 8007c9e:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca2:	4a06      	ldr	r2, [pc, #24]	; (8007cbc <HAL_RCC_OscConfig+0x4d4>)
 8007ca4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ca8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d024      	beq.n	8007cfc <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cb2:	f7fc fe83 	bl	80049bc <HAL_GetTick>
 8007cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cb8:	e019      	b.n	8007cee <HAL_RCC_OscConfig+0x506>
 8007cba:	bf00      	nop
 8007cbc:	40023800 	.word	0x40023800
 8007cc0:	08012d24 	.word	0x08012d24
 8007cc4:	2000073c 	.word	0x2000073c
 8007cc8:	20000744 	.word	0x20000744
 8007ccc:	42470020 	.word	0x42470020
 8007cd0:	42470680 	.word	0x42470680
 8007cd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cd8:	f7fc fe70 	bl	80049bc <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e0a3      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cee:	4b54      	ldr	r3, [pc, #336]	; (8007e40 <HAL_RCC_OscConfig+0x658>)
 8007cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0ee      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x4f0>
 8007cfa:	e014      	b.n	8007d26 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cfc:	f7fc fe5e 	bl	80049bc <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d02:	e00a      	b.n	8007d1a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d04:	f7fc fe5a 	bl	80049bc <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d901      	bls.n	8007d1a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e08d      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d1a:	4b49      	ldr	r3, [pc, #292]	; (8007e40 <HAL_RCC_OscConfig+0x658>)
 8007d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1ee      	bne.n	8007d04 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d26:	7ffb      	ldrb	r3, [r7, #31]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d105      	bne.n	8007d38 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d2c:	4b44      	ldr	r3, [pc, #272]	; (8007e40 <HAL_RCC_OscConfig+0x658>)
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	4a43      	ldr	r2, [pc, #268]	; (8007e40 <HAL_RCC_OscConfig+0x658>)
 8007d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d36:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d079      	beq.n	8007e34 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2b0c      	cmp	r3, #12
 8007d44:	d056      	beq.n	8007df4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d13b      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d4e:	4b3d      	ldr	r3, [pc, #244]	; (8007e44 <HAL_RCC_OscConfig+0x65c>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d54:	f7fc fe32 	bl	80049bc <HAL_GetTick>
 8007d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d5a:	e008      	b.n	8007d6e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d5c:	f7fc fe2e 	bl	80049bc <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e063      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d6e:	4b34      	ldr	r3, [pc, #208]	; (8007e40 <HAL_RCC_OscConfig+0x658>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1f0      	bne.n	8007d5c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d7a:	4b31      	ldr	r3, [pc, #196]	; (8007e40 <HAL_RCC_OscConfig+0x658>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	4319      	orrs	r1, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	430b      	orrs	r3, r1
 8007d92:	492b      	ldr	r1, [pc, #172]	; (8007e40 <HAL_RCC_OscConfig+0x658>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d98:	4b2a      	ldr	r3, [pc, #168]	; (8007e44 <HAL_RCC_OscConfig+0x65c>)
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d9e:	f7fc fe0d 	bl	80049bc <HAL_GetTick>
 8007da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007da4:	e008      	b.n	8007db8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007da6:	f7fc fe09 	bl	80049bc <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d901      	bls.n	8007db8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e03e      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007db8:	4b21      	ldr	r3, [pc, #132]	; (8007e40 <HAL_RCC_OscConfig+0x658>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0f0      	beq.n	8007da6 <HAL_RCC_OscConfig+0x5be>
 8007dc4:	e036      	b.n	8007e34 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dc6:	4b1f      	ldr	r3, [pc, #124]	; (8007e44 <HAL_RCC_OscConfig+0x65c>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dcc:	f7fc fdf6 	bl	80049bc <HAL_GetTick>
 8007dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dd4:	f7fc fdf2 	bl	80049bc <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e027      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007de6:	4b16      	ldr	r3, [pc, #88]	; (8007e40 <HAL_RCC_OscConfig+0x658>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f0      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x5ec>
 8007df2:	e01f      	b.n	8007e34 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e01a      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007e00:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <HAL_RCC_OscConfig+0x658>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d10d      	bne.n	8007e30 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d106      	bne.n	8007e30 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d001      	beq.n	8007e34 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e000      	b.n	8007e36 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3720      	adds	r7, #32
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	40023800 	.word	0x40023800
 8007e44:	42470060 	.word	0x42470060

08007e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e11a      	b.n	8008092 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e5c:	4b8f      	ldr	r3, [pc, #572]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d919      	bls.n	8007e9e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d105      	bne.n	8007e7c <HAL_RCC_ClockConfig+0x34>
 8007e70:	4b8a      	ldr	r3, [pc, #552]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a89      	ldr	r2, [pc, #548]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8007e76:	f043 0304 	orr.w	r3, r3, #4
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	4b87      	ldr	r3, [pc, #540]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f023 0201 	bic.w	r2, r3, #1
 8007e84:	4985      	ldr	r1, [pc, #532]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e8c:	4b83      	ldr	r3, [pc, #524]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d001      	beq.n	8007e9e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e0f9      	b.n	8008092 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d008      	beq.n	8007ebc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eaa:	4b7d      	ldr	r3, [pc, #500]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	497a      	ldr	r1, [pc, #488]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 808e 	beq.w	8007fe6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d107      	bne.n	8007ee2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ed2:	4b73      	ldr	r3, [pc, #460]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d121      	bne.n	8007f22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e0d7      	b.n	8008092 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d107      	bne.n	8007efa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007eea:	4b6d      	ldr	r3, [pc, #436]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d115      	bne.n	8007f22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e0cb      	b.n	8008092 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d107      	bne.n	8007f12 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f02:	4b67      	ldr	r3, [pc, #412]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e0bf      	b.n	8008092 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007f12:	4b63      	ldr	r3, [pc, #396]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e0b7      	b.n	8008092 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f22:	4b5f      	ldr	r3, [pc, #380]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f023 0203 	bic.w	r2, r3, #3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	495c      	ldr	r1, [pc, #368]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f34:	f7fc fd42 	bl	80049bc <HAL_GetTick>
 8007f38:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d112      	bne.n	8007f68 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f42:	e00a      	b.n	8007f5a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f44:	f7fc fd3a 	bl	80049bc <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d901      	bls.n	8007f5a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e09b      	b.n	8008092 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f5a:	4b51      	ldr	r3, [pc, #324]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 030c 	and.w	r3, r3, #12
 8007f62:	2b08      	cmp	r3, #8
 8007f64:	d1ee      	bne.n	8007f44 <HAL_RCC_ClockConfig+0xfc>
 8007f66:	e03e      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d112      	bne.n	8007f96 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f70:	e00a      	b.n	8007f88 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f72:	f7fc fd23 	bl	80049bc <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d901      	bls.n	8007f88 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e084      	b.n	8008092 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f88:	4b45      	ldr	r3, [pc, #276]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f003 030c 	and.w	r3, r3, #12
 8007f90:	2b0c      	cmp	r3, #12
 8007f92:	d1ee      	bne.n	8007f72 <HAL_RCC_ClockConfig+0x12a>
 8007f94:	e027      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d11d      	bne.n	8007fda <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f9e:	e00a      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fa0:	f7fc fd0c 	bl	80049bc <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e06d      	b.n	8008092 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fb6:	4b3a      	ldr	r3, [pc, #232]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 030c 	and.w	r3, r3, #12
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d1ee      	bne.n	8007fa0 <HAL_RCC_ClockConfig+0x158>
 8007fc2:	e010      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fc4:	f7fc fcfa 	bl	80049bc <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e05b      	b.n	8008092 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007fda:	4b31      	ldr	r3, [pc, #196]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f003 030c 	and.w	r3, r3, #12
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1ee      	bne.n	8007fc4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fe6:	4b2d      	ldr	r3, [pc, #180]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d219      	bcs.n	8008028 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d105      	bne.n	8008006 <HAL_RCC_ClockConfig+0x1be>
 8007ffa:	4b28      	ldr	r3, [pc, #160]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a27      	ldr	r2, [pc, #156]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8008000:	f043 0304 	orr.w	r3, r3, #4
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	4b25      	ldr	r3, [pc, #148]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f023 0201 	bic.w	r2, r3, #1
 800800e:	4923      	ldr	r1, [pc, #140]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	4313      	orrs	r3, r2
 8008014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008016:	4b21      	ldr	r3, [pc, #132]	; (800809c <HAL_RCC_ClockConfig+0x254>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d001      	beq.n	8008028 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e034      	b.n	8008092 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d008      	beq.n	8008046 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008034:	4b1a      	ldr	r3, [pc, #104]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	4917      	ldr	r1, [pc, #92]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8008042:	4313      	orrs	r3, r2
 8008044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008052:	4b13      	ldr	r3, [pc, #76]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	490f      	ldr	r1, [pc, #60]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 8008062:	4313      	orrs	r3, r2
 8008064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008066:	f000 f823 	bl	80080b0 <HAL_RCC_GetSysClockFreq>
 800806a:	4602      	mov	r2, r0
 800806c:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <HAL_RCC_ClockConfig+0x258>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	091b      	lsrs	r3, r3, #4
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	490b      	ldr	r1, [pc, #44]	; (80080a4 <HAL_RCC_ClockConfig+0x25c>)
 8008078:	5ccb      	ldrb	r3, [r1, r3]
 800807a:	fa22 f303 	lsr.w	r3, r2, r3
 800807e:	4a0a      	ldr	r2, [pc, #40]	; (80080a8 <HAL_RCC_ClockConfig+0x260>)
 8008080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008082:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <HAL_RCC_ClockConfig+0x264>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f7fc fc4c 	bl	8004924 <HAL_InitTick>
 800808c:	4603      	mov	r3, r0
 800808e:	72fb      	strb	r3, [r7, #11]

  return status;
 8008090:	7afb      	ldrb	r3, [r7, #11]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	40023c00 	.word	0x40023c00
 80080a0:	40023800 	.word	0x40023800
 80080a4:	08012d24 	.word	0x08012d24
 80080a8:	2000073c 	.word	0x2000073c
 80080ac:	20000744 	.word	0x20000744

080080b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080b4:	b092      	sub	sp, #72	; 0x48
 80080b6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80080b8:	4b79      	ldr	r3, [pc, #484]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80080be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c0:	f003 030c 	and.w	r3, r3, #12
 80080c4:	2b0c      	cmp	r3, #12
 80080c6:	d00d      	beq.n	80080e4 <HAL_RCC_GetSysClockFreq+0x34>
 80080c8:	2b0c      	cmp	r3, #12
 80080ca:	f200 80d5 	bhi.w	8008278 <HAL_RCC_GetSysClockFreq+0x1c8>
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d002      	beq.n	80080d8 <HAL_RCC_GetSysClockFreq+0x28>
 80080d2:	2b08      	cmp	r3, #8
 80080d4:	d003      	beq.n	80080de <HAL_RCC_GetSysClockFreq+0x2e>
 80080d6:	e0cf      	b.n	8008278 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080d8:	4b72      	ldr	r3, [pc, #456]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80080da:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80080dc:	e0da      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80080de:	4b72      	ldr	r3, [pc, #456]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80080e0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80080e2:	e0d7      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80080e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e6:	0c9b      	lsrs	r3, r3, #18
 80080e8:	f003 020f 	and.w	r2, r3, #15
 80080ec:	4b6f      	ldr	r3, [pc, #444]	; (80082ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 80080ee:	5c9b      	ldrb	r3, [r3, r2]
 80080f0:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80080f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f4:	0d9b      	lsrs	r3, r3, #22
 80080f6:	f003 0303 	and.w	r3, r3, #3
 80080fa:	3301      	adds	r3, #1
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080fe:	4b68      	ldr	r3, [pc, #416]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d05d      	beq.n	80081c6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	2200      	movs	r2, #0
 800810e:	4618      	mov	r0, r3
 8008110:	4611      	mov	r1, r2
 8008112:	4604      	mov	r4, r0
 8008114:	460d      	mov	r5, r1
 8008116:	4622      	mov	r2, r4
 8008118:	462b      	mov	r3, r5
 800811a:	f04f 0000 	mov.w	r0, #0
 800811e:	f04f 0100 	mov.w	r1, #0
 8008122:	0159      	lsls	r1, r3, #5
 8008124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008128:	0150      	lsls	r0, r2, #5
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	4621      	mov	r1, r4
 8008130:	1a51      	subs	r1, r2, r1
 8008132:	6139      	str	r1, [r7, #16]
 8008134:	4629      	mov	r1, r5
 8008136:	eb63 0301 	sbc.w	r3, r3, r1
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	f04f 0200 	mov.w	r2, #0
 8008140:	f04f 0300 	mov.w	r3, #0
 8008144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008148:	4659      	mov	r1, fp
 800814a:	018b      	lsls	r3, r1, #6
 800814c:	4651      	mov	r1, sl
 800814e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008152:	4651      	mov	r1, sl
 8008154:	018a      	lsls	r2, r1, #6
 8008156:	46d4      	mov	ip, sl
 8008158:	ebb2 080c 	subs.w	r8, r2, ip
 800815c:	4659      	mov	r1, fp
 800815e:	eb63 0901 	sbc.w	r9, r3, r1
 8008162:	f04f 0200 	mov.w	r2, #0
 8008166:	f04f 0300 	mov.w	r3, #0
 800816a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800816e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008176:	4690      	mov	r8, r2
 8008178:	4699      	mov	r9, r3
 800817a:	4623      	mov	r3, r4
 800817c:	eb18 0303 	adds.w	r3, r8, r3
 8008180:	60bb      	str	r3, [r7, #8]
 8008182:	462b      	mov	r3, r5
 8008184:	eb49 0303 	adc.w	r3, r9, r3
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	f04f 0200 	mov.w	r2, #0
 800818e:	f04f 0300 	mov.w	r3, #0
 8008192:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008196:	4629      	mov	r1, r5
 8008198:	024b      	lsls	r3, r1, #9
 800819a:	4620      	mov	r0, r4
 800819c:	4629      	mov	r1, r5
 800819e:	4604      	mov	r4, r0
 80081a0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80081a4:	4601      	mov	r1, r0
 80081a6:	024a      	lsls	r2, r1, #9
 80081a8:	4610      	mov	r0, r2
 80081aa:	4619      	mov	r1, r3
 80081ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ae:	2200      	movs	r2, #0
 80081b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081b8:	f7f8 ffec 	bl	8001194 <__aeabi_uldivmod>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4613      	mov	r3, r2
 80081c2:	647b      	str	r3, [r7, #68]	; 0x44
 80081c4:	e055      	b.n	8008272 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	2200      	movs	r2, #0
 80081ca:	623b      	str	r3, [r7, #32]
 80081cc:	627a      	str	r2, [r7, #36]	; 0x24
 80081ce:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80081d2:	4642      	mov	r2, r8
 80081d4:	464b      	mov	r3, r9
 80081d6:	f04f 0000 	mov.w	r0, #0
 80081da:	f04f 0100 	mov.w	r1, #0
 80081de:	0159      	lsls	r1, r3, #5
 80081e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081e4:	0150      	lsls	r0, r2, #5
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	46c4      	mov	ip, r8
 80081ec:	ebb2 0a0c 	subs.w	sl, r2, ip
 80081f0:	4640      	mov	r0, r8
 80081f2:	4649      	mov	r1, r9
 80081f4:	468c      	mov	ip, r1
 80081f6:	eb63 0b0c 	sbc.w	fp, r3, ip
 80081fa:	f04f 0200 	mov.w	r2, #0
 80081fe:	f04f 0300 	mov.w	r3, #0
 8008202:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008206:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800820a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800820e:	ebb2 040a 	subs.w	r4, r2, sl
 8008212:	eb63 050b 	sbc.w	r5, r3, fp
 8008216:	f04f 0200 	mov.w	r2, #0
 800821a:	f04f 0300 	mov.w	r3, #0
 800821e:	00eb      	lsls	r3, r5, #3
 8008220:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008224:	00e2      	lsls	r2, r4, #3
 8008226:	4614      	mov	r4, r2
 8008228:	461d      	mov	r5, r3
 800822a:	4603      	mov	r3, r0
 800822c:	18e3      	adds	r3, r4, r3
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	460b      	mov	r3, r1
 8008232:	eb45 0303 	adc.w	r3, r5, r3
 8008236:	607b      	str	r3, [r7, #4]
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	f04f 0300 	mov.w	r3, #0
 8008240:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008244:	4629      	mov	r1, r5
 8008246:	028b      	lsls	r3, r1, #10
 8008248:	4620      	mov	r0, r4
 800824a:	4629      	mov	r1, r5
 800824c:	4604      	mov	r4, r0
 800824e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8008252:	4601      	mov	r1, r0
 8008254:	028a      	lsls	r2, r1, #10
 8008256:	4610      	mov	r0, r2
 8008258:	4619      	mov	r1, r3
 800825a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825c:	2200      	movs	r2, #0
 800825e:	61bb      	str	r3, [r7, #24]
 8008260:	61fa      	str	r2, [r7, #28]
 8008262:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008266:	f7f8 ff95 	bl	8001194 <__aeabi_uldivmod>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4613      	mov	r3, r2
 8008270:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8008272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008274:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008276:	e00d      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008278:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	0b5b      	lsrs	r3, r3, #13
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	3301      	adds	r3, #1
 8008288:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800828c:	fa02 f303 	lsl.w	r3, r2, r3
 8008290:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008292:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8008296:	4618      	mov	r0, r3
 8008298:	3748      	adds	r7, #72	; 0x48
 800829a:	46bd      	mov	sp, r7
 800829c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082a0:	40023800 	.word	0x40023800
 80082a4:	00f42400 	.word	0x00f42400
 80082a8:	007a1200 	.word	0x007a1200
 80082ac:	08012d18 	.word	0x08012d18

080082b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082b4:	4b02      	ldr	r3, [pc, #8]	; (80082c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80082b6:	681b      	ldr	r3, [r3, #0]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr
 80082c0:	2000073c 	.word	0x2000073c

080082c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082c8:	f7ff fff2 	bl	80082b0 <HAL_RCC_GetHCLKFreq>
 80082cc:	4602      	mov	r2, r0
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	0a1b      	lsrs	r3, r3, #8
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	4903      	ldr	r1, [pc, #12]	; (80082e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082da:	5ccb      	ldrb	r3, [r1, r3]
 80082dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40023800 	.word	0x40023800
 80082e8:	08012d34 	.word	0x08012d34

080082ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80082f4:	2300      	movs	r3, #0
 80082f6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80082f8:	4b29      	ldr	r3, [pc, #164]	; (80083a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d12c      	bne.n	800835e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008304:	4b26      	ldr	r3, [pc, #152]	; (80083a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008310:	4b24      	ldr	r3, [pc, #144]	; (80083a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	e016      	b.n	800834a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800831c:	4b20      	ldr	r3, [pc, #128]	; (80083a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	4a1f      	ldr	r2, [pc, #124]	; (80083a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008326:	6253      	str	r3, [r2, #36]	; 0x24
 8008328:	4b1d      	ldr	r3, [pc, #116]	; (80083a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008334:	4b1b      	ldr	r3, [pc, #108]	; (80083a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800833c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800833e:	4b18      	ldr	r3, [pc, #96]	; (80083a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	4a17      	ldr	r2, [pc, #92]	; (80083a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008348:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008350:	d105      	bne.n	800835e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008358:	d101      	bne.n	800835e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800835a:	2301      	movs	r3, #1
 800835c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d105      	bne.n	8008370 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8008364:	4b10      	ldr	r3, [pc, #64]	; (80083a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a0f      	ldr	r2, [pc, #60]	; (80083a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800836a:	f043 0304 	orr.w	r3, r3, #4
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	4b0d      	ldr	r3, [pc, #52]	; (80083a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f023 0201 	bic.w	r2, r3, #1
 8008378:	490b      	ldr	r1, [pc, #44]	; (80083a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	4313      	orrs	r3, r2
 800837e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008380:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	429a      	cmp	r2, r3
 800838c:	d001      	beq.n	8008392 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e000      	b.n	8008394 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	371c      	adds	r7, #28
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	40023800 	.word	0x40023800
 80083a4:	40007000 	.word	0x40007000
 80083a8:	40023c00 	.word	0x40023c00

080083ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e06e      	b.n	800849c <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d108      	bne.n	80083d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083ce:	d009      	beq.n	80083e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	61da      	str	r2, [r3, #28]
 80083d6:	e005      	b.n	80083e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7fb fe88 	bl	8004114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800841a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800842c:	431a      	orrs	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008436:	431a      	orrs	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f003 0302 	and.w	r3, r3, #2
 8008440:	431a      	orrs	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	431a      	orrs	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008454:	431a      	orrs	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008468:	ea42 0103 	orr.w	r1, r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008470:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	0c1a      	lsrs	r2, r3, #16
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f002 0204 	and.w	r2, r2, #4
 800848a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b088      	sub	sp, #32
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	4613      	mov	r3, r2
 80084b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d101      	bne.n	80084c6 <HAL_SPI_Transmit+0x22>
 80084c2:	2302      	movs	r3, #2
 80084c4:	e126      	b.n	8008714 <HAL_SPI_Transmit+0x270>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084ce:	f7fc fa75 	bl	80049bc <HAL_GetTick>
 80084d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80084d4:	88fb      	ldrh	r3, [r7, #6]
 80084d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d002      	beq.n	80084ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80084e4:	2302      	movs	r3, #2
 80084e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084e8:	e10b      	b.n	8008702 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <HAL_SPI_Transmit+0x52>
 80084f0:	88fb      	ldrh	r3, [r7, #6]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d102      	bne.n	80084fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084fa:	e102      	b.n	8008702 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2203      	movs	r2, #3
 8008500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	88fa      	ldrh	r2, [r7, #6]
 8008514:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	88fa      	ldrh	r2, [r7, #6]
 800851a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008542:	d10f      	bne.n	8008564 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008552:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008562:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856e:	2b40      	cmp	r3, #64	; 0x40
 8008570:	d007      	beq.n	8008582 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008580:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800858a:	d14b      	bne.n	8008624 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <HAL_SPI_Transmit+0xf6>
 8008594:	8afb      	ldrh	r3, [r7, #22]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d13e      	bne.n	8008618 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859e:	881a      	ldrh	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085aa:	1c9a      	adds	r2, r3, #2
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80085be:	e02b      	b.n	8008618 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d112      	bne.n	80085f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d2:	881a      	ldrh	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085de:	1c9a      	adds	r2, r3, #2
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80085f2:	e011      	b.n	8008618 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085f4:	f7fc f9e2 	bl	80049bc <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d803      	bhi.n	800860c <HAL_SPI_Transmit+0x168>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860a:	d102      	bne.n	8008612 <HAL_SPI_Transmit+0x16e>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d102      	bne.n	8008618 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008616:	e074      	b.n	8008702 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1ce      	bne.n	80085c0 <HAL_SPI_Transmit+0x11c>
 8008622:	e04c      	b.n	80086be <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <HAL_SPI_Transmit+0x18e>
 800862c:	8afb      	ldrh	r3, [r7, #22]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d140      	bne.n	80086b4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	330c      	adds	r3, #12
 800863c:	7812      	ldrb	r2, [r2, #0]
 800863e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800864e:	b29b      	uxth	r3, r3
 8008650:	3b01      	subs	r3, #1
 8008652:	b29a      	uxth	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008658:	e02c      	b.n	80086b4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b02      	cmp	r3, #2
 8008666:	d113      	bne.n	8008690 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	330c      	adds	r3, #12
 8008672:	7812      	ldrb	r2, [r2, #0]
 8008674:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008684:	b29b      	uxth	r3, r3
 8008686:	3b01      	subs	r3, #1
 8008688:	b29a      	uxth	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	86da      	strh	r2, [r3, #54]	; 0x36
 800868e:	e011      	b.n	80086b4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008690:	f7fc f994 	bl	80049bc <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	429a      	cmp	r2, r3
 800869e:	d803      	bhi.n	80086a8 <HAL_SPI_Transmit+0x204>
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	d102      	bne.n	80086ae <HAL_SPI_Transmit+0x20a>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d102      	bne.n	80086b4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086b2:	e026      	b.n	8008702 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1cd      	bne.n	800865a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 fcd0 	bl	8009068 <SPI_EndRxTxTransaction>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d002      	beq.n	80086d4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2220      	movs	r2, #32
 80086d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10a      	bne.n	80086f2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086dc:	2300      	movs	r3, #0
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	613b      	str	r3, [r7, #16]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	613b      	str	r3, [r7, #16]
 80086f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	77fb      	strb	r3, [r7, #31]
 80086fe:	e000      	b.n	8008702 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008700:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008712:	7ffb      	ldrb	r3, [r7, #31]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3720      	adds	r7, #32
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b088      	sub	sp, #32
 8008720:	af02      	add	r7, sp, #8
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	4613      	mov	r3, r2
 800872a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008738:	d112      	bne.n	8008760 <HAL_SPI_Receive+0x44>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10e      	bne.n	8008760 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2204      	movs	r2, #4
 8008746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800874a:	88fa      	ldrh	r2, [r7, #6]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	4613      	mov	r3, r2
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	68b9      	ldr	r1, [r7, #8]
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 f8f1 	bl	800893e <HAL_SPI_TransmitReceive>
 800875c:	4603      	mov	r3, r0
 800875e:	e0ea      	b.n	8008936 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008766:	2b01      	cmp	r3, #1
 8008768:	d101      	bne.n	800876e <HAL_SPI_Receive+0x52>
 800876a:	2302      	movs	r3, #2
 800876c:	e0e3      	b.n	8008936 <HAL_SPI_Receive+0x21a>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008776:	f7fc f921 	bl	80049bc <HAL_GetTick>
 800877a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b01      	cmp	r3, #1
 8008786:	d002      	beq.n	800878e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008788:	2302      	movs	r3, #2
 800878a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800878c:	e0ca      	b.n	8008924 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <HAL_SPI_Receive+0x7e>
 8008794:	88fb      	ldrh	r3, [r7, #6]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d102      	bne.n	80087a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800879e:	e0c1      	b.n	8008924 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2204      	movs	r2, #4
 80087a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	88fa      	ldrh	r2, [r7, #6]
 80087b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	88fa      	ldrh	r2, [r7, #6]
 80087be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087e6:	d10f      	bne.n	8008808 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008806:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008812:	2b40      	cmp	r3, #64	; 0x40
 8008814:	d007      	beq.n	8008826 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008824:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d162      	bne.n	80088f4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800882e:	e02e      	b.n	800888e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b01      	cmp	r3, #1
 800883c:	d115      	bne.n	800886a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f103 020c 	add.w	r2, r3, #12
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884a:	7812      	ldrb	r2, [r2, #0]
 800884c:	b2d2      	uxtb	r2, r2
 800884e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008868:	e011      	b.n	800888e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800886a:	f7fc f8a7 	bl	80049bc <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d803      	bhi.n	8008882 <HAL_SPI_Receive+0x166>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d102      	bne.n	8008888 <HAL_SPI_Receive+0x16c>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d102      	bne.n	800888e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800888c:	e04a      	b.n	8008924 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008892:	b29b      	uxth	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1cb      	bne.n	8008830 <HAL_SPI_Receive+0x114>
 8008898:	e031      	b.n	80088fe <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d113      	bne.n	80088d0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68da      	ldr	r2, [r3, #12]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	b292      	uxth	r2, r2
 80088b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ba:	1c9a      	adds	r2, r3, #2
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	3b01      	subs	r3, #1
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088ce:	e011      	b.n	80088f4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088d0:	f7fc f874 	bl	80049bc <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d803      	bhi.n	80088e8 <HAL_SPI_Receive+0x1cc>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d102      	bne.n	80088ee <HAL_SPI_Receive+0x1d2>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d102      	bne.n	80088f4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80088f2:	e017      	b.n	8008924 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1cd      	bne.n	800889a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 fb4a 	bl	8008f9c <SPI_EndRxTransaction>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d002      	beq.n	8008914 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2220      	movs	r2, #32
 8008912:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	75fb      	strb	r3, [r7, #23]
 8008920:	e000      	b.n	8008924 <HAL_SPI_Receive+0x208>
  }

error :
 8008922:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b08c      	sub	sp, #48	; 0x30
 8008942:	af00      	add	r7, sp, #0
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	60b9      	str	r1, [r7, #8]
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800894c:	2301      	movs	r3, #1
 800894e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_SPI_TransmitReceive+0x26>
 8008960:	2302      	movs	r3, #2
 8008962:	e18a      	b.n	8008c7a <HAL_SPI_TransmitReceive+0x33c>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800896c:	f7fc f826 	bl	80049bc <HAL_GetTick>
 8008970:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008982:	887b      	ldrh	r3, [r7, #2]
 8008984:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800898a:	2b01      	cmp	r3, #1
 800898c:	d00f      	beq.n	80089ae <HAL_SPI_TransmitReceive+0x70>
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008994:	d107      	bne.n	80089a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d103      	bne.n	80089a6 <HAL_SPI_TransmitReceive+0x68>
 800899e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d003      	beq.n	80089ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80089a6:	2302      	movs	r3, #2
 80089a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80089ac:	e15b      	b.n	8008c66 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <HAL_SPI_TransmitReceive+0x82>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <HAL_SPI_TransmitReceive+0x82>
 80089ba:	887b      	ldrh	r3, [r7, #2]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d103      	bne.n	80089c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80089c6:	e14e      	b.n	8008c66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d003      	beq.n	80089dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2205      	movs	r2, #5
 80089d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	887a      	ldrh	r2, [r7, #2]
 80089ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	887a      	ldrh	r2, [r7, #2]
 80089f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	887a      	ldrh	r2, [r7, #2]
 80089fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	887a      	ldrh	r2, [r7, #2]
 8008a04:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1c:	2b40      	cmp	r3, #64	; 0x40
 8008a1e:	d007      	beq.n	8008a30 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a38:	d178      	bne.n	8008b2c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <HAL_SPI_TransmitReceive+0x10a>
 8008a42:	8b7b      	ldrh	r3, [r7, #26]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d166      	bne.n	8008b16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4c:	881a      	ldrh	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a58:	1c9a      	adds	r2, r3, #2
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	3b01      	subs	r3, #1
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a6c:	e053      	b.n	8008b16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d11b      	bne.n	8008ab4 <HAL_SPI_TransmitReceive+0x176>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d016      	beq.n	8008ab4 <HAL_SPI_TransmitReceive+0x176>
 8008a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d113      	bne.n	8008ab4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a90:	881a      	ldrh	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9c:	1c9a      	adds	r2, r3, #2
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d119      	bne.n	8008af6 <HAL_SPI_TransmitReceive+0x1b8>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d014      	beq.n	8008af6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad6:	b292      	uxth	r2, r2
 8008ad8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	1c9a      	adds	r2, r3, #2
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008af2:	2301      	movs	r3, #1
 8008af4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008af6:	f7fb ff61 	bl	80049bc <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d807      	bhi.n	8008b16 <HAL_SPI_TransmitReceive+0x1d8>
 8008b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0c:	d003      	beq.n	8008b16 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008b14:	e0a7      	b.n	8008c66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1a6      	bne.n	8008a6e <HAL_SPI_TransmitReceive+0x130>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1a1      	bne.n	8008a6e <HAL_SPI_TransmitReceive+0x130>
 8008b2a:	e07c      	b.n	8008c26 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <HAL_SPI_TransmitReceive+0x1fc>
 8008b34:	8b7b      	ldrh	r3, [r7, #26]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d16b      	bne.n	8008c12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	330c      	adds	r3, #12
 8008b44:	7812      	ldrb	r2, [r2, #0]
 8008b46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b60:	e057      	b.n	8008c12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d11c      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x26c>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d017      	beq.n	8008baa <HAL_SPI_TransmitReceive+0x26c>
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d114      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	330c      	adds	r3, #12
 8008b8a:	7812      	ldrb	r2, [r2, #0]
 8008b8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d119      	bne.n	8008bec <HAL_SPI_TransmitReceive+0x2ae>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d014      	beq.n	8008bec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	b2d2      	uxtb	r2, r2
 8008bce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008be8:	2301      	movs	r3, #1
 8008bea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008bec:	f7fb fee6 	bl	80049bc <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d803      	bhi.n	8008c04 <HAL_SPI_TransmitReceive+0x2c6>
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c02:	d102      	bne.n	8008c0a <HAL_SPI_TransmitReceive+0x2cc>
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c10:	e029      	b.n	8008c66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1a2      	bne.n	8008b62 <HAL_SPI_TransmitReceive+0x224>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d19d      	bne.n	8008b62 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 fa1c 	bl	8009068 <SPI_EndRxTxTransaction>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d006      	beq.n	8008c44 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008c42:	e010      	b.n	8008c66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10b      	bne.n	8008c64 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	e000      	b.n	8008c66 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008c64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3730      	adds	r7, #48	; 0x30
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	099b      	lsrs	r3, r3, #6
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10f      	bne.n	8008cc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00a      	beq.n	8008cc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	099b      	lsrs	r3, r3, #6
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4798      	blx	r3
    return;
 8008cc6:	e0be      	b.n	8008e46 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	085b      	lsrs	r3, r3, #1
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00a      	beq.n	8008cea <HAL_SPI_IRQHandler+0x66>
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	09db      	lsrs	r3, r3, #7
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d004      	beq.n	8008cea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	4798      	blx	r3
    return;
 8008ce8:	e0ad      	b.n	8008e46 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	095b      	lsrs	r3, r3, #5
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d106      	bne.n	8008d04 <HAL_SPI_IRQHandler+0x80>
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	099b      	lsrs	r3, r3, #6
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 80a1 	beq.w	8008e46 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	095b      	lsrs	r3, r3, #5
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 809a 	beq.w	8008e46 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	099b      	lsrs	r3, r3, #6
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d023      	beq.n	8008d66 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d011      	beq.n	8008d4e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d2e:	f043 0204 	orr.w	r2, r3, #4
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	617b      	str	r3, [r7, #20]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	617b      	str	r3, [r7, #20]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	e00b      	b.n	8008d66 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d4e:	2300      	movs	r3, #0
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	613b      	str	r3, [r7, #16]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	613b      	str	r3, [r7, #16]
 8008d62:	693b      	ldr	r3, [r7, #16]
        return;
 8008d64:	e06f      	b.n	8008e46 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	095b      	lsrs	r3, r3, #5
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d014      	beq.n	8008d9c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d76:	f043 0201 	orr.w	r2, r3, #1
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d04f      	beq.n	8008e44 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008db2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	f003 0302 	and.w	r3, r3, #2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d104      	bne.n	8008dd0 <HAL_SPI_IRQHandler+0x14c>
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d034      	beq.n	8008e3a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 0203 	bic.w	r2, r2, #3
 8008dde:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d011      	beq.n	8008e0c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dec:	4a17      	ldr	r2, [pc, #92]	; (8008e4c <HAL_SPI_IRQHandler+0x1c8>)
 8008dee:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fb ff1a 	bl	8004c2e <HAL_DMA_Abort_IT>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d005      	beq.n	8008e0c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d016      	beq.n	8008e42 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e18:	4a0c      	ldr	r2, [pc, #48]	; (8008e4c <HAL_SPI_IRQHandler+0x1c8>)
 8008e1a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fb ff04 	bl	8004c2e <HAL_DMA_Abort_IT>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00a      	beq.n	8008e42 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008e38:	e003      	b.n	8008e42 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f808 	bl	8008e50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008e40:	e000      	b.n	8008e44 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8008e42:	bf00      	nop
    return;
 8008e44:	bf00      	nop
  }
}
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	08008e63 	.word	0x08008e63

08008e50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bc80      	pop	{r7}
 8008e60:	4770      	bx	lr

08008e62 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f7ff ffe7 	bl	8008e50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008e82:	bf00      	nop
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e9c:	f7fb fd8e 	bl	80049bc <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	1a9b      	subs	r3, r3, r2
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008eac:	f7fb fd86 	bl	80049bc <HAL_GetTick>
 8008eb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008eb2:	4b39      	ldr	r3, [pc, #228]	; (8008f98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	015b      	lsls	r3, r3, #5
 8008eb8:	0d1b      	lsrs	r3, r3, #20
 8008eba:	69fa      	ldr	r2, [r7, #28]
 8008ebc:	fb02 f303 	mul.w	r3, r2, r3
 8008ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ec2:	e054      	b.n	8008f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eca:	d050      	beq.n	8008f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ecc:	f7fb fd76 	bl	80049bc <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	69fa      	ldr	r2, [r7, #28]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d902      	bls.n	8008ee2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d13d      	bne.n	8008f5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ef0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008efa:	d111      	bne.n	8008f20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f04:	d004      	beq.n	8008f10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f0e:	d107      	bne.n	8008f20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f28:	d10f      	bne.n	8008f4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e017      	b.n	8008f8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	4013      	ands	r3, r2
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	bf0c      	ite	eq
 8008f7e:	2301      	moveq	r3, #1
 8008f80:	2300      	movne	r3, #0
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	461a      	mov	r2, r3
 8008f86:	79fb      	ldrb	r3, [r7, #7]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d19b      	bne.n	8008ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3720      	adds	r7, #32
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	2000073c 	.word	0x2000073c

08008f9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af02      	add	r7, sp, #8
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fb0:	d111      	bne.n	8008fd6 <SPI_EndRxTransaction+0x3a>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fba:	d004      	beq.n	8008fc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fc4:	d107      	bne.n	8008fd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fd4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fde:	d12a      	bne.n	8009036 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fe8:	d012      	beq.n	8009010 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2180      	movs	r1, #128	; 0x80
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f7ff ff49 	bl	8008e8c <SPI_WaitFlagStateUntilTimeout>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d02d      	beq.n	800905c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009004:	f043 0220 	orr.w	r2, r3, #32
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e026      	b.n	800905e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2200      	movs	r2, #0
 8009018:	2101      	movs	r1, #1
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f7ff ff36 	bl	8008e8c <SPI_WaitFlagStateUntilTimeout>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d01a      	beq.n	800905c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902a:	f043 0220 	orr.w	r2, r3, #32
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e013      	b.n	800905e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2200      	movs	r2, #0
 800903e:	2101      	movs	r1, #1
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f7ff ff23 	bl	8008e8c <SPI_WaitFlagStateUntilTimeout>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d007      	beq.n	800905c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009050:	f043 0220 	orr.w	r2, r3, #32
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e000      	b.n	800905e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af02      	add	r7, sp, #8
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009074:	4b1b      	ldr	r3, [pc, #108]	; (80090e4 <SPI_EndRxTxTransaction+0x7c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a1b      	ldr	r2, [pc, #108]	; (80090e8 <SPI_EndRxTxTransaction+0x80>)
 800907a:	fba2 2303 	umull	r2, r3, r2, r3
 800907e:	0d5b      	lsrs	r3, r3, #21
 8009080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009084:	fb02 f303 	mul.w	r3, r2, r3
 8009088:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009092:	d112      	bne.n	80090ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2200      	movs	r2, #0
 800909c:	2180      	movs	r1, #128	; 0x80
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f7ff fef4 	bl	8008e8c <SPI_WaitFlagStateUntilTimeout>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d016      	beq.n	80090d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ae:	f043 0220 	orr.w	r2, r3, #32
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e00f      	b.n	80090da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00a      	beq.n	80090d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d0:	2b80      	cmp	r3, #128	; 0x80
 80090d2:	d0f2      	beq.n	80090ba <SPI_EndRxTxTransaction+0x52>
 80090d4:	e000      	b.n	80090d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80090d6:	bf00      	nop
  }

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	2000073c 	.word	0x2000073c
 80090e8:	165e9f81 	.word	0x165e9f81

080090ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e031      	b.n	8009162 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d106      	bne.n	8009118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7fb fae6 	bl	80046e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3304      	adds	r3, #4
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f000 fb3c 	bl	80097a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b01      	cmp	r3, #1
 800917e:	d001      	beq.n	8009184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e03a      	b.n	80091fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68da      	ldr	r2, [r3, #12]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0201 	orr.w	r2, r2, #1
 800919a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091a4:	d00e      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x58>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a16      	ldr	r2, [pc, #88]	; (8009204 <HAL_TIM_Base_Start_IT+0x98>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d009      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x58>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a14      	ldr	r2, [pc, #80]	; (8009208 <HAL_TIM_Base_Start_IT+0x9c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d004      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x58>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a13      	ldr	r2, [pc, #76]	; (800920c <HAL_TIM_Base_Start_IT+0xa0>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d111      	bne.n	80091e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b06      	cmp	r3, #6
 80091d4:	d010      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f042 0201 	orr.w	r2, r2, #1
 80091e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091e6:	e007      	b.n	80091f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f042 0201 	orr.w	r2, r2, #1
 80091f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	bc80      	pop	{r7}
 8009202:	4770      	bx	lr
 8009204:	40000400 	.word	0x40000400
 8009208:	40000800 	.word	0x40000800
 800920c:	40010800 	.word	0x40010800

08009210 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e08f      	b.n	8009344 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	d106      	bne.n	800923e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7fb fa93 	bl	8004764 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2202      	movs	r2, #2
 8009242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6812      	ldr	r2, [r2, #0]
 8009250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009254:	f023 0307 	bic.w	r3, r3, #7
 8009258:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3304      	adds	r3, #4
 8009262:	4619      	mov	r1, r3
 8009264:	4610      	mov	r0, r2
 8009266:	f000 fa9f 	bl	80097a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6a1b      	ldr	r3, [r3, #32]
 8009280:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	4313      	orrs	r3, r2
 800928a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009292:	f023 0303 	bic.w	r3, r3, #3
 8009296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	4313      	orrs	r3, r2
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80092b0:	f023 030c 	bic.w	r3, r3, #12
 80092b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	4313      	orrs	r3, r2
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	011a      	lsls	r2, r3, #4
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	031b      	lsls	r3, r3, #12
 80092e0:	4313      	orrs	r3, r2
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80092ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80092f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	4313      	orrs	r3, r2
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	4313      	orrs	r3, r2
 8009308:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800935c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009364:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d109      	bne.n	8009380 <HAL_TIM_Encoder_Start+0x34>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d001      	beq.n	8009376 <HAL_TIM_Encoder_Start+0x2a>
    {
      return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e050      	b.n	8009418 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2202      	movs	r2, #2
 800937a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800937e:	e01c      	b.n	80093ba <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b04      	cmp	r3, #4
 8009384:	d109      	bne.n	800939a <HAL_TIM_Encoder_Start+0x4e>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d001      	beq.n	8009390 <HAL_TIM_Encoder_Start+0x44>
    {
      return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e043      	b.n	8009418 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2202      	movs	r2, #2
 8009394:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009398:	e00f      	b.n	80093ba <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d102      	bne.n	80093a6 <HAL_TIM_Encoder_Start+0x5a>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d001      	beq.n	80093aa <HAL_TIM_Encoder_Start+0x5e>
    {
      return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e036      	b.n	8009418 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2202      	movs	r2, #2
 80093ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2202      	movs	r2, #2
 80093b6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <HAL_TIM_Encoder_Start+0x7c>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	d008      	beq.n	80093d8 <HAL_TIM_Encoder_Start+0x8c>
 80093c6:	e00f      	b.n	80093e8 <HAL_TIM_Encoder_Start+0x9c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2201      	movs	r2, #1
 80093ce:	2100      	movs	r1, #0
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fae1 	bl	8009998 <TIM_CCxChannelCmd>
      break;
 80093d6:	e016      	b.n	8009406 <HAL_TIM_Encoder_Start+0xba>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2201      	movs	r2, #1
 80093de:	2104      	movs	r1, #4
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 fad9 	bl	8009998 <TIM_CCxChannelCmd>
      break;
 80093e6:	e00e      	b.n	8009406 <HAL_TIM_Encoder_Start+0xba>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2201      	movs	r2, #1
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 fad1 	bl	8009998 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2201      	movs	r2, #1
 80093fc:	2104      	movs	r1, #4
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 faca 	bl	8009998 <TIM_CCxChannelCmd>
      break;
 8009404:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0201 	orr.w	r2, r2, #1
 8009414:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b02      	cmp	r3, #2
 8009434:	d122      	bne.n	800947c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b02      	cmp	r3, #2
 8009442:	d11b      	bne.n	800947c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f06f 0202 	mvn.w	r2, #2
 800944c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	f003 0303 	and.w	r3, r3, #3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f985 	bl	8009772 <HAL_TIM_IC_CaptureCallback>
 8009468:	e005      	b.n	8009476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f978 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f987 	bl	8009784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b04      	cmp	r3, #4
 8009488:	d122      	bne.n	80094d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f003 0304 	and.w	r3, r3, #4
 8009494:	2b04      	cmp	r3, #4
 8009496:	d11b      	bne.n	80094d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f06f 0204 	mvn.w	r2, #4
 80094a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2202      	movs	r2, #2
 80094a6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f95b 	bl	8009772 <HAL_TIM_IC_CaptureCallback>
 80094bc:	e005      	b.n	80094ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f94e 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f95d 	bl	8009784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f003 0308 	and.w	r3, r3, #8
 80094da:	2b08      	cmp	r3, #8
 80094dc:	d122      	bne.n	8009524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d11b      	bne.n	8009524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0208 	mvn.w	r2, #8
 80094f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2204      	movs	r2, #4
 80094fa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	f003 0303 	and.w	r3, r3, #3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f931 	bl	8009772 <HAL_TIM_IC_CaptureCallback>
 8009510:	e005      	b.n	800951e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f924 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f933 	bl	8009784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b10      	cmp	r3, #16
 8009530:	d122      	bne.n	8009578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b10      	cmp	r3, #16
 800953e:	d11b      	bne.n	8009578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f06f 0210 	mvn.w	r2, #16
 8009548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2208      	movs	r2, #8
 800954e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f907 	bl	8009772 <HAL_TIM_IC_CaptureCallback>
 8009564:	e005      	b.n	8009572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f8fa 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f909 	bl	8009784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b01      	cmp	r3, #1
 8009584:	d10e      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b01      	cmp	r3, #1
 8009592:	d107      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f06f 0201 	mvn.w	r2, #1
 800959c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7fa fa00 	bl	80039a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ae:	2b40      	cmp	r3, #64	; 0x40
 80095b0:	d10e      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095bc:	2b40      	cmp	r3, #64	; 0x40
 80095be:	d107      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f8e3 	bl	8009796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d101      	bne.n	80095f0 <HAL_TIM_ConfigClockSource+0x18>
 80095ec:	2302      	movs	r3, #2
 80095ee:	e0b3      	b.n	8009758 <HAL_TIM_ConfigClockSource+0x180>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2202      	movs	r2, #2
 80095fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800960e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009616:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009628:	d03e      	beq.n	80096a8 <HAL_TIM_ConfigClockSource+0xd0>
 800962a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800962e:	f200 8087 	bhi.w	8009740 <HAL_TIM_ConfigClockSource+0x168>
 8009632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009636:	f000 8085 	beq.w	8009744 <HAL_TIM_ConfigClockSource+0x16c>
 800963a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800963e:	d87f      	bhi.n	8009740 <HAL_TIM_ConfigClockSource+0x168>
 8009640:	2b70      	cmp	r3, #112	; 0x70
 8009642:	d01a      	beq.n	800967a <HAL_TIM_ConfigClockSource+0xa2>
 8009644:	2b70      	cmp	r3, #112	; 0x70
 8009646:	d87b      	bhi.n	8009740 <HAL_TIM_ConfigClockSource+0x168>
 8009648:	2b60      	cmp	r3, #96	; 0x60
 800964a:	d050      	beq.n	80096ee <HAL_TIM_ConfigClockSource+0x116>
 800964c:	2b60      	cmp	r3, #96	; 0x60
 800964e:	d877      	bhi.n	8009740 <HAL_TIM_ConfigClockSource+0x168>
 8009650:	2b50      	cmp	r3, #80	; 0x50
 8009652:	d03c      	beq.n	80096ce <HAL_TIM_ConfigClockSource+0xf6>
 8009654:	2b50      	cmp	r3, #80	; 0x50
 8009656:	d873      	bhi.n	8009740 <HAL_TIM_ConfigClockSource+0x168>
 8009658:	2b40      	cmp	r3, #64	; 0x40
 800965a:	d058      	beq.n	800970e <HAL_TIM_ConfigClockSource+0x136>
 800965c:	2b40      	cmp	r3, #64	; 0x40
 800965e:	d86f      	bhi.n	8009740 <HAL_TIM_ConfigClockSource+0x168>
 8009660:	2b30      	cmp	r3, #48	; 0x30
 8009662:	d064      	beq.n	800972e <HAL_TIM_ConfigClockSource+0x156>
 8009664:	2b30      	cmp	r3, #48	; 0x30
 8009666:	d86b      	bhi.n	8009740 <HAL_TIM_ConfigClockSource+0x168>
 8009668:	2b20      	cmp	r3, #32
 800966a:	d060      	beq.n	800972e <HAL_TIM_ConfigClockSource+0x156>
 800966c:	2b20      	cmp	r3, #32
 800966e:	d867      	bhi.n	8009740 <HAL_TIM_ConfigClockSource+0x168>
 8009670:	2b00      	cmp	r3, #0
 8009672:	d05c      	beq.n	800972e <HAL_TIM_ConfigClockSource+0x156>
 8009674:	2b10      	cmp	r3, #16
 8009676:	d05a      	beq.n	800972e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009678:	e062      	b.n	8009740 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	6899      	ldr	r1, [r3, #8]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f000 f966 	bl	800995a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800969c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	609a      	str	r2, [r3, #8]
      break;
 80096a6:	e04e      	b.n	8009746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	6899      	ldr	r1, [r3, #8]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f000 f94f 	bl	800995a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096ca:	609a      	str	r2, [r3, #8]
      break;
 80096cc:	e03b      	b.n	8009746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6818      	ldr	r0, [r3, #0]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	6859      	ldr	r1, [r3, #4]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	461a      	mov	r2, r3
 80096dc:	f000 f8c6 	bl	800986c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2150      	movs	r1, #80	; 0x50
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 f91d 	bl	8009926 <TIM_ITRx_SetConfig>
      break;
 80096ec:	e02b      	b.n	8009746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	6859      	ldr	r1, [r3, #4]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	461a      	mov	r2, r3
 80096fc:	f000 f8e4 	bl	80098c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2160      	movs	r1, #96	; 0x60
 8009706:	4618      	mov	r0, r3
 8009708:	f000 f90d 	bl	8009926 <TIM_ITRx_SetConfig>
      break;
 800970c:	e01b      	b.n	8009746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	6859      	ldr	r1, [r3, #4]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	461a      	mov	r2, r3
 800971c:	f000 f8a6 	bl	800986c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2140      	movs	r1, #64	; 0x40
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f8fd 	bl	8009926 <TIM_ITRx_SetConfig>
      break;
 800972c:	e00b      	b.n	8009746 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4619      	mov	r1, r3
 8009738:	4610      	mov	r0, r2
 800973a:	f000 f8f4 	bl	8009926 <TIM_ITRx_SetConfig>
        break;
 800973e:	e002      	b.n	8009746 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009740:	bf00      	nop
 8009742:	e000      	b.n	8009746 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009744:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	bc80      	pop	{r7}
 8009770:	4770      	bx	lr

08009772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009772:	b480      	push	{r7}
 8009774:	b083      	sub	sp, #12
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	bc80      	pop	{r7}
 8009782:	4770      	bx	lr

08009784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	bc80      	pop	{r7}
 8009794:	4770      	bx	lr

08009796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800979e:	bf00      	nop
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bc80      	pop	{r7}
 80097a6:	4770      	bx	lr

080097a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097be:	d007      	beq.n	80097d0 <TIM_Base_SetConfig+0x28>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a25      	ldr	r2, [pc, #148]	; (8009858 <TIM_Base_SetConfig+0xb0>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d003      	beq.n	80097d0 <TIM_Base_SetConfig+0x28>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a24      	ldr	r2, [pc, #144]	; (800985c <TIM_Base_SetConfig+0xb4>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d108      	bne.n	80097e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	4313      	orrs	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e8:	d013      	beq.n	8009812 <TIM_Base_SetConfig+0x6a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a1a      	ldr	r2, [pc, #104]	; (8009858 <TIM_Base_SetConfig+0xb0>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d00f      	beq.n	8009812 <TIM_Base_SetConfig+0x6a>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a19      	ldr	r2, [pc, #100]	; (800985c <TIM_Base_SetConfig+0xb4>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d00b      	beq.n	8009812 <TIM_Base_SetConfig+0x6a>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a18      	ldr	r2, [pc, #96]	; (8009860 <TIM_Base_SetConfig+0xb8>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d007      	beq.n	8009812 <TIM_Base_SetConfig+0x6a>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a17      	ldr	r2, [pc, #92]	; (8009864 <TIM_Base_SetConfig+0xbc>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d003      	beq.n	8009812 <TIM_Base_SetConfig+0x6a>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a16      	ldr	r2, [pc, #88]	; (8009868 <TIM_Base_SetConfig+0xc0>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d108      	bne.n	8009824 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	4313      	orrs	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	615a      	str	r2, [r3, #20]
}
 800984e:	bf00      	nop
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	bc80      	pop	{r7}
 8009856:	4770      	bx	lr
 8009858:	40000400 	.word	0x40000400
 800985c:	40000800 	.word	0x40000800
 8009860:	40010800 	.word	0x40010800
 8009864:	40010c00 	.word	0x40010c00
 8009868:	40011000 	.word	0x40011000

0800986c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	f023 0201 	bic.w	r2, r3, #1
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	4313      	orrs	r3, r2
 80098a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f023 030a 	bic.w	r3, r3, #10
 80098a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	621a      	str	r2, [r3, #32]
}
 80098be:	bf00      	nop
 80098c0:	371c      	adds	r7, #28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bc80      	pop	{r7}
 80098c6:	4770      	bx	lr

080098c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	f023 0210 	bic.w	r2, r3, #16
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	031b      	lsls	r3, r3, #12
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009904:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	011b      	lsls	r3, r3, #4
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	4313      	orrs	r3, r2
 800990e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	621a      	str	r2, [r3, #32]
}
 800991c:	bf00      	nop
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	bc80      	pop	{r7}
 8009924:	4770      	bx	lr

08009926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009926:	b480      	push	{r7}
 8009928:	b085      	sub	sp, #20
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800993c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	4313      	orrs	r3, r2
 8009944:	f043 0307 	orr.w	r3, r3, #7
 8009948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	609a      	str	r2, [r3, #8]
}
 8009950:	bf00      	nop
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	bc80      	pop	{r7}
 8009958:	4770      	bx	lr

0800995a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800995a:	b480      	push	{r7}
 800995c:	b087      	sub	sp, #28
 800995e:	af00      	add	r7, sp, #0
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	607a      	str	r2, [r7, #4]
 8009966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	021a      	lsls	r2, r3, #8
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	431a      	orrs	r2, r3
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	4313      	orrs	r3, r2
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	4313      	orrs	r3, r2
 8009986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	609a      	str	r2, [r3, #8]
}
 800998e:	bf00      	nop
 8009990:	371c      	adds	r7, #28
 8009992:	46bd      	mov	sp, r7
 8009994:	bc80      	pop	{r7}
 8009996:	4770      	bx	lr

08009998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f003 031f 	and.w	r3, r3, #31
 80099aa:	2201      	movs	r2, #1
 80099ac:	fa02 f303 	lsl.w	r3, r2, r3
 80099b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a1a      	ldr	r2, [r3, #32]
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	43db      	mvns	r3, r3
 80099ba:	401a      	ands	r2, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6a1a      	ldr	r2, [r3, #32]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f003 031f 	and.w	r3, r3, #31
 80099ca:	6879      	ldr	r1, [r7, #4]
 80099cc:	fa01 f303 	lsl.w	r3, r1, r3
 80099d0:	431a      	orrs	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	621a      	str	r2, [r3, #32]
}
 80099d6:	bf00      	nop
 80099d8:	371c      	adds	r7, #28
 80099da:	46bd      	mov	sp, r7
 80099dc:	bc80      	pop	{r7}
 80099de:	4770      	bx	lr

080099e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d101      	bne.n	80099f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099f4:	2302      	movs	r3, #2
 80099f6:	e046      	b.n	8009a86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2202      	movs	r2, #2
 8009a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a3a:	d00e      	beq.n	8009a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a13      	ldr	r2, [pc, #76]	; (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d009      	beq.n	8009a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a12      	ldr	r2, [pc, #72]	; (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d004      	beq.n	8009a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a10      	ldr	r2, [pc, #64]	; (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d10c      	bne.n	8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bc80      	pop	{r7}
 8009a8e:	4770      	bx	lr
 8009a90:	40000400 	.word	0x40000400
 8009a94:	40000800 	.word	0x40000800
 8009a98:	40010800 	.word	0x40010800

08009a9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009aac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009ab0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bc80      	pop	{r7}
 8009ac6:	4770      	bx	lr

08009ac8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009ad0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009ad4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	43db      	mvns	r3, r3
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bc80      	pop	{r7}
 8009afa:	4770      	bx	lr

08009afc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009afc:	b084      	sub	sp, #16
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	f107 0014 	add.w	r0, r7, #20
 8009b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bc80      	pop	{r7}
 8009b38:	b004      	add	sp, #16
 8009b3a:	4770      	bx	lr

08009b3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b09b      	sub	sp, #108	; 0x6c
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b62:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	78db      	ldrb	r3, [r3, #3]
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d81f      	bhi.n	8009bae <USB_ActivateEndpoint+0x72>
 8009b6e:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <USB_ActivateEndpoint+0x38>)
 8009b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b74:	08009b85 	.word	0x08009b85
 8009b78:	08009ba1 	.word	0x08009ba1
 8009b7c:	08009bb7 	.word	0x08009bb7
 8009b80:	08009b93 	.word	0x08009b93
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009b84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b8c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009b90:	e012      	b.n	8009bb8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009b92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009b96:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009b9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009b9e:	e00b      	b.n	8009bb8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009ba0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009ba4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ba8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009bac:	e004      	b.n	8009bb8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8009bb4:	e000      	b.n	8009bb8 <USB_ActivateEndpoint+0x7c>
      break;
 8009bb6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	441a      	add	r2, r3
 8009bc2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	441a      	add	r2, r3
 8009c08:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	7b1b      	ldrb	r3, [r3, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f040 8149 	bne.w	8009ebc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	785b      	ldrb	r3, [r3, #1]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f000 8084 	beq.w	8009d3c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	617b      	str	r3, [r7, #20]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	461a      	mov	r2, r3
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	4413      	add	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	011a      	lsls	r2, r3, #4
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c56:	613b      	str	r3, [r7, #16]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	88db      	ldrh	r3, [r3, #6]
 8009c5c:	085b      	lsrs	r3, r3, #1
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	005b      	lsls	r3, r3, #1
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	81fb      	strh	r3, [r7, #14]
 8009c76:	89fb      	ldrh	r3, [r7, #14]
 8009c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d01b      	beq.n	8009cb8 <USB_ActivateEndpoint+0x17c>
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	881b      	ldrh	r3, [r3, #0]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c96:	81bb      	strh	r3, [r7, #12]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	441a      	add	r2, r3
 8009ca2:	89bb      	ldrh	r3, [r7, #12]
 8009ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	78db      	ldrb	r3, [r3, #3]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d020      	beq.n	8009d02 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	881b      	ldrh	r3, [r3, #0]
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cd6:	813b      	strh	r3, [r7, #8]
 8009cd8:	893b      	ldrh	r3, [r7, #8]
 8009cda:	f083 0320 	eor.w	r3, r3, #32
 8009cde:	813b      	strh	r3, [r7, #8]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	441a      	add	r2, r3
 8009cea:	893b      	ldrh	r3, [r7, #8]
 8009cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	8013      	strh	r3, [r2, #0]
 8009d00:	e27f      	b.n	800a202 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d18:	817b      	strh	r3, [r7, #10]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	441a      	add	r2, r3
 8009d24:	897b      	ldrh	r3, [r7, #10]
 8009d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	8013      	strh	r3, [r2, #0]
 8009d3a:	e262      	b.n	800a202 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	461a      	mov	r2, r3
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	4413      	add	r3, r2
 8009d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	011a      	lsls	r2, r3, #4
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	4413      	add	r3, r2
 8009d5a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	88db      	ldrh	r3, [r3, #6]
 8009d64:	085b      	lsrs	r3, r3, #1
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	4413      	add	r3, r2
 8009d82:	627b      	str	r3, [r7, #36]	; 0x24
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	011a      	lsls	r2, r3, #4
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d92:	623b      	str	r3, [r7, #32]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d112      	bne.n	8009dc2 <USB_ActivateEndpoint+0x286>
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	801a      	strh	r2, [r3, #0]
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	801a      	strh	r2, [r3, #0]
 8009dc0:	e02f      	b.n	8009e22 <USB_ActivateEndpoint+0x2e6>
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8009dc8:	d813      	bhi.n	8009df2 <USB_ActivateEndpoint+0x2b6>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	085b      	lsrs	r3, r3, #1
 8009dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <USB_ActivateEndpoint+0x2a8>
 8009dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009de0:	3301      	adds	r3, #1
 8009de2:	663b      	str	r3, [r7, #96]	; 0x60
 8009de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	029b      	lsls	r3, r3, #10
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	801a      	strh	r2, [r3, #0]
 8009df0:	e017      	b.n	8009e22 <USB_ActivateEndpoint+0x2e6>
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	095b      	lsrs	r3, r3, #5
 8009df8:	663b      	str	r3, [r7, #96]	; 0x60
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	f003 031f 	and.w	r3, r3, #31
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d102      	bne.n	8009e0c <USB_ActivateEndpoint+0x2d0>
 8009e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	663b      	str	r3, [r7, #96]	; 0x60
 8009e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	029b      	lsls	r3, r3, #10
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	83fb      	strh	r3, [r7, #30]
 8009e30:	8bfb      	ldrh	r3, [r7, #30]
 8009e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d01b      	beq.n	8009e72 <USB_ActivateEndpoint+0x336>
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e50:	83bb      	strh	r3, [r7, #28]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	441a      	add	r2, r3
 8009e5c:	8bbb      	ldrh	r3, [r7, #28]
 8009e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e88:	837b      	strh	r3, [r7, #26]
 8009e8a:	8b7b      	ldrh	r3, [r7, #26]
 8009e8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e90:	837b      	strh	r3, [r7, #26]
 8009e92:	8b7b      	ldrh	r3, [r7, #26]
 8009e94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e98:	837b      	strh	r3, [r7, #26]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	441a      	add	r2, r3
 8009ea4:	8b7b      	ldrh	r3, [r7, #26]
 8009ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	8013      	strh	r3, [r2, #0]
 8009eba:	e1a2      	b.n	800a202 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	881b      	ldrh	r3, [r3, #0]
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	441a      	add	r2, r3
 8009ee0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	65bb      	str	r3, [r7, #88]	; 0x58
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	461a      	mov	r2, r3
 8009f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f08:	4413      	add	r3, r2
 8009f0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	011a      	lsls	r2, r3, #4
 8009f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	891b      	ldrh	r3, [r3, #8]
 8009f20:	085b      	lsrs	r3, r3, #1
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f2a:	801a      	strh	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	653b      	str	r3, [r7, #80]	; 0x50
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	461a      	mov	r2, r3
 8009f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f3c:	4413      	add	r3, r2
 8009f3e:	653b      	str	r3, [r7, #80]	; 0x50
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	011a      	lsls	r2, r3, #4
 8009f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	895b      	ldrh	r3, [r3, #10]
 8009f54:	085b      	lsrs	r3, r3, #1
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f5e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	785b      	ldrb	r3, [r3, #1]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f040 8091 	bne.w	800a08c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009f78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d01b      	beq.n	8009fba <USB_ActivateEndpoint+0x47e>
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f98:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	441a      	add	r2, r3
 8009fa4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	881b      	ldrh	r3, [r3, #0]
 8009fc6:	873b      	strh	r3, [r7, #56]	; 0x38
 8009fc8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d01b      	beq.n	800a00a <USB_ActivateEndpoint+0x4ce>
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	441a      	add	r2, r3
 8009ff4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a002:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a006:	b29b      	uxth	r3, r3
 800a008:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	b29b      	uxth	r3, r3
 800a018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a01c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a020:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a022:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a024:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a028:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a02a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a02c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a030:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	441a      	add	r2, r3
 800a03c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a03e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a04a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a04e:	b29b      	uxth	r3, r3
 800a050:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a068:	867b      	strh	r3, [r7, #50]	; 0x32
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	441a      	add	r2, r3
 800a074:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a07a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a07e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a086:	b29b      	uxth	r3, r3
 800a088:	8013      	strh	r3, [r2, #0]
 800a08a:	e0ba      	b.n	800a202 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a09c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a0a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d01d      	beq.n	800a0e4 <USB_ActivateEndpoint+0x5a8>
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	881b      	ldrh	r3, [r3, #0]
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	441a      	add	r2, r3
 800a0cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a0d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a0f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d01d      	beq.n	800a13c <USB_ActivateEndpoint+0x600>
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a116:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	441a      	add	r2, r3
 800a124:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a12c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a138:	b29b      	uxth	r3, r3
 800a13a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	78db      	ldrb	r3, [r3, #3]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d024      	beq.n	800a18e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	b29b      	uxth	r3, r3
 800a152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a15a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a15e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a162:	f083 0320 	eor.w	r3, r3, #32
 800a166:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	441a      	add	r2, r3
 800a174:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a17c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a188:	b29b      	uxth	r3, r3
 800a18a:	8013      	strh	r3, [r2, #0]
 800a18c:	e01d      	b.n	800a1ca <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	441a      	add	r2, r3
 800a1b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a1b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	881b      	ldrh	r3, [r3, #0]
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	441a      	add	r2, r3
 800a1ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a1ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800a202:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a206:	4618      	mov	r0, r3
 800a208:	376c      	adds	r7, #108	; 0x6c
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bc80      	pop	{r7}
 800a20e:	4770      	bx	lr

0800a210 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a210:	b480      	push	{r7}
 800a212:	b08d      	sub	sp, #52	; 0x34
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	7b1b      	ldrb	r3, [r3, #12]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f040 808e 	bne.w	800a340 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	785b      	ldrb	r3, [r3, #1]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d044      	beq.n	800a2b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	81bb      	strh	r3, [r7, #12]
 800a23a:	89bb      	ldrh	r3, [r7, #12]
 800a23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01b      	beq.n	800a27c <USB_DeactivateEndpoint+0x6c>
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	b29b      	uxth	r3, r3
 800a252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a25a:	817b      	strh	r3, [r7, #10]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	441a      	add	r2, r3
 800a266:	897b      	ldrh	r3, [r7, #10]
 800a268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a26c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a274:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a278:	b29b      	uxth	r3, r3
 800a27a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a28e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a292:	813b      	strh	r3, [r7, #8]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	441a      	add	r2, r3
 800a29e:	893b      	ldrh	r3, [r7, #8]
 800a2a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	8013      	strh	r3, [r2, #0]
 800a2b4:	e192      	b.n	800a5dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	827b      	strh	r3, [r7, #18]
 800a2c4:	8a7b      	ldrh	r3, [r7, #18]
 800a2c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d01b      	beq.n	800a306 <USB_DeactivateEndpoint+0xf6>
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e4:	823b      	strh	r3, [r7, #16]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	441a      	add	r2, r3
 800a2f0:	8a3b      	ldrh	r3, [r7, #16]
 800a2f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a302:	b29b      	uxth	r3, r3
 800a304:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4413      	add	r3, r2
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	b29b      	uxth	r3, r3
 800a314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a31c:	81fb      	strh	r3, [r7, #14]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	441a      	add	r2, r3
 800a328:	89fb      	ldrh	r3, [r7, #14]
 800a32a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a32e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	8013      	strh	r3, [r2, #0]
 800a33e:	e14d      	b.n	800a5dc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	785b      	ldrb	r3, [r3, #1]
 800a344:	2b00      	cmp	r3, #0
 800a346:	f040 80a5 	bne.w	800a494 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	881b      	ldrh	r3, [r3, #0]
 800a356:	843b      	strh	r3, [r7, #32]
 800a358:	8c3b      	ldrh	r3, [r7, #32]
 800a35a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d01b      	beq.n	800a39a <USB_DeactivateEndpoint+0x18a>
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	b29b      	uxth	r3, r3
 800a370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a378:	83fb      	strh	r3, [r7, #30]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	441a      	add	r2, r3
 800a384:	8bfb      	ldrh	r3, [r7, #30]
 800a386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a38a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a38e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a396:	b29b      	uxth	r3, r3
 800a398:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	83bb      	strh	r3, [r7, #28]
 800a3a8:	8bbb      	ldrh	r3, [r7, #28]
 800a3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d01b      	beq.n	800a3ea <USB_DeactivateEndpoint+0x1da>
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c8:	837b      	strh	r3, [r7, #26]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	441a      	add	r2, r3
 800a3d4:	8b7b      	ldrh	r3, [r7, #26]
 800a3d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a400:	833b      	strh	r3, [r7, #24]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	441a      	add	r2, r3
 800a40c:	8b3b      	ldrh	r3, [r7, #24]
 800a40e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a41a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a41e:	b29b      	uxth	r3, r3
 800a420:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a438:	82fb      	strh	r3, [r7, #22]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	441a      	add	r2, r3
 800a444:	8afb      	ldrh	r3, [r7, #22]
 800a446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a44a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a44e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a456:	b29b      	uxth	r3, r3
 800a458:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	b29b      	uxth	r3, r3
 800a468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a46c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a470:	82bb      	strh	r3, [r7, #20]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	441a      	add	r2, r3
 800a47c:	8abb      	ldrh	r3, [r7, #20]
 800a47e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a48a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a48e:	b29b      	uxth	r3, r3
 800a490:	8013      	strh	r3, [r2, #0]
 800a492:	e0a3      	b.n	800a5dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	881b      	ldrh	r3, [r3, #0]
 800a4a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a4a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d01b      	beq.n	800a4e4 <USB_DeactivateEndpoint+0x2d4>
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	881b      	ldrh	r3, [r3, #0]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	441a      	add	r2, r3
 800a4ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a4d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4413      	add	r3, r2
 800a4ee:	881b      	ldrh	r3, [r3, #0]
 800a4f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a4f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01b      	beq.n	800a534 <USB_DeactivateEndpoint+0x324>
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a50e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a512:	853b      	strh	r3, [r7, #40]	; 0x28
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	441a      	add	r2, r3
 800a51e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a52c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a530:	b29b      	uxth	r3, r3
 800a532:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4413      	add	r3, r2
 800a53e:	881b      	ldrh	r3, [r3, #0]
 800a540:	b29b      	uxth	r3, r3
 800a542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a54a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	441a      	add	r2, r3
 800a556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a55c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a560:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a568:	b29b      	uxth	r3, r3
 800a56a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	b29b      	uxth	r3, r3
 800a57a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a57e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a582:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	441a      	add	r2, r3
 800a58e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ba:	847b      	strh	r3, [r7, #34]	; 0x22
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	441a      	add	r2, r3
 800a5c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3734      	adds	r7, #52	; 0x34
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bc80      	pop	{r7}
 800a5e6:	4770      	bx	lr

0800a5e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b0cc      	sub	sp, #304	; 0x130
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5f6:	6018      	str	r0, [r3, #0]
 800a5f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a600:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	f041 817d 	bne.w	800b90e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	699a      	ldr	r2, [r3, #24]
 800a620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d908      	bls.n	800a642 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a640:	e007      	b.n	800a652 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	7b1b      	ldrb	r3, [r3, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d152      	bne.n	800a708 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6959      	ldr	r1, [r3, #20]
 800a66e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	88da      	ldrh	r2, [r3, #6]
 800a67a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a67e:	b29b      	uxth	r3, r3
 800a680:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a684:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a688:	6800      	ldr	r0, [r0, #0]
 800a68a:	f001 ff0e 	bl	800c4aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a68e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a692:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a696:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a69a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a69e:	6812      	ldr	r2, [r2, #0]
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a6bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a6c0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800a6c4:	6812      	ldr	r2, [r2, #0]
 800a6c6:	440a      	add	r2, r1
 800a6c8:	601a      	str	r2, [r3, #0]
 800a6ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	011a      	lsls	r2, r3, #4
 800a6d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6dc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a6e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	801a      	strh	r2, [r3, #0]
 800a704:	f001 b8b5 	b.w	800b872 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a70c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	78db      	ldrb	r3, [r3, #3]
 800a714:	2b02      	cmp	r3, #2
 800a716:	f040 84c6 	bne.w	800b0a6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a71a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a71e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6a1a      	ldr	r2, [r3, #32]
 800a726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a72a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	429a      	cmp	r2, r3
 800a734:	f240 8443 	bls.w	800afbe <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a73c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	4413      	add	r3, r2
 800a752:	881b      	ldrh	r3, [r3, #0]
 800a754:	b29b      	uxth	r3, r3
 800a756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a75a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a75e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a770:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	441a      	add	r2, r3
 800a77c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a788:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a78c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a790:	b29b      	uxth	r3, r3
 800a792:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6a1a      	ldr	r2, [r3, #32]
 800a7a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7a4:	1ad2      	subs	r2, r2, r3
 800a7a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a7b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 823e 	beq.w	800ac56 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a7da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7de:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a7e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a7e6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a7ea:	6812      	ldr	r2, [r2, #0]
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	785b      	ldrb	r3, [r3, #1]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f040 809a 	bne.w	800a934 <USB_EPStartXfer+0x34c>
 800a800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a808:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a80c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a810:	6812      	ldr	r2, [r2, #0]
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a818:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a822:	b29b      	uxth	r3, r3
 800a824:	4619      	mov	r1, r3
 800a826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a82a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a82e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a832:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800a836:	6812      	ldr	r2, [r2, #0]
 800a838:	440a      	add	r2, r1
 800a83a:	601a      	str	r2, [r3, #0]
 800a83c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	011a      	lsls	r2, r3, #4
 800a84a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a84e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4413      	add	r3, r2
 800a856:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a85a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a85e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d122      	bne.n	800a8b2 <USB_EPStartXfer+0x2ca>
 800a86c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a870:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	b29b      	uxth	r3, r3
 800a87a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a87e:	b29a      	uxth	r2, r3
 800a880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a884:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	801a      	strh	r2, [r3, #0]
 800a88c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a890:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	b29b      	uxth	r3, r3
 800a89a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a89e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	801a      	strh	r2, [r3, #0]
 800a8b0:	e079      	b.n	800a9a6 <USB_EPStartXfer+0x3be>
 800a8b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8b6:	2b3e      	cmp	r3, #62	; 0x3e
 800a8b8:	d81b      	bhi.n	800a8f2 <USB_EPStartXfer+0x30a>
 800a8ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8be:	085b      	lsrs	r3, r3, #1
 800a8c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a8c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d004      	beq.n	800a8da <USB_EPStartXfer+0x2f2>
 800a8d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a8da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	029b      	lsls	r3, r3, #10
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	801a      	strh	r2, [r3, #0]
 800a8f0:	e059      	b.n	800a9a6 <USB_EPStartXfer+0x3be>
 800a8f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8f6:	095b      	lsrs	r3, r3, #5
 800a8f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a8fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a900:	f003 031f 	and.w	r3, r3, #31
 800a904:	2b00      	cmp	r3, #0
 800a906:	d104      	bne.n	800a912 <USB_EPStartXfer+0x32a>
 800a908:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a90c:	3b01      	subs	r3, #1
 800a90e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a912:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a916:	b29b      	uxth	r3, r3
 800a918:	029b      	lsls	r3, r3, #10
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a924:	b29a      	uxth	r2, r3
 800a926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a92a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	801a      	strh	r2, [r3, #0]
 800a932:	e038      	b.n	800a9a6 <USB_EPStartXfer+0x3be>
 800a934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	785b      	ldrb	r3, [r3, #1]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d130      	bne.n	800a9a6 <USB_EPStartXfer+0x3be>
 800a944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a948:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a952:	b29b      	uxth	r3, r3
 800a954:	4619      	mov	r1, r3
 800a956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a95a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a95e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a962:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800a966:	6812      	ldr	r2, [r2, #0]
 800a968:	440a      	add	r2, r1
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	011a      	lsls	r2, r3, #4
 800a97a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a97e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4413      	add	r3, r2
 800a986:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a98a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a98e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a998:	b29a      	uxth	r2, r3
 800a99a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a99e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a9a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	895b      	ldrh	r3, [r3, #10]
 800a9b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6959      	ldr	r1, [r3, #20]
 800a9c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a9cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a9d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a9d4:	6800      	ldr	r0, [r0, #0]
 800a9d6:	f001 fd68 	bl	800c4aa <USB_WritePMA>
            ep->xfer_buff += len;
 800a9da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	695a      	ldr	r2, [r3, #20]
 800a9e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9ea:	441a      	add	r2, r3
 800a9ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a9f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6a1a      	ldr	r2, [r3, #32]
 800aa04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d90f      	bls.n	800aa34 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800aa14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6a1a      	ldr	r2, [r3, #32]
 800aa20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa24:	1ad2      	subs	r2, r2, r3
 800aa26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	621a      	str	r2, [r3, #32]
 800aa32:	e00e      	b.n	800aa52 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800aa34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800aa44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aa52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	785b      	ldrb	r3, [r3, #1]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f040 809a 	bne.w	800ab98 <USB_EPStartXfer+0x5b0>
 800aa64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800aa6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aa70:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800aa74:	6812      	ldr	r2, [r2, #0]
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	4619      	mov	r1, r3
 800aa8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa8e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800aa92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aa96:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800aa9a:	6812      	ldr	r2, [r2, #0]
 800aa9c:	440a      	add	r2, r1
 800aa9e:	601a      	str	r2, [r3, #0]
 800aaa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	011a      	lsls	r2, r3, #4
 800aaae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aab2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4413      	add	r3, r2
 800aaba:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800aabe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aac2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d122      	bne.n	800ab16 <USB_EPStartXfer+0x52e>
 800aad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aad4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	b29b      	uxth	r3, r3
 800aade:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aae8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	801a      	strh	r2, [r3, #0]
 800aaf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaf4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	801a      	strh	r2, [r3, #0]
 800ab14:	e083      	b.n	800ac1e <USB_EPStartXfer+0x636>
 800ab16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab1a:	2b3e      	cmp	r3, #62	; 0x3e
 800ab1c:	d81b      	bhi.n	800ab56 <USB_EPStartXfer+0x56e>
 800ab1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab22:	085b      	lsrs	r3, r3, #1
 800ab24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ab28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d004      	beq.n	800ab3e <USB_EPStartXfer+0x556>
 800ab34:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ab38:	3301      	adds	r3, #1
 800ab3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ab3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	029b      	lsls	r3, r3, #10
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	801a      	strh	r2, [r3, #0]
 800ab54:	e063      	b.n	800ac1e <USB_EPStartXfer+0x636>
 800ab56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab5a:	095b      	lsrs	r3, r3, #5
 800ab5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ab60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab64:	f003 031f 	and.w	r3, r3, #31
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d104      	bne.n	800ab76 <USB_EPStartXfer+0x58e>
 800ab6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ab70:	3b01      	subs	r3, #1
 800ab72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ab76:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	029b      	lsls	r3, r3, #10
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	801a      	strh	r2, [r3, #0]
 800ab96:	e042      	b.n	800ac1e <USB_EPStartXfer+0x636>
 800ab98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	785b      	ldrb	r3, [r3, #1]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d13a      	bne.n	800ac1e <USB_EPStartXfer+0x636>
 800aba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800abb0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800abb4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800abb8:	6812      	ldr	r2, [r2, #0]
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abca:	b29b      	uxth	r3, r3
 800abcc:	4619      	mov	r1, r3
 800abce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800abd6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800abda:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800abde:	6812      	ldr	r2, [r2, #0]
 800abe0:	440a      	add	r2, r1
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	011a      	lsls	r2, r3, #4
 800abf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abf6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4413      	add	r3, r2
 800abfe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800ac02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ac1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	891b      	ldrh	r3, [r3, #8]
 800ac2a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	6959      	ldr	r1, [r3, #20]
 800ac3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ac44:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ac48:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ac4c:	6800      	ldr	r0, [r0, #0]
 800ac4e:	f001 fc2c 	bl	800c4aa <USB_WritePMA>
 800ac52:	f000 be0e 	b.w	800b872 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	785b      	ldrb	r3, [r3, #1]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d16d      	bne.n	800ad42 <USB_EPStartXfer+0x75a>
 800ac66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	461a      	mov	r2, r3
 800ac84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac86:	4413      	add	r3, r2
 800ac88:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	011a      	lsls	r2, r3, #4
 800ac98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aca0:	647b      	str	r3, [r7, #68]	; 0x44
 800aca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d112      	bne.n	800acd0 <USB_EPStartXfer+0x6e8>
 800acaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	b29b      	uxth	r3, r3
 800acb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acb8:	801a      	strh	r2, [r3, #0]
 800acba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acc8:	b29a      	uxth	r2, r3
 800acca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800accc:	801a      	strh	r2, [r3, #0]
 800acce:	e063      	b.n	800ad98 <USB_EPStartXfer+0x7b0>
 800acd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acd4:	2b3e      	cmp	r3, #62	; 0x3e
 800acd6:	d817      	bhi.n	800ad08 <USB_EPStartXfer+0x720>
 800acd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acdc:	085b      	lsrs	r3, r3, #1
 800acde:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ace2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	2b00      	cmp	r3, #0
 800acec:	d004      	beq.n	800acf8 <USB_EPStartXfer+0x710>
 800acee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800acf2:	3301      	adds	r3, #1
 800acf4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800acf8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	029b      	lsls	r3, r3, #10
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad04:	801a      	strh	r2, [r3, #0]
 800ad06:	e047      	b.n	800ad98 <USB_EPStartXfer+0x7b0>
 800ad08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad0c:	095b      	lsrs	r3, r3, #5
 800ad0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ad12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad16:	f003 031f 	and.w	r3, r3, #31
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d104      	bne.n	800ad28 <USB_EPStartXfer+0x740>
 800ad1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ad22:	3b01      	subs	r3, #1
 800ad24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ad28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	029b      	lsls	r3, r3, #10
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad3e:	801a      	strh	r2, [r3, #0]
 800ad40:	e02a      	b.n	800ad98 <USB_EPStartXfer+0x7b0>
 800ad42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	785b      	ldrb	r3, [r3, #1]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d122      	bne.n	800ad98 <USB_EPStartXfer+0x7b0>
 800ad52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	653b      	str	r3, [r7, #80]	; 0x50
 800ad5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	461a      	mov	r2, r3
 800ad70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad72:	4413      	add	r3, r2
 800ad74:	653b      	str	r3, [r7, #80]	; 0x50
 800ad76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	011a      	lsls	r2, r3, #4
 800ad84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad86:	4413      	add	r3, r2
 800ad88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ad98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	891b      	ldrh	r3, [r3, #8]
 800ada4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ada8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6959      	ldr	r1, [r3, #20]
 800adb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adb8:	b29b      	uxth	r3, r3
 800adba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800adbe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800adc2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800adc6:	6800      	ldr	r0, [r0, #0]
 800adc8:	f001 fb6f 	bl	800c4aa <USB_WritePMA>
            ep->xfer_buff += len;
 800adcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800add0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	695a      	ldr	r2, [r3, #20]
 800add8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800addc:	441a      	add	r2, r3
 800adde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ade2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800adea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6a1a      	ldr	r2, [r3, #32]
 800adf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d90f      	bls.n	800ae26 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800ae06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6a1a      	ldr	r2, [r3, #32]
 800ae12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae16:	1ad2      	subs	r2, r2, r3
 800ae18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	621a      	str	r2, [r3, #32]
 800ae24:	e00e      	b.n	800ae44 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800ae26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800ae36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2200      	movs	r2, #0
 800ae42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	643b      	str	r3, [r7, #64]	; 0x40
 800ae50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	785b      	ldrb	r3, [r3, #1]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d16d      	bne.n	800af3c <USB_EPStartXfer+0x954>
 800ae60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae80:	4413      	add	r3, r2
 800ae82:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	011a      	lsls	r2, r3, #4
 800ae92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae94:	4413      	add	r3, r2
 800ae96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ae9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d112      	bne.n	800aeca <USB_EPStartXfer+0x8e2>
 800aea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb2:	801a      	strh	r2, [r3, #0]
 800aeb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb6:	881b      	ldrh	r3, [r3, #0]
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec6:	801a      	strh	r2, [r3, #0]
 800aec8:	e05d      	b.n	800af86 <USB_EPStartXfer+0x99e>
 800aeca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aece:	2b3e      	cmp	r3, #62	; 0x3e
 800aed0:	d817      	bhi.n	800af02 <USB_EPStartXfer+0x91a>
 800aed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aed6:	085b      	lsrs	r3, r3, #1
 800aed8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800aedc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d004      	beq.n	800aef2 <USB_EPStartXfer+0x90a>
 800aee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aeec:	3301      	adds	r3, #1
 800aeee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800aef2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	029b      	lsls	r3, r3, #10
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefe:	801a      	strh	r2, [r3, #0]
 800af00:	e041      	b.n	800af86 <USB_EPStartXfer+0x99e>
 800af02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af06:	095b      	lsrs	r3, r3, #5
 800af08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800af0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af10:	f003 031f 	and.w	r3, r3, #31
 800af14:	2b00      	cmp	r3, #0
 800af16:	d104      	bne.n	800af22 <USB_EPStartXfer+0x93a>
 800af18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af1c:	3b01      	subs	r3, #1
 800af1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800af22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af26:	b29b      	uxth	r3, r3
 800af28:	029b      	lsls	r3, r3, #10
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af34:	b29a      	uxth	r2, r3
 800af36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af38:	801a      	strh	r2, [r3, #0]
 800af3a:	e024      	b.n	800af86 <USB_EPStartXfer+0x99e>
 800af3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	785b      	ldrb	r3, [r3, #1]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d11c      	bne.n	800af86 <USB_EPStartXfer+0x99e>
 800af4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	461a      	mov	r2, r3
 800af5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af60:	4413      	add	r3, r2
 800af62:	643b      	str	r3, [r7, #64]	; 0x40
 800af64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	011a      	lsls	r2, r3, #4
 800af72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af74:	4413      	add	r3, r2
 800af76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800af7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af80:	b29a      	uxth	r2, r3
 800af82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800af86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	895b      	ldrh	r3, [r3, #10]
 800af92:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	6959      	ldr	r1, [r3, #20]
 800afa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800afac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800afb0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800afb4:	6800      	ldr	r0, [r0, #0]
 800afb6:	f001 fa78 	bl	800c4aa <USB_WritePMA>
 800afba:	f000 bc5a 	b.w	800b872 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800afbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800afce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4413      	add	r3, r2
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	b29b      	uxth	r3, r3
 800afec:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aff4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800affc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	441a      	add	r2, r3
 800b012:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b01a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b01e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b026:	b29b      	uxth	r3, r3
 800b028:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b02a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b02e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b03a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b044:	b29b      	uxth	r3, r3
 800b046:	461a      	mov	r2, r3
 800b048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b04a:	4413      	add	r3, r2
 800b04c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b04e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	011a      	lsls	r2, r3, #4
 800b05c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b05e:	4413      	add	r3, r2
 800b060:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b064:	65bb      	str	r3, [r7, #88]	; 0x58
 800b066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b06e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	891b      	ldrh	r3, [r3, #8]
 800b07c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	6959      	ldr	r1, [r3, #20]
 800b08c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b090:	b29b      	uxth	r3, r3
 800b092:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b096:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b09a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b09e:	6800      	ldr	r0, [r0, #0]
 800b0a0:	f001 fa03 	bl	800c4aa <USB_WritePMA>
 800b0a4:	e3e5      	b.n	800b872 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800b0a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0cc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800b0d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	441a      	add	r2, r3
 800b0ea:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800b0ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6a1a      	ldr	r2, [r3, #32]
 800b10e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b112:	1ad2      	subs	r2, r2, r3
 800b114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b12e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b142:	2b00      	cmp	r3, #0
 800b144:	f000 81bc 	beq.w	800b4c0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b14c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b15a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	785b      	ldrb	r3, [r3, #1]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d16d      	bne.n	800b242 <USB_EPStartXfer+0xc5a>
 800b166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b16a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	67bb      	str	r3, [r7, #120]	; 0x78
 800b172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b176:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b180:	b29b      	uxth	r3, r3
 800b182:	461a      	mov	r2, r3
 800b184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b186:	4413      	add	r3, r2
 800b188:	67bb      	str	r3, [r7, #120]	; 0x78
 800b18a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b18e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	011a      	lsls	r2, r3, #4
 800b198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b19a:	4413      	add	r3, r2
 800b19c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b1a0:	677b      	str	r3, [r7, #116]	; 0x74
 800b1a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d112      	bne.n	800b1d0 <USB_EPStartXfer+0xbe8>
 800b1aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1b8:	801a      	strh	r2, [r3, #0]
 800b1ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1cc:	801a      	strh	r2, [r3, #0]
 800b1ce:	e060      	b.n	800b292 <USB_EPStartXfer+0xcaa>
 800b1d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1d4:	2b3e      	cmp	r3, #62	; 0x3e
 800b1d6:	d817      	bhi.n	800b208 <USB_EPStartXfer+0xc20>
 800b1d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1dc:	085b      	lsrs	r3, r3, #1
 800b1de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b1e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d004      	beq.n	800b1f8 <USB_EPStartXfer+0xc10>
 800b1ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b1f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	029b      	lsls	r3, r3, #10
 800b200:	b29a      	uxth	r2, r3
 800b202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b204:	801a      	strh	r2, [r3, #0]
 800b206:	e044      	b.n	800b292 <USB_EPStartXfer+0xcaa>
 800b208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b20c:	095b      	lsrs	r3, r3, #5
 800b20e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b216:	f003 031f 	and.w	r3, r3, #31
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d104      	bne.n	800b228 <USB_EPStartXfer+0xc40>
 800b21e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b222:	3b01      	subs	r3, #1
 800b224:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b228:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	029b      	lsls	r3, r3, #10
 800b230:	b29b      	uxth	r3, r3
 800b232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b23e:	801a      	strh	r2, [r3, #0]
 800b240:	e027      	b.n	800b292 <USB_EPStartXfer+0xcaa>
 800b242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	785b      	ldrb	r3, [r3, #1]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d11f      	bne.n	800b292 <USB_EPStartXfer+0xcaa>
 800b252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b260:	b29b      	uxth	r3, r3
 800b262:	461a      	mov	r2, r3
 800b264:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b268:	4413      	add	r3, r2
 800b26a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b26e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	011a      	lsls	r2, r3, #4
 800b27c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b280:	4413      	add	r3, r2
 800b282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b286:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b28c:	b29a      	uxth	r2, r3
 800b28e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b290:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	895b      	ldrh	r3, [r3, #10]
 800b29e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b2a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6959      	ldr	r1, [r3, #20]
 800b2ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b2b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b2bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b2c0:	6800      	ldr	r0, [r0, #0]
 800b2c2:	f001 f8f2 	bl	800c4aa <USB_WritePMA>
          ep->xfer_buff += len;
 800b2c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	695a      	ldr	r2, [r3, #20]
 800b2d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2d6:	441a      	add	r2, r3
 800b2d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800b2e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	6a1a      	ldr	r2, [r3, #32]
 800b2f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d90f      	bls.n	800b320 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800b300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	6a1a      	ldr	r2, [r3, #32]
 800b30c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b310:	1ad2      	subs	r2, r2, r3
 800b312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	621a      	str	r2, [r3, #32]
 800b31e:	e00e      	b.n	800b33e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800b320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	6a1b      	ldr	r3, [r3, #32]
 800b32c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800b330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2200      	movs	r2, #0
 800b33c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800b33e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 8295 	beq.w	800b872 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b34c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	785b      	ldrb	r3, [r3, #1]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d16d      	bne.n	800b434 <USB_EPStartXfer+0xe4c>
 800b358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b35c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	66bb      	str	r3, [r7, #104]	; 0x68
 800b364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b368:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b372:	b29b      	uxth	r3, r3
 800b374:	461a      	mov	r2, r3
 800b376:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b378:	4413      	add	r3, r2
 800b37a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b37c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	011a      	lsls	r2, r3, #4
 800b38a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b38c:	4413      	add	r3, r2
 800b38e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b392:	667b      	str	r3, [r7, #100]	; 0x64
 800b394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d112      	bne.n	800b3c2 <USB_EPStartXfer+0xdda>
 800b39c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3aa:	801a      	strh	r2, [r3, #0]
 800b3ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ae:	881b      	ldrh	r3, [r3, #0]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3be:	801a      	strh	r2, [r3, #0]
 800b3c0:	e063      	b.n	800b48a <USB_EPStartXfer+0xea2>
 800b3c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3c6:	2b3e      	cmp	r3, #62	; 0x3e
 800b3c8:	d817      	bhi.n	800b3fa <USB_EPStartXfer+0xe12>
 800b3ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3ce:	085b      	lsrs	r3, r3, #1
 800b3d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b3d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3d8:	f003 0301 	and.w	r3, r3, #1
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <USB_EPStartXfer+0xe02>
 800b3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	029b      	lsls	r3, r3, #10
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3f6:	801a      	strh	r2, [r3, #0]
 800b3f8:	e047      	b.n	800b48a <USB_EPStartXfer+0xea2>
 800b3fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3fe:	095b      	lsrs	r3, r3, #5
 800b400:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b408:	f003 031f 	and.w	r3, r3, #31
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d104      	bne.n	800b41a <USB_EPStartXfer+0xe32>
 800b410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b414:	3b01      	subs	r3, #1
 800b416:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b41e:	b29b      	uxth	r3, r3
 800b420:	029b      	lsls	r3, r3, #10
 800b422:	b29b      	uxth	r3, r3
 800b424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b430:	801a      	strh	r2, [r3, #0]
 800b432:	e02a      	b.n	800b48a <USB_EPStartXfer+0xea2>
 800b434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	785b      	ldrb	r3, [r3, #1]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d122      	bne.n	800b48a <USB_EPStartXfer+0xea2>
 800b444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b448:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	673b      	str	r3, [r7, #112]	; 0x70
 800b450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b454:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b45e:	b29b      	uxth	r3, r3
 800b460:	461a      	mov	r2, r3
 800b462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b464:	4413      	add	r3, r2
 800b466:	673b      	str	r3, [r7, #112]	; 0x70
 800b468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b46c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	011a      	lsls	r2, r3, #4
 800b476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b478:	4413      	add	r3, r2
 800b47a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b47e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b484:	b29a      	uxth	r2, r3
 800b486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b488:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b48a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b48e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	891b      	ldrh	r3, [r3, #8]
 800b496:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b49a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b49e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6959      	ldr	r1, [r3, #20]
 800b4a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b4b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b4b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b4b8:	6800      	ldr	r0, [r0, #0]
 800b4ba:	f000 fff6 	bl	800c4aa <USB_WritePMA>
 800b4be:	e1d8      	b.n	800b872 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b4c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	785b      	ldrb	r3, [r3, #1]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d178      	bne.n	800b5c2 <USB_EPStartXfer+0xfda>
 800b4d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	011a      	lsls	r2, r3, #4
 800b508:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b50c:	4413      	add	r3, r2
 800b50e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b512:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d116      	bne.n	800b54c <USB_EPStartXfer+0xf64>
 800b51e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	b29b      	uxth	r3, r3
 800b526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b530:	801a      	strh	r2, [r3, #0]
 800b532:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b536:	881b      	ldrh	r3, [r3, #0]
 800b538:	b29b      	uxth	r3, r3
 800b53a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b53e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b542:	b29a      	uxth	r2, r3
 800b544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b548:	801a      	strh	r2, [r3, #0]
 800b54a:	e06b      	b.n	800b624 <USB_EPStartXfer+0x103c>
 800b54c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b550:	2b3e      	cmp	r3, #62	; 0x3e
 800b552:	d818      	bhi.n	800b586 <USB_EPStartXfer+0xf9e>
 800b554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b558:	085b      	lsrs	r3, r3, #1
 800b55a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b55e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b562:	f003 0301 	and.w	r3, r3, #1
 800b566:	2b00      	cmp	r3, #0
 800b568:	d004      	beq.n	800b574 <USB_EPStartXfer+0xf8c>
 800b56a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b56e:	3301      	adds	r3, #1
 800b570:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b574:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b578:	b29b      	uxth	r3, r3
 800b57a:	029b      	lsls	r3, r3, #10
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b582:	801a      	strh	r2, [r3, #0]
 800b584:	e04e      	b.n	800b624 <USB_EPStartXfer+0x103c>
 800b586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b58a:	095b      	lsrs	r3, r3, #5
 800b58c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b594:	f003 031f 	and.w	r3, r3, #31
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d104      	bne.n	800b5a6 <USB_EPStartXfer+0xfbe>
 800b59c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b5a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	029b      	lsls	r3, r3, #10
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5be:	801a      	strh	r2, [r3, #0]
 800b5c0:	e030      	b.n	800b624 <USB_EPStartXfer+0x103c>
 800b5c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	785b      	ldrb	r3, [r3, #1]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d128      	bne.n	800b624 <USB_EPStartXfer+0x103c>
 800b5d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b5e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b5f6:	4413      	add	r3, r2
 800b5f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b5fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	011a      	lsls	r2, r3, #4
 800b60a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b60e:	4413      	add	r3, r2
 800b610:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b614:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b622:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	891b      	ldrh	r3, [r3, #8]
 800b630:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	6959      	ldr	r1, [r3, #20]
 800b640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b644:	b29b      	uxth	r3, r3
 800b646:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b64a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b64e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b652:	6800      	ldr	r0, [r0, #0]
 800b654:	f000 ff29 	bl	800c4aa <USB_WritePMA>
          ep->xfer_buff += len;
 800b658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b65c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	695a      	ldr	r2, [r3, #20]
 800b664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b668:	441a      	add	r2, r3
 800b66a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b66e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800b676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b67a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	6a1a      	ldr	r2, [r3, #32]
 800b682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d90f      	bls.n	800b6b2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800b692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	6a1a      	ldr	r2, [r3, #32]
 800b69e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6a2:	1ad2      	subs	r2, r2, r3
 800b6a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	621a      	str	r2, [r3, #32]
 800b6b0:	e00e      	b.n	800b6d0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800b6b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800b6c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800b6d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 80cc 	beq.w	800b872 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b6da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b6e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	785b      	ldrb	r3, [r3, #1]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d178      	bne.n	800b7ea <USB_EPStartXfer+0x1202>
 800b6f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b70a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b714:	b29b      	uxth	r3, r3
 800b716:	461a      	mov	r2, r3
 800b718:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b71c:	4413      	add	r3, r2
 800b71e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	011a      	lsls	r2, r3, #4
 800b730:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b734:	4413      	add	r3, r2
 800b736:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b73a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b73e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b742:	2b00      	cmp	r3, #0
 800b744:	d116      	bne.n	800b774 <USB_EPStartXfer+0x118c>
 800b746:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b752:	b29a      	uxth	r2, r3
 800b754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b758:	801a      	strh	r2, [r3, #0]
 800b75a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b75e:	881b      	ldrh	r3, [r3, #0]
 800b760:	b29b      	uxth	r3, r3
 800b762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b770:	801a      	strh	r2, [r3, #0]
 800b772:	e064      	b.n	800b83e <USB_EPStartXfer+0x1256>
 800b774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b778:	2b3e      	cmp	r3, #62	; 0x3e
 800b77a:	d818      	bhi.n	800b7ae <USB_EPStartXfer+0x11c6>
 800b77c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b780:	085b      	lsrs	r3, r3, #1
 800b782:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b78a:	f003 0301 	and.w	r3, r3, #1
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d004      	beq.n	800b79c <USB_EPStartXfer+0x11b4>
 800b792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b796:	3301      	adds	r3, #1
 800b798:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	029b      	lsls	r3, r3, #10
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7aa:	801a      	strh	r2, [r3, #0]
 800b7ac:	e047      	b.n	800b83e <USB_EPStartXfer+0x1256>
 800b7ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7b2:	095b      	lsrs	r3, r3, #5
 800b7b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b7b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7bc:	f003 031f 	and.w	r3, r3, #31
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d104      	bne.n	800b7ce <USB_EPStartXfer+0x11e6>
 800b7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b7ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	029b      	lsls	r3, r3, #10
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7e6:	801a      	strh	r2, [r3, #0]
 800b7e8:	e029      	b.n	800b83e <USB_EPStartXfer+0x1256>
 800b7ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	785b      	ldrb	r3, [r3, #1]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d121      	bne.n	800b83e <USB_EPStartXfer+0x1256>
 800b7fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b808:	b29b      	uxth	r3, r3
 800b80a:	461a      	mov	r2, r3
 800b80c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b810:	4413      	add	r3, r2
 800b812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b81a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	011a      	lsls	r2, r3, #4
 800b824:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b828:	4413      	add	r3, r2
 800b82a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b82e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b836:	b29a      	uxth	r2, r3
 800b838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b83c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b83e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	895b      	ldrh	r3, [r3, #10]
 800b84a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b84e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	6959      	ldr	r1, [r3, #20]
 800b85a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b85e:	b29b      	uxth	r3, r3
 800b860:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b864:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b868:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b86c:	6800      	ldr	r0, [r0, #0]
 800b86e:	f000 fe1c 	bl	800c4aa <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4413      	add	r3, r2
 800b88c:	881b      	ldrh	r3, [r3, #0]
 800b88e:	b29b      	uxth	r3, r3
 800b890:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b894:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b89c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8a0:	8013      	strh	r3, [r2, #0]
 800b8a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8a6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b8aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b8ae:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b8b2:	8812      	ldrh	r2, [r2, #0]
 800b8b4:	f082 0210 	eor.w	r2, r2, #16
 800b8b8:	801a      	strh	r2, [r3, #0]
 800b8ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8be:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b8c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b8c6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b8ca:	8812      	ldrh	r2, [r2, #0]
 800b8cc:	f082 0220 	eor.w	r2, r2, #32
 800b8d0:	801a      	strh	r2, [r3, #0]
 800b8d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	441a      	add	r2, r3
 800b8ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8f0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b8f4:	881b      	ldrh	r3, [r3, #0]
 800b8f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b906:	b29b      	uxth	r3, r3
 800b908:	8013      	strh	r3, [r2, #0]
 800b90a:	f000 bc9f 	b.w	800c24c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b90e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	7b1b      	ldrb	r3, [r3, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f040 80ae 	bne.w	800ba7c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	699a      	ldr	r2, [r3, #24]
 800b92c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d917      	bls.n	800b96c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800b93c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b940:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800b94c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	699a      	ldr	r2, [r3, #24]
 800b958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b95c:	1ad2      	subs	r2, r2, r3
 800b95e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	619a      	str	r2, [r3, #24]
 800b96a:	e00e      	b.n	800b98a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800b96c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	699b      	ldr	r3, [r3, #24]
 800b978:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800b97c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2200      	movs	r2, #0
 800b988:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b98a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b98e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b99c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	011a      	lsls	r2, r3, #4
 800b9c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b9cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d116      	bne.n	800ba06 <USB_EPStartXfer+0x141e>
 800b9d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9ea:	801a      	strh	r2, [r3, #0]
 800b9ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba02:	801a      	strh	r2, [r3, #0]
 800ba04:	e3e8      	b.n	800c1d8 <USB_EPStartXfer+0x1bf0>
 800ba06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba0a:	2b3e      	cmp	r3, #62	; 0x3e
 800ba0c:	d818      	bhi.n	800ba40 <USB_EPStartXfer+0x1458>
 800ba0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba12:	085b      	lsrs	r3, r3, #1
 800ba14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ba18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba1c:	f003 0301 	and.w	r3, r3, #1
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d004      	beq.n	800ba2e <USB_EPStartXfer+0x1446>
 800ba24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba28:	3301      	adds	r3, #1
 800ba2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ba2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	029b      	lsls	r3, r3, #10
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba3c:	801a      	strh	r2, [r3, #0]
 800ba3e:	e3cb      	b.n	800c1d8 <USB_EPStartXfer+0x1bf0>
 800ba40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba44:	095b      	lsrs	r3, r3, #5
 800ba46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ba4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba4e:	f003 031f 	and.w	r3, r3, #31
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d104      	bne.n	800ba60 <USB_EPStartXfer+0x1478>
 800ba56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ba60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	029b      	lsls	r3, r3, #10
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba78:	801a      	strh	r2, [r3, #0]
 800ba7a:	e3ad      	b.n	800c1d8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ba7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	78db      	ldrb	r3, [r3, #3]
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	f040 8200 	bne.w	800be8e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ba8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	785b      	ldrb	r3, [r3, #1]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f040 8091 	bne.w	800bbc2 <USB_EPStartXfer+0x15da>
 800baa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800baa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800baae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bab2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800babc:	b29b      	uxth	r3, r3
 800babe:	461a      	mov	r2, r3
 800bac0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bac4:	4413      	add	r3, r2
 800bac6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800baca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	011a      	lsls	r2, r3, #4
 800bad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800badc:	4413      	add	r3, r2
 800bade:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800baea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d116      	bne.n	800bb24 <USB_EPStartXfer+0x153c>
 800baf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bafa:	881b      	ldrh	r3, [r3, #0]
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb08:	801a      	strh	r2, [r3, #0]
 800bb0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb0e:	881b      	ldrh	r3, [r3, #0]
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb20:	801a      	strh	r2, [r3, #0]
 800bb22:	e083      	b.n	800bc2c <USB_EPStartXfer+0x1644>
 800bb24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	2b3e      	cmp	r3, #62	; 0x3e
 800bb32:	d820      	bhi.n	800bb76 <USB_EPStartXfer+0x158e>
 800bb34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	085b      	lsrs	r3, r3, #1
 800bb42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bb46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	f003 0301 	and.w	r3, r3, #1
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d004      	beq.n	800bb64 <USB_EPStartXfer+0x157c>
 800bb5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb5e:	3301      	adds	r3, #1
 800bb60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	029b      	lsls	r3, r3, #10
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb72:	801a      	strh	r2, [r3, #0]
 800bb74:	e05a      	b.n	800bc2c <USB_EPStartXfer+0x1644>
 800bb76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	095b      	lsrs	r3, r3, #5
 800bb84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bb88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	f003 031f 	and.w	r3, r3, #31
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d104      	bne.n	800bba6 <USB_EPStartXfer+0x15be>
 800bb9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba0:	3b01      	subs	r3, #1
 800bba2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	029b      	lsls	r3, r3, #10
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbbe:	801a      	strh	r2, [r3, #0]
 800bbc0:	e034      	b.n	800bc2c <USB_EPStartXfer+0x1644>
 800bbc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	785b      	ldrb	r3, [r3, #1]
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d12c      	bne.n	800bc2c <USB_EPStartXfer+0x1644>
 800bbd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bbe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbe4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bbfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	011a      	lsls	r2, r3, #4
 800bc0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc0e:	4413      	add	r3, r2
 800bc10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bc14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	691b      	ldr	r3, [r3, #16]
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bc2a:	801a      	strh	r2, [r3, #0]
 800bc2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	785b      	ldrb	r3, [r3, #1]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f040 8091 	bne.w	800bd6e <USB_EPStartXfer+0x1786>
 800bc4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bc5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bc70:	4413      	add	r3, r2
 800bc72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bc76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	011a      	lsls	r2, r3, #4
 800bc84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bc88:	4413      	add	r3, r2
 800bc8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bc8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d116      	bne.n	800bcd0 <USB_EPStartXfer+0x16e8>
 800bca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bca6:	881b      	ldrh	r3, [r3, #0]
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bcae:	b29a      	uxth	r2, r3
 800bcb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bcb4:	801a      	strh	r2, [r3, #0]
 800bcb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bcba:	881b      	ldrh	r3, [r3, #0]
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bccc:	801a      	strh	r2, [r3, #0]
 800bcce:	e07c      	b.n	800bdca <USB_EPStartXfer+0x17e2>
 800bcd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	2b3e      	cmp	r3, #62	; 0x3e
 800bcde:	d820      	bhi.n	800bd22 <USB_EPStartXfer+0x173a>
 800bce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	085b      	lsrs	r3, r3, #1
 800bcee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bcf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	691b      	ldr	r3, [r3, #16]
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d004      	beq.n	800bd10 <USB_EPStartXfer+0x1728>
 800bd06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bd10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	029b      	lsls	r3, r3, #10
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd1e:	801a      	strh	r2, [r3, #0]
 800bd20:	e053      	b.n	800bdca <USB_EPStartXfer+0x17e2>
 800bd22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	095b      	lsrs	r3, r3, #5
 800bd30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bd34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	f003 031f 	and.w	r3, r3, #31
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d104      	bne.n	800bd52 <USB_EPStartXfer+0x176a>
 800bd48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bd52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	029b      	lsls	r3, r3, #10
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd6a:	801a      	strh	r2, [r3, #0]
 800bd6c:	e02d      	b.n	800bdca <USB_EPStartXfer+0x17e2>
 800bd6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	785b      	ldrb	r3, [r3, #1]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d125      	bne.n	800bdca <USB_EPStartXfer+0x17e2>
 800bd7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	461a      	mov	r2, r3
 800bd90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bd94:	4413      	add	r3, r2
 800bd96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	011a      	lsls	r2, r3, #4
 800bda8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bdac:	4413      	add	r3, r2
 800bdae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bdb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bdc8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bdca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	69db      	ldr	r3, [r3, #28]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 81fe 	beq.w	800c1d8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bde0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4413      	add	r3, r2
 800bdf6:	881b      	ldrh	r3, [r3, #0]
 800bdf8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bdfc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800be00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d005      	beq.n	800be14 <USB_EPStartXfer+0x182c>
 800be08:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800be0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10d      	bne.n	800be30 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800be14:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800be18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f040 81db 	bne.w	800c1d8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800be22:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800be26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f040 81d4 	bne.w	800c1d8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800be30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	881b      	ldrh	r3, [r3, #0]
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be56:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800be5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	441a      	add	r2, r3
 800be74:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800be78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800be88:	b29b      	uxth	r3, r3
 800be8a:	8013      	strh	r3, [r2, #0]
 800be8c:	e1a4      	b.n	800c1d8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800be8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	78db      	ldrb	r3, [r3, #3]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	f040 819a 	bne.w	800c1d4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	699a      	ldr	r2, [r3, #24]
 800beac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800beb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d917      	bls.n	800beec <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800bebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800becc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	699a      	ldr	r2, [r3, #24]
 800bed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bedc:	1ad2      	subs	r2, r2, r3
 800bede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	619a      	str	r2, [r3, #24]
 800beea:	e00e      	b.n	800bf0a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800beec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	699b      	ldr	r3, [r3, #24]
 800bef8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800befc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2200      	movs	r2, #0
 800bf08:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bf0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	785b      	ldrb	r3, [r3, #1]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d178      	bne.n	800c00c <USB_EPStartXfer+0x1a24>
 800bf1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf3e:	4413      	add	r3, r2
 800bf40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	011a      	lsls	r2, r3, #4
 800bf52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf56:	4413      	add	r3, r2
 800bf58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bf60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d116      	bne.n	800bf96 <USB_EPStartXfer+0x19ae>
 800bf68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf7a:	801a      	strh	r2, [r3, #0]
 800bf7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf92:	801a      	strh	r2, [r3, #0]
 800bf94:	e06b      	b.n	800c06e <USB_EPStartXfer+0x1a86>
 800bf96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf9a:	2b3e      	cmp	r3, #62	; 0x3e
 800bf9c:	d818      	bhi.n	800bfd0 <USB_EPStartXfer+0x19e8>
 800bf9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfa2:	085b      	lsrs	r3, r3, #1
 800bfa4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bfa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfac:	f003 0301 	and.w	r3, r3, #1
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d004      	beq.n	800bfbe <USB_EPStartXfer+0x19d6>
 800bfb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfb8:	3301      	adds	r3, #1
 800bfba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bfbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	029b      	lsls	r3, r3, #10
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bfcc:	801a      	strh	r2, [r3, #0]
 800bfce:	e04e      	b.n	800c06e <USB_EPStartXfer+0x1a86>
 800bfd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfd4:	095b      	lsrs	r3, r3, #5
 800bfd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bfda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfde:	f003 031f 	and.w	r3, r3, #31
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d104      	bne.n	800bff0 <USB_EPStartXfer+0x1a08>
 800bfe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfea:	3b01      	subs	r3, #1
 800bfec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	029b      	lsls	r3, r3, #10
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c002:	b29a      	uxth	r2, r3
 800c004:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c008:	801a      	strh	r2, [r3, #0]
 800c00a:	e030      	b.n	800c06e <USB_EPStartXfer+0x1a86>
 800c00c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	785b      	ldrb	r3, [r3, #1]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d128      	bne.n	800c06e <USB_EPStartXfer+0x1a86>
 800c01c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c02a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c02e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c038:	b29b      	uxth	r3, r3
 800c03a:	461a      	mov	r2, r3
 800c03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c040:	4413      	add	r3, r2
 800c042:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c04a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	011a      	lsls	r2, r3, #4
 800c054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c058:	4413      	add	r3, r2
 800c05a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c05e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c066:	b29a      	uxth	r2, r3
 800c068:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c06c:	801a      	strh	r2, [r3, #0]
 800c06e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c07c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	785b      	ldrb	r3, [r3, #1]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d178      	bne.n	800c17e <USB_EPStartXfer+0x1b96>
 800c08c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c090:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c09a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c09e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0b0:	4413      	add	r3, r2
 800c0b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c0b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	011a      	lsls	r2, r3, #4
 800c0c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0c8:	4413      	add	r3, r2
 800c0ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c0ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c0d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d116      	bne.n	800c108 <USB_EPStartXfer+0x1b20>
 800c0da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0ec:	801a      	strh	r2, [r3, #0]
 800c0ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c104:	801a      	strh	r2, [r3, #0]
 800c106:	e067      	b.n	800c1d8 <USB_EPStartXfer+0x1bf0>
 800c108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c10c:	2b3e      	cmp	r3, #62	; 0x3e
 800c10e:	d818      	bhi.n	800c142 <USB_EPStartXfer+0x1b5a>
 800c110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c114:	085b      	lsrs	r3, r3, #1
 800c116:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c11a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c11e:	f003 0301 	and.w	r3, r3, #1
 800c122:	2b00      	cmp	r3, #0
 800c124:	d004      	beq.n	800c130 <USB_EPStartXfer+0x1b48>
 800c126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c12a:	3301      	adds	r3, #1
 800c12c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c130:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c134:	b29b      	uxth	r3, r3
 800c136:	029b      	lsls	r3, r3, #10
 800c138:	b29a      	uxth	r2, r3
 800c13a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c13e:	801a      	strh	r2, [r3, #0]
 800c140:	e04a      	b.n	800c1d8 <USB_EPStartXfer+0x1bf0>
 800c142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c146:	095b      	lsrs	r3, r3, #5
 800c148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c14c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c150:	f003 031f 	and.w	r3, r3, #31
 800c154:	2b00      	cmp	r3, #0
 800c156:	d104      	bne.n	800c162 <USB_EPStartXfer+0x1b7a>
 800c158:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c15c:	3b01      	subs	r3, #1
 800c15e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c166:	b29b      	uxth	r3, r3
 800c168:	029b      	lsls	r3, r3, #10
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c174:	b29a      	uxth	r2, r3
 800c176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c17a:	801a      	strh	r2, [r3, #0]
 800c17c:	e02c      	b.n	800c1d8 <USB_EPStartXfer+0x1bf0>
 800c17e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	785b      	ldrb	r3, [r3, #1]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d124      	bne.n	800c1d8 <USB_EPStartXfer+0x1bf0>
 800c18e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	461a      	mov	r2, r3
 800c1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c1ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	011a      	lsls	r2, r3, #4
 800c1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1bc:	4413      	add	r3, r2
 800c1be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c1c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c1c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1d0:	801a      	strh	r2, [r3, #0]
 800c1d2:	e001      	b.n	800c1d8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e03a      	b.n	800c24e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c1d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c1dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c1e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c202:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c206:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c20a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c20e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c212:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c216:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c21a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c21e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	441a      	add	r2, r3
 800c234:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c23c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c248:	b29b      	uxth	r3, r3
 800c24a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	785b      	ldrb	r3, [r3, #1]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d020      	beq.n	800c2ac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	881b      	ldrh	r3, [r3, #0]
 800c276:	b29b      	uxth	r3, r3
 800c278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c27c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c280:	81bb      	strh	r3, [r7, #12]
 800c282:	89bb      	ldrh	r3, [r7, #12]
 800c284:	f083 0310 	eor.w	r3, r3, #16
 800c288:	81bb      	strh	r3, [r7, #12]
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	441a      	add	r2, r3
 800c294:	89bb      	ldrh	r3, [r7, #12]
 800c296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c29a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c29e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	8013      	strh	r3, [r2, #0]
 800c2aa:	e01f      	b.n	800c2ec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	881b      	ldrh	r3, [r3, #0]
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2c2:	81fb      	strh	r3, [r7, #14]
 800c2c4:	89fb      	ldrh	r3, [r7, #14]
 800c2c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c2ca:	81fb      	strh	r3, [r7, #14]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	441a      	add	r2, r3
 800c2d6:	89fb      	ldrh	r3, [r7, #14]
 800c2d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3714      	adds	r7, #20
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bc80      	pop	{r7}
 800c2f6:	4770      	bx	lr

0800c2f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b087      	sub	sp, #28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	7b1b      	ldrb	r3, [r3, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	f040 809d 	bne.w	800c446 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	785b      	ldrb	r3, [r3, #1]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d04c      	beq.n	800c3ae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	4413      	add	r3, r2
 800c31e:	881b      	ldrh	r3, [r3, #0]
 800c320:	823b      	strh	r3, [r7, #16]
 800c322:	8a3b      	ldrh	r3, [r7, #16]
 800c324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d01b      	beq.n	800c364 <USB_EPClearStall+0x6c>
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	881b      	ldrh	r3, [r3, #0]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c342:	81fb      	strh	r3, [r7, #14]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	441a      	add	r2, r3
 800c34e:	89fb      	ldrh	r3, [r7, #14]
 800c350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c35c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c360:	b29b      	uxth	r3, r3
 800c362:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	78db      	ldrb	r3, [r3, #3]
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d06c      	beq.n	800c446 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	b29b      	uxth	r3, r3
 800c37a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c37e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c382:	81bb      	strh	r3, [r7, #12]
 800c384:	89bb      	ldrh	r3, [r7, #12]
 800c386:	f083 0320 	eor.w	r3, r3, #32
 800c38a:	81bb      	strh	r3, [r7, #12]
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	441a      	add	r2, r3
 800c396:	89bb      	ldrh	r3, [r7, #12]
 800c398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c39c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	8013      	strh	r3, [r2, #0]
 800c3ac:	e04b      	b.n	800c446 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	82fb      	strh	r3, [r7, #22]
 800c3bc:	8afb      	ldrh	r3, [r7, #22]
 800c3be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d01b      	beq.n	800c3fe <USB_EPClearStall+0x106>
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3dc:	82bb      	strh	r3, [r7, #20]
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	441a      	add	r2, r3
 800c3e8:	8abb      	ldrh	r3, [r7, #20]
 800c3ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c414:	827b      	strh	r3, [r7, #18]
 800c416:	8a7b      	ldrh	r3, [r7, #18]
 800c418:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c41c:	827b      	strh	r3, [r7, #18]
 800c41e:	8a7b      	ldrh	r3, [r7, #18]
 800c420:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c424:	827b      	strh	r3, [r7, #18]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	441a      	add	r2, r3
 800c430:	8a7b      	ldrh	r3, [r7, #18]
 800c432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c43a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c43e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c442:	b29b      	uxth	r3, r3
 800c444:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	371c      	adds	r7, #28
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bc80      	pop	{r7}
 800c450:	4770      	bx	lr

0800c452 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c452:	b480      	push	{r7}
 800c454:	b083      	sub	sp, #12
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	460b      	mov	r3, r1
 800c45c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c45e:	78fb      	ldrb	r3, [r7, #3]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d103      	bne.n	800c46c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2280      	movs	r2, #128	; 0x80
 800c468:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	bc80      	pop	{r7}
 800c476:	4770      	bx	lr

0800c478 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	bc80      	pop	{r7}
 800c48a:	4770      	bx	lr

0800c48c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c49e:	68fb      	ldr	r3, [r7, #12]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bc80      	pop	{r7}
 800c4a8:	4770      	bx	lr

0800c4aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c4aa:	b480      	push	{r7}
 800c4ac:	b08d      	sub	sp, #52	; 0x34
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	60f8      	str	r0, [r7, #12]
 800c4b2:	60b9      	str	r1, [r7, #8]
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	80fb      	strh	r3, [r7, #6]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c4c0:	88bb      	ldrh	r3, [r7, #4]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	085b      	lsrs	r3, r3, #1
 800c4c6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c4d0:	88fb      	ldrh	r3, [r7, #6]
 800c4d2:	005a      	lsls	r2, r3, #1
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4dc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c4de:	6a3b      	ldr	r3, [r7, #32]
 800c4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4e2:	e01e      	b.n	800c522 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	021b      	lsls	r3, r3, #8
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	b29a      	uxth	r2, r3
 800c506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c508:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50c:	3302      	adds	r3, #2
 800c50e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800c510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c512:	3302      	adds	r3, #2
 800c514:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800c516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c518:	3301      	adds	r3, #1
 800c51a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51e:	3b01      	subs	r3, #1
 800c520:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1dd      	bne.n	800c4e4 <USB_WritePMA+0x3a>
  }
}
 800c528:	bf00      	nop
 800c52a:	bf00      	nop
 800c52c:	3734      	adds	r7, #52	; 0x34
 800c52e:	46bd      	mov	sp, r7
 800c530:	bc80      	pop	{r7}
 800c532:	4770      	bx	lr

0800c534 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c534:	b480      	push	{r7}
 800c536:	b08b      	sub	sp, #44	; 0x2c
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	4611      	mov	r1, r2
 800c540:	461a      	mov	r2, r3
 800c542:	460b      	mov	r3, r1
 800c544:	80fb      	strh	r3, [r7, #6]
 800c546:	4613      	mov	r3, r2
 800c548:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c54a:	88bb      	ldrh	r3, [r7, #4]
 800c54c:	085b      	lsrs	r3, r3, #1
 800c54e:	b29b      	uxth	r3, r3
 800c550:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c55a:	88fb      	ldrh	r3, [r7, #6]
 800c55c:	005a      	lsls	r2, r3, #1
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	4413      	add	r3, r2
 800c562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c566:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	627b      	str	r3, [r7, #36]	; 0x24
 800c56c:	e01b      	b.n	800c5a6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c56e:	6a3b      	ldr	r3, [r7, #32]
 800c570:	881b      	ldrh	r3, [r3, #0]
 800c572:	b29b      	uxth	r3, r3
 800c574:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	3302      	adds	r3, #2
 800c57a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	b2da      	uxtb	r2, r3
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	3301      	adds	r3, #1
 800c588:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	0a1b      	lsrs	r3, r3, #8
 800c58e:	b2da      	uxtb	r2, r3
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	3301      	adds	r3, #1
 800c598:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c59a:	6a3b      	ldr	r3, [r7, #32]
 800c59c:	3302      	adds	r3, #2
 800c59e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1e0      	bne.n	800c56e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c5ac:	88bb      	ldrh	r3, [r7, #4]
 800c5ae:	f003 0301 	and.w	r3, r3, #1
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d007      	beq.n	800c5c8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800c5b8:	6a3b      	ldr	r3, [r7, #32]
 800c5ba:	881b      	ldrh	r3, [r3, #0]
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	701a      	strb	r2, [r3, #0]
  }
}
 800c5c8:	bf00      	nop
 800c5ca:	372c      	adds	r7, #44	; 0x2c
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bc80      	pop	{r7}
 800c5d0:	4770      	bx	lr

0800c5d2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	460b      	mov	r3, r1
 800c5dc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	7c1b      	ldrb	r3, [r3, #16]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d115      	bne.n	800c616 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c5ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5ee:	2202      	movs	r2, #2
 800c5f0:	2181      	movs	r1, #129	; 0x81
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f001 fe75 	bl	800e2e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c5fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c602:	2202      	movs	r2, #2
 800c604:	2101      	movs	r1, #1
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f001 fe6b 	bl	800e2e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800c614:	e012      	b.n	800c63c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c616:	2340      	movs	r3, #64	; 0x40
 800c618:	2202      	movs	r2, #2
 800c61a:	2181      	movs	r1, #129	; 0x81
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f001 fe60 	bl	800e2e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2201      	movs	r2, #1
 800c626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c628:	2340      	movs	r3, #64	; 0x40
 800c62a:	2202      	movs	r2, #2
 800c62c:	2101      	movs	r1, #1
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f001 fe57 	bl	800e2e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c63c:	2308      	movs	r3, #8
 800c63e:	2203      	movs	r2, #3
 800c640:	2182      	movs	r1, #130	; 0x82
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f001 fe4d 	bl	800e2e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c64e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c652:	f001 ff6d 	bl	800e530 <USBD_static_malloc>
 800c656:	4602      	mov	r2, r0
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c664:	2b00      	cmp	r3, #0
 800c666:	d102      	bne.n	800c66e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c668:	2301      	movs	r3, #1
 800c66a:	73fb      	strb	r3, [r7, #15]
 800c66c:	e026      	b.n	800c6bc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c674:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2200      	movs	r2, #0
 800c684:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7c1b      	ldrb	r3, [r3, #16]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d109      	bne.n	800c6ac <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c69e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6a2:	2101      	movs	r1, #1
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f001 ff0d 	bl	800e4c4 <USBD_LL_PrepareReceive>
 800c6aa:	e007      	b.n	800c6bc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6b2:	2340      	movs	r3, #64	; 0x40
 800c6b4:	2101      	movs	r1, #1
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f001 ff04 	bl	800e4c4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b084      	sub	sp, #16
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c6d6:	2181      	movs	r1, #129	; 0x81
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f001 fe28 	bl	800e32e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c6e4:	2101      	movs	r1, #1
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f001 fe21 	bl	800e32e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c6f4:	2182      	movs	r1, #130	; 0x82
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f001 fe19 	bl	800e32e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00e      	beq.n	800c72a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c71c:	4618      	mov	r0, r3
 800c71e:	f001 ff13 	bl	800e548 <USBD_static_free>
    pdev->pClassData = NULL;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c744:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c746:	2300      	movs	r3, #0
 800c748:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c74a:	2300      	movs	r3, #0
 800c74c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c74e:	2300      	movs	r3, #0
 800c750:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d039      	beq.n	800c7d2 <USBD_CDC_Setup+0x9e>
 800c75e:	2b20      	cmp	r3, #32
 800c760:	d17f      	bne.n	800c862 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	88db      	ldrh	r3, [r3, #6]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d029      	beq.n	800c7be <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	b25b      	sxtb	r3, r3
 800c770:	2b00      	cmp	r3, #0
 800c772:	da11      	bge.n	800c798 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800c780:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	88d2      	ldrh	r2, [r2, #6]
 800c786:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c788:	6939      	ldr	r1, [r7, #16]
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	88db      	ldrh	r3, [r3, #6]
 800c78e:	461a      	mov	r2, r3
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f001 f994 	bl	800dabe <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800c796:	e06b      	b.n	800c870 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	785a      	ldrb	r2, [r3, #1]
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	88db      	ldrh	r3, [r3, #6]
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c7ae:	6939      	ldr	r1, [r7, #16]
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	88db      	ldrh	r3, [r3, #6]
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f001 f9af 	bl	800db1a <USBD_CtlPrepareRx>
    break;
 800c7bc:	e058      	b.n	800c870 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	683a      	ldr	r2, [r7, #0]
 800c7c8:	7850      	ldrb	r0, [r2, #1]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	4798      	blx	r3
    break;
 800c7d0:	e04e      	b.n	800c870 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	785b      	ldrb	r3, [r3, #1]
 800c7d6:	2b0b      	cmp	r3, #11
 800c7d8:	d02e      	beq.n	800c838 <USBD_CDC_Setup+0x104>
 800c7da:	2b0b      	cmp	r3, #11
 800c7dc:	dc38      	bgt.n	800c850 <USBD_CDC_Setup+0x11c>
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <USBD_CDC_Setup+0xb4>
 800c7e2:	2b0a      	cmp	r3, #10
 800c7e4:	d014      	beq.n	800c810 <USBD_CDC_Setup+0xdc>
 800c7e6:	e033      	b.n	800c850 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d107      	bne.n	800c802 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c7f2:	f107 030c 	add.w	r3, r7, #12
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f001 f95f 	bl	800dabe <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c800:	e02e      	b.n	800c860 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800c802:	6839      	ldr	r1, [r7, #0]
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f001 f8f0 	bl	800d9ea <USBD_CtlError>
			  ret = USBD_FAIL;
 800c80a:	2302      	movs	r3, #2
 800c80c:	75fb      	strb	r3, [r7, #23]
      break;
 800c80e:	e027      	b.n	800c860 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c816:	2b03      	cmp	r3, #3
 800c818:	d107      	bne.n	800c82a <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c81a:	f107 030f 	add.w	r3, r7, #15
 800c81e:	2201      	movs	r2, #1
 800c820:	4619      	mov	r1, r3
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f001 f94b 	bl	800dabe <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c828:	e01a      	b.n	800c860 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f001 f8dc 	bl	800d9ea <USBD_CtlError>
			  ret = USBD_FAIL;
 800c832:	2302      	movs	r3, #2
 800c834:	75fb      	strb	r3, [r7, #23]
      break;
 800c836:	e013      	b.n	800c860 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c83e:	2b03      	cmp	r3, #3
 800c840:	d00d      	beq.n	800c85e <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f001 f8d0 	bl	800d9ea <USBD_CtlError>
			  ret = USBD_FAIL;
 800c84a:	2302      	movs	r3, #2
 800c84c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c84e:	e006      	b.n	800c85e <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f001 f8c9 	bl	800d9ea <USBD_CtlError>
      ret = USBD_FAIL;
 800c858:	2302      	movs	r3, #2
 800c85a:	75fb      	strb	r3, [r7, #23]
      break;
 800c85c:	e000      	b.n	800c860 <USBD_CDC_Setup+0x12c>
      break;
 800c85e:	bf00      	nop
    }
    break;
 800c860:	e006      	b.n	800c870 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800c862:	6839      	ldr	r1, [r7, #0]
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f001 f8c0 	bl	800d9ea <USBD_CtlError>
    ret = USBD_FAIL;
 800c86a:	2302      	movs	r3, #2
 800c86c:	75fb      	strb	r3, [r7, #23]
    break;
 800c86e:	bf00      	nop
  }

  return ret;
 800c870:	7dfb      	ldrb	r3, [r7, #23]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3718      	adds	r7, #24
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	460b      	mov	r3, r1
 800c884:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c88c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c894:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d03a      	beq.n	800c916 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c8a0:	78fa      	ldrb	r2, [r7, #3]
 800c8a2:	6879      	ldr	r1, [r7, #4]
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4413      	add	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	440b      	add	r3, r1
 800c8ae:	331c      	adds	r3, #28
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d029      	beq.n	800c90a <USBD_CDC_DataIn+0x90>
 800c8b6:	78fa      	ldrb	r2, [r7, #3]
 800c8b8:	6879      	ldr	r1, [r7, #4]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4413      	add	r3, r2
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	440b      	add	r3, r1
 800c8c4:	331c      	adds	r3, #28
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	78f9      	ldrb	r1, [r7, #3]
 800c8ca:	68b8      	ldr	r0, [r7, #8]
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	440b      	add	r3, r1
 800c8d2:	00db      	lsls	r3, r3, #3
 800c8d4:	4403      	add	r3, r0
 800c8d6:	3338      	adds	r3, #56	; 0x38
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	fbb2 f1f3 	udiv	r1, r2, r3
 800c8de:	fb01 f303 	mul.w	r3, r1, r3
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d110      	bne.n	800c90a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c8e8:	78fa      	ldrb	r2, [r7, #3]
 800c8ea:	6879      	ldr	r1, [r7, #4]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	440b      	add	r3, r1
 800c8f6:	331c      	adds	r3, #28
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c8fc:	78f9      	ldrb	r1, [r7, #3]
 800c8fe:	2300      	movs	r3, #0
 800c900:	2200      	movs	r2, #0
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f001 fdbb 	bl	800e47e <USBD_LL_Transmit>
 800c908:	e003      	b.n	800c912 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	e000      	b.n	800c918 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c916:	2302      	movs	r3, #2
  }
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3710      	adds	r7, #16
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c932:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c934:	78fb      	ldrb	r3, [r7, #3]
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f001 fde6 	bl	800e50a <USBD_LL_GetRxDataSize>
 800c93e:	4602      	mov	r2, r0
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00d      	beq.n	800c96c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c964:	4611      	mov	r1, r2
 800c966:	4798      	blx	r3

    return USBD_OK;
 800c968:	2300      	movs	r3, #0
 800c96a:	e000      	b.n	800c96e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c96c:	2302      	movs	r3, #2
  }
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c984:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d015      	beq.n	800c9bc <USBD_CDC_EP0_RxReady+0x46>
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c996:	2bff      	cmp	r3, #255	; 0xff
 800c998:	d010      	beq.n	800c9bc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c9a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c9b0:	b292      	uxth	r2, r2
 800c9b2:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	22ff      	movs	r2, #255	; 0xff
 800c9b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
	...

0800c9c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2243      	movs	r2, #67	; 0x43
 800c9d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c9d6:	4b03      	ldr	r3, [pc, #12]	; (800c9e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bc80      	pop	{r7}
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	200007d4 	.word	0x200007d4

0800c9e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2243      	movs	r2, #67	; 0x43
 800c9f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c9f6:	4b03      	ldr	r3, [pc, #12]	; (800ca04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bc80      	pop	{r7}
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	20000790 	.word	0x20000790

0800ca08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2243      	movs	r2, #67	; 0x43
 800ca14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ca16:	4b03      	ldr	r3, [pc, #12]	; (800ca24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bc80      	pop	{r7}
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	20000818 	.word	0x20000818

0800ca28 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	220a      	movs	r2, #10
 800ca34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ca36:	4b03      	ldr	r3, [pc, #12]	; (800ca44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bc80      	pop	{r7}
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	2000074c 	.word	0x2000074c

0800ca48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ca52:	2302      	movs	r3, #2
 800ca54:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d005      	beq.n	800ca68 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	683a      	ldr	r2, [r7, #0]
 800ca60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bc80      	pop	{r7}
 800ca72:	4770      	bx	lr

0800ca74 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b087      	sub	sp, #28
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	4613      	mov	r3, r2
 800ca80:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ca88:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ca92:	88fa      	ldrh	r2, [r7, #6]
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	371c      	adds	r7, #28
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bc80      	pop	{r7}
 800caa4:	4770      	bx	lr

0800caa6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b085      	sub	sp, #20
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cab6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3714      	adds	r7, #20
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bc80      	pop	{r7}
 800caca:	4770      	bx	lr

0800cacc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cada:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d01c      	beq.n	800cb20 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800caec:	2b00      	cmp	r3, #0
 800caee:	d115      	bne.n	800cb1c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	2181      	movs	r1, #129	; 0x81
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f001 fcb3 	bl	800e47e <USBD_LL_Transmit>

      return USBD_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	e002      	b.n	800cb22 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e000      	b.n	800cb22 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800cb20:	2302      	movs	r3, #2
  }
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b084      	sub	sp, #16
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cb38:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d017      	beq.n	800cb74 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	7c1b      	ldrb	r3, [r3, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d109      	bne.n	800cb60 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb56:	2101      	movs	r1, #1
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f001 fcb3 	bl	800e4c4 <USBD_LL_PrepareReceive>
 800cb5e:	e007      	b.n	800cb70 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb66:	2340      	movs	r3, #64	; 0x40
 800cb68:	2101      	movs	r1, #1
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f001 fcaa 	bl	800e4c4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	e000      	b.n	800cb76 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800cb74:	2302      	movs	r3, #2
  }
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	60f8      	str	r0, [r7, #12]
 800cb86:	60b9      	str	r1, [r7, #8]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d101      	bne.n	800cb96 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cb92:	2302      	movs	r3, #2
 800cb94:	e01a      	b.n	800cbcc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d003      	beq.n	800cba8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d003      	beq.n	800cbb6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	79fa      	ldrb	r2, [r7, #7]
 800cbc2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f001 fb17 	bl	800e1f8 <USBD_LL_Init>

  return USBD_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d006      	beq.n	800cbf6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	73fb      	strb	r3, [r7, #15]
 800cbf4:	e001      	b.n	800cbfa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800cbf6:	2302      	movs	r3, #2
 800cbf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bc80      	pop	{r7}
 800cc04:	4770      	bx	lr

0800cc06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b082      	sub	sp, #8
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f001 fb4c 	bl	800e2ac <USBD_LL_Start>

  return USBD_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800cc1e:	b480      	push	{r7}
 800cc20:	b083      	sub	sp, #12
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	370c      	adds	r7, #12
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bc80      	pop	{r7}
 800cc30:	4770      	bx	lr

0800cc32 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b084      	sub	sp, #16
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800cc3e:	2302      	movs	r3, #2
 800cc40:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00c      	beq.n	800cc66 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	78fa      	ldrb	r2, [r7, #3]
 800cc56:	4611      	mov	r1, r2
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	4798      	blx	r3
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d101      	bne.n	800cc66 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800cc62:	2300      	movs	r3, #0
 800cc64:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800cc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	78fa      	ldrb	r2, [r7, #3]
 800cc86:	4611      	mov	r1, r2
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	4798      	blx	r3
  return USBD_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b082      	sub	sp, #8
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
 800cc9e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cca6:	6839      	ldr	r1, [r7, #0]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f000 fe62 	bl	800d972 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800ccca:	f003 031f 	and.w	r3, r3, #31
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d016      	beq.n	800cd00 <USBD_LL_SetupStage+0x6a>
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d81c      	bhi.n	800cd10 <USBD_LL_SetupStage+0x7a>
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d002      	beq.n	800cce0 <USBD_LL_SetupStage+0x4a>
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d008      	beq.n	800ccf0 <USBD_LL_SetupStage+0x5a>
 800ccde:	e017      	b.n	800cd10 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cce6:	4619      	mov	r1, r3
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 f9c5 	bl	800d078 <USBD_StdDevReq>
    break;
 800ccee:	e01a      	b.n	800cd26 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 fa27 	bl	800d14c <USBD_StdItfReq>
    break;
 800ccfe:	e012      	b.n	800cd26 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cd06:	4619      	mov	r1, r3
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fa67 	bl	800d1dc <USBD_StdEPReq>
    break;
 800cd0e:	e00a      	b.n	800cd26 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800cd16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f001 fb24 	bl	800e36c <USBD_LL_StallEP>
    break;
 800cd24:	bf00      	nop
  }

  return USBD_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	607a      	str	r2, [r7, #4]
 800cd3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800cd3e:	7afb      	ldrb	r3, [r7, #11]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d14b      	bne.n	800cddc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cd4a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	d134      	bne.n	800cdc0 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	68da      	ldr	r2, [r3, #12]
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d919      	bls.n	800cd96 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	68da      	ldr	r2, [r3, #12]
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	1ad2      	subs	r2, r2, r3
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	68da      	ldr	r2, [r3, #12]
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d203      	bcs.n	800cd84 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	e002      	b.n	800cd8a <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	6879      	ldr	r1, [r7, #4]
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f000 fee1 	bl	800db56 <USBD_CtlContinueRx>
 800cd94:	e038      	b.n	800ce08 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd9c:	691b      	ldr	r3, [r3, #16]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00a      	beq.n	800cdb8 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cda8:	2b03      	cmp	r3, #3
 800cdaa:	d105      	bne.n	800cdb8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f000 fede 	bl	800db7a <USBD_CtlSendStatus>
 800cdbe:	e023      	b.n	800ce08 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cdc6:	2b05      	cmp	r3, #5
 800cdc8:	d11e      	bne.n	800ce08 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f001 fac9 	bl	800e36c <USBD_LL_StallEP>
 800cdda:	e015      	b.n	800ce08 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00d      	beq.n	800ce04 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d108      	bne.n	800ce04 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cdf8:	699b      	ldr	r3, [r3, #24]
 800cdfa:	7afa      	ldrb	r2, [r7, #11]
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	4798      	blx	r3
 800ce02:	e001      	b.n	800ce08 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ce04:	2302      	movs	r3, #2
 800ce06:	e000      	b.n	800ce0a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3718      	adds	r7, #24
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b086      	sub	sp, #24
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	60f8      	str	r0, [r7, #12]
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	607a      	str	r2, [r7, #4]
 800ce1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800ce20:	7afb      	ldrb	r3, [r7, #11]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d17f      	bne.n	800cf26 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	3314      	adds	r3, #20
 800ce2a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ce32:	2b02      	cmp	r3, #2
 800ce34:	d15c      	bne.n	800cef0 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d915      	bls.n	800ce6e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	68da      	ldr	r2, [r3, #12]
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	1ad2      	subs	r2, r2, r3
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	461a      	mov	r2, r3
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f000 fe4b 	bl	800daf6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ce60:	2300      	movs	r3, #0
 800ce62:	2200      	movs	r2, #0
 800ce64:	2100      	movs	r1, #0
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f001 fb2c 	bl	800e4c4 <USBD_LL_PrepareReceive>
 800ce6c:	e04e      	b.n	800cf0c <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	6912      	ldr	r2, [r2, #16]
 800ce76:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce7a:	fb01 f202 	mul.w	r2, r1, r2
 800ce7e:	1a9b      	subs	r3, r3, r2
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d11c      	bne.n	800cebe <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	689a      	ldr	r2, [r3, #8]
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d316      	bcc.n	800cebe <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	689a      	ldr	r2, [r3, #8]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d20f      	bcs.n	800cebe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ce9e:	2200      	movs	r2, #0
 800cea0:	2100      	movs	r1, #0
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f000 fe27 	bl	800daf6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f001 fb04 	bl	800e4c4 <USBD_LL_PrepareReceive>
 800cebc:	e026      	b.n	800cf0c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00a      	beq.n	800cee0 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ced0:	2b03      	cmp	r3, #3
 800ced2:	d105      	bne.n	800cee0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800cee0:	2180      	movs	r1, #128	; 0x80
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f001 fa42 	bl	800e36c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f000 fe59 	bl	800dba0 <USBD_CtlReceiveStatus>
 800ceee:	e00d      	b.n	800cf0c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cef6:	2b04      	cmp	r3, #4
 800cef8:	d004      	beq.n	800cf04 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d103      	bne.n	800cf0c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800cf04:	2180      	movs	r1, #128	; 0x80
 800cf06:	68f8      	ldr	r0, [r7, #12]
 800cf08:	f001 fa30 	bl	800e36c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d11d      	bne.n	800cf52 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f7ff fe81 	bl	800cc1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800cf24:	e015      	b.n	800cf52 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cf2c:	695b      	ldr	r3, [r3, #20]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00d      	beq.n	800cf4e <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800cf38:	2b03      	cmp	r3, #3
 800cf3a:	d108      	bne.n	800cf4e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cf42:	695b      	ldr	r3, [r3, #20]
 800cf44:	7afa      	ldrb	r2, [r7, #11]
 800cf46:	4611      	mov	r1, r2
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	4798      	blx	r3
 800cf4c:	e001      	b.n	800cf52 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cf4e:	2302      	movs	r3, #2
 800cf50:	e000      	b.n	800cf54 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3718      	adds	r7, #24
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf64:	2340      	movs	r3, #64	; 0x40
 800cf66:	2200      	movs	r2, #0
 800cf68:	2100      	movs	r1, #0
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f001 f9b9 	bl	800e2e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2240      	movs	r2, #64	; 0x40
 800cf7c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf80:	2340      	movs	r3, #64	; 0x40
 800cf82:	2200      	movs	r2, #0
 800cf84:	2180      	movs	r1, #128	; 0x80
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f001 f9ab 	bl	800e2e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2240      	movs	r2, #64	; 0x40
 800cf96:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d009      	beq.n	800cfd4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	6852      	ldr	r2, [r2, #4]
 800cfcc:	b2d2      	uxtb	r2, r2
 800cfce:	4611      	mov	r1, r2
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	4798      	blx	r3
  }

  return USBD_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800cfde:	b480      	push	{r7}
 800cfe0:	b083      	sub	sp, #12
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	78fa      	ldrb	r2, [r7, #3]
 800cfee:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800cff0:	2300      	movs	r3, #0
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	370c      	adds	r7, #12
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bc80      	pop	{r7}
 800cffa:	4770      	bx	lr

0800cffc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2204      	movs	r2, #4
 800d014:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	bc80      	pop	{r7}
 800d022:	4770      	bx	lr

0800d024 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d038:	2300      	movs	r3, #0
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	370c      	adds	r7, #12
 800d03e:	46bd      	mov	sp, r7
 800d040:	bc80      	pop	{r7}
 800d042:	4770      	bx	lr

0800d044 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d052:	2b03      	cmp	r3, #3
 800d054:	d10b      	bne.n	800d06e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d05c:	69db      	ldr	r3, [r3, #28]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d005      	beq.n	800d06e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d08e:	2b40      	cmp	r3, #64	; 0x40
 800d090:	d005      	beq.n	800d09e <USBD_StdDevReq+0x26>
 800d092:	2b40      	cmp	r3, #64	; 0x40
 800d094:	d84f      	bhi.n	800d136 <USBD_StdDevReq+0xbe>
 800d096:	2b00      	cmp	r3, #0
 800d098:	d009      	beq.n	800d0ae <USBD_StdDevReq+0x36>
 800d09a:	2b20      	cmp	r3, #32
 800d09c:	d14b      	bne.n	800d136 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	6839      	ldr	r1, [r7, #0]
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	4798      	blx	r3
    break;
 800d0ac:	e048      	b.n	800d140 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	785b      	ldrb	r3, [r3, #1]
 800d0b2:	2b09      	cmp	r3, #9
 800d0b4:	d839      	bhi.n	800d12a <USBD_StdDevReq+0xb2>
 800d0b6:	a201      	add	r2, pc, #4	; (adr r2, 800d0bc <USBD_StdDevReq+0x44>)
 800d0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0bc:	0800d10d 	.word	0x0800d10d
 800d0c0:	0800d121 	.word	0x0800d121
 800d0c4:	0800d12b 	.word	0x0800d12b
 800d0c8:	0800d117 	.word	0x0800d117
 800d0cc:	0800d12b 	.word	0x0800d12b
 800d0d0:	0800d0ef 	.word	0x0800d0ef
 800d0d4:	0800d0e5 	.word	0x0800d0e5
 800d0d8:	0800d12b 	.word	0x0800d12b
 800d0dc:	0800d103 	.word	0x0800d103
 800d0e0:	0800d0f9 	.word	0x0800d0f9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 f9da 	bl	800d4a0 <USBD_GetDescriptor>
      break;
 800d0ec:	e022      	b.n	800d134 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800d0ee:	6839      	ldr	r1, [r7, #0]
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 facf 	bl	800d694 <USBD_SetAddress>
      break;
 800d0f6:	e01d      	b.n	800d134 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 fb0e 	bl	800d71c <USBD_SetConfig>
      break;
 800d100:	e018      	b.n	800d134 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800d102:	6839      	ldr	r1, [r7, #0]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 fb97 	bl	800d838 <USBD_GetConfig>
      break;
 800d10a:	e013      	b.n	800d134 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800d10c:	6839      	ldr	r1, [r7, #0]
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 fbc7 	bl	800d8a2 <USBD_GetStatus>
      break;
 800d114:	e00e      	b.n	800d134 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800d116:	6839      	ldr	r1, [r7, #0]
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 fbf5 	bl	800d908 <USBD_SetFeature>
      break;
 800d11e:	e009      	b.n	800d134 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800d120:	6839      	ldr	r1, [r7, #0]
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 fc04 	bl	800d930 <USBD_ClrFeature>
      break;
 800d128:	e004      	b.n	800d134 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800d12a:	6839      	ldr	r1, [r7, #0]
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fc5c 	bl	800d9ea <USBD_CtlError>
      break;
 800d132:	bf00      	nop
    }
    break;
 800d134:	e004      	b.n	800d140 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800d136:	6839      	ldr	r1, [r7, #0]
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 fc56 	bl	800d9ea <USBD_CtlError>
    break;
 800d13e:	bf00      	nop
  }

  return ret;
 800d140:	7bfb      	ldrb	r3, [r7, #15]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop

0800d14c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d156:	2300      	movs	r3, #0
 800d158:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d162:	2b40      	cmp	r3, #64	; 0x40
 800d164:	d005      	beq.n	800d172 <USBD_StdItfReq+0x26>
 800d166:	2b40      	cmp	r3, #64	; 0x40
 800d168:	d82e      	bhi.n	800d1c8 <USBD_StdItfReq+0x7c>
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d001      	beq.n	800d172 <USBD_StdItfReq+0x26>
 800d16e:	2b20      	cmp	r3, #32
 800d170:	d12a      	bne.n	800d1c8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d178:	3b01      	subs	r3, #1
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d81d      	bhi.n	800d1ba <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	889b      	ldrh	r3, [r3, #4]
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b01      	cmp	r3, #1
 800d186:	d813      	bhi.n	800d1b0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	6839      	ldr	r1, [r7, #0]
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	4798      	blx	r3
 800d196:	4603      	mov	r3, r0
 800d198:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	88db      	ldrh	r3, [r3, #6]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d110      	bne.n	800d1c4 <USBD_StdItfReq+0x78>
 800d1a2:	7bfb      	ldrb	r3, [r7, #15]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10d      	bne.n	800d1c4 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 fce6 	bl	800db7a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d1ae:	e009      	b.n	800d1c4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fc19 	bl	800d9ea <USBD_CtlError>
      break;
 800d1b8:	e004      	b.n	800d1c4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800d1ba:	6839      	ldr	r1, [r7, #0]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 fc14 	bl	800d9ea <USBD_CtlError>
      break;
 800d1c2:	e000      	b.n	800d1c6 <USBD_StdItfReq+0x7a>
      break;
 800d1c4:	bf00      	nop
    }
    break;
 800d1c6:	e004      	b.n	800d1d2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800d1c8:	6839      	ldr	r1, [r7, #0]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 fc0d 	bl	800d9ea <USBD_CtlError>
    break;
 800d1d0:	bf00      	nop
  }

  return USBD_OK;
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	889b      	ldrh	r3, [r3, #4]
 800d1ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1f8:	2b40      	cmp	r3, #64	; 0x40
 800d1fa:	d007      	beq.n	800d20c <USBD_StdEPReq+0x30>
 800d1fc:	2b40      	cmp	r3, #64	; 0x40
 800d1fe:	f200 8144 	bhi.w	800d48a <USBD_StdEPReq+0x2ae>
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00a      	beq.n	800d21c <USBD_StdEPReq+0x40>
 800d206:	2b20      	cmp	r3, #32
 800d208:	f040 813f 	bne.w	800d48a <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	6839      	ldr	r1, [r7, #0]
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	4798      	blx	r3
    break;
 800d21a:	e13b      	b.n	800d494 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d224:	2b20      	cmp	r3, #32
 800d226:	d10a      	bne.n	800d23e <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	6839      	ldr	r1, [r7, #0]
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	4798      	blx	r3
 800d236:	4603      	mov	r3, r0
 800d238:	73fb      	strb	r3, [r7, #15]

      return ret;
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
 800d23c:	e12b      	b.n	800d496 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	785b      	ldrb	r3, [r3, #1]
 800d242:	2b03      	cmp	r3, #3
 800d244:	d007      	beq.n	800d256 <USBD_StdEPReq+0x7a>
 800d246:	2b03      	cmp	r3, #3
 800d248:	f300 8119 	bgt.w	800d47e <USBD_StdEPReq+0x2a2>
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d072      	beq.n	800d336 <USBD_StdEPReq+0x15a>
 800d250:	2b01      	cmp	r3, #1
 800d252:	d03a      	beq.n	800d2ca <USBD_StdEPReq+0xee>
 800d254:	e113      	b.n	800d47e <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	d002      	beq.n	800d266 <USBD_StdEPReq+0x8a>
 800d260:	2b03      	cmp	r3, #3
 800d262:	d015      	beq.n	800d290 <USBD_StdEPReq+0xb4>
 800d264:	e02b      	b.n	800d2be <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d266:	7bbb      	ldrb	r3, [r7, #14]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00c      	beq.n	800d286 <USBD_StdEPReq+0xaa>
 800d26c:	7bbb      	ldrb	r3, [r7, #14]
 800d26e:	2b80      	cmp	r3, #128	; 0x80
 800d270:	d009      	beq.n	800d286 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d272:	7bbb      	ldrb	r3, [r7, #14]
 800d274:	4619      	mov	r1, r3
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f001 f878 	bl	800e36c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d27c:	2180      	movs	r1, #128	; 0x80
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f001 f874 	bl	800e36c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d284:	e020      	b.n	800d2c8 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fbae 	bl	800d9ea <USBD_CtlError>
        break;
 800d28e:	e01b      	b.n	800d2c8 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	885b      	ldrh	r3, [r3, #2]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10e      	bne.n	800d2b6 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d298:	7bbb      	ldrb	r3, [r7, #14]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00b      	beq.n	800d2b6 <USBD_StdEPReq+0xda>
 800d29e:	7bbb      	ldrb	r3, [r7, #14]
 800d2a0:	2b80      	cmp	r3, #128	; 0x80
 800d2a2:	d008      	beq.n	800d2b6 <USBD_StdEPReq+0xda>
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	88db      	ldrh	r3, [r3, #6]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d104      	bne.n	800d2b6 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800d2ac:	7bbb      	ldrb	r3, [r7, #14]
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f001 f85b 	bl	800e36c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 fc5f 	bl	800db7a <USBD_CtlSendStatus>

        break;
 800d2bc:	e004      	b.n	800d2c8 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fb92 	bl	800d9ea <USBD_CtlError>
        break;
 800d2c6:	bf00      	nop
      }
      break;
 800d2c8:	e0de      	b.n	800d488 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d002      	beq.n	800d2da <USBD_StdEPReq+0xfe>
 800d2d4:	2b03      	cmp	r3, #3
 800d2d6:	d015      	beq.n	800d304 <USBD_StdEPReq+0x128>
 800d2d8:	e026      	b.n	800d328 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2da:	7bbb      	ldrb	r3, [r7, #14]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00c      	beq.n	800d2fa <USBD_StdEPReq+0x11e>
 800d2e0:	7bbb      	ldrb	r3, [r7, #14]
 800d2e2:	2b80      	cmp	r3, #128	; 0x80
 800d2e4:	d009      	beq.n	800d2fa <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d2e6:	7bbb      	ldrb	r3, [r7, #14]
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f001 f83e 	bl	800e36c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d2f0:	2180      	movs	r1, #128	; 0x80
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f001 f83a 	bl	800e36c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d2f8:	e01c      	b.n	800d334 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800d2fa:	6839      	ldr	r1, [r7, #0]
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 fb74 	bl	800d9ea <USBD_CtlError>
        break;
 800d302:	e017      	b.n	800d334 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	885b      	ldrh	r3, [r3, #2]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d112      	bne.n	800d332 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d30c:	7bbb      	ldrb	r3, [r7, #14]
 800d30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d312:	2b00      	cmp	r3, #0
 800d314:	d004      	beq.n	800d320 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800d316:	7bbb      	ldrb	r3, [r7, #14]
 800d318:	4619      	mov	r1, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f001 f845 	bl	800e3aa <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 fc2a 	bl	800db7a <USBD_CtlSendStatus>
        }
        break;
 800d326:	e004      	b.n	800d332 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 fb5d 	bl	800d9ea <USBD_CtlError>
        break;
 800d330:	e000      	b.n	800d334 <USBD_StdEPReq+0x158>
        break;
 800d332:	bf00      	nop
      }
      break;
 800d334:	e0a8      	b.n	800d488 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	d002      	beq.n	800d346 <USBD_StdEPReq+0x16a>
 800d340:	2b03      	cmp	r3, #3
 800d342:	d031      	beq.n	800d3a8 <USBD_StdEPReq+0x1cc>
 800d344:	e095      	b.n	800d472 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d346:	7bbb      	ldrb	r3, [r7, #14]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d007      	beq.n	800d35c <USBD_StdEPReq+0x180>
 800d34c:	7bbb      	ldrb	r3, [r7, #14]
 800d34e:	2b80      	cmp	r3, #128	; 0x80
 800d350:	d004      	beq.n	800d35c <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800d352:	6839      	ldr	r1, [r7, #0]
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fb48 	bl	800d9ea <USBD_CtlError>
          break;
 800d35a:	e08f      	b.n	800d47c <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d35c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d360:	2b00      	cmp	r3, #0
 800d362:	da0b      	bge.n	800d37c <USBD_StdEPReq+0x1a0>
 800d364:	7bbb      	ldrb	r3, [r7, #14]
 800d366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d36a:	4613      	mov	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4413      	add	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	3310      	adds	r3, #16
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	4413      	add	r3, r2
 800d378:	3304      	adds	r3, #4
 800d37a:	e00a      	b.n	800d392 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d37c:	7bbb      	ldrb	r3, [r7, #14]
 800d37e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d382:	4613      	mov	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	4413      	add	r3, r2
 800d392:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	2200      	movs	r2, #0
 800d398:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	2202      	movs	r2, #2
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fb8c 	bl	800dabe <USBD_CtlSendData>
          break;
 800d3a6:	e069      	b.n	800d47c <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800d3a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	da11      	bge.n	800d3d4 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d3b0:	7bbb      	ldrb	r3, [r7, #14]
 800d3b2:	f003 020f 	and.w	r2, r3, #15
 800d3b6:	6879      	ldr	r1, [r7, #4]
 800d3b8:	4613      	mov	r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	4413      	add	r3, r2
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	440b      	add	r3, r1
 800d3c2:	3318      	adds	r3, #24
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d117      	bne.n	800d3fa <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 fb0c 	bl	800d9ea <USBD_CtlError>
            break;
 800d3d2:	e053      	b.n	800d47c <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d3d4:	7bbb      	ldrb	r3, [r7, #14]
 800d3d6:	f003 020f 	and.w	r2, r3, #15
 800d3da:	6879      	ldr	r1, [r7, #4]
 800d3dc:	4613      	mov	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	4413      	add	r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	440b      	add	r3, r1
 800d3e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d104      	bne.n	800d3fa <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800d3f0:	6839      	ldr	r1, [r7, #0]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 faf9 	bl	800d9ea <USBD_CtlError>
            break;
 800d3f8:	e040      	b.n	800d47c <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d3fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	da0b      	bge.n	800d41a <USBD_StdEPReq+0x23e>
 800d402:	7bbb      	ldrb	r3, [r7, #14]
 800d404:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d408:	4613      	mov	r3, r2
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	4413      	add	r3, r2
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	3310      	adds	r3, #16
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	4413      	add	r3, r2
 800d416:	3304      	adds	r3, #4
 800d418:	e00a      	b.n	800d430 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d41a:	7bbb      	ldrb	r3, [r7, #14]
 800d41c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d420:	4613      	mov	r3, r2
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	4413      	add	r3, r2
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	4413      	add	r3, r2
 800d430:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d432:	7bbb      	ldrb	r3, [r7, #14]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d002      	beq.n	800d43e <USBD_StdEPReq+0x262>
 800d438:	7bbb      	ldrb	r3, [r7, #14]
 800d43a:	2b80      	cmp	r3, #128	; 0x80
 800d43c:	d103      	bne.n	800d446 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	2200      	movs	r2, #0
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	e00e      	b.n	800d464 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800d446:	7bbb      	ldrb	r3, [r7, #14]
 800d448:	4619      	mov	r1, r3
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 ffcc 	bl	800e3e8 <USBD_LL_IsStallEP>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d003      	beq.n	800d45e <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	2201      	movs	r2, #1
 800d45a:	601a      	str	r2, [r3, #0]
 800d45c:	e002      	b.n	800d464 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	2200      	movs	r2, #0
 800d462:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	2202      	movs	r2, #2
 800d468:	4619      	mov	r1, r3
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fb27 	bl	800dabe <USBD_CtlSendData>
          break;
 800d470:	e004      	b.n	800d47c <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 fab8 	bl	800d9ea <USBD_CtlError>
        break;
 800d47a:	bf00      	nop
      }
      break;
 800d47c:	e004      	b.n	800d488 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 fab2 	bl	800d9ea <USBD_CtlError>
      break;
 800d486:	bf00      	nop
    }
    break;
 800d488:	e004      	b.n	800d494 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800d48a:	6839      	ldr	r1, [r7, #0]
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 faac 	bl	800d9ea <USBD_CtlError>
    break;
 800d492:	bf00      	nop
  }

  return ret;
 800d494:	7bfb      	ldrb	r3, [r7, #15]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
	...

0800d4a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	885b      	ldrh	r3, [r3, #2]
 800d4ae:	0a1b      	lsrs	r3, r3, #8
 800d4b0:	b29b      	uxth	r3, r3
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	2b06      	cmp	r3, #6
 800d4b6:	f200 80c9 	bhi.w	800d64c <USBD_GetDescriptor+0x1ac>
 800d4ba:	a201      	add	r2, pc, #4	; (adr r2, 800d4c0 <USBD_GetDescriptor+0x20>)
 800d4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c0:	0800d4dd 	.word	0x0800d4dd
 800d4c4:	0800d4f5 	.word	0x0800d4f5
 800d4c8:	0800d535 	.word	0x0800d535
 800d4cc:	0800d64d 	.word	0x0800d64d
 800d4d0:	0800d64d 	.word	0x0800d64d
 800d4d4:	0800d5f9 	.word	0x0800d5f9
 800d4d8:	0800d61f 	.word	0x0800d61f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	7c12      	ldrb	r2, [r2, #16]
 800d4e8:	f107 010a 	add.w	r1, r7, #10
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	4798      	blx	r3
 800d4f0:	60f8      	str	r0, [r7, #12]
    break;
 800d4f2:	e0b0      	b.n	800d656 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	7c1b      	ldrb	r3, [r3, #16]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10d      	bne.n	800d518 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d504:	f107 020a 	add.w	r2, r7, #10
 800d508:	4610      	mov	r0, r2
 800d50a:	4798      	blx	r3
 800d50c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	3301      	adds	r3, #1
 800d512:	2202      	movs	r2, #2
 800d514:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d516:	e09e      	b.n	800d656 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d520:	f107 020a 	add.w	r2, r7, #10
 800d524:	4610      	mov	r0, r2
 800d526:	4798      	blx	r3
 800d528:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	3301      	adds	r3, #1
 800d52e:	2202      	movs	r2, #2
 800d530:	701a      	strb	r2, [r3, #0]
    break;
 800d532:	e090      	b.n	800d656 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	885b      	ldrh	r3, [r3, #2]
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	2b05      	cmp	r3, #5
 800d53c:	d856      	bhi.n	800d5ec <USBD_GetDescriptor+0x14c>
 800d53e:	a201      	add	r2, pc, #4	; (adr r2, 800d544 <USBD_GetDescriptor+0xa4>)
 800d540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d544:	0800d55d 	.word	0x0800d55d
 800d548:	0800d575 	.word	0x0800d575
 800d54c:	0800d58d 	.word	0x0800d58d
 800d550:	0800d5a5 	.word	0x0800d5a5
 800d554:	0800d5bd 	.word	0x0800d5bd
 800d558:	0800d5d5 	.word	0x0800d5d5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	7c12      	ldrb	r2, [r2, #16]
 800d568:	f107 010a 	add.w	r1, r7, #10
 800d56c:	4610      	mov	r0, r2
 800d56e:	4798      	blx	r3
 800d570:	60f8      	str	r0, [r7, #12]
      break;
 800d572:	e040      	b.n	800d5f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d57a:	689b      	ldr	r3, [r3, #8]
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	7c12      	ldrb	r2, [r2, #16]
 800d580:	f107 010a 	add.w	r1, r7, #10
 800d584:	4610      	mov	r0, r2
 800d586:	4798      	blx	r3
 800d588:	60f8      	str	r0, [r7, #12]
      break;
 800d58a:	e034      	b.n	800d5f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	7c12      	ldrb	r2, [r2, #16]
 800d598:	f107 010a 	add.w	r1, r7, #10
 800d59c:	4610      	mov	r0, r2
 800d59e:	4798      	blx	r3
 800d5a0:	60f8      	str	r0, [r7, #12]
      break;
 800d5a2:	e028      	b.n	800d5f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d5aa:	691b      	ldr	r3, [r3, #16]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	7c12      	ldrb	r2, [r2, #16]
 800d5b0:	f107 010a 	add.w	r1, r7, #10
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	4798      	blx	r3
 800d5b8:	60f8      	str	r0, [r7, #12]
      break;
 800d5ba:	e01c      	b.n	800d5f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d5c2:	695b      	ldr	r3, [r3, #20]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	7c12      	ldrb	r2, [r2, #16]
 800d5c8:	f107 010a 	add.w	r1, r7, #10
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	4798      	blx	r3
 800d5d0:	60f8      	str	r0, [r7, #12]
      break;
 800d5d2:	e010      	b.n	800d5f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d5da:	699b      	ldr	r3, [r3, #24]
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	7c12      	ldrb	r2, [r2, #16]
 800d5e0:	f107 010a 	add.w	r1, r7, #10
 800d5e4:	4610      	mov	r0, r2
 800d5e6:	4798      	blx	r3
 800d5e8:	60f8      	str	r0, [r7, #12]
      break;
 800d5ea:	e004      	b.n	800d5f6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f9fb 	bl	800d9ea <USBD_CtlError>
      return;
 800d5f4:	e04b      	b.n	800d68e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800d5f6:	e02e      	b.n	800d656 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	7c1b      	ldrb	r3, [r3, #16]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d109      	bne.n	800d614 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d608:	f107 020a 	add.w	r2, r7, #10
 800d60c:	4610      	mov	r0, r2
 800d60e:	4798      	blx	r3
 800d610:	60f8      	str	r0, [r7, #12]
      break;
 800d612:	e020      	b.n	800d656 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d614:	6839      	ldr	r1, [r7, #0]
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 f9e7 	bl	800d9ea <USBD_CtlError>
      return;
 800d61c:	e037      	b.n	800d68e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	7c1b      	ldrb	r3, [r3, #16]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10d      	bne.n	800d642 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d62e:	f107 020a 	add.w	r2, r7, #10
 800d632:	4610      	mov	r0, r2
 800d634:	4798      	blx	r3
 800d636:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	3301      	adds	r3, #1
 800d63c:	2207      	movs	r2, #7
 800d63e:	701a      	strb	r2, [r3, #0]
      break;
 800d640:	e009      	b.n	800d656 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d642:	6839      	ldr	r1, [r7, #0]
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 f9d0 	bl	800d9ea <USBD_CtlError>
      return;
 800d64a:	e020      	b.n	800d68e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800d64c:	6839      	ldr	r1, [r7, #0]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f9cb 	bl	800d9ea <USBD_CtlError>
    return;
 800d654:	e01b      	b.n	800d68e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800d656:	897b      	ldrh	r3, [r7, #10]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d011      	beq.n	800d680 <USBD_GetDescriptor+0x1e0>
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	88db      	ldrh	r3, [r3, #6]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00d      	beq.n	800d680 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	88da      	ldrh	r2, [r3, #6]
 800d668:	897b      	ldrh	r3, [r7, #10]
 800d66a:	4293      	cmp	r3, r2
 800d66c:	bf28      	it	cs
 800d66e:	4613      	movcs	r3, r2
 800d670:	b29b      	uxth	r3, r3
 800d672:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800d674:	897b      	ldrh	r3, [r7, #10]
 800d676:	461a      	mov	r2, r3
 800d678:	68f9      	ldr	r1, [r7, #12]
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fa1f 	bl	800dabe <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	88db      	ldrh	r3, [r3, #6]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d102      	bne.n	800d68e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 fa76 	bl	800db7a <USBD_CtlSendStatus>
  }
}
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	889b      	ldrh	r3, [r3, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d130      	bne.n	800d708 <USBD_SetAddress+0x74>
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	88db      	ldrh	r3, [r3, #6]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d12c      	bne.n	800d708 <USBD_SetAddress+0x74>
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	885b      	ldrh	r3, [r3, #2]
 800d6b2:	2b7f      	cmp	r3, #127	; 0x7f
 800d6b4:	d828      	bhi.n	800d708 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	885b      	ldrh	r3, [r3, #2]
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d6c8:	2b03      	cmp	r3, #3
 800d6ca:	d104      	bne.n	800d6d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 f98b 	bl	800d9ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6d4:	e01d      	b.n	800d712 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	7bfa      	ldrb	r2, [r7, #15]
 800d6da:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 feac 	bl	800e440 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 fa46 	bl	800db7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d6ee:	7bfb      	ldrb	r3, [r7, #15]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d004      	beq.n	800d6fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2202      	movs	r2, #2
 800d6f8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6fc:	e009      	b.n	800d712 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d706:	e004      	b.n	800d712 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d708:	6839      	ldr	r1, [r7, #0]
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f96d 	bl	800d9ea <USBD_CtlError>
  }
}
 800d710:	bf00      	nop
 800d712:	bf00      	nop
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
	...

0800d71c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	885b      	ldrh	r3, [r3, #2]
 800d72a:	b2da      	uxtb	r2, r3
 800d72c:	4b41      	ldr	r3, [pc, #260]	; (800d834 <USBD_SetConfig+0x118>)
 800d72e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d730:	4b40      	ldr	r3, [pc, #256]	; (800d834 <USBD_SetConfig+0x118>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d904      	bls.n	800d742 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d738:	6839      	ldr	r1, [r7, #0]
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 f955 	bl	800d9ea <USBD_CtlError>
 800d740:	e075      	b.n	800d82e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d002      	beq.n	800d752 <USBD_SetConfig+0x36>
 800d74c:	2b03      	cmp	r3, #3
 800d74e:	d023      	beq.n	800d798 <USBD_SetConfig+0x7c>
 800d750:	e062      	b.n	800d818 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800d752:	4b38      	ldr	r3, [pc, #224]	; (800d834 <USBD_SetConfig+0x118>)
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d01a      	beq.n	800d790 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800d75a:	4b36      	ldr	r3, [pc, #216]	; (800d834 <USBD_SetConfig+0x118>)
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	461a      	mov	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2203      	movs	r2, #3
 800d768:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d76c:	4b31      	ldr	r3, [pc, #196]	; (800d834 <USBD_SetConfig+0x118>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	4619      	mov	r1, r3
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f7ff fa5d 	bl	800cc32 <USBD_SetClassConfig>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d104      	bne.n	800d788 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800d77e:	6839      	ldr	r1, [r7, #0]
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 f932 	bl	800d9ea <USBD_CtlError>
          return;
 800d786:	e052      	b.n	800d82e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 f9f6 	bl	800db7a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d78e:	e04e      	b.n	800d82e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 f9f2 	bl	800db7a <USBD_CtlSendStatus>
      break;
 800d796:	e04a      	b.n	800d82e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d798:	4b26      	ldr	r3, [pc, #152]	; (800d834 <USBD_SetConfig+0x118>)
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d112      	bne.n	800d7c6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800d7a8:	4b22      	ldr	r3, [pc, #136]	; (800d834 <USBD_SetConfig+0x118>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800d7b2:	4b20      	ldr	r3, [pc, #128]	; (800d834 <USBD_SetConfig+0x118>)
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f7ff fa59 	bl	800cc70 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 f9db 	bl	800db7a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d7c4:	e033      	b.n	800d82e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800d7c6:	4b1b      	ldr	r3, [pc, #108]	; (800d834 <USBD_SetConfig+0x118>)
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d01d      	beq.n	800d810 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	4619      	mov	r1, r3
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7ff fa47 	bl	800cc70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d7e2:	4b14      	ldr	r3, [pc, #80]	; (800d834 <USBD_SetConfig+0x118>)
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d7ec:	4b11      	ldr	r3, [pc, #68]	; (800d834 <USBD_SetConfig+0x118>)
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7ff fa1d 	bl	800cc32 <USBD_SetClassConfig>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d104      	bne.n	800d808 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800d7fe:	6839      	ldr	r1, [r7, #0]
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f8f2 	bl	800d9ea <USBD_CtlError>
          return;
 800d806:	e012      	b.n	800d82e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 f9b6 	bl	800db7a <USBD_CtlSendStatus>
      break;
 800d80e:	e00e      	b.n	800d82e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 f9b2 	bl	800db7a <USBD_CtlSendStatus>
      break;
 800d816:	e00a      	b.n	800d82e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800d818:	6839      	ldr	r1, [r7, #0]
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 f8e5 	bl	800d9ea <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800d820:	4b04      	ldr	r3, [pc, #16]	; (800d834 <USBD_SetConfig+0x118>)
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7ff fa22 	bl	800cc70 <USBD_ClrClassConfig>
      break;
 800d82c:	bf00      	nop
    }
  }
}
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	20000e08 	.word	0x20000e08

0800d838 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	88db      	ldrh	r3, [r3, #6]
 800d846:	2b01      	cmp	r3, #1
 800d848:	d004      	beq.n	800d854 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 f8cc 	bl	800d9ea <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d852:	e022      	b.n	800d89a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	dc02      	bgt.n	800d864 <USBD_GetConfig+0x2c>
 800d85e:	2b00      	cmp	r3, #0
 800d860:	dc03      	bgt.n	800d86a <USBD_GetConfig+0x32>
 800d862:	e015      	b.n	800d890 <USBD_GetConfig+0x58>
 800d864:	2b03      	cmp	r3, #3
 800d866:	d00b      	beq.n	800d880 <USBD_GetConfig+0x48>
 800d868:	e012      	b.n	800d890 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	3308      	adds	r3, #8
 800d874:	2201      	movs	r2, #1
 800d876:	4619      	mov	r1, r3
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f000 f920 	bl	800dabe <USBD_CtlSendData>
      break;
 800d87e:	e00c      	b.n	800d89a <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3304      	adds	r3, #4
 800d884:	2201      	movs	r2, #1
 800d886:	4619      	mov	r1, r3
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 f918 	bl	800dabe <USBD_CtlSendData>
      break;
 800d88e:	e004      	b.n	800d89a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800d890:	6839      	ldr	r1, [r7, #0]
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 f8a9 	bl	800d9ea <USBD_CtlError>
      break;
 800d898:	bf00      	nop
}
 800d89a:	bf00      	nop
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b082      	sub	sp, #8
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	d81e      	bhi.n	800d8f6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	88db      	ldrh	r3, [r3, #6]
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d004      	beq.n	800d8ca <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d8c0:	6839      	ldr	r1, [r7, #0]
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f891 	bl	800d9ea <USBD_CtlError>
      break;
 800d8c8:	e01a      	b.n	800d900 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d005      	beq.n	800d8e6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	f043 0202 	orr.w	r2, r3, #2
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	330c      	adds	r3, #12
 800d8ea:	2202      	movs	r2, #2
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f8e5 	bl	800dabe <USBD_CtlSendData>
    break;
 800d8f4:	e004      	b.n	800d900 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 f876 	bl	800d9ea <USBD_CtlError>
    break;
 800d8fe:	bf00      	nop
  }
}
 800d900:	bf00      	nop
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	885b      	ldrh	r3, [r3, #2]
 800d916:	2b01      	cmp	r3, #1
 800d918:	d106      	bne.n	800d928 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2201      	movs	r2, #1
 800d91e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 f929 	bl	800db7a <USBD_CtlSendStatus>
  }

}
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d940:	3b01      	subs	r3, #1
 800d942:	2b02      	cmp	r3, #2
 800d944:	d80b      	bhi.n	800d95e <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	885b      	ldrh	r3, [r3, #2]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d10c      	bne.n	800d968 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f90f 	bl	800db7a <USBD_CtlSendStatus>
    }
    break;
 800d95c:	e004      	b.n	800d968 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800d95e:	6839      	ldr	r1, [r7, #0]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 f842 	bl	800d9ea <USBD_CtlError>
    break;
 800d966:	e000      	b.n	800d96a <USBD_ClrFeature+0x3a>
    break;
 800d968:	bf00      	nop
  }
}
 800d96a:	bf00      	nop
 800d96c:	3708      	adds	r7, #8
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d972:	b480      	push	{r7}
 800d974:	b083      	sub	sp, #12
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
 800d97a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	781a      	ldrb	r2, [r3, #0]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	785a      	ldrb	r2, [r3, #1]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	3302      	adds	r3, #2
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	b29a      	uxth	r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	3303      	adds	r3, #3
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	021b      	lsls	r3, r3, #8
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	4413      	add	r3, r2
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	3304      	adds	r3, #4
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	3305      	adds	r3, #5
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	021b      	lsls	r3, r3, #8
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	4413      	add	r3, r2
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	3306      	adds	r3, #6
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	b29a      	uxth	r2, r3
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	3307      	adds	r3, #7
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	021b      	lsls	r3, r3, #8
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	4413      	add	r3, r2
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	80da      	strh	r2, [r3, #6]

}
 800d9e0:	bf00      	nop
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bc80      	pop	{r7}
 800d9e8:	4770      	bx	lr

0800d9ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b082      	sub	sp, #8
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d9f4:	2180      	movs	r1, #128	; 0x80
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 fcb8 	bl	800e36c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fcb4 	bl	800e36c <USBD_LL_StallEP>
}
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800da18:	2300      	movs	r3, #0
 800da1a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d032      	beq.n	800da88 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f000 f834 	bl	800da90 <USBD_GetLen>
 800da28:	4603      	mov	r3, r0
 800da2a:	3301      	adds	r3, #1
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	005b      	lsls	r3, r3, #1
 800da30:	b29a      	uxth	r2, r3
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800da36:	7dfb      	ldrb	r3, [r7, #23]
 800da38:	1c5a      	adds	r2, r3, #1
 800da3a:	75fa      	strb	r2, [r7, #23]
 800da3c:	461a      	mov	r2, r3
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	4413      	add	r3, r2
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	7812      	ldrb	r2, [r2, #0]
 800da46:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800da48:	7dfb      	ldrb	r3, [r7, #23]
 800da4a:	1c5a      	adds	r2, r3, #1
 800da4c:	75fa      	strb	r2, [r7, #23]
 800da4e:	461a      	mov	r2, r3
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	4413      	add	r3, r2
 800da54:	2203      	movs	r2, #3
 800da56:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800da58:	e012      	b.n	800da80 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	1c5a      	adds	r2, r3, #1
 800da5e:	60fa      	str	r2, [r7, #12]
 800da60:	7dfa      	ldrb	r2, [r7, #23]
 800da62:	1c51      	adds	r1, r2, #1
 800da64:	75f9      	strb	r1, [r7, #23]
 800da66:	4611      	mov	r1, r2
 800da68:	68ba      	ldr	r2, [r7, #8]
 800da6a:	440a      	add	r2, r1
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800da70:	7dfb      	ldrb	r3, [r7, #23]
 800da72:	1c5a      	adds	r2, r3, #1
 800da74:	75fa      	strb	r2, [r7, #23]
 800da76:	461a      	mov	r2, r3
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	4413      	add	r3, r2
 800da7c:	2200      	movs	r2, #0
 800da7e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1e8      	bne.n	800da5a <USBD_GetString+0x4e>
    }
  }
}
 800da88:	bf00      	nop
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800da90:	b480      	push	{r7}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800da98:	2300      	movs	r3, #0
 800da9a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800da9c:	e005      	b.n	800daaa <USBD_GetLen+0x1a>
    {
        len++;
 800da9e:	7bfb      	ldrb	r3, [r7, #15]
 800daa0:	3301      	adds	r3, #1
 800daa2:	73fb      	strb	r3, [r7, #15]
        buf++;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	3301      	adds	r3, #1
 800daa8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1f5      	bne.n	800da9e <USBD_GetLen+0xe>
    }

    return len;
 800dab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3714      	adds	r7, #20
 800dab8:	46bd      	mov	sp, r7
 800daba:	bc80      	pop	{r7}
 800dabc:	4770      	bx	lr

0800dabe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b084      	sub	sp, #16
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	60f8      	str	r0, [r7, #12]
 800dac6:	60b9      	str	r1, [r7, #8]
 800dac8:	4613      	mov	r3, r2
 800daca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2202      	movs	r2, #2
 800dad0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800dad4:	88fa      	ldrh	r2, [r7, #6]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800dada:	88fa      	ldrh	r2, [r7, #6]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800dae0:	88fb      	ldrh	r3, [r7, #6]
 800dae2:	68ba      	ldr	r2, [r7, #8]
 800dae4:	2100      	movs	r1, #0
 800dae6:	68f8      	ldr	r0, [r7, #12]
 800dae8:	f000 fcc9 	bl	800e47e <USBD_LL_Transmit>

  return USBD_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b084      	sub	sp, #16
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	60f8      	str	r0, [r7, #12]
 800dafe:	60b9      	str	r1, [r7, #8]
 800db00:	4613      	mov	r3, r2
 800db02:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800db04:	88fb      	ldrh	r3, [r7, #6]
 800db06:	68ba      	ldr	r2, [r7, #8]
 800db08:	2100      	movs	r1, #0
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f000 fcb7 	bl	800e47e <USBD_LL_Transmit>

  return USBD_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b084      	sub	sp, #16
 800db1e:	af00      	add	r7, sp, #0
 800db20:	60f8      	str	r0, [r7, #12]
 800db22:	60b9      	str	r1, [r7, #8]
 800db24:	4613      	mov	r3, r2
 800db26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2203      	movs	r2, #3
 800db2c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800db30:	88fa      	ldrh	r2, [r7, #6]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800db38:	88fa      	ldrh	r2, [r7, #6]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800db40:	88fb      	ldrh	r3, [r7, #6]
 800db42:	68ba      	ldr	r2, [r7, #8]
 800db44:	2100      	movs	r1, #0
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f000 fcbc 	bl	800e4c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db4c:	2300      	movs	r3, #0
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3710      	adds	r7, #16
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b084      	sub	sp, #16
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	60f8      	str	r0, [r7, #12]
 800db5e:	60b9      	str	r1, [r7, #8]
 800db60:	4613      	mov	r3, r2
 800db62:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db64:	88fb      	ldrh	r3, [r7, #6]
 800db66:	68ba      	ldr	r2, [r7, #8]
 800db68:	2100      	movs	r1, #0
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f000 fcaa 	bl	800e4c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db70:	2300      	movs	r3, #0
}
 800db72:	4618      	mov	r0, r3
 800db74:	3710      	adds	r7, #16
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b082      	sub	sp, #8
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2204      	movs	r2, #4
 800db86:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800db8a:	2300      	movs	r3, #0
 800db8c:	2200      	movs	r2, #0
 800db8e:	2100      	movs	r1, #0
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 fc74 	bl	800e47e <USBD_LL_Transmit>

  return USBD_OK;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3708      	adds	r7, #8
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2205      	movs	r2, #5
 800dbac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	2100      	movs	r1, #0
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 fc84 	bl	800e4c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
	...

0800dbc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	4912      	ldr	r1, [pc, #72]	; (800dc18 <MX_USB_DEVICE_Init+0x50>)
 800dbd0:	4812      	ldr	r0, [pc, #72]	; (800dc1c <MX_USB_DEVICE_Init+0x54>)
 800dbd2:	f7fe ffd4 	bl	800cb7e <USBD_Init>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dbdc:	f7f6 fa2c 	bl	8004038 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dbe0:	490f      	ldr	r1, [pc, #60]	; (800dc20 <MX_USB_DEVICE_Init+0x58>)
 800dbe2:	480e      	ldr	r0, [pc, #56]	; (800dc1c <MX_USB_DEVICE_Init+0x54>)
 800dbe4:	f7fe fff6 	bl	800cbd4 <USBD_RegisterClass>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d001      	beq.n	800dbf2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dbee:	f7f6 fa23 	bl	8004038 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dbf2:	490c      	ldr	r1, [pc, #48]	; (800dc24 <MX_USB_DEVICE_Init+0x5c>)
 800dbf4:	4809      	ldr	r0, [pc, #36]	; (800dc1c <MX_USB_DEVICE_Init+0x54>)
 800dbf6:	f7fe ff27 	bl	800ca48 <USBD_CDC_RegisterInterface>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d001      	beq.n	800dc04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dc00:	f7f6 fa1a 	bl	8004038 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dc04:	4805      	ldr	r0, [pc, #20]	; (800dc1c <MX_USB_DEVICE_Init+0x54>)
 800dc06:	f7fe fffe 	bl	800cc06 <USBD_Start>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d001      	beq.n	800dc14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dc10:	f7f6 fa12 	bl	8004038 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dc14:	bf00      	nop
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	2000086c 	.word	0x2000086c
 800dc1c:	20000e0c 	.word	0x20000e0c
 800dc20:	20000758 	.word	0x20000758
 800dc24:	2000085c 	.word	0x2000085c

0800dc28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	4905      	ldr	r1, [pc, #20]	; (800dc44 <CDC_Init_FS+0x1c>)
 800dc30:	4805      	ldr	r0, [pc, #20]	; (800dc48 <CDC_Init_FS+0x20>)
 800dc32:	f7fe ff1f 	bl	800ca74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dc36:	4905      	ldr	r1, [pc, #20]	; (800dc4c <CDC_Init_FS+0x24>)
 800dc38:	4803      	ldr	r0, [pc, #12]	; (800dc48 <CDC_Init_FS+0x20>)
 800dc3a:	f7fe ff34 	bl	800caa6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dc3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	20001128 	.word	0x20001128
 800dc48:	20000e0c 	.word	0x20000e0c
 800dc4c:	200010a8 	.word	0x200010a8

0800dc50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dc50:	b480      	push	{r7}
 800dc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dc54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bc80      	pop	{r7}
 800dc5c:	4770      	bx	lr
	...

0800dc60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	4603      	mov	r3, r0
 800dc68:	6039      	str	r1, [r7, #0]
 800dc6a:	71fb      	strb	r3, [r7, #7]
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dc70:	79fb      	ldrb	r3, [r7, #7]
 800dc72:	2b23      	cmp	r3, #35	; 0x23
 800dc74:	d866      	bhi.n	800dd44 <CDC_Control_FS+0xe4>
 800dc76:	a201      	add	r2, pc, #4	; (adr r2, 800dc7c <CDC_Control_FS+0x1c>)
 800dc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc7c:	0800dd45 	.word	0x0800dd45
 800dc80:	0800dd45 	.word	0x0800dd45
 800dc84:	0800dd45 	.word	0x0800dd45
 800dc88:	0800dd45 	.word	0x0800dd45
 800dc8c:	0800dd45 	.word	0x0800dd45
 800dc90:	0800dd45 	.word	0x0800dd45
 800dc94:	0800dd45 	.word	0x0800dd45
 800dc98:	0800dd45 	.word	0x0800dd45
 800dc9c:	0800dd45 	.word	0x0800dd45
 800dca0:	0800dd45 	.word	0x0800dd45
 800dca4:	0800dd45 	.word	0x0800dd45
 800dca8:	0800dd45 	.word	0x0800dd45
 800dcac:	0800dd45 	.word	0x0800dd45
 800dcb0:	0800dd45 	.word	0x0800dd45
 800dcb4:	0800dd45 	.word	0x0800dd45
 800dcb8:	0800dd45 	.word	0x0800dd45
 800dcbc:	0800dd45 	.word	0x0800dd45
 800dcc0:	0800dd45 	.word	0x0800dd45
 800dcc4:	0800dd45 	.word	0x0800dd45
 800dcc8:	0800dd45 	.word	0x0800dd45
 800dccc:	0800dd45 	.word	0x0800dd45
 800dcd0:	0800dd45 	.word	0x0800dd45
 800dcd4:	0800dd45 	.word	0x0800dd45
 800dcd8:	0800dd45 	.word	0x0800dd45
 800dcdc:	0800dd45 	.word	0x0800dd45
 800dce0:	0800dd45 	.word	0x0800dd45
 800dce4:	0800dd45 	.word	0x0800dd45
 800dce8:	0800dd45 	.word	0x0800dd45
 800dcec:	0800dd45 	.word	0x0800dd45
 800dcf0:	0800dd45 	.word	0x0800dd45
 800dcf4:	0800dd45 	.word	0x0800dd45
 800dcf8:	0800dd45 	.word	0x0800dd45
 800dcfc:	0800dd45 	.word	0x0800dd45
 800dd00:	0800dd0d 	.word	0x0800dd0d
 800dd04:	0800dd45 	.word	0x0800dd45
 800dd08:	0800dd45 	.word	0x0800dd45
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	2220      	movs	r2, #32
 800dd10:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	3301      	adds	r3, #1
 800dd16:	22c2      	movs	r2, #194	; 0xc2
 800dd18:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	3302      	adds	r3, #2
 800dd1e:	2201      	movs	r2, #1
 800dd20:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	3303      	adds	r3, #3
 800dd26:	2200      	movs	r2, #0
 800dd28:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	2200      	movs	r2, #0
 800dd30:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	3305      	adds	r3, #5
 800dd36:	2200      	movs	r2, #0
 800dd38:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	3306      	adds	r3, #6
 800dd3e:	2208      	movs	r2, #8
 800dd40:	701a      	strb	r2, [r3, #0]
    break;
 800dd42:	e000      	b.n	800dd46 <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dd44:	bf00      	nop
  }

  return (USBD_OK);
 800dd46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	370c      	adds	r7, #12
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bc80      	pop	{r7}
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop

0800dd54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800dd62:	e018      	b.n	800dd96 <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	4413      	add	r3, r2
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	2b0a      	cmp	r3, #10
 800dd6e:	d005      	beq.n	800dd7c <CDC_Receive_FS+0x28>
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4413      	add	r3, r2
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	2b0d      	cmp	r3, #13
 800dd7a:	d102      	bne.n	800dd82 <CDC_Receive_FS+0x2e>
 800dd7c:	4b12      	ldr	r3, [pc, #72]	; (800ddc8 <CDC_Receive_FS+0x74>)
 800dd7e:	2201      	movs	r2, #1
 800dd80:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	4413      	add	r3, r2
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7f6 f93c 	bl	8004008 <Write_to_circ_buffer>
	  i++;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	3301      	adds	r3, #1
 800dd94:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	68fa      	ldr	r2, [r7, #12]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d3e1      	bcc.n	800dd64 <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	4619      	mov	r1, r3
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 f811 	bl	800ddd0 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	4806      	ldr	r0, [pc, #24]	; (800ddcc <CDC_Receive_FS+0x78>)
 800ddb2:	f7fe fe78 	bl	800caa6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ddb6:	4805      	ldr	r0, [pc, #20]	; (800ddcc <CDC_Receive_FS+0x78>)
 800ddb8:	f7fe feb7 	bl	800cb2a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ddbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	20000ba0 	.word	0x20000ba0
 800ddcc:	20000e0c 	.word	0x20000e0c

0800ddd0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	460b      	mov	r3, r1
 800ddda:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dde0:	4b0d      	ldr	r3, [pc, #52]	; (800de18 <CDC_Transmit_FS+0x48>)
 800dde2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dde6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e00b      	b.n	800de0e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ddf6:	887b      	ldrh	r3, [r7, #2]
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	6879      	ldr	r1, [r7, #4]
 800ddfc:	4806      	ldr	r0, [pc, #24]	; (800de18 <CDC_Transmit_FS+0x48>)
 800ddfe:	f7fe fe39 	bl	800ca74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800de02:	4805      	ldr	r0, [pc, #20]	; (800de18 <CDC_Transmit_FS+0x48>)
 800de04:	f7fe fe62 	bl	800cacc <USBD_CDC_TransmitPacket>
 800de08:	4603      	mov	r3, r0
 800de0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800de0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	20000e0c 	.word	0x20000e0c

0800de1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	6039      	str	r1, [r7, #0]
 800de26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	2212      	movs	r2, #18
 800de2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800de2e:	4b03      	ldr	r3, [pc, #12]	; (800de3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800de30:	4618      	mov	r0, r3
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	bc80      	pop	{r7}
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	20000888 	.word	0x20000888

0800de40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	4603      	mov	r3, r0
 800de48:	6039      	str	r1, [r7, #0]
 800de4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	2204      	movs	r2, #4
 800de50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800de52:	4b03      	ldr	r3, [pc, #12]	; (800de60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800de54:	4618      	mov	r0, r3
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	bc80      	pop	{r7}
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	2000089c 	.word	0x2000089c

0800de64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	4603      	mov	r3, r0
 800de6c:	6039      	str	r1, [r7, #0]
 800de6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de70:	79fb      	ldrb	r3, [r7, #7]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d105      	bne.n	800de82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de76:	683a      	ldr	r2, [r7, #0]
 800de78:	4907      	ldr	r1, [pc, #28]	; (800de98 <USBD_FS_ProductStrDescriptor+0x34>)
 800de7a:	4808      	ldr	r0, [pc, #32]	; (800de9c <USBD_FS_ProductStrDescriptor+0x38>)
 800de7c:	f7ff fdc6 	bl	800da0c <USBD_GetString>
 800de80:	e004      	b.n	800de8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	4904      	ldr	r1, [pc, #16]	; (800de98 <USBD_FS_ProductStrDescriptor+0x34>)
 800de86:	4805      	ldr	r0, [pc, #20]	; (800de9c <USBD_FS_ProductStrDescriptor+0x38>)
 800de88:	f7ff fdc0 	bl	800da0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800de8c:	4b02      	ldr	r3, [pc, #8]	; (800de98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3708      	adds	r7, #8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	20001228 	.word	0x20001228
 800de9c:	08012ce0 	.word	0x08012ce0

0800dea0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	4603      	mov	r3, r0
 800dea8:	6039      	str	r1, [r7, #0]
 800deaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800deac:	683a      	ldr	r2, [r7, #0]
 800deae:	4904      	ldr	r1, [pc, #16]	; (800dec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800deb0:	4804      	ldr	r0, [pc, #16]	; (800dec4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800deb2:	f7ff fdab 	bl	800da0c <USBD_GetString>
  return USBD_StrDesc;
 800deb6:	4b02      	ldr	r3, [pc, #8]	; (800dec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	20001228 	.word	0x20001228
 800dec4:	08012cec 	.word	0x08012cec

0800dec8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	4603      	mov	r3, r0
 800ded0:	6039      	str	r1, [r7, #0]
 800ded2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	221a      	movs	r2, #26
 800ded8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800deda:	f000 f843 	bl	800df64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dede:	4b02      	ldr	r3, [pc, #8]	; (800dee8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	200008a0 	.word	0x200008a0

0800deec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	4603      	mov	r3, r0
 800def4:	6039      	str	r1, [r7, #0]
 800def6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800def8:	79fb      	ldrb	r3, [r7, #7]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d105      	bne.n	800df0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800defe:	683a      	ldr	r2, [r7, #0]
 800df00:	4907      	ldr	r1, [pc, #28]	; (800df20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800df02:	4808      	ldr	r0, [pc, #32]	; (800df24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800df04:	f7ff fd82 	bl	800da0c <USBD_GetString>
 800df08:	e004      	b.n	800df14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	4904      	ldr	r1, [pc, #16]	; (800df20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800df0e:	4805      	ldr	r0, [pc, #20]	; (800df24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800df10:	f7ff fd7c 	bl	800da0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800df14:	4b02      	ldr	r3, [pc, #8]	; (800df20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800df16:	4618      	mov	r0, r3
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	20001228 	.word	0x20001228
 800df24:	08012cfc 	.word	0x08012cfc

0800df28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	4603      	mov	r3, r0
 800df30:	6039      	str	r1, [r7, #0]
 800df32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df34:	79fb      	ldrb	r3, [r7, #7]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d105      	bne.n	800df46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	4907      	ldr	r1, [pc, #28]	; (800df5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800df3e:	4808      	ldr	r0, [pc, #32]	; (800df60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800df40:	f7ff fd64 	bl	800da0c <USBD_GetString>
 800df44:	e004      	b.n	800df50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	4904      	ldr	r1, [pc, #16]	; (800df5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800df4a:	4805      	ldr	r0, [pc, #20]	; (800df60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800df4c:	f7ff fd5e 	bl	800da0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800df50:	4b02      	ldr	r3, [pc, #8]	; (800df5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800df52:	4618      	mov	r0, r3
 800df54:	3708      	adds	r7, #8
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	20001228 	.word	0x20001228
 800df60:	08012d08 	.word	0x08012d08

0800df64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800df6a:	4b0f      	ldr	r3, [pc, #60]	; (800dfa8 <Get_SerialNum+0x44>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800df70:	4b0e      	ldr	r3, [pc, #56]	; (800dfac <Get_SerialNum+0x48>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df76:	4b0e      	ldr	r3, [pc, #56]	; (800dfb0 <Get_SerialNum+0x4c>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df7c:	68fa      	ldr	r2, [r7, #12]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4413      	add	r3, r2
 800df82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d009      	beq.n	800df9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df8a:	2208      	movs	r2, #8
 800df8c:	4909      	ldr	r1, [pc, #36]	; (800dfb4 <Get_SerialNum+0x50>)
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f000 f814 	bl	800dfbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df94:	2204      	movs	r2, #4
 800df96:	4908      	ldr	r1, [pc, #32]	; (800dfb8 <Get_SerialNum+0x54>)
 800df98:	68b8      	ldr	r0, [r7, #8]
 800df9a:	f000 f80f 	bl	800dfbc <IntToUnicode>
  }
}
 800df9e:	bf00      	nop
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	1ff80050 	.word	0x1ff80050
 800dfac:	1ff80054 	.word	0x1ff80054
 800dfb0:	1ff80058 	.word	0x1ff80058
 800dfb4:	200008a2 	.word	0x200008a2
 800dfb8:	200008b2 	.word	0x200008b2

0800dfbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b087      	sub	sp, #28
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dfce:	2300      	movs	r3, #0
 800dfd0:	75fb      	strb	r3, [r7, #23]
 800dfd2:	e027      	b.n	800e024 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	0f1b      	lsrs	r3, r3, #28
 800dfd8:	2b09      	cmp	r3, #9
 800dfda:	d80b      	bhi.n	800dff4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	0f1b      	lsrs	r3, r3, #28
 800dfe0:	b2da      	uxtb	r2, r3
 800dfe2:	7dfb      	ldrb	r3, [r7, #23]
 800dfe4:	005b      	lsls	r3, r3, #1
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	440b      	add	r3, r1
 800dfec:	3230      	adds	r2, #48	; 0x30
 800dfee:	b2d2      	uxtb	r2, r2
 800dff0:	701a      	strb	r2, [r3, #0]
 800dff2:	e00a      	b.n	800e00a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	0f1b      	lsrs	r3, r3, #28
 800dff8:	b2da      	uxtb	r2, r3
 800dffa:	7dfb      	ldrb	r3, [r7, #23]
 800dffc:	005b      	lsls	r3, r3, #1
 800dffe:	4619      	mov	r1, r3
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	440b      	add	r3, r1
 800e004:	3237      	adds	r2, #55	; 0x37
 800e006:	b2d2      	uxtb	r2, r2
 800e008:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	011b      	lsls	r3, r3, #4
 800e00e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e010:	7dfb      	ldrb	r3, [r7, #23]
 800e012:	005b      	lsls	r3, r3, #1
 800e014:	3301      	adds	r3, #1
 800e016:	68ba      	ldr	r2, [r7, #8]
 800e018:	4413      	add	r3, r2
 800e01a:	2200      	movs	r2, #0
 800e01c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e01e:	7dfb      	ldrb	r3, [r7, #23]
 800e020:	3301      	adds	r3, #1
 800e022:	75fb      	strb	r3, [r7, #23]
 800e024:	7dfa      	ldrb	r2, [r7, #23]
 800e026:	79fb      	ldrb	r3, [r7, #7]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d3d3      	bcc.n	800dfd4 <IntToUnicode+0x18>
  }
}
 800e02c:	bf00      	nop
 800e02e:	bf00      	nop
 800e030:	371c      	adds	r7, #28
 800e032:	46bd      	mov	sp, r7
 800e034:	bc80      	pop	{r7}
 800e036:	4770      	bx	lr

0800e038 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	460b      	mov	r3, r1
 800e042:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800e044:	78fb      	ldrb	r3, [r7, #3]
 800e046:	2b01      	cmp	r3, #1
 800e048:	d106      	bne.n	800e058 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800e04a:	4b09      	ldr	r3, [pc, #36]	; (800e070 <HAL_PCDEx_SetConnectionState+0x38>)
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	4a08      	ldr	r2, [pc, #32]	; (800e070 <HAL_PCDEx_SetConnectionState+0x38>)
 800e050:	f043 0301 	orr.w	r3, r3, #1
 800e054:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800e056:	e005      	b.n	800e064 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800e058:	4b05      	ldr	r3, [pc, #20]	; (800e070 <HAL_PCDEx_SetConnectionState+0x38>)
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	4a04      	ldr	r2, [pc, #16]	; (800e070 <HAL_PCDEx_SetConnectionState+0x38>)
 800e05e:	f023 0301 	bic.w	r3, r3, #1
 800e062:	6053      	str	r3, [r2, #4]
}
 800e064:	bf00      	nop
 800e066:	370c      	adds	r7, #12
 800e068:	46bd      	mov	sp, r7
 800e06a:	bc80      	pop	{r7}
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop
 800e070:	40010000 	.word	0x40010000

0800e074 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a0d      	ldr	r2, [pc, #52]	; (800e0b8 <HAL_PCD_MspInit+0x44>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d113      	bne.n	800e0ae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e086:	4b0d      	ldr	r3, [pc, #52]	; (800e0bc <HAL_PCD_MspInit+0x48>)
 800e088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08a:	4a0c      	ldr	r2, [pc, #48]	; (800e0bc <HAL_PCD_MspInit+0x48>)
 800e08c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e090:	6253      	str	r3, [r2, #36]	; 0x24
 800e092:	4b0a      	ldr	r3, [pc, #40]	; (800e0bc <HAL_PCD_MspInit+0x48>)
 800e094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e09a:	60fb      	str	r3, [r7, #12]
 800e09c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800e09e:	2200      	movs	r2, #0
 800e0a0:	2101      	movs	r1, #1
 800e0a2:	2014      	movs	r0, #20
 800e0a4:	f7f6 fd8d 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e0a8:	2014      	movs	r0, #20
 800e0aa:	f7f6 fda6 	bl	8004bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e0ae:	bf00      	nop
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	40005c00 	.word	0x40005c00
 800e0bc:	40023800 	.word	0x40023800

0800e0c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	4610      	mov	r0, r2
 800e0d8:	f7fe fddd 	bl	800cc96 <USBD_LL_SetupStage>
}
 800e0dc:	bf00      	nop
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e0f6:	78fa      	ldrb	r2, [r7, #3]
 800e0f8:	6879      	ldr	r1, [r7, #4]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4413      	add	r3, r2
 800e100:	00db      	lsls	r3, r3, #3
 800e102:	440b      	add	r3, r1
 800e104:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	78fb      	ldrb	r3, [r7, #3]
 800e10c:	4619      	mov	r1, r3
 800e10e:	f7fe fe0f 	bl	800cd30 <USBD_LL_DataOutStage>
}
 800e112:	bf00      	nop
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b082      	sub	sp, #8
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
 800e122:	460b      	mov	r3, r1
 800e124:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e12c:	78fa      	ldrb	r2, [r7, #3]
 800e12e:	6879      	ldr	r1, [r7, #4]
 800e130:	4613      	mov	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	440b      	add	r3, r1
 800e13a:	333c      	adds	r3, #60	; 0x3c
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	78fb      	ldrb	r3, [r7, #3]
 800e140:	4619      	mov	r1, r3
 800e142:	f7fe fe66 	bl	800ce12 <USBD_LL_DataInStage>
}
 800e146:	bf00      	nop
 800e148:	3708      	adds	r7, #8
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e14e:	b580      	push	{r7, lr}
 800e150:	b082      	sub	sp, #8
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fe ff71 	bl	800d044 <USBD_LL_SOF>
}
 800e162:	bf00      	nop
 800e164:	3708      	adds	r7, #8
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b084      	sub	sp, #16
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e172:	2301      	movs	r3, #1
 800e174:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	689b      	ldr	r3, [r3, #8]
 800e17a:	2b02      	cmp	r3, #2
 800e17c:	d001      	beq.n	800e182 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e17e:	f7f5 ff5b 	bl	8004038 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e188:	7bfa      	ldrb	r2, [r7, #15]
 800e18a:	4611      	mov	r1, r2
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7fe ff26 	bl	800cfde <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fe fedf 	bl	800cf5c <USBD_LL_Reset>
}
 800e19e:	bf00      	nop
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
	...

0800e1a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fe ff20 	bl	800cffc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d005      	beq.n	800e1d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1c4:	4b04      	ldr	r3, [pc, #16]	; (800e1d8 <HAL_PCD_SuspendCallback+0x30>)
 800e1c6:	691b      	ldr	r3, [r3, #16]
 800e1c8:	4a03      	ldr	r2, [pc, #12]	; (800e1d8 <HAL_PCD_SuspendCallback+0x30>)
 800e1ca:	f043 0306 	orr.w	r3, r3, #6
 800e1ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e1d0:	bf00      	nop
 800e1d2:	3708      	adds	r7, #8
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	e000ed00 	.word	0xe000ed00

0800e1dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fe ff1a 	bl	800d024 <USBD_LL_Resume>
}
 800e1f0:	bf00      	nop
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e200:	4a28      	ldr	r2, [pc, #160]	; (800e2a4 <USBD_LL_Init+0xac>)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	4a26      	ldr	r2, [pc, #152]	; (800e2a4 <USBD_LL_Init+0xac>)
 800e20c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800e210:	4b24      	ldr	r3, [pc, #144]	; (800e2a4 <USBD_LL_Init+0xac>)
 800e212:	4a25      	ldr	r2, [pc, #148]	; (800e2a8 <USBD_LL_Init+0xb0>)
 800e214:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e216:	4b23      	ldr	r3, [pc, #140]	; (800e2a4 <USBD_LL_Init+0xac>)
 800e218:	2208      	movs	r2, #8
 800e21a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e21c:	4b21      	ldr	r3, [pc, #132]	; (800e2a4 <USBD_LL_Init+0xac>)
 800e21e:	2202      	movs	r2, #2
 800e220:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e222:	4b20      	ldr	r3, [pc, #128]	; (800e2a4 <USBD_LL_Init+0xac>)
 800e224:	2202      	movs	r2, #2
 800e226:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e228:	4b1e      	ldr	r3, [pc, #120]	; (800e2a4 <USBD_LL_Init+0xac>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e22e:	4b1d      	ldr	r3, [pc, #116]	; (800e2a4 <USBD_LL_Init+0xac>)
 800e230:	2200      	movs	r2, #0
 800e232:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e234:	481b      	ldr	r0, [pc, #108]	; (800e2a4 <USBD_LL_Init+0xac>)
 800e236:	f7f7 feab 	bl	8005f90 <HAL_PCD_Init>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d001      	beq.n	800e244 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e240:	f7f5 fefa 	bl	8004038 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e24a:	2318      	movs	r3, #24
 800e24c:	2200      	movs	r2, #0
 800e24e:	2100      	movs	r1, #0
 800e250:	f7f9 fa88 	bl	8007764 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e25a:	2358      	movs	r3, #88	; 0x58
 800e25c:	2200      	movs	r2, #0
 800e25e:	2180      	movs	r1, #128	; 0x80
 800e260:	f7f9 fa80 	bl	8007764 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e26a:	23c0      	movs	r3, #192	; 0xc0
 800e26c:	2200      	movs	r2, #0
 800e26e:	2181      	movs	r1, #129	; 0x81
 800e270:	f7f9 fa78 	bl	8007764 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e27a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e27e:	2200      	movs	r2, #0
 800e280:	2101      	movs	r1, #1
 800e282:	f7f9 fa6f 	bl	8007764 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e28c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e290:	2200      	movs	r2, #0
 800e292:	2182      	movs	r1, #130	; 0x82
 800e294:	f7f9 fa66 	bl	8007764 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e298:	2300      	movs	r3, #0
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3708      	adds	r7, #8
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	20001428 	.word	0x20001428
 800e2a8:	40005c00 	.word	0x40005c00

0800e2ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7f7 ff42 	bl	800614c <HAL_PCD_Start>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2cc:	7bfb      	ldrb	r3, [r7, #15]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f000 f944 	bl	800e55c <USBD_Get_USB_Status>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b084      	sub	sp, #16
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	4608      	mov	r0, r1
 800e2ec:	4611      	mov	r1, r2
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	70fb      	strb	r3, [r7, #3]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	70bb      	strb	r3, [r7, #2]
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e300:	2300      	movs	r3, #0
 800e302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e30a:	78bb      	ldrb	r3, [r7, #2]
 800e30c:	883a      	ldrh	r2, [r7, #0]
 800e30e:	78f9      	ldrb	r1, [r7, #3]
 800e310:	f7f8 f85e 	bl	80063d0 <HAL_PCD_EP_Open>
 800e314:	4603      	mov	r3, r0
 800e316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e318:	7bfb      	ldrb	r3, [r7, #15]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f000 f91e 	bl	800e55c <USBD_Get_USB_Status>
 800e320:	4603      	mov	r3, r0
 800e322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e324:	7bbb      	ldrb	r3, [r7, #14]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b084      	sub	sp, #16
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	460b      	mov	r3, r1
 800e338:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e33e:	2300      	movs	r3, #0
 800e340:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e348:	78fa      	ldrb	r2, [r7, #3]
 800e34a:	4611      	mov	r1, r2
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7f8 f8a5 	bl	800649c <HAL_PCD_EP_Close>
 800e352:	4603      	mov	r3, r0
 800e354:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e356:	7bfb      	ldrb	r3, [r7, #15]
 800e358:	4618      	mov	r0, r3
 800e35a:	f000 f8ff 	bl	800e55c <USBD_Get_USB_Status>
 800e35e:	4603      	mov	r3, r0
 800e360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e362:	7bbb      	ldrb	r3, [r7, #14]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	460b      	mov	r3, r1
 800e376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e378:	2300      	movs	r3, #0
 800e37a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e37c:	2300      	movs	r3, #0
 800e37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e386:	78fa      	ldrb	r2, [r7, #3]
 800e388:	4611      	mov	r1, r2
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7f8 f965 	bl	800665a <HAL_PCD_EP_SetStall>
 800e390:	4603      	mov	r3, r0
 800e392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e394:	7bfb      	ldrb	r3, [r7, #15]
 800e396:	4618      	mov	r0, r3
 800e398:	f000 f8e0 	bl	800e55c <USBD_Get_USB_Status>
 800e39c:	4603      	mov	r3, r0
 800e39e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b084      	sub	sp, #16
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e3c4:	78fa      	ldrb	r2, [r7, #3]
 800e3c6:	4611      	mov	r1, r2
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7f8 f998 	bl	80066fe <HAL_PCD_EP_ClrStall>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f000 f8c1 	bl	800e55c <USBD_Get_USB_Status>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3de:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e3fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e3fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e400:	2b00      	cmp	r3, #0
 800e402:	da0c      	bge.n	800e41e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e404:	78fb      	ldrb	r3, [r7, #3]
 800e406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e40a:	68f9      	ldr	r1, [r7, #12]
 800e40c:	1c5a      	adds	r2, r3, #1
 800e40e:	4613      	mov	r3, r2
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	4413      	add	r3, r2
 800e414:	00db      	lsls	r3, r3, #3
 800e416:	440b      	add	r3, r1
 800e418:	3302      	adds	r3, #2
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	e00b      	b.n	800e436 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e41e:	78fb      	ldrb	r3, [r7, #3]
 800e420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e424:	68f9      	ldr	r1, [r7, #12]
 800e426:	4613      	mov	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4413      	add	r3, r2
 800e42c:	00db      	lsls	r3, r3, #3
 800e42e:	440b      	add	r3, r1
 800e430:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800e434:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e436:	4618      	mov	r0, r3
 800e438:	3714      	adds	r7, #20
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bc80      	pop	{r7}
 800e43e:	4770      	bx	lr

0800e440 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	460b      	mov	r3, r1
 800e44a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e44c:	2300      	movs	r3, #0
 800e44e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e450:	2300      	movs	r3, #0
 800e452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e45a:	78fa      	ldrb	r2, [r7, #3]
 800e45c:	4611      	mov	r1, r2
 800e45e:	4618      	mov	r0, r3
 800e460:	f7f7 ff91 	bl	8006386 <HAL_PCD_SetAddress>
 800e464:	4603      	mov	r3, r0
 800e466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e468:	7bfb      	ldrb	r3, [r7, #15]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f000 f876 	bl	800e55c <USBD_Get_USB_Status>
 800e470:	4603      	mov	r3, r0
 800e472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e474:	7bbb      	ldrb	r3, [r7, #14]
}
 800e476:	4618      	mov	r0, r3
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b086      	sub	sp, #24
 800e482:	af00      	add	r7, sp, #0
 800e484:	60f8      	str	r0, [r7, #12]
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	461a      	mov	r2, r3
 800e48a:	460b      	mov	r3, r1
 800e48c:	72fb      	strb	r3, [r7, #11]
 800e48e:	4613      	mov	r3, r2
 800e490:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e492:	2300      	movs	r3, #0
 800e494:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e496:	2300      	movs	r3, #0
 800e498:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e4a0:	893b      	ldrh	r3, [r7, #8]
 800e4a2:	7af9      	ldrb	r1, [r7, #11]
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	f7f8 f895 	bl	80065d4 <HAL_PCD_EP_Transmit>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4ae:	7dfb      	ldrb	r3, [r7, #23]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f000 f853 	bl	800e55c <USBD_Get_USB_Status>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3718      	adds	r7, #24
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	607a      	str	r2, [r7, #4]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	72fb      	strb	r3, [r7, #11]
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e4e6:	893b      	ldrh	r3, [r7, #8]
 800e4e8:	7af9      	ldrb	r1, [r7, #11]
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	f7f8 f81e 	bl	800652c <HAL_PCD_EP_Receive>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4f4:	7dfb      	ldrb	r3, [r7, #23]
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f000 f830 	bl	800e55c <USBD_Get_USB_Status>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e500:	7dbb      	ldrb	r3, [r7, #22]
}
 800e502:	4618      	mov	r0, r3
 800e504:	3718      	adds	r7, #24
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b082      	sub	sp, #8
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	460b      	mov	r3, r1
 800e514:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e51c:	78fa      	ldrb	r2, [r7, #3]
 800e51e:	4611      	mov	r1, r2
 800e520:	4618      	mov	r0, r3
 800e522:	f7f8 f840 	bl	80065a6 <HAL_PCD_EP_GetRxCount>
 800e526:	4603      	mov	r3, r0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e530:	b480      	push	{r7}
 800e532:	b083      	sub	sp, #12
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e538:	4b02      	ldr	r3, [pc, #8]	; (800e544 <USBD_static_malloc+0x14>)
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	370c      	adds	r7, #12
 800e53e:	46bd      	mov	sp, r7
 800e540:	bc80      	pop	{r7}
 800e542:	4770      	bx	lr
 800e544:	20001714 	.word	0x20001714

0800e548 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e548:	b480      	push	{r7}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]

}
 800e550:	bf00      	nop
 800e552:	370c      	adds	r7, #12
 800e554:	46bd      	mov	sp, r7
 800e556:	bc80      	pop	{r7}
 800e558:	4770      	bx	lr
	...

0800e55c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
 800e562:	4603      	mov	r3, r0
 800e564:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e566:	2300      	movs	r3, #0
 800e568:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e56a:	79fb      	ldrb	r3, [r7, #7]
 800e56c:	2b03      	cmp	r3, #3
 800e56e:	d817      	bhi.n	800e5a0 <USBD_Get_USB_Status+0x44>
 800e570:	a201      	add	r2, pc, #4	; (adr r2, 800e578 <USBD_Get_USB_Status+0x1c>)
 800e572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e576:	bf00      	nop
 800e578:	0800e589 	.word	0x0800e589
 800e57c:	0800e58f 	.word	0x0800e58f
 800e580:	0800e595 	.word	0x0800e595
 800e584:	0800e59b 	.word	0x0800e59b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	73fb      	strb	r3, [r7, #15]
    break;
 800e58c:	e00b      	b.n	800e5a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e58e:	2302      	movs	r3, #2
 800e590:	73fb      	strb	r3, [r7, #15]
    break;
 800e592:	e008      	b.n	800e5a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e594:	2301      	movs	r3, #1
 800e596:	73fb      	strb	r3, [r7, #15]
    break;
 800e598:	e005      	b.n	800e5a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e59a:	2302      	movs	r3, #2
 800e59c:	73fb      	strb	r3, [r7, #15]
    break;
 800e59e:	e002      	b.n	800e5a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e5a4:	bf00      	nop
  }
  return usb_status;
 800e5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3714      	adds	r7, #20
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bc80      	pop	{r7}
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	0000      	movs	r0, r0
	...

0800e5b8 <floor>:
 800e5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5bc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e5c0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800e5c4:	2e13      	cmp	r6, #19
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	4607      	mov	r7, r0
 800e5cc:	460c      	mov	r4, r1
 800e5ce:	4605      	mov	r5, r0
 800e5d0:	dc33      	bgt.n	800e63a <floor+0x82>
 800e5d2:	2e00      	cmp	r6, #0
 800e5d4:	da14      	bge.n	800e600 <floor+0x48>
 800e5d6:	a334      	add	r3, pc, #208	; (adr r3, 800e6a8 <floor+0xf0>)
 800e5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5dc:	f7f1 fde8 	bl	80001b0 <__adddf3>
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	f7f2 fa2a 	bl	8000a3c <__aeabi_dcmpgt>
 800e5e8:	b138      	cbz	r0, 800e5fa <floor+0x42>
 800e5ea:	2c00      	cmp	r4, #0
 800e5ec:	da58      	bge.n	800e6a0 <floor+0xe8>
 800e5ee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e5f2:	431d      	orrs	r5, r3
 800e5f4:	d001      	beq.n	800e5fa <floor+0x42>
 800e5f6:	2500      	movs	r5, #0
 800e5f8:	4c2d      	ldr	r4, [pc, #180]	; (800e6b0 <floor+0xf8>)
 800e5fa:	4623      	mov	r3, r4
 800e5fc:	462f      	mov	r7, r5
 800e5fe:	e025      	b.n	800e64c <floor+0x94>
 800e600:	4a2c      	ldr	r2, [pc, #176]	; (800e6b4 <floor+0xfc>)
 800e602:	fa42 f806 	asr.w	r8, r2, r6
 800e606:	ea01 0208 	and.w	r2, r1, r8
 800e60a:	4302      	orrs	r2, r0
 800e60c:	d01e      	beq.n	800e64c <floor+0x94>
 800e60e:	a326      	add	r3, pc, #152	; (adr r3, 800e6a8 <floor+0xf0>)
 800e610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e614:	f7f1 fdcc 	bl	80001b0 <__adddf3>
 800e618:	2200      	movs	r2, #0
 800e61a:	2300      	movs	r3, #0
 800e61c:	f7f2 fa0e 	bl	8000a3c <__aeabi_dcmpgt>
 800e620:	2800      	cmp	r0, #0
 800e622:	d0ea      	beq.n	800e5fa <floor+0x42>
 800e624:	2c00      	cmp	r4, #0
 800e626:	bfbe      	ittt	lt
 800e628:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e62c:	fa43 f606 	asrlt.w	r6, r3, r6
 800e630:	19a4      	addlt	r4, r4, r6
 800e632:	2500      	movs	r5, #0
 800e634:	ea24 0408 	bic.w	r4, r4, r8
 800e638:	e7df      	b.n	800e5fa <floor+0x42>
 800e63a:	2e33      	cmp	r6, #51	; 0x33
 800e63c:	dd0a      	ble.n	800e654 <floor+0x9c>
 800e63e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e642:	d103      	bne.n	800e64c <floor+0x94>
 800e644:	f7f1 fdb4 	bl	80001b0 <__adddf3>
 800e648:	4607      	mov	r7, r0
 800e64a:	460b      	mov	r3, r1
 800e64c:	4638      	mov	r0, r7
 800e64e:	4619      	mov	r1, r3
 800e650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e654:	f04f 32ff 	mov.w	r2, #4294967295
 800e658:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800e65c:	fa22 f808 	lsr.w	r8, r2, r8
 800e660:	ea18 0f00 	tst.w	r8, r0
 800e664:	d0f2      	beq.n	800e64c <floor+0x94>
 800e666:	a310      	add	r3, pc, #64	; (adr r3, 800e6a8 <floor+0xf0>)
 800e668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66c:	f7f1 fda0 	bl	80001b0 <__adddf3>
 800e670:	2200      	movs	r2, #0
 800e672:	2300      	movs	r3, #0
 800e674:	f7f2 f9e2 	bl	8000a3c <__aeabi_dcmpgt>
 800e678:	2800      	cmp	r0, #0
 800e67a:	d0be      	beq.n	800e5fa <floor+0x42>
 800e67c:	2c00      	cmp	r4, #0
 800e67e:	da02      	bge.n	800e686 <floor+0xce>
 800e680:	2e14      	cmp	r6, #20
 800e682:	d103      	bne.n	800e68c <floor+0xd4>
 800e684:	3401      	adds	r4, #1
 800e686:	ea25 0508 	bic.w	r5, r5, r8
 800e68a:	e7b6      	b.n	800e5fa <floor+0x42>
 800e68c:	2301      	movs	r3, #1
 800e68e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e692:	fa03 f606 	lsl.w	r6, r3, r6
 800e696:	4435      	add	r5, r6
 800e698:	42bd      	cmp	r5, r7
 800e69a:	bf38      	it	cc
 800e69c:	18e4      	addcc	r4, r4, r3
 800e69e:	e7f2      	b.n	800e686 <floor+0xce>
 800e6a0:	2500      	movs	r5, #0
 800e6a2:	462c      	mov	r4, r5
 800e6a4:	e7a9      	b.n	800e5fa <floor+0x42>
 800e6a6:	bf00      	nop
 800e6a8:	8800759c 	.word	0x8800759c
 800e6ac:	7e37e43c 	.word	0x7e37e43c
 800e6b0:	bff00000 	.word	0xbff00000
 800e6b4:	000fffff 	.word	0x000fffff

0800e6b8 <atof>:
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	f001 bad5 	b.w	800fc68 <strtod>
	...

0800e6c0 <__errno>:
 800e6c0:	4b01      	ldr	r3, [pc, #4]	; (800e6c8 <__errno+0x8>)
 800e6c2:	6818      	ldr	r0, [r3, #0]
 800e6c4:	4770      	bx	lr
 800e6c6:	bf00      	nop
 800e6c8:	200008bc 	.word	0x200008bc

0800e6cc <__libc_init_array>:
 800e6cc:	b570      	push	{r4, r5, r6, lr}
 800e6ce:	2600      	movs	r6, #0
 800e6d0:	4d0c      	ldr	r5, [pc, #48]	; (800e704 <__libc_init_array+0x38>)
 800e6d2:	4c0d      	ldr	r4, [pc, #52]	; (800e708 <__libc_init_array+0x3c>)
 800e6d4:	1b64      	subs	r4, r4, r5
 800e6d6:	10a4      	asrs	r4, r4, #2
 800e6d8:	42a6      	cmp	r6, r4
 800e6da:	d109      	bne.n	800e6f0 <__libc_init_array+0x24>
 800e6dc:	f004 fa30 	bl	8012b40 <_init>
 800e6e0:	2600      	movs	r6, #0
 800e6e2:	4d0a      	ldr	r5, [pc, #40]	; (800e70c <__libc_init_array+0x40>)
 800e6e4:	4c0a      	ldr	r4, [pc, #40]	; (800e710 <__libc_init_array+0x44>)
 800e6e6:	1b64      	subs	r4, r4, r5
 800e6e8:	10a4      	asrs	r4, r4, #2
 800e6ea:	42a6      	cmp	r6, r4
 800e6ec:	d105      	bne.n	800e6fa <__libc_init_array+0x2e>
 800e6ee:	bd70      	pop	{r4, r5, r6, pc}
 800e6f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6f4:	4798      	blx	r3
 800e6f6:	3601      	adds	r6, #1
 800e6f8:	e7ee      	b.n	800e6d8 <__libc_init_array+0xc>
 800e6fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6fe:	4798      	blx	r3
 800e700:	3601      	adds	r6, #1
 800e702:	e7f2      	b.n	800e6ea <__libc_init_array+0x1e>
 800e704:	08013240 	.word	0x08013240
 800e708:	08013240 	.word	0x08013240
 800e70c:	08013240 	.word	0x08013240
 800e710:	08013244 	.word	0x08013244

0800e714 <memcpy>:
 800e714:	440a      	add	r2, r1
 800e716:	4291      	cmp	r1, r2
 800e718:	f100 33ff 	add.w	r3, r0, #4294967295
 800e71c:	d100      	bne.n	800e720 <memcpy+0xc>
 800e71e:	4770      	bx	lr
 800e720:	b510      	push	{r4, lr}
 800e722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e726:	4291      	cmp	r1, r2
 800e728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e72c:	d1f9      	bne.n	800e722 <memcpy+0xe>
 800e72e:	bd10      	pop	{r4, pc}

0800e730 <memset>:
 800e730:	4603      	mov	r3, r0
 800e732:	4402      	add	r2, r0
 800e734:	4293      	cmp	r3, r2
 800e736:	d100      	bne.n	800e73a <memset+0xa>
 800e738:	4770      	bx	lr
 800e73a:	f803 1b01 	strb.w	r1, [r3], #1
 800e73e:	e7f9      	b.n	800e734 <memset+0x4>

0800e740 <__cvt>:
 800e740:	2b00      	cmp	r3, #0
 800e742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e746:	461f      	mov	r7, r3
 800e748:	bfbb      	ittet	lt
 800e74a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800e74e:	461f      	movlt	r7, r3
 800e750:	2300      	movge	r3, #0
 800e752:	232d      	movlt	r3, #45	; 0x2d
 800e754:	b088      	sub	sp, #32
 800e756:	4614      	mov	r4, r2
 800e758:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e75a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e75c:	7013      	strb	r3, [r2, #0]
 800e75e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e760:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800e764:	f023 0820 	bic.w	r8, r3, #32
 800e768:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e76c:	d005      	beq.n	800e77a <__cvt+0x3a>
 800e76e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e772:	d100      	bne.n	800e776 <__cvt+0x36>
 800e774:	3501      	adds	r5, #1
 800e776:	2302      	movs	r3, #2
 800e778:	e000      	b.n	800e77c <__cvt+0x3c>
 800e77a:	2303      	movs	r3, #3
 800e77c:	aa07      	add	r2, sp, #28
 800e77e:	9204      	str	r2, [sp, #16]
 800e780:	aa06      	add	r2, sp, #24
 800e782:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e786:	e9cd 3500 	strd	r3, r5, [sp]
 800e78a:	4622      	mov	r2, r4
 800e78c:	463b      	mov	r3, r7
 800e78e:	f001 fb7f 	bl	800fe90 <_dtoa_r>
 800e792:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e796:	4606      	mov	r6, r0
 800e798:	d102      	bne.n	800e7a0 <__cvt+0x60>
 800e79a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e79c:	07db      	lsls	r3, r3, #31
 800e79e:	d522      	bpl.n	800e7e6 <__cvt+0xa6>
 800e7a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e7a4:	eb06 0905 	add.w	r9, r6, r5
 800e7a8:	d110      	bne.n	800e7cc <__cvt+0x8c>
 800e7aa:	7833      	ldrb	r3, [r6, #0]
 800e7ac:	2b30      	cmp	r3, #48	; 0x30
 800e7ae:	d10a      	bne.n	800e7c6 <__cvt+0x86>
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	4639      	mov	r1, r7
 800e7b8:	f7f2 f918 	bl	80009ec <__aeabi_dcmpeq>
 800e7bc:	b918      	cbnz	r0, 800e7c6 <__cvt+0x86>
 800e7be:	f1c5 0501 	rsb	r5, r5, #1
 800e7c2:	f8ca 5000 	str.w	r5, [sl]
 800e7c6:	f8da 3000 	ldr.w	r3, [sl]
 800e7ca:	4499      	add	r9, r3
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f2 f90a 	bl	80009ec <__aeabi_dcmpeq>
 800e7d8:	b108      	cbz	r0, 800e7de <__cvt+0x9e>
 800e7da:	f8cd 901c 	str.w	r9, [sp, #28]
 800e7de:	2230      	movs	r2, #48	; 0x30
 800e7e0:	9b07      	ldr	r3, [sp, #28]
 800e7e2:	454b      	cmp	r3, r9
 800e7e4:	d307      	bcc.n	800e7f6 <__cvt+0xb6>
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	9b07      	ldr	r3, [sp, #28]
 800e7ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e7ec:	1b9b      	subs	r3, r3, r6
 800e7ee:	6013      	str	r3, [r2, #0]
 800e7f0:	b008      	add	sp, #32
 800e7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7f6:	1c59      	adds	r1, r3, #1
 800e7f8:	9107      	str	r1, [sp, #28]
 800e7fa:	701a      	strb	r2, [r3, #0]
 800e7fc:	e7f0      	b.n	800e7e0 <__cvt+0xa0>

0800e7fe <__exponent>:
 800e7fe:	4603      	mov	r3, r0
 800e800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e802:	2900      	cmp	r1, #0
 800e804:	f803 2b02 	strb.w	r2, [r3], #2
 800e808:	bfb6      	itet	lt
 800e80a:	222d      	movlt	r2, #45	; 0x2d
 800e80c:	222b      	movge	r2, #43	; 0x2b
 800e80e:	4249      	neglt	r1, r1
 800e810:	2909      	cmp	r1, #9
 800e812:	7042      	strb	r2, [r0, #1]
 800e814:	dd2b      	ble.n	800e86e <__exponent+0x70>
 800e816:	f10d 0407 	add.w	r4, sp, #7
 800e81a:	46a4      	mov	ip, r4
 800e81c:	270a      	movs	r7, #10
 800e81e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e822:	460a      	mov	r2, r1
 800e824:	46a6      	mov	lr, r4
 800e826:	fb07 1516 	mls	r5, r7, r6, r1
 800e82a:	2a63      	cmp	r2, #99	; 0x63
 800e82c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800e830:	4631      	mov	r1, r6
 800e832:	f104 34ff 	add.w	r4, r4, #4294967295
 800e836:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e83a:	dcf0      	bgt.n	800e81e <__exponent+0x20>
 800e83c:	3130      	adds	r1, #48	; 0x30
 800e83e:	f1ae 0502 	sub.w	r5, lr, #2
 800e842:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e846:	4629      	mov	r1, r5
 800e848:	1c44      	adds	r4, r0, #1
 800e84a:	4561      	cmp	r1, ip
 800e84c:	d30a      	bcc.n	800e864 <__exponent+0x66>
 800e84e:	f10d 0209 	add.w	r2, sp, #9
 800e852:	eba2 020e 	sub.w	r2, r2, lr
 800e856:	4565      	cmp	r5, ip
 800e858:	bf88      	it	hi
 800e85a:	2200      	movhi	r2, #0
 800e85c:	4413      	add	r3, r2
 800e85e:	1a18      	subs	r0, r3, r0
 800e860:	b003      	add	sp, #12
 800e862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e864:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e868:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e86c:	e7ed      	b.n	800e84a <__exponent+0x4c>
 800e86e:	2330      	movs	r3, #48	; 0x30
 800e870:	3130      	adds	r1, #48	; 0x30
 800e872:	7083      	strb	r3, [r0, #2]
 800e874:	70c1      	strb	r1, [r0, #3]
 800e876:	1d03      	adds	r3, r0, #4
 800e878:	e7f1      	b.n	800e85e <__exponent+0x60>
	...

0800e87c <_printf_float>:
 800e87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e880:	b091      	sub	sp, #68	; 0x44
 800e882:	460c      	mov	r4, r1
 800e884:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e888:	4616      	mov	r6, r2
 800e88a:	461f      	mov	r7, r3
 800e88c:	4605      	mov	r5, r0
 800e88e:	f002 fc65 	bl	801115c <_localeconv_r>
 800e892:	6803      	ldr	r3, [r0, #0]
 800e894:	4618      	mov	r0, r3
 800e896:	9309      	str	r3, [sp, #36]	; 0x24
 800e898:	f7f1 fc7c 	bl	8000194 <strlen>
 800e89c:	2300      	movs	r3, #0
 800e89e:	930e      	str	r3, [sp, #56]	; 0x38
 800e8a0:	f8d8 3000 	ldr.w	r3, [r8]
 800e8a4:	900a      	str	r0, [sp, #40]	; 0x28
 800e8a6:	3307      	adds	r3, #7
 800e8a8:	f023 0307 	bic.w	r3, r3, #7
 800e8ac:	f103 0208 	add.w	r2, r3, #8
 800e8b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e8b4:	f8d4 b000 	ldr.w	fp, [r4]
 800e8b8:	f8c8 2000 	str.w	r2, [r8]
 800e8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e8c4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800e8c8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e8cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e8d2:	4640      	mov	r0, r8
 800e8d4:	4b9c      	ldr	r3, [pc, #624]	; (800eb48 <_printf_float+0x2cc>)
 800e8d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8d8:	f7f2 f8ba 	bl	8000a50 <__aeabi_dcmpun>
 800e8dc:	bb70      	cbnz	r0, 800e93c <_printf_float+0xc0>
 800e8de:	f04f 32ff 	mov.w	r2, #4294967295
 800e8e2:	4640      	mov	r0, r8
 800e8e4:	4b98      	ldr	r3, [pc, #608]	; (800eb48 <_printf_float+0x2cc>)
 800e8e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8e8:	f7f2 f894 	bl	8000a14 <__aeabi_dcmple>
 800e8ec:	bb30      	cbnz	r0, 800e93c <_printf_float+0xc0>
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	4640      	mov	r0, r8
 800e8f4:	4651      	mov	r1, sl
 800e8f6:	f7f2 f883 	bl	8000a00 <__aeabi_dcmplt>
 800e8fa:	b110      	cbz	r0, 800e902 <_printf_float+0x86>
 800e8fc:	232d      	movs	r3, #45	; 0x2d
 800e8fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e902:	4b92      	ldr	r3, [pc, #584]	; (800eb4c <_printf_float+0x2d0>)
 800e904:	4892      	ldr	r0, [pc, #584]	; (800eb50 <_printf_float+0x2d4>)
 800e906:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e90a:	bf94      	ite	ls
 800e90c:	4698      	movls	r8, r3
 800e90e:	4680      	movhi	r8, r0
 800e910:	2303      	movs	r3, #3
 800e912:	f04f 0a00 	mov.w	sl, #0
 800e916:	6123      	str	r3, [r4, #16]
 800e918:	f02b 0304 	bic.w	r3, fp, #4
 800e91c:	6023      	str	r3, [r4, #0]
 800e91e:	4633      	mov	r3, r6
 800e920:	4621      	mov	r1, r4
 800e922:	4628      	mov	r0, r5
 800e924:	9700      	str	r7, [sp, #0]
 800e926:	aa0f      	add	r2, sp, #60	; 0x3c
 800e928:	f000 f9d4 	bl	800ecd4 <_printf_common>
 800e92c:	3001      	adds	r0, #1
 800e92e:	f040 8090 	bne.w	800ea52 <_printf_float+0x1d6>
 800e932:	f04f 30ff 	mov.w	r0, #4294967295
 800e936:	b011      	add	sp, #68	; 0x44
 800e938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e93c:	4642      	mov	r2, r8
 800e93e:	4653      	mov	r3, sl
 800e940:	4640      	mov	r0, r8
 800e942:	4651      	mov	r1, sl
 800e944:	f7f2 f884 	bl	8000a50 <__aeabi_dcmpun>
 800e948:	b148      	cbz	r0, 800e95e <_printf_float+0xe2>
 800e94a:	f1ba 0f00 	cmp.w	sl, #0
 800e94e:	bfb8      	it	lt
 800e950:	232d      	movlt	r3, #45	; 0x2d
 800e952:	4880      	ldr	r0, [pc, #512]	; (800eb54 <_printf_float+0x2d8>)
 800e954:	bfb8      	it	lt
 800e956:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e95a:	4b7f      	ldr	r3, [pc, #508]	; (800eb58 <_printf_float+0x2dc>)
 800e95c:	e7d3      	b.n	800e906 <_printf_float+0x8a>
 800e95e:	6863      	ldr	r3, [r4, #4]
 800e960:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e964:	1c5a      	adds	r2, r3, #1
 800e966:	d142      	bne.n	800e9ee <_printf_float+0x172>
 800e968:	2306      	movs	r3, #6
 800e96a:	6063      	str	r3, [r4, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	9206      	str	r2, [sp, #24]
 800e970:	aa0e      	add	r2, sp, #56	; 0x38
 800e972:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e976:	aa0d      	add	r2, sp, #52	; 0x34
 800e978:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e97c:	9203      	str	r2, [sp, #12]
 800e97e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e982:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e986:	6023      	str	r3, [r4, #0]
 800e988:	6863      	ldr	r3, [r4, #4]
 800e98a:	4642      	mov	r2, r8
 800e98c:	9300      	str	r3, [sp, #0]
 800e98e:	4628      	mov	r0, r5
 800e990:	4653      	mov	r3, sl
 800e992:	910b      	str	r1, [sp, #44]	; 0x2c
 800e994:	f7ff fed4 	bl	800e740 <__cvt>
 800e998:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e99a:	4680      	mov	r8, r0
 800e99c:	2947      	cmp	r1, #71	; 0x47
 800e99e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e9a0:	d108      	bne.n	800e9b4 <_printf_float+0x138>
 800e9a2:	1cc8      	adds	r0, r1, #3
 800e9a4:	db02      	blt.n	800e9ac <_printf_float+0x130>
 800e9a6:	6863      	ldr	r3, [r4, #4]
 800e9a8:	4299      	cmp	r1, r3
 800e9aa:	dd40      	ble.n	800ea2e <_printf_float+0x1b2>
 800e9ac:	f1a9 0902 	sub.w	r9, r9, #2
 800e9b0:	fa5f f989 	uxtb.w	r9, r9
 800e9b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e9b8:	d81f      	bhi.n	800e9fa <_printf_float+0x17e>
 800e9ba:	464a      	mov	r2, r9
 800e9bc:	3901      	subs	r1, #1
 800e9be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e9c2:	910d      	str	r1, [sp, #52]	; 0x34
 800e9c4:	f7ff ff1b 	bl	800e7fe <__exponent>
 800e9c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9ca:	4682      	mov	sl, r0
 800e9cc:	1813      	adds	r3, r2, r0
 800e9ce:	2a01      	cmp	r2, #1
 800e9d0:	6123      	str	r3, [r4, #16]
 800e9d2:	dc02      	bgt.n	800e9da <_printf_float+0x15e>
 800e9d4:	6822      	ldr	r2, [r4, #0]
 800e9d6:	07d2      	lsls	r2, r2, #31
 800e9d8:	d501      	bpl.n	800e9de <_printf_float+0x162>
 800e9da:	3301      	adds	r3, #1
 800e9dc:	6123      	str	r3, [r4, #16]
 800e9de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d09b      	beq.n	800e91e <_printf_float+0xa2>
 800e9e6:	232d      	movs	r3, #45	; 0x2d
 800e9e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9ec:	e797      	b.n	800e91e <_printf_float+0xa2>
 800e9ee:	2947      	cmp	r1, #71	; 0x47
 800e9f0:	d1bc      	bne.n	800e96c <_printf_float+0xf0>
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1ba      	bne.n	800e96c <_printf_float+0xf0>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e7b7      	b.n	800e96a <_printf_float+0xee>
 800e9fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e9fe:	d118      	bne.n	800ea32 <_printf_float+0x1b6>
 800ea00:	2900      	cmp	r1, #0
 800ea02:	6863      	ldr	r3, [r4, #4]
 800ea04:	dd0b      	ble.n	800ea1e <_printf_float+0x1a2>
 800ea06:	6121      	str	r1, [r4, #16]
 800ea08:	b913      	cbnz	r3, 800ea10 <_printf_float+0x194>
 800ea0a:	6822      	ldr	r2, [r4, #0]
 800ea0c:	07d0      	lsls	r0, r2, #31
 800ea0e:	d502      	bpl.n	800ea16 <_printf_float+0x19a>
 800ea10:	3301      	adds	r3, #1
 800ea12:	440b      	add	r3, r1
 800ea14:	6123      	str	r3, [r4, #16]
 800ea16:	f04f 0a00 	mov.w	sl, #0
 800ea1a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ea1c:	e7df      	b.n	800e9de <_printf_float+0x162>
 800ea1e:	b913      	cbnz	r3, 800ea26 <_printf_float+0x1aa>
 800ea20:	6822      	ldr	r2, [r4, #0]
 800ea22:	07d2      	lsls	r2, r2, #31
 800ea24:	d501      	bpl.n	800ea2a <_printf_float+0x1ae>
 800ea26:	3302      	adds	r3, #2
 800ea28:	e7f4      	b.n	800ea14 <_printf_float+0x198>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e7f2      	b.n	800ea14 <_printf_float+0x198>
 800ea2e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ea32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea34:	4299      	cmp	r1, r3
 800ea36:	db05      	blt.n	800ea44 <_printf_float+0x1c8>
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	6121      	str	r1, [r4, #16]
 800ea3c:	07d8      	lsls	r0, r3, #31
 800ea3e:	d5ea      	bpl.n	800ea16 <_printf_float+0x19a>
 800ea40:	1c4b      	adds	r3, r1, #1
 800ea42:	e7e7      	b.n	800ea14 <_printf_float+0x198>
 800ea44:	2900      	cmp	r1, #0
 800ea46:	bfcc      	ite	gt
 800ea48:	2201      	movgt	r2, #1
 800ea4a:	f1c1 0202 	rsble	r2, r1, #2
 800ea4e:	4413      	add	r3, r2
 800ea50:	e7e0      	b.n	800ea14 <_printf_float+0x198>
 800ea52:	6823      	ldr	r3, [r4, #0]
 800ea54:	055a      	lsls	r2, r3, #21
 800ea56:	d407      	bmi.n	800ea68 <_printf_float+0x1ec>
 800ea58:	6923      	ldr	r3, [r4, #16]
 800ea5a:	4642      	mov	r2, r8
 800ea5c:	4631      	mov	r1, r6
 800ea5e:	4628      	mov	r0, r5
 800ea60:	47b8      	blx	r7
 800ea62:	3001      	adds	r0, #1
 800ea64:	d12b      	bne.n	800eabe <_printf_float+0x242>
 800ea66:	e764      	b.n	800e932 <_printf_float+0xb6>
 800ea68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ea6c:	f240 80dd 	bls.w	800ec2a <_printf_float+0x3ae>
 800ea70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea74:	2200      	movs	r2, #0
 800ea76:	2300      	movs	r3, #0
 800ea78:	f7f1 ffb8 	bl	80009ec <__aeabi_dcmpeq>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d033      	beq.n	800eae8 <_printf_float+0x26c>
 800ea80:	2301      	movs	r3, #1
 800ea82:	4631      	mov	r1, r6
 800ea84:	4628      	mov	r0, r5
 800ea86:	4a35      	ldr	r2, [pc, #212]	; (800eb5c <_printf_float+0x2e0>)
 800ea88:	47b8      	blx	r7
 800ea8a:	3001      	adds	r0, #1
 800ea8c:	f43f af51 	beq.w	800e932 <_printf_float+0xb6>
 800ea90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ea94:	429a      	cmp	r2, r3
 800ea96:	db02      	blt.n	800ea9e <_printf_float+0x222>
 800ea98:	6823      	ldr	r3, [r4, #0]
 800ea9a:	07d8      	lsls	r0, r3, #31
 800ea9c:	d50f      	bpl.n	800eabe <_printf_float+0x242>
 800ea9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eaa2:	4631      	mov	r1, r6
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	47b8      	blx	r7
 800eaa8:	3001      	adds	r0, #1
 800eaaa:	f43f af42 	beq.w	800e932 <_printf_float+0xb6>
 800eaae:	f04f 0800 	mov.w	r8, #0
 800eab2:	f104 091a 	add.w	r9, r4, #26
 800eab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eab8:	3b01      	subs	r3, #1
 800eaba:	4543      	cmp	r3, r8
 800eabc:	dc09      	bgt.n	800ead2 <_printf_float+0x256>
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	079b      	lsls	r3, r3, #30
 800eac2:	f100 8102 	bmi.w	800ecca <_printf_float+0x44e>
 800eac6:	68e0      	ldr	r0, [r4, #12]
 800eac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eaca:	4298      	cmp	r0, r3
 800eacc:	bfb8      	it	lt
 800eace:	4618      	movlt	r0, r3
 800ead0:	e731      	b.n	800e936 <_printf_float+0xba>
 800ead2:	2301      	movs	r3, #1
 800ead4:	464a      	mov	r2, r9
 800ead6:	4631      	mov	r1, r6
 800ead8:	4628      	mov	r0, r5
 800eada:	47b8      	blx	r7
 800eadc:	3001      	adds	r0, #1
 800eade:	f43f af28 	beq.w	800e932 <_printf_float+0xb6>
 800eae2:	f108 0801 	add.w	r8, r8, #1
 800eae6:	e7e6      	b.n	800eab6 <_printf_float+0x23a>
 800eae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	dc38      	bgt.n	800eb60 <_printf_float+0x2e4>
 800eaee:	2301      	movs	r3, #1
 800eaf0:	4631      	mov	r1, r6
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	4a19      	ldr	r2, [pc, #100]	; (800eb5c <_printf_float+0x2e0>)
 800eaf6:	47b8      	blx	r7
 800eaf8:	3001      	adds	r0, #1
 800eafa:	f43f af1a 	beq.w	800e932 <_printf_float+0xb6>
 800eafe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800eb02:	4313      	orrs	r3, r2
 800eb04:	d102      	bne.n	800eb0c <_printf_float+0x290>
 800eb06:	6823      	ldr	r3, [r4, #0]
 800eb08:	07d9      	lsls	r1, r3, #31
 800eb0a:	d5d8      	bpl.n	800eabe <_printf_float+0x242>
 800eb0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb10:	4631      	mov	r1, r6
 800eb12:	4628      	mov	r0, r5
 800eb14:	47b8      	blx	r7
 800eb16:	3001      	adds	r0, #1
 800eb18:	f43f af0b 	beq.w	800e932 <_printf_float+0xb6>
 800eb1c:	f04f 0900 	mov.w	r9, #0
 800eb20:	f104 0a1a 	add.w	sl, r4, #26
 800eb24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb26:	425b      	negs	r3, r3
 800eb28:	454b      	cmp	r3, r9
 800eb2a:	dc01      	bgt.n	800eb30 <_printf_float+0x2b4>
 800eb2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb2e:	e794      	b.n	800ea5a <_printf_float+0x1de>
 800eb30:	2301      	movs	r3, #1
 800eb32:	4652      	mov	r2, sl
 800eb34:	4631      	mov	r1, r6
 800eb36:	4628      	mov	r0, r5
 800eb38:	47b8      	blx	r7
 800eb3a:	3001      	adds	r0, #1
 800eb3c:	f43f aef9 	beq.w	800e932 <_printf_float+0xb6>
 800eb40:	f109 0901 	add.w	r9, r9, #1
 800eb44:	e7ee      	b.n	800eb24 <_printf_float+0x2a8>
 800eb46:	bf00      	nop
 800eb48:	7fefffff 	.word	0x7fefffff
 800eb4c:	08012d40 	.word	0x08012d40
 800eb50:	08012d44 	.word	0x08012d44
 800eb54:	08012d4c 	.word	0x08012d4c
 800eb58:	08012d48 	.word	0x08012d48
 800eb5c:	08012d50 	.word	0x08012d50
 800eb60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb64:	429a      	cmp	r2, r3
 800eb66:	bfa8      	it	ge
 800eb68:	461a      	movge	r2, r3
 800eb6a:	2a00      	cmp	r2, #0
 800eb6c:	4691      	mov	r9, r2
 800eb6e:	dc37      	bgt.n	800ebe0 <_printf_float+0x364>
 800eb70:	f04f 0b00 	mov.w	fp, #0
 800eb74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb78:	f104 021a 	add.w	r2, r4, #26
 800eb7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800eb80:	ebaa 0309 	sub.w	r3, sl, r9
 800eb84:	455b      	cmp	r3, fp
 800eb86:	dc33      	bgt.n	800ebf0 <_printf_float+0x374>
 800eb88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	db3b      	blt.n	800ec08 <_printf_float+0x38c>
 800eb90:	6823      	ldr	r3, [r4, #0]
 800eb92:	07da      	lsls	r2, r3, #31
 800eb94:	d438      	bmi.n	800ec08 <_printf_float+0x38c>
 800eb96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb98:	990d      	ldr	r1, [sp, #52]	; 0x34
 800eb9a:	eba3 020a 	sub.w	r2, r3, sl
 800eb9e:	eba3 0901 	sub.w	r9, r3, r1
 800eba2:	4591      	cmp	r9, r2
 800eba4:	bfa8      	it	ge
 800eba6:	4691      	movge	r9, r2
 800eba8:	f1b9 0f00 	cmp.w	r9, #0
 800ebac:	dc34      	bgt.n	800ec18 <_printf_float+0x39c>
 800ebae:	f04f 0800 	mov.w	r8, #0
 800ebb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebb6:	f104 0a1a 	add.w	sl, r4, #26
 800ebba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ebbe:	1a9b      	subs	r3, r3, r2
 800ebc0:	eba3 0309 	sub.w	r3, r3, r9
 800ebc4:	4543      	cmp	r3, r8
 800ebc6:	f77f af7a 	ble.w	800eabe <_printf_float+0x242>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	4652      	mov	r2, sl
 800ebce:	4631      	mov	r1, r6
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	47b8      	blx	r7
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	f43f aeac 	beq.w	800e932 <_printf_float+0xb6>
 800ebda:	f108 0801 	add.w	r8, r8, #1
 800ebde:	e7ec      	b.n	800ebba <_printf_float+0x33e>
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	4631      	mov	r1, r6
 800ebe4:	4642      	mov	r2, r8
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	47b8      	blx	r7
 800ebea:	3001      	adds	r0, #1
 800ebec:	d1c0      	bne.n	800eb70 <_printf_float+0x2f4>
 800ebee:	e6a0      	b.n	800e932 <_printf_float+0xb6>
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	4631      	mov	r1, r6
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	920b      	str	r2, [sp, #44]	; 0x2c
 800ebf8:	47b8      	blx	r7
 800ebfa:	3001      	adds	r0, #1
 800ebfc:	f43f ae99 	beq.w	800e932 <_printf_float+0xb6>
 800ec00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec02:	f10b 0b01 	add.w	fp, fp, #1
 800ec06:	e7b9      	b.n	800eb7c <_printf_float+0x300>
 800ec08:	4631      	mov	r1, r6
 800ec0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec0e:	4628      	mov	r0, r5
 800ec10:	47b8      	blx	r7
 800ec12:	3001      	adds	r0, #1
 800ec14:	d1bf      	bne.n	800eb96 <_printf_float+0x31a>
 800ec16:	e68c      	b.n	800e932 <_printf_float+0xb6>
 800ec18:	464b      	mov	r3, r9
 800ec1a:	4631      	mov	r1, r6
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	eb08 020a 	add.w	r2, r8, sl
 800ec22:	47b8      	blx	r7
 800ec24:	3001      	adds	r0, #1
 800ec26:	d1c2      	bne.n	800ebae <_printf_float+0x332>
 800ec28:	e683      	b.n	800e932 <_printf_float+0xb6>
 800ec2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec2c:	2a01      	cmp	r2, #1
 800ec2e:	dc01      	bgt.n	800ec34 <_printf_float+0x3b8>
 800ec30:	07db      	lsls	r3, r3, #31
 800ec32:	d537      	bpl.n	800eca4 <_printf_float+0x428>
 800ec34:	2301      	movs	r3, #1
 800ec36:	4642      	mov	r2, r8
 800ec38:	4631      	mov	r1, r6
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	47b8      	blx	r7
 800ec3e:	3001      	adds	r0, #1
 800ec40:	f43f ae77 	beq.w	800e932 <_printf_float+0xb6>
 800ec44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	47b8      	blx	r7
 800ec4e:	3001      	adds	r0, #1
 800ec50:	f43f ae6f 	beq.w	800e932 <_printf_float+0xb6>
 800ec54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec58:	2200      	movs	r2, #0
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	f7f1 fec6 	bl	80009ec <__aeabi_dcmpeq>
 800ec60:	b9d8      	cbnz	r0, 800ec9a <_printf_float+0x41e>
 800ec62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec64:	f108 0201 	add.w	r2, r8, #1
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	4631      	mov	r1, r6
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	47b8      	blx	r7
 800ec70:	3001      	adds	r0, #1
 800ec72:	d10e      	bne.n	800ec92 <_printf_float+0x416>
 800ec74:	e65d      	b.n	800e932 <_printf_float+0xb6>
 800ec76:	2301      	movs	r3, #1
 800ec78:	464a      	mov	r2, r9
 800ec7a:	4631      	mov	r1, r6
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	47b8      	blx	r7
 800ec80:	3001      	adds	r0, #1
 800ec82:	f43f ae56 	beq.w	800e932 <_printf_float+0xb6>
 800ec86:	f108 0801 	add.w	r8, r8, #1
 800ec8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	4543      	cmp	r3, r8
 800ec90:	dcf1      	bgt.n	800ec76 <_printf_float+0x3fa>
 800ec92:	4653      	mov	r3, sl
 800ec94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec98:	e6e0      	b.n	800ea5c <_printf_float+0x1e0>
 800ec9a:	f04f 0800 	mov.w	r8, #0
 800ec9e:	f104 091a 	add.w	r9, r4, #26
 800eca2:	e7f2      	b.n	800ec8a <_printf_float+0x40e>
 800eca4:	2301      	movs	r3, #1
 800eca6:	4642      	mov	r2, r8
 800eca8:	e7df      	b.n	800ec6a <_printf_float+0x3ee>
 800ecaa:	2301      	movs	r3, #1
 800ecac:	464a      	mov	r2, r9
 800ecae:	4631      	mov	r1, r6
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	47b8      	blx	r7
 800ecb4:	3001      	adds	r0, #1
 800ecb6:	f43f ae3c 	beq.w	800e932 <_printf_float+0xb6>
 800ecba:	f108 0801 	add.w	r8, r8, #1
 800ecbe:	68e3      	ldr	r3, [r4, #12]
 800ecc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ecc2:	1a5b      	subs	r3, r3, r1
 800ecc4:	4543      	cmp	r3, r8
 800ecc6:	dcf0      	bgt.n	800ecaa <_printf_float+0x42e>
 800ecc8:	e6fd      	b.n	800eac6 <_printf_float+0x24a>
 800ecca:	f04f 0800 	mov.w	r8, #0
 800ecce:	f104 0919 	add.w	r9, r4, #25
 800ecd2:	e7f4      	b.n	800ecbe <_printf_float+0x442>

0800ecd4 <_printf_common>:
 800ecd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd8:	4616      	mov	r6, r2
 800ecda:	4699      	mov	r9, r3
 800ecdc:	688a      	ldr	r2, [r1, #8]
 800ecde:	690b      	ldr	r3, [r1, #16]
 800ece0:	4607      	mov	r7, r0
 800ece2:	4293      	cmp	r3, r2
 800ece4:	bfb8      	it	lt
 800ece6:	4613      	movlt	r3, r2
 800ece8:	6033      	str	r3, [r6, #0]
 800ecea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecee:	460c      	mov	r4, r1
 800ecf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ecf4:	b10a      	cbz	r2, 800ecfa <_printf_common+0x26>
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	6033      	str	r3, [r6, #0]
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	0699      	lsls	r1, r3, #26
 800ecfe:	bf42      	ittt	mi
 800ed00:	6833      	ldrmi	r3, [r6, #0]
 800ed02:	3302      	addmi	r3, #2
 800ed04:	6033      	strmi	r3, [r6, #0]
 800ed06:	6825      	ldr	r5, [r4, #0]
 800ed08:	f015 0506 	ands.w	r5, r5, #6
 800ed0c:	d106      	bne.n	800ed1c <_printf_common+0x48>
 800ed0e:	f104 0a19 	add.w	sl, r4, #25
 800ed12:	68e3      	ldr	r3, [r4, #12]
 800ed14:	6832      	ldr	r2, [r6, #0]
 800ed16:	1a9b      	subs	r3, r3, r2
 800ed18:	42ab      	cmp	r3, r5
 800ed1a:	dc28      	bgt.n	800ed6e <_printf_common+0x9a>
 800ed1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ed20:	1e13      	subs	r3, r2, #0
 800ed22:	6822      	ldr	r2, [r4, #0]
 800ed24:	bf18      	it	ne
 800ed26:	2301      	movne	r3, #1
 800ed28:	0692      	lsls	r2, r2, #26
 800ed2a:	d42d      	bmi.n	800ed88 <_printf_common+0xb4>
 800ed2c:	4649      	mov	r1, r9
 800ed2e:	4638      	mov	r0, r7
 800ed30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed34:	47c0      	blx	r8
 800ed36:	3001      	adds	r0, #1
 800ed38:	d020      	beq.n	800ed7c <_printf_common+0xa8>
 800ed3a:	6823      	ldr	r3, [r4, #0]
 800ed3c:	68e5      	ldr	r5, [r4, #12]
 800ed3e:	f003 0306 	and.w	r3, r3, #6
 800ed42:	2b04      	cmp	r3, #4
 800ed44:	bf18      	it	ne
 800ed46:	2500      	movne	r5, #0
 800ed48:	6832      	ldr	r2, [r6, #0]
 800ed4a:	f04f 0600 	mov.w	r6, #0
 800ed4e:	68a3      	ldr	r3, [r4, #8]
 800ed50:	bf08      	it	eq
 800ed52:	1aad      	subeq	r5, r5, r2
 800ed54:	6922      	ldr	r2, [r4, #16]
 800ed56:	bf08      	it	eq
 800ed58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	bfc4      	itt	gt
 800ed60:	1a9b      	subgt	r3, r3, r2
 800ed62:	18ed      	addgt	r5, r5, r3
 800ed64:	341a      	adds	r4, #26
 800ed66:	42b5      	cmp	r5, r6
 800ed68:	d11a      	bne.n	800eda0 <_printf_common+0xcc>
 800ed6a:	2000      	movs	r0, #0
 800ed6c:	e008      	b.n	800ed80 <_printf_common+0xac>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	4652      	mov	r2, sl
 800ed72:	4649      	mov	r1, r9
 800ed74:	4638      	mov	r0, r7
 800ed76:	47c0      	blx	r8
 800ed78:	3001      	adds	r0, #1
 800ed7a:	d103      	bne.n	800ed84 <_printf_common+0xb0>
 800ed7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed84:	3501      	adds	r5, #1
 800ed86:	e7c4      	b.n	800ed12 <_printf_common+0x3e>
 800ed88:	2030      	movs	r0, #48	; 0x30
 800ed8a:	18e1      	adds	r1, r4, r3
 800ed8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed90:	1c5a      	adds	r2, r3, #1
 800ed92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed96:	4422      	add	r2, r4
 800ed98:	3302      	adds	r3, #2
 800ed9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed9e:	e7c5      	b.n	800ed2c <_printf_common+0x58>
 800eda0:	2301      	movs	r3, #1
 800eda2:	4622      	mov	r2, r4
 800eda4:	4649      	mov	r1, r9
 800eda6:	4638      	mov	r0, r7
 800eda8:	47c0      	blx	r8
 800edaa:	3001      	adds	r0, #1
 800edac:	d0e6      	beq.n	800ed7c <_printf_common+0xa8>
 800edae:	3601      	adds	r6, #1
 800edb0:	e7d9      	b.n	800ed66 <_printf_common+0x92>
	...

0800edb4 <_printf_i>:
 800edb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edb8:	7e0f      	ldrb	r7, [r1, #24]
 800edba:	4691      	mov	r9, r2
 800edbc:	2f78      	cmp	r7, #120	; 0x78
 800edbe:	4680      	mov	r8, r0
 800edc0:	460c      	mov	r4, r1
 800edc2:	469a      	mov	sl, r3
 800edc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800edc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800edca:	d807      	bhi.n	800eddc <_printf_i+0x28>
 800edcc:	2f62      	cmp	r7, #98	; 0x62
 800edce:	d80a      	bhi.n	800ede6 <_printf_i+0x32>
 800edd0:	2f00      	cmp	r7, #0
 800edd2:	f000 80d9 	beq.w	800ef88 <_printf_i+0x1d4>
 800edd6:	2f58      	cmp	r7, #88	; 0x58
 800edd8:	f000 80a4 	beq.w	800ef24 <_printf_i+0x170>
 800eddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ede0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ede4:	e03a      	b.n	800ee5c <_printf_i+0xa8>
 800ede6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800edea:	2b15      	cmp	r3, #21
 800edec:	d8f6      	bhi.n	800eddc <_printf_i+0x28>
 800edee:	a101      	add	r1, pc, #4	; (adr r1, 800edf4 <_printf_i+0x40>)
 800edf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edf4:	0800ee4d 	.word	0x0800ee4d
 800edf8:	0800ee61 	.word	0x0800ee61
 800edfc:	0800eddd 	.word	0x0800eddd
 800ee00:	0800eddd 	.word	0x0800eddd
 800ee04:	0800eddd 	.word	0x0800eddd
 800ee08:	0800eddd 	.word	0x0800eddd
 800ee0c:	0800ee61 	.word	0x0800ee61
 800ee10:	0800eddd 	.word	0x0800eddd
 800ee14:	0800eddd 	.word	0x0800eddd
 800ee18:	0800eddd 	.word	0x0800eddd
 800ee1c:	0800eddd 	.word	0x0800eddd
 800ee20:	0800ef6f 	.word	0x0800ef6f
 800ee24:	0800ee91 	.word	0x0800ee91
 800ee28:	0800ef51 	.word	0x0800ef51
 800ee2c:	0800eddd 	.word	0x0800eddd
 800ee30:	0800eddd 	.word	0x0800eddd
 800ee34:	0800ef91 	.word	0x0800ef91
 800ee38:	0800eddd 	.word	0x0800eddd
 800ee3c:	0800ee91 	.word	0x0800ee91
 800ee40:	0800eddd 	.word	0x0800eddd
 800ee44:	0800eddd 	.word	0x0800eddd
 800ee48:	0800ef59 	.word	0x0800ef59
 800ee4c:	682b      	ldr	r3, [r5, #0]
 800ee4e:	1d1a      	adds	r2, r3, #4
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	602a      	str	r2, [r5, #0]
 800ee54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e0a4      	b.n	800efaa <_printf_i+0x1f6>
 800ee60:	6820      	ldr	r0, [r4, #0]
 800ee62:	6829      	ldr	r1, [r5, #0]
 800ee64:	0606      	lsls	r6, r0, #24
 800ee66:	f101 0304 	add.w	r3, r1, #4
 800ee6a:	d50a      	bpl.n	800ee82 <_printf_i+0xce>
 800ee6c:	680e      	ldr	r6, [r1, #0]
 800ee6e:	602b      	str	r3, [r5, #0]
 800ee70:	2e00      	cmp	r6, #0
 800ee72:	da03      	bge.n	800ee7c <_printf_i+0xc8>
 800ee74:	232d      	movs	r3, #45	; 0x2d
 800ee76:	4276      	negs	r6, r6
 800ee78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee7c:	230a      	movs	r3, #10
 800ee7e:	485e      	ldr	r0, [pc, #376]	; (800eff8 <_printf_i+0x244>)
 800ee80:	e019      	b.n	800eeb6 <_printf_i+0x102>
 800ee82:	680e      	ldr	r6, [r1, #0]
 800ee84:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee88:	602b      	str	r3, [r5, #0]
 800ee8a:	bf18      	it	ne
 800ee8c:	b236      	sxthne	r6, r6
 800ee8e:	e7ef      	b.n	800ee70 <_printf_i+0xbc>
 800ee90:	682b      	ldr	r3, [r5, #0]
 800ee92:	6820      	ldr	r0, [r4, #0]
 800ee94:	1d19      	adds	r1, r3, #4
 800ee96:	6029      	str	r1, [r5, #0]
 800ee98:	0601      	lsls	r1, r0, #24
 800ee9a:	d501      	bpl.n	800eea0 <_printf_i+0xec>
 800ee9c:	681e      	ldr	r6, [r3, #0]
 800ee9e:	e002      	b.n	800eea6 <_printf_i+0xf2>
 800eea0:	0646      	lsls	r6, r0, #25
 800eea2:	d5fb      	bpl.n	800ee9c <_printf_i+0xe8>
 800eea4:	881e      	ldrh	r6, [r3, #0]
 800eea6:	2f6f      	cmp	r7, #111	; 0x6f
 800eea8:	bf0c      	ite	eq
 800eeaa:	2308      	moveq	r3, #8
 800eeac:	230a      	movne	r3, #10
 800eeae:	4852      	ldr	r0, [pc, #328]	; (800eff8 <_printf_i+0x244>)
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eeb6:	6865      	ldr	r5, [r4, #4]
 800eeb8:	2d00      	cmp	r5, #0
 800eeba:	bfa8      	it	ge
 800eebc:	6821      	ldrge	r1, [r4, #0]
 800eebe:	60a5      	str	r5, [r4, #8]
 800eec0:	bfa4      	itt	ge
 800eec2:	f021 0104 	bicge.w	r1, r1, #4
 800eec6:	6021      	strge	r1, [r4, #0]
 800eec8:	b90e      	cbnz	r6, 800eece <_printf_i+0x11a>
 800eeca:	2d00      	cmp	r5, #0
 800eecc:	d04d      	beq.n	800ef6a <_printf_i+0x1b6>
 800eece:	4615      	mov	r5, r2
 800eed0:	fbb6 f1f3 	udiv	r1, r6, r3
 800eed4:	fb03 6711 	mls	r7, r3, r1, r6
 800eed8:	5dc7      	ldrb	r7, [r0, r7]
 800eeda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eede:	4637      	mov	r7, r6
 800eee0:	42bb      	cmp	r3, r7
 800eee2:	460e      	mov	r6, r1
 800eee4:	d9f4      	bls.n	800eed0 <_printf_i+0x11c>
 800eee6:	2b08      	cmp	r3, #8
 800eee8:	d10b      	bne.n	800ef02 <_printf_i+0x14e>
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	07de      	lsls	r6, r3, #31
 800eeee:	d508      	bpl.n	800ef02 <_printf_i+0x14e>
 800eef0:	6923      	ldr	r3, [r4, #16]
 800eef2:	6861      	ldr	r1, [r4, #4]
 800eef4:	4299      	cmp	r1, r3
 800eef6:	bfde      	ittt	le
 800eef8:	2330      	movle	r3, #48	; 0x30
 800eefa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eefe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ef02:	1b52      	subs	r2, r2, r5
 800ef04:	6122      	str	r2, [r4, #16]
 800ef06:	464b      	mov	r3, r9
 800ef08:	4621      	mov	r1, r4
 800ef0a:	4640      	mov	r0, r8
 800ef0c:	f8cd a000 	str.w	sl, [sp]
 800ef10:	aa03      	add	r2, sp, #12
 800ef12:	f7ff fedf 	bl	800ecd4 <_printf_common>
 800ef16:	3001      	adds	r0, #1
 800ef18:	d14c      	bne.n	800efb4 <_printf_i+0x200>
 800ef1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef1e:	b004      	add	sp, #16
 800ef20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef24:	4834      	ldr	r0, [pc, #208]	; (800eff8 <_printf_i+0x244>)
 800ef26:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ef2a:	6829      	ldr	r1, [r5, #0]
 800ef2c:	6823      	ldr	r3, [r4, #0]
 800ef2e:	f851 6b04 	ldr.w	r6, [r1], #4
 800ef32:	6029      	str	r1, [r5, #0]
 800ef34:	061d      	lsls	r5, r3, #24
 800ef36:	d514      	bpl.n	800ef62 <_printf_i+0x1ae>
 800ef38:	07df      	lsls	r7, r3, #31
 800ef3a:	bf44      	itt	mi
 800ef3c:	f043 0320 	orrmi.w	r3, r3, #32
 800ef40:	6023      	strmi	r3, [r4, #0]
 800ef42:	b91e      	cbnz	r6, 800ef4c <_printf_i+0x198>
 800ef44:	6823      	ldr	r3, [r4, #0]
 800ef46:	f023 0320 	bic.w	r3, r3, #32
 800ef4a:	6023      	str	r3, [r4, #0]
 800ef4c:	2310      	movs	r3, #16
 800ef4e:	e7af      	b.n	800eeb0 <_printf_i+0xfc>
 800ef50:	6823      	ldr	r3, [r4, #0]
 800ef52:	f043 0320 	orr.w	r3, r3, #32
 800ef56:	6023      	str	r3, [r4, #0]
 800ef58:	2378      	movs	r3, #120	; 0x78
 800ef5a:	4828      	ldr	r0, [pc, #160]	; (800effc <_printf_i+0x248>)
 800ef5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef60:	e7e3      	b.n	800ef2a <_printf_i+0x176>
 800ef62:	0659      	lsls	r1, r3, #25
 800ef64:	bf48      	it	mi
 800ef66:	b2b6      	uxthmi	r6, r6
 800ef68:	e7e6      	b.n	800ef38 <_printf_i+0x184>
 800ef6a:	4615      	mov	r5, r2
 800ef6c:	e7bb      	b.n	800eee6 <_printf_i+0x132>
 800ef6e:	682b      	ldr	r3, [r5, #0]
 800ef70:	6826      	ldr	r6, [r4, #0]
 800ef72:	1d18      	adds	r0, r3, #4
 800ef74:	6961      	ldr	r1, [r4, #20]
 800ef76:	6028      	str	r0, [r5, #0]
 800ef78:	0635      	lsls	r5, r6, #24
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	d501      	bpl.n	800ef82 <_printf_i+0x1ce>
 800ef7e:	6019      	str	r1, [r3, #0]
 800ef80:	e002      	b.n	800ef88 <_printf_i+0x1d4>
 800ef82:	0670      	lsls	r0, r6, #25
 800ef84:	d5fb      	bpl.n	800ef7e <_printf_i+0x1ca>
 800ef86:	8019      	strh	r1, [r3, #0]
 800ef88:	2300      	movs	r3, #0
 800ef8a:	4615      	mov	r5, r2
 800ef8c:	6123      	str	r3, [r4, #16]
 800ef8e:	e7ba      	b.n	800ef06 <_printf_i+0x152>
 800ef90:	682b      	ldr	r3, [r5, #0]
 800ef92:	2100      	movs	r1, #0
 800ef94:	1d1a      	adds	r2, r3, #4
 800ef96:	602a      	str	r2, [r5, #0]
 800ef98:	681d      	ldr	r5, [r3, #0]
 800ef9a:	6862      	ldr	r2, [r4, #4]
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	f002 f8fb 	bl	8011198 <memchr>
 800efa2:	b108      	cbz	r0, 800efa8 <_printf_i+0x1f4>
 800efa4:	1b40      	subs	r0, r0, r5
 800efa6:	6060      	str	r0, [r4, #4]
 800efa8:	6863      	ldr	r3, [r4, #4]
 800efaa:	6123      	str	r3, [r4, #16]
 800efac:	2300      	movs	r3, #0
 800efae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efb2:	e7a8      	b.n	800ef06 <_printf_i+0x152>
 800efb4:	462a      	mov	r2, r5
 800efb6:	4649      	mov	r1, r9
 800efb8:	4640      	mov	r0, r8
 800efba:	6923      	ldr	r3, [r4, #16]
 800efbc:	47d0      	blx	sl
 800efbe:	3001      	adds	r0, #1
 800efc0:	d0ab      	beq.n	800ef1a <_printf_i+0x166>
 800efc2:	6823      	ldr	r3, [r4, #0]
 800efc4:	079b      	lsls	r3, r3, #30
 800efc6:	d413      	bmi.n	800eff0 <_printf_i+0x23c>
 800efc8:	68e0      	ldr	r0, [r4, #12]
 800efca:	9b03      	ldr	r3, [sp, #12]
 800efcc:	4298      	cmp	r0, r3
 800efce:	bfb8      	it	lt
 800efd0:	4618      	movlt	r0, r3
 800efd2:	e7a4      	b.n	800ef1e <_printf_i+0x16a>
 800efd4:	2301      	movs	r3, #1
 800efd6:	4632      	mov	r2, r6
 800efd8:	4649      	mov	r1, r9
 800efda:	4640      	mov	r0, r8
 800efdc:	47d0      	blx	sl
 800efde:	3001      	adds	r0, #1
 800efe0:	d09b      	beq.n	800ef1a <_printf_i+0x166>
 800efe2:	3501      	adds	r5, #1
 800efe4:	68e3      	ldr	r3, [r4, #12]
 800efe6:	9903      	ldr	r1, [sp, #12]
 800efe8:	1a5b      	subs	r3, r3, r1
 800efea:	42ab      	cmp	r3, r5
 800efec:	dcf2      	bgt.n	800efd4 <_printf_i+0x220>
 800efee:	e7eb      	b.n	800efc8 <_printf_i+0x214>
 800eff0:	2500      	movs	r5, #0
 800eff2:	f104 0619 	add.w	r6, r4, #25
 800eff6:	e7f5      	b.n	800efe4 <_printf_i+0x230>
 800eff8:	08012d52 	.word	0x08012d52
 800effc:	08012d63 	.word	0x08012d63

0800f000 <siprintf>:
 800f000:	b40e      	push	{r1, r2, r3}
 800f002:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f006:	b500      	push	{lr}
 800f008:	b09c      	sub	sp, #112	; 0x70
 800f00a:	ab1d      	add	r3, sp, #116	; 0x74
 800f00c:	9002      	str	r0, [sp, #8]
 800f00e:	9006      	str	r0, [sp, #24]
 800f010:	9107      	str	r1, [sp, #28]
 800f012:	9104      	str	r1, [sp, #16]
 800f014:	4808      	ldr	r0, [pc, #32]	; (800f038 <siprintf+0x38>)
 800f016:	4909      	ldr	r1, [pc, #36]	; (800f03c <siprintf+0x3c>)
 800f018:	f853 2b04 	ldr.w	r2, [r3], #4
 800f01c:	9105      	str	r1, [sp, #20]
 800f01e:	6800      	ldr	r0, [r0, #0]
 800f020:	a902      	add	r1, sp, #8
 800f022:	9301      	str	r3, [sp, #4]
 800f024:	f002 feca 	bl	8011dbc <_svfiprintf_r>
 800f028:	2200      	movs	r2, #0
 800f02a:	9b02      	ldr	r3, [sp, #8]
 800f02c:	701a      	strb	r2, [r3, #0]
 800f02e:	b01c      	add	sp, #112	; 0x70
 800f030:	f85d eb04 	ldr.w	lr, [sp], #4
 800f034:	b003      	add	sp, #12
 800f036:	4770      	bx	lr
 800f038:	200008bc 	.word	0x200008bc
 800f03c:	ffff0208 	.word	0xffff0208

0800f040 <strcpy>:
 800f040:	4603      	mov	r3, r0
 800f042:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f046:	f803 2b01 	strb.w	r2, [r3], #1
 800f04a:	2a00      	cmp	r2, #0
 800f04c:	d1f9      	bne.n	800f042 <strcpy+0x2>
 800f04e:	4770      	bx	lr

0800f050 <sulp>:
 800f050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f054:	460f      	mov	r7, r1
 800f056:	4690      	mov	r8, r2
 800f058:	f002 fc1c 	bl	8011894 <__ulp>
 800f05c:	4604      	mov	r4, r0
 800f05e:	460d      	mov	r5, r1
 800f060:	f1b8 0f00 	cmp.w	r8, #0
 800f064:	d011      	beq.n	800f08a <sulp+0x3a>
 800f066:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800f06a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f06e:	2b00      	cmp	r3, #0
 800f070:	dd0b      	ble.n	800f08a <sulp+0x3a>
 800f072:	2400      	movs	r4, #0
 800f074:	051b      	lsls	r3, r3, #20
 800f076:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f07a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f07e:	4622      	mov	r2, r4
 800f080:	462b      	mov	r3, r5
 800f082:	f7f1 fa4b 	bl	800051c <__aeabi_dmul>
 800f086:	4604      	mov	r4, r0
 800f088:	460d      	mov	r5, r1
 800f08a:	4620      	mov	r0, r4
 800f08c:	4629      	mov	r1, r5
 800f08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f092:	0000      	movs	r0, r0
 800f094:	0000      	movs	r0, r0
	...

0800f098 <_strtod_l>:
 800f098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f09c:	469b      	mov	fp, r3
 800f09e:	2300      	movs	r3, #0
 800f0a0:	b09f      	sub	sp, #124	; 0x7c
 800f0a2:	931a      	str	r3, [sp, #104]	; 0x68
 800f0a4:	4b9e      	ldr	r3, [pc, #632]	; (800f320 <_strtod_l+0x288>)
 800f0a6:	4682      	mov	sl, r0
 800f0a8:	681f      	ldr	r7, [r3, #0]
 800f0aa:	460e      	mov	r6, r1
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	9215      	str	r2, [sp, #84]	; 0x54
 800f0b0:	f7f1 f870 	bl	8000194 <strlen>
 800f0b4:	f04f 0800 	mov.w	r8, #0
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	f04f 0900 	mov.w	r9, #0
 800f0be:	9619      	str	r6, [sp, #100]	; 0x64
 800f0c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f0c2:	781a      	ldrb	r2, [r3, #0]
 800f0c4:	2a2b      	cmp	r2, #43	; 0x2b
 800f0c6:	d04c      	beq.n	800f162 <_strtod_l+0xca>
 800f0c8:	d83a      	bhi.n	800f140 <_strtod_l+0xa8>
 800f0ca:	2a0d      	cmp	r2, #13
 800f0cc:	d833      	bhi.n	800f136 <_strtod_l+0x9e>
 800f0ce:	2a08      	cmp	r2, #8
 800f0d0:	d833      	bhi.n	800f13a <_strtod_l+0xa2>
 800f0d2:	2a00      	cmp	r2, #0
 800f0d4:	d03d      	beq.n	800f152 <_strtod_l+0xba>
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	930a      	str	r3, [sp, #40]	; 0x28
 800f0da:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800f0dc:	782b      	ldrb	r3, [r5, #0]
 800f0de:	2b30      	cmp	r3, #48	; 0x30
 800f0e0:	f040 80aa 	bne.w	800f238 <_strtod_l+0x1a0>
 800f0e4:	786b      	ldrb	r3, [r5, #1]
 800f0e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f0ea:	2b58      	cmp	r3, #88	; 0x58
 800f0ec:	d166      	bne.n	800f1bc <_strtod_l+0x124>
 800f0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0f0:	4650      	mov	r0, sl
 800f0f2:	9301      	str	r3, [sp, #4]
 800f0f4:	ab1a      	add	r3, sp, #104	; 0x68
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	4a8a      	ldr	r2, [pc, #552]	; (800f324 <_strtod_l+0x28c>)
 800f0fa:	f8cd b008 	str.w	fp, [sp, #8]
 800f0fe:	ab1b      	add	r3, sp, #108	; 0x6c
 800f100:	a919      	add	r1, sp, #100	; 0x64
 800f102:	f001 fd2d 	bl	8010b60 <__gethex>
 800f106:	f010 0607 	ands.w	r6, r0, #7
 800f10a:	4604      	mov	r4, r0
 800f10c:	d005      	beq.n	800f11a <_strtod_l+0x82>
 800f10e:	2e06      	cmp	r6, #6
 800f110:	d129      	bne.n	800f166 <_strtod_l+0xce>
 800f112:	2300      	movs	r3, #0
 800f114:	3501      	adds	r5, #1
 800f116:	9519      	str	r5, [sp, #100]	; 0x64
 800f118:	930a      	str	r3, [sp, #40]	; 0x28
 800f11a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f040 858a 	bne.w	800fc36 <_strtod_l+0xb9e>
 800f122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f124:	b1d3      	cbz	r3, 800f15c <_strtod_l+0xc4>
 800f126:	4642      	mov	r2, r8
 800f128:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f12c:	4610      	mov	r0, r2
 800f12e:	4619      	mov	r1, r3
 800f130:	b01f      	add	sp, #124	; 0x7c
 800f132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f136:	2a20      	cmp	r2, #32
 800f138:	d1cd      	bne.n	800f0d6 <_strtod_l+0x3e>
 800f13a:	3301      	adds	r3, #1
 800f13c:	9319      	str	r3, [sp, #100]	; 0x64
 800f13e:	e7bf      	b.n	800f0c0 <_strtod_l+0x28>
 800f140:	2a2d      	cmp	r2, #45	; 0x2d
 800f142:	d1c8      	bne.n	800f0d6 <_strtod_l+0x3e>
 800f144:	2201      	movs	r2, #1
 800f146:	920a      	str	r2, [sp, #40]	; 0x28
 800f148:	1c5a      	adds	r2, r3, #1
 800f14a:	9219      	str	r2, [sp, #100]	; 0x64
 800f14c:	785b      	ldrb	r3, [r3, #1]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d1c3      	bne.n	800f0da <_strtod_l+0x42>
 800f152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f154:	9619      	str	r6, [sp, #100]	; 0x64
 800f156:	2b00      	cmp	r3, #0
 800f158:	f040 856b 	bne.w	800fc32 <_strtod_l+0xb9a>
 800f15c:	4642      	mov	r2, r8
 800f15e:	464b      	mov	r3, r9
 800f160:	e7e4      	b.n	800f12c <_strtod_l+0x94>
 800f162:	2200      	movs	r2, #0
 800f164:	e7ef      	b.n	800f146 <_strtod_l+0xae>
 800f166:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f168:	b13a      	cbz	r2, 800f17a <_strtod_l+0xe2>
 800f16a:	2135      	movs	r1, #53	; 0x35
 800f16c:	a81c      	add	r0, sp, #112	; 0x70
 800f16e:	f002 fc95 	bl	8011a9c <__copybits>
 800f172:	4650      	mov	r0, sl
 800f174:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f176:	f002 f85d 	bl	8011234 <_Bfree>
 800f17a:	3e01      	subs	r6, #1
 800f17c:	2e04      	cmp	r6, #4
 800f17e:	d806      	bhi.n	800f18e <_strtod_l+0xf6>
 800f180:	e8df f006 	tbb	[pc, r6]
 800f184:	1714030a 	.word	0x1714030a
 800f188:	0a          	.byte	0x0a
 800f189:	00          	.byte	0x00
 800f18a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800f18e:	0721      	lsls	r1, r4, #28
 800f190:	d5c3      	bpl.n	800f11a <_strtod_l+0x82>
 800f192:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f196:	e7c0      	b.n	800f11a <_strtod_l+0x82>
 800f198:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f19a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800f19e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f1a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f1a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f1aa:	e7f0      	b.n	800f18e <_strtod_l+0xf6>
 800f1ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f328 <_strtod_l+0x290>
 800f1b0:	e7ed      	b.n	800f18e <_strtod_l+0xf6>
 800f1b2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f1b6:	f04f 38ff 	mov.w	r8, #4294967295
 800f1ba:	e7e8      	b.n	800f18e <_strtod_l+0xf6>
 800f1bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f1be:	1c5a      	adds	r2, r3, #1
 800f1c0:	9219      	str	r2, [sp, #100]	; 0x64
 800f1c2:	785b      	ldrb	r3, [r3, #1]
 800f1c4:	2b30      	cmp	r3, #48	; 0x30
 800f1c6:	d0f9      	beq.n	800f1bc <_strtod_l+0x124>
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d0a6      	beq.n	800f11a <_strtod_l+0x82>
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	9307      	str	r3, [sp, #28]
 800f1d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f1d2:	220a      	movs	r2, #10
 800f1d4:	9308      	str	r3, [sp, #32]
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	469b      	mov	fp, r3
 800f1da:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f1de:	9819      	ldr	r0, [sp, #100]	; 0x64
 800f1e0:	7805      	ldrb	r5, [r0, #0]
 800f1e2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800f1e6:	b2d9      	uxtb	r1, r3
 800f1e8:	2909      	cmp	r1, #9
 800f1ea:	d927      	bls.n	800f23c <_strtod_l+0x1a4>
 800f1ec:	4622      	mov	r2, r4
 800f1ee:	4639      	mov	r1, r7
 800f1f0:	f003 f852 	bl	8012298 <strncmp>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d033      	beq.n	800f260 <_strtod_l+0x1c8>
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	462a      	mov	r2, r5
 800f1fc:	465c      	mov	r4, fp
 800f1fe:	4603      	mov	r3, r0
 800f200:	9004      	str	r0, [sp, #16]
 800f202:	2a65      	cmp	r2, #101	; 0x65
 800f204:	d001      	beq.n	800f20a <_strtod_l+0x172>
 800f206:	2a45      	cmp	r2, #69	; 0x45
 800f208:	d114      	bne.n	800f234 <_strtod_l+0x19c>
 800f20a:	b91c      	cbnz	r4, 800f214 <_strtod_l+0x17c>
 800f20c:	9a07      	ldr	r2, [sp, #28]
 800f20e:	4302      	orrs	r2, r0
 800f210:	d09f      	beq.n	800f152 <_strtod_l+0xba>
 800f212:	2400      	movs	r4, #0
 800f214:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800f216:	1c72      	adds	r2, r6, #1
 800f218:	9219      	str	r2, [sp, #100]	; 0x64
 800f21a:	7872      	ldrb	r2, [r6, #1]
 800f21c:	2a2b      	cmp	r2, #43	; 0x2b
 800f21e:	d079      	beq.n	800f314 <_strtod_l+0x27c>
 800f220:	2a2d      	cmp	r2, #45	; 0x2d
 800f222:	f000 8083 	beq.w	800f32c <_strtod_l+0x294>
 800f226:	2700      	movs	r7, #0
 800f228:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f22c:	2909      	cmp	r1, #9
 800f22e:	f240 8083 	bls.w	800f338 <_strtod_l+0x2a0>
 800f232:	9619      	str	r6, [sp, #100]	; 0x64
 800f234:	2500      	movs	r5, #0
 800f236:	e09f      	b.n	800f378 <_strtod_l+0x2e0>
 800f238:	2300      	movs	r3, #0
 800f23a:	e7c8      	b.n	800f1ce <_strtod_l+0x136>
 800f23c:	f1bb 0f08 	cmp.w	fp, #8
 800f240:	bfd5      	itete	le
 800f242:	9906      	ldrle	r1, [sp, #24]
 800f244:	9905      	ldrgt	r1, [sp, #20]
 800f246:	fb02 3301 	mlale	r3, r2, r1, r3
 800f24a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f24e:	f100 0001 	add.w	r0, r0, #1
 800f252:	bfd4      	ite	le
 800f254:	9306      	strle	r3, [sp, #24]
 800f256:	9305      	strgt	r3, [sp, #20]
 800f258:	f10b 0b01 	add.w	fp, fp, #1
 800f25c:	9019      	str	r0, [sp, #100]	; 0x64
 800f25e:	e7be      	b.n	800f1de <_strtod_l+0x146>
 800f260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f262:	191a      	adds	r2, r3, r4
 800f264:	9219      	str	r2, [sp, #100]	; 0x64
 800f266:	5d1a      	ldrb	r2, [r3, r4]
 800f268:	f1bb 0f00 	cmp.w	fp, #0
 800f26c:	d036      	beq.n	800f2dc <_strtod_l+0x244>
 800f26e:	465c      	mov	r4, fp
 800f270:	9004      	str	r0, [sp, #16]
 800f272:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f276:	2b09      	cmp	r3, #9
 800f278:	d912      	bls.n	800f2a0 <_strtod_l+0x208>
 800f27a:	2301      	movs	r3, #1
 800f27c:	e7c1      	b.n	800f202 <_strtod_l+0x16a>
 800f27e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f280:	3001      	adds	r0, #1
 800f282:	1c5a      	adds	r2, r3, #1
 800f284:	9219      	str	r2, [sp, #100]	; 0x64
 800f286:	785a      	ldrb	r2, [r3, #1]
 800f288:	2a30      	cmp	r2, #48	; 0x30
 800f28a:	d0f8      	beq.n	800f27e <_strtod_l+0x1e6>
 800f28c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f290:	2b08      	cmp	r3, #8
 800f292:	f200 84d5 	bhi.w	800fc40 <_strtod_l+0xba8>
 800f296:	9004      	str	r0, [sp, #16]
 800f298:	2000      	movs	r0, #0
 800f29a:	4604      	mov	r4, r0
 800f29c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f29e:	9308      	str	r3, [sp, #32]
 800f2a0:	3a30      	subs	r2, #48	; 0x30
 800f2a2:	f100 0301 	add.w	r3, r0, #1
 800f2a6:	d013      	beq.n	800f2d0 <_strtod_l+0x238>
 800f2a8:	9904      	ldr	r1, [sp, #16]
 800f2aa:	1905      	adds	r5, r0, r4
 800f2ac:	4419      	add	r1, r3
 800f2ae:	9104      	str	r1, [sp, #16]
 800f2b0:	4623      	mov	r3, r4
 800f2b2:	210a      	movs	r1, #10
 800f2b4:	42ab      	cmp	r3, r5
 800f2b6:	d113      	bne.n	800f2e0 <_strtod_l+0x248>
 800f2b8:	1823      	adds	r3, r4, r0
 800f2ba:	2b08      	cmp	r3, #8
 800f2bc:	f104 0401 	add.w	r4, r4, #1
 800f2c0:	4404      	add	r4, r0
 800f2c2:	dc1b      	bgt.n	800f2fc <_strtod_l+0x264>
 800f2c4:	230a      	movs	r3, #10
 800f2c6:	9906      	ldr	r1, [sp, #24]
 800f2c8:	fb03 2301 	mla	r3, r3, r1, r2
 800f2cc:	9306      	str	r3, [sp, #24]
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	1c51      	adds	r1, r2, #1
 800f2d6:	9119      	str	r1, [sp, #100]	; 0x64
 800f2d8:	7852      	ldrb	r2, [r2, #1]
 800f2da:	e7ca      	b.n	800f272 <_strtod_l+0x1da>
 800f2dc:	4658      	mov	r0, fp
 800f2de:	e7d3      	b.n	800f288 <_strtod_l+0x1f0>
 800f2e0:	2b08      	cmp	r3, #8
 800f2e2:	dc04      	bgt.n	800f2ee <_strtod_l+0x256>
 800f2e4:	9f06      	ldr	r7, [sp, #24]
 800f2e6:	434f      	muls	r7, r1
 800f2e8:	9706      	str	r7, [sp, #24]
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	e7e2      	b.n	800f2b4 <_strtod_l+0x21c>
 800f2ee:	1c5f      	adds	r7, r3, #1
 800f2f0:	2f10      	cmp	r7, #16
 800f2f2:	bfde      	ittt	le
 800f2f4:	9f05      	ldrle	r7, [sp, #20]
 800f2f6:	434f      	mulle	r7, r1
 800f2f8:	9705      	strle	r7, [sp, #20]
 800f2fa:	e7f6      	b.n	800f2ea <_strtod_l+0x252>
 800f2fc:	2c10      	cmp	r4, #16
 800f2fe:	bfdf      	itttt	le
 800f300:	230a      	movle	r3, #10
 800f302:	9905      	ldrle	r1, [sp, #20]
 800f304:	fb03 2301 	mlale	r3, r3, r1, r2
 800f308:	9305      	strle	r3, [sp, #20]
 800f30a:	e7e0      	b.n	800f2ce <_strtod_l+0x236>
 800f30c:	2300      	movs	r3, #0
 800f30e:	9304      	str	r3, [sp, #16]
 800f310:	2301      	movs	r3, #1
 800f312:	e77b      	b.n	800f20c <_strtod_l+0x174>
 800f314:	2700      	movs	r7, #0
 800f316:	1cb2      	adds	r2, r6, #2
 800f318:	9219      	str	r2, [sp, #100]	; 0x64
 800f31a:	78b2      	ldrb	r2, [r6, #2]
 800f31c:	e784      	b.n	800f228 <_strtod_l+0x190>
 800f31e:	bf00      	nop
 800f320:	08012f58 	.word	0x08012f58
 800f324:	08012d74 	.word	0x08012d74
 800f328:	7ff00000 	.word	0x7ff00000
 800f32c:	2701      	movs	r7, #1
 800f32e:	e7f2      	b.n	800f316 <_strtod_l+0x27e>
 800f330:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f332:	1c51      	adds	r1, r2, #1
 800f334:	9119      	str	r1, [sp, #100]	; 0x64
 800f336:	7852      	ldrb	r2, [r2, #1]
 800f338:	2a30      	cmp	r2, #48	; 0x30
 800f33a:	d0f9      	beq.n	800f330 <_strtod_l+0x298>
 800f33c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f340:	2908      	cmp	r1, #8
 800f342:	f63f af77 	bhi.w	800f234 <_strtod_l+0x19c>
 800f346:	f04f 0e0a 	mov.w	lr, #10
 800f34a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f34e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f350:	9209      	str	r2, [sp, #36]	; 0x24
 800f352:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f354:	1c51      	adds	r1, r2, #1
 800f356:	9119      	str	r1, [sp, #100]	; 0x64
 800f358:	7852      	ldrb	r2, [r2, #1]
 800f35a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f35e:	2d09      	cmp	r5, #9
 800f360:	d935      	bls.n	800f3ce <_strtod_l+0x336>
 800f362:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f364:	1b49      	subs	r1, r1, r5
 800f366:	2908      	cmp	r1, #8
 800f368:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f36c:	dc02      	bgt.n	800f374 <_strtod_l+0x2dc>
 800f36e:	4565      	cmp	r5, ip
 800f370:	bfa8      	it	ge
 800f372:	4665      	movge	r5, ip
 800f374:	b107      	cbz	r7, 800f378 <_strtod_l+0x2e0>
 800f376:	426d      	negs	r5, r5
 800f378:	2c00      	cmp	r4, #0
 800f37a:	d14c      	bne.n	800f416 <_strtod_l+0x37e>
 800f37c:	9907      	ldr	r1, [sp, #28]
 800f37e:	4301      	orrs	r1, r0
 800f380:	f47f aecb 	bne.w	800f11a <_strtod_l+0x82>
 800f384:	2b00      	cmp	r3, #0
 800f386:	f47f aee4 	bne.w	800f152 <_strtod_l+0xba>
 800f38a:	2a69      	cmp	r2, #105	; 0x69
 800f38c:	d026      	beq.n	800f3dc <_strtod_l+0x344>
 800f38e:	dc23      	bgt.n	800f3d8 <_strtod_l+0x340>
 800f390:	2a49      	cmp	r2, #73	; 0x49
 800f392:	d023      	beq.n	800f3dc <_strtod_l+0x344>
 800f394:	2a4e      	cmp	r2, #78	; 0x4e
 800f396:	f47f aedc 	bne.w	800f152 <_strtod_l+0xba>
 800f39a:	499d      	ldr	r1, [pc, #628]	; (800f610 <_strtod_l+0x578>)
 800f39c:	a819      	add	r0, sp, #100	; 0x64
 800f39e:	f001 fe2d 	bl	8010ffc <__match>
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	f43f aed5 	beq.w	800f152 <_strtod_l+0xba>
 800f3a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	2b28      	cmp	r3, #40	; 0x28
 800f3ae:	d12c      	bne.n	800f40a <_strtod_l+0x372>
 800f3b0:	4998      	ldr	r1, [pc, #608]	; (800f614 <_strtod_l+0x57c>)
 800f3b2:	aa1c      	add	r2, sp, #112	; 0x70
 800f3b4:	a819      	add	r0, sp, #100	; 0x64
 800f3b6:	f001 fe35 	bl	8011024 <__hexnan>
 800f3ba:	2805      	cmp	r0, #5
 800f3bc:	d125      	bne.n	800f40a <_strtod_l+0x372>
 800f3be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f3c0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800f3c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f3c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f3cc:	e6a5      	b.n	800f11a <_strtod_l+0x82>
 800f3ce:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800f3d2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800f3d6:	e7bc      	b.n	800f352 <_strtod_l+0x2ba>
 800f3d8:	2a6e      	cmp	r2, #110	; 0x6e
 800f3da:	e7dc      	b.n	800f396 <_strtod_l+0x2fe>
 800f3dc:	498e      	ldr	r1, [pc, #568]	; (800f618 <_strtod_l+0x580>)
 800f3de:	a819      	add	r0, sp, #100	; 0x64
 800f3e0:	f001 fe0c 	bl	8010ffc <__match>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	f43f aeb4 	beq.w	800f152 <_strtod_l+0xba>
 800f3ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f3ec:	498b      	ldr	r1, [pc, #556]	; (800f61c <_strtod_l+0x584>)
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	a819      	add	r0, sp, #100	; 0x64
 800f3f2:	9319      	str	r3, [sp, #100]	; 0x64
 800f3f4:	f001 fe02 	bl	8010ffc <__match>
 800f3f8:	b910      	cbnz	r0, 800f400 <_strtod_l+0x368>
 800f3fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	9319      	str	r3, [sp, #100]	; 0x64
 800f400:	f04f 0800 	mov.w	r8, #0
 800f404:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800f620 <_strtod_l+0x588>
 800f408:	e687      	b.n	800f11a <_strtod_l+0x82>
 800f40a:	4886      	ldr	r0, [pc, #536]	; (800f624 <_strtod_l+0x58c>)
 800f40c:	f002 ff2e 	bl	801226c <nan>
 800f410:	4680      	mov	r8, r0
 800f412:	4689      	mov	r9, r1
 800f414:	e681      	b.n	800f11a <_strtod_l+0x82>
 800f416:	9b04      	ldr	r3, [sp, #16]
 800f418:	f1bb 0f00 	cmp.w	fp, #0
 800f41c:	bf08      	it	eq
 800f41e:	46a3      	moveq	fp, r4
 800f420:	1aeb      	subs	r3, r5, r3
 800f422:	2c10      	cmp	r4, #16
 800f424:	9806      	ldr	r0, [sp, #24]
 800f426:	4626      	mov	r6, r4
 800f428:	9307      	str	r3, [sp, #28]
 800f42a:	bfa8      	it	ge
 800f42c:	2610      	movge	r6, #16
 800f42e:	f7f0 fffb 	bl	8000428 <__aeabi_ui2d>
 800f432:	2c09      	cmp	r4, #9
 800f434:	4680      	mov	r8, r0
 800f436:	4689      	mov	r9, r1
 800f438:	dd13      	ble.n	800f462 <_strtod_l+0x3ca>
 800f43a:	4b7b      	ldr	r3, [pc, #492]	; (800f628 <_strtod_l+0x590>)
 800f43c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f440:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f444:	f7f1 f86a 	bl	800051c <__aeabi_dmul>
 800f448:	4680      	mov	r8, r0
 800f44a:	9805      	ldr	r0, [sp, #20]
 800f44c:	4689      	mov	r9, r1
 800f44e:	f7f0 ffeb 	bl	8000428 <__aeabi_ui2d>
 800f452:	4602      	mov	r2, r0
 800f454:	460b      	mov	r3, r1
 800f456:	4640      	mov	r0, r8
 800f458:	4649      	mov	r1, r9
 800f45a:	f7f0 fea9 	bl	80001b0 <__adddf3>
 800f45e:	4680      	mov	r8, r0
 800f460:	4689      	mov	r9, r1
 800f462:	2c0f      	cmp	r4, #15
 800f464:	dc36      	bgt.n	800f4d4 <_strtod_l+0x43c>
 800f466:	9b07      	ldr	r3, [sp, #28]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	f43f ae56 	beq.w	800f11a <_strtod_l+0x82>
 800f46e:	dd22      	ble.n	800f4b6 <_strtod_l+0x41e>
 800f470:	2b16      	cmp	r3, #22
 800f472:	dc09      	bgt.n	800f488 <_strtod_l+0x3f0>
 800f474:	496c      	ldr	r1, [pc, #432]	; (800f628 <_strtod_l+0x590>)
 800f476:	4642      	mov	r2, r8
 800f478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f47c:	464b      	mov	r3, r9
 800f47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f482:	f7f1 f84b 	bl	800051c <__aeabi_dmul>
 800f486:	e7c3      	b.n	800f410 <_strtod_l+0x378>
 800f488:	9a07      	ldr	r2, [sp, #28]
 800f48a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f48e:	4293      	cmp	r3, r2
 800f490:	db20      	blt.n	800f4d4 <_strtod_l+0x43c>
 800f492:	4d65      	ldr	r5, [pc, #404]	; (800f628 <_strtod_l+0x590>)
 800f494:	f1c4 040f 	rsb	r4, r4, #15
 800f498:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f49c:	4642      	mov	r2, r8
 800f49e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4a2:	464b      	mov	r3, r9
 800f4a4:	f7f1 f83a 	bl	800051c <__aeabi_dmul>
 800f4a8:	9b07      	ldr	r3, [sp, #28]
 800f4aa:	1b1c      	subs	r4, r3, r4
 800f4ac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f4b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f4b4:	e7e5      	b.n	800f482 <_strtod_l+0x3ea>
 800f4b6:	9b07      	ldr	r3, [sp, #28]
 800f4b8:	3316      	adds	r3, #22
 800f4ba:	db0b      	blt.n	800f4d4 <_strtod_l+0x43c>
 800f4bc:	9b04      	ldr	r3, [sp, #16]
 800f4be:	4640      	mov	r0, r8
 800f4c0:	1b5d      	subs	r5, r3, r5
 800f4c2:	4b59      	ldr	r3, [pc, #356]	; (800f628 <_strtod_l+0x590>)
 800f4c4:	4649      	mov	r1, r9
 800f4c6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f4ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f4ce:	f7f1 f94f 	bl	8000770 <__aeabi_ddiv>
 800f4d2:	e79d      	b.n	800f410 <_strtod_l+0x378>
 800f4d4:	9b07      	ldr	r3, [sp, #28]
 800f4d6:	1ba6      	subs	r6, r4, r6
 800f4d8:	441e      	add	r6, r3
 800f4da:	2e00      	cmp	r6, #0
 800f4dc:	dd74      	ble.n	800f5c8 <_strtod_l+0x530>
 800f4de:	f016 030f 	ands.w	r3, r6, #15
 800f4e2:	d00a      	beq.n	800f4fa <_strtod_l+0x462>
 800f4e4:	4950      	ldr	r1, [pc, #320]	; (800f628 <_strtod_l+0x590>)
 800f4e6:	4642      	mov	r2, r8
 800f4e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f4ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4f0:	464b      	mov	r3, r9
 800f4f2:	f7f1 f813 	bl	800051c <__aeabi_dmul>
 800f4f6:	4680      	mov	r8, r0
 800f4f8:	4689      	mov	r9, r1
 800f4fa:	f036 060f 	bics.w	r6, r6, #15
 800f4fe:	d052      	beq.n	800f5a6 <_strtod_l+0x50e>
 800f500:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800f504:	dd27      	ble.n	800f556 <_strtod_l+0x4be>
 800f506:	f04f 0b00 	mov.w	fp, #0
 800f50a:	f8cd b010 	str.w	fp, [sp, #16]
 800f50e:	f8cd b020 	str.w	fp, [sp, #32]
 800f512:	f8cd b018 	str.w	fp, [sp, #24]
 800f516:	2322      	movs	r3, #34	; 0x22
 800f518:	f04f 0800 	mov.w	r8, #0
 800f51c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800f620 <_strtod_l+0x588>
 800f520:	f8ca 3000 	str.w	r3, [sl]
 800f524:	9b08      	ldr	r3, [sp, #32]
 800f526:	2b00      	cmp	r3, #0
 800f528:	f43f adf7 	beq.w	800f11a <_strtod_l+0x82>
 800f52c:	4650      	mov	r0, sl
 800f52e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f530:	f001 fe80 	bl	8011234 <_Bfree>
 800f534:	4650      	mov	r0, sl
 800f536:	9906      	ldr	r1, [sp, #24]
 800f538:	f001 fe7c 	bl	8011234 <_Bfree>
 800f53c:	4650      	mov	r0, sl
 800f53e:	9904      	ldr	r1, [sp, #16]
 800f540:	f001 fe78 	bl	8011234 <_Bfree>
 800f544:	4650      	mov	r0, sl
 800f546:	9908      	ldr	r1, [sp, #32]
 800f548:	f001 fe74 	bl	8011234 <_Bfree>
 800f54c:	4659      	mov	r1, fp
 800f54e:	4650      	mov	r0, sl
 800f550:	f001 fe70 	bl	8011234 <_Bfree>
 800f554:	e5e1      	b.n	800f11a <_strtod_l+0x82>
 800f556:	4b35      	ldr	r3, [pc, #212]	; (800f62c <_strtod_l+0x594>)
 800f558:	4640      	mov	r0, r8
 800f55a:	9305      	str	r3, [sp, #20]
 800f55c:	2300      	movs	r3, #0
 800f55e:	4649      	mov	r1, r9
 800f560:	461f      	mov	r7, r3
 800f562:	1136      	asrs	r6, r6, #4
 800f564:	2e01      	cmp	r6, #1
 800f566:	dc21      	bgt.n	800f5ac <_strtod_l+0x514>
 800f568:	b10b      	cbz	r3, 800f56e <_strtod_l+0x4d6>
 800f56a:	4680      	mov	r8, r0
 800f56c:	4689      	mov	r9, r1
 800f56e:	4b2f      	ldr	r3, [pc, #188]	; (800f62c <_strtod_l+0x594>)
 800f570:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f574:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f578:	4642      	mov	r2, r8
 800f57a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f57e:	464b      	mov	r3, r9
 800f580:	f7f0 ffcc 	bl	800051c <__aeabi_dmul>
 800f584:	4b26      	ldr	r3, [pc, #152]	; (800f620 <_strtod_l+0x588>)
 800f586:	460a      	mov	r2, r1
 800f588:	400b      	ands	r3, r1
 800f58a:	4929      	ldr	r1, [pc, #164]	; (800f630 <_strtod_l+0x598>)
 800f58c:	4680      	mov	r8, r0
 800f58e:	428b      	cmp	r3, r1
 800f590:	d8b9      	bhi.n	800f506 <_strtod_l+0x46e>
 800f592:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f596:	428b      	cmp	r3, r1
 800f598:	bf86      	itte	hi
 800f59a:	f04f 38ff 	movhi.w	r8, #4294967295
 800f59e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800f634 <_strtod_l+0x59c>
 800f5a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	9305      	str	r3, [sp, #20]
 800f5aa:	e07f      	b.n	800f6ac <_strtod_l+0x614>
 800f5ac:	07f2      	lsls	r2, r6, #31
 800f5ae:	d505      	bpl.n	800f5bc <_strtod_l+0x524>
 800f5b0:	9b05      	ldr	r3, [sp, #20]
 800f5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b6:	f7f0 ffb1 	bl	800051c <__aeabi_dmul>
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	9a05      	ldr	r2, [sp, #20]
 800f5be:	3701      	adds	r7, #1
 800f5c0:	3208      	adds	r2, #8
 800f5c2:	1076      	asrs	r6, r6, #1
 800f5c4:	9205      	str	r2, [sp, #20]
 800f5c6:	e7cd      	b.n	800f564 <_strtod_l+0x4cc>
 800f5c8:	d0ed      	beq.n	800f5a6 <_strtod_l+0x50e>
 800f5ca:	4276      	negs	r6, r6
 800f5cc:	f016 020f 	ands.w	r2, r6, #15
 800f5d0:	d00a      	beq.n	800f5e8 <_strtod_l+0x550>
 800f5d2:	4b15      	ldr	r3, [pc, #84]	; (800f628 <_strtod_l+0x590>)
 800f5d4:	4640      	mov	r0, r8
 800f5d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5da:	4649      	mov	r1, r9
 800f5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e0:	f7f1 f8c6 	bl	8000770 <__aeabi_ddiv>
 800f5e4:	4680      	mov	r8, r0
 800f5e6:	4689      	mov	r9, r1
 800f5e8:	1136      	asrs	r6, r6, #4
 800f5ea:	d0dc      	beq.n	800f5a6 <_strtod_l+0x50e>
 800f5ec:	2e1f      	cmp	r6, #31
 800f5ee:	dd23      	ble.n	800f638 <_strtod_l+0x5a0>
 800f5f0:	f04f 0b00 	mov.w	fp, #0
 800f5f4:	f8cd b010 	str.w	fp, [sp, #16]
 800f5f8:	f8cd b020 	str.w	fp, [sp, #32]
 800f5fc:	f8cd b018 	str.w	fp, [sp, #24]
 800f600:	2322      	movs	r3, #34	; 0x22
 800f602:	f04f 0800 	mov.w	r8, #0
 800f606:	f04f 0900 	mov.w	r9, #0
 800f60a:	f8ca 3000 	str.w	r3, [sl]
 800f60e:	e789      	b.n	800f524 <_strtod_l+0x48c>
 800f610:	08012d4d 	.word	0x08012d4d
 800f614:	08012d88 	.word	0x08012d88
 800f618:	08012d45 	.word	0x08012d45
 800f61c:	08012e7b 	.word	0x08012e7b
 800f620:	7ff00000 	.word	0x7ff00000
 800f624:	08012e77 	.word	0x08012e77
 800f628:	08012ff0 	.word	0x08012ff0
 800f62c:	08012fc8 	.word	0x08012fc8
 800f630:	7ca00000 	.word	0x7ca00000
 800f634:	7fefffff 	.word	0x7fefffff
 800f638:	f016 0310 	ands.w	r3, r6, #16
 800f63c:	bf18      	it	ne
 800f63e:	236a      	movne	r3, #106	; 0x6a
 800f640:	4640      	mov	r0, r8
 800f642:	9305      	str	r3, [sp, #20]
 800f644:	4649      	mov	r1, r9
 800f646:	2300      	movs	r3, #0
 800f648:	4fb0      	ldr	r7, [pc, #704]	; (800f90c <_strtod_l+0x874>)
 800f64a:	07f2      	lsls	r2, r6, #31
 800f64c:	d504      	bpl.n	800f658 <_strtod_l+0x5c0>
 800f64e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f652:	f7f0 ff63 	bl	800051c <__aeabi_dmul>
 800f656:	2301      	movs	r3, #1
 800f658:	1076      	asrs	r6, r6, #1
 800f65a:	f107 0708 	add.w	r7, r7, #8
 800f65e:	d1f4      	bne.n	800f64a <_strtod_l+0x5b2>
 800f660:	b10b      	cbz	r3, 800f666 <_strtod_l+0x5ce>
 800f662:	4680      	mov	r8, r0
 800f664:	4689      	mov	r9, r1
 800f666:	9b05      	ldr	r3, [sp, #20]
 800f668:	b1c3      	cbz	r3, 800f69c <_strtod_l+0x604>
 800f66a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800f66e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f672:	2b00      	cmp	r3, #0
 800f674:	4649      	mov	r1, r9
 800f676:	dd11      	ble.n	800f69c <_strtod_l+0x604>
 800f678:	2b1f      	cmp	r3, #31
 800f67a:	f340 8127 	ble.w	800f8cc <_strtod_l+0x834>
 800f67e:	2b34      	cmp	r3, #52	; 0x34
 800f680:	bfd8      	it	le
 800f682:	f04f 33ff 	movle.w	r3, #4294967295
 800f686:	f04f 0800 	mov.w	r8, #0
 800f68a:	bfcf      	iteee	gt
 800f68c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f690:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f694:	fa03 f202 	lslle.w	r2, r3, r2
 800f698:	ea02 0901 	andle.w	r9, r2, r1
 800f69c:	2200      	movs	r2, #0
 800f69e:	2300      	movs	r3, #0
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	4649      	mov	r1, r9
 800f6a4:	f7f1 f9a2 	bl	80009ec <__aeabi_dcmpeq>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d1a1      	bne.n	800f5f0 <_strtod_l+0x558>
 800f6ac:	9b06      	ldr	r3, [sp, #24]
 800f6ae:	465a      	mov	r2, fp
 800f6b0:	9300      	str	r3, [sp, #0]
 800f6b2:	4650      	mov	r0, sl
 800f6b4:	4623      	mov	r3, r4
 800f6b6:	9908      	ldr	r1, [sp, #32]
 800f6b8:	f001 fe24 	bl	8011304 <__s2b>
 800f6bc:	9008      	str	r0, [sp, #32]
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	f43f af21 	beq.w	800f506 <_strtod_l+0x46e>
 800f6c4:	9b04      	ldr	r3, [sp, #16]
 800f6c6:	f04f 0b00 	mov.w	fp, #0
 800f6ca:	1b5d      	subs	r5, r3, r5
 800f6cc:	9b07      	ldr	r3, [sp, #28]
 800f6ce:	f8cd b010 	str.w	fp, [sp, #16]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	bfb4      	ite	lt
 800f6d6:	462b      	movlt	r3, r5
 800f6d8:	2300      	movge	r3, #0
 800f6da:	930e      	str	r3, [sp, #56]	; 0x38
 800f6dc:	9b07      	ldr	r3, [sp, #28]
 800f6de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f6e2:	9314      	str	r3, [sp, #80]	; 0x50
 800f6e4:	9b08      	ldr	r3, [sp, #32]
 800f6e6:	4650      	mov	r0, sl
 800f6e8:	6859      	ldr	r1, [r3, #4]
 800f6ea:	f001 fd63 	bl	80111b4 <_Balloc>
 800f6ee:	9006      	str	r0, [sp, #24]
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	f43f af10 	beq.w	800f516 <_strtod_l+0x47e>
 800f6f6:	9b08      	ldr	r3, [sp, #32]
 800f6f8:	300c      	adds	r0, #12
 800f6fa:	691a      	ldr	r2, [r3, #16]
 800f6fc:	f103 010c 	add.w	r1, r3, #12
 800f700:	3202      	adds	r2, #2
 800f702:	0092      	lsls	r2, r2, #2
 800f704:	f7ff f806 	bl	800e714 <memcpy>
 800f708:	ab1c      	add	r3, sp, #112	; 0x70
 800f70a:	9301      	str	r3, [sp, #4]
 800f70c:	ab1b      	add	r3, sp, #108	; 0x6c
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	4642      	mov	r2, r8
 800f712:	464b      	mov	r3, r9
 800f714:	4650      	mov	r0, sl
 800f716:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800f71a:	f002 f935 	bl	8011988 <__d2b>
 800f71e:	901a      	str	r0, [sp, #104]	; 0x68
 800f720:	2800      	cmp	r0, #0
 800f722:	f43f aef8 	beq.w	800f516 <_strtod_l+0x47e>
 800f726:	2101      	movs	r1, #1
 800f728:	4650      	mov	r0, sl
 800f72a:	f001 fe83 	bl	8011434 <__i2b>
 800f72e:	4603      	mov	r3, r0
 800f730:	9004      	str	r0, [sp, #16]
 800f732:	2800      	cmp	r0, #0
 800f734:	f43f aeef 	beq.w	800f516 <_strtod_l+0x47e>
 800f738:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f73a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f73c:	2d00      	cmp	r5, #0
 800f73e:	bfab      	itete	ge
 800f740:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f742:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800f744:	18ee      	addge	r6, r5, r3
 800f746:	1b5c      	sublt	r4, r3, r5
 800f748:	9b05      	ldr	r3, [sp, #20]
 800f74a:	bfa8      	it	ge
 800f74c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800f74e:	eba5 0503 	sub.w	r5, r5, r3
 800f752:	4415      	add	r5, r2
 800f754:	4b6e      	ldr	r3, [pc, #440]	; (800f910 <_strtod_l+0x878>)
 800f756:	f105 35ff 	add.w	r5, r5, #4294967295
 800f75a:	bfb8      	it	lt
 800f75c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800f75e:	429d      	cmp	r5, r3
 800f760:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f764:	f280 80c4 	bge.w	800f8f0 <_strtod_l+0x858>
 800f768:	1b5b      	subs	r3, r3, r5
 800f76a:	2b1f      	cmp	r3, #31
 800f76c:	f04f 0701 	mov.w	r7, #1
 800f770:	eba2 0203 	sub.w	r2, r2, r3
 800f774:	f300 80b1 	bgt.w	800f8da <_strtod_l+0x842>
 800f778:	2500      	movs	r5, #0
 800f77a:	fa07 f303 	lsl.w	r3, r7, r3
 800f77e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f780:	18b7      	adds	r7, r6, r2
 800f782:	9b05      	ldr	r3, [sp, #20]
 800f784:	42be      	cmp	r6, r7
 800f786:	4414      	add	r4, r2
 800f788:	441c      	add	r4, r3
 800f78a:	4633      	mov	r3, r6
 800f78c:	bfa8      	it	ge
 800f78e:	463b      	movge	r3, r7
 800f790:	42a3      	cmp	r3, r4
 800f792:	bfa8      	it	ge
 800f794:	4623      	movge	r3, r4
 800f796:	2b00      	cmp	r3, #0
 800f798:	bfc2      	ittt	gt
 800f79a:	1aff      	subgt	r7, r7, r3
 800f79c:	1ae4      	subgt	r4, r4, r3
 800f79e:	1af6      	subgt	r6, r6, r3
 800f7a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	dd17      	ble.n	800f7d6 <_strtod_l+0x73e>
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	4650      	mov	r0, sl
 800f7aa:	9904      	ldr	r1, [sp, #16]
 800f7ac:	f001 ff00 	bl	80115b0 <__pow5mult>
 800f7b0:	9004      	str	r0, [sp, #16]
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	f43f aeaf 	beq.w	800f516 <_strtod_l+0x47e>
 800f7b8:	4601      	mov	r1, r0
 800f7ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f7bc:	4650      	mov	r0, sl
 800f7be:	f001 fe4f 	bl	8011460 <__multiply>
 800f7c2:	9009      	str	r0, [sp, #36]	; 0x24
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	f43f aea6 	beq.w	800f516 <_strtod_l+0x47e>
 800f7ca:	4650      	mov	r0, sl
 800f7cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f7ce:	f001 fd31 	bl	8011234 <_Bfree>
 800f7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7d4:	931a      	str	r3, [sp, #104]	; 0x68
 800f7d6:	2f00      	cmp	r7, #0
 800f7d8:	f300 808e 	bgt.w	800f8f8 <_strtod_l+0x860>
 800f7dc:	9b07      	ldr	r3, [sp, #28]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	dd08      	ble.n	800f7f4 <_strtod_l+0x75c>
 800f7e2:	4650      	mov	r0, sl
 800f7e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f7e6:	9906      	ldr	r1, [sp, #24]
 800f7e8:	f001 fee2 	bl	80115b0 <__pow5mult>
 800f7ec:	9006      	str	r0, [sp, #24]
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	f43f ae91 	beq.w	800f516 <_strtod_l+0x47e>
 800f7f4:	2c00      	cmp	r4, #0
 800f7f6:	dd08      	ble.n	800f80a <_strtod_l+0x772>
 800f7f8:	4622      	mov	r2, r4
 800f7fa:	4650      	mov	r0, sl
 800f7fc:	9906      	ldr	r1, [sp, #24]
 800f7fe:	f001 ff31 	bl	8011664 <__lshift>
 800f802:	9006      	str	r0, [sp, #24]
 800f804:	2800      	cmp	r0, #0
 800f806:	f43f ae86 	beq.w	800f516 <_strtod_l+0x47e>
 800f80a:	2e00      	cmp	r6, #0
 800f80c:	dd08      	ble.n	800f820 <_strtod_l+0x788>
 800f80e:	4632      	mov	r2, r6
 800f810:	4650      	mov	r0, sl
 800f812:	9904      	ldr	r1, [sp, #16]
 800f814:	f001 ff26 	bl	8011664 <__lshift>
 800f818:	9004      	str	r0, [sp, #16]
 800f81a:	2800      	cmp	r0, #0
 800f81c:	f43f ae7b 	beq.w	800f516 <_strtod_l+0x47e>
 800f820:	4650      	mov	r0, sl
 800f822:	9a06      	ldr	r2, [sp, #24]
 800f824:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f826:	f001 ffa9 	bl	801177c <__mdiff>
 800f82a:	4683      	mov	fp, r0
 800f82c:	2800      	cmp	r0, #0
 800f82e:	f43f ae72 	beq.w	800f516 <_strtod_l+0x47e>
 800f832:	2400      	movs	r4, #0
 800f834:	68c3      	ldr	r3, [r0, #12]
 800f836:	9904      	ldr	r1, [sp, #16]
 800f838:	60c4      	str	r4, [r0, #12]
 800f83a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f83c:	f001 ff82 	bl	8011744 <__mcmp>
 800f840:	42a0      	cmp	r0, r4
 800f842:	da6b      	bge.n	800f91c <_strtod_l+0x884>
 800f844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f846:	ea53 0308 	orrs.w	r3, r3, r8
 800f84a:	f040 8091 	bne.w	800f970 <_strtod_l+0x8d8>
 800f84e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f852:	2b00      	cmp	r3, #0
 800f854:	f040 808c 	bne.w	800f970 <_strtod_l+0x8d8>
 800f858:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f85c:	0d1b      	lsrs	r3, r3, #20
 800f85e:	051b      	lsls	r3, r3, #20
 800f860:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f864:	f240 8084 	bls.w	800f970 <_strtod_l+0x8d8>
 800f868:	f8db 3014 	ldr.w	r3, [fp, #20]
 800f86c:	b91b      	cbnz	r3, 800f876 <_strtod_l+0x7de>
 800f86e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f872:	2b01      	cmp	r3, #1
 800f874:	dd7c      	ble.n	800f970 <_strtod_l+0x8d8>
 800f876:	4659      	mov	r1, fp
 800f878:	2201      	movs	r2, #1
 800f87a:	4650      	mov	r0, sl
 800f87c:	f001 fef2 	bl	8011664 <__lshift>
 800f880:	9904      	ldr	r1, [sp, #16]
 800f882:	4683      	mov	fp, r0
 800f884:	f001 ff5e 	bl	8011744 <__mcmp>
 800f888:	2800      	cmp	r0, #0
 800f88a:	dd71      	ble.n	800f970 <_strtod_l+0x8d8>
 800f88c:	9905      	ldr	r1, [sp, #20]
 800f88e:	464b      	mov	r3, r9
 800f890:	4a20      	ldr	r2, [pc, #128]	; (800f914 <_strtod_l+0x87c>)
 800f892:	2900      	cmp	r1, #0
 800f894:	f000 808c 	beq.w	800f9b0 <_strtod_l+0x918>
 800f898:	ea02 0109 	and.w	r1, r2, r9
 800f89c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f8a0:	f300 8086 	bgt.w	800f9b0 <_strtod_l+0x918>
 800f8a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f8a8:	f77f aeaa 	ble.w	800f600 <_strtod_l+0x568>
 800f8ac:	4640      	mov	r0, r8
 800f8ae:	4649      	mov	r1, r9
 800f8b0:	4b19      	ldr	r3, [pc, #100]	; (800f918 <_strtod_l+0x880>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f7f0 fe32 	bl	800051c <__aeabi_dmul>
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	4303      	orrs	r3, r0
 800f8bc:	bf08      	it	eq
 800f8be:	2322      	moveq	r3, #34	; 0x22
 800f8c0:	4680      	mov	r8, r0
 800f8c2:	4689      	mov	r9, r1
 800f8c4:	bf08      	it	eq
 800f8c6:	f8ca 3000 	streq.w	r3, [sl]
 800f8ca:	e62f      	b.n	800f52c <_strtod_l+0x494>
 800f8cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f8d4:	ea03 0808 	and.w	r8, r3, r8
 800f8d8:	e6e0      	b.n	800f69c <_strtod_l+0x604>
 800f8da:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800f8de:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800f8e2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800f8e6:	35e2      	adds	r5, #226	; 0xe2
 800f8e8:	fa07 f505 	lsl.w	r5, r7, r5
 800f8ec:	970f      	str	r7, [sp, #60]	; 0x3c
 800f8ee:	e747      	b.n	800f780 <_strtod_l+0x6e8>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	2500      	movs	r5, #0
 800f8f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8f6:	e743      	b.n	800f780 <_strtod_l+0x6e8>
 800f8f8:	463a      	mov	r2, r7
 800f8fa:	4650      	mov	r0, sl
 800f8fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f8fe:	f001 feb1 	bl	8011664 <__lshift>
 800f902:	901a      	str	r0, [sp, #104]	; 0x68
 800f904:	2800      	cmp	r0, #0
 800f906:	f47f af69 	bne.w	800f7dc <_strtod_l+0x744>
 800f90a:	e604      	b.n	800f516 <_strtod_l+0x47e>
 800f90c:	08012da0 	.word	0x08012da0
 800f910:	fffffc02 	.word	0xfffffc02
 800f914:	7ff00000 	.word	0x7ff00000
 800f918:	39500000 	.word	0x39500000
 800f91c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f920:	d165      	bne.n	800f9ee <_strtod_l+0x956>
 800f922:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f928:	b35a      	cbz	r2, 800f982 <_strtod_l+0x8ea>
 800f92a:	4a99      	ldr	r2, [pc, #612]	; (800fb90 <_strtod_l+0xaf8>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d12b      	bne.n	800f988 <_strtod_l+0x8f0>
 800f930:	9b05      	ldr	r3, [sp, #20]
 800f932:	4641      	mov	r1, r8
 800f934:	b303      	cbz	r3, 800f978 <_strtod_l+0x8e0>
 800f936:	464a      	mov	r2, r9
 800f938:	4b96      	ldr	r3, [pc, #600]	; (800fb94 <_strtod_l+0xafc>)
 800f93a:	4013      	ands	r3, r2
 800f93c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f940:	f04f 32ff 	mov.w	r2, #4294967295
 800f944:	d81b      	bhi.n	800f97e <_strtod_l+0x8e6>
 800f946:	0d1b      	lsrs	r3, r3, #20
 800f948:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f94c:	fa02 f303 	lsl.w	r3, r2, r3
 800f950:	4299      	cmp	r1, r3
 800f952:	d119      	bne.n	800f988 <_strtod_l+0x8f0>
 800f954:	4b90      	ldr	r3, [pc, #576]	; (800fb98 <_strtod_l+0xb00>)
 800f956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f958:	429a      	cmp	r2, r3
 800f95a:	d102      	bne.n	800f962 <_strtod_l+0x8ca>
 800f95c:	3101      	adds	r1, #1
 800f95e:	f43f adda 	beq.w	800f516 <_strtod_l+0x47e>
 800f962:	f04f 0800 	mov.w	r8, #0
 800f966:	4b8b      	ldr	r3, [pc, #556]	; (800fb94 <_strtod_l+0xafc>)
 800f968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f96a:	401a      	ands	r2, r3
 800f96c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800f970:	9b05      	ldr	r3, [sp, #20]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d19a      	bne.n	800f8ac <_strtod_l+0x814>
 800f976:	e5d9      	b.n	800f52c <_strtod_l+0x494>
 800f978:	f04f 33ff 	mov.w	r3, #4294967295
 800f97c:	e7e8      	b.n	800f950 <_strtod_l+0x8b8>
 800f97e:	4613      	mov	r3, r2
 800f980:	e7e6      	b.n	800f950 <_strtod_l+0x8b8>
 800f982:	ea53 0308 	orrs.w	r3, r3, r8
 800f986:	d081      	beq.n	800f88c <_strtod_l+0x7f4>
 800f988:	b1e5      	cbz	r5, 800f9c4 <_strtod_l+0x92c>
 800f98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f98c:	421d      	tst	r5, r3
 800f98e:	d0ef      	beq.n	800f970 <_strtod_l+0x8d8>
 800f990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f992:	4640      	mov	r0, r8
 800f994:	4649      	mov	r1, r9
 800f996:	9a05      	ldr	r2, [sp, #20]
 800f998:	b1c3      	cbz	r3, 800f9cc <_strtod_l+0x934>
 800f99a:	f7ff fb59 	bl	800f050 <sulp>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f9a6:	f7f0 fc03 	bl	80001b0 <__adddf3>
 800f9aa:	4680      	mov	r8, r0
 800f9ac:	4689      	mov	r9, r1
 800f9ae:	e7df      	b.n	800f970 <_strtod_l+0x8d8>
 800f9b0:	4013      	ands	r3, r2
 800f9b2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f9b6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f9ba:	f04f 38ff 	mov.w	r8, #4294967295
 800f9be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f9c2:	e7d5      	b.n	800f970 <_strtod_l+0x8d8>
 800f9c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9c6:	ea13 0f08 	tst.w	r3, r8
 800f9ca:	e7e0      	b.n	800f98e <_strtod_l+0x8f6>
 800f9cc:	f7ff fb40 	bl	800f050 <sulp>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f9d8:	f7f0 fbe8 	bl	80001ac <__aeabi_dsub>
 800f9dc:	2200      	movs	r2, #0
 800f9de:	2300      	movs	r3, #0
 800f9e0:	4680      	mov	r8, r0
 800f9e2:	4689      	mov	r9, r1
 800f9e4:	f7f1 f802 	bl	80009ec <__aeabi_dcmpeq>
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	d0c1      	beq.n	800f970 <_strtod_l+0x8d8>
 800f9ec:	e608      	b.n	800f600 <_strtod_l+0x568>
 800f9ee:	4658      	mov	r0, fp
 800f9f0:	9904      	ldr	r1, [sp, #16]
 800f9f2:	f002 f825 	bl	8011a40 <__ratio>
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f9fc:	4606      	mov	r6, r0
 800f9fe:	460f      	mov	r7, r1
 800fa00:	f7f1 f808 	bl	8000a14 <__aeabi_dcmple>
 800fa04:	2800      	cmp	r0, #0
 800fa06:	d070      	beq.n	800faea <_strtod_l+0xa52>
 800fa08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d042      	beq.n	800fa94 <_strtod_l+0x9fc>
 800fa0e:	2600      	movs	r6, #0
 800fa10:	4f62      	ldr	r7, [pc, #392]	; (800fb9c <_strtod_l+0xb04>)
 800fa12:	4d62      	ldr	r5, [pc, #392]	; (800fb9c <_strtod_l+0xb04>)
 800fa14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa1a:	0d1b      	lsrs	r3, r3, #20
 800fa1c:	051b      	lsls	r3, r3, #20
 800fa1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa22:	4b5f      	ldr	r3, [pc, #380]	; (800fba0 <_strtod_l+0xb08>)
 800fa24:	429a      	cmp	r2, r3
 800fa26:	f040 80c3 	bne.w	800fbb0 <_strtod_l+0xb18>
 800fa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa2c:	4640      	mov	r0, r8
 800fa2e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800fa32:	4649      	mov	r1, r9
 800fa34:	f001 ff2e 	bl	8011894 <__ulp>
 800fa38:	4602      	mov	r2, r0
 800fa3a:	460b      	mov	r3, r1
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	4639      	mov	r1, r7
 800fa40:	f7f0 fd6c 	bl	800051c <__aeabi_dmul>
 800fa44:	4642      	mov	r2, r8
 800fa46:	464b      	mov	r3, r9
 800fa48:	f7f0 fbb2 	bl	80001b0 <__adddf3>
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	4951      	ldr	r1, [pc, #324]	; (800fb94 <_strtod_l+0xafc>)
 800fa50:	4a54      	ldr	r2, [pc, #336]	; (800fba4 <_strtod_l+0xb0c>)
 800fa52:	4019      	ands	r1, r3
 800fa54:	4291      	cmp	r1, r2
 800fa56:	4680      	mov	r8, r0
 800fa58:	d95d      	bls.n	800fb16 <_strtod_l+0xa7e>
 800fa5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa5c:	4b4e      	ldr	r3, [pc, #312]	; (800fb98 <_strtod_l+0xb00>)
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d103      	bne.n	800fa6a <_strtod_l+0x9d2>
 800fa62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa64:	3301      	adds	r3, #1
 800fa66:	f43f ad56 	beq.w	800f516 <_strtod_l+0x47e>
 800fa6a:	f04f 38ff 	mov.w	r8, #4294967295
 800fa6e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800fb98 <_strtod_l+0xb00>
 800fa72:	4650      	mov	r0, sl
 800fa74:	991a      	ldr	r1, [sp, #104]	; 0x68
 800fa76:	f001 fbdd 	bl	8011234 <_Bfree>
 800fa7a:	4650      	mov	r0, sl
 800fa7c:	9906      	ldr	r1, [sp, #24]
 800fa7e:	f001 fbd9 	bl	8011234 <_Bfree>
 800fa82:	4650      	mov	r0, sl
 800fa84:	9904      	ldr	r1, [sp, #16]
 800fa86:	f001 fbd5 	bl	8011234 <_Bfree>
 800fa8a:	4659      	mov	r1, fp
 800fa8c:	4650      	mov	r0, sl
 800fa8e:	f001 fbd1 	bl	8011234 <_Bfree>
 800fa92:	e627      	b.n	800f6e4 <_strtod_l+0x64c>
 800fa94:	f1b8 0f00 	cmp.w	r8, #0
 800fa98:	d119      	bne.n	800face <_strtod_l+0xa36>
 800fa9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800faa0:	b9e3      	cbnz	r3, 800fadc <_strtod_l+0xa44>
 800faa2:	2200      	movs	r2, #0
 800faa4:	4630      	mov	r0, r6
 800faa6:	4639      	mov	r1, r7
 800faa8:	4b3c      	ldr	r3, [pc, #240]	; (800fb9c <_strtod_l+0xb04>)
 800faaa:	f7f0 ffa9 	bl	8000a00 <__aeabi_dcmplt>
 800faae:	b9c8      	cbnz	r0, 800fae4 <_strtod_l+0xa4c>
 800fab0:	2200      	movs	r2, #0
 800fab2:	4630      	mov	r0, r6
 800fab4:	4639      	mov	r1, r7
 800fab6:	4b3c      	ldr	r3, [pc, #240]	; (800fba8 <_strtod_l+0xb10>)
 800fab8:	f7f0 fd30 	bl	800051c <__aeabi_dmul>
 800fabc:	4604      	mov	r4, r0
 800fabe:	460d      	mov	r5, r1
 800fac0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800fac4:	9416      	str	r4, [sp, #88]	; 0x58
 800fac6:	9317      	str	r3, [sp, #92]	; 0x5c
 800fac8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800facc:	e7a2      	b.n	800fa14 <_strtod_l+0x97c>
 800face:	f1b8 0f01 	cmp.w	r8, #1
 800fad2:	d103      	bne.n	800fadc <_strtod_l+0xa44>
 800fad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	f43f ad92 	beq.w	800f600 <_strtod_l+0x568>
 800fadc:	2600      	movs	r6, #0
 800fade:	2400      	movs	r4, #0
 800fae0:	4f32      	ldr	r7, [pc, #200]	; (800fbac <_strtod_l+0xb14>)
 800fae2:	e796      	b.n	800fa12 <_strtod_l+0x97a>
 800fae4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fae6:	4d30      	ldr	r5, [pc, #192]	; (800fba8 <_strtod_l+0xb10>)
 800fae8:	e7ea      	b.n	800fac0 <_strtod_l+0xa28>
 800faea:	4b2f      	ldr	r3, [pc, #188]	; (800fba8 <_strtod_l+0xb10>)
 800faec:	2200      	movs	r2, #0
 800faee:	4630      	mov	r0, r6
 800faf0:	4639      	mov	r1, r7
 800faf2:	f7f0 fd13 	bl	800051c <__aeabi_dmul>
 800faf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800faf8:	4604      	mov	r4, r0
 800fafa:	460d      	mov	r5, r1
 800fafc:	b933      	cbnz	r3, 800fb0c <_strtod_l+0xa74>
 800fafe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb02:	9010      	str	r0, [sp, #64]	; 0x40
 800fb04:	9311      	str	r3, [sp, #68]	; 0x44
 800fb06:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800fb0a:	e783      	b.n	800fa14 <_strtod_l+0x97c>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800fb14:	e7f7      	b.n	800fb06 <_strtod_l+0xa6e>
 800fb16:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fb1a:	9b05      	ldr	r3, [sp, #20]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d1a8      	bne.n	800fa72 <_strtod_l+0x9da>
 800fb20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fb24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb26:	0d1b      	lsrs	r3, r3, #20
 800fb28:	051b      	lsls	r3, r3, #20
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d1a1      	bne.n	800fa72 <_strtod_l+0x9da>
 800fb2e:	4620      	mov	r0, r4
 800fb30:	4629      	mov	r1, r5
 800fb32:	f7f1 fb47 	bl	80011c4 <__aeabi_d2lz>
 800fb36:	f7f0 fcc3 	bl	80004c0 <__aeabi_l2d>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	4620      	mov	r0, r4
 800fb40:	4629      	mov	r1, r5
 800fb42:	f7f0 fb33 	bl	80001ac <__aeabi_dsub>
 800fb46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb4c:	ea43 0308 	orr.w	r3, r3, r8
 800fb50:	4313      	orrs	r3, r2
 800fb52:	4604      	mov	r4, r0
 800fb54:	460d      	mov	r5, r1
 800fb56:	d066      	beq.n	800fc26 <_strtod_l+0xb8e>
 800fb58:	a309      	add	r3, pc, #36	; (adr r3, 800fb80 <_strtod_l+0xae8>)
 800fb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5e:	f7f0 ff4f 	bl	8000a00 <__aeabi_dcmplt>
 800fb62:	2800      	cmp	r0, #0
 800fb64:	f47f ace2 	bne.w	800f52c <_strtod_l+0x494>
 800fb68:	a307      	add	r3, pc, #28	; (adr r3, 800fb88 <_strtod_l+0xaf0>)
 800fb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6e:	4620      	mov	r0, r4
 800fb70:	4629      	mov	r1, r5
 800fb72:	f7f0 ff63 	bl	8000a3c <__aeabi_dcmpgt>
 800fb76:	2800      	cmp	r0, #0
 800fb78:	f43f af7b 	beq.w	800fa72 <_strtod_l+0x9da>
 800fb7c:	e4d6      	b.n	800f52c <_strtod_l+0x494>
 800fb7e:	bf00      	nop
 800fb80:	94a03595 	.word	0x94a03595
 800fb84:	3fdfffff 	.word	0x3fdfffff
 800fb88:	35afe535 	.word	0x35afe535
 800fb8c:	3fe00000 	.word	0x3fe00000
 800fb90:	000fffff 	.word	0x000fffff
 800fb94:	7ff00000 	.word	0x7ff00000
 800fb98:	7fefffff 	.word	0x7fefffff
 800fb9c:	3ff00000 	.word	0x3ff00000
 800fba0:	7fe00000 	.word	0x7fe00000
 800fba4:	7c9fffff 	.word	0x7c9fffff
 800fba8:	3fe00000 	.word	0x3fe00000
 800fbac:	bff00000 	.word	0xbff00000
 800fbb0:	9b05      	ldr	r3, [sp, #20]
 800fbb2:	b313      	cbz	r3, 800fbfa <_strtod_l+0xb62>
 800fbb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fbba:	d81e      	bhi.n	800fbfa <_strtod_l+0xb62>
 800fbbc:	a326      	add	r3, pc, #152	; (adr r3, 800fc58 <_strtod_l+0xbc0>)
 800fbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	4629      	mov	r1, r5
 800fbc6:	f7f0 ff25 	bl	8000a14 <__aeabi_dcmple>
 800fbca:	b190      	cbz	r0, 800fbf2 <_strtod_l+0xb5a>
 800fbcc:	4629      	mov	r1, r5
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f7f0 ff7c 	bl	8000acc <__aeabi_d2uiz>
 800fbd4:	2801      	cmp	r0, #1
 800fbd6:	bf38      	it	cc
 800fbd8:	2001      	movcc	r0, #1
 800fbda:	f7f0 fc25 	bl	8000428 <__aeabi_ui2d>
 800fbde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	460d      	mov	r5, r1
 800fbe4:	b9d3      	cbnz	r3, 800fc1c <_strtod_l+0xb84>
 800fbe6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbea:	9012      	str	r0, [sp, #72]	; 0x48
 800fbec:	9313      	str	r3, [sp, #76]	; 0x4c
 800fbee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800fbf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fbf4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800fbf8:	1a9f      	subs	r7, r3, r2
 800fbfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fbfe:	f001 fe49 	bl	8011894 <__ulp>
 800fc02:	4602      	mov	r2, r0
 800fc04:	460b      	mov	r3, r1
 800fc06:	4630      	mov	r0, r6
 800fc08:	4639      	mov	r1, r7
 800fc0a:	f7f0 fc87 	bl	800051c <__aeabi_dmul>
 800fc0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fc12:	f7f0 facd 	bl	80001b0 <__adddf3>
 800fc16:	4680      	mov	r8, r0
 800fc18:	4689      	mov	r9, r1
 800fc1a:	e77e      	b.n	800fb1a <_strtod_l+0xa82>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	460b      	mov	r3, r1
 800fc20:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800fc24:	e7e3      	b.n	800fbee <_strtod_l+0xb56>
 800fc26:	a30e      	add	r3, pc, #56	; (adr r3, 800fc60 <_strtod_l+0xbc8>)
 800fc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2c:	f7f0 fee8 	bl	8000a00 <__aeabi_dcmplt>
 800fc30:	e7a1      	b.n	800fb76 <_strtod_l+0xade>
 800fc32:	2300      	movs	r3, #0
 800fc34:	930a      	str	r3, [sp, #40]	; 0x28
 800fc36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fc3a:	6013      	str	r3, [r2, #0]
 800fc3c:	f7ff ba71 	b.w	800f122 <_strtod_l+0x8a>
 800fc40:	2a65      	cmp	r2, #101	; 0x65
 800fc42:	f43f ab63 	beq.w	800f30c <_strtod_l+0x274>
 800fc46:	2a45      	cmp	r2, #69	; 0x45
 800fc48:	f43f ab60 	beq.w	800f30c <_strtod_l+0x274>
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	f7ff bb95 	b.w	800f37c <_strtod_l+0x2e4>
 800fc52:	bf00      	nop
 800fc54:	f3af 8000 	nop.w
 800fc58:	ffc00000 	.word	0xffc00000
 800fc5c:	41dfffff 	.word	0x41dfffff
 800fc60:	94a03595 	.word	0x94a03595
 800fc64:	3fcfffff 	.word	0x3fcfffff

0800fc68 <strtod>:
 800fc68:	460a      	mov	r2, r1
 800fc6a:	4601      	mov	r1, r0
 800fc6c:	4802      	ldr	r0, [pc, #8]	; (800fc78 <strtod+0x10>)
 800fc6e:	4b03      	ldr	r3, [pc, #12]	; (800fc7c <strtod+0x14>)
 800fc70:	6800      	ldr	r0, [r0, #0]
 800fc72:	f7ff ba11 	b.w	800f098 <_strtod_l>
 800fc76:	bf00      	nop
 800fc78:	200008bc 	.word	0x200008bc
 800fc7c:	20000924 	.word	0x20000924

0800fc80 <strtok>:
 800fc80:	4b16      	ldr	r3, [pc, #88]	; (800fcdc <strtok+0x5c>)
 800fc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc86:	681f      	ldr	r7, [r3, #0]
 800fc88:	4605      	mov	r5, r0
 800fc8a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800fc8c:	460e      	mov	r6, r1
 800fc8e:	b9ec      	cbnz	r4, 800fccc <strtok+0x4c>
 800fc90:	2050      	movs	r0, #80	; 0x50
 800fc92:	f001 fa67 	bl	8011164 <malloc>
 800fc96:	4602      	mov	r2, r0
 800fc98:	65b8      	str	r0, [r7, #88]	; 0x58
 800fc9a:	b920      	cbnz	r0, 800fca6 <strtok+0x26>
 800fc9c:	2157      	movs	r1, #87	; 0x57
 800fc9e:	4b10      	ldr	r3, [pc, #64]	; (800fce0 <strtok+0x60>)
 800fca0:	4810      	ldr	r0, [pc, #64]	; (800fce4 <strtok+0x64>)
 800fca2:	f000 f849 	bl	800fd38 <__assert_func>
 800fca6:	e9c0 4400 	strd	r4, r4, [r0]
 800fcaa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fcae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fcb2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800fcb6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800fcba:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800fcbe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800fcc2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800fcc6:	6184      	str	r4, [r0, #24]
 800fcc8:	7704      	strb	r4, [r0, #28]
 800fcca:	6244      	str	r4, [r0, #36]	; 0x24
 800fccc:	4631      	mov	r1, r6
 800fcce:	4628      	mov	r0, r5
 800fcd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd8:	f000 b806 	b.w	800fce8 <__strtok_r>
 800fcdc:	200008bc 	.word	0x200008bc
 800fce0:	08012dc8 	.word	0x08012dc8
 800fce4:	08012ddf 	.word	0x08012ddf

0800fce8 <__strtok_r>:
 800fce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcea:	b908      	cbnz	r0, 800fcf0 <__strtok_r+0x8>
 800fcec:	6810      	ldr	r0, [r2, #0]
 800fcee:	b188      	cbz	r0, 800fd14 <__strtok_r+0x2c>
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	460f      	mov	r7, r1
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fcfa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fcfe:	b91e      	cbnz	r6, 800fd08 <__strtok_r+0x20>
 800fd00:	b965      	cbnz	r5, 800fd1c <__strtok_r+0x34>
 800fd02:	4628      	mov	r0, r5
 800fd04:	6015      	str	r5, [r2, #0]
 800fd06:	e005      	b.n	800fd14 <__strtok_r+0x2c>
 800fd08:	42b5      	cmp	r5, r6
 800fd0a:	d1f6      	bne.n	800fcfa <__strtok_r+0x12>
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d1f0      	bne.n	800fcf2 <__strtok_r+0xa>
 800fd10:	6014      	str	r4, [r2, #0]
 800fd12:	7003      	strb	r3, [r0, #0]
 800fd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd16:	461c      	mov	r4, r3
 800fd18:	e00c      	b.n	800fd34 <__strtok_r+0x4c>
 800fd1a:	b915      	cbnz	r5, 800fd22 <__strtok_r+0x3a>
 800fd1c:	460e      	mov	r6, r1
 800fd1e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fd22:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fd26:	42ab      	cmp	r3, r5
 800fd28:	d1f7      	bne.n	800fd1a <__strtok_r+0x32>
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d0f3      	beq.n	800fd16 <__strtok_r+0x2e>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	f804 3c01 	strb.w	r3, [r4, #-1]
 800fd34:	6014      	str	r4, [r2, #0]
 800fd36:	e7ed      	b.n	800fd14 <__strtok_r+0x2c>

0800fd38 <__assert_func>:
 800fd38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd3a:	4614      	mov	r4, r2
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	4b09      	ldr	r3, [pc, #36]	; (800fd64 <__assert_func+0x2c>)
 800fd40:	4605      	mov	r5, r0
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	68d8      	ldr	r0, [r3, #12]
 800fd46:	b14c      	cbz	r4, 800fd5c <__assert_func+0x24>
 800fd48:	4b07      	ldr	r3, [pc, #28]	; (800fd68 <__assert_func+0x30>)
 800fd4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd4e:	9100      	str	r1, [sp, #0]
 800fd50:	462b      	mov	r3, r5
 800fd52:	4906      	ldr	r1, [pc, #24]	; (800fd6c <__assert_func+0x34>)
 800fd54:	f000 fe8a 	bl	8010a6c <fiprintf>
 800fd58:	f002 fb80 	bl	801245c <abort>
 800fd5c:	4b04      	ldr	r3, [pc, #16]	; (800fd70 <__assert_func+0x38>)
 800fd5e:	461c      	mov	r4, r3
 800fd60:	e7f3      	b.n	800fd4a <__assert_func+0x12>
 800fd62:	bf00      	nop
 800fd64:	200008bc 	.word	0x200008bc
 800fd68:	08012e3c 	.word	0x08012e3c
 800fd6c:	08012e49 	.word	0x08012e49
 800fd70:	08012e77 	.word	0x08012e77

0800fd74 <quorem>:
 800fd74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd78:	6903      	ldr	r3, [r0, #16]
 800fd7a:	690c      	ldr	r4, [r1, #16]
 800fd7c:	4607      	mov	r7, r0
 800fd7e:	42a3      	cmp	r3, r4
 800fd80:	f2c0 8082 	blt.w	800fe88 <quorem+0x114>
 800fd84:	3c01      	subs	r4, #1
 800fd86:	f100 0514 	add.w	r5, r0, #20
 800fd8a:	f101 0814 	add.w	r8, r1, #20
 800fd8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd92:	9301      	str	r3, [sp, #4]
 800fd94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	fbb2 f6f3 	udiv	r6, r2, r3
 800fda4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fda8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdac:	d331      	bcc.n	800fe12 <quorem+0x9e>
 800fdae:	f04f 0e00 	mov.w	lr, #0
 800fdb2:	4640      	mov	r0, r8
 800fdb4:	46ac      	mov	ip, r5
 800fdb6:	46f2      	mov	sl, lr
 800fdb8:	f850 2b04 	ldr.w	r2, [r0], #4
 800fdbc:	b293      	uxth	r3, r2
 800fdbe:	fb06 e303 	mla	r3, r6, r3, lr
 800fdc2:	0c12      	lsrs	r2, r2, #16
 800fdc4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fdc8:	b29b      	uxth	r3, r3
 800fdca:	fb06 e202 	mla	r2, r6, r2, lr
 800fdce:	ebaa 0303 	sub.w	r3, sl, r3
 800fdd2:	f8dc a000 	ldr.w	sl, [ip]
 800fdd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fdda:	fa1f fa8a 	uxth.w	sl, sl
 800fdde:	4453      	add	r3, sl
 800fde0:	f8dc a000 	ldr.w	sl, [ip]
 800fde4:	b292      	uxth	r2, r2
 800fde6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fdea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdf4:	4581      	cmp	r9, r0
 800fdf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fdfa:	f84c 3b04 	str.w	r3, [ip], #4
 800fdfe:	d2db      	bcs.n	800fdb8 <quorem+0x44>
 800fe00:	f855 300b 	ldr.w	r3, [r5, fp]
 800fe04:	b92b      	cbnz	r3, 800fe12 <quorem+0x9e>
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	3b04      	subs	r3, #4
 800fe0a:	429d      	cmp	r5, r3
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	d32f      	bcc.n	800fe70 <quorem+0xfc>
 800fe10:	613c      	str	r4, [r7, #16]
 800fe12:	4638      	mov	r0, r7
 800fe14:	f001 fc96 	bl	8011744 <__mcmp>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	db25      	blt.n	800fe68 <quorem+0xf4>
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	f04f 0c00 	mov.w	ip, #0
 800fe22:	3601      	adds	r6, #1
 800fe24:	f858 1b04 	ldr.w	r1, [r8], #4
 800fe28:	f8d0 e000 	ldr.w	lr, [r0]
 800fe2c:	b28b      	uxth	r3, r1
 800fe2e:	ebac 0303 	sub.w	r3, ip, r3
 800fe32:	fa1f f28e 	uxth.w	r2, lr
 800fe36:	4413      	add	r3, r2
 800fe38:	0c0a      	lsrs	r2, r1, #16
 800fe3a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fe3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe48:	45c1      	cmp	r9, r8
 800fe4a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fe4e:	f840 3b04 	str.w	r3, [r0], #4
 800fe52:	d2e7      	bcs.n	800fe24 <quorem+0xb0>
 800fe54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe5c:	b922      	cbnz	r2, 800fe68 <quorem+0xf4>
 800fe5e:	3b04      	subs	r3, #4
 800fe60:	429d      	cmp	r5, r3
 800fe62:	461a      	mov	r2, r3
 800fe64:	d30a      	bcc.n	800fe7c <quorem+0x108>
 800fe66:	613c      	str	r4, [r7, #16]
 800fe68:	4630      	mov	r0, r6
 800fe6a:	b003      	add	sp, #12
 800fe6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe70:	6812      	ldr	r2, [r2, #0]
 800fe72:	3b04      	subs	r3, #4
 800fe74:	2a00      	cmp	r2, #0
 800fe76:	d1cb      	bne.n	800fe10 <quorem+0x9c>
 800fe78:	3c01      	subs	r4, #1
 800fe7a:	e7c6      	b.n	800fe0a <quorem+0x96>
 800fe7c:	6812      	ldr	r2, [r2, #0]
 800fe7e:	3b04      	subs	r3, #4
 800fe80:	2a00      	cmp	r2, #0
 800fe82:	d1f0      	bne.n	800fe66 <quorem+0xf2>
 800fe84:	3c01      	subs	r4, #1
 800fe86:	e7eb      	b.n	800fe60 <quorem+0xec>
 800fe88:	2000      	movs	r0, #0
 800fe8a:	e7ee      	b.n	800fe6a <quorem+0xf6>
 800fe8c:	0000      	movs	r0, r0
	...

0800fe90 <_dtoa_r>:
 800fe90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe94:	4616      	mov	r6, r2
 800fe96:	461f      	mov	r7, r3
 800fe98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fe9a:	b099      	sub	sp, #100	; 0x64
 800fe9c:	4605      	mov	r5, r0
 800fe9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800fea2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800fea6:	b974      	cbnz	r4, 800fec6 <_dtoa_r+0x36>
 800fea8:	2010      	movs	r0, #16
 800feaa:	f001 f95b 	bl	8011164 <malloc>
 800feae:	4602      	mov	r2, r0
 800feb0:	6268      	str	r0, [r5, #36]	; 0x24
 800feb2:	b920      	cbnz	r0, 800febe <_dtoa_r+0x2e>
 800feb4:	21ea      	movs	r1, #234	; 0xea
 800feb6:	4ba8      	ldr	r3, [pc, #672]	; (8010158 <_dtoa_r+0x2c8>)
 800feb8:	48a8      	ldr	r0, [pc, #672]	; (801015c <_dtoa_r+0x2cc>)
 800feba:	f7ff ff3d 	bl	800fd38 <__assert_func>
 800febe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fec2:	6004      	str	r4, [r0, #0]
 800fec4:	60c4      	str	r4, [r0, #12]
 800fec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fec8:	6819      	ldr	r1, [r3, #0]
 800feca:	b151      	cbz	r1, 800fee2 <_dtoa_r+0x52>
 800fecc:	685a      	ldr	r2, [r3, #4]
 800fece:	2301      	movs	r3, #1
 800fed0:	4093      	lsls	r3, r2
 800fed2:	604a      	str	r2, [r1, #4]
 800fed4:	608b      	str	r3, [r1, #8]
 800fed6:	4628      	mov	r0, r5
 800fed8:	f001 f9ac 	bl	8011234 <_Bfree>
 800fedc:	2200      	movs	r2, #0
 800fede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fee0:	601a      	str	r2, [r3, #0]
 800fee2:	1e3b      	subs	r3, r7, #0
 800fee4:	bfaf      	iteee	ge
 800fee6:	2300      	movge	r3, #0
 800fee8:	2201      	movlt	r2, #1
 800feea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800feee:	9305      	strlt	r3, [sp, #20]
 800fef0:	bfa8      	it	ge
 800fef2:	f8c8 3000 	strge.w	r3, [r8]
 800fef6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800fefa:	4b99      	ldr	r3, [pc, #612]	; (8010160 <_dtoa_r+0x2d0>)
 800fefc:	bfb8      	it	lt
 800fefe:	f8c8 2000 	strlt.w	r2, [r8]
 800ff02:	ea33 0309 	bics.w	r3, r3, r9
 800ff06:	d119      	bne.n	800ff3c <_dtoa_r+0xac>
 800ff08:	f242 730f 	movw	r3, #9999	; 0x270f
 800ff0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ff0e:	6013      	str	r3, [r2, #0]
 800ff10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff14:	4333      	orrs	r3, r6
 800ff16:	f000 857f 	beq.w	8010a18 <_dtoa_r+0xb88>
 800ff1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ff1c:	b953      	cbnz	r3, 800ff34 <_dtoa_r+0xa4>
 800ff1e:	4b91      	ldr	r3, [pc, #580]	; (8010164 <_dtoa_r+0x2d4>)
 800ff20:	e022      	b.n	800ff68 <_dtoa_r+0xd8>
 800ff22:	4b91      	ldr	r3, [pc, #580]	; (8010168 <_dtoa_r+0x2d8>)
 800ff24:	9303      	str	r3, [sp, #12]
 800ff26:	3308      	adds	r3, #8
 800ff28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ff2a:	6013      	str	r3, [r2, #0]
 800ff2c:	9803      	ldr	r0, [sp, #12]
 800ff2e:	b019      	add	sp, #100	; 0x64
 800ff30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff34:	4b8b      	ldr	r3, [pc, #556]	; (8010164 <_dtoa_r+0x2d4>)
 800ff36:	9303      	str	r3, [sp, #12]
 800ff38:	3303      	adds	r3, #3
 800ff3a:	e7f5      	b.n	800ff28 <_dtoa_r+0x98>
 800ff3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ff40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ff44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ff48:	2200      	movs	r2, #0
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	f7f0 fd4e 	bl	80009ec <__aeabi_dcmpeq>
 800ff50:	4680      	mov	r8, r0
 800ff52:	b158      	cbz	r0, 800ff6c <_dtoa_r+0xdc>
 800ff54:	2301      	movs	r3, #1
 800ff56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ff58:	6013      	str	r3, [r2, #0]
 800ff5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f000 8558 	beq.w	8010a12 <_dtoa_r+0xb82>
 800ff62:	4882      	ldr	r0, [pc, #520]	; (801016c <_dtoa_r+0x2dc>)
 800ff64:	6018      	str	r0, [r3, #0]
 800ff66:	1e43      	subs	r3, r0, #1
 800ff68:	9303      	str	r3, [sp, #12]
 800ff6a:	e7df      	b.n	800ff2c <_dtoa_r+0x9c>
 800ff6c:	ab16      	add	r3, sp, #88	; 0x58
 800ff6e:	9301      	str	r3, [sp, #4]
 800ff70:	ab17      	add	r3, sp, #92	; 0x5c
 800ff72:	9300      	str	r3, [sp, #0]
 800ff74:	4628      	mov	r0, r5
 800ff76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff7a:	f001 fd05 	bl	8011988 <__d2b>
 800ff7e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ff82:	4683      	mov	fp, r0
 800ff84:	2c00      	cmp	r4, #0
 800ff86:	d07f      	beq.n	8010088 <_dtoa_r+0x1f8>
 800ff88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ff8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff8e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ff92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ff9a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ff9e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	4b72      	ldr	r3, [pc, #456]	; (8010170 <_dtoa_r+0x2e0>)
 800ffa6:	f7f0 f901 	bl	80001ac <__aeabi_dsub>
 800ffaa:	a365      	add	r3, pc, #404	; (adr r3, 8010140 <_dtoa_r+0x2b0>)
 800ffac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb0:	f7f0 fab4 	bl	800051c <__aeabi_dmul>
 800ffb4:	a364      	add	r3, pc, #400	; (adr r3, 8010148 <_dtoa_r+0x2b8>)
 800ffb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffba:	f7f0 f8f9 	bl	80001b0 <__adddf3>
 800ffbe:	4606      	mov	r6, r0
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	460f      	mov	r7, r1
 800ffc4:	f7f0 fa40 	bl	8000448 <__aeabi_i2d>
 800ffc8:	a361      	add	r3, pc, #388	; (adr r3, 8010150 <_dtoa_r+0x2c0>)
 800ffca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffce:	f7f0 faa5 	bl	800051c <__aeabi_dmul>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	460b      	mov	r3, r1
 800ffd6:	4630      	mov	r0, r6
 800ffd8:	4639      	mov	r1, r7
 800ffda:	f7f0 f8e9 	bl	80001b0 <__adddf3>
 800ffde:	4606      	mov	r6, r0
 800ffe0:	460f      	mov	r7, r1
 800ffe2:	f7f0 fd4b 	bl	8000a7c <__aeabi_d2iz>
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	4682      	mov	sl, r0
 800ffea:	2300      	movs	r3, #0
 800ffec:	4630      	mov	r0, r6
 800ffee:	4639      	mov	r1, r7
 800fff0:	f7f0 fd06 	bl	8000a00 <__aeabi_dcmplt>
 800fff4:	b148      	cbz	r0, 801000a <_dtoa_r+0x17a>
 800fff6:	4650      	mov	r0, sl
 800fff8:	f7f0 fa26 	bl	8000448 <__aeabi_i2d>
 800fffc:	4632      	mov	r2, r6
 800fffe:	463b      	mov	r3, r7
 8010000:	f7f0 fcf4 	bl	80009ec <__aeabi_dcmpeq>
 8010004:	b908      	cbnz	r0, 801000a <_dtoa_r+0x17a>
 8010006:	f10a 3aff 	add.w	sl, sl, #4294967295
 801000a:	f1ba 0f16 	cmp.w	sl, #22
 801000e:	d858      	bhi.n	80100c2 <_dtoa_r+0x232>
 8010010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010014:	4b57      	ldr	r3, [pc, #348]	; (8010174 <_dtoa_r+0x2e4>)
 8010016:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801001a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001e:	f7f0 fcef 	bl	8000a00 <__aeabi_dcmplt>
 8010022:	2800      	cmp	r0, #0
 8010024:	d04f      	beq.n	80100c6 <_dtoa_r+0x236>
 8010026:	2300      	movs	r3, #0
 8010028:	f10a 3aff 	add.w	sl, sl, #4294967295
 801002c:	930f      	str	r3, [sp, #60]	; 0x3c
 801002e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010030:	1b1c      	subs	r4, r3, r4
 8010032:	1e63      	subs	r3, r4, #1
 8010034:	9309      	str	r3, [sp, #36]	; 0x24
 8010036:	bf49      	itett	mi
 8010038:	f1c4 0301 	rsbmi	r3, r4, #1
 801003c:	2300      	movpl	r3, #0
 801003e:	9306      	strmi	r3, [sp, #24]
 8010040:	2300      	movmi	r3, #0
 8010042:	bf54      	ite	pl
 8010044:	9306      	strpl	r3, [sp, #24]
 8010046:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010048:	f1ba 0f00 	cmp.w	sl, #0
 801004c:	db3d      	blt.n	80100ca <_dtoa_r+0x23a>
 801004e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010050:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010054:	4453      	add	r3, sl
 8010056:	9309      	str	r3, [sp, #36]	; 0x24
 8010058:	2300      	movs	r3, #0
 801005a:	930a      	str	r3, [sp, #40]	; 0x28
 801005c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801005e:	2b09      	cmp	r3, #9
 8010060:	f200 808c 	bhi.w	801017c <_dtoa_r+0x2ec>
 8010064:	2b05      	cmp	r3, #5
 8010066:	bfc4      	itt	gt
 8010068:	3b04      	subgt	r3, #4
 801006a:	9322      	strgt	r3, [sp, #136]	; 0x88
 801006c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801006e:	bfc8      	it	gt
 8010070:	2400      	movgt	r4, #0
 8010072:	f1a3 0302 	sub.w	r3, r3, #2
 8010076:	bfd8      	it	le
 8010078:	2401      	movle	r4, #1
 801007a:	2b03      	cmp	r3, #3
 801007c:	f200 808a 	bhi.w	8010194 <_dtoa_r+0x304>
 8010080:	e8df f003 	tbb	[pc, r3]
 8010084:	5b4d4f2d 	.word	0x5b4d4f2d
 8010088:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801008c:	441c      	add	r4, r3
 801008e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010092:	2b20      	cmp	r3, #32
 8010094:	bfc3      	ittte	gt
 8010096:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801009a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801009e:	fa09 f303 	lslgt.w	r3, r9, r3
 80100a2:	f1c3 0320 	rsble	r3, r3, #32
 80100a6:	bfc6      	itte	gt
 80100a8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80100ac:	4318      	orrgt	r0, r3
 80100ae:	fa06 f003 	lslle.w	r0, r6, r3
 80100b2:	f7f0 f9b9 	bl	8000428 <__aeabi_ui2d>
 80100b6:	2301      	movs	r3, #1
 80100b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80100bc:	3c01      	subs	r4, #1
 80100be:	9313      	str	r3, [sp, #76]	; 0x4c
 80100c0:	e76f      	b.n	800ffa2 <_dtoa_r+0x112>
 80100c2:	2301      	movs	r3, #1
 80100c4:	e7b2      	b.n	801002c <_dtoa_r+0x19c>
 80100c6:	900f      	str	r0, [sp, #60]	; 0x3c
 80100c8:	e7b1      	b.n	801002e <_dtoa_r+0x19e>
 80100ca:	9b06      	ldr	r3, [sp, #24]
 80100cc:	eba3 030a 	sub.w	r3, r3, sl
 80100d0:	9306      	str	r3, [sp, #24]
 80100d2:	f1ca 0300 	rsb	r3, sl, #0
 80100d6:	930a      	str	r3, [sp, #40]	; 0x28
 80100d8:	2300      	movs	r3, #0
 80100da:	930e      	str	r3, [sp, #56]	; 0x38
 80100dc:	e7be      	b.n	801005c <_dtoa_r+0x1cc>
 80100de:	2300      	movs	r3, #0
 80100e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80100e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	dc58      	bgt.n	801019a <_dtoa_r+0x30a>
 80100e8:	f04f 0901 	mov.w	r9, #1
 80100ec:	464b      	mov	r3, r9
 80100ee:	f8cd 9020 	str.w	r9, [sp, #32]
 80100f2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80100f6:	2200      	movs	r2, #0
 80100f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80100fa:	6042      	str	r2, [r0, #4]
 80100fc:	2204      	movs	r2, #4
 80100fe:	f102 0614 	add.w	r6, r2, #20
 8010102:	429e      	cmp	r6, r3
 8010104:	6841      	ldr	r1, [r0, #4]
 8010106:	d94e      	bls.n	80101a6 <_dtoa_r+0x316>
 8010108:	4628      	mov	r0, r5
 801010a:	f001 f853 	bl	80111b4 <_Balloc>
 801010e:	9003      	str	r0, [sp, #12]
 8010110:	2800      	cmp	r0, #0
 8010112:	d14c      	bne.n	80101ae <_dtoa_r+0x31e>
 8010114:	4602      	mov	r2, r0
 8010116:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801011a:	4b17      	ldr	r3, [pc, #92]	; (8010178 <_dtoa_r+0x2e8>)
 801011c:	e6cc      	b.n	800feb8 <_dtoa_r+0x28>
 801011e:	2301      	movs	r3, #1
 8010120:	e7de      	b.n	80100e0 <_dtoa_r+0x250>
 8010122:	2300      	movs	r3, #0
 8010124:	930b      	str	r3, [sp, #44]	; 0x2c
 8010126:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010128:	eb0a 0903 	add.w	r9, sl, r3
 801012c:	f109 0301 	add.w	r3, r9, #1
 8010130:	2b01      	cmp	r3, #1
 8010132:	9308      	str	r3, [sp, #32]
 8010134:	bfb8      	it	lt
 8010136:	2301      	movlt	r3, #1
 8010138:	e7dd      	b.n	80100f6 <_dtoa_r+0x266>
 801013a:	2301      	movs	r3, #1
 801013c:	e7f2      	b.n	8010124 <_dtoa_r+0x294>
 801013e:	bf00      	nop
 8010140:	636f4361 	.word	0x636f4361
 8010144:	3fd287a7 	.word	0x3fd287a7
 8010148:	8b60c8b3 	.word	0x8b60c8b3
 801014c:	3fc68a28 	.word	0x3fc68a28
 8010150:	509f79fb 	.word	0x509f79fb
 8010154:	3fd34413 	.word	0x3fd34413
 8010158:	08012dc8 	.word	0x08012dc8
 801015c:	08012e85 	.word	0x08012e85
 8010160:	7ff00000 	.word	0x7ff00000
 8010164:	08012e81 	.word	0x08012e81
 8010168:	08012e78 	.word	0x08012e78
 801016c:	08012d51 	.word	0x08012d51
 8010170:	3ff80000 	.word	0x3ff80000
 8010174:	08012ff0 	.word	0x08012ff0
 8010178:	08012ee0 	.word	0x08012ee0
 801017c:	2401      	movs	r4, #1
 801017e:	2300      	movs	r3, #0
 8010180:	940b      	str	r4, [sp, #44]	; 0x2c
 8010182:	9322      	str	r3, [sp, #136]	; 0x88
 8010184:	f04f 39ff 	mov.w	r9, #4294967295
 8010188:	2200      	movs	r2, #0
 801018a:	2312      	movs	r3, #18
 801018c:	f8cd 9020 	str.w	r9, [sp, #32]
 8010190:	9223      	str	r2, [sp, #140]	; 0x8c
 8010192:	e7b0      	b.n	80100f6 <_dtoa_r+0x266>
 8010194:	2301      	movs	r3, #1
 8010196:	930b      	str	r3, [sp, #44]	; 0x2c
 8010198:	e7f4      	b.n	8010184 <_dtoa_r+0x2f4>
 801019a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 801019e:	464b      	mov	r3, r9
 80101a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80101a4:	e7a7      	b.n	80100f6 <_dtoa_r+0x266>
 80101a6:	3101      	adds	r1, #1
 80101a8:	6041      	str	r1, [r0, #4]
 80101aa:	0052      	lsls	r2, r2, #1
 80101ac:	e7a7      	b.n	80100fe <_dtoa_r+0x26e>
 80101ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80101b0:	9a03      	ldr	r2, [sp, #12]
 80101b2:	601a      	str	r2, [r3, #0]
 80101b4:	9b08      	ldr	r3, [sp, #32]
 80101b6:	2b0e      	cmp	r3, #14
 80101b8:	f200 80a8 	bhi.w	801030c <_dtoa_r+0x47c>
 80101bc:	2c00      	cmp	r4, #0
 80101be:	f000 80a5 	beq.w	801030c <_dtoa_r+0x47c>
 80101c2:	f1ba 0f00 	cmp.w	sl, #0
 80101c6:	dd34      	ble.n	8010232 <_dtoa_r+0x3a2>
 80101c8:	4a9a      	ldr	r2, [pc, #616]	; (8010434 <_dtoa_r+0x5a4>)
 80101ca:	f00a 030f 	and.w	r3, sl, #15
 80101ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80101d2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80101d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80101da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80101de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80101e2:	d016      	beq.n	8010212 <_dtoa_r+0x382>
 80101e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80101e8:	4b93      	ldr	r3, [pc, #588]	; (8010438 <_dtoa_r+0x5a8>)
 80101ea:	2703      	movs	r7, #3
 80101ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101f0:	f7f0 fabe 	bl	8000770 <__aeabi_ddiv>
 80101f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101f8:	f004 040f 	and.w	r4, r4, #15
 80101fc:	4e8e      	ldr	r6, [pc, #568]	; (8010438 <_dtoa_r+0x5a8>)
 80101fe:	b954      	cbnz	r4, 8010216 <_dtoa_r+0x386>
 8010200:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010208:	f7f0 fab2 	bl	8000770 <__aeabi_ddiv>
 801020c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010210:	e029      	b.n	8010266 <_dtoa_r+0x3d6>
 8010212:	2702      	movs	r7, #2
 8010214:	e7f2      	b.n	80101fc <_dtoa_r+0x36c>
 8010216:	07e1      	lsls	r1, r4, #31
 8010218:	d508      	bpl.n	801022c <_dtoa_r+0x39c>
 801021a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801021e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010222:	f7f0 f97b 	bl	800051c <__aeabi_dmul>
 8010226:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801022a:	3701      	adds	r7, #1
 801022c:	1064      	asrs	r4, r4, #1
 801022e:	3608      	adds	r6, #8
 8010230:	e7e5      	b.n	80101fe <_dtoa_r+0x36e>
 8010232:	f000 80a5 	beq.w	8010380 <_dtoa_r+0x4f0>
 8010236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801023a:	f1ca 0400 	rsb	r4, sl, #0
 801023e:	4b7d      	ldr	r3, [pc, #500]	; (8010434 <_dtoa_r+0x5a4>)
 8010240:	f004 020f 	and.w	r2, r4, #15
 8010244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	f7f0 f966 	bl	800051c <__aeabi_dmul>
 8010250:	2702      	movs	r7, #2
 8010252:	2300      	movs	r3, #0
 8010254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010258:	4e77      	ldr	r6, [pc, #476]	; (8010438 <_dtoa_r+0x5a8>)
 801025a:	1124      	asrs	r4, r4, #4
 801025c:	2c00      	cmp	r4, #0
 801025e:	f040 8084 	bne.w	801036a <_dtoa_r+0x4da>
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1d2      	bne.n	801020c <_dtoa_r+0x37c>
 8010266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010268:	2b00      	cmp	r3, #0
 801026a:	f000 808b 	beq.w	8010384 <_dtoa_r+0x4f4>
 801026e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010272:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010276:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801027a:	2200      	movs	r2, #0
 801027c:	4b6f      	ldr	r3, [pc, #444]	; (801043c <_dtoa_r+0x5ac>)
 801027e:	f7f0 fbbf 	bl	8000a00 <__aeabi_dcmplt>
 8010282:	2800      	cmp	r0, #0
 8010284:	d07e      	beq.n	8010384 <_dtoa_r+0x4f4>
 8010286:	9b08      	ldr	r3, [sp, #32]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d07b      	beq.n	8010384 <_dtoa_r+0x4f4>
 801028c:	f1b9 0f00 	cmp.w	r9, #0
 8010290:	dd38      	ble.n	8010304 <_dtoa_r+0x474>
 8010292:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010296:	2200      	movs	r2, #0
 8010298:	4b69      	ldr	r3, [pc, #420]	; (8010440 <_dtoa_r+0x5b0>)
 801029a:	f7f0 f93f 	bl	800051c <__aeabi_dmul>
 801029e:	464c      	mov	r4, r9
 80102a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102a4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80102a8:	3701      	adds	r7, #1
 80102aa:	4638      	mov	r0, r7
 80102ac:	f7f0 f8cc 	bl	8000448 <__aeabi_i2d>
 80102b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102b4:	f7f0 f932 	bl	800051c <__aeabi_dmul>
 80102b8:	2200      	movs	r2, #0
 80102ba:	4b62      	ldr	r3, [pc, #392]	; (8010444 <_dtoa_r+0x5b4>)
 80102bc:	f7ef ff78 	bl	80001b0 <__adddf3>
 80102c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80102c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80102c8:	9611      	str	r6, [sp, #68]	; 0x44
 80102ca:	2c00      	cmp	r4, #0
 80102cc:	d15d      	bne.n	801038a <_dtoa_r+0x4fa>
 80102ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102d2:	2200      	movs	r2, #0
 80102d4:	4b5c      	ldr	r3, [pc, #368]	; (8010448 <_dtoa_r+0x5b8>)
 80102d6:	f7ef ff69 	bl	80001ac <__aeabi_dsub>
 80102da:	4602      	mov	r2, r0
 80102dc:	460b      	mov	r3, r1
 80102de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80102e2:	4633      	mov	r3, r6
 80102e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80102e6:	f7f0 fba9 	bl	8000a3c <__aeabi_dcmpgt>
 80102ea:	2800      	cmp	r0, #0
 80102ec:	f040 829c 	bne.w	8010828 <_dtoa_r+0x998>
 80102f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80102f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80102fa:	f7f0 fb81 	bl	8000a00 <__aeabi_dcmplt>
 80102fe:	2800      	cmp	r0, #0
 8010300:	f040 8290 	bne.w	8010824 <_dtoa_r+0x994>
 8010304:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8010308:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801030c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801030e:	2b00      	cmp	r3, #0
 8010310:	f2c0 8152 	blt.w	80105b8 <_dtoa_r+0x728>
 8010314:	f1ba 0f0e 	cmp.w	sl, #14
 8010318:	f300 814e 	bgt.w	80105b8 <_dtoa_r+0x728>
 801031c:	4b45      	ldr	r3, [pc, #276]	; (8010434 <_dtoa_r+0x5a4>)
 801031e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010322:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010326:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801032a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801032c:	2b00      	cmp	r3, #0
 801032e:	f280 80db 	bge.w	80104e8 <_dtoa_r+0x658>
 8010332:	9b08      	ldr	r3, [sp, #32]
 8010334:	2b00      	cmp	r3, #0
 8010336:	f300 80d7 	bgt.w	80104e8 <_dtoa_r+0x658>
 801033a:	f040 8272 	bne.w	8010822 <_dtoa_r+0x992>
 801033e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010342:	2200      	movs	r2, #0
 8010344:	4b40      	ldr	r3, [pc, #256]	; (8010448 <_dtoa_r+0x5b8>)
 8010346:	f7f0 f8e9 	bl	800051c <__aeabi_dmul>
 801034a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801034e:	f7f0 fb6b 	bl	8000a28 <__aeabi_dcmpge>
 8010352:	9c08      	ldr	r4, [sp, #32]
 8010354:	4626      	mov	r6, r4
 8010356:	2800      	cmp	r0, #0
 8010358:	f040 8248 	bne.w	80107ec <_dtoa_r+0x95c>
 801035c:	2331      	movs	r3, #49	; 0x31
 801035e:	9f03      	ldr	r7, [sp, #12]
 8010360:	f10a 0a01 	add.w	sl, sl, #1
 8010364:	f807 3b01 	strb.w	r3, [r7], #1
 8010368:	e244      	b.n	80107f4 <_dtoa_r+0x964>
 801036a:	07e2      	lsls	r2, r4, #31
 801036c:	d505      	bpl.n	801037a <_dtoa_r+0x4ea>
 801036e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010372:	f7f0 f8d3 	bl	800051c <__aeabi_dmul>
 8010376:	2301      	movs	r3, #1
 8010378:	3701      	adds	r7, #1
 801037a:	1064      	asrs	r4, r4, #1
 801037c:	3608      	adds	r6, #8
 801037e:	e76d      	b.n	801025c <_dtoa_r+0x3cc>
 8010380:	2702      	movs	r7, #2
 8010382:	e770      	b.n	8010266 <_dtoa_r+0x3d6>
 8010384:	46d0      	mov	r8, sl
 8010386:	9c08      	ldr	r4, [sp, #32]
 8010388:	e78f      	b.n	80102aa <_dtoa_r+0x41a>
 801038a:	9903      	ldr	r1, [sp, #12]
 801038c:	4b29      	ldr	r3, [pc, #164]	; (8010434 <_dtoa_r+0x5a4>)
 801038e:	4421      	add	r1, r4
 8010390:	9112      	str	r1, [sp, #72]	; 0x48
 8010392:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010394:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010398:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801039c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80103a0:	2900      	cmp	r1, #0
 80103a2:	d055      	beq.n	8010450 <_dtoa_r+0x5c0>
 80103a4:	2000      	movs	r0, #0
 80103a6:	4929      	ldr	r1, [pc, #164]	; (801044c <_dtoa_r+0x5bc>)
 80103a8:	f7f0 f9e2 	bl	8000770 <__aeabi_ddiv>
 80103ac:	463b      	mov	r3, r7
 80103ae:	4632      	mov	r2, r6
 80103b0:	f7ef fefc 	bl	80001ac <__aeabi_dsub>
 80103b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80103b8:	9f03      	ldr	r7, [sp, #12]
 80103ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103be:	f7f0 fb5d 	bl	8000a7c <__aeabi_d2iz>
 80103c2:	4604      	mov	r4, r0
 80103c4:	f7f0 f840 	bl	8000448 <__aeabi_i2d>
 80103c8:	4602      	mov	r2, r0
 80103ca:	460b      	mov	r3, r1
 80103cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103d0:	f7ef feec 	bl	80001ac <__aeabi_dsub>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	3430      	adds	r4, #48	; 0x30
 80103da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80103de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80103e2:	f807 4b01 	strb.w	r4, [r7], #1
 80103e6:	f7f0 fb0b 	bl	8000a00 <__aeabi_dcmplt>
 80103ea:	2800      	cmp	r0, #0
 80103ec:	d174      	bne.n	80104d8 <_dtoa_r+0x648>
 80103ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103f2:	2000      	movs	r0, #0
 80103f4:	4911      	ldr	r1, [pc, #68]	; (801043c <_dtoa_r+0x5ac>)
 80103f6:	f7ef fed9 	bl	80001ac <__aeabi_dsub>
 80103fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80103fe:	f7f0 faff 	bl	8000a00 <__aeabi_dcmplt>
 8010402:	2800      	cmp	r0, #0
 8010404:	f040 80b7 	bne.w	8010576 <_dtoa_r+0x6e6>
 8010408:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801040a:	429f      	cmp	r7, r3
 801040c:	f43f af7a 	beq.w	8010304 <_dtoa_r+0x474>
 8010410:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010414:	2200      	movs	r2, #0
 8010416:	4b0a      	ldr	r3, [pc, #40]	; (8010440 <_dtoa_r+0x5b0>)
 8010418:	f7f0 f880 	bl	800051c <__aeabi_dmul>
 801041c:	2200      	movs	r2, #0
 801041e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010426:	4b06      	ldr	r3, [pc, #24]	; (8010440 <_dtoa_r+0x5b0>)
 8010428:	f7f0 f878 	bl	800051c <__aeabi_dmul>
 801042c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010430:	e7c3      	b.n	80103ba <_dtoa_r+0x52a>
 8010432:	bf00      	nop
 8010434:	08012ff0 	.word	0x08012ff0
 8010438:	08012fc8 	.word	0x08012fc8
 801043c:	3ff00000 	.word	0x3ff00000
 8010440:	40240000 	.word	0x40240000
 8010444:	401c0000 	.word	0x401c0000
 8010448:	40140000 	.word	0x40140000
 801044c:	3fe00000 	.word	0x3fe00000
 8010450:	4630      	mov	r0, r6
 8010452:	4639      	mov	r1, r7
 8010454:	f7f0 f862 	bl	800051c <__aeabi_dmul>
 8010458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801045a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801045e:	9c03      	ldr	r4, [sp, #12]
 8010460:	9314      	str	r3, [sp, #80]	; 0x50
 8010462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010466:	f7f0 fb09 	bl	8000a7c <__aeabi_d2iz>
 801046a:	9015      	str	r0, [sp, #84]	; 0x54
 801046c:	f7ef ffec 	bl	8000448 <__aeabi_i2d>
 8010470:	4602      	mov	r2, r0
 8010472:	460b      	mov	r3, r1
 8010474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010478:	f7ef fe98 	bl	80001ac <__aeabi_dsub>
 801047c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801047e:	4606      	mov	r6, r0
 8010480:	3330      	adds	r3, #48	; 0x30
 8010482:	f804 3b01 	strb.w	r3, [r4], #1
 8010486:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010488:	460f      	mov	r7, r1
 801048a:	429c      	cmp	r4, r3
 801048c:	f04f 0200 	mov.w	r2, #0
 8010490:	d124      	bne.n	80104dc <_dtoa_r+0x64c>
 8010492:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010496:	4bb0      	ldr	r3, [pc, #704]	; (8010758 <_dtoa_r+0x8c8>)
 8010498:	f7ef fe8a 	bl	80001b0 <__adddf3>
 801049c:	4602      	mov	r2, r0
 801049e:	460b      	mov	r3, r1
 80104a0:	4630      	mov	r0, r6
 80104a2:	4639      	mov	r1, r7
 80104a4:	f7f0 faca 	bl	8000a3c <__aeabi_dcmpgt>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d163      	bne.n	8010574 <_dtoa_r+0x6e4>
 80104ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80104b0:	2000      	movs	r0, #0
 80104b2:	49a9      	ldr	r1, [pc, #676]	; (8010758 <_dtoa_r+0x8c8>)
 80104b4:	f7ef fe7a 	bl	80001ac <__aeabi_dsub>
 80104b8:	4602      	mov	r2, r0
 80104ba:	460b      	mov	r3, r1
 80104bc:	4630      	mov	r0, r6
 80104be:	4639      	mov	r1, r7
 80104c0:	f7f0 fa9e 	bl	8000a00 <__aeabi_dcmplt>
 80104c4:	2800      	cmp	r0, #0
 80104c6:	f43f af1d 	beq.w	8010304 <_dtoa_r+0x474>
 80104ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80104cc:	1e7b      	subs	r3, r7, #1
 80104ce:	9314      	str	r3, [sp, #80]	; 0x50
 80104d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80104d4:	2b30      	cmp	r3, #48	; 0x30
 80104d6:	d0f8      	beq.n	80104ca <_dtoa_r+0x63a>
 80104d8:	46c2      	mov	sl, r8
 80104da:	e03b      	b.n	8010554 <_dtoa_r+0x6c4>
 80104dc:	4b9f      	ldr	r3, [pc, #636]	; (801075c <_dtoa_r+0x8cc>)
 80104de:	f7f0 f81d 	bl	800051c <__aeabi_dmul>
 80104e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104e6:	e7bc      	b.n	8010462 <_dtoa_r+0x5d2>
 80104e8:	9f03      	ldr	r7, [sp, #12]
 80104ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80104ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80104f2:	4640      	mov	r0, r8
 80104f4:	4649      	mov	r1, r9
 80104f6:	f7f0 f93b 	bl	8000770 <__aeabi_ddiv>
 80104fa:	f7f0 fabf 	bl	8000a7c <__aeabi_d2iz>
 80104fe:	4604      	mov	r4, r0
 8010500:	f7ef ffa2 	bl	8000448 <__aeabi_i2d>
 8010504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010508:	f7f0 f808 	bl	800051c <__aeabi_dmul>
 801050c:	4602      	mov	r2, r0
 801050e:	460b      	mov	r3, r1
 8010510:	4640      	mov	r0, r8
 8010512:	4649      	mov	r1, r9
 8010514:	f7ef fe4a 	bl	80001ac <__aeabi_dsub>
 8010518:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801051c:	f807 6b01 	strb.w	r6, [r7], #1
 8010520:	9e03      	ldr	r6, [sp, #12]
 8010522:	f8dd c020 	ldr.w	ip, [sp, #32]
 8010526:	1bbe      	subs	r6, r7, r6
 8010528:	45b4      	cmp	ip, r6
 801052a:	4602      	mov	r2, r0
 801052c:	460b      	mov	r3, r1
 801052e:	d136      	bne.n	801059e <_dtoa_r+0x70e>
 8010530:	f7ef fe3e 	bl	80001b0 <__adddf3>
 8010534:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010538:	4680      	mov	r8, r0
 801053a:	4689      	mov	r9, r1
 801053c:	f7f0 fa7e 	bl	8000a3c <__aeabi_dcmpgt>
 8010540:	bb58      	cbnz	r0, 801059a <_dtoa_r+0x70a>
 8010542:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010546:	4640      	mov	r0, r8
 8010548:	4649      	mov	r1, r9
 801054a:	f7f0 fa4f 	bl	80009ec <__aeabi_dcmpeq>
 801054e:	b108      	cbz	r0, 8010554 <_dtoa_r+0x6c4>
 8010550:	07e1      	lsls	r1, r4, #31
 8010552:	d422      	bmi.n	801059a <_dtoa_r+0x70a>
 8010554:	4628      	mov	r0, r5
 8010556:	4659      	mov	r1, fp
 8010558:	f000 fe6c 	bl	8011234 <_Bfree>
 801055c:	2300      	movs	r3, #0
 801055e:	703b      	strb	r3, [r7, #0]
 8010560:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010562:	f10a 0001 	add.w	r0, sl, #1
 8010566:	6018      	str	r0, [r3, #0]
 8010568:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801056a:	2b00      	cmp	r3, #0
 801056c:	f43f acde 	beq.w	800ff2c <_dtoa_r+0x9c>
 8010570:	601f      	str	r7, [r3, #0]
 8010572:	e4db      	b.n	800ff2c <_dtoa_r+0x9c>
 8010574:	4627      	mov	r7, r4
 8010576:	463b      	mov	r3, r7
 8010578:	461f      	mov	r7, r3
 801057a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801057e:	2a39      	cmp	r2, #57	; 0x39
 8010580:	d107      	bne.n	8010592 <_dtoa_r+0x702>
 8010582:	9a03      	ldr	r2, [sp, #12]
 8010584:	429a      	cmp	r2, r3
 8010586:	d1f7      	bne.n	8010578 <_dtoa_r+0x6e8>
 8010588:	2230      	movs	r2, #48	; 0x30
 801058a:	9903      	ldr	r1, [sp, #12]
 801058c:	f108 0801 	add.w	r8, r8, #1
 8010590:	700a      	strb	r2, [r1, #0]
 8010592:	781a      	ldrb	r2, [r3, #0]
 8010594:	3201      	adds	r2, #1
 8010596:	701a      	strb	r2, [r3, #0]
 8010598:	e79e      	b.n	80104d8 <_dtoa_r+0x648>
 801059a:	46d0      	mov	r8, sl
 801059c:	e7eb      	b.n	8010576 <_dtoa_r+0x6e6>
 801059e:	2200      	movs	r2, #0
 80105a0:	4b6e      	ldr	r3, [pc, #440]	; (801075c <_dtoa_r+0x8cc>)
 80105a2:	f7ef ffbb 	bl	800051c <__aeabi_dmul>
 80105a6:	2200      	movs	r2, #0
 80105a8:	2300      	movs	r3, #0
 80105aa:	4680      	mov	r8, r0
 80105ac:	4689      	mov	r9, r1
 80105ae:	f7f0 fa1d 	bl	80009ec <__aeabi_dcmpeq>
 80105b2:	2800      	cmp	r0, #0
 80105b4:	d09b      	beq.n	80104ee <_dtoa_r+0x65e>
 80105b6:	e7cd      	b.n	8010554 <_dtoa_r+0x6c4>
 80105b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80105ba:	2a00      	cmp	r2, #0
 80105bc:	f000 80d0 	beq.w	8010760 <_dtoa_r+0x8d0>
 80105c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80105c2:	2a01      	cmp	r2, #1
 80105c4:	f300 80ae 	bgt.w	8010724 <_dtoa_r+0x894>
 80105c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80105ca:	2a00      	cmp	r2, #0
 80105cc:	f000 80a6 	beq.w	801071c <_dtoa_r+0x88c>
 80105d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80105d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80105d6:	9f06      	ldr	r7, [sp, #24]
 80105d8:	9a06      	ldr	r2, [sp, #24]
 80105da:	2101      	movs	r1, #1
 80105dc:	441a      	add	r2, r3
 80105de:	9206      	str	r2, [sp, #24]
 80105e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105e2:	4628      	mov	r0, r5
 80105e4:	441a      	add	r2, r3
 80105e6:	9209      	str	r2, [sp, #36]	; 0x24
 80105e8:	f000 ff24 	bl	8011434 <__i2b>
 80105ec:	4606      	mov	r6, r0
 80105ee:	2f00      	cmp	r7, #0
 80105f0:	dd0c      	ble.n	801060c <_dtoa_r+0x77c>
 80105f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	dd09      	ble.n	801060c <_dtoa_r+0x77c>
 80105f8:	42bb      	cmp	r3, r7
 80105fa:	bfa8      	it	ge
 80105fc:	463b      	movge	r3, r7
 80105fe:	9a06      	ldr	r2, [sp, #24]
 8010600:	1aff      	subs	r7, r7, r3
 8010602:	1ad2      	subs	r2, r2, r3
 8010604:	9206      	str	r2, [sp, #24]
 8010606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	9309      	str	r3, [sp, #36]	; 0x24
 801060c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801060e:	b1f3      	cbz	r3, 801064e <_dtoa_r+0x7be>
 8010610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010612:	2b00      	cmp	r3, #0
 8010614:	f000 80a8 	beq.w	8010768 <_dtoa_r+0x8d8>
 8010618:	2c00      	cmp	r4, #0
 801061a:	dd10      	ble.n	801063e <_dtoa_r+0x7ae>
 801061c:	4631      	mov	r1, r6
 801061e:	4622      	mov	r2, r4
 8010620:	4628      	mov	r0, r5
 8010622:	f000 ffc5 	bl	80115b0 <__pow5mult>
 8010626:	465a      	mov	r2, fp
 8010628:	4601      	mov	r1, r0
 801062a:	4606      	mov	r6, r0
 801062c:	4628      	mov	r0, r5
 801062e:	f000 ff17 	bl	8011460 <__multiply>
 8010632:	4680      	mov	r8, r0
 8010634:	4659      	mov	r1, fp
 8010636:	4628      	mov	r0, r5
 8010638:	f000 fdfc 	bl	8011234 <_Bfree>
 801063c:	46c3      	mov	fp, r8
 801063e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010640:	1b1a      	subs	r2, r3, r4
 8010642:	d004      	beq.n	801064e <_dtoa_r+0x7be>
 8010644:	4659      	mov	r1, fp
 8010646:	4628      	mov	r0, r5
 8010648:	f000 ffb2 	bl	80115b0 <__pow5mult>
 801064c:	4683      	mov	fp, r0
 801064e:	2101      	movs	r1, #1
 8010650:	4628      	mov	r0, r5
 8010652:	f000 feef 	bl	8011434 <__i2b>
 8010656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010658:	4604      	mov	r4, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	f340 8086 	ble.w	801076c <_dtoa_r+0x8dc>
 8010660:	461a      	mov	r2, r3
 8010662:	4601      	mov	r1, r0
 8010664:	4628      	mov	r0, r5
 8010666:	f000 ffa3 	bl	80115b0 <__pow5mult>
 801066a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801066c:	4604      	mov	r4, r0
 801066e:	2b01      	cmp	r3, #1
 8010670:	dd7f      	ble.n	8010772 <_dtoa_r+0x8e2>
 8010672:	f04f 0800 	mov.w	r8, #0
 8010676:	6923      	ldr	r3, [r4, #16]
 8010678:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801067c:	6918      	ldr	r0, [r3, #16]
 801067e:	f000 fe8b 	bl	8011398 <__hi0bits>
 8010682:	f1c0 0020 	rsb	r0, r0, #32
 8010686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010688:	4418      	add	r0, r3
 801068a:	f010 001f 	ands.w	r0, r0, #31
 801068e:	f000 8092 	beq.w	80107b6 <_dtoa_r+0x926>
 8010692:	f1c0 0320 	rsb	r3, r0, #32
 8010696:	2b04      	cmp	r3, #4
 8010698:	f340 808a 	ble.w	80107b0 <_dtoa_r+0x920>
 801069c:	f1c0 001c 	rsb	r0, r0, #28
 80106a0:	9b06      	ldr	r3, [sp, #24]
 80106a2:	4407      	add	r7, r0
 80106a4:	4403      	add	r3, r0
 80106a6:	9306      	str	r3, [sp, #24]
 80106a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106aa:	4403      	add	r3, r0
 80106ac:	9309      	str	r3, [sp, #36]	; 0x24
 80106ae:	9b06      	ldr	r3, [sp, #24]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	dd05      	ble.n	80106c0 <_dtoa_r+0x830>
 80106b4:	4659      	mov	r1, fp
 80106b6:	461a      	mov	r2, r3
 80106b8:	4628      	mov	r0, r5
 80106ba:	f000 ffd3 	bl	8011664 <__lshift>
 80106be:	4683      	mov	fp, r0
 80106c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	dd05      	ble.n	80106d2 <_dtoa_r+0x842>
 80106c6:	4621      	mov	r1, r4
 80106c8:	461a      	mov	r2, r3
 80106ca:	4628      	mov	r0, r5
 80106cc:	f000 ffca 	bl	8011664 <__lshift>
 80106d0:	4604      	mov	r4, r0
 80106d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d070      	beq.n	80107ba <_dtoa_r+0x92a>
 80106d8:	4621      	mov	r1, r4
 80106da:	4658      	mov	r0, fp
 80106dc:	f001 f832 	bl	8011744 <__mcmp>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	da6a      	bge.n	80107ba <_dtoa_r+0x92a>
 80106e4:	2300      	movs	r3, #0
 80106e6:	4659      	mov	r1, fp
 80106e8:	220a      	movs	r2, #10
 80106ea:	4628      	mov	r0, r5
 80106ec:	f000 fdc4 	bl	8011278 <__multadd>
 80106f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106f2:	4683      	mov	fp, r0
 80106f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f000 8194 	beq.w	8010a26 <_dtoa_r+0xb96>
 80106fe:	4631      	mov	r1, r6
 8010700:	2300      	movs	r3, #0
 8010702:	220a      	movs	r2, #10
 8010704:	4628      	mov	r0, r5
 8010706:	f000 fdb7 	bl	8011278 <__multadd>
 801070a:	f1b9 0f00 	cmp.w	r9, #0
 801070e:	4606      	mov	r6, r0
 8010710:	f300 8093 	bgt.w	801083a <_dtoa_r+0x9aa>
 8010714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010716:	2b02      	cmp	r3, #2
 8010718:	dc57      	bgt.n	80107ca <_dtoa_r+0x93a>
 801071a:	e08e      	b.n	801083a <_dtoa_r+0x9aa>
 801071c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801071e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010722:	e757      	b.n	80105d4 <_dtoa_r+0x744>
 8010724:	9b08      	ldr	r3, [sp, #32]
 8010726:	1e5c      	subs	r4, r3, #1
 8010728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801072a:	42a3      	cmp	r3, r4
 801072c:	bfb7      	itett	lt
 801072e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010730:	1b1c      	subge	r4, r3, r4
 8010732:	1ae2      	sublt	r2, r4, r3
 8010734:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010736:	bfbe      	ittt	lt
 8010738:	940a      	strlt	r4, [sp, #40]	; 0x28
 801073a:	189b      	addlt	r3, r3, r2
 801073c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801073e:	9b08      	ldr	r3, [sp, #32]
 8010740:	bfb8      	it	lt
 8010742:	2400      	movlt	r4, #0
 8010744:	2b00      	cmp	r3, #0
 8010746:	bfbb      	ittet	lt
 8010748:	9b06      	ldrlt	r3, [sp, #24]
 801074a:	9a08      	ldrlt	r2, [sp, #32]
 801074c:	9f06      	ldrge	r7, [sp, #24]
 801074e:	1a9f      	sublt	r7, r3, r2
 8010750:	bfac      	ite	ge
 8010752:	9b08      	ldrge	r3, [sp, #32]
 8010754:	2300      	movlt	r3, #0
 8010756:	e73f      	b.n	80105d8 <_dtoa_r+0x748>
 8010758:	3fe00000 	.word	0x3fe00000
 801075c:	40240000 	.word	0x40240000
 8010760:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010762:	9f06      	ldr	r7, [sp, #24]
 8010764:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8010766:	e742      	b.n	80105ee <_dtoa_r+0x75e>
 8010768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801076a:	e76b      	b.n	8010644 <_dtoa_r+0x7b4>
 801076c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801076e:	2b01      	cmp	r3, #1
 8010770:	dc19      	bgt.n	80107a6 <_dtoa_r+0x916>
 8010772:	9b04      	ldr	r3, [sp, #16]
 8010774:	b9bb      	cbnz	r3, 80107a6 <_dtoa_r+0x916>
 8010776:	9b05      	ldr	r3, [sp, #20]
 8010778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801077c:	b99b      	cbnz	r3, 80107a6 <_dtoa_r+0x916>
 801077e:	9b05      	ldr	r3, [sp, #20]
 8010780:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010784:	0d1b      	lsrs	r3, r3, #20
 8010786:	051b      	lsls	r3, r3, #20
 8010788:	b183      	cbz	r3, 80107ac <_dtoa_r+0x91c>
 801078a:	f04f 0801 	mov.w	r8, #1
 801078e:	9b06      	ldr	r3, [sp, #24]
 8010790:	3301      	adds	r3, #1
 8010792:	9306      	str	r3, [sp, #24]
 8010794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010796:	3301      	adds	r3, #1
 8010798:	9309      	str	r3, [sp, #36]	; 0x24
 801079a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801079c:	2b00      	cmp	r3, #0
 801079e:	f47f af6a 	bne.w	8010676 <_dtoa_r+0x7e6>
 80107a2:	2001      	movs	r0, #1
 80107a4:	e76f      	b.n	8010686 <_dtoa_r+0x7f6>
 80107a6:	f04f 0800 	mov.w	r8, #0
 80107aa:	e7f6      	b.n	801079a <_dtoa_r+0x90a>
 80107ac:	4698      	mov	r8, r3
 80107ae:	e7f4      	b.n	801079a <_dtoa_r+0x90a>
 80107b0:	f43f af7d 	beq.w	80106ae <_dtoa_r+0x81e>
 80107b4:	4618      	mov	r0, r3
 80107b6:	301c      	adds	r0, #28
 80107b8:	e772      	b.n	80106a0 <_dtoa_r+0x810>
 80107ba:	9b08      	ldr	r3, [sp, #32]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	dc36      	bgt.n	801082e <_dtoa_r+0x99e>
 80107c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80107c2:	2b02      	cmp	r3, #2
 80107c4:	dd33      	ble.n	801082e <_dtoa_r+0x99e>
 80107c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80107ca:	f1b9 0f00 	cmp.w	r9, #0
 80107ce:	d10d      	bne.n	80107ec <_dtoa_r+0x95c>
 80107d0:	4621      	mov	r1, r4
 80107d2:	464b      	mov	r3, r9
 80107d4:	2205      	movs	r2, #5
 80107d6:	4628      	mov	r0, r5
 80107d8:	f000 fd4e 	bl	8011278 <__multadd>
 80107dc:	4601      	mov	r1, r0
 80107de:	4604      	mov	r4, r0
 80107e0:	4658      	mov	r0, fp
 80107e2:	f000 ffaf 	bl	8011744 <__mcmp>
 80107e6:	2800      	cmp	r0, #0
 80107e8:	f73f adb8 	bgt.w	801035c <_dtoa_r+0x4cc>
 80107ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80107ee:	9f03      	ldr	r7, [sp, #12]
 80107f0:	ea6f 0a03 	mvn.w	sl, r3
 80107f4:	f04f 0800 	mov.w	r8, #0
 80107f8:	4621      	mov	r1, r4
 80107fa:	4628      	mov	r0, r5
 80107fc:	f000 fd1a 	bl	8011234 <_Bfree>
 8010800:	2e00      	cmp	r6, #0
 8010802:	f43f aea7 	beq.w	8010554 <_dtoa_r+0x6c4>
 8010806:	f1b8 0f00 	cmp.w	r8, #0
 801080a:	d005      	beq.n	8010818 <_dtoa_r+0x988>
 801080c:	45b0      	cmp	r8, r6
 801080e:	d003      	beq.n	8010818 <_dtoa_r+0x988>
 8010810:	4641      	mov	r1, r8
 8010812:	4628      	mov	r0, r5
 8010814:	f000 fd0e 	bl	8011234 <_Bfree>
 8010818:	4631      	mov	r1, r6
 801081a:	4628      	mov	r0, r5
 801081c:	f000 fd0a 	bl	8011234 <_Bfree>
 8010820:	e698      	b.n	8010554 <_dtoa_r+0x6c4>
 8010822:	2400      	movs	r4, #0
 8010824:	4626      	mov	r6, r4
 8010826:	e7e1      	b.n	80107ec <_dtoa_r+0x95c>
 8010828:	46c2      	mov	sl, r8
 801082a:	4626      	mov	r6, r4
 801082c:	e596      	b.n	801035c <_dtoa_r+0x4cc>
 801082e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010830:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010834:	2b00      	cmp	r3, #0
 8010836:	f000 80fd 	beq.w	8010a34 <_dtoa_r+0xba4>
 801083a:	2f00      	cmp	r7, #0
 801083c:	dd05      	ble.n	801084a <_dtoa_r+0x9ba>
 801083e:	4631      	mov	r1, r6
 8010840:	463a      	mov	r2, r7
 8010842:	4628      	mov	r0, r5
 8010844:	f000 ff0e 	bl	8011664 <__lshift>
 8010848:	4606      	mov	r6, r0
 801084a:	f1b8 0f00 	cmp.w	r8, #0
 801084e:	d05c      	beq.n	801090a <_dtoa_r+0xa7a>
 8010850:	4628      	mov	r0, r5
 8010852:	6871      	ldr	r1, [r6, #4]
 8010854:	f000 fcae 	bl	80111b4 <_Balloc>
 8010858:	4607      	mov	r7, r0
 801085a:	b928      	cbnz	r0, 8010868 <_dtoa_r+0x9d8>
 801085c:	4602      	mov	r2, r0
 801085e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010862:	4b7f      	ldr	r3, [pc, #508]	; (8010a60 <_dtoa_r+0xbd0>)
 8010864:	f7ff bb28 	b.w	800feb8 <_dtoa_r+0x28>
 8010868:	6932      	ldr	r2, [r6, #16]
 801086a:	f106 010c 	add.w	r1, r6, #12
 801086e:	3202      	adds	r2, #2
 8010870:	0092      	lsls	r2, r2, #2
 8010872:	300c      	adds	r0, #12
 8010874:	f7fd ff4e 	bl	800e714 <memcpy>
 8010878:	2201      	movs	r2, #1
 801087a:	4639      	mov	r1, r7
 801087c:	4628      	mov	r0, r5
 801087e:	f000 fef1 	bl	8011664 <__lshift>
 8010882:	46b0      	mov	r8, r6
 8010884:	4606      	mov	r6, r0
 8010886:	9b03      	ldr	r3, [sp, #12]
 8010888:	3301      	adds	r3, #1
 801088a:	9308      	str	r3, [sp, #32]
 801088c:	9b03      	ldr	r3, [sp, #12]
 801088e:	444b      	add	r3, r9
 8010890:	930a      	str	r3, [sp, #40]	; 0x28
 8010892:	9b04      	ldr	r3, [sp, #16]
 8010894:	f003 0301 	and.w	r3, r3, #1
 8010898:	9309      	str	r3, [sp, #36]	; 0x24
 801089a:	9b08      	ldr	r3, [sp, #32]
 801089c:	4621      	mov	r1, r4
 801089e:	3b01      	subs	r3, #1
 80108a0:	4658      	mov	r0, fp
 80108a2:	9304      	str	r3, [sp, #16]
 80108a4:	f7ff fa66 	bl	800fd74 <quorem>
 80108a8:	4603      	mov	r3, r0
 80108aa:	4641      	mov	r1, r8
 80108ac:	3330      	adds	r3, #48	; 0x30
 80108ae:	9006      	str	r0, [sp, #24]
 80108b0:	4658      	mov	r0, fp
 80108b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80108b4:	f000 ff46 	bl	8011744 <__mcmp>
 80108b8:	4632      	mov	r2, r6
 80108ba:	4681      	mov	r9, r0
 80108bc:	4621      	mov	r1, r4
 80108be:	4628      	mov	r0, r5
 80108c0:	f000 ff5c 	bl	801177c <__mdiff>
 80108c4:	68c2      	ldr	r2, [r0, #12]
 80108c6:	4607      	mov	r7, r0
 80108c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108ca:	bb02      	cbnz	r2, 801090e <_dtoa_r+0xa7e>
 80108cc:	4601      	mov	r1, r0
 80108ce:	4658      	mov	r0, fp
 80108d0:	f000 ff38 	bl	8011744 <__mcmp>
 80108d4:	4602      	mov	r2, r0
 80108d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108d8:	4639      	mov	r1, r7
 80108da:	4628      	mov	r0, r5
 80108dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80108e0:	f000 fca8 	bl	8011234 <_Bfree>
 80108e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80108e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108e8:	9f08      	ldr	r7, [sp, #32]
 80108ea:	ea43 0102 	orr.w	r1, r3, r2
 80108ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108f0:	430b      	orrs	r3, r1
 80108f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108f4:	d10d      	bne.n	8010912 <_dtoa_r+0xa82>
 80108f6:	2b39      	cmp	r3, #57	; 0x39
 80108f8:	d029      	beq.n	801094e <_dtoa_r+0xabe>
 80108fa:	f1b9 0f00 	cmp.w	r9, #0
 80108fe:	dd01      	ble.n	8010904 <_dtoa_r+0xa74>
 8010900:	9b06      	ldr	r3, [sp, #24]
 8010902:	3331      	adds	r3, #49	; 0x31
 8010904:	9a04      	ldr	r2, [sp, #16]
 8010906:	7013      	strb	r3, [r2, #0]
 8010908:	e776      	b.n	80107f8 <_dtoa_r+0x968>
 801090a:	4630      	mov	r0, r6
 801090c:	e7b9      	b.n	8010882 <_dtoa_r+0x9f2>
 801090e:	2201      	movs	r2, #1
 8010910:	e7e2      	b.n	80108d8 <_dtoa_r+0xa48>
 8010912:	f1b9 0f00 	cmp.w	r9, #0
 8010916:	db06      	blt.n	8010926 <_dtoa_r+0xa96>
 8010918:	9922      	ldr	r1, [sp, #136]	; 0x88
 801091a:	ea41 0909 	orr.w	r9, r1, r9
 801091e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010920:	ea59 0101 	orrs.w	r1, r9, r1
 8010924:	d120      	bne.n	8010968 <_dtoa_r+0xad8>
 8010926:	2a00      	cmp	r2, #0
 8010928:	ddec      	ble.n	8010904 <_dtoa_r+0xa74>
 801092a:	4659      	mov	r1, fp
 801092c:	2201      	movs	r2, #1
 801092e:	4628      	mov	r0, r5
 8010930:	9308      	str	r3, [sp, #32]
 8010932:	f000 fe97 	bl	8011664 <__lshift>
 8010936:	4621      	mov	r1, r4
 8010938:	4683      	mov	fp, r0
 801093a:	f000 ff03 	bl	8011744 <__mcmp>
 801093e:	2800      	cmp	r0, #0
 8010940:	9b08      	ldr	r3, [sp, #32]
 8010942:	dc02      	bgt.n	801094a <_dtoa_r+0xaba>
 8010944:	d1de      	bne.n	8010904 <_dtoa_r+0xa74>
 8010946:	07da      	lsls	r2, r3, #31
 8010948:	d5dc      	bpl.n	8010904 <_dtoa_r+0xa74>
 801094a:	2b39      	cmp	r3, #57	; 0x39
 801094c:	d1d8      	bne.n	8010900 <_dtoa_r+0xa70>
 801094e:	2339      	movs	r3, #57	; 0x39
 8010950:	9a04      	ldr	r2, [sp, #16]
 8010952:	7013      	strb	r3, [r2, #0]
 8010954:	463b      	mov	r3, r7
 8010956:	461f      	mov	r7, r3
 8010958:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801095c:	3b01      	subs	r3, #1
 801095e:	2a39      	cmp	r2, #57	; 0x39
 8010960:	d050      	beq.n	8010a04 <_dtoa_r+0xb74>
 8010962:	3201      	adds	r2, #1
 8010964:	701a      	strb	r2, [r3, #0]
 8010966:	e747      	b.n	80107f8 <_dtoa_r+0x968>
 8010968:	2a00      	cmp	r2, #0
 801096a:	dd03      	ble.n	8010974 <_dtoa_r+0xae4>
 801096c:	2b39      	cmp	r3, #57	; 0x39
 801096e:	d0ee      	beq.n	801094e <_dtoa_r+0xabe>
 8010970:	3301      	adds	r3, #1
 8010972:	e7c7      	b.n	8010904 <_dtoa_r+0xa74>
 8010974:	9a08      	ldr	r2, [sp, #32]
 8010976:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010978:	f802 3c01 	strb.w	r3, [r2, #-1]
 801097c:	428a      	cmp	r2, r1
 801097e:	d02a      	beq.n	80109d6 <_dtoa_r+0xb46>
 8010980:	4659      	mov	r1, fp
 8010982:	2300      	movs	r3, #0
 8010984:	220a      	movs	r2, #10
 8010986:	4628      	mov	r0, r5
 8010988:	f000 fc76 	bl	8011278 <__multadd>
 801098c:	45b0      	cmp	r8, r6
 801098e:	4683      	mov	fp, r0
 8010990:	f04f 0300 	mov.w	r3, #0
 8010994:	f04f 020a 	mov.w	r2, #10
 8010998:	4641      	mov	r1, r8
 801099a:	4628      	mov	r0, r5
 801099c:	d107      	bne.n	80109ae <_dtoa_r+0xb1e>
 801099e:	f000 fc6b 	bl	8011278 <__multadd>
 80109a2:	4680      	mov	r8, r0
 80109a4:	4606      	mov	r6, r0
 80109a6:	9b08      	ldr	r3, [sp, #32]
 80109a8:	3301      	adds	r3, #1
 80109aa:	9308      	str	r3, [sp, #32]
 80109ac:	e775      	b.n	801089a <_dtoa_r+0xa0a>
 80109ae:	f000 fc63 	bl	8011278 <__multadd>
 80109b2:	4631      	mov	r1, r6
 80109b4:	4680      	mov	r8, r0
 80109b6:	2300      	movs	r3, #0
 80109b8:	220a      	movs	r2, #10
 80109ba:	4628      	mov	r0, r5
 80109bc:	f000 fc5c 	bl	8011278 <__multadd>
 80109c0:	4606      	mov	r6, r0
 80109c2:	e7f0      	b.n	80109a6 <_dtoa_r+0xb16>
 80109c4:	f1b9 0f00 	cmp.w	r9, #0
 80109c8:	bfcc      	ite	gt
 80109ca:	464f      	movgt	r7, r9
 80109cc:	2701      	movle	r7, #1
 80109ce:	f04f 0800 	mov.w	r8, #0
 80109d2:	9a03      	ldr	r2, [sp, #12]
 80109d4:	4417      	add	r7, r2
 80109d6:	4659      	mov	r1, fp
 80109d8:	2201      	movs	r2, #1
 80109da:	4628      	mov	r0, r5
 80109dc:	9308      	str	r3, [sp, #32]
 80109de:	f000 fe41 	bl	8011664 <__lshift>
 80109e2:	4621      	mov	r1, r4
 80109e4:	4683      	mov	fp, r0
 80109e6:	f000 fead 	bl	8011744 <__mcmp>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	dcb2      	bgt.n	8010954 <_dtoa_r+0xac4>
 80109ee:	d102      	bne.n	80109f6 <_dtoa_r+0xb66>
 80109f0:	9b08      	ldr	r3, [sp, #32]
 80109f2:	07db      	lsls	r3, r3, #31
 80109f4:	d4ae      	bmi.n	8010954 <_dtoa_r+0xac4>
 80109f6:	463b      	mov	r3, r7
 80109f8:	461f      	mov	r7, r3
 80109fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109fe:	2a30      	cmp	r2, #48	; 0x30
 8010a00:	d0fa      	beq.n	80109f8 <_dtoa_r+0xb68>
 8010a02:	e6f9      	b.n	80107f8 <_dtoa_r+0x968>
 8010a04:	9a03      	ldr	r2, [sp, #12]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d1a5      	bne.n	8010956 <_dtoa_r+0xac6>
 8010a0a:	2331      	movs	r3, #49	; 0x31
 8010a0c:	f10a 0a01 	add.w	sl, sl, #1
 8010a10:	e779      	b.n	8010906 <_dtoa_r+0xa76>
 8010a12:	4b14      	ldr	r3, [pc, #80]	; (8010a64 <_dtoa_r+0xbd4>)
 8010a14:	f7ff baa8 	b.w	800ff68 <_dtoa_r+0xd8>
 8010a18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	f47f aa81 	bne.w	800ff22 <_dtoa_r+0x92>
 8010a20:	4b11      	ldr	r3, [pc, #68]	; (8010a68 <_dtoa_r+0xbd8>)
 8010a22:	f7ff baa1 	b.w	800ff68 <_dtoa_r+0xd8>
 8010a26:	f1b9 0f00 	cmp.w	r9, #0
 8010a2a:	dc03      	bgt.n	8010a34 <_dtoa_r+0xba4>
 8010a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a2e:	2b02      	cmp	r3, #2
 8010a30:	f73f aecb 	bgt.w	80107ca <_dtoa_r+0x93a>
 8010a34:	9f03      	ldr	r7, [sp, #12]
 8010a36:	4621      	mov	r1, r4
 8010a38:	4658      	mov	r0, fp
 8010a3a:	f7ff f99b 	bl	800fd74 <quorem>
 8010a3e:	9a03      	ldr	r2, [sp, #12]
 8010a40:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010a44:	f807 3b01 	strb.w	r3, [r7], #1
 8010a48:	1aba      	subs	r2, r7, r2
 8010a4a:	4591      	cmp	r9, r2
 8010a4c:	ddba      	ble.n	80109c4 <_dtoa_r+0xb34>
 8010a4e:	4659      	mov	r1, fp
 8010a50:	2300      	movs	r3, #0
 8010a52:	220a      	movs	r2, #10
 8010a54:	4628      	mov	r0, r5
 8010a56:	f000 fc0f 	bl	8011278 <__multadd>
 8010a5a:	4683      	mov	fp, r0
 8010a5c:	e7eb      	b.n	8010a36 <_dtoa_r+0xba6>
 8010a5e:	bf00      	nop
 8010a60:	08012ee0 	.word	0x08012ee0
 8010a64:	08012d50 	.word	0x08012d50
 8010a68:	08012e78 	.word	0x08012e78

08010a6c <fiprintf>:
 8010a6c:	b40e      	push	{r1, r2, r3}
 8010a6e:	b503      	push	{r0, r1, lr}
 8010a70:	4601      	mov	r1, r0
 8010a72:	ab03      	add	r3, sp, #12
 8010a74:	4805      	ldr	r0, [pc, #20]	; (8010a8c <fiprintf+0x20>)
 8010a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a7a:	6800      	ldr	r0, [r0, #0]
 8010a7c:	9301      	str	r3, [sp, #4]
 8010a7e:	f001 fac5 	bl	801200c <_vfiprintf_r>
 8010a82:	b002      	add	sp, #8
 8010a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a88:	b003      	add	sp, #12
 8010a8a:	4770      	bx	lr
 8010a8c:	200008bc 	.word	0x200008bc

08010a90 <rshift>:
 8010a90:	6903      	ldr	r3, [r0, #16]
 8010a92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010a9a:	f100 0414 	add.w	r4, r0, #20
 8010a9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010aa2:	dd46      	ble.n	8010b32 <rshift+0xa2>
 8010aa4:	f011 011f 	ands.w	r1, r1, #31
 8010aa8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010aac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010ab0:	d10c      	bne.n	8010acc <rshift+0x3c>
 8010ab2:	4629      	mov	r1, r5
 8010ab4:	f100 0710 	add.w	r7, r0, #16
 8010ab8:	42b1      	cmp	r1, r6
 8010aba:	d335      	bcc.n	8010b28 <rshift+0x98>
 8010abc:	1a9b      	subs	r3, r3, r2
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	1eea      	subs	r2, r5, #3
 8010ac2:	4296      	cmp	r6, r2
 8010ac4:	bf38      	it	cc
 8010ac6:	2300      	movcc	r3, #0
 8010ac8:	4423      	add	r3, r4
 8010aca:	e015      	b.n	8010af8 <rshift+0x68>
 8010acc:	46a1      	mov	r9, r4
 8010ace:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010ad2:	f1c1 0820 	rsb	r8, r1, #32
 8010ad6:	40cf      	lsrs	r7, r1
 8010ad8:	f105 0e04 	add.w	lr, r5, #4
 8010adc:	4576      	cmp	r6, lr
 8010ade:	46f4      	mov	ip, lr
 8010ae0:	d816      	bhi.n	8010b10 <rshift+0x80>
 8010ae2:	1a9a      	subs	r2, r3, r2
 8010ae4:	0092      	lsls	r2, r2, #2
 8010ae6:	3a04      	subs	r2, #4
 8010ae8:	3501      	adds	r5, #1
 8010aea:	42ae      	cmp	r6, r5
 8010aec:	bf38      	it	cc
 8010aee:	2200      	movcc	r2, #0
 8010af0:	18a3      	adds	r3, r4, r2
 8010af2:	50a7      	str	r7, [r4, r2]
 8010af4:	b107      	cbz	r7, 8010af8 <rshift+0x68>
 8010af6:	3304      	adds	r3, #4
 8010af8:	42a3      	cmp	r3, r4
 8010afa:	eba3 0204 	sub.w	r2, r3, r4
 8010afe:	bf08      	it	eq
 8010b00:	2300      	moveq	r3, #0
 8010b02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010b06:	6102      	str	r2, [r0, #16]
 8010b08:	bf08      	it	eq
 8010b0a:	6143      	streq	r3, [r0, #20]
 8010b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b10:	f8dc c000 	ldr.w	ip, [ip]
 8010b14:	fa0c fc08 	lsl.w	ip, ip, r8
 8010b18:	ea4c 0707 	orr.w	r7, ip, r7
 8010b1c:	f849 7b04 	str.w	r7, [r9], #4
 8010b20:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010b24:	40cf      	lsrs	r7, r1
 8010b26:	e7d9      	b.n	8010adc <rshift+0x4c>
 8010b28:	f851 cb04 	ldr.w	ip, [r1], #4
 8010b2c:	f847 cf04 	str.w	ip, [r7, #4]!
 8010b30:	e7c2      	b.n	8010ab8 <rshift+0x28>
 8010b32:	4623      	mov	r3, r4
 8010b34:	e7e0      	b.n	8010af8 <rshift+0x68>

08010b36 <__hexdig_fun>:
 8010b36:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010b3a:	2b09      	cmp	r3, #9
 8010b3c:	d802      	bhi.n	8010b44 <__hexdig_fun+0xe>
 8010b3e:	3820      	subs	r0, #32
 8010b40:	b2c0      	uxtb	r0, r0
 8010b42:	4770      	bx	lr
 8010b44:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010b48:	2b05      	cmp	r3, #5
 8010b4a:	d801      	bhi.n	8010b50 <__hexdig_fun+0x1a>
 8010b4c:	3847      	subs	r0, #71	; 0x47
 8010b4e:	e7f7      	b.n	8010b40 <__hexdig_fun+0xa>
 8010b50:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010b54:	2b05      	cmp	r3, #5
 8010b56:	d801      	bhi.n	8010b5c <__hexdig_fun+0x26>
 8010b58:	3827      	subs	r0, #39	; 0x27
 8010b5a:	e7f1      	b.n	8010b40 <__hexdig_fun+0xa>
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	4770      	bx	lr

08010b60 <__gethex>:
 8010b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	b08b      	sub	sp, #44	; 0x2c
 8010b66:	9305      	str	r3, [sp, #20]
 8010b68:	4bb2      	ldr	r3, [pc, #712]	; (8010e34 <__gethex+0x2d4>)
 8010b6a:	9002      	str	r0, [sp, #8]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	468b      	mov	fp, r1
 8010b70:	4618      	mov	r0, r3
 8010b72:	4690      	mov	r8, r2
 8010b74:	9303      	str	r3, [sp, #12]
 8010b76:	f7ef fb0d 	bl	8000194 <strlen>
 8010b7a:	4682      	mov	sl, r0
 8010b7c:	9b03      	ldr	r3, [sp, #12]
 8010b7e:	f8db 2000 	ldr.w	r2, [fp]
 8010b82:	4403      	add	r3, r0
 8010b84:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010b88:	9306      	str	r3, [sp, #24]
 8010b8a:	1c93      	adds	r3, r2, #2
 8010b8c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010b90:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010b94:	32fe      	adds	r2, #254	; 0xfe
 8010b96:	18d1      	adds	r1, r2, r3
 8010b98:	461f      	mov	r7, r3
 8010b9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b9e:	9101      	str	r1, [sp, #4]
 8010ba0:	2830      	cmp	r0, #48	; 0x30
 8010ba2:	d0f8      	beq.n	8010b96 <__gethex+0x36>
 8010ba4:	f7ff ffc7 	bl	8010b36 <__hexdig_fun>
 8010ba8:	4604      	mov	r4, r0
 8010baa:	2800      	cmp	r0, #0
 8010bac:	d13a      	bne.n	8010c24 <__gethex+0xc4>
 8010bae:	4652      	mov	r2, sl
 8010bb0:	4638      	mov	r0, r7
 8010bb2:	9903      	ldr	r1, [sp, #12]
 8010bb4:	f001 fb70 	bl	8012298 <strncmp>
 8010bb8:	4605      	mov	r5, r0
 8010bba:	2800      	cmp	r0, #0
 8010bbc:	d166      	bne.n	8010c8c <__gethex+0x12c>
 8010bbe:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010bc2:	eb07 060a 	add.w	r6, r7, sl
 8010bc6:	f7ff ffb6 	bl	8010b36 <__hexdig_fun>
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d060      	beq.n	8010c90 <__gethex+0x130>
 8010bce:	4633      	mov	r3, r6
 8010bd0:	7818      	ldrb	r0, [r3, #0]
 8010bd2:	461f      	mov	r7, r3
 8010bd4:	2830      	cmp	r0, #48	; 0x30
 8010bd6:	f103 0301 	add.w	r3, r3, #1
 8010bda:	d0f9      	beq.n	8010bd0 <__gethex+0x70>
 8010bdc:	f7ff ffab 	bl	8010b36 <__hexdig_fun>
 8010be0:	2301      	movs	r3, #1
 8010be2:	fab0 f480 	clz	r4, r0
 8010be6:	4635      	mov	r5, r6
 8010be8:	0964      	lsrs	r4, r4, #5
 8010bea:	9301      	str	r3, [sp, #4]
 8010bec:	463a      	mov	r2, r7
 8010bee:	4616      	mov	r6, r2
 8010bf0:	7830      	ldrb	r0, [r6, #0]
 8010bf2:	3201      	adds	r2, #1
 8010bf4:	f7ff ff9f 	bl	8010b36 <__hexdig_fun>
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d1f8      	bne.n	8010bee <__gethex+0x8e>
 8010bfc:	4652      	mov	r2, sl
 8010bfe:	4630      	mov	r0, r6
 8010c00:	9903      	ldr	r1, [sp, #12]
 8010c02:	f001 fb49 	bl	8012298 <strncmp>
 8010c06:	b980      	cbnz	r0, 8010c2a <__gethex+0xca>
 8010c08:	b94d      	cbnz	r5, 8010c1e <__gethex+0xbe>
 8010c0a:	eb06 050a 	add.w	r5, r6, sl
 8010c0e:	462a      	mov	r2, r5
 8010c10:	4616      	mov	r6, r2
 8010c12:	7830      	ldrb	r0, [r6, #0]
 8010c14:	3201      	adds	r2, #1
 8010c16:	f7ff ff8e 	bl	8010b36 <__hexdig_fun>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	d1f8      	bne.n	8010c10 <__gethex+0xb0>
 8010c1e:	1bad      	subs	r5, r5, r6
 8010c20:	00ad      	lsls	r5, r5, #2
 8010c22:	e004      	b.n	8010c2e <__gethex+0xce>
 8010c24:	2400      	movs	r4, #0
 8010c26:	4625      	mov	r5, r4
 8010c28:	e7e0      	b.n	8010bec <__gethex+0x8c>
 8010c2a:	2d00      	cmp	r5, #0
 8010c2c:	d1f7      	bne.n	8010c1e <__gethex+0xbe>
 8010c2e:	7833      	ldrb	r3, [r6, #0]
 8010c30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010c34:	2b50      	cmp	r3, #80	; 0x50
 8010c36:	d139      	bne.n	8010cac <__gethex+0x14c>
 8010c38:	7873      	ldrb	r3, [r6, #1]
 8010c3a:	2b2b      	cmp	r3, #43	; 0x2b
 8010c3c:	d02a      	beq.n	8010c94 <__gethex+0x134>
 8010c3e:	2b2d      	cmp	r3, #45	; 0x2d
 8010c40:	d02c      	beq.n	8010c9c <__gethex+0x13c>
 8010c42:	f04f 0900 	mov.w	r9, #0
 8010c46:	1c71      	adds	r1, r6, #1
 8010c48:	7808      	ldrb	r0, [r1, #0]
 8010c4a:	f7ff ff74 	bl	8010b36 <__hexdig_fun>
 8010c4e:	1e43      	subs	r3, r0, #1
 8010c50:	b2db      	uxtb	r3, r3
 8010c52:	2b18      	cmp	r3, #24
 8010c54:	d82a      	bhi.n	8010cac <__gethex+0x14c>
 8010c56:	f1a0 0210 	sub.w	r2, r0, #16
 8010c5a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010c5e:	f7ff ff6a 	bl	8010b36 <__hexdig_fun>
 8010c62:	1e43      	subs	r3, r0, #1
 8010c64:	b2db      	uxtb	r3, r3
 8010c66:	2b18      	cmp	r3, #24
 8010c68:	d91b      	bls.n	8010ca2 <__gethex+0x142>
 8010c6a:	f1b9 0f00 	cmp.w	r9, #0
 8010c6e:	d000      	beq.n	8010c72 <__gethex+0x112>
 8010c70:	4252      	negs	r2, r2
 8010c72:	4415      	add	r5, r2
 8010c74:	f8cb 1000 	str.w	r1, [fp]
 8010c78:	b1d4      	cbz	r4, 8010cb0 <__gethex+0x150>
 8010c7a:	9b01      	ldr	r3, [sp, #4]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	bf14      	ite	ne
 8010c80:	2700      	movne	r7, #0
 8010c82:	2706      	moveq	r7, #6
 8010c84:	4638      	mov	r0, r7
 8010c86:	b00b      	add	sp, #44	; 0x2c
 8010c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c8c:	463e      	mov	r6, r7
 8010c8e:	4625      	mov	r5, r4
 8010c90:	2401      	movs	r4, #1
 8010c92:	e7cc      	b.n	8010c2e <__gethex+0xce>
 8010c94:	f04f 0900 	mov.w	r9, #0
 8010c98:	1cb1      	adds	r1, r6, #2
 8010c9a:	e7d5      	b.n	8010c48 <__gethex+0xe8>
 8010c9c:	f04f 0901 	mov.w	r9, #1
 8010ca0:	e7fa      	b.n	8010c98 <__gethex+0x138>
 8010ca2:	230a      	movs	r3, #10
 8010ca4:	fb03 0202 	mla	r2, r3, r2, r0
 8010ca8:	3a10      	subs	r2, #16
 8010caa:	e7d6      	b.n	8010c5a <__gethex+0xfa>
 8010cac:	4631      	mov	r1, r6
 8010cae:	e7e1      	b.n	8010c74 <__gethex+0x114>
 8010cb0:	4621      	mov	r1, r4
 8010cb2:	1bf3      	subs	r3, r6, r7
 8010cb4:	3b01      	subs	r3, #1
 8010cb6:	2b07      	cmp	r3, #7
 8010cb8:	dc0a      	bgt.n	8010cd0 <__gethex+0x170>
 8010cba:	9802      	ldr	r0, [sp, #8]
 8010cbc:	f000 fa7a 	bl	80111b4 <_Balloc>
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	b940      	cbnz	r0, 8010cd6 <__gethex+0x176>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	21de      	movs	r1, #222	; 0xde
 8010cc8:	4b5b      	ldr	r3, [pc, #364]	; (8010e38 <__gethex+0x2d8>)
 8010cca:	485c      	ldr	r0, [pc, #368]	; (8010e3c <__gethex+0x2dc>)
 8010ccc:	f7ff f834 	bl	800fd38 <__assert_func>
 8010cd0:	3101      	adds	r1, #1
 8010cd2:	105b      	asrs	r3, r3, #1
 8010cd4:	e7ef      	b.n	8010cb6 <__gethex+0x156>
 8010cd6:	f04f 0b00 	mov.w	fp, #0
 8010cda:	f100 0914 	add.w	r9, r0, #20
 8010cde:	f1ca 0301 	rsb	r3, sl, #1
 8010ce2:	f8cd 9010 	str.w	r9, [sp, #16]
 8010ce6:	f8cd b004 	str.w	fp, [sp, #4]
 8010cea:	9308      	str	r3, [sp, #32]
 8010cec:	42b7      	cmp	r7, r6
 8010cee:	d33f      	bcc.n	8010d70 <__gethex+0x210>
 8010cf0:	9f04      	ldr	r7, [sp, #16]
 8010cf2:	9b01      	ldr	r3, [sp, #4]
 8010cf4:	f847 3b04 	str.w	r3, [r7], #4
 8010cf8:	eba7 0709 	sub.w	r7, r7, r9
 8010cfc:	10bf      	asrs	r7, r7, #2
 8010cfe:	6127      	str	r7, [r4, #16]
 8010d00:	4618      	mov	r0, r3
 8010d02:	f000 fb49 	bl	8011398 <__hi0bits>
 8010d06:	017f      	lsls	r7, r7, #5
 8010d08:	f8d8 6000 	ldr.w	r6, [r8]
 8010d0c:	1a3f      	subs	r7, r7, r0
 8010d0e:	42b7      	cmp	r7, r6
 8010d10:	dd62      	ble.n	8010dd8 <__gethex+0x278>
 8010d12:	1bbf      	subs	r7, r7, r6
 8010d14:	4639      	mov	r1, r7
 8010d16:	4620      	mov	r0, r4
 8010d18:	f000 fee3 	bl	8011ae2 <__any_on>
 8010d1c:	4682      	mov	sl, r0
 8010d1e:	b1a8      	cbz	r0, 8010d4c <__gethex+0x1ec>
 8010d20:	f04f 0a01 	mov.w	sl, #1
 8010d24:	1e7b      	subs	r3, r7, #1
 8010d26:	1159      	asrs	r1, r3, #5
 8010d28:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010d2c:	f003 021f 	and.w	r2, r3, #31
 8010d30:	fa0a f202 	lsl.w	r2, sl, r2
 8010d34:	420a      	tst	r2, r1
 8010d36:	d009      	beq.n	8010d4c <__gethex+0x1ec>
 8010d38:	4553      	cmp	r3, sl
 8010d3a:	dd05      	ble.n	8010d48 <__gethex+0x1e8>
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	1eb9      	subs	r1, r7, #2
 8010d40:	f000 fecf 	bl	8011ae2 <__any_on>
 8010d44:	2800      	cmp	r0, #0
 8010d46:	d144      	bne.n	8010dd2 <__gethex+0x272>
 8010d48:	f04f 0a02 	mov.w	sl, #2
 8010d4c:	4639      	mov	r1, r7
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f7ff fe9e 	bl	8010a90 <rshift>
 8010d54:	443d      	add	r5, r7
 8010d56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d5a:	42ab      	cmp	r3, r5
 8010d5c:	da4a      	bge.n	8010df4 <__gethex+0x294>
 8010d5e:	4621      	mov	r1, r4
 8010d60:	9802      	ldr	r0, [sp, #8]
 8010d62:	f000 fa67 	bl	8011234 <_Bfree>
 8010d66:	2300      	movs	r3, #0
 8010d68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010d6a:	27a3      	movs	r7, #163	; 0xa3
 8010d6c:	6013      	str	r3, [r2, #0]
 8010d6e:	e789      	b.n	8010c84 <__gethex+0x124>
 8010d70:	1e73      	subs	r3, r6, #1
 8010d72:	9a06      	ldr	r2, [sp, #24]
 8010d74:	9307      	str	r3, [sp, #28]
 8010d76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d019      	beq.n	8010db2 <__gethex+0x252>
 8010d7e:	f1bb 0f20 	cmp.w	fp, #32
 8010d82:	d107      	bne.n	8010d94 <__gethex+0x234>
 8010d84:	9b04      	ldr	r3, [sp, #16]
 8010d86:	9a01      	ldr	r2, [sp, #4]
 8010d88:	f843 2b04 	str.w	r2, [r3], #4
 8010d8c:	9304      	str	r3, [sp, #16]
 8010d8e:	2300      	movs	r3, #0
 8010d90:	469b      	mov	fp, r3
 8010d92:	9301      	str	r3, [sp, #4]
 8010d94:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010d98:	f7ff fecd 	bl	8010b36 <__hexdig_fun>
 8010d9c:	9b01      	ldr	r3, [sp, #4]
 8010d9e:	f000 000f 	and.w	r0, r0, #15
 8010da2:	fa00 f00b 	lsl.w	r0, r0, fp
 8010da6:	4303      	orrs	r3, r0
 8010da8:	9301      	str	r3, [sp, #4]
 8010daa:	f10b 0b04 	add.w	fp, fp, #4
 8010dae:	9b07      	ldr	r3, [sp, #28]
 8010db0:	e00d      	b.n	8010dce <__gethex+0x26e>
 8010db2:	9a08      	ldr	r2, [sp, #32]
 8010db4:	1e73      	subs	r3, r6, #1
 8010db6:	4413      	add	r3, r2
 8010db8:	42bb      	cmp	r3, r7
 8010dba:	d3e0      	bcc.n	8010d7e <__gethex+0x21e>
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	4652      	mov	r2, sl
 8010dc0:	9903      	ldr	r1, [sp, #12]
 8010dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8010dc4:	f001 fa68 	bl	8012298 <strncmp>
 8010dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	d1d7      	bne.n	8010d7e <__gethex+0x21e>
 8010dce:	461e      	mov	r6, r3
 8010dd0:	e78c      	b.n	8010cec <__gethex+0x18c>
 8010dd2:	f04f 0a03 	mov.w	sl, #3
 8010dd6:	e7b9      	b.n	8010d4c <__gethex+0x1ec>
 8010dd8:	da09      	bge.n	8010dee <__gethex+0x28e>
 8010dda:	1bf7      	subs	r7, r6, r7
 8010ddc:	4621      	mov	r1, r4
 8010dde:	463a      	mov	r2, r7
 8010de0:	9802      	ldr	r0, [sp, #8]
 8010de2:	f000 fc3f 	bl	8011664 <__lshift>
 8010de6:	4604      	mov	r4, r0
 8010de8:	1bed      	subs	r5, r5, r7
 8010dea:	f100 0914 	add.w	r9, r0, #20
 8010dee:	f04f 0a00 	mov.w	sl, #0
 8010df2:	e7b0      	b.n	8010d56 <__gethex+0x1f6>
 8010df4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010df8:	42a8      	cmp	r0, r5
 8010dfa:	dd72      	ble.n	8010ee2 <__gethex+0x382>
 8010dfc:	1b45      	subs	r5, r0, r5
 8010dfe:	42ae      	cmp	r6, r5
 8010e00:	dc35      	bgt.n	8010e6e <__gethex+0x30e>
 8010e02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e06:	2b02      	cmp	r3, #2
 8010e08:	d029      	beq.n	8010e5e <__gethex+0x2fe>
 8010e0a:	2b03      	cmp	r3, #3
 8010e0c:	d02b      	beq.n	8010e66 <__gethex+0x306>
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d11c      	bne.n	8010e4c <__gethex+0x2ec>
 8010e12:	42ae      	cmp	r6, r5
 8010e14:	d11a      	bne.n	8010e4c <__gethex+0x2ec>
 8010e16:	2e01      	cmp	r6, #1
 8010e18:	d112      	bne.n	8010e40 <__gethex+0x2e0>
 8010e1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010e1e:	9a05      	ldr	r2, [sp, #20]
 8010e20:	2762      	movs	r7, #98	; 0x62
 8010e22:	6013      	str	r3, [r2, #0]
 8010e24:	2301      	movs	r3, #1
 8010e26:	6123      	str	r3, [r4, #16]
 8010e28:	f8c9 3000 	str.w	r3, [r9]
 8010e2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e2e:	601c      	str	r4, [r3, #0]
 8010e30:	e728      	b.n	8010c84 <__gethex+0x124>
 8010e32:	bf00      	nop
 8010e34:	08012f58 	.word	0x08012f58
 8010e38:	08012ee0 	.word	0x08012ee0
 8010e3c:	08012ef1 	.word	0x08012ef1
 8010e40:	4620      	mov	r0, r4
 8010e42:	1e71      	subs	r1, r6, #1
 8010e44:	f000 fe4d 	bl	8011ae2 <__any_on>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	d1e6      	bne.n	8010e1a <__gethex+0x2ba>
 8010e4c:	4621      	mov	r1, r4
 8010e4e:	9802      	ldr	r0, [sp, #8]
 8010e50:	f000 f9f0 	bl	8011234 <_Bfree>
 8010e54:	2300      	movs	r3, #0
 8010e56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e58:	2750      	movs	r7, #80	; 0x50
 8010e5a:	6013      	str	r3, [r2, #0]
 8010e5c:	e712      	b.n	8010c84 <__gethex+0x124>
 8010e5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d1f3      	bne.n	8010e4c <__gethex+0x2ec>
 8010e64:	e7d9      	b.n	8010e1a <__gethex+0x2ba>
 8010e66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d1d6      	bne.n	8010e1a <__gethex+0x2ba>
 8010e6c:	e7ee      	b.n	8010e4c <__gethex+0x2ec>
 8010e6e:	1e6f      	subs	r7, r5, #1
 8010e70:	f1ba 0f00 	cmp.w	sl, #0
 8010e74:	d132      	bne.n	8010edc <__gethex+0x37c>
 8010e76:	b127      	cbz	r7, 8010e82 <__gethex+0x322>
 8010e78:	4639      	mov	r1, r7
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f000 fe31 	bl	8011ae2 <__any_on>
 8010e80:	4682      	mov	sl, r0
 8010e82:	2101      	movs	r1, #1
 8010e84:	117b      	asrs	r3, r7, #5
 8010e86:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010e8a:	f007 071f 	and.w	r7, r7, #31
 8010e8e:	fa01 f707 	lsl.w	r7, r1, r7
 8010e92:	421f      	tst	r7, r3
 8010e94:	f04f 0702 	mov.w	r7, #2
 8010e98:	4629      	mov	r1, r5
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	bf18      	it	ne
 8010e9e:	f04a 0a02 	orrne.w	sl, sl, #2
 8010ea2:	1b76      	subs	r6, r6, r5
 8010ea4:	f7ff fdf4 	bl	8010a90 <rshift>
 8010ea8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010eac:	f1ba 0f00 	cmp.w	sl, #0
 8010eb0:	d048      	beq.n	8010f44 <__gethex+0x3e4>
 8010eb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010eb6:	2b02      	cmp	r3, #2
 8010eb8:	d015      	beq.n	8010ee6 <__gethex+0x386>
 8010eba:	2b03      	cmp	r3, #3
 8010ebc:	d017      	beq.n	8010eee <__gethex+0x38e>
 8010ebe:	2b01      	cmp	r3, #1
 8010ec0:	d109      	bne.n	8010ed6 <__gethex+0x376>
 8010ec2:	f01a 0f02 	tst.w	sl, #2
 8010ec6:	d006      	beq.n	8010ed6 <__gethex+0x376>
 8010ec8:	f8d9 0000 	ldr.w	r0, [r9]
 8010ecc:	ea4a 0a00 	orr.w	sl, sl, r0
 8010ed0:	f01a 0f01 	tst.w	sl, #1
 8010ed4:	d10e      	bne.n	8010ef4 <__gethex+0x394>
 8010ed6:	f047 0710 	orr.w	r7, r7, #16
 8010eda:	e033      	b.n	8010f44 <__gethex+0x3e4>
 8010edc:	f04f 0a01 	mov.w	sl, #1
 8010ee0:	e7cf      	b.n	8010e82 <__gethex+0x322>
 8010ee2:	2701      	movs	r7, #1
 8010ee4:	e7e2      	b.n	8010eac <__gethex+0x34c>
 8010ee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ee8:	f1c3 0301 	rsb	r3, r3, #1
 8010eec:	9315      	str	r3, [sp, #84]	; 0x54
 8010eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d0f0      	beq.n	8010ed6 <__gethex+0x376>
 8010ef4:	f04f 0c00 	mov.w	ip, #0
 8010ef8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010efc:	f104 0314 	add.w	r3, r4, #20
 8010f00:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010f04:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010f12:	d01c      	beq.n	8010f4e <__gethex+0x3ee>
 8010f14:	3201      	adds	r2, #1
 8010f16:	6002      	str	r2, [r0, #0]
 8010f18:	2f02      	cmp	r7, #2
 8010f1a:	f104 0314 	add.w	r3, r4, #20
 8010f1e:	d13d      	bne.n	8010f9c <__gethex+0x43c>
 8010f20:	f8d8 2000 	ldr.w	r2, [r8]
 8010f24:	3a01      	subs	r2, #1
 8010f26:	42b2      	cmp	r2, r6
 8010f28:	d10a      	bne.n	8010f40 <__gethex+0x3e0>
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	1171      	asrs	r1, r6, #5
 8010f2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f32:	f006 061f 	and.w	r6, r6, #31
 8010f36:	fa02 f606 	lsl.w	r6, r2, r6
 8010f3a:	421e      	tst	r6, r3
 8010f3c:	bf18      	it	ne
 8010f3e:	4617      	movne	r7, r2
 8010f40:	f047 0720 	orr.w	r7, r7, #32
 8010f44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f46:	601c      	str	r4, [r3, #0]
 8010f48:	9b05      	ldr	r3, [sp, #20]
 8010f4a:	601d      	str	r5, [r3, #0]
 8010f4c:	e69a      	b.n	8010c84 <__gethex+0x124>
 8010f4e:	4299      	cmp	r1, r3
 8010f50:	f843 cc04 	str.w	ip, [r3, #-4]
 8010f54:	d8d8      	bhi.n	8010f08 <__gethex+0x3a8>
 8010f56:	68a3      	ldr	r3, [r4, #8]
 8010f58:	459b      	cmp	fp, r3
 8010f5a:	db17      	blt.n	8010f8c <__gethex+0x42c>
 8010f5c:	6861      	ldr	r1, [r4, #4]
 8010f5e:	9802      	ldr	r0, [sp, #8]
 8010f60:	3101      	adds	r1, #1
 8010f62:	f000 f927 	bl	80111b4 <_Balloc>
 8010f66:	4681      	mov	r9, r0
 8010f68:	b918      	cbnz	r0, 8010f72 <__gethex+0x412>
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	2184      	movs	r1, #132	; 0x84
 8010f6e:	4b19      	ldr	r3, [pc, #100]	; (8010fd4 <__gethex+0x474>)
 8010f70:	e6ab      	b.n	8010cca <__gethex+0x16a>
 8010f72:	6922      	ldr	r2, [r4, #16]
 8010f74:	f104 010c 	add.w	r1, r4, #12
 8010f78:	3202      	adds	r2, #2
 8010f7a:	0092      	lsls	r2, r2, #2
 8010f7c:	300c      	adds	r0, #12
 8010f7e:	f7fd fbc9 	bl	800e714 <memcpy>
 8010f82:	4621      	mov	r1, r4
 8010f84:	9802      	ldr	r0, [sp, #8]
 8010f86:	f000 f955 	bl	8011234 <_Bfree>
 8010f8a:	464c      	mov	r4, r9
 8010f8c:	6923      	ldr	r3, [r4, #16]
 8010f8e:	1c5a      	adds	r2, r3, #1
 8010f90:	6122      	str	r2, [r4, #16]
 8010f92:	2201      	movs	r2, #1
 8010f94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f98:	615a      	str	r2, [r3, #20]
 8010f9a:	e7bd      	b.n	8010f18 <__gethex+0x3b8>
 8010f9c:	6922      	ldr	r2, [r4, #16]
 8010f9e:	455a      	cmp	r2, fp
 8010fa0:	dd0b      	ble.n	8010fba <__gethex+0x45a>
 8010fa2:	2101      	movs	r1, #1
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	f7ff fd73 	bl	8010a90 <rshift>
 8010faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010fae:	3501      	adds	r5, #1
 8010fb0:	42ab      	cmp	r3, r5
 8010fb2:	f6ff aed4 	blt.w	8010d5e <__gethex+0x1fe>
 8010fb6:	2701      	movs	r7, #1
 8010fb8:	e7c2      	b.n	8010f40 <__gethex+0x3e0>
 8010fba:	f016 061f 	ands.w	r6, r6, #31
 8010fbe:	d0fa      	beq.n	8010fb6 <__gethex+0x456>
 8010fc0:	4453      	add	r3, sl
 8010fc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010fc6:	f000 f9e7 	bl	8011398 <__hi0bits>
 8010fca:	f1c6 0620 	rsb	r6, r6, #32
 8010fce:	42b0      	cmp	r0, r6
 8010fd0:	dbe7      	blt.n	8010fa2 <__gethex+0x442>
 8010fd2:	e7f0      	b.n	8010fb6 <__gethex+0x456>
 8010fd4:	08012ee0 	.word	0x08012ee0

08010fd8 <L_shift>:
 8010fd8:	f1c2 0208 	rsb	r2, r2, #8
 8010fdc:	0092      	lsls	r2, r2, #2
 8010fde:	b570      	push	{r4, r5, r6, lr}
 8010fe0:	f1c2 0620 	rsb	r6, r2, #32
 8010fe4:	6843      	ldr	r3, [r0, #4]
 8010fe6:	6804      	ldr	r4, [r0, #0]
 8010fe8:	fa03 f506 	lsl.w	r5, r3, r6
 8010fec:	432c      	orrs	r4, r5
 8010fee:	40d3      	lsrs	r3, r2
 8010ff0:	6004      	str	r4, [r0, #0]
 8010ff2:	f840 3f04 	str.w	r3, [r0, #4]!
 8010ff6:	4288      	cmp	r0, r1
 8010ff8:	d3f4      	bcc.n	8010fe4 <L_shift+0xc>
 8010ffa:	bd70      	pop	{r4, r5, r6, pc}

08010ffc <__match>:
 8010ffc:	b530      	push	{r4, r5, lr}
 8010ffe:	6803      	ldr	r3, [r0, #0]
 8011000:	3301      	adds	r3, #1
 8011002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011006:	b914      	cbnz	r4, 801100e <__match+0x12>
 8011008:	6003      	str	r3, [r0, #0]
 801100a:	2001      	movs	r0, #1
 801100c:	bd30      	pop	{r4, r5, pc}
 801100e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011012:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011016:	2d19      	cmp	r5, #25
 8011018:	bf98      	it	ls
 801101a:	3220      	addls	r2, #32
 801101c:	42a2      	cmp	r2, r4
 801101e:	d0f0      	beq.n	8011002 <__match+0x6>
 8011020:	2000      	movs	r0, #0
 8011022:	e7f3      	b.n	801100c <__match+0x10>

08011024 <__hexnan>:
 8011024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011028:	2500      	movs	r5, #0
 801102a:	680b      	ldr	r3, [r1, #0]
 801102c:	4682      	mov	sl, r0
 801102e:	115e      	asrs	r6, r3, #5
 8011030:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011034:	f013 031f 	ands.w	r3, r3, #31
 8011038:	bf18      	it	ne
 801103a:	3604      	addne	r6, #4
 801103c:	1f37      	subs	r7, r6, #4
 801103e:	46b9      	mov	r9, r7
 8011040:	463c      	mov	r4, r7
 8011042:	46ab      	mov	fp, r5
 8011044:	b087      	sub	sp, #28
 8011046:	4690      	mov	r8, r2
 8011048:	6802      	ldr	r2, [r0, #0]
 801104a:	9301      	str	r3, [sp, #4]
 801104c:	f846 5c04 	str.w	r5, [r6, #-4]
 8011050:	9502      	str	r5, [sp, #8]
 8011052:	7851      	ldrb	r1, [r2, #1]
 8011054:	1c53      	adds	r3, r2, #1
 8011056:	9303      	str	r3, [sp, #12]
 8011058:	b341      	cbz	r1, 80110ac <__hexnan+0x88>
 801105a:	4608      	mov	r0, r1
 801105c:	9205      	str	r2, [sp, #20]
 801105e:	9104      	str	r1, [sp, #16]
 8011060:	f7ff fd69 	bl	8010b36 <__hexdig_fun>
 8011064:	2800      	cmp	r0, #0
 8011066:	d14f      	bne.n	8011108 <__hexnan+0xe4>
 8011068:	9904      	ldr	r1, [sp, #16]
 801106a:	9a05      	ldr	r2, [sp, #20]
 801106c:	2920      	cmp	r1, #32
 801106e:	d818      	bhi.n	80110a2 <__hexnan+0x7e>
 8011070:	9b02      	ldr	r3, [sp, #8]
 8011072:	459b      	cmp	fp, r3
 8011074:	dd13      	ble.n	801109e <__hexnan+0x7a>
 8011076:	454c      	cmp	r4, r9
 8011078:	d206      	bcs.n	8011088 <__hexnan+0x64>
 801107a:	2d07      	cmp	r5, #7
 801107c:	dc04      	bgt.n	8011088 <__hexnan+0x64>
 801107e:	462a      	mov	r2, r5
 8011080:	4649      	mov	r1, r9
 8011082:	4620      	mov	r0, r4
 8011084:	f7ff ffa8 	bl	8010fd8 <L_shift>
 8011088:	4544      	cmp	r4, r8
 801108a:	d950      	bls.n	801112e <__hexnan+0x10a>
 801108c:	2300      	movs	r3, #0
 801108e:	f1a4 0904 	sub.w	r9, r4, #4
 8011092:	f844 3c04 	str.w	r3, [r4, #-4]
 8011096:	461d      	mov	r5, r3
 8011098:	464c      	mov	r4, r9
 801109a:	f8cd b008 	str.w	fp, [sp, #8]
 801109e:	9a03      	ldr	r2, [sp, #12]
 80110a0:	e7d7      	b.n	8011052 <__hexnan+0x2e>
 80110a2:	2929      	cmp	r1, #41	; 0x29
 80110a4:	d156      	bne.n	8011154 <__hexnan+0x130>
 80110a6:	3202      	adds	r2, #2
 80110a8:	f8ca 2000 	str.w	r2, [sl]
 80110ac:	f1bb 0f00 	cmp.w	fp, #0
 80110b0:	d050      	beq.n	8011154 <__hexnan+0x130>
 80110b2:	454c      	cmp	r4, r9
 80110b4:	d206      	bcs.n	80110c4 <__hexnan+0xa0>
 80110b6:	2d07      	cmp	r5, #7
 80110b8:	dc04      	bgt.n	80110c4 <__hexnan+0xa0>
 80110ba:	462a      	mov	r2, r5
 80110bc:	4649      	mov	r1, r9
 80110be:	4620      	mov	r0, r4
 80110c0:	f7ff ff8a 	bl	8010fd8 <L_shift>
 80110c4:	4544      	cmp	r4, r8
 80110c6:	d934      	bls.n	8011132 <__hexnan+0x10e>
 80110c8:	4623      	mov	r3, r4
 80110ca:	f1a8 0204 	sub.w	r2, r8, #4
 80110ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80110d2:	429f      	cmp	r7, r3
 80110d4:	f842 1f04 	str.w	r1, [r2, #4]!
 80110d8:	d2f9      	bcs.n	80110ce <__hexnan+0xaa>
 80110da:	1b3b      	subs	r3, r7, r4
 80110dc:	f023 0303 	bic.w	r3, r3, #3
 80110e0:	3304      	adds	r3, #4
 80110e2:	3401      	adds	r4, #1
 80110e4:	3e03      	subs	r6, #3
 80110e6:	42b4      	cmp	r4, r6
 80110e8:	bf88      	it	hi
 80110ea:	2304      	movhi	r3, #4
 80110ec:	2200      	movs	r2, #0
 80110ee:	4443      	add	r3, r8
 80110f0:	f843 2b04 	str.w	r2, [r3], #4
 80110f4:	429f      	cmp	r7, r3
 80110f6:	d2fb      	bcs.n	80110f0 <__hexnan+0xcc>
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	b91b      	cbnz	r3, 8011104 <__hexnan+0xe0>
 80110fc:	4547      	cmp	r7, r8
 80110fe:	d127      	bne.n	8011150 <__hexnan+0x12c>
 8011100:	2301      	movs	r3, #1
 8011102:	603b      	str	r3, [r7, #0]
 8011104:	2005      	movs	r0, #5
 8011106:	e026      	b.n	8011156 <__hexnan+0x132>
 8011108:	3501      	adds	r5, #1
 801110a:	2d08      	cmp	r5, #8
 801110c:	f10b 0b01 	add.w	fp, fp, #1
 8011110:	dd06      	ble.n	8011120 <__hexnan+0xfc>
 8011112:	4544      	cmp	r4, r8
 8011114:	d9c3      	bls.n	801109e <__hexnan+0x7a>
 8011116:	2300      	movs	r3, #0
 8011118:	2501      	movs	r5, #1
 801111a:	f844 3c04 	str.w	r3, [r4, #-4]
 801111e:	3c04      	subs	r4, #4
 8011120:	6822      	ldr	r2, [r4, #0]
 8011122:	f000 000f 	and.w	r0, r0, #15
 8011126:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801112a:	6022      	str	r2, [r4, #0]
 801112c:	e7b7      	b.n	801109e <__hexnan+0x7a>
 801112e:	2508      	movs	r5, #8
 8011130:	e7b5      	b.n	801109e <__hexnan+0x7a>
 8011132:	9b01      	ldr	r3, [sp, #4]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d0df      	beq.n	80110f8 <__hexnan+0xd4>
 8011138:	f04f 32ff 	mov.w	r2, #4294967295
 801113c:	f1c3 0320 	rsb	r3, r3, #32
 8011140:	fa22 f303 	lsr.w	r3, r2, r3
 8011144:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011148:	401a      	ands	r2, r3
 801114a:	f846 2c04 	str.w	r2, [r6, #-4]
 801114e:	e7d3      	b.n	80110f8 <__hexnan+0xd4>
 8011150:	3f04      	subs	r7, #4
 8011152:	e7d1      	b.n	80110f8 <__hexnan+0xd4>
 8011154:	2004      	movs	r0, #4
 8011156:	b007      	add	sp, #28
 8011158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801115c <_localeconv_r>:
 801115c:	4800      	ldr	r0, [pc, #0]	; (8011160 <_localeconv_r+0x4>)
 801115e:	4770      	bx	lr
 8011160:	20000a14 	.word	0x20000a14

08011164 <malloc>:
 8011164:	4b02      	ldr	r3, [pc, #8]	; (8011170 <malloc+0xc>)
 8011166:	4601      	mov	r1, r0
 8011168:	6818      	ldr	r0, [r3, #0]
 801116a:	f000 bd57 	b.w	8011c1c <_malloc_r>
 801116e:	bf00      	nop
 8011170:	200008bc 	.word	0x200008bc

08011174 <__ascii_mbtowc>:
 8011174:	b082      	sub	sp, #8
 8011176:	b901      	cbnz	r1, 801117a <__ascii_mbtowc+0x6>
 8011178:	a901      	add	r1, sp, #4
 801117a:	b142      	cbz	r2, 801118e <__ascii_mbtowc+0x1a>
 801117c:	b14b      	cbz	r3, 8011192 <__ascii_mbtowc+0x1e>
 801117e:	7813      	ldrb	r3, [r2, #0]
 8011180:	600b      	str	r3, [r1, #0]
 8011182:	7812      	ldrb	r2, [r2, #0]
 8011184:	1e10      	subs	r0, r2, #0
 8011186:	bf18      	it	ne
 8011188:	2001      	movne	r0, #1
 801118a:	b002      	add	sp, #8
 801118c:	4770      	bx	lr
 801118e:	4610      	mov	r0, r2
 8011190:	e7fb      	b.n	801118a <__ascii_mbtowc+0x16>
 8011192:	f06f 0001 	mvn.w	r0, #1
 8011196:	e7f8      	b.n	801118a <__ascii_mbtowc+0x16>

08011198 <memchr>:
 8011198:	4603      	mov	r3, r0
 801119a:	b510      	push	{r4, lr}
 801119c:	b2c9      	uxtb	r1, r1
 801119e:	4402      	add	r2, r0
 80111a0:	4293      	cmp	r3, r2
 80111a2:	4618      	mov	r0, r3
 80111a4:	d101      	bne.n	80111aa <memchr+0x12>
 80111a6:	2000      	movs	r0, #0
 80111a8:	e003      	b.n	80111b2 <memchr+0x1a>
 80111aa:	7804      	ldrb	r4, [r0, #0]
 80111ac:	3301      	adds	r3, #1
 80111ae:	428c      	cmp	r4, r1
 80111b0:	d1f6      	bne.n	80111a0 <memchr+0x8>
 80111b2:	bd10      	pop	{r4, pc}

080111b4 <_Balloc>:
 80111b4:	b570      	push	{r4, r5, r6, lr}
 80111b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80111b8:	4604      	mov	r4, r0
 80111ba:	460d      	mov	r5, r1
 80111bc:	b976      	cbnz	r6, 80111dc <_Balloc+0x28>
 80111be:	2010      	movs	r0, #16
 80111c0:	f7ff ffd0 	bl	8011164 <malloc>
 80111c4:	4602      	mov	r2, r0
 80111c6:	6260      	str	r0, [r4, #36]	; 0x24
 80111c8:	b920      	cbnz	r0, 80111d4 <_Balloc+0x20>
 80111ca:	2166      	movs	r1, #102	; 0x66
 80111cc:	4b17      	ldr	r3, [pc, #92]	; (801122c <_Balloc+0x78>)
 80111ce:	4818      	ldr	r0, [pc, #96]	; (8011230 <_Balloc+0x7c>)
 80111d0:	f7fe fdb2 	bl	800fd38 <__assert_func>
 80111d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111d8:	6006      	str	r6, [r0, #0]
 80111da:	60c6      	str	r6, [r0, #12]
 80111dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80111de:	68f3      	ldr	r3, [r6, #12]
 80111e0:	b183      	cbz	r3, 8011204 <_Balloc+0x50>
 80111e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80111ea:	b9b8      	cbnz	r0, 801121c <_Balloc+0x68>
 80111ec:	2101      	movs	r1, #1
 80111ee:	fa01 f605 	lsl.w	r6, r1, r5
 80111f2:	1d72      	adds	r2, r6, #5
 80111f4:	4620      	mov	r0, r4
 80111f6:	0092      	lsls	r2, r2, #2
 80111f8:	f000 fc94 	bl	8011b24 <_calloc_r>
 80111fc:	b160      	cbz	r0, 8011218 <_Balloc+0x64>
 80111fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011202:	e00e      	b.n	8011222 <_Balloc+0x6e>
 8011204:	2221      	movs	r2, #33	; 0x21
 8011206:	2104      	movs	r1, #4
 8011208:	4620      	mov	r0, r4
 801120a:	f000 fc8b 	bl	8011b24 <_calloc_r>
 801120e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011210:	60f0      	str	r0, [r6, #12]
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d1e4      	bne.n	80111e2 <_Balloc+0x2e>
 8011218:	2000      	movs	r0, #0
 801121a:	bd70      	pop	{r4, r5, r6, pc}
 801121c:	6802      	ldr	r2, [r0, #0]
 801121e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011222:	2300      	movs	r3, #0
 8011224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011228:	e7f7      	b.n	801121a <_Balloc+0x66>
 801122a:	bf00      	nop
 801122c:	08012dc8 	.word	0x08012dc8
 8011230:	08012f6c 	.word	0x08012f6c

08011234 <_Bfree>:
 8011234:	b570      	push	{r4, r5, r6, lr}
 8011236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011238:	4605      	mov	r5, r0
 801123a:	460c      	mov	r4, r1
 801123c:	b976      	cbnz	r6, 801125c <_Bfree+0x28>
 801123e:	2010      	movs	r0, #16
 8011240:	f7ff ff90 	bl	8011164 <malloc>
 8011244:	4602      	mov	r2, r0
 8011246:	6268      	str	r0, [r5, #36]	; 0x24
 8011248:	b920      	cbnz	r0, 8011254 <_Bfree+0x20>
 801124a:	218a      	movs	r1, #138	; 0x8a
 801124c:	4b08      	ldr	r3, [pc, #32]	; (8011270 <_Bfree+0x3c>)
 801124e:	4809      	ldr	r0, [pc, #36]	; (8011274 <_Bfree+0x40>)
 8011250:	f7fe fd72 	bl	800fd38 <__assert_func>
 8011254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011258:	6006      	str	r6, [r0, #0]
 801125a:	60c6      	str	r6, [r0, #12]
 801125c:	b13c      	cbz	r4, 801126e <_Bfree+0x3a>
 801125e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011260:	6862      	ldr	r2, [r4, #4]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011268:	6021      	str	r1, [r4, #0]
 801126a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801126e:	bd70      	pop	{r4, r5, r6, pc}
 8011270:	08012dc8 	.word	0x08012dc8
 8011274:	08012f6c 	.word	0x08012f6c

08011278 <__multadd>:
 8011278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801127c:	4607      	mov	r7, r0
 801127e:	460c      	mov	r4, r1
 8011280:	461e      	mov	r6, r3
 8011282:	2000      	movs	r0, #0
 8011284:	690d      	ldr	r5, [r1, #16]
 8011286:	f101 0c14 	add.w	ip, r1, #20
 801128a:	f8dc 3000 	ldr.w	r3, [ip]
 801128e:	3001      	adds	r0, #1
 8011290:	b299      	uxth	r1, r3
 8011292:	fb02 6101 	mla	r1, r2, r1, r6
 8011296:	0c1e      	lsrs	r6, r3, #16
 8011298:	0c0b      	lsrs	r3, r1, #16
 801129a:	fb02 3306 	mla	r3, r2, r6, r3
 801129e:	b289      	uxth	r1, r1
 80112a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80112a4:	4285      	cmp	r5, r0
 80112a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80112aa:	f84c 1b04 	str.w	r1, [ip], #4
 80112ae:	dcec      	bgt.n	801128a <__multadd+0x12>
 80112b0:	b30e      	cbz	r6, 80112f6 <__multadd+0x7e>
 80112b2:	68a3      	ldr	r3, [r4, #8]
 80112b4:	42ab      	cmp	r3, r5
 80112b6:	dc19      	bgt.n	80112ec <__multadd+0x74>
 80112b8:	6861      	ldr	r1, [r4, #4]
 80112ba:	4638      	mov	r0, r7
 80112bc:	3101      	adds	r1, #1
 80112be:	f7ff ff79 	bl	80111b4 <_Balloc>
 80112c2:	4680      	mov	r8, r0
 80112c4:	b928      	cbnz	r0, 80112d2 <__multadd+0x5a>
 80112c6:	4602      	mov	r2, r0
 80112c8:	21b5      	movs	r1, #181	; 0xb5
 80112ca:	4b0c      	ldr	r3, [pc, #48]	; (80112fc <__multadd+0x84>)
 80112cc:	480c      	ldr	r0, [pc, #48]	; (8011300 <__multadd+0x88>)
 80112ce:	f7fe fd33 	bl	800fd38 <__assert_func>
 80112d2:	6922      	ldr	r2, [r4, #16]
 80112d4:	f104 010c 	add.w	r1, r4, #12
 80112d8:	3202      	adds	r2, #2
 80112da:	0092      	lsls	r2, r2, #2
 80112dc:	300c      	adds	r0, #12
 80112de:	f7fd fa19 	bl	800e714 <memcpy>
 80112e2:	4621      	mov	r1, r4
 80112e4:	4638      	mov	r0, r7
 80112e6:	f7ff ffa5 	bl	8011234 <_Bfree>
 80112ea:	4644      	mov	r4, r8
 80112ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80112f0:	3501      	adds	r5, #1
 80112f2:	615e      	str	r6, [r3, #20]
 80112f4:	6125      	str	r5, [r4, #16]
 80112f6:	4620      	mov	r0, r4
 80112f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112fc:	08012ee0 	.word	0x08012ee0
 8011300:	08012f6c 	.word	0x08012f6c

08011304 <__s2b>:
 8011304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011308:	4615      	mov	r5, r2
 801130a:	2209      	movs	r2, #9
 801130c:	461f      	mov	r7, r3
 801130e:	3308      	adds	r3, #8
 8011310:	460c      	mov	r4, r1
 8011312:	fb93 f3f2 	sdiv	r3, r3, r2
 8011316:	4606      	mov	r6, r0
 8011318:	2201      	movs	r2, #1
 801131a:	2100      	movs	r1, #0
 801131c:	429a      	cmp	r2, r3
 801131e:	db09      	blt.n	8011334 <__s2b+0x30>
 8011320:	4630      	mov	r0, r6
 8011322:	f7ff ff47 	bl	80111b4 <_Balloc>
 8011326:	b940      	cbnz	r0, 801133a <__s2b+0x36>
 8011328:	4602      	mov	r2, r0
 801132a:	21ce      	movs	r1, #206	; 0xce
 801132c:	4b18      	ldr	r3, [pc, #96]	; (8011390 <__s2b+0x8c>)
 801132e:	4819      	ldr	r0, [pc, #100]	; (8011394 <__s2b+0x90>)
 8011330:	f7fe fd02 	bl	800fd38 <__assert_func>
 8011334:	0052      	lsls	r2, r2, #1
 8011336:	3101      	adds	r1, #1
 8011338:	e7f0      	b.n	801131c <__s2b+0x18>
 801133a:	9b08      	ldr	r3, [sp, #32]
 801133c:	2d09      	cmp	r5, #9
 801133e:	6143      	str	r3, [r0, #20]
 8011340:	f04f 0301 	mov.w	r3, #1
 8011344:	6103      	str	r3, [r0, #16]
 8011346:	dd16      	ble.n	8011376 <__s2b+0x72>
 8011348:	f104 0909 	add.w	r9, r4, #9
 801134c:	46c8      	mov	r8, r9
 801134e:	442c      	add	r4, r5
 8011350:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011354:	4601      	mov	r1, r0
 8011356:	220a      	movs	r2, #10
 8011358:	4630      	mov	r0, r6
 801135a:	3b30      	subs	r3, #48	; 0x30
 801135c:	f7ff ff8c 	bl	8011278 <__multadd>
 8011360:	45a0      	cmp	r8, r4
 8011362:	d1f5      	bne.n	8011350 <__s2b+0x4c>
 8011364:	f1a5 0408 	sub.w	r4, r5, #8
 8011368:	444c      	add	r4, r9
 801136a:	1b2d      	subs	r5, r5, r4
 801136c:	1963      	adds	r3, r4, r5
 801136e:	42bb      	cmp	r3, r7
 8011370:	db04      	blt.n	801137c <__s2b+0x78>
 8011372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011376:	2509      	movs	r5, #9
 8011378:	340a      	adds	r4, #10
 801137a:	e7f6      	b.n	801136a <__s2b+0x66>
 801137c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011380:	4601      	mov	r1, r0
 8011382:	220a      	movs	r2, #10
 8011384:	4630      	mov	r0, r6
 8011386:	3b30      	subs	r3, #48	; 0x30
 8011388:	f7ff ff76 	bl	8011278 <__multadd>
 801138c:	e7ee      	b.n	801136c <__s2b+0x68>
 801138e:	bf00      	nop
 8011390:	08012ee0 	.word	0x08012ee0
 8011394:	08012f6c 	.word	0x08012f6c

08011398 <__hi0bits>:
 8011398:	0c02      	lsrs	r2, r0, #16
 801139a:	0412      	lsls	r2, r2, #16
 801139c:	4603      	mov	r3, r0
 801139e:	b9ca      	cbnz	r2, 80113d4 <__hi0bits+0x3c>
 80113a0:	0403      	lsls	r3, r0, #16
 80113a2:	2010      	movs	r0, #16
 80113a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80113a8:	bf04      	itt	eq
 80113aa:	021b      	lsleq	r3, r3, #8
 80113ac:	3008      	addeq	r0, #8
 80113ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80113b2:	bf04      	itt	eq
 80113b4:	011b      	lsleq	r3, r3, #4
 80113b6:	3004      	addeq	r0, #4
 80113b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80113bc:	bf04      	itt	eq
 80113be:	009b      	lsleq	r3, r3, #2
 80113c0:	3002      	addeq	r0, #2
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	db05      	blt.n	80113d2 <__hi0bits+0x3a>
 80113c6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80113ca:	f100 0001 	add.w	r0, r0, #1
 80113ce:	bf08      	it	eq
 80113d0:	2020      	moveq	r0, #32
 80113d2:	4770      	bx	lr
 80113d4:	2000      	movs	r0, #0
 80113d6:	e7e5      	b.n	80113a4 <__hi0bits+0xc>

080113d8 <__lo0bits>:
 80113d8:	6803      	ldr	r3, [r0, #0]
 80113da:	4602      	mov	r2, r0
 80113dc:	f013 0007 	ands.w	r0, r3, #7
 80113e0:	d00b      	beq.n	80113fa <__lo0bits+0x22>
 80113e2:	07d9      	lsls	r1, r3, #31
 80113e4:	d421      	bmi.n	801142a <__lo0bits+0x52>
 80113e6:	0798      	lsls	r0, r3, #30
 80113e8:	bf49      	itett	mi
 80113ea:	085b      	lsrmi	r3, r3, #1
 80113ec:	089b      	lsrpl	r3, r3, #2
 80113ee:	2001      	movmi	r0, #1
 80113f0:	6013      	strmi	r3, [r2, #0]
 80113f2:	bf5c      	itt	pl
 80113f4:	2002      	movpl	r0, #2
 80113f6:	6013      	strpl	r3, [r2, #0]
 80113f8:	4770      	bx	lr
 80113fa:	b299      	uxth	r1, r3
 80113fc:	b909      	cbnz	r1, 8011402 <__lo0bits+0x2a>
 80113fe:	2010      	movs	r0, #16
 8011400:	0c1b      	lsrs	r3, r3, #16
 8011402:	b2d9      	uxtb	r1, r3
 8011404:	b909      	cbnz	r1, 801140a <__lo0bits+0x32>
 8011406:	3008      	adds	r0, #8
 8011408:	0a1b      	lsrs	r3, r3, #8
 801140a:	0719      	lsls	r1, r3, #28
 801140c:	bf04      	itt	eq
 801140e:	091b      	lsreq	r3, r3, #4
 8011410:	3004      	addeq	r0, #4
 8011412:	0799      	lsls	r1, r3, #30
 8011414:	bf04      	itt	eq
 8011416:	089b      	lsreq	r3, r3, #2
 8011418:	3002      	addeq	r0, #2
 801141a:	07d9      	lsls	r1, r3, #31
 801141c:	d403      	bmi.n	8011426 <__lo0bits+0x4e>
 801141e:	085b      	lsrs	r3, r3, #1
 8011420:	f100 0001 	add.w	r0, r0, #1
 8011424:	d003      	beq.n	801142e <__lo0bits+0x56>
 8011426:	6013      	str	r3, [r2, #0]
 8011428:	4770      	bx	lr
 801142a:	2000      	movs	r0, #0
 801142c:	4770      	bx	lr
 801142e:	2020      	movs	r0, #32
 8011430:	4770      	bx	lr
	...

08011434 <__i2b>:
 8011434:	b510      	push	{r4, lr}
 8011436:	460c      	mov	r4, r1
 8011438:	2101      	movs	r1, #1
 801143a:	f7ff febb 	bl	80111b4 <_Balloc>
 801143e:	4602      	mov	r2, r0
 8011440:	b928      	cbnz	r0, 801144e <__i2b+0x1a>
 8011442:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011446:	4b04      	ldr	r3, [pc, #16]	; (8011458 <__i2b+0x24>)
 8011448:	4804      	ldr	r0, [pc, #16]	; (801145c <__i2b+0x28>)
 801144a:	f7fe fc75 	bl	800fd38 <__assert_func>
 801144e:	2301      	movs	r3, #1
 8011450:	6144      	str	r4, [r0, #20]
 8011452:	6103      	str	r3, [r0, #16]
 8011454:	bd10      	pop	{r4, pc}
 8011456:	bf00      	nop
 8011458:	08012ee0 	.word	0x08012ee0
 801145c:	08012f6c 	.word	0x08012f6c

08011460 <__multiply>:
 8011460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011464:	4691      	mov	r9, r2
 8011466:	690a      	ldr	r2, [r1, #16]
 8011468:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801146c:	460c      	mov	r4, r1
 801146e:	429a      	cmp	r2, r3
 8011470:	bfbe      	ittt	lt
 8011472:	460b      	movlt	r3, r1
 8011474:	464c      	movlt	r4, r9
 8011476:	4699      	movlt	r9, r3
 8011478:	6927      	ldr	r7, [r4, #16]
 801147a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801147e:	68a3      	ldr	r3, [r4, #8]
 8011480:	6861      	ldr	r1, [r4, #4]
 8011482:	eb07 060a 	add.w	r6, r7, sl
 8011486:	42b3      	cmp	r3, r6
 8011488:	b085      	sub	sp, #20
 801148a:	bfb8      	it	lt
 801148c:	3101      	addlt	r1, #1
 801148e:	f7ff fe91 	bl	80111b4 <_Balloc>
 8011492:	b930      	cbnz	r0, 80114a2 <__multiply+0x42>
 8011494:	4602      	mov	r2, r0
 8011496:	f240 115d 	movw	r1, #349	; 0x15d
 801149a:	4b43      	ldr	r3, [pc, #268]	; (80115a8 <__multiply+0x148>)
 801149c:	4843      	ldr	r0, [pc, #268]	; (80115ac <__multiply+0x14c>)
 801149e:	f7fe fc4b 	bl	800fd38 <__assert_func>
 80114a2:	f100 0514 	add.w	r5, r0, #20
 80114a6:	462b      	mov	r3, r5
 80114a8:	2200      	movs	r2, #0
 80114aa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80114ae:	4543      	cmp	r3, r8
 80114b0:	d321      	bcc.n	80114f6 <__multiply+0x96>
 80114b2:	f104 0314 	add.w	r3, r4, #20
 80114b6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80114ba:	f109 0314 	add.w	r3, r9, #20
 80114be:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80114c2:	9202      	str	r2, [sp, #8]
 80114c4:	1b3a      	subs	r2, r7, r4
 80114c6:	3a15      	subs	r2, #21
 80114c8:	f022 0203 	bic.w	r2, r2, #3
 80114cc:	3204      	adds	r2, #4
 80114ce:	f104 0115 	add.w	r1, r4, #21
 80114d2:	428f      	cmp	r7, r1
 80114d4:	bf38      	it	cc
 80114d6:	2204      	movcc	r2, #4
 80114d8:	9201      	str	r2, [sp, #4]
 80114da:	9a02      	ldr	r2, [sp, #8]
 80114dc:	9303      	str	r3, [sp, #12]
 80114de:	429a      	cmp	r2, r3
 80114e0:	d80c      	bhi.n	80114fc <__multiply+0x9c>
 80114e2:	2e00      	cmp	r6, #0
 80114e4:	dd03      	ble.n	80114ee <__multiply+0x8e>
 80114e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d059      	beq.n	80115a2 <__multiply+0x142>
 80114ee:	6106      	str	r6, [r0, #16]
 80114f0:	b005      	add	sp, #20
 80114f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f6:	f843 2b04 	str.w	r2, [r3], #4
 80114fa:	e7d8      	b.n	80114ae <__multiply+0x4e>
 80114fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8011500:	f1ba 0f00 	cmp.w	sl, #0
 8011504:	d023      	beq.n	801154e <__multiply+0xee>
 8011506:	46a9      	mov	r9, r5
 8011508:	f04f 0c00 	mov.w	ip, #0
 801150c:	f104 0e14 	add.w	lr, r4, #20
 8011510:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011514:	f8d9 1000 	ldr.w	r1, [r9]
 8011518:	fa1f fb82 	uxth.w	fp, r2
 801151c:	b289      	uxth	r1, r1
 801151e:	fb0a 110b 	mla	r1, sl, fp, r1
 8011522:	4461      	add	r1, ip
 8011524:	f8d9 c000 	ldr.w	ip, [r9]
 8011528:	0c12      	lsrs	r2, r2, #16
 801152a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801152e:	fb0a c202 	mla	r2, sl, r2, ip
 8011532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011536:	b289      	uxth	r1, r1
 8011538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801153c:	4577      	cmp	r7, lr
 801153e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011542:	f849 1b04 	str.w	r1, [r9], #4
 8011546:	d8e3      	bhi.n	8011510 <__multiply+0xb0>
 8011548:	9a01      	ldr	r2, [sp, #4]
 801154a:	f845 c002 	str.w	ip, [r5, r2]
 801154e:	9a03      	ldr	r2, [sp, #12]
 8011550:	3304      	adds	r3, #4
 8011552:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011556:	f1b9 0f00 	cmp.w	r9, #0
 801155a:	d020      	beq.n	801159e <__multiply+0x13e>
 801155c:	46ae      	mov	lr, r5
 801155e:	f04f 0a00 	mov.w	sl, #0
 8011562:	6829      	ldr	r1, [r5, #0]
 8011564:	f104 0c14 	add.w	ip, r4, #20
 8011568:	f8bc b000 	ldrh.w	fp, [ip]
 801156c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011570:	b289      	uxth	r1, r1
 8011572:	fb09 220b 	mla	r2, r9, fp, r2
 8011576:	4492      	add	sl, r2
 8011578:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801157c:	f84e 1b04 	str.w	r1, [lr], #4
 8011580:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011584:	f8be 1000 	ldrh.w	r1, [lr]
 8011588:	0c12      	lsrs	r2, r2, #16
 801158a:	fb09 1102 	mla	r1, r9, r2, r1
 801158e:	4567      	cmp	r7, ip
 8011590:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011594:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011598:	d8e6      	bhi.n	8011568 <__multiply+0x108>
 801159a:	9a01      	ldr	r2, [sp, #4]
 801159c:	50a9      	str	r1, [r5, r2]
 801159e:	3504      	adds	r5, #4
 80115a0:	e79b      	b.n	80114da <__multiply+0x7a>
 80115a2:	3e01      	subs	r6, #1
 80115a4:	e79d      	b.n	80114e2 <__multiply+0x82>
 80115a6:	bf00      	nop
 80115a8:	08012ee0 	.word	0x08012ee0
 80115ac:	08012f6c 	.word	0x08012f6c

080115b0 <__pow5mult>:
 80115b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115b4:	4615      	mov	r5, r2
 80115b6:	f012 0203 	ands.w	r2, r2, #3
 80115ba:	4606      	mov	r6, r0
 80115bc:	460f      	mov	r7, r1
 80115be:	d007      	beq.n	80115d0 <__pow5mult+0x20>
 80115c0:	4c25      	ldr	r4, [pc, #148]	; (8011658 <__pow5mult+0xa8>)
 80115c2:	3a01      	subs	r2, #1
 80115c4:	2300      	movs	r3, #0
 80115c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80115ca:	f7ff fe55 	bl	8011278 <__multadd>
 80115ce:	4607      	mov	r7, r0
 80115d0:	10ad      	asrs	r5, r5, #2
 80115d2:	d03d      	beq.n	8011650 <__pow5mult+0xa0>
 80115d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80115d6:	b97c      	cbnz	r4, 80115f8 <__pow5mult+0x48>
 80115d8:	2010      	movs	r0, #16
 80115da:	f7ff fdc3 	bl	8011164 <malloc>
 80115de:	4602      	mov	r2, r0
 80115e0:	6270      	str	r0, [r6, #36]	; 0x24
 80115e2:	b928      	cbnz	r0, 80115f0 <__pow5mult+0x40>
 80115e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80115e8:	4b1c      	ldr	r3, [pc, #112]	; (801165c <__pow5mult+0xac>)
 80115ea:	481d      	ldr	r0, [pc, #116]	; (8011660 <__pow5mult+0xb0>)
 80115ec:	f7fe fba4 	bl	800fd38 <__assert_func>
 80115f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115f4:	6004      	str	r4, [r0, #0]
 80115f6:	60c4      	str	r4, [r0, #12]
 80115f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80115fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011600:	b94c      	cbnz	r4, 8011616 <__pow5mult+0x66>
 8011602:	f240 2171 	movw	r1, #625	; 0x271
 8011606:	4630      	mov	r0, r6
 8011608:	f7ff ff14 	bl	8011434 <__i2b>
 801160c:	2300      	movs	r3, #0
 801160e:	4604      	mov	r4, r0
 8011610:	f8c8 0008 	str.w	r0, [r8, #8]
 8011614:	6003      	str	r3, [r0, #0]
 8011616:	f04f 0900 	mov.w	r9, #0
 801161a:	07eb      	lsls	r3, r5, #31
 801161c:	d50a      	bpl.n	8011634 <__pow5mult+0x84>
 801161e:	4639      	mov	r1, r7
 8011620:	4622      	mov	r2, r4
 8011622:	4630      	mov	r0, r6
 8011624:	f7ff ff1c 	bl	8011460 <__multiply>
 8011628:	4680      	mov	r8, r0
 801162a:	4639      	mov	r1, r7
 801162c:	4630      	mov	r0, r6
 801162e:	f7ff fe01 	bl	8011234 <_Bfree>
 8011632:	4647      	mov	r7, r8
 8011634:	106d      	asrs	r5, r5, #1
 8011636:	d00b      	beq.n	8011650 <__pow5mult+0xa0>
 8011638:	6820      	ldr	r0, [r4, #0]
 801163a:	b938      	cbnz	r0, 801164c <__pow5mult+0x9c>
 801163c:	4622      	mov	r2, r4
 801163e:	4621      	mov	r1, r4
 8011640:	4630      	mov	r0, r6
 8011642:	f7ff ff0d 	bl	8011460 <__multiply>
 8011646:	6020      	str	r0, [r4, #0]
 8011648:	f8c0 9000 	str.w	r9, [r0]
 801164c:	4604      	mov	r4, r0
 801164e:	e7e4      	b.n	801161a <__pow5mult+0x6a>
 8011650:	4638      	mov	r0, r7
 8011652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011656:	bf00      	nop
 8011658:	080130b8 	.word	0x080130b8
 801165c:	08012dc8 	.word	0x08012dc8
 8011660:	08012f6c 	.word	0x08012f6c

08011664 <__lshift>:
 8011664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011668:	460c      	mov	r4, r1
 801166a:	4607      	mov	r7, r0
 801166c:	4691      	mov	r9, r2
 801166e:	6923      	ldr	r3, [r4, #16]
 8011670:	6849      	ldr	r1, [r1, #4]
 8011672:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011676:	68a3      	ldr	r3, [r4, #8]
 8011678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801167c:	f108 0601 	add.w	r6, r8, #1
 8011680:	42b3      	cmp	r3, r6
 8011682:	db0b      	blt.n	801169c <__lshift+0x38>
 8011684:	4638      	mov	r0, r7
 8011686:	f7ff fd95 	bl	80111b4 <_Balloc>
 801168a:	4605      	mov	r5, r0
 801168c:	b948      	cbnz	r0, 80116a2 <__lshift+0x3e>
 801168e:	4602      	mov	r2, r0
 8011690:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011694:	4b29      	ldr	r3, [pc, #164]	; (801173c <__lshift+0xd8>)
 8011696:	482a      	ldr	r0, [pc, #168]	; (8011740 <__lshift+0xdc>)
 8011698:	f7fe fb4e 	bl	800fd38 <__assert_func>
 801169c:	3101      	adds	r1, #1
 801169e:	005b      	lsls	r3, r3, #1
 80116a0:	e7ee      	b.n	8011680 <__lshift+0x1c>
 80116a2:	2300      	movs	r3, #0
 80116a4:	f100 0114 	add.w	r1, r0, #20
 80116a8:	f100 0210 	add.w	r2, r0, #16
 80116ac:	4618      	mov	r0, r3
 80116ae:	4553      	cmp	r3, sl
 80116b0:	db37      	blt.n	8011722 <__lshift+0xbe>
 80116b2:	6920      	ldr	r0, [r4, #16]
 80116b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80116b8:	f104 0314 	add.w	r3, r4, #20
 80116bc:	f019 091f 	ands.w	r9, r9, #31
 80116c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80116c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80116c8:	d02f      	beq.n	801172a <__lshift+0xc6>
 80116ca:	468a      	mov	sl, r1
 80116cc:	f04f 0c00 	mov.w	ip, #0
 80116d0:	f1c9 0e20 	rsb	lr, r9, #32
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	fa02 f209 	lsl.w	r2, r2, r9
 80116da:	ea42 020c 	orr.w	r2, r2, ip
 80116de:	f84a 2b04 	str.w	r2, [sl], #4
 80116e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80116e6:	4298      	cmp	r0, r3
 80116e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80116ec:	d8f2      	bhi.n	80116d4 <__lshift+0x70>
 80116ee:	1b03      	subs	r3, r0, r4
 80116f0:	3b15      	subs	r3, #21
 80116f2:	f023 0303 	bic.w	r3, r3, #3
 80116f6:	3304      	adds	r3, #4
 80116f8:	f104 0215 	add.w	r2, r4, #21
 80116fc:	4290      	cmp	r0, r2
 80116fe:	bf38      	it	cc
 8011700:	2304      	movcc	r3, #4
 8011702:	f841 c003 	str.w	ip, [r1, r3]
 8011706:	f1bc 0f00 	cmp.w	ip, #0
 801170a:	d001      	beq.n	8011710 <__lshift+0xac>
 801170c:	f108 0602 	add.w	r6, r8, #2
 8011710:	3e01      	subs	r6, #1
 8011712:	4638      	mov	r0, r7
 8011714:	4621      	mov	r1, r4
 8011716:	612e      	str	r6, [r5, #16]
 8011718:	f7ff fd8c 	bl	8011234 <_Bfree>
 801171c:	4628      	mov	r0, r5
 801171e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011722:	f842 0f04 	str.w	r0, [r2, #4]!
 8011726:	3301      	adds	r3, #1
 8011728:	e7c1      	b.n	80116ae <__lshift+0x4a>
 801172a:	3904      	subs	r1, #4
 801172c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011730:	4298      	cmp	r0, r3
 8011732:	f841 2f04 	str.w	r2, [r1, #4]!
 8011736:	d8f9      	bhi.n	801172c <__lshift+0xc8>
 8011738:	e7ea      	b.n	8011710 <__lshift+0xac>
 801173a:	bf00      	nop
 801173c:	08012ee0 	.word	0x08012ee0
 8011740:	08012f6c 	.word	0x08012f6c

08011744 <__mcmp>:
 8011744:	4603      	mov	r3, r0
 8011746:	690a      	ldr	r2, [r1, #16]
 8011748:	6900      	ldr	r0, [r0, #16]
 801174a:	b530      	push	{r4, r5, lr}
 801174c:	1a80      	subs	r0, r0, r2
 801174e:	d10d      	bne.n	801176c <__mcmp+0x28>
 8011750:	3314      	adds	r3, #20
 8011752:	3114      	adds	r1, #20
 8011754:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011758:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801175c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011760:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011764:	4295      	cmp	r5, r2
 8011766:	d002      	beq.n	801176e <__mcmp+0x2a>
 8011768:	d304      	bcc.n	8011774 <__mcmp+0x30>
 801176a:	2001      	movs	r0, #1
 801176c:	bd30      	pop	{r4, r5, pc}
 801176e:	42a3      	cmp	r3, r4
 8011770:	d3f4      	bcc.n	801175c <__mcmp+0x18>
 8011772:	e7fb      	b.n	801176c <__mcmp+0x28>
 8011774:	f04f 30ff 	mov.w	r0, #4294967295
 8011778:	e7f8      	b.n	801176c <__mcmp+0x28>
	...

0801177c <__mdiff>:
 801177c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011780:	460d      	mov	r5, r1
 8011782:	4607      	mov	r7, r0
 8011784:	4611      	mov	r1, r2
 8011786:	4628      	mov	r0, r5
 8011788:	4614      	mov	r4, r2
 801178a:	f7ff ffdb 	bl	8011744 <__mcmp>
 801178e:	1e06      	subs	r6, r0, #0
 8011790:	d111      	bne.n	80117b6 <__mdiff+0x3a>
 8011792:	4631      	mov	r1, r6
 8011794:	4638      	mov	r0, r7
 8011796:	f7ff fd0d 	bl	80111b4 <_Balloc>
 801179a:	4602      	mov	r2, r0
 801179c:	b928      	cbnz	r0, 80117aa <__mdiff+0x2e>
 801179e:	f240 2132 	movw	r1, #562	; 0x232
 80117a2:	4b3a      	ldr	r3, [pc, #232]	; (801188c <__mdiff+0x110>)
 80117a4:	483a      	ldr	r0, [pc, #232]	; (8011890 <__mdiff+0x114>)
 80117a6:	f7fe fac7 	bl	800fd38 <__assert_func>
 80117aa:	2301      	movs	r3, #1
 80117ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80117b0:	4610      	mov	r0, r2
 80117b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b6:	bfa4      	itt	ge
 80117b8:	4623      	movge	r3, r4
 80117ba:	462c      	movge	r4, r5
 80117bc:	4638      	mov	r0, r7
 80117be:	6861      	ldr	r1, [r4, #4]
 80117c0:	bfa6      	itte	ge
 80117c2:	461d      	movge	r5, r3
 80117c4:	2600      	movge	r6, #0
 80117c6:	2601      	movlt	r6, #1
 80117c8:	f7ff fcf4 	bl	80111b4 <_Balloc>
 80117cc:	4602      	mov	r2, r0
 80117ce:	b918      	cbnz	r0, 80117d8 <__mdiff+0x5c>
 80117d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80117d4:	4b2d      	ldr	r3, [pc, #180]	; (801188c <__mdiff+0x110>)
 80117d6:	e7e5      	b.n	80117a4 <__mdiff+0x28>
 80117d8:	f102 0814 	add.w	r8, r2, #20
 80117dc:	46c2      	mov	sl, r8
 80117de:	f04f 0c00 	mov.w	ip, #0
 80117e2:	6927      	ldr	r7, [r4, #16]
 80117e4:	60c6      	str	r6, [r0, #12]
 80117e6:	692e      	ldr	r6, [r5, #16]
 80117e8:	f104 0014 	add.w	r0, r4, #20
 80117ec:	f105 0914 	add.w	r9, r5, #20
 80117f0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80117f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80117f8:	3410      	adds	r4, #16
 80117fa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80117fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8011802:	fa1f f18b 	uxth.w	r1, fp
 8011806:	448c      	add	ip, r1
 8011808:	b299      	uxth	r1, r3
 801180a:	0c1b      	lsrs	r3, r3, #16
 801180c:	ebac 0101 	sub.w	r1, ip, r1
 8011810:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011814:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011818:	b289      	uxth	r1, r1
 801181a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801181e:	454e      	cmp	r6, r9
 8011820:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011824:	f84a 3b04 	str.w	r3, [sl], #4
 8011828:	d8e7      	bhi.n	80117fa <__mdiff+0x7e>
 801182a:	1b73      	subs	r3, r6, r5
 801182c:	3b15      	subs	r3, #21
 801182e:	f023 0303 	bic.w	r3, r3, #3
 8011832:	3515      	adds	r5, #21
 8011834:	3304      	adds	r3, #4
 8011836:	42ae      	cmp	r6, r5
 8011838:	bf38      	it	cc
 801183a:	2304      	movcc	r3, #4
 801183c:	4418      	add	r0, r3
 801183e:	4443      	add	r3, r8
 8011840:	461e      	mov	r6, r3
 8011842:	4605      	mov	r5, r0
 8011844:	4575      	cmp	r5, lr
 8011846:	d30e      	bcc.n	8011866 <__mdiff+0xea>
 8011848:	f10e 0103 	add.w	r1, lr, #3
 801184c:	1a09      	subs	r1, r1, r0
 801184e:	f021 0103 	bic.w	r1, r1, #3
 8011852:	3803      	subs	r0, #3
 8011854:	4586      	cmp	lr, r0
 8011856:	bf38      	it	cc
 8011858:	2100      	movcc	r1, #0
 801185a:	4419      	add	r1, r3
 801185c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8011860:	b18b      	cbz	r3, 8011886 <__mdiff+0x10a>
 8011862:	6117      	str	r7, [r2, #16]
 8011864:	e7a4      	b.n	80117b0 <__mdiff+0x34>
 8011866:	f855 8b04 	ldr.w	r8, [r5], #4
 801186a:	fa1f f188 	uxth.w	r1, r8
 801186e:	4461      	add	r1, ip
 8011870:	140c      	asrs	r4, r1, #16
 8011872:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011876:	b289      	uxth	r1, r1
 8011878:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801187c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8011880:	f846 1b04 	str.w	r1, [r6], #4
 8011884:	e7de      	b.n	8011844 <__mdiff+0xc8>
 8011886:	3f01      	subs	r7, #1
 8011888:	e7e8      	b.n	801185c <__mdiff+0xe0>
 801188a:	bf00      	nop
 801188c:	08012ee0 	.word	0x08012ee0
 8011890:	08012f6c 	.word	0x08012f6c

08011894 <__ulp>:
 8011894:	4b11      	ldr	r3, [pc, #68]	; (80118dc <__ulp+0x48>)
 8011896:	400b      	ands	r3, r1
 8011898:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801189c:	2b00      	cmp	r3, #0
 801189e:	dd02      	ble.n	80118a6 <__ulp+0x12>
 80118a0:	2000      	movs	r0, #0
 80118a2:	4619      	mov	r1, r3
 80118a4:	4770      	bx	lr
 80118a6:	425b      	negs	r3, r3
 80118a8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80118ac:	f04f 0000 	mov.w	r0, #0
 80118b0:	f04f 0100 	mov.w	r1, #0
 80118b4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80118b8:	da04      	bge.n	80118c4 <__ulp+0x30>
 80118ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80118be:	fa43 f102 	asr.w	r1, r3, r2
 80118c2:	4770      	bx	lr
 80118c4:	f1a2 0314 	sub.w	r3, r2, #20
 80118c8:	2b1e      	cmp	r3, #30
 80118ca:	bfd6      	itet	le
 80118cc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80118d0:	2301      	movgt	r3, #1
 80118d2:	fa22 f303 	lsrle.w	r3, r2, r3
 80118d6:	4618      	mov	r0, r3
 80118d8:	4770      	bx	lr
 80118da:	bf00      	nop
 80118dc:	7ff00000 	.word	0x7ff00000

080118e0 <__b2d>:
 80118e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118e4:	6907      	ldr	r7, [r0, #16]
 80118e6:	f100 0914 	add.w	r9, r0, #20
 80118ea:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80118ee:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80118f2:	f1a7 0804 	sub.w	r8, r7, #4
 80118f6:	4630      	mov	r0, r6
 80118f8:	f7ff fd4e 	bl	8011398 <__hi0bits>
 80118fc:	f1c0 0320 	rsb	r3, r0, #32
 8011900:	280a      	cmp	r0, #10
 8011902:	600b      	str	r3, [r1, #0]
 8011904:	491f      	ldr	r1, [pc, #124]	; (8011984 <__b2d+0xa4>)
 8011906:	dc17      	bgt.n	8011938 <__b2d+0x58>
 8011908:	45c1      	cmp	r9, r8
 801190a:	bf28      	it	cs
 801190c:	2200      	movcs	r2, #0
 801190e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011912:	fa26 f30c 	lsr.w	r3, r6, ip
 8011916:	bf38      	it	cc
 8011918:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801191c:	ea43 0501 	orr.w	r5, r3, r1
 8011920:	f100 0315 	add.w	r3, r0, #21
 8011924:	fa06 f303 	lsl.w	r3, r6, r3
 8011928:	fa22 f20c 	lsr.w	r2, r2, ip
 801192c:	ea43 0402 	orr.w	r4, r3, r2
 8011930:	4620      	mov	r0, r4
 8011932:	4629      	mov	r1, r5
 8011934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011938:	45c1      	cmp	r9, r8
 801193a:	bf2e      	itee	cs
 801193c:	2200      	movcs	r2, #0
 801193e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011942:	f1a7 0808 	subcc.w	r8, r7, #8
 8011946:	f1b0 030b 	subs.w	r3, r0, #11
 801194a:	d016      	beq.n	801197a <__b2d+0x9a>
 801194c:	f1c3 0720 	rsb	r7, r3, #32
 8011950:	fa22 f107 	lsr.w	r1, r2, r7
 8011954:	45c8      	cmp	r8, r9
 8011956:	fa06 f603 	lsl.w	r6, r6, r3
 801195a:	ea46 0601 	orr.w	r6, r6, r1
 801195e:	bf94      	ite	ls
 8011960:	2100      	movls	r1, #0
 8011962:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8011966:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801196a:	fa02 f003 	lsl.w	r0, r2, r3
 801196e:	40f9      	lsrs	r1, r7
 8011970:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011974:	ea40 0401 	orr.w	r4, r0, r1
 8011978:	e7da      	b.n	8011930 <__b2d+0x50>
 801197a:	4614      	mov	r4, r2
 801197c:	ea46 0501 	orr.w	r5, r6, r1
 8011980:	e7d6      	b.n	8011930 <__b2d+0x50>
 8011982:	bf00      	nop
 8011984:	3ff00000 	.word	0x3ff00000

08011988 <__d2b>:
 8011988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801198c:	2101      	movs	r1, #1
 801198e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8011992:	4690      	mov	r8, r2
 8011994:	461d      	mov	r5, r3
 8011996:	f7ff fc0d 	bl	80111b4 <_Balloc>
 801199a:	4604      	mov	r4, r0
 801199c:	b930      	cbnz	r0, 80119ac <__d2b+0x24>
 801199e:	4602      	mov	r2, r0
 80119a0:	f240 310a 	movw	r1, #778	; 0x30a
 80119a4:	4b24      	ldr	r3, [pc, #144]	; (8011a38 <__d2b+0xb0>)
 80119a6:	4825      	ldr	r0, [pc, #148]	; (8011a3c <__d2b+0xb4>)
 80119a8:	f7fe f9c6 	bl	800fd38 <__assert_func>
 80119ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80119b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80119b4:	bb2d      	cbnz	r5, 8011a02 <__d2b+0x7a>
 80119b6:	9301      	str	r3, [sp, #4]
 80119b8:	f1b8 0300 	subs.w	r3, r8, #0
 80119bc:	d026      	beq.n	8011a0c <__d2b+0x84>
 80119be:	4668      	mov	r0, sp
 80119c0:	9300      	str	r3, [sp, #0]
 80119c2:	f7ff fd09 	bl	80113d8 <__lo0bits>
 80119c6:	9900      	ldr	r1, [sp, #0]
 80119c8:	b1f0      	cbz	r0, 8011a08 <__d2b+0x80>
 80119ca:	9a01      	ldr	r2, [sp, #4]
 80119cc:	f1c0 0320 	rsb	r3, r0, #32
 80119d0:	fa02 f303 	lsl.w	r3, r2, r3
 80119d4:	430b      	orrs	r3, r1
 80119d6:	40c2      	lsrs	r2, r0
 80119d8:	6163      	str	r3, [r4, #20]
 80119da:	9201      	str	r2, [sp, #4]
 80119dc:	9b01      	ldr	r3, [sp, #4]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	bf14      	ite	ne
 80119e2:	2102      	movne	r1, #2
 80119e4:	2101      	moveq	r1, #1
 80119e6:	61a3      	str	r3, [r4, #24]
 80119e8:	6121      	str	r1, [r4, #16]
 80119ea:	b1c5      	cbz	r5, 8011a1e <__d2b+0x96>
 80119ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80119f0:	4405      	add	r5, r0
 80119f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80119f6:	603d      	str	r5, [r7, #0]
 80119f8:	6030      	str	r0, [r6, #0]
 80119fa:	4620      	mov	r0, r4
 80119fc:	b002      	add	sp, #8
 80119fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a06:	e7d6      	b.n	80119b6 <__d2b+0x2e>
 8011a08:	6161      	str	r1, [r4, #20]
 8011a0a:	e7e7      	b.n	80119dc <__d2b+0x54>
 8011a0c:	a801      	add	r0, sp, #4
 8011a0e:	f7ff fce3 	bl	80113d8 <__lo0bits>
 8011a12:	2101      	movs	r1, #1
 8011a14:	9b01      	ldr	r3, [sp, #4]
 8011a16:	6121      	str	r1, [r4, #16]
 8011a18:	6163      	str	r3, [r4, #20]
 8011a1a:	3020      	adds	r0, #32
 8011a1c:	e7e5      	b.n	80119ea <__d2b+0x62>
 8011a1e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8011a22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011a26:	6038      	str	r0, [r7, #0]
 8011a28:	6918      	ldr	r0, [r3, #16]
 8011a2a:	f7ff fcb5 	bl	8011398 <__hi0bits>
 8011a2e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8011a32:	6031      	str	r1, [r6, #0]
 8011a34:	e7e1      	b.n	80119fa <__d2b+0x72>
 8011a36:	bf00      	nop
 8011a38:	08012ee0 	.word	0x08012ee0
 8011a3c:	08012f6c 	.word	0x08012f6c

08011a40 <__ratio>:
 8011a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a44:	4688      	mov	r8, r1
 8011a46:	4669      	mov	r1, sp
 8011a48:	4681      	mov	r9, r0
 8011a4a:	f7ff ff49 	bl	80118e0 <__b2d>
 8011a4e:	460f      	mov	r7, r1
 8011a50:	4604      	mov	r4, r0
 8011a52:	460d      	mov	r5, r1
 8011a54:	4640      	mov	r0, r8
 8011a56:	a901      	add	r1, sp, #4
 8011a58:	f7ff ff42 	bl	80118e0 <__b2d>
 8011a5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011a60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011a64:	468b      	mov	fp, r1
 8011a66:	eba3 0c02 	sub.w	ip, r3, r2
 8011a6a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011a6e:	1a9b      	subs	r3, r3, r2
 8011a70:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	bfd5      	itete	le
 8011a78:	460a      	movle	r2, r1
 8011a7a:	462a      	movgt	r2, r5
 8011a7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011a80:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011a84:	bfd8      	it	le
 8011a86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011a8a:	465b      	mov	r3, fp
 8011a8c:	4602      	mov	r2, r0
 8011a8e:	4639      	mov	r1, r7
 8011a90:	4620      	mov	r0, r4
 8011a92:	f7ee fe6d 	bl	8000770 <__aeabi_ddiv>
 8011a96:	b003      	add	sp, #12
 8011a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a9c <__copybits>:
 8011a9c:	3901      	subs	r1, #1
 8011a9e:	b570      	push	{r4, r5, r6, lr}
 8011aa0:	1149      	asrs	r1, r1, #5
 8011aa2:	6914      	ldr	r4, [r2, #16]
 8011aa4:	3101      	adds	r1, #1
 8011aa6:	f102 0314 	add.w	r3, r2, #20
 8011aaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011aae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011ab2:	1f05      	subs	r5, r0, #4
 8011ab4:	42a3      	cmp	r3, r4
 8011ab6:	d30c      	bcc.n	8011ad2 <__copybits+0x36>
 8011ab8:	1aa3      	subs	r3, r4, r2
 8011aba:	3b11      	subs	r3, #17
 8011abc:	f023 0303 	bic.w	r3, r3, #3
 8011ac0:	3211      	adds	r2, #17
 8011ac2:	42a2      	cmp	r2, r4
 8011ac4:	bf88      	it	hi
 8011ac6:	2300      	movhi	r3, #0
 8011ac8:	4418      	add	r0, r3
 8011aca:	2300      	movs	r3, #0
 8011acc:	4288      	cmp	r0, r1
 8011ace:	d305      	bcc.n	8011adc <__copybits+0x40>
 8011ad0:	bd70      	pop	{r4, r5, r6, pc}
 8011ad2:	f853 6b04 	ldr.w	r6, [r3], #4
 8011ad6:	f845 6f04 	str.w	r6, [r5, #4]!
 8011ada:	e7eb      	b.n	8011ab4 <__copybits+0x18>
 8011adc:	f840 3b04 	str.w	r3, [r0], #4
 8011ae0:	e7f4      	b.n	8011acc <__copybits+0x30>

08011ae2 <__any_on>:
 8011ae2:	f100 0214 	add.w	r2, r0, #20
 8011ae6:	6900      	ldr	r0, [r0, #16]
 8011ae8:	114b      	asrs	r3, r1, #5
 8011aea:	4298      	cmp	r0, r3
 8011aec:	b510      	push	{r4, lr}
 8011aee:	db11      	blt.n	8011b14 <__any_on+0x32>
 8011af0:	dd0a      	ble.n	8011b08 <__any_on+0x26>
 8011af2:	f011 011f 	ands.w	r1, r1, #31
 8011af6:	d007      	beq.n	8011b08 <__any_on+0x26>
 8011af8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011afc:	fa24 f001 	lsr.w	r0, r4, r1
 8011b00:	fa00 f101 	lsl.w	r1, r0, r1
 8011b04:	428c      	cmp	r4, r1
 8011b06:	d10b      	bne.n	8011b20 <__any_on+0x3e>
 8011b08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011b0c:	4293      	cmp	r3, r2
 8011b0e:	d803      	bhi.n	8011b18 <__any_on+0x36>
 8011b10:	2000      	movs	r0, #0
 8011b12:	bd10      	pop	{r4, pc}
 8011b14:	4603      	mov	r3, r0
 8011b16:	e7f7      	b.n	8011b08 <__any_on+0x26>
 8011b18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b1c:	2900      	cmp	r1, #0
 8011b1e:	d0f5      	beq.n	8011b0c <__any_on+0x2a>
 8011b20:	2001      	movs	r0, #1
 8011b22:	e7f6      	b.n	8011b12 <__any_on+0x30>

08011b24 <_calloc_r>:
 8011b24:	b570      	push	{r4, r5, r6, lr}
 8011b26:	fba1 5402 	umull	r5, r4, r1, r2
 8011b2a:	b934      	cbnz	r4, 8011b3a <_calloc_r+0x16>
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	f000 f875 	bl	8011c1c <_malloc_r>
 8011b32:	4606      	mov	r6, r0
 8011b34:	b928      	cbnz	r0, 8011b42 <_calloc_r+0x1e>
 8011b36:	4630      	mov	r0, r6
 8011b38:	bd70      	pop	{r4, r5, r6, pc}
 8011b3a:	220c      	movs	r2, #12
 8011b3c:	2600      	movs	r6, #0
 8011b3e:	6002      	str	r2, [r0, #0]
 8011b40:	e7f9      	b.n	8011b36 <_calloc_r+0x12>
 8011b42:	462a      	mov	r2, r5
 8011b44:	4621      	mov	r1, r4
 8011b46:	f7fc fdf3 	bl	800e730 <memset>
 8011b4a:	e7f4      	b.n	8011b36 <_calloc_r+0x12>

08011b4c <_free_r>:
 8011b4c:	b538      	push	{r3, r4, r5, lr}
 8011b4e:	4605      	mov	r5, r0
 8011b50:	2900      	cmp	r1, #0
 8011b52:	d040      	beq.n	8011bd6 <_free_r+0x8a>
 8011b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b58:	1f0c      	subs	r4, r1, #4
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	bfb8      	it	lt
 8011b5e:	18e4      	addlt	r4, r4, r3
 8011b60:	f000 feba 	bl	80128d8 <__malloc_lock>
 8011b64:	4a1c      	ldr	r2, [pc, #112]	; (8011bd8 <_free_r+0x8c>)
 8011b66:	6813      	ldr	r3, [r2, #0]
 8011b68:	b933      	cbnz	r3, 8011b78 <_free_r+0x2c>
 8011b6a:	6063      	str	r3, [r4, #4]
 8011b6c:	6014      	str	r4, [r2, #0]
 8011b6e:	4628      	mov	r0, r5
 8011b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b74:	f000 beb6 	b.w	80128e4 <__malloc_unlock>
 8011b78:	42a3      	cmp	r3, r4
 8011b7a:	d908      	bls.n	8011b8e <_free_r+0x42>
 8011b7c:	6820      	ldr	r0, [r4, #0]
 8011b7e:	1821      	adds	r1, r4, r0
 8011b80:	428b      	cmp	r3, r1
 8011b82:	bf01      	itttt	eq
 8011b84:	6819      	ldreq	r1, [r3, #0]
 8011b86:	685b      	ldreq	r3, [r3, #4]
 8011b88:	1809      	addeq	r1, r1, r0
 8011b8a:	6021      	streq	r1, [r4, #0]
 8011b8c:	e7ed      	b.n	8011b6a <_free_r+0x1e>
 8011b8e:	461a      	mov	r2, r3
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	b10b      	cbz	r3, 8011b98 <_free_r+0x4c>
 8011b94:	42a3      	cmp	r3, r4
 8011b96:	d9fa      	bls.n	8011b8e <_free_r+0x42>
 8011b98:	6811      	ldr	r1, [r2, #0]
 8011b9a:	1850      	adds	r0, r2, r1
 8011b9c:	42a0      	cmp	r0, r4
 8011b9e:	d10b      	bne.n	8011bb8 <_free_r+0x6c>
 8011ba0:	6820      	ldr	r0, [r4, #0]
 8011ba2:	4401      	add	r1, r0
 8011ba4:	1850      	adds	r0, r2, r1
 8011ba6:	4283      	cmp	r3, r0
 8011ba8:	6011      	str	r1, [r2, #0]
 8011baa:	d1e0      	bne.n	8011b6e <_free_r+0x22>
 8011bac:	6818      	ldr	r0, [r3, #0]
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	4401      	add	r1, r0
 8011bb2:	6011      	str	r1, [r2, #0]
 8011bb4:	6053      	str	r3, [r2, #4]
 8011bb6:	e7da      	b.n	8011b6e <_free_r+0x22>
 8011bb8:	d902      	bls.n	8011bc0 <_free_r+0x74>
 8011bba:	230c      	movs	r3, #12
 8011bbc:	602b      	str	r3, [r5, #0]
 8011bbe:	e7d6      	b.n	8011b6e <_free_r+0x22>
 8011bc0:	6820      	ldr	r0, [r4, #0]
 8011bc2:	1821      	adds	r1, r4, r0
 8011bc4:	428b      	cmp	r3, r1
 8011bc6:	bf01      	itttt	eq
 8011bc8:	6819      	ldreq	r1, [r3, #0]
 8011bca:	685b      	ldreq	r3, [r3, #4]
 8011bcc:	1809      	addeq	r1, r1, r0
 8011bce:	6021      	streq	r1, [r4, #0]
 8011bd0:	6063      	str	r3, [r4, #4]
 8011bd2:	6054      	str	r4, [r2, #4]
 8011bd4:	e7cb      	b.n	8011b6e <_free_r+0x22>
 8011bd6:	bd38      	pop	{r3, r4, r5, pc}
 8011bd8:	20001934 	.word	0x20001934

08011bdc <sbrk_aligned>:
 8011bdc:	b570      	push	{r4, r5, r6, lr}
 8011bde:	4e0e      	ldr	r6, [pc, #56]	; (8011c18 <sbrk_aligned+0x3c>)
 8011be0:	460c      	mov	r4, r1
 8011be2:	6831      	ldr	r1, [r6, #0]
 8011be4:	4605      	mov	r5, r0
 8011be6:	b911      	cbnz	r1, 8011bee <sbrk_aligned+0x12>
 8011be8:	f000 fb46 	bl	8012278 <_sbrk_r>
 8011bec:	6030      	str	r0, [r6, #0]
 8011bee:	4621      	mov	r1, r4
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	f000 fb41 	bl	8012278 <_sbrk_r>
 8011bf6:	1c43      	adds	r3, r0, #1
 8011bf8:	d00a      	beq.n	8011c10 <sbrk_aligned+0x34>
 8011bfa:	1cc4      	adds	r4, r0, #3
 8011bfc:	f024 0403 	bic.w	r4, r4, #3
 8011c00:	42a0      	cmp	r0, r4
 8011c02:	d007      	beq.n	8011c14 <sbrk_aligned+0x38>
 8011c04:	1a21      	subs	r1, r4, r0
 8011c06:	4628      	mov	r0, r5
 8011c08:	f000 fb36 	bl	8012278 <_sbrk_r>
 8011c0c:	3001      	adds	r0, #1
 8011c0e:	d101      	bne.n	8011c14 <sbrk_aligned+0x38>
 8011c10:	f04f 34ff 	mov.w	r4, #4294967295
 8011c14:	4620      	mov	r0, r4
 8011c16:	bd70      	pop	{r4, r5, r6, pc}
 8011c18:	20001938 	.word	0x20001938

08011c1c <_malloc_r>:
 8011c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c20:	1ccd      	adds	r5, r1, #3
 8011c22:	f025 0503 	bic.w	r5, r5, #3
 8011c26:	3508      	adds	r5, #8
 8011c28:	2d0c      	cmp	r5, #12
 8011c2a:	bf38      	it	cc
 8011c2c:	250c      	movcc	r5, #12
 8011c2e:	2d00      	cmp	r5, #0
 8011c30:	4607      	mov	r7, r0
 8011c32:	db01      	blt.n	8011c38 <_malloc_r+0x1c>
 8011c34:	42a9      	cmp	r1, r5
 8011c36:	d905      	bls.n	8011c44 <_malloc_r+0x28>
 8011c38:	230c      	movs	r3, #12
 8011c3a:	2600      	movs	r6, #0
 8011c3c:	603b      	str	r3, [r7, #0]
 8011c3e:	4630      	mov	r0, r6
 8011c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c44:	4e2e      	ldr	r6, [pc, #184]	; (8011d00 <_malloc_r+0xe4>)
 8011c46:	f000 fe47 	bl	80128d8 <__malloc_lock>
 8011c4a:	6833      	ldr	r3, [r6, #0]
 8011c4c:	461c      	mov	r4, r3
 8011c4e:	bb34      	cbnz	r4, 8011c9e <_malloc_r+0x82>
 8011c50:	4629      	mov	r1, r5
 8011c52:	4638      	mov	r0, r7
 8011c54:	f7ff ffc2 	bl	8011bdc <sbrk_aligned>
 8011c58:	1c43      	adds	r3, r0, #1
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	d14d      	bne.n	8011cfa <_malloc_r+0xde>
 8011c5e:	6834      	ldr	r4, [r6, #0]
 8011c60:	4626      	mov	r6, r4
 8011c62:	2e00      	cmp	r6, #0
 8011c64:	d140      	bne.n	8011ce8 <_malloc_r+0xcc>
 8011c66:	6823      	ldr	r3, [r4, #0]
 8011c68:	4631      	mov	r1, r6
 8011c6a:	4638      	mov	r0, r7
 8011c6c:	eb04 0803 	add.w	r8, r4, r3
 8011c70:	f000 fb02 	bl	8012278 <_sbrk_r>
 8011c74:	4580      	cmp	r8, r0
 8011c76:	d13a      	bne.n	8011cee <_malloc_r+0xd2>
 8011c78:	6821      	ldr	r1, [r4, #0]
 8011c7a:	3503      	adds	r5, #3
 8011c7c:	1a6d      	subs	r5, r5, r1
 8011c7e:	f025 0503 	bic.w	r5, r5, #3
 8011c82:	3508      	adds	r5, #8
 8011c84:	2d0c      	cmp	r5, #12
 8011c86:	bf38      	it	cc
 8011c88:	250c      	movcc	r5, #12
 8011c8a:	4638      	mov	r0, r7
 8011c8c:	4629      	mov	r1, r5
 8011c8e:	f7ff ffa5 	bl	8011bdc <sbrk_aligned>
 8011c92:	3001      	adds	r0, #1
 8011c94:	d02b      	beq.n	8011cee <_malloc_r+0xd2>
 8011c96:	6823      	ldr	r3, [r4, #0]
 8011c98:	442b      	add	r3, r5
 8011c9a:	6023      	str	r3, [r4, #0]
 8011c9c:	e00e      	b.n	8011cbc <_malloc_r+0xa0>
 8011c9e:	6822      	ldr	r2, [r4, #0]
 8011ca0:	1b52      	subs	r2, r2, r5
 8011ca2:	d41e      	bmi.n	8011ce2 <_malloc_r+0xc6>
 8011ca4:	2a0b      	cmp	r2, #11
 8011ca6:	d916      	bls.n	8011cd6 <_malloc_r+0xba>
 8011ca8:	1961      	adds	r1, r4, r5
 8011caa:	42a3      	cmp	r3, r4
 8011cac:	6025      	str	r5, [r4, #0]
 8011cae:	bf18      	it	ne
 8011cb0:	6059      	strne	r1, [r3, #4]
 8011cb2:	6863      	ldr	r3, [r4, #4]
 8011cb4:	bf08      	it	eq
 8011cb6:	6031      	streq	r1, [r6, #0]
 8011cb8:	5162      	str	r2, [r4, r5]
 8011cba:	604b      	str	r3, [r1, #4]
 8011cbc:	4638      	mov	r0, r7
 8011cbe:	f104 060b 	add.w	r6, r4, #11
 8011cc2:	f000 fe0f 	bl	80128e4 <__malloc_unlock>
 8011cc6:	f026 0607 	bic.w	r6, r6, #7
 8011cca:	1d23      	adds	r3, r4, #4
 8011ccc:	1af2      	subs	r2, r6, r3
 8011cce:	d0b6      	beq.n	8011c3e <_malloc_r+0x22>
 8011cd0:	1b9b      	subs	r3, r3, r6
 8011cd2:	50a3      	str	r3, [r4, r2]
 8011cd4:	e7b3      	b.n	8011c3e <_malloc_r+0x22>
 8011cd6:	6862      	ldr	r2, [r4, #4]
 8011cd8:	42a3      	cmp	r3, r4
 8011cda:	bf0c      	ite	eq
 8011cdc:	6032      	streq	r2, [r6, #0]
 8011cde:	605a      	strne	r2, [r3, #4]
 8011ce0:	e7ec      	b.n	8011cbc <_malloc_r+0xa0>
 8011ce2:	4623      	mov	r3, r4
 8011ce4:	6864      	ldr	r4, [r4, #4]
 8011ce6:	e7b2      	b.n	8011c4e <_malloc_r+0x32>
 8011ce8:	4634      	mov	r4, r6
 8011cea:	6876      	ldr	r6, [r6, #4]
 8011cec:	e7b9      	b.n	8011c62 <_malloc_r+0x46>
 8011cee:	230c      	movs	r3, #12
 8011cf0:	4638      	mov	r0, r7
 8011cf2:	603b      	str	r3, [r7, #0]
 8011cf4:	f000 fdf6 	bl	80128e4 <__malloc_unlock>
 8011cf8:	e7a1      	b.n	8011c3e <_malloc_r+0x22>
 8011cfa:	6025      	str	r5, [r4, #0]
 8011cfc:	e7de      	b.n	8011cbc <_malloc_r+0xa0>
 8011cfe:	bf00      	nop
 8011d00:	20001934 	.word	0x20001934

08011d04 <__ssputs_r>:
 8011d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d08:	688e      	ldr	r6, [r1, #8]
 8011d0a:	4682      	mov	sl, r0
 8011d0c:	429e      	cmp	r6, r3
 8011d0e:	460c      	mov	r4, r1
 8011d10:	4690      	mov	r8, r2
 8011d12:	461f      	mov	r7, r3
 8011d14:	d838      	bhi.n	8011d88 <__ssputs_r+0x84>
 8011d16:	898a      	ldrh	r2, [r1, #12]
 8011d18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d1c:	d032      	beq.n	8011d84 <__ssputs_r+0x80>
 8011d1e:	6825      	ldr	r5, [r4, #0]
 8011d20:	6909      	ldr	r1, [r1, #16]
 8011d22:	3301      	adds	r3, #1
 8011d24:	eba5 0901 	sub.w	r9, r5, r1
 8011d28:	6965      	ldr	r5, [r4, #20]
 8011d2a:	444b      	add	r3, r9
 8011d2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d34:	106d      	asrs	r5, r5, #1
 8011d36:	429d      	cmp	r5, r3
 8011d38:	bf38      	it	cc
 8011d3a:	461d      	movcc	r5, r3
 8011d3c:	0553      	lsls	r3, r2, #21
 8011d3e:	d531      	bpl.n	8011da4 <__ssputs_r+0xa0>
 8011d40:	4629      	mov	r1, r5
 8011d42:	f7ff ff6b 	bl	8011c1c <_malloc_r>
 8011d46:	4606      	mov	r6, r0
 8011d48:	b950      	cbnz	r0, 8011d60 <__ssputs_r+0x5c>
 8011d4a:	230c      	movs	r3, #12
 8011d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d50:	f8ca 3000 	str.w	r3, [sl]
 8011d54:	89a3      	ldrh	r3, [r4, #12]
 8011d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d5a:	81a3      	strh	r3, [r4, #12]
 8011d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d60:	464a      	mov	r2, r9
 8011d62:	6921      	ldr	r1, [r4, #16]
 8011d64:	f7fc fcd6 	bl	800e714 <memcpy>
 8011d68:	89a3      	ldrh	r3, [r4, #12]
 8011d6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d72:	81a3      	strh	r3, [r4, #12]
 8011d74:	6126      	str	r6, [r4, #16]
 8011d76:	444e      	add	r6, r9
 8011d78:	6026      	str	r6, [r4, #0]
 8011d7a:	463e      	mov	r6, r7
 8011d7c:	6165      	str	r5, [r4, #20]
 8011d7e:	eba5 0509 	sub.w	r5, r5, r9
 8011d82:	60a5      	str	r5, [r4, #8]
 8011d84:	42be      	cmp	r6, r7
 8011d86:	d900      	bls.n	8011d8a <__ssputs_r+0x86>
 8011d88:	463e      	mov	r6, r7
 8011d8a:	4632      	mov	r2, r6
 8011d8c:	4641      	mov	r1, r8
 8011d8e:	6820      	ldr	r0, [r4, #0]
 8011d90:	f000 fd88 	bl	80128a4 <memmove>
 8011d94:	68a3      	ldr	r3, [r4, #8]
 8011d96:	2000      	movs	r0, #0
 8011d98:	1b9b      	subs	r3, r3, r6
 8011d9a:	60a3      	str	r3, [r4, #8]
 8011d9c:	6823      	ldr	r3, [r4, #0]
 8011d9e:	4433      	add	r3, r6
 8011da0:	6023      	str	r3, [r4, #0]
 8011da2:	e7db      	b.n	8011d5c <__ssputs_r+0x58>
 8011da4:	462a      	mov	r2, r5
 8011da6:	f000 fda3 	bl	80128f0 <_realloc_r>
 8011daa:	4606      	mov	r6, r0
 8011dac:	2800      	cmp	r0, #0
 8011dae:	d1e1      	bne.n	8011d74 <__ssputs_r+0x70>
 8011db0:	4650      	mov	r0, sl
 8011db2:	6921      	ldr	r1, [r4, #16]
 8011db4:	f7ff feca 	bl	8011b4c <_free_r>
 8011db8:	e7c7      	b.n	8011d4a <__ssputs_r+0x46>
	...

08011dbc <_svfiprintf_r>:
 8011dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc0:	4698      	mov	r8, r3
 8011dc2:	898b      	ldrh	r3, [r1, #12]
 8011dc4:	4607      	mov	r7, r0
 8011dc6:	061b      	lsls	r3, r3, #24
 8011dc8:	460d      	mov	r5, r1
 8011dca:	4614      	mov	r4, r2
 8011dcc:	b09d      	sub	sp, #116	; 0x74
 8011dce:	d50e      	bpl.n	8011dee <_svfiprintf_r+0x32>
 8011dd0:	690b      	ldr	r3, [r1, #16]
 8011dd2:	b963      	cbnz	r3, 8011dee <_svfiprintf_r+0x32>
 8011dd4:	2140      	movs	r1, #64	; 0x40
 8011dd6:	f7ff ff21 	bl	8011c1c <_malloc_r>
 8011dda:	6028      	str	r0, [r5, #0]
 8011ddc:	6128      	str	r0, [r5, #16]
 8011dde:	b920      	cbnz	r0, 8011dea <_svfiprintf_r+0x2e>
 8011de0:	230c      	movs	r3, #12
 8011de2:	603b      	str	r3, [r7, #0]
 8011de4:	f04f 30ff 	mov.w	r0, #4294967295
 8011de8:	e0d1      	b.n	8011f8e <_svfiprintf_r+0x1d2>
 8011dea:	2340      	movs	r3, #64	; 0x40
 8011dec:	616b      	str	r3, [r5, #20]
 8011dee:	2300      	movs	r3, #0
 8011df0:	9309      	str	r3, [sp, #36]	; 0x24
 8011df2:	2320      	movs	r3, #32
 8011df4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011df8:	2330      	movs	r3, #48	; 0x30
 8011dfa:	f04f 0901 	mov.w	r9, #1
 8011dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011fa8 <_svfiprintf_r+0x1ec>
 8011e06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e0a:	4623      	mov	r3, r4
 8011e0c:	469a      	mov	sl, r3
 8011e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e12:	b10a      	cbz	r2, 8011e18 <_svfiprintf_r+0x5c>
 8011e14:	2a25      	cmp	r2, #37	; 0x25
 8011e16:	d1f9      	bne.n	8011e0c <_svfiprintf_r+0x50>
 8011e18:	ebba 0b04 	subs.w	fp, sl, r4
 8011e1c:	d00b      	beq.n	8011e36 <_svfiprintf_r+0x7a>
 8011e1e:	465b      	mov	r3, fp
 8011e20:	4622      	mov	r2, r4
 8011e22:	4629      	mov	r1, r5
 8011e24:	4638      	mov	r0, r7
 8011e26:	f7ff ff6d 	bl	8011d04 <__ssputs_r>
 8011e2a:	3001      	adds	r0, #1
 8011e2c:	f000 80aa 	beq.w	8011f84 <_svfiprintf_r+0x1c8>
 8011e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e32:	445a      	add	r2, fp
 8011e34:	9209      	str	r2, [sp, #36]	; 0x24
 8011e36:	f89a 3000 	ldrb.w	r3, [sl]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	f000 80a2 	beq.w	8011f84 <_svfiprintf_r+0x1c8>
 8011e40:	2300      	movs	r3, #0
 8011e42:	f04f 32ff 	mov.w	r2, #4294967295
 8011e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e4a:	f10a 0a01 	add.w	sl, sl, #1
 8011e4e:	9304      	str	r3, [sp, #16]
 8011e50:	9307      	str	r3, [sp, #28]
 8011e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e56:	931a      	str	r3, [sp, #104]	; 0x68
 8011e58:	4654      	mov	r4, sl
 8011e5a:	2205      	movs	r2, #5
 8011e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e60:	4851      	ldr	r0, [pc, #324]	; (8011fa8 <_svfiprintf_r+0x1ec>)
 8011e62:	f7ff f999 	bl	8011198 <memchr>
 8011e66:	9a04      	ldr	r2, [sp, #16]
 8011e68:	b9d8      	cbnz	r0, 8011ea2 <_svfiprintf_r+0xe6>
 8011e6a:	06d0      	lsls	r0, r2, #27
 8011e6c:	bf44      	itt	mi
 8011e6e:	2320      	movmi	r3, #32
 8011e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e74:	0711      	lsls	r1, r2, #28
 8011e76:	bf44      	itt	mi
 8011e78:	232b      	movmi	r3, #43	; 0x2b
 8011e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e82:	2b2a      	cmp	r3, #42	; 0x2a
 8011e84:	d015      	beq.n	8011eb2 <_svfiprintf_r+0xf6>
 8011e86:	4654      	mov	r4, sl
 8011e88:	2000      	movs	r0, #0
 8011e8a:	f04f 0c0a 	mov.w	ip, #10
 8011e8e:	9a07      	ldr	r2, [sp, #28]
 8011e90:	4621      	mov	r1, r4
 8011e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e96:	3b30      	subs	r3, #48	; 0x30
 8011e98:	2b09      	cmp	r3, #9
 8011e9a:	d94e      	bls.n	8011f3a <_svfiprintf_r+0x17e>
 8011e9c:	b1b0      	cbz	r0, 8011ecc <_svfiprintf_r+0x110>
 8011e9e:	9207      	str	r2, [sp, #28]
 8011ea0:	e014      	b.n	8011ecc <_svfiprintf_r+0x110>
 8011ea2:	eba0 0308 	sub.w	r3, r0, r8
 8011ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8011eaa:	4313      	orrs	r3, r2
 8011eac:	46a2      	mov	sl, r4
 8011eae:	9304      	str	r3, [sp, #16]
 8011eb0:	e7d2      	b.n	8011e58 <_svfiprintf_r+0x9c>
 8011eb2:	9b03      	ldr	r3, [sp, #12]
 8011eb4:	1d19      	adds	r1, r3, #4
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	9103      	str	r1, [sp, #12]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	bfbb      	ittet	lt
 8011ebe:	425b      	neglt	r3, r3
 8011ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8011ec4:	9307      	strge	r3, [sp, #28]
 8011ec6:	9307      	strlt	r3, [sp, #28]
 8011ec8:	bfb8      	it	lt
 8011eca:	9204      	strlt	r2, [sp, #16]
 8011ecc:	7823      	ldrb	r3, [r4, #0]
 8011ece:	2b2e      	cmp	r3, #46	; 0x2e
 8011ed0:	d10c      	bne.n	8011eec <_svfiprintf_r+0x130>
 8011ed2:	7863      	ldrb	r3, [r4, #1]
 8011ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8011ed6:	d135      	bne.n	8011f44 <_svfiprintf_r+0x188>
 8011ed8:	9b03      	ldr	r3, [sp, #12]
 8011eda:	3402      	adds	r4, #2
 8011edc:	1d1a      	adds	r2, r3, #4
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	9203      	str	r2, [sp, #12]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	bfb8      	it	lt
 8011ee6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011eea:	9305      	str	r3, [sp, #20]
 8011eec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8011fac <_svfiprintf_r+0x1f0>
 8011ef0:	2203      	movs	r2, #3
 8011ef2:	4650      	mov	r0, sl
 8011ef4:	7821      	ldrb	r1, [r4, #0]
 8011ef6:	f7ff f94f 	bl	8011198 <memchr>
 8011efa:	b140      	cbz	r0, 8011f0e <_svfiprintf_r+0x152>
 8011efc:	2340      	movs	r3, #64	; 0x40
 8011efe:	eba0 000a 	sub.w	r0, r0, sl
 8011f02:	fa03 f000 	lsl.w	r0, r3, r0
 8011f06:	9b04      	ldr	r3, [sp, #16]
 8011f08:	3401      	adds	r4, #1
 8011f0a:	4303      	orrs	r3, r0
 8011f0c:	9304      	str	r3, [sp, #16]
 8011f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f12:	2206      	movs	r2, #6
 8011f14:	4826      	ldr	r0, [pc, #152]	; (8011fb0 <_svfiprintf_r+0x1f4>)
 8011f16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f1a:	f7ff f93d 	bl	8011198 <memchr>
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	d038      	beq.n	8011f94 <_svfiprintf_r+0x1d8>
 8011f22:	4b24      	ldr	r3, [pc, #144]	; (8011fb4 <_svfiprintf_r+0x1f8>)
 8011f24:	bb1b      	cbnz	r3, 8011f6e <_svfiprintf_r+0x1b2>
 8011f26:	9b03      	ldr	r3, [sp, #12]
 8011f28:	3307      	adds	r3, #7
 8011f2a:	f023 0307 	bic.w	r3, r3, #7
 8011f2e:	3308      	adds	r3, #8
 8011f30:	9303      	str	r3, [sp, #12]
 8011f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f34:	4433      	add	r3, r6
 8011f36:	9309      	str	r3, [sp, #36]	; 0x24
 8011f38:	e767      	b.n	8011e0a <_svfiprintf_r+0x4e>
 8011f3a:	460c      	mov	r4, r1
 8011f3c:	2001      	movs	r0, #1
 8011f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f42:	e7a5      	b.n	8011e90 <_svfiprintf_r+0xd4>
 8011f44:	2300      	movs	r3, #0
 8011f46:	f04f 0c0a 	mov.w	ip, #10
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	3401      	adds	r4, #1
 8011f4e:	9305      	str	r3, [sp, #20]
 8011f50:	4620      	mov	r0, r4
 8011f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f56:	3a30      	subs	r2, #48	; 0x30
 8011f58:	2a09      	cmp	r2, #9
 8011f5a:	d903      	bls.n	8011f64 <_svfiprintf_r+0x1a8>
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d0c5      	beq.n	8011eec <_svfiprintf_r+0x130>
 8011f60:	9105      	str	r1, [sp, #20]
 8011f62:	e7c3      	b.n	8011eec <_svfiprintf_r+0x130>
 8011f64:	4604      	mov	r4, r0
 8011f66:	2301      	movs	r3, #1
 8011f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f6c:	e7f0      	b.n	8011f50 <_svfiprintf_r+0x194>
 8011f6e:	ab03      	add	r3, sp, #12
 8011f70:	9300      	str	r3, [sp, #0]
 8011f72:	462a      	mov	r2, r5
 8011f74:	4638      	mov	r0, r7
 8011f76:	4b10      	ldr	r3, [pc, #64]	; (8011fb8 <_svfiprintf_r+0x1fc>)
 8011f78:	a904      	add	r1, sp, #16
 8011f7a:	f7fc fc7f 	bl	800e87c <_printf_float>
 8011f7e:	1c42      	adds	r2, r0, #1
 8011f80:	4606      	mov	r6, r0
 8011f82:	d1d6      	bne.n	8011f32 <_svfiprintf_r+0x176>
 8011f84:	89ab      	ldrh	r3, [r5, #12]
 8011f86:	065b      	lsls	r3, r3, #25
 8011f88:	f53f af2c 	bmi.w	8011de4 <_svfiprintf_r+0x28>
 8011f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f8e:	b01d      	add	sp, #116	; 0x74
 8011f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f94:	ab03      	add	r3, sp, #12
 8011f96:	9300      	str	r3, [sp, #0]
 8011f98:	462a      	mov	r2, r5
 8011f9a:	4638      	mov	r0, r7
 8011f9c:	4b06      	ldr	r3, [pc, #24]	; (8011fb8 <_svfiprintf_r+0x1fc>)
 8011f9e:	a904      	add	r1, sp, #16
 8011fa0:	f7fc ff08 	bl	800edb4 <_printf_i>
 8011fa4:	e7eb      	b.n	8011f7e <_svfiprintf_r+0x1c2>
 8011fa6:	bf00      	nop
 8011fa8:	080130c4 	.word	0x080130c4
 8011fac:	080130ca 	.word	0x080130ca
 8011fb0:	080130ce 	.word	0x080130ce
 8011fb4:	0800e87d 	.word	0x0800e87d
 8011fb8:	08011d05 	.word	0x08011d05

08011fbc <__sfputc_r>:
 8011fbc:	6893      	ldr	r3, [r2, #8]
 8011fbe:	b410      	push	{r4}
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	6093      	str	r3, [r2, #8]
 8011fc6:	da07      	bge.n	8011fd8 <__sfputc_r+0x1c>
 8011fc8:	6994      	ldr	r4, [r2, #24]
 8011fca:	42a3      	cmp	r3, r4
 8011fcc:	db01      	blt.n	8011fd2 <__sfputc_r+0x16>
 8011fce:	290a      	cmp	r1, #10
 8011fd0:	d102      	bne.n	8011fd8 <__sfputc_r+0x1c>
 8011fd2:	bc10      	pop	{r4}
 8011fd4:	f000 b974 	b.w	80122c0 <__swbuf_r>
 8011fd8:	6813      	ldr	r3, [r2, #0]
 8011fda:	1c58      	adds	r0, r3, #1
 8011fdc:	6010      	str	r0, [r2, #0]
 8011fde:	7019      	strb	r1, [r3, #0]
 8011fe0:	4608      	mov	r0, r1
 8011fe2:	bc10      	pop	{r4}
 8011fe4:	4770      	bx	lr

08011fe6 <__sfputs_r>:
 8011fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fe8:	4606      	mov	r6, r0
 8011fea:	460f      	mov	r7, r1
 8011fec:	4614      	mov	r4, r2
 8011fee:	18d5      	adds	r5, r2, r3
 8011ff0:	42ac      	cmp	r4, r5
 8011ff2:	d101      	bne.n	8011ff8 <__sfputs_r+0x12>
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	e007      	b.n	8012008 <__sfputs_r+0x22>
 8011ff8:	463a      	mov	r2, r7
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012000:	f7ff ffdc 	bl	8011fbc <__sfputc_r>
 8012004:	1c43      	adds	r3, r0, #1
 8012006:	d1f3      	bne.n	8011ff0 <__sfputs_r+0xa>
 8012008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801200c <_vfiprintf_r>:
 801200c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012010:	460d      	mov	r5, r1
 8012012:	4614      	mov	r4, r2
 8012014:	4698      	mov	r8, r3
 8012016:	4606      	mov	r6, r0
 8012018:	b09d      	sub	sp, #116	; 0x74
 801201a:	b118      	cbz	r0, 8012024 <_vfiprintf_r+0x18>
 801201c:	6983      	ldr	r3, [r0, #24]
 801201e:	b90b      	cbnz	r3, 8012024 <_vfiprintf_r+0x18>
 8012020:	f000 fb3a 	bl	8012698 <__sinit>
 8012024:	4b89      	ldr	r3, [pc, #548]	; (801224c <_vfiprintf_r+0x240>)
 8012026:	429d      	cmp	r5, r3
 8012028:	d11b      	bne.n	8012062 <_vfiprintf_r+0x56>
 801202a:	6875      	ldr	r5, [r6, #4]
 801202c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801202e:	07d9      	lsls	r1, r3, #31
 8012030:	d405      	bmi.n	801203e <_vfiprintf_r+0x32>
 8012032:	89ab      	ldrh	r3, [r5, #12]
 8012034:	059a      	lsls	r2, r3, #22
 8012036:	d402      	bmi.n	801203e <_vfiprintf_r+0x32>
 8012038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801203a:	f000 fbcb 	bl	80127d4 <__retarget_lock_acquire_recursive>
 801203e:	89ab      	ldrh	r3, [r5, #12]
 8012040:	071b      	lsls	r3, r3, #28
 8012042:	d501      	bpl.n	8012048 <_vfiprintf_r+0x3c>
 8012044:	692b      	ldr	r3, [r5, #16]
 8012046:	b9eb      	cbnz	r3, 8012084 <_vfiprintf_r+0x78>
 8012048:	4629      	mov	r1, r5
 801204a:	4630      	mov	r0, r6
 801204c:	f000 f998 	bl	8012380 <__swsetup_r>
 8012050:	b1c0      	cbz	r0, 8012084 <_vfiprintf_r+0x78>
 8012052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012054:	07dc      	lsls	r4, r3, #31
 8012056:	d50e      	bpl.n	8012076 <_vfiprintf_r+0x6a>
 8012058:	f04f 30ff 	mov.w	r0, #4294967295
 801205c:	b01d      	add	sp, #116	; 0x74
 801205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012062:	4b7b      	ldr	r3, [pc, #492]	; (8012250 <_vfiprintf_r+0x244>)
 8012064:	429d      	cmp	r5, r3
 8012066:	d101      	bne.n	801206c <_vfiprintf_r+0x60>
 8012068:	68b5      	ldr	r5, [r6, #8]
 801206a:	e7df      	b.n	801202c <_vfiprintf_r+0x20>
 801206c:	4b79      	ldr	r3, [pc, #484]	; (8012254 <_vfiprintf_r+0x248>)
 801206e:	429d      	cmp	r5, r3
 8012070:	bf08      	it	eq
 8012072:	68f5      	ldreq	r5, [r6, #12]
 8012074:	e7da      	b.n	801202c <_vfiprintf_r+0x20>
 8012076:	89ab      	ldrh	r3, [r5, #12]
 8012078:	0598      	lsls	r0, r3, #22
 801207a:	d4ed      	bmi.n	8012058 <_vfiprintf_r+0x4c>
 801207c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801207e:	f000 fbaa 	bl	80127d6 <__retarget_lock_release_recursive>
 8012082:	e7e9      	b.n	8012058 <_vfiprintf_r+0x4c>
 8012084:	2300      	movs	r3, #0
 8012086:	9309      	str	r3, [sp, #36]	; 0x24
 8012088:	2320      	movs	r3, #32
 801208a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801208e:	2330      	movs	r3, #48	; 0x30
 8012090:	f04f 0901 	mov.w	r9, #1
 8012094:	f8cd 800c 	str.w	r8, [sp, #12]
 8012098:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8012258 <_vfiprintf_r+0x24c>
 801209c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120a0:	4623      	mov	r3, r4
 80120a2:	469a      	mov	sl, r3
 80120a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120a8:	b10a      	cbz	r2, 80120ae <_vfiprintf_r+0xa2>
 80120aa:	2a25      	cmp	r2, #37	; 0x25
 80120ac:	d1f9      	bne.n	80120a2 <_vfiprintf_r+0x96>
 80120ae:	ebba 0b04 	subs.w	fp, sl, r4
 80120b2:	d00b      	beq.n	80120cc <_vfiprintf_r+0xc0>
 80120b4:	465b      	mov	r3, fp
 80120b6:	4622      	mov	r2, r4
 80120b8:	4629      	mov	r1, r5
 80120ba:	4630      	mov	r0, r6
 80120bc:	f7ff ff93 	bl	8011fe6 <__sfputs_r>
 80120c0:	3001      	adds	r0, #1
 80120c2:	f000 80aa 	beq.w	801221a <_vfiprintf_r+0x20e>
 80120c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120c8:	445a      	add	r2, fp
 80120ca:	9209      	str	r2, [sp, #36]	; 0x24
 80120cc:	f89a 3000 	ldrb.w	r3, [sl]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	f000 80a2 	beq.w	801221a <_vfiprintf_r+0x20e>
 80120d6:	2300      	movs	r3, #0
 80120d8:	f04f 32ff 	mov.w	r2, #4294967295
 80120dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120e0:	f10a 0a01 	add.w	sl, sl, #1
 80120e4:	9304      	str	r3, [sp, #16]
 80120e6:	9307      	str	r3, [sp, #28]
 80120e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120ec:	931a      	str	r3, [sp, #104]	; 0x68
 80120ee:	4654      	mov	r4, sl
 80120f0:	2205      	movs	r2, #5
 80120f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120f6:	4858      	ldr	r0, [pc, #352]	; (8012258 <_vfiprintf_r+0x24c>)
 80120f8:	f7ff f84e 	bl	8011198 <memchr>
 80120fc:	9a04      	ldr	r2, [sp, #16]
 80120fe:	b9d8      	cbnz	r0, 8012138 <_vfiprintf_r+0x12c>
 8012100:	06d1      	lsls	r1, r2, #27
 8012102:	bf44      	itt	mi
 8012104:	2320      	movmi	r3, #32
 8012106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801210a:	0713      	lsls	r3, r2, #28
 801210c:	bf44      	itt	mi
 801210e:	232b      	movmi	r3, #43	; 0x2b
 8012110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012114:	f89a 3000 	ldrb.w	r3, [sl]
 8012118:	2b2a      	cmp	r3, #42	; 0x2a
 801211a:	d015      	beq.n	8012148 <_vfiprintf_r+0x13c>
 801211c:	4654      	mov	r4, sl
 801211e:	2000      	movs	r0, #0
 8012120:	f04f 0c0a 	mov.w	ip, #10
 8012124:	9a07      	ldr	r2, [sp, #28]
 8012126:	4621      	mov	r1, r4
 8012128:	f811 3b01 	ldrb.w	r3, [r1], #1
 801212c:	3b30      	subs	r3, #48	; 0x30
 801212e:	2b09      	cmp	r3, #9
 8012130:	d94e      	bls.n	80121d0 <_vfiprintf_r+0x1c4>
 8012132:	b1b0      	cbz	r0, 8012162 <_vfiprintf_r+0x156>
 8012134:	9207      	str	r2, [sp, #28]
 8012136:	e014      	b.n	8012162 <_vfiprintf_r+0x156>
 8012138:	eba0 0308 	sub.w	r3, r0, r8
 801213c:	fa09 f303 	lsl.w	r3, r9, r3
 8012140:	4313      	orrs	r3, r2
 8012142:	46a2      	mov	sl, r4
 8012144:	9304      	str	r3, [sp, #16]
 8012146:	e7d2      	b.n	80120ee <_vfiprintf_r+0xe2>
 8012148:	9b03      	ldr	r3, [sp, #12]
 801214a:	1d19      	adds	r1, r3, #4
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	9103      	str	r1, [sp, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	bfbb      	ittet	lt
 8012154:	425b      	neglt	r3, r3
 8012156:	f042 0202 	orrlt.w	r2, r2, #2
 801215a:	9307      	strge	r3, [sp, #28]
 801215c:	9307      	strlt	r3, [sp, #28]
 801215e:	bfb8      	it	lt
 8012160:	9204      	strlt	r2, [sp, #16]
 8012162:	7823      	ldrb	r3, [r4, #0]
 8012164:	2b2e      	cmp	r3, #46	; 0x2e
 8012166:	d10c      	bne.n	8012182 <_vfiprintf_r+0x176>
 8012168:	7863      	ldrb	r3, [r4, #1]
 801216a:	2b2a      	cmp	r3, #42	; 0x2a
 801216c:	d135      	bne.n	80121da <_vfiprintf_r+0x1ce>
 801216e:	9b03      	ldr	r3, [sp, #12]
 8012170:	3402      	adds	r4, #2
 8012172:	1d1a      	adds	r2, r3, #4
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	9203      	str	r2, [sp, #12]
 8012178:	2b00      	cmp	r3, #0
 801217a:	bfb8      	it	lt
 801217c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012180:	9305      	str	r3, [sp, #20]
 8012182:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801225c <_vfiprintf_r+0x250>
 8012186:	2203      	movs	r2, #3
 8012188:	4650      	mov	r0, sl
 801218a:	7821      	ldrb	r1, [r4, #0]
 801218c:	f7ff f804 	bl	8011198 <memchr>
 8012190:	b140      	cbz	r0, 80121a4 <_vfiprintf_r+0x198>
 8012192:	2340      	movs	r3, #64	; 0x40
 8012194:	eba0 000a 	sub.w	r0, r0, sl
 8012198:	fa03 f000 	lsl.w	r0, r3, r0
 801219c:	9b04      	ldr	r3, [sp, #16]
 801219e:	3401      	adds	r4, #1
 80121a0:	4303      	orrs	r3, r0
 80121a2:	9304      	str	r3, [sp, #16]
 80121a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121a8:	2206      	movs	r2, #6
 80121aa:	482d      	ldr	r0, [pc, #180]	; (8012260 <_vfiprintf_r+0x254>)
 80121ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121b0:	f7fe fff2 	bl	8011198 <memchr>
 80121b4:	2800      	cmp	r0, #0
 80121b6:	d03f      	beq.n	8012238 <_vfiprintf_r+0x22c>
 80121b8:	4b2a      	ldr	r3, [pc, #168]	; (8012264 <_vfiprintf_r+0x258>)
 80121ba:	bb1b      	cbnz	r3, 8012204 <_vfiprintf_r+0x1f8>
 80121bc:	9b03      	ldr	r3, [sp, #12]
 80121be:	3307      	adds	r3, #7
 80121c0:	f023 0307 	bic.w	r3, r3, #7
 80121c4:	3308      	adds	r3, #8
 80121c6:	9303      	str	r3, [sp, #12]
 80121c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ca:	443b      	add	r3, r7
 80121cc:	9309      	str	r3, [sp, #36]	; 0x24
 80121ce:	e767      	b.n	80120a0 <_vfiprintf_r+0x94>
 80121d0:	460c      	mov	r4, r1
 80121d2:	2001      	movs	r0, #1
 80121d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80121d8:	e7a5      	b.n	8012126 <_vfiprintf_r+0x11a>
 80121da:	2300      	movs	r3, #0
 80121dc:	f04f 0c0a 	mov.w	ip, #10
 80121e0:	4619      	mov	r1, r3
 80121e2:	3401      	adds	r4, #1
 80121e4:	9305      	str	r3, [sp, #20]
 80121e6:	4620      	mov	r0, r4
 80121e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121ec:	3a30      	subs	r2, #48	; 0x30
 80121ee:	2a09      	cmp	r2, #9
 80121f0:	d903      	bls.n	80121fa <_vfiprintf_r+0x1ee>
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d0c5      	beq.n	8012182 <_vfiprintf_r+0x176>
 80121f6:	9105      	str	r1, [sp, #20]
 80121f8:	e7c3      	b.n	8012182 <_vfiprintf_r+0x176>
 80121fa:	4604      	mov	r4, r0
 80121fc:	2301      	movs	r3, #1
 80121fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012202:	e7f0      	b.n	80121e6 <_vfiprintf_r+0x1da>
 8012204:	ab03      	add	r3, sp, #12
 8012206:	9300      	str	r3, [sp, #0]
 8012208:	462a      	mov	r2, r5
 801220a:	4630      	mov	r0, r6
 801220c:	4b16      	ldr	r3, [pc, #88]	; (8012268 <_vfiprintf_r+0x25c>)
 801220e:	a904      	add	r1, sp, #16
 8012210:	f7fc fb34 	bl	800e87c <_printf_float>
 8012214:	4607      	mov	r7, r0
 8012216:	1c78      	adds	r0, r7, #1
 8012218:	d1d6      	bne.n	80121c8 <_vfiprintf_r+0x1bc>
 801221a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801221c:	07d9      	lsls	r1, r3, #31
 801221e:	d405      	bmi.n	801222c <_vfiprintf_r+0x220>
 8012220:	89ab      	ldrh	r3, [r5, #12]
 8012222:	059a      	lsls	r2, r3, #22
 8012224:	d402      	bmi.n	801222c <_vfiprintf_r+0x220>
 8012226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012228:	f000 fad5 	bl	80127d6 <__retarget_lock_release_recursive>
 801222c:	89ab      	ldrh	r3, [r5, #12]
 801222e:	065b      	lsls	r3, r3, #25
 8012230:	f53f af12 	bmi.w	8012058 <_vfiprintf_r+0x4c>
 8012234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012236:	e711      	b.n	801205c <_vfiprintf_r+0x50>
 8012238:	ab03      	add	r3, sp, #12
 801223a:	9300      	str	r3, [sp, #0]
 801223c:	462a      	mov	r2, r5
 801223e:	4630      	mov	r0, r6
 8012240:	4b09      	ldr	r3, [pc, #36]	; (8012268 <_vfiprintf_r+0x25c>)
 8012242:	a904      	add	r1, sp, #16
 8012244:	f7fc fdb6 	bl	800edb4 <_printf_i>
 8012248:	e7e4      	b.n	8012214 <_vfiprintf_r+0x208>
 801224a:	bf00      	nop
 801224c:	080131f8 	.word	0x080131f8
 8012250:	08013218 	.word	0x08013218
 8012254:	080131d8 	.word	0x080131d8
 8012258:	080130c4 	.word	0x080130c4
 801225c:	080130ca 	.word	0x080130ca
 8012260:	080130ce 	.word	0x080130ce
 8012264:	0800e87d 	.word	0x0800e87d
 8012268:	08011fe7 	.word	0x08011fe7

0801226c <nan>:
 801226c:	2000      	movs	r0, #0
 801226e:	4901      	ldr	r1, [pc, #4]	; (8012274 <nan+0x8>)
 8012270:	4770      	bx	lr
 8012272:	bf00      	nop
 8012274:	7ff80000 	.word	0x7ff80000

08012278 <_sbrk_r>:
 8012278:	b538      	push	{r3, r4, r5, lr}
 801227a:	2300      	movs	r3, #0
 801227c:	4d05      	ldr	r5, [pc, #20]	; (8012294 <_sbrk_r+0x1c>)
 801227e:	4604      	mov	r4, r0
 8012280:	4608      	mov	r0, r1
 8012282:	602b      	str	r3, [r5, #0]
 8012284:	f7f2 f904 	bl	8004490 <_sbrk>
 8012288:	1c43      	adds	r3, r0, #1
 801228a:	d102      	bne.n	8012292 <_sbrk_r+0x1a>
 801228c:	682b      	ldr	r3, [r5, #0]
 801228e:	b103      	cbz	r3, 8012292 <_sbrk_r+0x1a>
 8012290:	6023      	str	r3, [r4, #0]
 8012292:	bd38      	pop	{r3, r4, r5, pc}
 8012294:	20001940 	.word	0x20001940

08012298 <strncmp>:
 8012298:	4603      	mov	r3, r0
 801229a:	b510      	push	{r4, lr}
 801229c:	b172      	cbz	r2, 80122bc <strncmp+0x24>
 801229e:	3901      	subs	r1, #1
 80122a0:	1884      	adds	r4, r0, r2
 80122a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80122a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80122aa:	4290      	cmp	r0, r2
 80122ac:	d101      	bne.n	80122b2 <strncmp+0x1a>
 80122ae:	42a3      	cmp	r3, r4
 80122b0:	d101      	bne.n	80122b6 <strncmp+0x1e>
 80122b2:	1a80      	subs	r0, r0, r2
 80122b4:	bd10      	pop	{r4, pc}
 80122b6:	2800      	cmp	r0, #0
 80122b8:	d1f3      	bne.n	80122a2 <strncmp+0xa>
 80122ba:	e7fa      	b.n	80122b2 <strncmp+0x1a>
 80122bc:	4610      	mov	r0, r2
 80122be:	e7f9      	b.n	80122b4 <strncmp+0x1c>

080122c0 <__swbuf_r>:
 80122c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122c2:	460e      	mov	r6, r1
 80122c4:	4614      	mov	r4, r2
 80122c6:	4605      	mov	r5, r0
 80122c8:	b118      	cbz	r0, 80122d2 <__swbuf_r+0x12>
 80122ca:	6983      	ldr	r3, [r0, #24]
 80122cc:	b90b      	cbnz	r3, 80122d2 <__swbuf_r+0x12>
 80122ce:	f000 f9e3 	bl	8012698 <__sinit>
 80122d2:	4b21      	ldr	r3, [pc, #132]	; (8012358 <__swbuf_r+0x98>)
 80122d4:	429c      	cmp	r4, r3
 80122d6:	d12b      	bne.n	8012330 <__swbuf_r+0x70>
 80122d8:	686c      	ldr	r4, [r5, #4]
 80122da:	69a3      	ldr	r3, [r4, #24]
 80122dc:	60a3      	str	r3, [r4, #8]
 80122de:	89a3      	ldrh	r3, [r4, #12]
 80122e0:	071a      	lsls	r2, r3, #28
 80122e2:	d52f      	bpl.n	8012344 <__swbuf_r+0x84>
 80122e4:	6923      	ldr	r3, [r4, #16]
 80122e6:	b36b      	cbz	r3, 8012344 <__swbuf_r+0x84>
 80122e8:	6923      	ldr	r3, [r4, #16]
 80122ea:	6820      	ldr	r0, [r4, #0]
 80122ec:	b2f6      	uxtb	r6, r6
 80122ee:	1ac0      	subs	r0, r0, r3
 80122f0:	6963      	ldr	r3, [r4, #20]
 80122f2:	4637      	mov	r7, r6
 80122f4:	4283      	cmp	r3, r0
 80122f6:	dc04      	bgt.n	8012302 <__swbuf_r+0x42>
 80122f8:	4621      	mov	r1, r4
 80122fa:	4628      	mov	r0, r5
 80122fc:	f000 f938 	bl	8012570 <_fflush_r>
 8012300:	bb30      	cbnz	r0, 8012350 <__swbuf_r+0x90>
 8012302:	68a3      	ldr	r3, [r4, #8]
 8012304:	3001      	adds	r0, #1
 8012306:	3b01      	subs	r3, #1
 8012308:	60a3      	str	r3, [r4, #8]
 801230a:	6823      	ldr	r3, [r4, #0]
 801230c:	1c5a      	adds	r2, r3, #1
 801230e:	6022      	str	r2, [r4, #0]
 8012310:	701e      	strb	r6, [r3, #0]
 8012312:	6963      	ldr	r3, [r4, #20]
 8012314:	4283      	cmp	r3, r0
 8012316:	d004      	beq.n	8012322 <__swbuf_r+0x62>
 8012318:	89a3      	ldrh	r3, [r4, #12]
 801231a:	07db      	lsls	r3, r3, #31
 801231c:	d506      	bpl.n	801232c <__swbuf_r+0x6c>
 801231e:	2e0a      	cmp	r6, #10
 8012320:	d104      	bne.n	801232c <__swbuf_r+0x6c>
 8012322:	4621      	mov	r1, r4
 8012324:	4628      	mov	r0, r5
 8012326:	f000 f923 	bl	8012570 <_fflush_r>
 801232a:	b988      	cbnz	r0, 8012350 <__swbuf_r+0x90>
 801232c:	4638      	mov	r0, r7
 801232e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012330:	4b0a      	ldr	r3, [pc, #40]	; (801235c <__swbuf_r+0x9c>)
 8012332:	429c      	cmp	r4, r3
 8012334:	d101      	bne.n	801233a <__swbuf_r+0x7a>
 8012336:	68ac      	ldr	r4, [r5, #8]
 8012338:	e7cf      	b.n	80122da <__swbuf_r+0x1a>
 801233a:	4b09      	ldr	r3, [pc, #36]	; (8012360 <__swbuf_r+0xa0>)
 801233c:	429c      	cmp	r4, r3
 801233e:	bf08      	it	eq
 8012340:	68ec      	ldreq	r4, [r5, #12]
 8012342:	e7ca      	b.n	80122da <__swbuf_r+0x1a>
 8012344:	4621      	mov	r1, r4
 8012346:	4628      	mov	r0, r5
 8012348:	f000 f81a 	bl	8012380 <__swsetup_r>
 801234c:	2800      	cmp	r0, #0
 801234e:	d0cb      	beq.n	80122e8 <__swbuf_r+0x28>
 8012350:	f04f 37ff 	mov.w	r7, #4294967295
 8012354:	e7ea      	b.n	801232c <__swbuf_r+0x6c>
 8012356:	bf00      	nop
 8012358:	080131f8 	.word	0x080131f8
 801235c:	08013218 	.word	0x08013218
 8012360:	080131d8 	.word	0x080131d8

08012364 <__ascii_wctomb>:
 8012364:	4603      	mov	r3, r0
 8012366:	4608      	mov	r0, r1
 8012368:	b141      	cbz	r1, 801237c <__ascii_wctomb+0x18>
 801236a:	2aff      	cmp	r2, #255	; 0xff
 801236c:	d904      	bls.n	8012378 <__ascii_wctomb+0x14>
 801236e:	228a      	movs	r2, #138	; 0x8a
 8012370:	f04f 30ff 	mov.w	r0, #4294967295
 8012374:	601a      	str	r2, [r3, #0]
 8012376:	4770      	bx	lr
 8012378:	2001      	movs	r0, #1
 801237a:	700a      	strb	r2, [r1, #0]
 801237c:	4770      	bx	lr
	...

08012380 <__swsetup_r>:
 8012380:	4b32      	ldr	r3, [pc, #200]	; (801244c <__swsetup_r+0xcc>)
 8012382:	b570      	push	{r4, r5, r6, lr}
 8012384:	681d      	ldr	r5, [r3, #0]
 8012386:	4606      	mov	r6, r0
 8012388:	460c      	mov	r4, r1
 801238a:	b125      	cbz	r5, 8012396 <__swsetup_r+0x16>
 801238c:	69ab      	ldr	r3, [r5, #24]
 801238e:	b913      	cbnz	r3, 8012396 <__swsetup_r+0x16>
 8012390:	4628      	mov	r0, r5
 8012392:	f000 f981 	bl	8012698 <__sinit>
 8012396:	4b2e      	ldr	r3, [pc, #184]	; (8012450 <__swsetup_r+0xd0>)
 8012398:	429c      	cmp	r4, r3
 801239a:	d10f      	bne.n	80123bc <__swsetup_r+0x3c>
 801239c:	686c      	ldr	r4, [r5, #4]
 801239e:	89a3      	ldrh	r3, [r4, #12]
 80123a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123a4:	0719      	lsls	r1, r3, #28
 80123a6:	d42c      	bmi.n	8012402 <__swsetup_r+0x82>
 80123a8:	06dd      	lsls	r5, r3, #27
 80123aa:	d411      	bmi.n	80123d0 <__swsetup_r+0x50>
 80123ac:	2309      	movs	r3, #9
 80123ae:	6033      	str	r3, [r6, #0]
 80123b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80123b4:	f04f 30ff 	mov.w	r0, #4294967295
 80123b8:	81a3      	strh	r3, [r4, #12]
 80123ba:	e03e      	b.n	801243a <__swsetup_r+0xba>
 80123bc:	4b25      	ldr	r3, [pc, #148]	; (8012454 <__swsetup_r+0xd4>)
 80123be:	429c      	cmp	r4, r3
 80123c0:	d101      	bne.n	80123c6 <__swsetup_r+0x46>
 80123c2:	68ac      	ldr	r4, [r5, #8]
 80123c4:	e7eb      	b.n	801239e <__swsetup_r+0x1e>
 80123c6:	4b24      	ldr	r3, [pc, #144]	; (8012458 <__swsetup_r+0xd8>)
 80123c8:	429c      	cmp	r4, r3
 80123ca:	bf08      	it	eq
 80123cc:	68ec      	ldreq	r4, [r5, #12]
 80123ce:	e7e6      	b.n	801239e <__swsetup_r+0x1e>
 80123d0:	0758      	lsls	r0, r3, #29
 80123d2:	d512      	bpl.n	80123fa <__swsetup_r+0x7a>
 80123d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123d6:	b141      	cbz	r1, 80123ea <__swsetup_r+0x6a>
 80123d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123dc:	4299      	cmp	r1, r3
 80123de:	d002      	beq.n	80123e6 <__swsetup_r+0x66>
 80123e0:	4630      	mov	r0, r6
 80123e2:	f7ff fbb3 	bl	8011b4c <_free_r>
 80123e6:	2300      	movs	r3, #0
 80123e8:	6363      	str	r3, [r4, #52]	; 0x34
 80123ea:	89a3      	ldrh	r3, [r4, #12]
 80123ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80123f0:	81a3      	strh	r3, [r4, #12]
 80123f2:	2300      	movs	r3, #0
 80123f4:	6063      	str	r3, [r4, #4]
 80123f6:	6923      	ldr	r3, [r4, #16]
 80123f8:	6023      	str	r3, [r4, #0]
 80123fa:	89a3      	ldrh	r3, [r4, #12]
 80123fc:	f043 0308 	orr.w	r3, r3, #8
 8012400:	81a3      	strh	r3, [r4, #12]
 8012402:	6923      	ldr	r3, [r4, #16]
 8012404:	b94b      	cbnz	r3, 801241a <__swsetup_r+0x9a>
 8012406:	89a3      	ldrh	r3, [r4, #12]
 8012408:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801240c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012410:	d003      	beq.n	801241a <__swsetup_r+0x9a>
 8012412:	4621      	mov	r1, r4
 8012414:	4630      	mov	r0, r6
 8012416:	f000 fa05 	bl	8012824 <__smakebuf_r>
 801241a:	89a0      	ldrh	r0, [r4, #12]
 801241c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012420:	f010 0301 	ands.w	r3, r0, #1
 8012424:	d00a      	beq.n	801243c <__swsetup_r+0xbc>
 8012426:	2300      	movs	r3, #0
 8012428:	60a3      	str	r3, [r4, #8]
 801242a:	6963      	ldr	r3, [r4, #20]
 801242c:	425b      	negs	r3, r3
 801242e:	61a3      	str	r3, [r4, #24]
 8012430:	6923      	ldr	r3, [r4, #16]
 8012432:	b943      	cbnz	r3, 8012446 <__swsetup_r+0xc6>
 8012434:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012438:	d1ba      	bne.n	80123b0 <__swsetup_r+0x30>
 801243a:	bd70      	pop	{r4, r5, r6, pc}
 801243c:	0781      	lsls	r1, r0, #30
 801243e:	bf58      	it	pl
 8012440:	6963      	ldrpl	r3, [r4, #20]
 8012442:	60a3      	str	r3, [r4, #8]
 8012444:	e7f4      	b.n	8012430 <__swsetup_r+0xb0>
 8012446:	2000      	movs	r0, #0
 8012448:	e7f7      	b.n	801243a <__swsetup_r+0xba>
 801244a:	bf00      	nop
 801244c:	200008bc 	.word	0x200008bc
 8012450:	080131f8 	.word	0x080131f8
 8012454:	08013218 	.word	0x08013218
 8012458:	080131d8 	.word	0x080131d8

0801245c <abort>:
 801245c:	2006      	movs	r0, #6
 801245e:	b508      	push	{r3, lr}
 8012460:	f000 fa9e 	bl	80129a0 <raise>
 8012464:	2001      	movs	r0, #1
 8012466:	f7f1 ffa0 	bl	80043aa <_exit>
	...

0801246c <__sflush_r>:
 801246c:	898a      	ldrh	r2, [r1, #12]
 801246e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012470:	4605      	mov	r5, r0
 8012472:	0710      	lsls	r0, r2, #28
 8012474:	460c      	mov	r4, r1
 8012476:	d457      	bmi.n	8012528 <__sflush_r+0xbc>
 8012478:	684b      	ldr	r3, [r1, #4]
 801247a:	2b00      	cmp	r3, #0
 801247c:	dc04      	bgt.n	8012488 <__sflush_r+0x1c>
 801247e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012480:	2b00      	cmp	r3, #0
 8012482:	dc01      	bgt.n	8012488 <__sflush_r+0x1c>
 8012484:	2000      	movs	r0, #0
 8012486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801248a:	2e00      	cmp	r6, #0
 801248c:	d0fa      	beq.n	8012484 <__sflush_r+0x18>
 801248e:	2300      	movs	r3, #0
 8012490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012494:	682f      	ldr	r7, [r5, #0]
 8012496:	602b      	str	r3, [r5, #0]
 8012498:	d032      	beq.n	8012500 <__sflush_r+0x94>
 801249a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801249c:	89a3      	ldrh	r3, [r4, #12]
 801249e:	075a      	lsls	r2, r3, #29
 80124a0:	d505      	bpl.n	80124ae <__sflush_r+0x42>
 80124a2:	6863      	ldr	r3, [r4, #4]
 80124a4:	1ac0      	subs	r0, r0, r3
 80124a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80124a8:	b10b      	cbz	r3, 80124ae <__sflush_r+0x42>
 80124aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80124ac:	1ac0      	subs	r0, r0, r3
 80124ae:	2300      	movs	r3, #0
 80124b0:	4602      	mov	r2, r0
 80124b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80124b4:	4628      	mov	r0, r5
 80124b6:	6a21      	ldr	r1, [r4, #32]
 80124b8:	47b0      	blx	r6
 80124ba:	1c43      	adds	r3, r0, #1
 80124bc:	89a3      	ldrh	r3, [r4, #12]
 80124be:	d106      	bne.n	80124ce <__sflush_r+0x62>
 80124c0:	6829      	ldr	r1, [r5, #0]
 80124c2:	291d      	cmp	r1, #29
 80124c4:	d82c      	bhi.n	8012520 <__sflush_r+0xb4>
 80124c6:	4a29      	ldr	r2, [pc, #164]	; (801256c <__sflush_r+0x100>)
 80124c8:	40ca      	lsrs	r2, r1
 80124ca:	07d6      	lsls	r6, r2, #31
 80124cc:	d528      	bpl.n	8012520 <__sflush_r+0xb4>
 80124ce:	2200      	movs	r2, #0
 80124d0:	6062      	str	r2, [r4, #4]
 80124d2:	6922      	ldr	r2, [r4, #16]
 80124d4:	04d9      	lsls	r1, r3, #19
 80124d6:	6022      	str	r2, [r4, #0]
 80124d8:	d504      	bpl.n	80124e4 <__sflush_r+0x78>
 80124da:	1c42      	adds	r2, r0, #1
 80124dc:	d101      	bne.n	80124e2 <__sflush_r+0x76>
 80124de:	682b      	ldr	r3, [r5, #0]
 80124e0:	b903      	cbnz	r3, 80124e4 <__sflush_r+0x78>
 80124e2:	6560      	str	r0, [r4, #84]	; 0x54
 80124e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124e6:	602f      	str	r7, [r5, #0]
 80124e8:	2900      	cmp	r1, #0
 80124ea:	d0cb      	beq.n	8012484 <__sflush_r+0x18>
 80124ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124f0:	4299      	cmp	r1, r3
 80124f2:	d002      	beq.n	80124fa <__sflush_r+0x8e>
 80124f4:	4628      	mov	r0, r5
 80124f6:	f7ff fb29 	bl	8011b4c <_free_r>
 80124fa:	2000      	movs	r0, #0
 80124fc:	6360      	str	r0, [r4, #52]	; 0x34
 80124fe:	e7c2      	b.n	8012486 <__sflush_r+0x1a>
 8012500:	6a21      	ldr	r1, [r4, #32]
 8012502:	2301      	movs	r3, #1
 8012504:	4628      	mov	r0, r5
 8012506:	47b0      	blx	r6
 8012508:	1c41      	adds	r1, r0, #1
 801250a:	d1c7      	bne.n	801249c <__sflush_r+0x30>
 801250c:	682b      	ldr	r3, [r5, #0]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d0c4      	beq.n	801249c <__sflush_r+0x30>
 8012512:	2b1d      	cmp	r3, #29
 8012514:	d001      	beq.n	801251a <__sflush_r+0xae>
 8012516:	2b16      	cmp	r3, #22
 8012518:	d101      	bne.n	801251e <__sflush_r+0xb2>
 801251a:	602f      	str	r7, [r5, #0]
 801251c:	e7b2      	b.n	8012484 <__sflush_r+0x18>
 801251e:	89a3      	ldrh	r3, [r4, #12]
 8012520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012524:	81a3      	strh	r3, [r4, #12]
 8012526:	e7ae      	b.n	8012486 <__sflush_r+0x1a>
 8012528:	690f      	ldr	r7, [r1, #16]
 801252a:	2f00      	cmp	r7, #0
 801252c:	d0aa      	beq.n	8012484 <__sflush_r+0x18>
 801252e:	0793      	lsls	r3, r2, #30
 8012530:	bf18      	it	ne
 8012532:	2300      	movne	r3, #0
 8012534:	680e      	ldr	r6, [r1, #0]
 8012536:	bf08      	it	eq
 8012538:	694b      	ldreq	r3, [r1, #20]
 801253a:	1bf6      	subs	r6, r6, r7
 801253c:	600f      	str	r7, [r1, #0]
 801253e:	608b      	str	r3, [r1, #8]
 8012540:	2e00      	cmp	r6, #0
 8012542:	dd9f      	ble.n	8012484 <__sflush_r+0x18>
 8012544:	4633      	mov	r3, r6
 8012546:	463a      	mov	r2, r7
 8012548:	4628      	mov	r0, r5
 801254a:	6a21      	ldr	r1, [r4, #32]
 801254c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8012550:	47e0      	blx	ip
 8012552:	2800      	cmp	r0, #0
 8012554:	dc06      	bgt.n	8012564 <__sflush_r+0xf8>
 8012556:	89a3      	ldrh	r3, [r4, #12]
 8012558:	f04f 30ff 	mov.w	r0, #4294967295
 801255c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012560:	81a3      	strh	r3, [r4, #12]
 8012562:	e790      	b.n	8012486 <__sflush_r+0x1a>
 8012564:	4407      	add	r7, r0
 8012566:	1a36      	subs	r6, r6, r0
 8012568:	e7ea      	b.n	8012540 <__sflush_r+0xd4>
 801256a:	bf00      	nop
 801256c:	20400001 	.word	0x20400001

08012570 <_fflush_r>:
 8012570:	b538      	push	{r3, r4, r5, lr}
 8012572:	690b      	ldr	r3, [r1, #16]
 8012574:	4605      	mov	r5, r0
 8012576:	460c      	mov	r4, r1
 8012578:	b913      	cbnz	r3, 8012580 <_fflush_r+0x10>
 801257a:	2500      	movs	r5, #0
 801257c:	4628      	mov	r0, r5
 801257e:	bd38      	pop	{r3, r4, r5, pc}
 8012580:	b118      	cbz	r0, 801258a <_fflush_r+0x1a>
 8012582:	6983      	ldr	r3, [r0, #24]
 8012584:	b90b      	cbnz	r3, 801258a <_fflush_r+0x1a>
 8012586:	f000 f887 	bl	8012698 <__sinit>
 801258a:	4b14      	ldr	r3, [pc, #80]	; (80125dc <_fflush_r+0x6c>)
 801258c:	429c      	cmp	r4, r3
 801258e:	d11b      	bne.n	80125c8 <_fflush_r+0x58>
 8012590:	686c      	ldr	r4, [r5, #4]
 8012592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d0ef      	beq.n	801257a <_fflush_r+0xa>
 801259a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801259c:	07d0      	lsls	r0, r2, #31
 801259e:	d404      	bmi.n	80125aa <_fflush_r+0x3a>
 80125a0:	0599      	lsls	r1, r3, #22
 80125a2:	d402      	bmi.n	80125aa <_fflush_r+0x3a>
 80125a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125a6:	f000 f915 	bl	80127d4 <__retarget_lock_acquire_recursive>
 80125aa:	4628      	mov	r0, r5
 80125ac:	4621      	mov	r1, r4
 80125ae:	f7ff ff5d 	bl	801246c <__sflush_r>
 80125b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125b4:	4605      	mov	r5, r0
 80125b6:	07da      	lsls	r2, r3, #31
 80125b8:	d4e0      	bmi.n	801257c <_fflush_r+0xc>
 80125ba:	89a3      	ldrh	r3, [r4, #12]
 80125bc:	059b      	lsls	r3, r3, #22
 80125be:	d4dd      	bmi.n	801257c <_fflush_r+0xc>
 80125c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125c2:	f000 f908 	bl	80127d6 <__retarget_lock_release_recursive>
 80125c6:	e7d9      	b.n	801257c <_fflush_r+0xc>
 80125c8:	4b05      	ldr	r3, [pc, #20]	; (80125e0 <_fflush_r+0x70>)
 80125ca:	429c      	cmp	r4, r3
 80125cc:	d101      	bne.n	80125d2 <_fflush_r+0x62>
 80125ce:	68ac      	ldr	r4, [r5, #8]
 80125d0:	e7df      	b.n	8012592 <_fflush_r+0x22>
 80125d2:	4b04      	ldr	r3, [pc, #16]	; (80125e4 <_fflush_r+0x74>)
 80125d4:	429c      	cmp	r4, r3
 80125d6:	bf08      	it	eq
 80125d8:	68ec      	ldreq	r4, [r5, #12]
 80125da:	e7da      	b.n	8012592 <_fflush_r+0x22>
 80125dc:	080131f8 	.word	0x080131f8
 80125e0:	08013218 	.word	0x08013218
 80125e4:	080131d8 	.word	0x080131d8

080125e8 <std>:
 80125e8:	2300      	movs	r3, #0
 80125ea:	b510      	push	{r4, lr}
 80125ec:	4604      	mov	r4, r0
 80125ee:	e9c0 3300 	strd	r3, r3, [r0]
 80125f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80125f6:	6083      	str	r3, [r0, #8]
 80125f8:	8181      	strh	r1, [r0, #12]
 80125fa:	6643      	str	r3, [r0, #100]	; 0x64
 80125fc:	81c2      	strh	r2, [r0, #14]
 80125fe:	6183      	str	r3, [r0, #24]
 8012600:	4619      	mov	r1, r3
 8012602:	2208      	movs	r2, #8
 8012604:	305c      	adds	r0, #92	; 0x5c
 8012606:	f7fc f893 	bl	800e730 <memset>
 801260a:	4b05      	ldr	r3, [pc, #20]	; (8012620 <std+0x38>)
 801260c:	6224      	str	r4, [r4, #32]
 801260e:	6263      	str	r3, [r4, #36]	; 0x24
 8012610:	4b04      	ldr	r3, [pc, #16]	; (8012624 <std+0x3c>)
 8012612:	62a3      	str	r3, [r4, #40]	; 0x28
 8012614:	4b04      	ldr	r3, [pc, #16]	; (8012628 <std+0x40>)
 8012616:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012618:	4b04      	ldr	r3, [pc, #16]	; (801262c <std+0x44>)
 801261a:	6323      	str	r3, [r4, #48]	; 0x30
 801261c:	bd10      	pop	{r4, pc}
 801261e:	bf00      	nop
 8012620:	080129d9 	.word	0x080129d9
 8012624:	080129fb 	.word	0x080129fb
 8012628:	08012a33 	.word	0x08012a33
 801262c:	08012a57 	.word	0x08012a57

08012630 <_cleanup_r>:
 8012630:	4901      	ldr	r1, [pc, #4]	; (8012638 <_cleanup_r+0x8>)
 8012632:	f000 b8af 	b.w	8012794 <_fwalk_reent>
 8012636:	bf00      	nop
 8012638:	08012571 	.word	0x08012571

0801263c <__sfmoreglue>:
 801263c:	2268      	movs	r2, #104	; 0x68
 801263e:	b570      	push	{r4, r5, r6, lr}
 8012640:	1e4d      	subs	r5, r1, #1
 8012642:	4355      	muls	r5, r2
 8012644:	460e      	mov	r6, r1
 8012646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801264a:	f7ff fae7 	bl	8011c1c <_malloc_r>
 801264e:	4604      	mov	r4, r0
 8012650:	b140      	cbz	r0, 8012664 <__sfmoreglue+0x28>
 8012652:	2100      	movs	r1, #0
 8012654:	e9c0 1600 	strd	r1, r6, [r0]
 8012658:	300c      	adds	r0, #12
 801265a:	60a0      	str	r0, [r4, #8]
 801265c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012660:	f7fc f866 	bl	800e730 <memset>
 8012664:	4620      	mov	r0, r4
 8012666:	bd70      	pop	{r4, r5, r6, pc}

08012668 <__sfp_lock_acquire>:
 8012668:	4801      	ldr	r0, [pc, #4]	; (8012670 <__sfp_lock_acquire+0x8>)
 801266a:	f000 b8b3 	b.w	80127d4 <__retarget_lock_acquire_recursive>
 801266e:	bf00      	nop
 8012670:	2000193d 	.word	0x2000193d

08012674 <__sfp_lock_release>:
 8012674:	4801      	ldr	r0, [pc, #4]	; (801267c <__sfp_lock_release+0x8>)
 8012676:	f000 b8ae 	b.w	80127d6 <__retarget_lock_release_recursive>
 801267a:	bf00      	nop
 801267c:	2000193d 	.word	0x2000193d

08012680 <__sinit_lock_acquire>:
 8012680:	4801      	ldr	r0, [pc, #4]	; (8012688 <__sinit_lock_acquire+0x8>)
 8012682:	f000 b8a7 	b.w	80127d4 <__retarget_lock_acquire_recursive>
 8012686:	bf00      	nop
 8012688:	2000193e 	.word	0x2000193e

0801268c <__sinit_lock_release>:
 801268c:	4801      	ldr	r0, [pc, #4]	; (8012694 <__sinit_lock_release+0x8>)
 801268e:	f000 b8a2 	b.w	80127d6 <__retarget_lock_release_recursive>
 8012692:	bf00      	nop
 8012694:	2000193e 	.word	0x2000193e

08012698 <__sinit>:
 8012698:	b510      	push	{r4, lr}
 801269a:	4604      	mov	r4, r0
 801269c:	f7ff fff0 	bl	8012680 <__sinit_lock_acquire>
 80126a0:	69a3      	ldr	r3, [r4, #24]
 80126a2:	b11b      	cbz	r3, 80126ac <__sinit+0x14>
 80126a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126a8:	f7ff bff0 	b.w	801268c <__sinit_lock_release>
 80126ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80126b0:	6523      	str	r3, [r4, #80]	; 0x50
 80126b2:	4b13      	ldr	r3, [pc, #76]	; (8012700 <__sinit+0x68>)
 80126b4:	4a13      	ldr	r2, [pc, #76]	; (8012704 <__sinit+0x6c>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80126ba:	42a3      	cmp	r3, r4
 80126bc:	bf08      	it	eq
 80126be:	2301      	moveq	r3, #1
 80126c0:	4620      	mov	r0, r4
 80126c2:	bf08      	it	eq
 80126c4:	61a3      	streq	r3, [r4, #24]
 80126c6:	f000 f81f 	bl	8012708 <__sfp>
 80126ca:	6060      	str	r0, [r4, #4]
 80126cc:	4620      	mov	r0, r4
 80126ce:	f000 f81b 	bl	8012708 <__sfp>
 80126d2:	60a0      	str	r0, [r4, #8]
 80126d4:	4620      	mov	r0, r4
 80126d6:	f000 f817 	bl	8012708 <__sfp>
 80126da:	2200      	movs	r2, #0
 80126dc:	2104      	movs	r1, #4
 80126de:	60e0      	str	r0, [r4, #12]
 80126e0:	6860      	ldr	r0, [r4, #4]
 80126e2:	f7ff ff81 	bl	80125e8 <std>
 80126e6:	2201      	movs	r2, #1
 80126e8:	2109      	movs	r1, #9
 80126ea:	68a0      	ldr	r0, [r4, #8]
 80126ec:	f7ff ff7c 	bl	80125e8 <std>
 80126f0:	2202      	movs	r2, #2
 80126f2:	2112      	movs	r1, #18
 80126f4:	68e0      	ldr	r0, [r4, #12]
 80126f6:	f7ff ff77 	bl	80125e8 <std>
 80126fa:	2301      	movs	r3, #1
 80126fc:	61a3      	str	r3, [r4, #24]
 80126fe:	e7d1      	b.n	80126a4 <__sinit+0xc>
 8012700:	08012d3c 	.word	0x08012d3c
 8012704:	08012631 	.word	0x08012631

08012708 <__sfp>:
 8012708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801270a:	4607      	mov	r7, r0
 801270c:	f7ff ffac 	bl	8012668 <__sfp_lock_acquire>
 8012710:	4b1e      	ldr	r3, [pc, #120]	; (801278c <__sfp+0x84>)
 8012712:	681e      	ldr	r6, [r3, #0]
 8012714:	69b3      	ldr	r3, [r6, #24]
 8012716:	b913      	cbnz	r3, 801271e <__sfp+0x16>
 8012718:	4630      	mov	r0, r6
 801271a:	f7ff ffbd 	bl	8012698 <__sinit>
 801271e:	3648      	adds	r6, #72	; 0x48
 8012720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012724:	3b01      	subs	r3, #1
 8012726:	d503      	bpl.n	8012730 <__sfp+0x28>
 8012728:	6833      	ldr	r3, [r6, #0]
 801272a:	b30b      	cbz	r3, 8012770 <__sfp+0x68>
 801272c:	6836      	ldr	r6, [r6, #0]
 801272e:	e7f7      	b.n	8012720 <__sfp+0x18>
 8012730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012734:	b9d5      	cbnz	r5, 801276c <__sfp+0x64>
 8012736:	4b16      	ldr	r3, [pc, #88]	; (8012790 <__sfp+0x88>)
 8012738:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801273c:	60e3      	str	r3, [r4, #12]
 801273e:	6665      	str	r5, [r4, #100]	; 0x64
 8012740:	f000 f847 	bl	80127d2 <__retarget_lock_init_recursive>
 8012744:	f7ff ff96 	bl	8012674 <__sfp_lock_release>
 8012748:	2208      	movs	r2, #8
 801274a:	4629      	mov	r1, r5
 801274c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012754:	6025      	str	r5, [r4, #0]
 8012756:	61a5      	str	r5, [r4, #24]
 8012758:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801275c:	f7fb ffe8 	bl	800e730 <memset>
 8012760:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012764:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012768:	4620      	mov	r0, r4
 801276a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801276c:	3468      	adds	r4, #104	; 0x68
 801276e:	e7d9      	b.n	8012724 <__sfp+0x1c>
 8012770:	2104      	movs	r1, #4
 8012772:	4638      	mov	r0, r7
 8012774:	f7ff ff62 	bl	801263c <__sfmoreglue>
 8012778:	4604      	mov	r4, r0
 801277a:	6030      	str	r0, [r6, #0]
 801277c:	2800      	cmp	r0, #0
 801277e:	d1d5      	bne.n	801272c <__sfp+0x24>
 8012780:	f7ff ff78 	bl	8012674 <__sfp_lock_release>
 8012784:	230c      	movs	r3, #12
 8012786:	603b      	str	r3, [r7, #0]
 8012788:	e7ee      	b.n	8012768 <__sfp+0x60>
 801278a:	bf00      	nop
 801278c:	08012d3c 	.word	0x08012d3c
 8012790:	ffff0001 	.word	0xffff0001

08012794 <_fwalk_reent>:
 8012794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012798:	4606      	mov	r6, r0
 801279a:	4688      	mov	r8, r1
 801279c:	2700      	movs	r7, #0
 801279e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80127a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80127a6:	f1b9 0901 	subs.w	r9, r9, #1
 80127aa:	d505      	bpl.n	80127b8 <_fwalk_reent+0x24>
 80127ac:	6824      	ldr	r4, [r4, #0]
 80127ae:	2c00      	cmp	r4, #0
 80127b0:	d1f7      	bne.n	80127a2 <_fwalk_reent+0xe>
 80127b2:	4638      	mov	r0, r7
 80127b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127b8:	89ab      	ldrh	r3, [r5, #12]
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	d907      	bls.n	80127ce <_fwalk_reent+0x3a>
 80127be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80127c2:	3301      	adds	r3, #1
 80127c4:	d003      	beq.n	80127ce <_fwalk_reent+0x3a>
 80127c6:	4629      	mov	r1, r5
 80127c8:	4630      	mov	r0, r6
 80127ca:	47c0      	blx	r8
 80127cc:	4307      	orrs	r7, r0
 80127ce:	3568      	adds	r5, #104	; 0x68
 80127d0:	e7e9      	b.n	80127a6 <_fwalk_reent+0x12>

080127d2 <__retarget_lock_init_recursive>:
 80127d2:	4770      	bx	lr

080127d4 <__retarget_lock_acquire_recursive>:
 80127d4:	4770      	bx	lr

080127d6 <__retarget_lock_release_recursive>:
 80127d6:	4770      	bx	lr

080127d8 <__swhatbuf_r>:
 80127d8:	b570      	push	{r4, r5, r6, lr}
 80127da:	460e      	mov	r6, r1
 80127dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127e0:	4614      	mov	r4, r2
 80127e2:	2900      	cmp	r1, #0
 80127e4:	461d      	mov	r5, r3
 80127e6:	b096      	sub	sp, #88	; 0x58
 80127e8:	da08      	bge.n	80127fc <__swhatbuf_r+0x24>
 80127ea:	2200      	movs	r2, #0
 80127ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80127f0:	602a      	str	r2, [r5, #0]
 80127f2:	061a      	lsls	r2, r3, #24
 80127f4:	d410      	bmi.n	8012818 <__swhatbuf_r+0x40>
 80127f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127fa:	e00e      	b.n	801281a <__swhatbuf_r+0x42>
 80127fc:	466a      	mov	r2, sp
 80127fe:	f000 f951 	bl	8012aa4 <_fstat_r>
 8012802:	2800      	cmp	r0, #0
 8012804:	dbf1      	blt.n	80127ea <__swhatbuf_r+0x12>
 8012806:	9a01      	ldr	r2, [sp, #4]
 8012808:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801280c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012810:	425a      	negs	r2, r3
 8012812:	415a      	adcs	r2, r3
 8012814:	602a      	str	r2, [r5, #0]
 8012816:	e7ee      	b.n	80127f6 <__swhatbuf_r+0x1e>
 8012818:	2340      	movs	r3, #64	; 0x40
 801281a:	2000      	movs	r0, #0
 801281c:	6023      	str	r3, [r4, #0]
 801281e:	b016      	add	sp, #88	; 0x58
 8012820:	bd70      	pop	{r4, r5, r6, pc}
	...

08012824 <__smakebuf_r>:
 8012824:	898b      	ldrh	r3, [r1, #12]
 8012826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012828:	079d      	lsls	r5, r3, #30
 801282a:	4606      	mov	r6, r0
 801282c:	460c      	mov	r4, r1
 801282e:	d507      	bpl.n	8012840 <__smakebuf_r+0x1c>
 8012830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012834:	6023      	str	r3, [r4, #0]
 8012836:	6123      	str	r3, [r4, #16]
 8012838:	2301      	movs	r3, #1
 801283a:	6163      	str	r3, [r4, #20]
 801283c:	b002      	add	sp, #8
 801283e:	bd70      	pop	{r4, r5, r6, pc}
 8012840:	466a      	mov	r2, sp
 8012842:	ab01      	add	r3, sp, #4
 8012844:	f7ff ffc8 	bl	80127d8 <__swhatbuf_r>
 8012848:	9900      	ldr	r1, [sp, #0]
 801284a:	4605      	mov	r5, r0
 801284c:	4630      	mov	r0, r6
 801284e:	f7ff f9e5 	bl	8011c1c <_malloc_r>
 8012852:	b948      	cbnz	r0, 8012868 <__smakebuf_r+0x44>
 8012854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012858:	059a      	lsls	r2, r3, #22
 801285a:	d4ef      	bmi.n	801283c <__smakebuf_r+0x18>
 801285c:	f023 0303 	bic.w	r3, r3, #3
 8012860:	f043 0302 	orr.w	r3, r3, #2
 8012864:	81a3      	strh	r3, [r4, #12]
 8012866:	e7e3      	b.n	8012830 <__smakebuf_r+0xc>
 8012868:	4b0d      	ldr	r3, [pc, #52]	; (80128a0 <__smakebuf_r+0x7c>)
 801286a:	62b3      	str	r3, [r6, #40]	; 0x28
 801286c:	89a3      	ldrh	r3, [r4, #12]
 801286e:	6020      	str	r0, [r4, #0]
 8012870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012874:	81a3      	strh	r3, [r4, #12]
 8012876:	9b00      	ldr	r3, [sp, #0]
 8012878:	6120      	str	r0, [r4, #16]
 801287a:	6163      	str	r3, [r4, #20]
 801287c:	9b01      	ldr	r3, [sp, #4]
 801287e:	b15b      	cbz	r3, 8012898 <__smakebuf_r+0x74>
 8012880:	4630      	mov	r0, r6
 8012882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012886:	f000 f91f 	bl	8012ac8 <_isatty_r>
 801288a:	b128      	cbz	r0, 8012898 <__smakebuf_r+0x74>
 801288c:	89a3      	ldrh	r3, [r4, #12]
 801288e:	f023 0303 	bic.w	r3, r3, #3
 8012892:	f043 0301 	orr.w	r3, r3, #1
 8012896:	81a3      	strh	r3, [r4, #12]
 8012898:	89a0      	ldrh	r0, [r4, #12]
 801289a:	4305      	orrs	r5, r0
 801289c:	81a5      	strh	r5, [r4, #12]
 801289e:	e7cd      	b.n	801283c <__smakebuf_r+0x18>
 80128a0:	08012631 	.word	0x08012631

080128a4 <memmove>:
 80128a4:	4288      	cmp	r0, r1
 80128a6:	b510      	push	{r4, lr}
 80128a8:	eb01 0402 	add.w	r4, r1, r2
 80128ac:	d902      	bls.n	80128b4 <memmove+0x10>
 80128ae:	4284      	cmp	r4, r0
 80128b0:	4623      	mov	r3, r4
 80128b2:	d807      	bhi.n	80128c4 <memmove+0x20>
 80128b4:	1e43      	subs	r3, r0, #1
 80128b6:	42a1      	cmp	r1, r4
 80128b8:	d008      	beq.n	80128cc <memmove+0x28>
 80128ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80128c2:	e7f8      	b.n	80128b6 <memmove+0x12>
 80128c4:	4601      	mov	r1, r0
 80128c6:	4402      	add	r2, r0
 80128c8:	428a      	cmp	r2, r1
 80128ca:	d100      	bne.n	80128ce <memmove+0x2a>
 80128cc:	bd10      	pop	{r4, pc}
 80128ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80128d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80128d6:	e7f7      	b.n	80128c8 <memmove+0x24>

080128d8 <__malloc_lock>:
 80128d8:	4801      	ldr	r0, [pc, #4]	; (80128e0 <__malloc_lock+0x8>)
 80128da:	f7ff bf7b 	b.w	80127d4 <__retarget_lock_acquire_recursive>
 80128de:	bf00      	nop
 80128e0:	2000193c 	.word	0x2000193c

080128e4 <__malloc_unlock>:
 80128e4:	4801      	ldr	r0, [pc, #4]	; (80128ec <__malloc_unlock+0x8>)
 80128e6:	f7ff bf76 	b.w	80127d6 <__retarget_lock_release_recursive>
 80128ea:	bf00      	nop
 80128ec:	2000193c 	.word	0x2000193c

080128f0 <_realloc_r>:
 80128f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128f4:	4680      	mov	r8, r0
 80128f6:	4614      	mov	r4, r2
 80128f8:	460e      	mov	r6, r1
 80128fa:	b921      	cbnz	r1, 8012906 <_realloc_r+0x16>
 80128fc:	4611      	mov	r1, r2
 80128fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012902:	f7ff b98b 	b.w	8011c1c <_malloc_r>
 8012906:	b92a      	cbnz	r2, 8012914 <_realloc_r+0x24>
 8012908:	f7ff f920 	bl	8011b4c <_free_r>
 801290c:	4625      	mov	r5, r4
 801290e:	4628      	mov	r0, r5
 8012910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012914:	f000 f8fa 	bl	8012b0c <_malloc_usable_size_r>
 8012918:	4284      	cmp	r4, r0
 801291a:	4607      	mov	r7, r0
 801291c:	d802      	bhi.n	8012924 <_realloc_r+0x34>
 801291e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012922:	d812      	bhi.n	801294a <_realloc_r+0x5a>
 8012924:	4621      	mov	r1, r4
 8012926:	4640      	mov	r0, r8
 8012928:	f7ff f978 	bl	8011c1c <_malloc_r>
 801292c:	4605      	mov	r5, r0
 801292e:	2800      	cmp	r0, #0
 8012930:	d0ed      	beq.n	801290e <_realloc_r+0x1e>
 8012932:	42bc      	cmp	r4, r7
 8012934:	4622      	mov	r2, r4
 8012936:	4631      	mov	r1, r6
 8012938:	bf28      	it	cs
 801293a:	463a      	movcs	r2, r7
 801293c:	f7fb feea 	bl	800e714 <memcpy>
 8012940:	4631      	mov	r1, r6
 8012942:	4640      	mov	r0, r8
 8012944:	f7ff f902 	bl	8011b4c <_free_r>
 8012948:	e7e1      	b.n	801290e <_realloc_r+0x1e>
 801294a:	4635      	mov	r5, r6
 801294c:	e7df      	b.n	801290e <_realloc_r+0x1e>

0801294e <_raise_r>:
 801294e:	291f      	cmp	r1, #31
 8012950:	b538      	push	{r3, r4, r5, lr}
 8012952:	4604      	mov	r4, r0
 8012954:	460d      	mov	r5, r1
 8012956:	d904      	bls.n	8012962 <_raise_r+0x14>
 8012958:	2316      	movs	r3, #22
 801295a:	6003      	str	r3, [r0, #0]
 801295c:	f04f 30ff 	mov.w	r0, #4294967295
 8012960:	bd38      	pop	{r3, r4, r5, pc}
 8012962:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012964:	b112      	cbz	r2, 801296c <_raise_r+0x1e>
 8012966:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801296a:	b94b      	cbnz	r3, 8012980 <_raise_r+0x32>
 801296c:	4620      	mov	r0, r4
 801296e:	f000 f831 	bl	80129d4 <_getpid_r>
 8012972:	462a      	mov	r2, r5
 8012974:	4601      	mov	r1, r0
 8012976:	4620      	mov	r0, r4
 8012978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801297c:	f000 b818 	b.w	80129b0 <_kill_r>
 8012980:	2b01      	cmp	r3, #1
 8012982:	d00a      	beq.n	801299a <_raise_r+0x4c>
 8012984:	1c59      	adds	r1, r3, #1
 8012986:	d103      	bne.n	8012990 <_raise_r+0x42>
 8012988:	2316      	movs	r3, #22
 801298a:	6003      	str	r3, [r0, #0]
 801298c:	2001      	movs	r0, #1
 801298e:	e7e7      	b.n	8012960 <_raise_r+0x12>
 8012990:	2400      	movs	r4, #0
 8012992:	4628      	mov	r0, r5
 8012994:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012998:	4798      	blx	r3
 801299a:	2000      	movs	r0, #0
 801299c:	e7e0      	b.n	8012960 <_raise_r+0x12>
	...

080129a0 <raise>:
 80129a0:	4b02      	ldr	r3, [pc, #8]	; (80129ac <raise+0xc>)
 80129a2:	4601      	mov	r1, r0
 80129a4:	6818      	ldr	r0, [r3, #0]
 80129a6:	f7ff bfd2 	b.w	801294e <_raise_r>
 80129aa:	bf00      	nop
 80129ac:	200008bc 	.word	0x200008bc

080129b0 <_kill_r>:
 80129b0:	b538      	push	{r3, r4, r5, lr}
 80129b2:	2300      	movs	r3, #0
 80129b4:	4d06      	ldr	r5, [pc, #24]	; (80129d0 <_kill_r+0x20>)
 80129b6:	4604      	mov	r4, r0
 80129b8:	4608      	mov	r0, r1
 80129ba:	4611      	mov	r1, r2
 80129bc:	602b      	str	r3, [r5, #0]
 80129be:	f7f1 fce4 	bl	800438a <_kill>
 80129c2:	1c43      	adds	r3, r0, #1
 80129c4:	d102      	bne.n	80129cc <_kill_r+0x1c>
 80129c6:	682b      	ldr	r3, [r5, #0]
 80129c8:	b103      	cbz	r3, 80129cc <_kill_r+0x1c>
 80129ca:	6023      	str	r3, [r4, #0]
 80129cc:	bd38      	pop	{r3, r4, r5, pc}
 80129ce:	bf00      	nop
 80129d0:	20001940 	.word	0x20001940

080129d4 <_getpid_r>:
 80129d4:	f7f1 bcd2 	b.w	800437c <_getpid>

080129d8 <__sread>:
 80129d8:	b510      	push	{r4, lr}
 80129da:	460c      	mov	r4, r1
 80129dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129e0:	f000 f89c 	bl	8012b1c <_read_r>
 80129e4:	2800      	cmp	r0, #0
 80129e6:	bfab      	itete	ge
 80129e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80129ea:	89a3      	ldrhlt	r3, [r4, #12]
 80129ec:	181b      	addge	r3, r3, r0
 80129ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80129f2:	bfac      	ite	ge
 80129f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80129f6:	81a3      	strhlt	r3, [r4, #12]
 80129f8:	bd10      	pop	{r4, pc}

080129fa <__swrite>:
 80129fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129fe:	461f      	mov	r7, r3
 8012a00:	898b      	ldrh	r3, [r1, #12]
 8012a02:	4605      	mov	r5, r0
 8012a04:	05db      	lsls	r3, r3, #23
 8012a06:	460c      	mov	r4, r1
 8012a08:	4616      	mov	r6, r2
 8012a0a:	d505      	bpl.n	8012a18 <__swrite+0x1e>
 8012a0c:	2302      	movs	r3, #2
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a14:	f000 f868 	bl	8012ae8 <_lseek_r>
 8012a18:	89a3      	ldrh	r3, [r4, #12]
 8012a1a:	4632      	mov	r2, r6
 8012a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a20:	81a3      	strh	r3, [r4, #12]
 8012a22:	4628      	mov	r0, r5
 8012a24:	463b      	mov	r3, r7
 8012a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a2e:	f000 b817 	b.w	8012a60 <_write_r>

08012a32 <__sseek>:
 8012a32:	b510      	push	{r4, lr}
 8012a34:	460c      	mov	r4, r1
 8012a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a3a:	f000 f855 	bl	8012ae8 <_lseek_r>
 8012a3e:	1c43      	adds	r3, r0, #1
 8012a40:	89a3      	ldrh	r3, [r4, #12]
 8012a42:	bf15      	itete	ne
 8012a44:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a4e:	81a3      	strheq	r3, [r4, #12]
 8012a50:	bf18      	it	ne
 8012a52:	81a3      	strhne	r3, [r4, #12]
 8012a54:	bd10      	pop	{r4, pc}

08012a56 <__sclose>:
 8012a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a5a:	f000 b813 	b.w	8012a84 <_close_r>
	...

08012a60 <_write_r>:
 8012a60:	b538      	push	{r3, r4, r5, lr}
 8012a62:	4604      	mov	r4, r0
 8012a64:	4608      	mov	r0, r1
 8012a66:	4611      	mov	r1, r2
 8012a68:	2200      	movs	r2, #0
 8012a6a:	4d05      	ldr	r5, [pc, #20]	; (8012a80 <_write_r+0x20>)
 8012a6c:	602a      	str	r2, [r5, #0]
 8012a6e:	461a      	mov	r2, r3
 8012a70:	f7f1 fcc2 	bl	80043f8 <_write>
 8012a74:	1c43      	adds	r3, r0, #1
 8012a76:	d102      	bne.n	8012a7e <_write_r+0x1e>
 8012a78:	682b      	ldr	r3, [r5, #0]
 8012a7a:	b103      	cbz	r3, 8012a7e <_write_r+0x1e>
 8012a7c:	6023      	str	r3, [r4, #0]
 8012a7e:	bd38      	pop	{r3, r4, r5, pc}
 8012a80:	20001940 	.word	0x20001940

08012a84 <_close_r>:
 8012a84:	b538      	push	{r3, r4, r5, lr}
 8012a86:	2300      	movs	r3, #0
 8012a88:	4d05      	ldr	r5, [pc, #20]	; (8012aa0 <_close_r+0x1c>)
 8012a8a:	4604      	mov	r4, r0
 8012a8c:	4608      	mov	r0, r1
 8012a8e:	602b      	str	r3, [r5, #0]
 8012a90:	f7f1 fcce 	bl	8004430 <_close>
 8012a94:	1c43      	adds	r3, r0, #1
 8012a96:	d102      	bne.n	8012a9e <_close_r+0x1a>
 8012a98:	682b      	ldr	r3, [r5, #0]
 8012a9a:	b103      	cbz	r3, 8012a9e <_close_r+0x1a>
 8012a9c:	6023      	str	r3, [r4, #0]
 8012a9e:	bd38      	pop	{r3, r4, r5, pc}
 8012aa0:	20001940 	.word	0x20001940

08012aa4 <_fstat_r>:
 8012aa4:	b538      	push	{r3, r4, r5, lr}
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	4d06      	ldr	r5, [pc, #24]	; (8012ac4 <_fstat_r+0x20>)
 8012aaa:	4604      	mov	r4, r0
 8012aac:	4608      	mov	r0, r1
 8012aae:	4611      	mov	r1, r2
 8012ab0:	602b      	str	r3, [r5, #0]
 8012ab2:	f7f1 fcc8 	bl	8004446 <_fstat>
 8012ab6:	1c43      	adds	r3, r0, #1
 8012ab8:	d102      	bne.n	8012ac0 <_fstat_r+0x1c>
 8012aba:	682b      	ldr	r3, [r5, #0]
 8012abc:	b103      	cbz	r3, 8012ac0 <_fstat_r+0x1c>
 8012abe:	6023      	str	r3, [r4, #0]
 8012ac0:	bd38      	pop	{r3, r4, r5, pc}
 8012ac2:	bf00      	nop
 8012ac4:	20001940 	.word	0x20001940

08012ac8 <_isatty_r>:
 8012ac8:	b538      	push	{r3, r4, r5, lr}
 8012aca:	2300      	movs	r3, #0
 8012acc:	4d05      	ldr	r5, [pc, #20]	; (8012ae4 <_isatty_r+0x1c>)
 8012ace:	4604      	mov	r4, r0
 8012ad0:	4608      	mov	r0, r1
 8012ad2:	602b      	str	r3, [r5, #0]
 8012ad4:	f7f1 fcc6 	bl	8004464 <_isatty>
 8012ad8:	1c43      	adds	r3, r0, #1
 8012ada:	d102      	bne.n	8012ae2 <_isatty_r+0x1a>
 8012adc:	682b      	ldr	r3, [r5, #0]
 8012ade:	b103      	cbz	r3, 8012ae2 <_isatty_r+0x1a>
 8012ae0:	6023      	str	r3, [r4, #0]
 8012ae2:	bd38      	pop	{r3, r4, r5, pc}
 8012ae4:	20001940 	.word	0x20001940

08012ae8 <_lseek_r>:
 8012ae8:	b538      	push	{r3, r4, r5, lr}
 8012aea:	4604      	mov	r4, r0
 8012aec:	4608      	mov	r0, r1
 8012aee:	4611      	mov	r1, r2
 8012af0:	2200      	movs	r2, #0
 8012af2:	4d05      	ldr	r5, [pc, #20]	; (8012b08 <_lseek_r+0x20>)
 8012af4:	602a      	str	r2, [r5, #0]
 8012af6:	461a      	mov	r2, r3
 8012af8:	f7f1 fcbe 	bl	8004478 <_lseek>
 8012afc:	1c43      	adds	r3, r0, #1
 8012afe:	d102      	bne.n	8012b06 <_lseek_r+0x1e>
 8012b00:	682b      	ldr	r3, [r5, #0]
 8012b02:	b103      	cbz	r3, 8012b06 <_lseek_r+0x1e>
 8012b04:	6023      	str	r3, [r4, #0]
 8012b06:	bd38      	pop	{r3, r4, r5, pc}
 8012b08:	20001940 	.word	0x20001940

08012b0c <_malloc_usable_size_r>:
 8012b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b10:	1f18      	subs	r0, r3, #4
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	bfbc      	itt	lt
 8012b16:	580b      	ldrlt	r3, [r1, r0]
 8012b18:	18c0      	addlt	r0, r0, r3
 8012b1a:	4770      	bx	lr

08012b1c <_read_r>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4604      	mov	r4, r0
 8012b20:	4608      	mov	r0, r1
 8012b22:	4611      	mov	r1, r2
 8012b24:	2200      	movs	r2, #0
 8012b26:	4d05      	ldr	r5, [pc, #20]	; (8012b3c <_read_r+0x20>)
 8012b28:	602a      	str	r2, [r5, #0]
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	f7f1 fc47 	bl	80043be <_read>
 8012b30:	1c43      	adds	r3, r0, #1
 8012b32:	d102      	bne.n	8012b3a <_read_r+0x1e>
 8012b34:	682b      	ldr	r3, [r5, #0]
 8012b36:	b103      	cbz	r3, 8012b3a <_read_r+0x1e>
 8012b38:	6023      	str	r3, [r4, #0]
 8012b3a:	bd38      	pop	{r3, r4, r5, pc}
 8012b3c:	20001940 	.word	0x20001940

08012b40 <_init>:
 8012b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b42:	bf00      	nop
 8012b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b46:	bc08      	pop	{r3}
 8012b48:	469e      	mov	lr, r3
 8012b4a:	4770      	bx	lr

08012b4c <_fini>:
 8012b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b4e:	bf00      	nop
 8012b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b52:	bc08      	pop	{r3}
 8012b54:	469e      	mov	lr, r3
 8012b56:	4770      	bx	lr
