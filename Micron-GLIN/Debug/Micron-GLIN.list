
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012918  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  08012a58  08012a58  00022a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013138  08013138  00030a90  2**0
                  CONTENTS
  4 .ARM          00000008  08013138  08013138  00023138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013140  08013140  00030a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013140  08013140  00023140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013144  08013144  00023144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a90  20000000  08013148  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb4  20000a90  08013bd8  00030a90  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001944  08013bd8  00031944  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030a90  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b50a  00000000  00000000  00030ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d17  00000000  00000000  0004bfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00050ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  000525d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6d2  00000000  00000000  00053ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201c7  00000000  00000000  0006e372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088043  00000000  00000000  0008e539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011657c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d60  00000000  00000000  001165cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000a90 	.word	0x20000a90
 800015c:	00000000 	.word	0x00000000
 8000160:	08012a40 	.word	0x08012a40

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000a94 	.word	0x20000a94
 800017c:	08012a40 	.word	0x08012a40

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_frsub>:
 8000bac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	e002      	b.n	8000bb8 <__addsf3>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_fsub>:
 8000bb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb8 <__addsf3>:
 8000bb8:	0042      	lsls	r2, r0, #1
 8000bba:	bf1f      	itttt	ne
 8000bbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc0:	ea92 0f03 	teqne	r2, r3
 8000bc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bcc:	d06a      	beq.n	8000ca4 <__addsf3+0xec>
 8000bce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd6:	bfc1      	itttt	gt
 8000bd8:	18d2      	addgt	r2, r2, r3
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	4048      	eorgt	r0, r1
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	bfb8      	it	lt
 8000be2:	425b      	neglt	r3, r3
 8000be4:	2b19      	cmp	r3, #25
 8000be6:	bf88      	it	hi
 8000be8:	4770      	bxhi	lr
 8000bea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c06:	bf18      	it	ne
 8000c08:	4249      	negne	r1, r1
 8000c0a:	ea92 0f03 	teq	r2, r3
 8000c0e:	d03f      	beq.n	8000c90 <__addsf3+0xd8>
 8000c10:	f1a2 0201 	sub.w	r2, r2, #1
 8000c14:	fa41 fc03 	asr.w	ip, r1, r3
 8000c18:	eb10 000c 	adds.w	r0, r0, ip
 8000c1c:	f1c3 0320 	rsb	r3, r3, #32
 8000c20:	fa01 f103 	lsl.w	r1, r1, r3
 8000c24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__addsf3+0x78>
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c34:	d313      	bcc.n	8000c5e <__addsf3+0xa6>
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3a:	d306      	bcc.n	8000c4a <__addsf3+0x92>
 8000c3c:	0840      	lsrs	r0, r0, #1
 8000c3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c42:	f102 0201 	add.w	r2, r2, #1
 8000c46:	2afe      	cmp	r2, #254	; 0xfe
 8000c48:	d251      	bcs.n	8000cee <__addsf3+0x136>
 8000c4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	ea40 0003 	orr.w	r0, r0, r3
 8000c5c:	4770      	bx	lr
 8000c5e:	0049      	lsls	r1, r1, #1
 8000c60:	eb40 0000 	adc.w	r0, r0, r0
 8000c64:	3a01      	subs	r2, #1
 8000c66:	bf28      	it	cs
 8000c68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c6c:	d2ed      	bcs.n	8000c4a <__addsf3+0x92>
 8000c6e:	fab0 fc80 	clz	ip, r0
 8000c72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c76:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7e:	bfaa      	itet	ge
 8000c80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c84:	4252      	neglt	r2, r2
 8000c86:	4318      	orrge	r0, r3
 8000c88:	bfbc      	itt	lt
 8000c8a:	40d0      	lsrlt	r0, r2
 8000c8c:	4318      	orrlt	r0, r3
 8000c8e:	4770      	bx	lr
 8000c90:	f092 0f00 	teq	r2, #0
 8000c94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c98:	bf06      	itte	eq
 8000c9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9e:	3201      	addeq	r2, #1
 8000ca0:	3b01      	subne	r3, #1
 8000ca2:	e7b5      	b.n	8000c10 <__addsf3+0x58>
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d021      	beq.n	8000cf8 <__addsf3+0x140>
 8000cb4:	ea92 0f03 	teq	r2, r3
 8000cb8:	d004      	beq.n	8000cc4 <__addsf3+0x10c>
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	4608      	moveq	r0, r1
 8000cc2:	4770      	bx	lr
 8000cc4:	ea90 0f01 	teq	r0, r1
 8000cc8:	bf1c      	itt	ne
 8000cca:	2000      	movne	r0, #0
 8000ccc:	4770      	bxne	lr
 8000cce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cd2:	d104      	bne.n	8000cde <__addsf3+0x126>
 8000cd4:	0040      	lsls	r0, r0, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ce2:	bf3c      	itt	cc
 8000ce4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bxcc	lr
 8000cea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf6:	4770      	bx	lr
 8000cf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cfc:	bf16      	itet	ne
 8000cfe:	4608      	movne	r0, r1
 8000d00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d04:	4601      	movne	r1, r0
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	bf06      	itte	eq
 8000d0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0e:	ea90 0f01 	teqeq	r0, r1
 8000d12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_ui2f>:
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e004      	b.n	8000d28 <__aeabi_i2f+0x8>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_i2f>:
 8000d20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	bf48      	it	mi
 8000d26:	4240      	negmi	r0, r0
 8000d28:	ea5f 0c00 	movs.w	ip, r0
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d34:	4601      	mov	r1, r0
 8000d36:	f04f 0000 	mov.w	r0, #0
 8000d3a:	e01c      	b.n	8000d76 <__aeabi_l2f+0x2a>

08000d3c <__aeabi_ul2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e00a      	b.n	8000d60 <__aeabi_l2f+0x14>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_l2f>:
 8000d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d58:	d502      	bpl.n	8000d60 <__aeabi_l2f+0x14>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	ea5f 0c01 	movs.w	ip, r1
 8000d64:	bf02      	ittt	eq
 8000d66:	4684      	moveq	ip, r0
 8000d68:	4601      	moveq	r1, r0
 8000d6a:	2000      	moveq	r0, #0
 8000d6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d70:	bf08      	it	eq
 8000d72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d7a:	fabc f28c 	clz	r2, ip
 8000d7e:	3a08      	subs	r2, #8
 8000d80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d84:	db10      	blt.n	8000da8 <__aeabi_l2f+0x5c>
 8000d86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d90:	f1c2 0220 	rsb	r2, r2, #32
 8000d94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d98:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9c:	eb43 0002 	adc.w	r0, r3, r2
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f102 0220 	add.w	r2, r2, #32
 8000dac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_fmul>:
 8000dc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd0:	bf1e      	ittt	ne
 8000dd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd6:	ea92 0f0c 	teqne	r2, ip
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d06f      	beq.n	8000ec0 <__aeabi_fmul+0xf8>
 8000de0:	441a      	add	r2, r3
 8000de2:	ea80 0c01 	eor.w	ip, r0, r1
 8000de6:	0240      	lsls	r0, r0, #9
 8000de8:	bf18      	it	ne
 8000dea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dee:	d01e      	beq.n	8000e2e <__aeabi_fmul+0x66>
 8000df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000e00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e08:	bf3e      	ittt	cc
 8000e0a:	0049      	lslcc	r1, r1, #1
 8000e0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e10:	005b      	lslcc	r3, r3, #1
 8000e12:	ea40 0001 	orr.w	r0, r0, r1
 8000e16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e1a:	2afd      	cmp	r2, #253	; 0xfd
 8000e1c:	d81d      	bhi.n	8000e5a <__aeabi_fmul+0x92>
 8000e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e26:	bf08      	it	eq
 8000e28:	f020 0001 	biceq.w	r0, r0, #1
 8000e2c:	4770      	bx	lr
 8000e2e:	f090 0f00 	teq	r0, #0
 8000e32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e36:	bf08      	it	eq
 8000e38:	0249      	lsleq	r1, r1, #9
 8000e3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e42:	3a7f      	subs	r2, #127	; 0x7f
 8000e44:	bfc2      	ittt	gt
 8000e46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4e:	4770      	bxgt	lr
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	dc5d      	bgt.n	8000f18 <__aeabi_fmul+0x150>
 8000e5c:	f112 0f19 	cmn.w	r2, #25
 8000e60:	bfdc      	itt	le
 8000e62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e66:	4770      	bxle	lr
 8000e68:	f1c2 0200 	rsb	r2, r2, #0
 8000e6c:	0041      	lsls	r1, r0, #1
 8000e6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e72:	f1c2 0220 	rsb	r2, r2, #32
 8000e76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7e:	f140 0000 	adc.w	r0, r0, #0
 8000e82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e86:	bf08      	it	eq
 8000e88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e8c:	4770      	bx	lr
 8000e8e:	f092 0f00 	teq	r2, #0
 8000e92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e96:	bf02      	ittt	eq
 8000e98:	0040      	lsleq	r0, r0, #1
 8000e9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9e:	3a01      	subeq	r2, #1
 8000ea0:	d0f9      	beq.n	8000e96 <__aeabi_fmul+0xce>
 8000ea2:	ea40 000c 	orr.w	r0, r0, ip
 8000ea6:	f093 0f00 	teq	r3, #0
 8000eaa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0049      	lsleq	r1, r1, #1
 8000eb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb6:	3b01      	subeq	r3, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xe6>
 8000eba:	ea41 010c 	orr.w	r1, r1, ip
 8000ebe:	e78f      	b.n	8000de0 <__aeabi_fmul+0x18>
 8000ec0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	bf18      	it	ne
 8000eca:	ea93 0f0c 	teqne	r3, ip
 8000ece:	d00a      	beq.n	8000ee6 <__aeabi_fmul+0x11e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1d8      	bne.n	8000e8e <__aeabi_fmul+0xc6>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee4:	4770      	bx	lr
 8000ee6:	f090 0f00 	teq	r0, #0
 8000eea:	bf17      	itett	ne
 8000eec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ef0:	4608      	moveq	r0, r1
 8000ef2:	f091 0f00 	teqne	r1, #0
 8000ef6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000efa:	d014      	beq.n	8000f26 <__aeabi_fmul+0x15e>
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d101      	bne.n	8000f06 <__aeabi_fmul+0x13e>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d10f      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f06:	ea93 0f0c 	teq	r3, ip
 8000f0a:	d103      	bne.n	8000f14 <__aeabi_fmul+0x14c>
 8000f0c:	024b      	lsls	r3, r1, #9
 8000f0e:	bf18      	it	ne
 8000f10:	4608      	movne	r0, r1
 8000f12:	d108      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f14:	ea80 0001 	eor.w	r0, r0, r1
 8000f18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f24:	4770      	bx	lr
 8000f26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_fdiv>:
 8000f30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f38:	bf1e      	ittt	ne
 8000f3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3e:	ea92 0f0c 	teqne	r2, ip
 8000f42:	ea93 0f0c 	teqne	r3, ip
 8000f46:	d069      	beq.n	800101c <__aeabi_fdiv+0xec>
 8000f48:	eba2 0203 	sub.w	r2, r2, r3
 8000f4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f56:	d037      	beq.n	8000fc8 <__aeabi_fdiv+0x98>
 8000f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	bf38      	it	cc
 8000f6c:	005b      	lslcc	r3, r3, #1
 8000f6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f76:	428b      	cmp	r3, r1
 8000f78:	bf24      	itt	cs
 8000f7a:	1a5b      	subcs	r3, r3, r1
 8000f7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f84:	bf24      	itt	cs
 8000f86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f92:	bf24      	itt	cs
 8000f94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa0:	bf24      	itt	cs
 8000fa2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	bf18      	it	ne
 8000fae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb2:	d1e0      	bne.n	8000f76 <__aeabi_fdiv+0x46>
 8000fb4:	2afd      	cmp	r2, #253	; 0xfd
 8000fb6:	f63f af50 	bhi.w	8000e5a <__aeabi_fmul+0x92>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc0:	bf08      	it	eq
 8000fc2:	f020 0001 	biceq.w	r0, r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd0:	327f      	adds	r2, #127	; 0x7f
 8000fd2:	bfc2      	ittt	gt
 8000fd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fdc:	4770      	bxgt	lr
 8000fde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	e737      	b.n	8000e5a <__aeabi_fmul+0x92>
 8000fea:	f092 0f00 	teq	r2, #0
 8000fee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ff2:	bf02      	ittt	eq
 8000ff4:	0040      	lsleq	r0, r0, #1
 8000ff6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ffa:	3a01      	subeq	r2, #1
 8000ffc:	d0f9      	beq.n	8000ff2 <__aeabi_fdiv+0xc2>
 8000ffe:	ea40 000c 	orr.w	r0, r0, ip
 8001002:	f093 0f00 	teq	r3, #0
 8001006:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0049      	lsleq	r1, r1, #1
 800100e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001012:	3b01      	subeq	r3, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xda>
 8001016:	ea41 010c 	orr.w	r1, r1, ip
 800101a:	e795      	b.n	8000f48 <__aeabi_fdiv+0x18>
 800101c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001020:	ea92 0f0c 	teq	r2, ip
 8001024:	d108      	bne.n	8001038 <__aeabi_fdiv+0x108>
 8001026:	0242      	lsls	r2, r0, #9
 8001028:	f47f af7d 	bne.w	8000f26 <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	f47f af70 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 8001034:	4608      	mov	r0, r1
 8001036:	e776      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001038:	ea93 0f0c 	teq	r3, ip
 800103c:	d104      	bne.n	8001048 <__aeabi_fdiv+0x118>
 800103e:	024b      	lsls	r3, r1, #9
 8001040:	f43f af4c 	beq.w	8000edc <__aeabi_fmul+0x114>
 8001044:	4608      	mov	r0, r1
 8001046:	e76e      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001048:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800104c:	bf18      	it	ne
 800104e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001052:	d1ca      	bne.n	8000fea <__aeabi_fdiv+0xba>
 8001054:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001058:	f47f af5c 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 800105c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001060:	f47f af3c 	bne.w	8000edc <__aeabi_fmul+0x114>
 8001064:	e75f      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001066:	bf00      	nop

08001068 <__gesf2>:
 8001068:	f04f 3cff 	mov.w	ip, #4294967295
 800106c:	e006      	b.n	800107c <__cmpsf2+0x4>
 800106e:	bf00      	nop

08001070 <__lesf2>:
 8001070:	f04f 0c01 	mov.w	ip, #1
 8001074:	e002      	b.n	800107c <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__cmpsf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	bf18      	it	ne
 800108e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001092:	d011      	beq.n	80010b8 <__cmpsf2+0x40>
 8001094:	b001      	add	sp, #4
 8001096:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800109a:	bf18      	it	ne
 800109c:	ea90 0f01 	teqne	r0, r1
 80010a0:	bf58      	it	pl
 80010a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a6:	bf88      	it	hi
 80010a8:	17c8      	asrhi	r0, r1, #31
 80010aa:	bf38      	it	cc
 80010ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b0:	bf18      	it	ne
 80010b2:	f040 0001 	orrne.w	r0, r0, #1
 80010b6:	4770      	bx	lr
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__cmpsf2+0x4c>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d105      	bne.n	80010d0 <__cmpsf2+0x58>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d1e4      	bne.n	8001094 <__cmpsf2+0x1c>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d0e1      	beq.n	8001094 <__cmpsf2+0x1c>
 80010d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <__aeabi_cfrcmple>:
 80010d8:	4684      	mov	ip, r0
 80010da:	4608      	mov	r0, r1
 80010dc:	4661      	mov	r1, ip
 80010de:	e7ff      	b.n	80010e0 <__aeabi_cfcmpeq>

080010e0 <__aeabi_cfcmpeq>:
 80010e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010e2:	f7ff ffc9 	bl	8001078 <__cmpsf2>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	bf48      	it	mi
 80010ea:	f110 0f00 	cmnmi.w	r0, #0
 80010ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f0 <__aeabi_fcmpeq>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff fff4 	bl	80010e0 <__aeabi_cfcmpeq>
 80010f8:	bf0c      	ite	eq
 80010fa:	2001      	moveq	r0, #1
 80010fc:	2000      	movne	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmplt>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffea 	bl	80010e0 <__aeabi_cfcmpeq>
 800110c:	bf34      	ite	cc
 800110e:	2001      	movcc	r0, #1
 8001110:	2000      	movcs	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmple>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffe0 	bl	80010e0 <__aeabi_cfcmpeq>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpge>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffd2 	bl	80010d8 <__aeabi_cfrcmple>
 8001134:	bf94      	ite	ls
 8001136:	2001      	movls	r0, #1
 8001138:	2000      	movhi	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpgt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffc8 	bl	80010d8 <__aeabi_cfrcmple>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_f2uiz>:
 8001154:	0042      	lsls	r2, r0, #1
 8001156:	d20e      	bcs.n	8001176 <__aeabi_f2uiz+0x22>
 8001158:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800115c:	d30b      	bcc.n	8001176 <__aeabi_f2uiz+0x22>
 800115e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001162:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001166:	d409      	bmi.n	800117c <__aeabi_f2uiz+0x28>
 8001168:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	4770      	bx	lr
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	4770      	bx	lr
 800117c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001180:	d101      	bne.n	8001186 <__aeabi_f2uiz+0x32>
 8001182:	0242      	lsls	r2, r0, #9
 8001184:	d102      	bne.n	800118c <__aeabi_f2uiz+0x38>
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	4770      	bx	lr
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <__aeabi_uldivmod>:
 8001194:	b953      	cbnz	r3, 80011ac <__aeabi_uldivmod+0x18>
 8001196:	b94a      	cbnz	r2, 80011ac <__aeabi_uldivmod+0x18>
 8001198:	2900      	cmp	r1, #0
 800119a:	bf08      	it	eq
 800119c:	2800      	cmpeq	r0, #0
 800119e:	bf1c      	itt	ne
 80011a0:	f04f 31ff 	movne.w	r1, #4294967295
 80011a4:	f04f 30ff 	movne.w	r0, #4294967295
 80011a8:	f000 b9ae 	b.w	8001508 <__aeabi_idiv0>
 80011ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b4:	f000 f83e 	bl	8001234 <__udivmoddi4>
 80011b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c0:	b004      	add	sp, #16
 80011c2:	4770      	bx	lr

080011c4 <__aeabi_d2lz>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4605      	mov	r5, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4628      	mov	r0, r5
 80011d0:	4621      	mov	r1, r4
 80011d2:	f7ff fc15 	bl	8000a00 <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x20>
 80011d8:	4628      	mov	r0, r5
 80011da:	4621      	mov	r1, r4
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4628      	mov	r0, r5
 80011e6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f98b 	bl	800051c <__aeabi_dmul>
 8001206:	f7ff fc61 	bl	8000acc <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f90c 	bl	8000428 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f982 	bl	800051c <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffc4 	bl	80001ac <__aeabi_dsub>
 8001224:	f7ff fc52 	bl	8000acc <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000

08001234 <__udivmoddi4>:
 8001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001238:	9e08      	ldr	r6, [sp, #32]
 800123a:	460d      	mov	r5, r1
 800123c:	4604      	mov	r4, r0
 800123e:	4688      	mov	r8, r1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d14d      	bne.n	80012e0 <__udivmoddi4+0xac>
 8001244:	428a      	cmp	r2, r1
 8001246:	4694      	mov	ip, r2
 8001248:	d968      	bls.n	800131c <__udivmoddi4+0xe8>
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b152      	cbz	r2, 8001266 <__udivmoddi4+0x32>
 8001250:	fa01 f302 	lsl.w	r3, r1, r2
 8001254:	f1c2 0120 	rsb	r1, r2, #32
 8001258:	fa20 f101 	lsr.w	r1, r0, r1
 800125c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001260:	ea41 0803 	orr.w	r8, r1, r3
 8001264:	4094      	lsls	r4, r2
 8001266:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800126a:	fbb8 f7f1 	udiv	r7, r8, r1
 800126e:	fa1f fe8c 	uxth.w	lr, ip
 8001272:	fb01 8817 	mls	r8, r1, r7, r8
 8001276:	fb07 f00e 	mul.w	r0, r7, lr
 800127a:	0c23      	lsrs	r3, r4, #16
 800127c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001280:	4298      	cmp	r0, r3
 8001282:	d90a      	bls.n	800129a <__udivmoddi4+0x66>
 8001284:	eb1c 0303 	adds.w	r3, ip, r3
 8001288:	f107 35ff 	add.w	r5, r7, #4294967295
 800128c:	f080 811e 	bcs.w	80014cc <__udivmoddi4+0x298>
 8001290:	4298      	cmp	r0, r3
 8001292:	f240 811b 	bls.w	80014cc <__udivmoddi4+0x298>
 8001296:	3f02      	subs	r7, #2
 8001298:	4463      	add	r3, ip
 800129a:	1a1b      	subs	r3, r3, r0
 800129c:	fbb3 f0f1 	udiv	r0, r3, r1
 80012a0:	fb01 3310 	mls	r3, r1, r0, r3
 80012a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80012a8:	b2a4      	uxth	r4, r4
 80012aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012ae:	45a6      	cmp	lr, r4
 80012b0:	d90a      	bls.n	80012c8 <__udivmoddi4+0x94>
 80012b2:	eb1c 0404 	adds.w	r4, ip, r4
 80012b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80012ba:	f080 8109 	bcs.w	80014d0 <__udivmoddi4+0x29c>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f240 8106 	bls.w	80014d0 <__udivmoddi4+0x29c>
 80012c4:	4464      	add	r4, ip
 80012c6:	3802      	subs	r0, #2
 80012c8:	2100      	movs	r1, #0
 80012ca:	eba4 040e 	sub.w	r4, r4, lr
 80012ce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012d2:	b11e      	cbz	r6, 80012dc <__udivmoddi4+0xa8>
 80012d4:	2300      	movs	r3, #0
 80012d6:	40d4      	lsrs	r4, r2
 80012d8:	e9c6 4300 	strd	r4, r3, [r6]
 80012dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0xc2>
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	f000 80ee 	beq.w	80014c6 <__udivmoddi4+0x292>
 80012ea:	2100      	movs	r1, #0
 80012ec:	e9c6 0500 	strd	r0, r5, [r6]
 80012f0:	4608      	mov	r0, r1
 80012f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f6:	fab3 f183 	clz	r1, r3
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d14a      	bne.n	8001394 <__udivmoddi4+0x160>
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d302      	bcc.n	8001308 <__udivmoddi4+0xd4>
 8001302:	4282      	cmp	r2, r0
 8001304:	f200 80fc 	bhi.w	8001500 <__udivmoddi4+0x2cc>
 8001308:	1a84      	subs	r4, r0, r2
 800130a:	eb65 0303 	sbc.w	r3, r5, r3
 800130e:	2001      	movs	r0, #1
 8001310:	4698      	mov	r8, r3
 8001312:	2e00      	cmp	r6, #0
 8001314:	d0e2      	beq.n	80012dc <__udivmoddi4+0xa8>
 8001316:	e9c6 4800 	strd	r4, r8, [r6]
 800131a:	e7df      	b.n	80012dc <__udivmoddi4+0xa8>
 800131c:	b902      	cbnz	r2, 8001320 <__udivmoddi4+0xec>
 800131e:	deff      	udf	#255	; 0xff
 8001320:	fab2 f282 	clz	r2, r2
 8001324:	2a00      	cmp	r2, #0
 8001326:	f040 8091 	bne.w	800144c <__udivmoddi4+0x218>
 800132a:	eba1 000c 	sub.w	r0, r1, ip
 800132e:	2101      	movs	r1, #1
 8001330:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001334:	fa1f fe8c 	uxth.w	lr, ip
 8001338:	fbb0 f3f7 	udiv	r3, r0, r7
 800133c:	fb07 0013 	mls	r0, r7, r3, r0
 8001340:	0c25      	lsrs	r5, r4, #16
 8001342:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001346:	fb0e f003 	mul.w	r0, lr, r3
 800134a:	42a8      	cmp	r0, r5
 800134c:	d908      	bls.n	8001360 <__udivmoddi4+0x12c>
 800134e:	eb1c 0505 	adds.w	r5, ip, r5
 8001352:	f103 38ff 	add.w	r8, r3, #4294967295
 8001356:	d202      	bcs.n	800135e <__udivmoddi4+0x12a>
 8001358:	42a8      	cmp	r0, r5
 800135a:	f200 80ce 	bhi.w	80014fa <__udivmoddi4+0x2c6>
 800135e:	4643      	mov	r3, r8
 8001360:	1a2d      	subs	r5, r5, r0
 8001362:	fbb5 f0f7 	udiv	r0, r5, r7
 8001366:	fb07 5510 	mls	r5, r7, r0, r5
 800136a:	fb0e fe00 	mul.w	lr, lr, r0
 800136e:	b2a4      	uxth	r4, r4
 8001370:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001374:	45a6      	cmp	lr, r4
 8001376:	d908      	bls.n	800138a <__udivmoddi4+0x156>
 8001378:	eb1c 0404 	adds.w	r4, ip, r4
 800137c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001380:	d202      	bcs.n	8001388 <__udivmoddi4+0x154>
 8001382:	45a6      	cmp	lr, r4
 8001384:	f200 80b6 	bhi.w	80014f4 <__udivmoddi4+0x2c0>
 8001388:	4628      	mov	r0, r5
 800138a:	eba4 040e 	sub.w	r4, r4, lr
 800138e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001392:	e79e      	b.n	80012d2 <__udivmoddi4+0x9e>
 8001394:	f1c1 0720 	rsb	r7, r1, #32
 8001398:	408b      	lsls	r3, r1
 800139a:	fa22 fc07 	lsr.w	ip, r2, r7
 800139e:	ea4c 0c03 	orr.w	ip, ip, r3
 80013a2:	fa25 fa07 	lsr.w	sl, r5, r7
 80013a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013aa:	fbba f8f9 	udiv	r8, sl, r9
 80013ae:	fa20 f307 	lsr.w	r3, r0, r7
 80013b2:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b6:	408d      	lsls	r5, r1
 80013b8:	fa1f fe8c 	uxth.w	lr, ip
 80013bc:	431d      	orrs	r5, r3
 80013be:	fa00 f301 	lsl.w	r3, r0, r1
 80013c2:	fb08 f00e 	mul.w	r0, r8, lr
 80013c6:	0c2c      	lsrs	r4, r5, #16
 80013c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013cc:	42a0      	cmp	r0, r4
 80013ce:	fa02 f201 	lsl.w	r2, r2, r1
 80013d2:	d90b      	bls.n	80013ec <__udivmoddi4+0x1b8>
 80013d4:	eb1c 0404 	adds.w	r4, ip, r4
 80013d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80013dc:	f080 8088 	bcs.w	80014f0 <__udivmoddi4+0x2bc>
 80013e0:	42a0      	cmp	r0, r4
 80013e2:	f240 8085 	bls.w	80014f0 <__udivmoddi4+0x2bc>
 80013e6:	f1a8 0802 	sub.w	r8, r8, #2
 80013ea:	4464      	add	r4, ip
 80013ec:	1a24      	subs	r4, r4, r0
 80013ee:	fbb4 f0f9 	udiv	r0, r4, r9
 80013f2:	fb09 4410 	mls	r4, r9, r0, r4
 80013f6:	fb00 fe0e 	mul.w	lr, r0, lr
 80013fa:	b2ad      	uxth	r5, r5
 80013fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001400:	45a6      	cmp	lr, r4
 8001402:	d908      	bls.n	8001416 <__udivmoddi4+0x1e2>
 8001404:	eb1c 0404 	adds.w	r4, ip, r4
 8001408:	f100 35ff 	add.w	r5, r0, #4294967295
 800140c:	d26c      	bcs.n	80014e8 <__udivmoddi4+0x2b4>
 800140e:	45a6      	cmp	lr, r4
 8001410:	d96a      	bls.n	80014e8 <__udivmoddi4+0x2b4>
 8001412:	3802      	subs	r0, #2
 8001414:	4464      	add	r4, ip
 8001416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800141a:	fba0 9502 	umull	r9, r5, r0, r2
 800141e:	eba4 040e 	sub.w	r4, r4, lr
 8001422:	42ac      	cmp	r4, r5
 8001424:	46c8      	mov	r8, r9
 8001426:	46ae      	mov	lr, r5
 8001428:	d356      	bcc.n	80014d8 <__udivmoddi4+0x2a4>
 800142a:	d053      	beq.n	80014d4 <__udivmoddi4+0x2a0>
 800142c:	2e00      	cmp	r6, #0
 800142e:	d069      	beq.n	8001504 <__udivmoddi4+0x2d0>
 8001430:	ebb3 0208 	subs.w	r2, r3, r8
 8001434:	eb64 040e 	sbc.w	r4, r4, lr
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	fa04 f707 	lsl.w	r7, r4, r7
 8001440:	431f      	orrs	r7, r3
 8001442:	40cc      	lsrs	r4, r1
 8001444:	e9c6 7400 	strd	r7, r4, [r6]
 8001448:	2100      	movs	r1, #0
 800144a:	e747      	b.n	80012dc <__udivmoddi4+0xa8>
 800144c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001450:	f1c2 0120 	rsb	r1, r2, #32
 8001454:	fa25 f301 	lsr.w	r3, r5, r1
 8001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800145c:	fa20 f101 	lsr.w	r1, r0, r1
 8001460:	4095      	lsls	r5, r2
 8001462:	430d      	orrs	r5, r1
 8001464:	fbb3 f1f7 	udiv	r1, r3, r7
 8001468:	fb07 3311 	mls	r3, r7, r1, r3
 800146c:	fa1f fe8c 	uxth.w	lr, ip
 8001470:	0c28      	lsrs	r0, r5, #16
 8001472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001476:	fb01 f30e 	mul.w	r3, r1, lr
 800147a:	4283      	cmp	r3, r0
 800147c:	fa04 f402 	lsl.w	r4, r4, r2
 8001480:	d908      	bls.n	8001494 <__udivmoddi4+0x260>
 8001482:	eb1c 0000 	adds.w	r0, ip, r0
 8001486:	f101 38ff 	add.w	r8, r1, #4294967295
 800148a:	d22f      	bcs.n	80014ec <__udivmoddi4+0x2b8>
 800148c:	4283      	cmp	r3, r0
 800148e:	d92d      	bls.n	80014ec <__udivmoddi4+0x2b8>
 8001490:	3902      	subs	r1, #2
 8001492:	4460      	add	r0, ip
 8001494:	1ac0      	subs	r0, r0, r3
 8001496:	fbb0 f3f7 	udiv	r3, r0, r7
 800149a:	fb07 0013 	mls	r0, r7, r3, r0
 800149e:	b2ad      	uxth	r5, r5
 80014a0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014a4:	fb03 f00e 	mul.w	r0, r3, lr
 80014a8:	42a8      	cmp	r0, r5
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x28a>
 80014ac:	eb1c 0505 	adds.w	r5, ip, r5
 80014b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80014b4:	d216      	bcs.n	80014e4 <__udivmoddi4+0x2b0>
 80014b6:	42a8      	cmp	r0, r5
 80014b8:	d914      	bls.n	80014e4 <__udivmoddi4+0x2b0>
 80014ba:	3b02      	subs	r3, #2
 80014bc:	4465      	add	r5, ip
 80014be:	1a28      	subs	r0, r5, r0
 80014c0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014c4:	e738      	b.n	8001338 <__udivmoddi4+0x104>
 80014c6:	4631      	mov	r1, r6
 80014c8:	4630      	mov	r0, r6
 80014ca:	e707      	b.n	80012dc <__udivmoddi4+0xa8>
 80014cc:	462f      	mov	r7, r5
 80014ce:	e6e4      	b.n	800129a <__udivmoddi4+0x66>
 80014d0:	4618      	mov	r0, r3
 80014d2:	e6f9      	b.n	80012c8 <__udivmoddi4+0x94>
 80014d4:	454b      	cmp	r3, r9
 80014d6:	d2a9      	bcs.n	800142c <__udivmoddi4+0x1f8>
 80014d8:	ebb9 0802 	subs.w	r8, r9, r2
 80014dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80014e0:	3801      	subs	r0, #1
 80014e2:	e7a3      	b.n	800142c <__udivmoddi4+0x1f8>
 80014e4:	4643      	mov	r3, r8
 80014e6:	e7ea      	b.n	80014be <__udivmoddi4+0x28a>
 80014e8:	4628      	mov	r0, r5
 80014ea:	e794      	b.n	8001416 <__udivmoddi4+0x1e2>
 80014ec:	4641      	mov	r1, r8
 80014ee:	e7d1      	b.n	8001494 <__udivmoddi4+0x260>
 80014f0:	46d0      	mov	r8, sl
 80014f2:	e77b      	b.n	80013ec <__udivmoddi4+0x1b8>
 80014f4:	4464      	add	r4, ip
 80014f6:	3802      	subs	r0, #2
 80014f8:	e747      	b.n	800138a <__udivmoddi4+0x156>
 80014fa:	3b02      	subs	r3, #2
 80014fc:	4465      	add	r5, ip
 80014fe:	e72f      	b.n	8001360 <__udivmoddi4+0x12c>
 8001500:	4608      	mov	r0, r1
 8001502:	e706      	b.n	8001312 <__udivmoddi4+0xde>
 8001504:	4631      	mov	r1, r6
 8001506:	e6e9      	b.n	80012dc <__udivmoddi4+0xa8>

08001508 <__aeabi_idiv0>:
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	889b      	ldrh	r3, [r3, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	88db      	ldrh	r3, [r3, #6]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
	if (total < 0)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da05      	bge.n	8001538 <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	891b      	ldrh	r3, [r3, #8]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4413      	add	r3, r2
 8001536:	617b      	str	r3, [r7, #20]

	if (total == 0)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e031      	b.n	80015a8 <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	88db      	ldrh	r3, [r3, #6]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	8912      	ldrh	r2, [r2, #8]
 8001550:	fbb3 f0f2 	udiv	r0, r3, r2
 8001554:	fb00 f202 	mul.w	r2, r0, r2
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
			* circ_buf->element_size);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	895b      	ldrh	r3, [r3, #10]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8001566:	440b      	add	r3, r1
 8001568:	613b      	str	r3, [r7, #16]

	if (elem)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	895b      	ldrh	r3, [r3, #10]
 8001574:	461a      	mov	r2, r3
 8001576:	6939      	ldr	r1, [r7, #16]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f00d f84b 	bl	800e614 <memcpy>

	if (!read_only) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d110      	bne.n	80015a6 <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	88db      	ldrh	r3, [r3, #6]
 8001588:	3301      	adds	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	88db      	ldrh	r3, [r3, #6]
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	429a      	cmp	r2, r3
 800159e:	db02      	blt.n	80015a6 <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	889b      	ldrh	r3, [r3, #4]
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	88db      	ldrh	r3, [r3, #6]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	891b      	ldrh	r3, [r3, #8]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	891b      	ldrh	r3, [r3, #8]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	db02      	blt.n	80015ec <__circ_gbuf_push+0x3c>
		return -1; // Full
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e02b      	b.n	8001644 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	889b      	ldrh	r3, [r3, #4]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	8912      	ldrh	r2, [r2, #8]
 80015f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80015fc:	fb00 f202 	mul.w	r2, r0, r2
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
			* circ_buf->element_size );
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	895b      	ldrh	r3, [r3, #10]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 800160e:	440b      	add	r3, r1
 8001610:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	895b      	ldrh	r3, [r3, #10]
 8001616:	461a      	mov	r2, r3
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f00c fffa 	bl	800e614 <memcpy>
	circ_buf->push_count++;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	891b      	ldrh	r3, [r3, #8]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	429a      	cmp	r2, r3
 800163a:	db02      	blt.n	8001642 <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	809a      	strh	r2, [r3, #4]
	return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <Relay_control>:
extern uint16_t DAC_tx_tmp_buffer[2];
extern float DDS_FTW;


//==============================================================================================
void Relay_control(uint8_t relay,uint8_t state){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
	int Relay_address=0;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
	if(relay<1 || relay>3 || state>1) return;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 80c3 	beq.w	80017ee <Relay_control+0x1a2>
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b03      	cmp	r3, #3
 800166c:	f200 80bf 	bhi.w	80017ee <Relay_control+0x1a2>
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	2b01      	cmp	r3, #1
 8001674:	f200 80bb 	bhi.w	80017ee <Relay_control+0x1a2>

	while(Relay_address<=0x5) // Set all OUTx to zero
 8001678:	e03c      	b.n	80016f4 <Relay_control+0xa8>
	{
		HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	2102      	movs	r1, #2
 8001688:	485b      	ldr	r0, [pc, #364]	; (80017f8 <Relay_control+0x1ac>)
 800168a:	f003 ff86 	bl	800559a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	105b      	asrs	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	2104      	movs	r1, #4
 800169e:	4856      	ldr	r0, [pc, #344]	; (80017f8 <Relay_control+0x1ac>)
 80016a0:	f003 ff7b 	bl	800559a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	109b      	asrs	r3, r3, #2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	2108      	movs	r1, #8
 80016b4:	4850      	ldr	r0, [pc, #320]	; (80017f8 <Relay_control+0x1ac>)
 80016b6:	f003 ff70 	bl	800559a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 80016ba:	2200      	movs	r2, #0
 80016bc:	2101      	movs	r1, #1
 80016be:	484e      	ldr	r0, [pc, #312]	; (80017f8 <Relay_control+0x1ac>)
 80016c0:	f003 ff6b 	bl	800559a <HAL_GPIO_WritePin>

		HAL_Delay(1); // wait 1ms
 80016c4:	2001      	movs	r0, #1
 80016c6:	f003 f903 	bl	80048d0 <HAL_Delay>
		HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	484a      	ldr	r0, [pc, #296]	; (80017fc <Relay_control+0x1b0>)
 80016d2:	f003 ff62 	bl	800559a <HAL_GPIO_WritePin>
		HAL_Delay(1); // wait 1ms
 80016d6:	2001      	movs	r0, #1
 80016d8:	f003 f8fa 	bl	80048d0 <HAL_Delay>
		HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e2:	4846      	ldr	r0, [pc, #280]	; (80017fc <Relay_control+0x1b0>)
 80016e4:	f003 ff59 	bl	800559a <HAL_GPIO_WritePin>
		HAL_Delay(1); // wait 1ms
 80016e8:	2001      	movs	r0, #1
 80016ea:	f003 f8f1 	bl	80048d0 <HAL_Delay>
		Relay_address++;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
	while(Relay_address<=0x5) // Set all OUTx to zero
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	ddbf      	ble.n	800167a <Relay_control+0x2e>
	}


	switch (relay)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d006      	beq.n	800170e <Relay_control+0xc2>
 8001700:	2b03      	cmp	r3, #3
 8001702:	dc1f      	bgt.n	8001744 <Relay_control+0xf8>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d014      	beq.n	8001732 <Relay_control+0xe6>
 8001708:	2b02      	cmp	r3, #2
 800170a:	d009      	beq.n	8001720 <Relay_control+0xd4>
 800170c:	e01a      	b.n	8001744 <Relay_control+0xf8>
	{
	case 3:
		if (state==1){
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <Relay_control+0xce>
			Relay_address=0x5; //OUT6
 8001714:	2305      	movs	r3, #5
 8001716:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x4; //OUT5
		} break;
 8001718:	e014      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x4; //OUT5
 800171a:	2304      	movs	r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
		} break;
 800171e:	e011      	b.n	8001744 <Relay_control+0xf8>
	case 2:
		if (state==1){
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <Relay_control+0xe0>
			Relay_address=0x3; //OUT4
 8001726:	2303      	movs	r3, #3
 8001728:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x2; //OUT3
		} break;
 800172a:	e00b      	b.n	8001744 <Relay_control+0xf8>
			Relay_address=0x2; //OUT3
 800172c:	2302      	movs	r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
		} break;
 8001730:	e008      	b.n	8001744 <Relay_control+0xf8>
	case 1:
		if (state==1){
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <Relay_control+0xf2>
			Relay_address=0x1; //OUT2
 8001738:	2301      	movs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
		}else{
			Relay_address=0x0; //OUT1
		} break;
 800173c:	e001      	b.n	8001742 <Relay_control+0xf6>
			Relay_address=0x0; //OUT1
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
		} break;
 8001742:	bf00      	nop
	}

	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin,  Relay_address & 0x1     );
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	2102      	movs	r1, #2
 8001752:	4829      	ldr	r0, [pc, #164]	; (80017f8 <Relay_control+0x1ac>)
 8001754:	f003 ff21 	bl	800559a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (Relay_address & 0x2) >>1);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	105b      	asrs	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	2104      	movs	r1, #4
 8001768:	4823      	ldr	r0, [pc, #140]	; (80017f8 <Relay_control+0x1ac>)
 800176a:	f003 ff16 	bl	800559a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (Relay_address & 0x4) >>2);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	109b      	asrs	r3, r3, #2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	2108      	movs	r1, #8
 800177e:	481e      	ldr	r0, [pc, #120]	; (80017f8 <Relay_control+0x1ac>)
 8001780:	f003 ff0b 	bl	800559a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 1); // LVL 1
 8001784:	2201      	movs	r2, #1
 8001786:	2101      	movs	r1, #1
 8001788:	481b      	ldr	r0, [pc, #108]	; (80017f8 <Relay_control+0x1ac>)
 800178a:	f003 ff06 	bl	800559a <HAL_GPIO_WritePin>

	HAL_Delay(1); // wait 1ms
 800178e:	2001      	movs	r0, #1
 8001790:	f003 f89e 	bl	80048d0 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179a:	4818      	ldr	r0, [pc, #96]	; (80017fc <Relay_control+0x1b0>)
 800179c:	f003 fefd 	bl	800559a <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 80017a0:	2001      	movs	r0, #1
 80017a2:	f003 f895 	bl	80048d0 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <Relay_control+0x1b0>)
 80017ae:	f003 fef4 	bl	800559a <HAL_GPIO_WritePin>
	HAL_Delay(50); // wait 50ms
 80017b2:	2032      	movs	r0, #50	; 0x32
 80017b4:	f003 f88c 	bl	80048d0 <HAL_Delay>

	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin, 0); // LVL 0
 80017b8:	2200      	movs	r2, #0
 80017ba:	2101      	movs	r1, #1
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <Relay_control+0x1ac>)
 80017be:	f003 feec 	bl	800559a <HAL_GPIO_WritePin>

	HAL_Delay(1); // wait 1ms
 80017c2:	2001      	movs	r0, #1
 80017c4:	f003 f884 	bl	80048d0 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 0); // Send strobe
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <Relay_control+0x1b0>)
 80017d0:	f003 fee3 	bl	800559a <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 80017d4:	2001      	movs	r0, #1
 80017d6:	f003 f87b 	bl	80048d0 <HAL_Delay>
	HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, 1); // End strobe
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e0:	4806      	ldr	r0, [pc, #24]	; (80017fc <Relay_control+0x1b0>)
 80017e2:	f003 feda 	bl	800559a <HAL_GPIO_WritePin>
	HAL_Delay(1); // wait 1ms
 80017e6:	2001      	movs	r0, #1
 80017e8:	f003 f872 	bl	80048d0 <HAL_Delay>
 80017ec:	e000      	b.n	80017f0 <Relay_control+0x1a4>
	if(relay<1 || relay>3 || state>1) return;
 80017ee:	bf00      	nop

}
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020800 	.word	0x40020800

08001800 <CPLD_control>:
//==============================================================================================



//==============================================================================================
void CPLD_control(FunctionalState state){
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
	uint8_t send_word=0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	75fb      	strb	r3, [r7, #23]

	// Calculate CPLD divider to expand DDS FTW to 0.1 ppm
	float dds_tmp_calc=DDS_clock_frequecny;
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <CPLD_control+0x10c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]
	dds_tmp_calc/=(float)0xFFFFFFFF; // 10MHz / 2^32 = 0.0023283 Hz DDS FTW resolution
 8001814:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7ff fb89 	bl	8000f30 <__aeabi_fdiv>
 800181e:	4603      	mov	r3, r0
 8001820:	60fb      	str	r3, [r7, #12]
	dds_tmp_calc=dds_tmp_calc/(DDS_target_frequecny/(float)1E7); // 0.0023283 Hz / (74.898214 Hz / 1E7) = 310.86 minimum CPLD divider
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <CPLD_control+0x110>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	493b      	ldr	r1, [pc, #236]	; (8001914 <CPLD_control+0x114>)
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fb81 	bl	8000f30 <__aeabi_fdiv>
 800182e:	4603      	mov	r3, r0
 8001830:	4619      	mov	r1, r3
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f7ff fb7c 	bl	8000f30 <__aeabi_fdiv>
 8001838:	4603      	mov	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<0x0F; i++) // find CPLD tuning word
 800183c:	2301      	movs	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	e017      	b.n	8001872 <CPLD_control+0x72>
	{
		if(((1<<i)+1) > dds_tmp_calc)
 8001842:	2201      	movs	r2, #1
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	3301      	adds	r3, #1
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fa67 	bl	8000d20 <__aeabi_i2f>
 8001852:	4603      	mov	r3, r0
 8001854:	4619      	mov	r1, r3
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff fc54 	bl	8001104 <__aeabi_fcmplt>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d004      	beq.n	800186c <CPLD_control+0x6c>
		{
			CPLD_WORD=i;
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <CPLD_control+0x118>)
 8001868:	701a      	strb	r2, [r3, #0]
			break;
 800186a:	e005      	b.n	8001878 <CPLD_control+0x78>
	for(int i=1; i<0x0F; i++) // find CPLD tuning word
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	3301      	adds	r3, #1
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b0e      	cmp	r3, #14
 8001876:	dde4      	ble.n	8001842 <CPLD_control+0x42>
		}
	}

	if(state==CPLD_ON_STATE)send_word=CPLD_WORD;
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d102      	bne.n	8001884 <CPLD_control+0x84>
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <CPLD_control+0x118>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(Control_bus_0_GPIO_Port, Control_bus_0_Pin,  send_word & 0x1     );
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	2101      	movs	r1, #1
 8001890:	4822      	ldr	r0, [pc, #136]	; (800191c <CPLD_control+0x11c>)
 8001892:	f003 fe82 	bl	800559a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_1_GPIO_Port, Control_bus_1_Pin, (send_word & 0x2) >>1);
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	105b      	asrs	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	2102      	movs	r1, #2
 80018a6:	481d      	ldr	r0, [pc, #116]	; (800191c <CPLD_control+0x11c>)
 80018a8:	f003 fe77 	bl	800559a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_2_GPIO_Port, Control_bus_2_Pin, (send_word & 0x4) >>2);
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	109b      	asrs	r3, r3, #2
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	2104      	movs	r1, #4
 80018bc:	4817      	ldr	r0, [pc, #92]	; (800191c <CPLD_control+0x11c>)
 80018be:	f003 fe6c 	bl	800559a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Control_bus_3_GPIO_Port, Control_bus_3_Pin, (send_word & 0x8) >>3);
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	10db      	asrs	r3, r3, #3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	2108      	movs	r1, #8
 80018d2:	4812      	ldr	r0, [pc, #72]	; (800191c <CPLD_control+0x11c>)
 80018d4:	f003 fe61 	bl	800559a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_SET); // Send strobe
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018de:	4810      	ldr	r0, [pc, #64]	; (8001920 <CPLD_control+0x120>)
 80018e0:	f003 fe5b 	bl	800559a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <CPLD_control+0x120>)
 80018ec:	f003 fe55 	bl	800559a <HAL_GPIO_WritePin>

	if(state==CPLD_OFF_STATE)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d103      	bne.n	80018fe <CPLD_control+0xfe>
	{
		cfg.LDACMODE=0;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <CPLD_control+0x124>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		cfg.LDACMODE=1;
	}
}
 80018fc:	e002      	b.n	8001904 <CPLD_control+0x104>
		cfg.LDACMODE=1;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <CPLD_control+0x124>)
 8001900:	2201      	movs	r2, #1
 8001902:	709a      	strb	r2, [r3, #2]
}
 8001904:	bf00      	nop
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000738 	.word	0x20000738
 8001910:	20000c54 	.word	0x20000c54
 8001914:	4b189680 	.word	0x4b189680
 8001918:	20000c4e 	.word	0x20000c4e
 800191c:	40020000 	.word	0x40020000
 8001920:	40020800 	.word	0x40020800
 8001924:	20000c44 	.word	0x20000c44

08001928 <DAC_Write>:



//==============================================================================================
void DAC_Write(uint32_t value)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <DAC_Write+0x6c>)
 8001932:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001936:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001940:	f023 030f 	bic.w	r3, r3, #15
 8001944:	4a13      	ldr	r2, [pc, #76]	; (8001994 <DAC_Write+0x6c>)
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	4413      	add	r3, r2
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <DAC_Write+0x6c>)
 800194c:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <DAC_Write+0x6c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0c1b      	lsrs	r3, r3, #16
 8001954:	b29a      	uxth	r2, r3
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <DAC_Write+0x70>)
 8001958:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <DAC_Write+0x6c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <DAC_Write+0x70>)
 8001962:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	2110      	movs	r1, #16
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <DAC_Write+0x74>)
 800196a:	f003 fe16 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 800196e:	2302      	movs	r3, #2
 8001970:	2202      	movs	r2, #2
 8001972:	4909      	ldr	r1, [pc, #36]	; (8001998 <DAC_Write+0x70>)
 8001974:	480a      	ldr	r0, [pc, #40]	; (80019a0 <DAC_Write+0x78>)
 8001976:	f006 fd15 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	2110      	movs	r1, #16
 800197e:	4807      	ldr	r0, [pc, #28]	; (800199c <DAC_Write+0x74>)
 8001980:	f003 fe0b 	bl	800559a <HAL_GPIO_WritePin>
	DAC_code=value;
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <DAC_Write+0x7c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000c3c 	.word	0x20000c3c
 8001998:	20000c40 	.word	0x20000c40
 800199c:	40020000 	.word	0x40020000
 80019a0:	20000c74 	.word	0x20000c74
 80019a4:	20000c6c 	.word	0x20000c6c

080019a8 <DAC_Write_FAST>:

//==============================================================================================
void DAC_Write_FAST(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2110      	movs	r1, #16
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <DAC_Write_FAST+0x28>)
 80019b2:	f003 fdf2 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 80019b6:	2302      	movs	r3, #2
 80019b8:	2202      	movs	r2, #2
 80019ba:	4906      	ldr	r1, [pc, #24]	; (80019d4 <DAC_Write_FAST+0x2c>)
 80019bc:	4806      	ldr	r0, [pc, #24]	; (80019d8 <DAC_Write_FAST+0x30>)
 80019be:	f006 fcf1 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2110      	movs	r1, #16
 80019c6:	4802      	ldr	r0, [pc, #8]	; (80019d0 <DAC_Write_FAST+0x28>)
 80019c8:	f003 fde7 	bl	800559a <HAL_GPIO_WritePin>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40020000 	.word	0x40020000
 80019d4:	20000c40 	.word	0x20000c40
 80019d8:	20000c74 	.word	0x20000c74

080019dc <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

	DAC_tx_buffer=0x02000000; // Write CONFIG1
 80019e0:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <DAC_SendInit+0xfc>)
 80019e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e6:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 80019e8:	4b3c      	ldr	r3, [pc, #240]	; (8001adc <DAC_SendInit+0x100>)
 80019ea:	7a1b      	ldrb	r3, [r3, #8]
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	f003 0210 	and.w	r2, r3, #16
 80019f2:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <DAC_SendInit+0xfc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <DAC_SendInit+0xfc>)
 80019fa:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x06)<<6;
 80019fc:	4b37      	ldr	r3, [pc, #220]	; (8001adc <DAC_SendInit+0x100>)
 80019fe:	79db      	ldrb	r3, [r3, #7]
 8001a00:	019b      	lsls	r3, r3, #6
 8001a02:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8001a06:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a32      	ldr	r2, [pc, #200]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a0e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 8001a10:	4b32      	ldr	r3, [pc, #200]	; (8001adc <DAC_SendInit+0x100>)
 8001a12:	799b      	ldrb	r3, [r3, #6]
 8001a14:	029b      	lsls	r3, r3, #10
 8001a16:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a2d      	ldr	r2, [pc, #180]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a22:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <DAC_SendInit+0x100>)
 8001a26:	795b      	ldrb	r3, [r3, #5]
 8001a28:	02db      	lsls	r3, r3, #11
 8001a2a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a36:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 8001a38:	4b28      	ldr	r3, [pc, #160]	; (8001adc <DAC_SendInit+0x100>)
 8001a3a:	791b      	ldrb	r3, [r3, #4]
 8001a3c:	031b      	lsls	r3, r3, #12
 8001a3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a4a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <DAC_SendInit+0x100>)
 8001a4e:	78db      	ldrb	r3, [r3, #3]
 8001a50:	035b      	lsls	r3, r3, #13
 8001a52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a5e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <DAC_SendInit+0x100>)
 8001a62:	789b      	ldrb	r3, [r3, #2]
 8001a64:	039b      	lsls	r3, r3, #14
 8001a66:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a72:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <DAC_SendInit+0x100>)
 8001a76:	785b      	ldrb	r3, [r3, #1]
 8001a78:	049b      	lsls	r3, r3, #18
 8001a7a:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a86:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <DAC_SendInit+0x100>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	05db      	lsls	r3, r3, #23
 8001a8e:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a9a:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0c1b      	lsrs	r3, r3, #16
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <DAC_SendInit+0x104>)
 8001aa6:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <DAC_SendInit+0xfc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <DAC_SendInit+0x104>)
 8001ab0:	805a      	strh	r2, [r3, #2]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2110      	movs	r1, #16
 8001ab6:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <DAC_SendInit+0x108>)
 8001ab8:	f003 fd6f 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 8001abc:	2305      	movs	r3, #5
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <DAC_SendInit+0x104>)
 8001ac2:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <DAC_SendInit+0x10c>)
 8001ac4:	f006 fc6e 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2110      	movs	r1, #16
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <DAC_SendInit+0x108>)
 8001ace:	f003 fd64 	bl	800559a <HAL_GPIO_WritePin>

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000c3c 	.word	0x20000c3c
 8001adc:	20000c44 	.word	0x20000c44
 8001ae0:	20000c40 	.word	0x20000c40
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	20000c74 	.word	0x20000c74

08001aec <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
	uint32_t DAC_tx_buffer;
	uint16_t DAC_tx_tmp_buffer[2];

	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	813b      	strh	r3, [r7, #8]
 8001af6:	2300      	movs	r3, #0
 8001af8:	817b      	strh	r3, [r7, #10]
 8001afa:	2300      	movs	r3, #0
 8001afc:	82fb      	strh	r3, [r7, #22]

	//CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal

	cfg.EN_TMP_CAL=1;
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <DAC_TEMP_CAL+0xd0>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
	DAC_SendInit();
 8001b04:	f7ff ff6a 	bl	80019dc <DAC_SendInit>

	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <DAC_TEMP_CAL+0xd4>)
 8001b0a:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	0c1b      	lsrs	r3, r3, #16
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	81bb      	strh	r3, [r7, #12]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	81fb      	strh	r3, [r7, #14]

	DAC_tx_buffer=0x85000000; // read status register
 8001b1a:	f04f 4305 	mov.w	r3, #2231369728	; 0x85000000
 8001b1e:	613b      	str	r3, [r7, #16]

	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	0c1b      	lsrs	r3, r3, #16
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	80bb      	strh	r3, [r7, #4]
	DAC_tx_tmp_buffer2[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2110      	movs	r1, #16
 8001b32:	4824      	ldr	r0, [pc, #144]	; (8001bc4 <DAC_TEMP_CAL+0xd8>)
 8001b34:	f003 fd31 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001b38:	f107 010c 	add.w	r1, r7, #12
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4821      	ldr	r0, [pc, #132]	; (8001bc8 <DAC_TEMP_CAL+0xdc>)
 8001b42:	f006 fc2f 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b46:	2201      	movs	r2, #1
 8001b48:	2110      	movs	r1, #16
 8001b4a:	481e      	ldr	r0, [pc, #120]	; (8001bc4 <DAC_TEMP_CAL+0xd8>)
 8001b4c:	f003 fd25 	bl	800559a <HAL_GPIO_WritePin>

	do{ // Check complete flag
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2110      	movs	r1, #16
 8001b54:	481b      	ldr	r0, [pc, #108]	; (8001bc4 <DAC_TEMP_CAL+0xd8>)
 8001b56:	f003 fd20 	bl	800559a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 8001b5a:	1d39      	adds	r1, r7, #4
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4819      	ldr	r0, [pc, #100]	; (8001bc8 <DAC_TEMP_CAL+0xdc>)
 8001b62:	f006 fc1f 	bl	80083a4 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2110      	movs	r1, #16
 8001b6a:	4816      	ldr	r0, [pc, #88]	; (8001bc4 <DAC_TEMP_CAL+0xd8>)
 8001b6c:	f003 fd15 	bl	800559a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2110      	movs	r1, #16
 8001b74:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <DAC_TEMP_CAL+0xd8>)
 8001b76:	f003 fd10 	bl	800559a <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 2, 2);
 8001b7a:	f107 0108 	add.w	r1, r7, #8
 8001b7e:	2302      	movs	r3, #2
 8001b80:	2202      	movs	r2, #2
 8001b82:	4811      	ldr	r0, [pc, #68]	; (8001bc8 <DAC_TEMP_CAL+0xdc>)
 8001b84:	f006 fd4a 	bl	800861c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <DAC_TEMP_CAL+0xd8>)
 8001b8e:	f003 fd04 	bl	800559a <HAL_GPIO_WritePin>
		ALM=(spi_receive[1] & 0x1000) >> 12;
 8001b92:	897b      	ldrh	r3, [r7, #10]
 8001b94:	131b      	asrs	r3, r3, #12
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	82fb      	strh	r3, [r7, #22]
		if(ALM!=1)HAL_Delay(10);
 8001b9e:	8afb      	ldrh	r3, [r7, #22]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d002      	beq.n	8001baa <DAC_TEMP_CAL+0xbe>
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f002 fe93 	bl	80048d0 <HAL_Delay>
	}while(ALM!=1);
 8001baa:	8afb      	ldrh	r3, [r7, #22]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d1cf      	bne.n	8001b50 <DAC_TEMP_CAL+0x64>
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000c44 	.word	0x20000c44
 8001bc0:	04000100 	.word	0x04000100
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	20000c74 	.word	0x20000c74

08001bcc <DDS_Calculation>:

void DDS_Calculation(void)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
	float hw_limit=1000; // 1kHz hardware optimized limit
 8001bd2:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <DDS_Calculation+0x1f0>)
 8001bd4:	613b      	str	r3, [r7, #16]
	float dac_counts=DAC_CODE_TOP-1;
 8001bd6:	4b7a      	ldr	r3, [pc, #488]	; (8001dc0 <DDS_Calculation+0x1f4>)
 8001bd8:	60fb      	str	r3, [r7, #12]
	float corr_coeff;
	float dac_tmp=DAC_code;
 8001bda:	4b7a      	ldr	r3, [pc, #488]	; (8001dc4 <DDS_Calculation+0x1f8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f89a 	bl	8000d18 <__aeabi_ui2f>
 8001be4:	4603      	mov	r3, r0
 8001be6:	60bb      	str	r3, [r7, #8]
	float second_left;
	uint32_t codes_left;

	// Linearity correction
	corr_coeff=corr_coeff_1*dac_tmp*dac_tmp;
 8001be8:	4b77      	ldr	r3, [pc, #476]	; (8001dc8 <DDS_Calculation+0x1fc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f8ea 	bl	8000dc8 <__aeabi_fmul>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	68b8      	ldr	r0, [r7, #8]
 8001bfa:	f7ff f8e5 	bl	8000dc8 <__aeabi_fmul>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_2*dac_tmp;
 8001c02:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <DDS_Calculation+0x200>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff f8dd 	bl	8000dc8 <__aeabi_fmul>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4619      	mov	r1, r3
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7fe ffd0 	bl	8000bb8 <__addsf3>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	607b      	str	r3, [r7, #4]
	corr_coeff+=corr_coeff_3;
 8001c1c:	4b6c      	ldr	r3, [pc, #432]	; (8001dd0 <DDS_Calculation+0x204>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe ffc8 	bl	8000bb8 <__addsf3>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	607b      	str	r3, [r7, #4]

	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed); // 1048575 / (14V / 0.01V/s) = 74.898214 Hz
 8001c2c:	4b69      	ldr	r3, [pc, #420]	; (8001dd4 <DDS_Calculation+0x208>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a69      	ldr	r2, [pc, #420]	; (8001dd8 <DDS_Calculation+0x20c>)
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f97a 	bl	8000f30 <__aeabi_fdiv>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f7ff f975 	bl	8000f30 <__aeabi_fdiv>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b64      	ldr	r3, [pc, #400]	; (8001ddc <DDS_Calculation+0x210>)
 8001c4c:	601a      	str	r2, [r3, #0]

	if(DDS_target_frequecny>hw_limit)
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <DDS_Calculation+0x210>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4619      	mov	r1, r3
 8001c54:	6938      	ldr	r0, [r7, #16]
 8001c56:	f7ff fa55 	bl	8001104 <__aeabi_fcmplt>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d02e      	beq.n	8001cbe <DDS_Calculation+0xf2>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 8001c60:	4b5e      	ldr	r3, [pc, #376]	; (8001ddc <DDS_Calculation+0x210>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6939      	ldr	r1, [r7, #16]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f962 	bl	8000f30 <__aeabi_fdiv>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fa70 	bl	8001154 <__aeabi_f2uiz>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4a5a      	ldr	r2, [pc, #360]	; (8001de0 <DDS_Calculation+0x214>)
 8001c78:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001c7a:	4b56      	ldr	r3, [pc, #344]	; (8001dd4 <DDS_Calculation+0x208>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a56      	ldr	r2, [pc, #344]	; (8001dd8 <DDS_Calculation+0x20c>)
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f953 	bl	8000f30 <__aeabi_fdiv>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f7ff f94e 	bl	8000f30 <__aeabi_fdiv>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461a      	mov	r2, r3
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <DDS_Calculation+0x210>)
 8001c9a:	601a      	str	r2, [r3, #0]
		DDS_target_frequecny/=(float)DDS_target_multipiller;
 8001c9c:	4b4f      	ldr	r3, [pc, #316]	; (8001ddc <DDS_Calculation+0x210>)
 8001c9e:	681c      	ldr	r4, [r3, #0]
 8001ca0:	4b4f      	ldr	r3, [pc, #316]	; (8001de0 <DDS_Calculation+0x214>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f837 	bl	8000d18 <__aeabi_ui2f>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4619      	mov	r1, r3
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f7ff f93e 	bl	8000f30 <__aeabi_fdiv>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b48      	ldr	r3, [pc, #288]	; (8001ddc <DDS_Calculation+0x210>)
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e002      	b.n	8001cc4 <DDS_Calculation+0xf8>
	} else DDS_target_multipiller = 1;
 8001cbe:	4b48      	ldr	r3, [pc, #288]	; (8001de0 <DDS_Calculation+0x214>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

	DDS_FTW=(((DDS_target_frequecny/corr_coeff)*((1<<CPLD_WORD)+1))/DDS_clock_frequecny)*(float)0xFFFFFFFF;
 8001cc4:	4b45      	ldr	r3, [pc, #276]	; (8001ddc <DDS_Calculation+0x210>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f930 	bl	8000f30 <__aeabi_fdiv>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461c      	mov	r4, r3
 8001cd4:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <DDS_Calculation+0x218>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2301      	movs	r3, #1
 8001cdc:	4093      	lsls	r3, r2
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f81d 	bl	8000d20 <__aeabi_i2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff f86c 	bl	8000dc8 <__aeabi_fmul>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <DDS_Calculation+0x21c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f7ff f918 	bl	8000f30 <__aeabi_fdiv>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f85e 	bl	8000dc8 <__aeabi_fmul>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <DDS_Calculation+0x220>)
 8001d12:	601a      	str	r2, [r3, #0]

	if(DAC_code_direction)
 8001d14:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <DDS_Calculation+0x224>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <DDS_Calculation+0x160>
	{
		codes_left=0xFFFFF-DAC_code;
 8001d1c:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <DDS_Calculation+0x1f8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8001d24:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e002      	b.n	8001d32 <DDS_Calculation+0x166>
	}
	else
	{
		codes_left=DAC_code;
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <DDS_Calculation+0x1f8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	617b      	str	r3, [r7, #20]
	}

	second_left=codes_left/DDS_target_multipiller/DDS_target_frequecny;
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <DDS_Calculation+0x214>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe ffeb 	bl	8000d18 <__aeabi_ui2f>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <DDS_Calculation+0x210>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff f8f0 	bl	8000f30 <__aeabi_fdiv>
 8001d50:	4603      	mov	r3, r0
 8001d52:	603b      	str	r3, [r7, #0]
	eta_second=(uint32_t)second_left % 60;
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	f7ff f9fd 	bl	8001154 <__aeabi_f2uiz>
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <DDS_Calculation+0x228>)
 8001d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8001d62:	095a      	lsrs	r2, r3, #5
 8001d64:	4613      	mov	r3, r2
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	1aca      	subs	r2, r1, r3
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <DDS_Calculation+0x22c>)
 8001d72:	701a      	strb	r2, [r3, #0]
	eta_minute=(uint32_t)(second_left / 60) % 60;
 8001d74:	4921      	ldr	r1, [pc, #132]	; (8001dfc <DDS_Calculation+0x230>)
 8001d76:	6838      	ldr	r0, [r7, #0]
 8001d78:	f7ff f8da 	bl	8000f30 <__aeabi_fdiv>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f9e8 	bl	8001154 <__aeabi_f2uiz>
 8001d84:	4601      	mov	r1, r0
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <DDS_Calculation+0x228>)
 8001d88:	fba3 2301 	umull	r2, r3, r3, r1
 8001d8c:	095a      	lsrs	r2, r3, #5
 8001d8e:	4613      	mov	r3, r2
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	1aca      	subs	r2, r1, r3
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <DDS_Calculation+0x234>)
 8001d9c:	701a      	strb	r2, [r3, #0]
	eta_hours=(uint32_t) second_left / 3600;
 8001d9e:	6838      	ldr	r0, [r7, #0]
 8001da0:	f7ff f9d8 	bl	8001154 <__aeabi_f2uiz>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <DDS_Calculation+0x238>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	0adb      	lsrs	r3, r3, #11
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <DDS_Calculation+0x23c>)
 8001db2:	701a      	strb	r2, [r3, #0]
}
 8001db4:	bf00      	nop
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd90      	pop	{r4, r7, pc}
 8001dbc:	447a0000 	.word	0x447a0000
 8001dc0:	497fffe0 	.word	0x497fffe0
 8001dc4:	20000c6c 	.word	0x20000c6c
 8001dc8:	20000aac 	.word	0x20000aac
 8001dcc:	20000ab0 	.word	0x20000ab0
 8001dd0:	20000ab4 	.word	0x20000ab4
 8001dd4:	20000c5c 	.word	0x20000c5c
 8001dd8:	20000c58 	.word	0x20000c58
 8001ddc:	20000c54 	.word	0x20000c54
 8001de0:	20000734 	.word	0x20000734
 8001de4:	20000c4e 	.word	0x20000c4e
 8001de8:	20000738 	.word	0x20000738
 8001dec:	20000c50 	.word	0x20000c50
 8001df0:	20000c70 	.word	0x20000c70
 8001df4:	88888889 	.word	0x88888889
 8001df8:	20000c1a 	.word	0x20000c1a
 8001dfc:	42700000 	.word	0x42700000
 8001e00:	20000c19 	.word	0x20000c19
 8001e04:	91a2b3c5 	.word	0x91a2b3c5
 8001e08:	20000c18 	.word	0x20000c18

08001e0c <DDS_Init>:

//==============================================================================================
void DDS_Init(void)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];
	DDS_Calculation();
 8001e12:	f7ff fedb 	bl	8001bcc <DDS_Calculation>

	HAL_Delay(100);
 8001e16:	2064      	movs	r0, #100	; 0x64
 8001e18:	f002 fd5a 	bl	80048d0 <HAL_Delay>

	//CONTROL REGISTER WRITE SLEEP =1 ,	RESET = 1,	CLR = 1
	DDS_tx_buffer[0]=0xC000; // Control DDS (D15=1, D14=1)
 8001e1c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e20:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=0x7 << 11; //  SLEEP = 1 , RESET = 1,	CLR = 1
 8001e22:	88bb      	ldrh	r3, [r7, #4]
 8001e24:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e32:	4861      	ldr	r0, [pc, #388]	; (8001fb8 <DDS_Init+0x1ac>)
 8001e34:	f003 fbb1 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e38:	1d39      	adds	r1, r7, #4
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	485f      	ldr	r0, [pc, #380]	; (8001fbc <DDS_Init+0x1b0>)
 8001e40:	f006 fab0 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4a:	485b      	ldr	r0, [pc, #364]	; (8001fb8 <DDS_Init+0x1ac>)
 8001e4c:	f003 fba5 	bl	800559a <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001e50:	2064      	movs	r0, #100	; 0x64
 8001e52:	f002 fd3d 	bl	80048d0 <HAL_Delay>
	//DO NOT !!! SET SYNC AND/OR SELSRC TO 1

	//WRITE INITIAL DATA

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001e56:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001e5a:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001e5c:	88bc      	ldrh	r4, [r7, #4]
 8001e5e:	4b58      	ldr	r3, [pc, #352]	; (8001fc0 <DDS_Init+0x1b4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f976 	bl	8001154 <__aeabi_f2uiz>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	0e1b      	lsrs	r3, r3, #24
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	4423      	add	r3, r4
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7a:	484f      	ldr	r0, [pc, #316]	; (8001fb8 <DDS_Init+0x1ac>)
 8001e7c:	f003 fb8d 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001e80:	1d39      	adds	r1, r7, #4
 8001e82:	2305      	movs	r3, #5
 8001e84:	2201      	movs	r2, #1
 8001e86:	484d      	ldr	r0, [pc, #308]	; (8001fbc <DDS_Init+0x1b0>)
 8001e88:	f006 fa8c 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e92:	4849      	ldr	r0, [pc, #292]	; (8001fb8 <DDS_Init+0x1ac>)
 8001e94:	f003 fb81 	bl	800559a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001e98:	2032      	movs	r0, #50	; 0x32
 8001e9a:	f002 fd19 	bl	80048d0 <HAL_Delay>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 8001e9e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001ea2:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001ea4:	88bc      	ldrh	r4, [r7, #4]
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <DDS_Init+0x1b4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f952 	bl	8001154 <__aeabi_f2uiz>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4423      	add	r3, r4
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec6:	483c      	ldr	r0, [pc, #240]	; (8001fb8 <DDS_Init+0x1ac>)
 8001ec8:	f003 fb67 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ecc:	1d39      	adds	r1, r7, #4
 8001ece:	2305      	movs	r3, #5
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	483a      	ldr	r0, [pc, #232]	; (8001fbc <DDS_Init+0x1b0>)
 8001ed4:	f006 fa66 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ede:	4836      	ldr	r0, [pc, #216]	; (8001fb8 <DDS_Init+0x1ac>)
 8001ee0:	f003 fb5b 	bl	800559a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001ee4:	2032      	movs	r0, #50	; 0x32
 8001ee6:	f002 fcf3 	bl	80048d0 <HAL_Delay>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8001eea:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001eee:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001ef0:	88bc      	ldrh	r4, [r7, #4]
 8001ef2:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <DDS_Init+0x1b4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f92c 	bl	8001154 <__aeabi_f2uiz>
 8001efc:	4603      	mov	r3, r0
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4423      	add	r3, r4
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f12:	4829      	ldr	r0, [pc, #164]	; (8001fb8 <DDS_Init+0x1ac>)
 8001f14:	f003 fb41 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f18:	1d39      	adds	r1, r7, #4
 8001f1a:	2305      	movs	r3, #5
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4827      	ldr	r0, [pc, #156]	; (8001fbc <DDS_Init+0x1b0>)
 8001f20:	f006 fa40 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f24:	2201      	movs	r2, #1
 8001f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f2a:	4823      	ldr	r0, [pc, #140]	; (8001fb8 <DDS_Init+0x1ac>)
 8001f2c:	f003 fb35 	bl	800559a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001f30:	2032      	movs	r0, #50	; 0x32
 8001f32:	f002 fccd 	bl	80048d0 <HAL_Delay>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8001f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3a:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 8001f3c:	88bc      	ldrh	r4, [r7, #4]
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <DDS_Init+0x1b4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f906 	bl	8001154 <__aeabi_f2uiz>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4423      	add	r3, r4
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	4816      	ldr	r0, [pc, #88]	; (8001fb8 <DDS_Init+0x1ac>)
 8001f5e:	f003 fb1c 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f62:	1d39      	adds	r1, r7, #4
 8001f64:	2305      	movs	r3, #5
 8001f66:	2201      	movs	r2, #1
 8001f68:	4814      	ldr	r0, [pc, #80]	; (8001fbc <DDS_Init+0x1b0>)
 8001f6a:	f006 fa1b 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f74:	4810      	ldr	r0, [pc, #64]	; (8001fb8 <DDS_Init+0x1ac>)
 8001f76:	f003 fb10 	bl	800559a <HAL_GPIO_WritePin>


	HAL_Delay(100);
 8001f7a:	2064      	movs	r0, #100	; 0x64
 8001f7c:	f002 fca8 	bl	80048d0 <HAL_Delay>

	// CONTROL REGISTER WRITE, 	SLEEP = 0,	RESET = 0, CLR = 0

	// Control DDS (D15=1, D14=1)
	DDS_tx_buffer[0]=0xC000; // Exit DAC from Sleep+Reset mode
 8001f80:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f84:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f8c:	480a      	ldr	r0, [pc, #40]	; (8001fb8 <DDS_Init+0x1ac>)
 8001f8e:	f003 fb04 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001f92:	1d39      	adds	r1, r7, #4
 8001f94:	2305      	movs	r3, #5
 8001f96:	2201      	movs	r2, #1
 8001f98:	4808      	ldr	r0, [pc, #32]	; (8001fbc <DDS_Init+0x1b0>)
 8001f9a:	f006 fa03 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa4:	4804      	ldr	r0, [pc, #16]	; (8001fb8 <DDS_Init+0x1ac>)
 8001fa6:	f003 faf8 	bl	800559a <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001faa:	2064      	movs	r0, #100	; 0x64
 8001fac:	f002 fc90 	bl	80048d0 <HAL_Delay>

}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	20000ccc 	.word	0x20000ccc
 8001fc0:	20000c50 	.word	0x20000c50

08001fc4 <DDS_Update>:

//==============================================================================================
void DDS_Update(void)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[1];

	// Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[0]=0x3300;
 8001fca:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001fce:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001fd0:	88bc      	ldrh	r4, [r7, #4]
 8001fd2:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <DDS_Update+0x120>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f8bc 	bl	8001154 <__aeabi_f2uiz>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	0e1b      	lsrs	r3, r3, #24
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4423      	add	r3, r4
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fee:	483e      	ldr	r0, [pc, #248]	; (80020e8 <DDS_Update+0x124>)
 8001ff0:	f003 fad3 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8001ff4:	1d39      	adds	r1, r7, #4
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	483c      	ldr	r0, [pc, #240]	; (80020ec <DDS_Update+0x128>)
 8001ffc:	f006 f9d2 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002000:	2201      	movs	r2, #1
 8002002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002006:	4838      	ldr	r0, [pc, #224]	; (80020e8 <DDS_Update+0x124>)
 8002008:	f003 fac7 	bl	800559a <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, L MSBs
	DDS_tx_buffer[0]=0x2200;
 800200c:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8002010:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8002012:	88bc      	ldrh	r4, [r7, #4]
 8002014:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <DDS_Update+0x120>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f89b 	bl	8001154 <__aeabi_f2uiz>
 800201e:	4603      	mov	r3, r0
 8002020:	0c1b      	lsrs	r3, r3, #16
 8002022:	b29b      	uxth	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	b29b      	uxth	r3, r3
 8002028:	4423      	add	r3, r4
 800202a:	b29b      	uxth	r3, r3
 800202c:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002034:	482c      	ldr	r0, [pc, #176]	; (80020e8 <DDS_Update+0x124>)
 8002036:	f003 fab0 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 800203a:	1d39      	adds	r1, r7, #4
 800203c:	2305      	movs	r3, #5
 800203e:	2201      	movs	r2, #1
 8002040:	482a      	ldr	r0, [pc, #168]	; (80020ec <DDS_Update+0x128>)
 8002042:	f006 f9af 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002046:	2201      	movs	r2, #1
 8002048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800204c:	4826      	ldr	r0, [pc, #152]	; (80020e8 <DDS_Update+0x124>)
 800204e:	f003 faa4 	bl	800559a <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, H LSBs
	DDS_tx_buffer[0]=0x3100;
 8002052:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8002056:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8002058:	88bc      	ldrh	r4, [r7, #4]
 800205a:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <DDS_Update+0x120>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f878 	bl	8001154 <__aeabi_f2uiz>
 8002064:	4603      	mov	r3, r0
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	b29b      	uxth	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	b29b      	uxth	r3, r3
 800206e:	4423      	add	r3, r4
 8002070:	b29b      	uxth	r3, r3
 8002072:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800207a:	481b      	ldr	r0, [pc, #108]	; (80020e8 <DDS_Update+0x124>)
 800207c:	f003 fa8d 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 8002080:	1d39      	adds	r1, r7, #4
 8002082:	2305      	movs	r3, #5
 8002084:	2201      	movs	r2, #1
 8002086:	4819      	ldr	r0, [pc, #100]	; (80020ec <DDS_Update+0x128>)
 8002088:	f006 f98c 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002092:	4815      	ldr	r0, [pc, #84]	; (80020e8 <DDS_Update+0x124>)
 8002094:	f003 fa81 	bl	800559a <HAL_GPIO_WritePin>

	// Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[0]=0x2000;
 8002098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209c:	80bb      	strh	r3, [r7, #4]
	DDS_tx_buffer[0]+=((uint32_t)DDS_FTW & 0xFF);
 800209e:	88bc      	ldrh	r4, [r7, #4]
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <DDS_Update+0x120>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff f855 	bl	8001154 <__aeabi_f2uiz>
 80020aa:	4603      	mov	r3, r0
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4423      	add	r3, r4
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020be:	480a      	ldr	r0, [pc, #40]	; (80020e8 <DDS_Update+0x124>)
 80020c0:	f003 fa6b 	bl	800559a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
 80020c4:	1d39      	adds	r1, r7, #4
 80020c6:	2305      	movs	r3, #5
 80020c8:	2201      	movs	r2, #1
 80020ca:	4808      	ldr	r0, [pc, #32]	; (80020ec <DDS_Update+0x128>)
 80020cc:	f006 f96a 	bl	80083a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80020d0:	2201      	movs	r2, #1
 80020d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020d6:	4804      	ldr	r0, [pc, #16]	; (80020e8 <DDS_Update+0x124>)
 80020d8:	f003 fa5f 	bl	800559a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,5);
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
*/
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd90      	pop	{r4, r7, pc}
 80020e4:	20000c50 	.word	0x20000c50
 80020e8:	40020400 	.word	0x40020400
 80020ec:	20000ccc 	.word	0x20000ccc

080020f0 <LcdSend>:
unsigned char LcdCache[LCD_CACHSIZE];   // Фреймбуфер
unsigned int LcdCacheIdx = 0;   // Текущий адрес во фреймбуфере


void LcdSend(uint8_t data, uint8_t cmd) //Sends data to display controller
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	460a      	mov	r2, r1
 80020fa:	71fb      	strb	r3, [r7, #7]
 80020fc:	4613      	mov	r3, r2
 80020fe:	71bb      	strb	r3, [r7, #6]
  uint8_t sdata = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]

  lcd44780_RW_0;
 8002104:	2200      	movs	r2, #0
 8002106:	2102      	movs	r1, #2
 8002108:	4811      	ldr	r0, [pc, #68]	; (8002150 <LcdSend+0x60>)
 800210a:	f003 fa46 	bl	800559a <HAL_GPIO_WritePin>

  sdata = data;
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	73fb      	strb	r3, [r7, #15]
  if(cmd == lcd_CMD)
 8002112:	79bb      	ldrb	r3, [r7, #6]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <LcdSend+0x34>
  {
	  lcd44780_RS_0;
 8002118:	2201      	movs	r2, #1
 800211a:	2101      	movs	r1, #1
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <LcdSend+0x60>)
 800211e:	f003 fa3c 	bl	800559a <HAL_GPIO_WritePin>
 8002122:	e004      	b.n	800212e <LcdSend+0x3e>
  }                             //идентефикатор кода
  else
  {
	  lcd44780_RS_1;
 8002124:	2200      	movs	r2, #0
 8002126:	2101      	movs	r1, #1
 8002128:	4809      	ldr	r0, [pc, #36]	; (8002150 <LcdSend+0x60>)
 800212a:	f003 fa36 	bl	800559a <HAL_GPIO_WritePin>
  }                             //идентефикатор данных
  send_data(sdata);
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f97d 	bl	8002430 <send_data>

  if(cmd == lcd_CMD)while(check_busy_flag());
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d105      	bne.n	8002148 <LcdSend+0x58>
 800213c:	bf00      	nop
 800213e:	f000 f98d 	bl	800245c <check_busy_flag>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1fa      	bne.n	800213e <LcdSend+0x4e>
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40020400 	.word	0x40020400

08002154 <LcdUpdate>:

void LcdUpdate(void)            //Copies the LCD cache into the device RAM
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  int i = 0, j = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]

  LcdSend(HD44780_SET_CGRAM_ADD, lcd_CMD);//Позицианируем курсор на начало координат
 8002162:	2101      	movs	r1, #1
 8002164:	2040      	movs	r0, #64	; 0x40
 8002166:	f7ff ffc3 	bl	80020f0 <LcdSend>
  LcdSend(HD44780_SET_DDRAM_ADD, lcd_CMD);
 800216a:	2101      	movs	r1, #1
 800216c:	2080      	movs	r0, #128	; 0x80
 800216e:	f7ff ffbf 	bl	80020f0 <LcdSend>

  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	e017      	b.n	80021a8 <LcdUpdate+0x54>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 8002178:	2300      	movs	r3, #0
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	e00e      	b.n	800219c <LcdUpdate+0x48>
    {
      LcdSend(LcdCache[((i * LCD_X_RES) + j)], lcd_DATA);       //вычисляем адрес в фрейм буфере, и данные от туда грузим в дисплей.
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2264      	movs	r2, #100	; 0x64
 8002182:	fb03 f202 	mul.w	r2, r3, r2
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	4413      	add	r3, r2
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <LcdUpdate+0x64>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	2102      	movs	r1, #2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ffad 	bl	80020f0 <LcdSend>
    for (j = 0; j < LCD_X_RES; j++)        //грузим данные столюиками по 8 пикселей
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b63      	cmp	r3, #99	; 0x63
 80021a0:	dded      	ble.n	800217e <LcdUpdate+0x2a>
  for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3301      	adds	r3, #1
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	dde4      	ble.n	8002178 <LcdUpdate+0x24>
    }
}
 80021ae:	bf00      	nop
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000ad4 	.word	0x20000ad4

080021bc <LcdClear_massive>:
  LcdUpdate();
}


void LcdClear_massive(void)     //Clears the display
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
  int i = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]

  for (i = 0; i < LCD_CACHSIZE; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	e007      	b.n	80021dc <LcdClear_massive+0x20>
    LcdCache[i] = 0;            //забиваем всю память 0
 80021cc:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <LcdClear_massive+0x34>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < LCD_CACHSIZE; i++)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3301      	adds	r3, #1
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2bc7      	cmp	r3, #199	; 0xc7
 80021e0:	ddf4      	ble.n	80021cc <LcdClear_massive+0x10>
}
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000ad4 	.word	0x20000ad4

080021f4 <LcdGotoXYFont>:
  }
}


void LcdGotoXYFont(unsigned char x, unsigned char y)    //Sets cursor location to xy location. Range: 1,1 .. 14,6
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
  LcdCacheIdx = ((int) (y) - 1) * Cntr_X_RES + ((int) (x) - 1) * Cntr_Y_RES;
 8002204:	79bb      	ldrb	r3, [r7, #6]
 8002206:	3b01      	subs	r3, #1
 8002208:	2264      	movs	r2, #100	; 0x64
 800220a:	fb03 f202 	mul.w	r2, r3, r2
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	3b01      	subs	r3, #1
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	4413      	add	r3, r2
 8002216:	461a      	mov	r2, r3
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <LcdGotoXYFont+0x34>)
 800221a:	601a      	str	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000b9c 	.word	0x20000b9c

0800222c <clean_lcd_buf>:

void clean_lcd_buf(void)        //очистка текстового буфера
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	71fb      	strb	r3, [r7, #7]

  for (i = 0; i < 20; i++)
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	e006      	b.n	800224a <clean_lcd_buf+0x1e>
    lcd_buf[i] = 0;
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	4a07      	ldr	r2, [pc, #28]	; (800225c <clean_lcd_buf+0x30>)
 8002240:	2100      	movs	r1, #0
 8002242:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 20; i++)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	3301      	adds	r3, #1
 8002248:	71fb      	strb	r3, [r7, #7]
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b13      	cmp	r3, #19
 800224e:	d9f5      	bls.n	800223c <clean_lcd_buf+0x10>
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	20000ac0 	.word	0x20000ac0

08002260 <LcdChr>:

void LcdChr(int ch)             //Displays a character at current cursor location and increment cursor location
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  char i = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
  if(ch > 0x7f)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b7f      	cmp	r3, #127	; 0x7f
 8002270:	dd1a      	ble.n	80022a8 <LcdChr+0x48>
  {
    for (i = 0; i < 5; i++)
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	e013      	b.n	80022a0 <LcdChr+0x40>
      LcdCache[LcdCacheIdx++] = lcd_font_table_rus[(ch * 5 + (i) - 0x3C0)];     //выделяем байт-столбик из символа и грузим в массив - 5 раз
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	441a      	add	r2, r3
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	4413      	add	r3, r2
 8002284:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <LcdChr+0x98>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1c59      	adds	r1, r3, #1
 800228e:	481a      	ldr	r0, [pc, #104]	; (80022f8 <LcdChr+0x98>)
 8002290:	6001      	str	r1, [r0, #0]
 8002292:	491a      	ldr	r1, [pc, #104]	; (80022fc <LcdChr+0x9c>)
 8002294:	5c89      	ldrb	r1, [r1, r2]
 8002296:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <LcdChr+0xa0>)
 8002298:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	3301      	adds	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d9e8      	bls.n	8002278 <LcdChr+0x18>
 80022a6:	e019      	b.n	80022dc <LcdChr+0x7c>
  } else
  {
    for (i = 0; i < 5; i++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e013      	b.n	80022d6 <LcdChr+0x76>
      LcdCache[LcdCacheIdx++] = lcd_font_table[(ch * 5 + (i) - 0xA0)];  //выделяем байт-столбик из символа и грузим в массив - 5 раз
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	441a      	add	r2, r3
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4413      	add	r3, r2
 80022ba:	f1a3 02a0 	sub.w	r2, r3, #160	; 0xa0
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <LcdChr+0x98>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1c59      	adds	r1, r3, #1
 80022c4:	480c      	ldr	r0, [pc, #48]	; (80022f8 <LcdChr+0x98>)
 80022c6:	6001      	str	r1, [r0, #0]
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <LcdChr+0xa4>)
 80022ca:	5c89      	ldrb	r1, [r1, r2]
 80022cc:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <LcdChr+0xa0>)
 80022ce:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 5; i++)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	3301      	adds	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d9e8      	bls.n	80022ae <LcdChr+0x4e>
  }
  LcdCache[LcdCacheIdx++] = 0x00;       //добавляем пробел между символами
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <LcdChr+0x98>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	4905      	ldr	r1, [pc, #20]	; (80022f8 <LcdChr+0x98>)
 80022e4:	600a      	str	r2, [r1, #0]
 80022e6:	4a06      	ldr	r2, [pc, #24]	; (8002300 <LcdChr+0xa0>)
 80022e8:	2100      	movs	r1, #0
 80022ea:	54d1      	strb	r1, [r2, r3]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000b9c 	.word	0x20000b9c
 80022fc:	200001e0 	.word	0x200001e0
 8002300:	20000ad4 	.word	0x20000ad4
 8002304:	20000000 	.word	0x20000000

08002308 <LcdString>:
  }
  LcdCache[LcdCacheIdx++] = 0xFF;       //добавляем пробел между символами
}

void LcdString(unsigned char x, unsigned char y)        //Displays a string at current cursor location
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	460a      	mov	r2, r1
 8002312:	71fb      	strb	r3, [r7, #7]
 8002314:	4613      	mov	r3, r2
 8002316:	71bb      	strb	r3, [r7, #6]
  unsigned char i = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]

  if(x > 17 || y > 8)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2b11      	cmp	r3, #17
 8002320:	d81f      	bhi.n	8002362 <LcdString+0x5a>
 8002322:	79bb      	ldrb	r3, [r7, #6]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d81c      	bhi.n	8002362 <LcdString+0x5a>
    return;
  LcdGotoXYFont(x, y);
 8002328:	79ba      	ldrb	r2, [r7, #6]
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff60 	bl	80021f4 <LcdGotoXYFont>
  for (i = 0; i < 17; i++)
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e00d      	b.n	8002356 <LcdString+0x4e>
    if(lcd_buf[i])
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <LcdString+0x64>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <LcdString+0x48>
      LcdChr(lcd_buf[i]);
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <LcdString+0x64>)
 8002348:	5cd3      	ldrb	r3, [r2, r3]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff88 	bl	8002260 <LcdChr>
  for (i = 0; i < 17; i++)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	3301      	adds	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b10      	cmp	r3, #16
 800235a:	d9ee      	bls.n	800233a <LcdString+0x32>
  clean_lcd_buf();
 800235c:	f7ff ff66 	bl	800222c <clean_lcd_buf>
 8002360:	e000      	b.n	8002364 <LcdString+0x5c>
    return;
 8002362:	bf00      	nop
}
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000ac0 	.word	0x20000ac0

08002370 <pulse_e>:
//////////////////////////////////////////////////////////////////////////////////////



void pulse_e() //импульс на вход Е индикатора
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_SET);//    PIN_ON(PIN_E);
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <pulse_e+0x20>)
 800237c:	f003 f90d 	bl	800559a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002386:	4802      	ldr	r0, [pc, #8]	; (8002390 <pulse_e+0x20>)
 8002388:	f003 f907 	bl	800559a <HAL_GPIO_WritePin>
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40020400 	.word	0x40020400

08002394 <send_nibble>:

void send_nibble(unsigned char data) //полубайтовый вывод
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  //выводим половину байта на соответствующие контакты
  if(data & 0x01)
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <send_nibble+0x20>
	HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB4);
 80023a8:	2201      	movs	r2, #1
 80023aa:	2104      	movs	r1, #4
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <send_nibble+0x98>)
 80023ae:	f003 f8f4 	bl	800559a <HAL_GPIO_WritePin>
 80023b2:	e004      	b.n	80023be <send_nibble+0x2a>
  else
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2104      	movs	r1, #4
 80023b8:	481c      	ldr	r0, [pc, #112]	; (800242c <send_nibble+0x98>)
 80023ba:	f003 f8ee 	bl	800559a <HAL_GPIO_WritePin>

  if(data & 0x02)
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <send_nibble+0x40>
		HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB5);
 80023c8:	2201      	movs	r2, #1
 80023ca:	2108      	movs	r1, #8
 80023cc:	4817      	ldr	r0, [pc, #92]	; (800242c <send_nibble+0x98>)
 80023ce:	f003 f8e4 	bl	800559a <HAL_GPIO_WritePin>
 80023d2:	e004      	b.n	80023de <send_nibble+0x4a>
	  else
	    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2108      	movs	r1, #8
 80023d8:	4814      	ldr	r0, [pc, #80]	; (800242c <send_nibble+0x98>)
 80023da:	f003 f8de 	bl	800559a <HAL_GPIO_WritePin>

  if(data & 0x04)
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <send_nibble+0x60>
		HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB6);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2110      	movs	r1, #16
 80023ec:	480f      	ldr	r0, [pc, #60]	; (800242c <send_nibble+0x98>)
 80023ee:	f003 f8d4 	bl	800559a <HAL_GPIO_WritePin>
 80023f2:	e004      	b.n	80023fe <send_nibble+0x6a>
	  else
	    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2110      	movs	r1, #16
 80023f8:	480c      	ldr	r0, [pc, #48]	; (800242c <send_nibble+0x98>)
 80023fa:	f003 f8ce 	bl	800559a <HAL_GPIO_WritePin>

  if(data & 0x08)
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <send_nibble+0x80>
		HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_SET);//  PIN_ON(PIN_DB7);
 8002408:	2201      	movs	r2, #1
 800240a:	2120      	movs	r1, #32
 800240c:	4807      	ldr	r0, [pc, #28]	; (800242c <send_nibble+0x98>)
 800240e:	f003 f8c4 	bl	800559a <HAL_GPIO_WritePin>
 8002412:	e004      	b.n	800241e <send_nibble+0x8a>
	  else
	    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 8002414:	2200      	movs	r2, #0
 8002416:	2120      	movs	r1, #32
 8002418:	4804      	ldr	r0, [pc, #16]	; (800242c <send_nibble+0x98>)
 800241a:	f003 f8be 	bl	800559a <HAL_GPIO_WritePin>

  pulse_e(); //чтобы индикатор проглотил данные
 800241e:	f7ff ffa7 	bl	8002370 <pulse_e>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40020400 	.word	0x40020400

08002430 <send_data>:

void send_data(unsigned char data) //вывод 2хполбайта на индикатор
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  //Первым шлем старшие полбайта: по инструкции
  //сначала столбец, потом строка таблицы знакогенератора
  send_nibble((data>>4) & 0x0F);
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ffa7 	bl	8002394 <send_nibble>
  send_nibble(data & 0x0F);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ffa0 	bl	8002394 <send_nibble>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <check_busy_flag>:

int check_busy_flag(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002462:	463b      	mov	r3, r7
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
	GPIO_PinState status;

	lcd44780_RW_1; // Read
 8002470:	2201      	movs	r2, #1
 8002472:	2102      	movs	r1, #2
 8002474:	4822      	ldr	r0, [pc, #136]	; (8002500 <check_busy_flag+0xa4>)
 8002476:	f003 f890 	bl	800559a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 800247a:	2320      	movs	r3, #32
 800247c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002486:	2302      	movs	r3, #2
 8002488:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248a:	463b      	mov	r3, r7
 800248c:	4619      	mov	r1, r3
 800248e:	481c      	ldr	r0, [pc, #112]	; (8002500 <check_busy_flag+0xa4>)
 8002490:	f002 feec 	bl	800526c <HAL_GPIO_Init>

	lcd44780_E_1;
 8002494:	2201      	movs	r2, #1
 8002496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800249a:	4819      	ldr	r0, [pc, #100]	; (8002500 <check_busy_flag+0xa4>)
 800249c:	f003 f87d 	bl	800559a <HAL_GPIO_WritePin>
	status=HAL_GPIO_ReadPin(Display_DB7_GPIO_Port, Display_DB7_Pin);
 80024a0:	2120      	movs	r1, #32
 80024a2:	4817      	ldr	r0, [pc, #92]	; (8002500 <check_busy_flag+0xa4>)
 80024a4:	f003 f862 	bl	800556c <HAL_GPIO_ReadPin>
 80024a8:	4603      	mov	r3, r0
 80024aa:	75fb      	strb	r3, [r7, #23]
	lcd44780_E_0;
 80024ac:	2200      	movs	r2, #0
 80024ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024b2:	4813      	ldr	r0, [pc, #76]	; (8002500 <check_busy_flag+0xa4>)
 80024b4:	f003 f871 	bl	800559a <HAL_GPIO_WritePin>
	lcd44780_E_1;
 80024b8:	2201      	movs	r2, #1
 80024ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024be:	4810      	ldr	r0, [pc, #64]	; (8002500 <check_busy_flag+0xa4>)
 80024c0:	f003 f86b 	bl	800559a <HAL_GPIO_WritePin>
	lcd44780_E_0;
 80024c4:	2200      	movs	r2, #0
 80024c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ca:	480d      	ldr	r0, [pc, #52]	; (8002500 <check_busy_flag+0xa4>)
 80024cc:	f003 f865 	bl	800559a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Display_DB7_Pin;
 80024d0:	2320      	movs	r3, #32
 80024d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80024d4:	2311      	movs	r3, #17
 80024d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024dc:	2302      	movs	r3, #2
 80024de:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e0:	463b      	mov	r3, r7
 80024e2:	4619      	mov	r1, r3
 80024e4:	4806      	ldr	r0, [pc, #24]	; (8002500 <check_busy_flag+0xa4>)
 80024e6:	f002 fec1 	bl	800526c <HAL_GPIO_Init>
	lcd44780_RW_0;
 80024ea:	2200      	movs	r2, #0
 80024ec:	2102      	movs	r1, #2
 80024ee:	4804      	ldr	r0, [pc, #16]	; (8002500 <check_busy_flag+0xa4>)
 80024f0:	f003 f853 	bl	800559a <HAL_GPIO_WritePin>
	return status;
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40020400 	.word	0x40020400

08002504 <init_LCD>:

void init_LCD() //инициализация ЖК
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Display_Power_GPIO_Port, Display_Power_Pin, GPIO_PIN_RESET);
 8002508:	2200      	movs	r2, #0
 800250a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800250e:	4847      	ldr	r0, [pc, #284]	; (800262c <init_LCD+0x128>)
 8002510:	f003 f843 	bl	800559a <HAL_GPIO_WritePin>
  //Выводы в 0
    HAL_GPIO_WritePin(Display_RS_GPIO_Port, Display_RS_Pin, GPIO_PIN_SET);//  PIN_OFF(PIN_RS); !!!
 8002514:	2201      	movs	r2, #1
 8002516:	2101      	movs	r1, #1
 8002518:	4844      	ldr	r0, [pc, #272]	; (800262c <init_LCD+0x128>)
 800251a:	f003 f83e 	bl	800559a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_EN_GPIO_Port, Display_EN_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_E);
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002524:	4841      	ldr	r0, [pc, #260]	; (800262c <init_LCD+0x128>)
 8002526:	f003 f838 	bl	800559a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB4_GPIO_Port, Display_DB4_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB4);
 800252a:	2200      	movs	r2, #0
 800252c:	2104      	movs	r1, #4
 800252e:	483f      	ldr	r0, [pc, #252]	; (800262c <init_LCD+0x128>)
 8002530:	f003 f833 	bl	800559a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB5_GPIO_Port, Display_DB5_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB5);
 8002534:	2200      	movs	r2, #0
 8002536:	2108      	movs	r1, #8
 8002538:	483c      	ldr	r0, [pc, #240]	; (800262c <init_LCD+0x128>)
 800253a:	f003 f82e 	bl	800559a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB6_GPIO_Port, Display_DB6_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB6);
 800253e:	2200      	movs	r2, #0
 8002540:	2110      	movs	r1, #16
 8002542:	483a      	ldr	r0, [pc, #232]	; (800262c <init_LCD+0x128>)
 8002544:	f003 f829 	bl	800559a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Display_DB7_GPIO_Port, Display_DB7_Pin, GPIO_PIN_RESET);//  PIN_OFF(PIN_DB7);
 8002548:	2200      	movs	r2, #0
 800254a:	2120      	movs	r1, #32
 800254c:	4837      	ldr	r0, [pc, #220]	; (800262c <init_LCD+0x128>)
 800254e:	f003 f824 	bl	800559a <HAL_GPIO_WritePin>

	//Ждем включения ЖКИ
    HAL_Delay(500);
 8002552:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002556:	f002 f9bb 	bl	80048d0 <HAL_Delay>
    lcd44780_RS_0;
 800255a:	2201      	movs	r2, #1
 800255c:	2101      	movs	r1, #1
 800255e:	4833      	ldr	r0, [pc, #204]	; (800262c <init_LCD+0x128>)
 8002560:	f003 f81b 	bl	800559a <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 8002564:	2200      	movs	r2, #0
 8002566:	2102      	movs	r1, #2
 8002568:	4830      	ldr	r0, [pc, #192]	; (800262c <init_LCD+0x128>)
 800256a:	f003 f816 	bl	800559a <HAL_GPIO_WritePin>
	send_nibble(0x02);
 800256e:	2002      	movs	r0, #2
 8002570:	f7ff ff10 	bl	8002394 <send_nibble>
	send_nibble(0x02);
 8002574:	2002      	movs	r0, #2
 8002576:	f7ff ff0d 	bl	8002394 <send_nibble>
	send_nibble(0x08);// N=1 F=0
 800257a:	2008      	movs	r0, #8
 800257c:	f7ff ff0a 	bl	8002394 <send_nibble>

	while(check_busy_flag());
 8002580:	bf00      	nop
 8002582:	f7ff ff6b 	bl	800245c <check_busy_flag>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1fa      	bne.n	8002582 <init_LCD+0x7e>

	send_nibble(0x00);
 800258c:	2000      	movs	r0, #0
 800258e:	f7ff ff01 	bl	8002394 <send_nibble>
	send_nibble(0x0E);// D=1 C=1 B=0
 8002592:	200e      	movs	r0, #14
 8002594:	f7ff fefe 	bl	8002394 <send_nibble>

	while(check_busy_flag());
 8002598:	bf00      	nop
 800259a:	f7ff ff5f 	bl	800245c <check_busy_flag>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1fa      	bne.n	800259a <init_LCD+0x96>
	send_nibble(0x00);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7ff fef5 	bl	8002394 <send_nibble>
	send_nibble(0x01);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7ff fef2 	bl	8002394 <send_nibble>

	while(check_busy_flag());
 80025b0:	bf00      	nop
 80025b2:	f7ff ff53 	bl	800245c <check_busy_flag>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1fa      	bne.n	80025b2 <init_LCD+0xae>
	send_nibble(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff fee9 	bl	8002394 <send_nibble>
	send_nibble(0x06); // I/D=1  S/H=0
 80025c2:	2006      	movs	r0, #6
 80025c4:	f7ff fee6 	bl	8002394 <send_nibble>
//	send_nibble(0x04); // I/D=0  S/H=0

	while(check_busy_flag());
 80025c8:	bf00      	nop
 80025ca:	f7ff ff47 	bl	800245c <check_busy_flag>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1fa      	bne.n	80025ca <init_LCD+0xc6>

    lcd44780_RS_0;
 80025d4:	2201      	movs	r2, #1
 80025d6:	2101      	movs	r1, #1
 80025d8:	4814      	ldr	r0, [pc, #80]	; (800262c <init_LCD+0x128>)
 80025da:	f002 ffde 	bl	800559a <HAL_GPIO_WritePin>
    lcd44780_RW_0;
 80025de:	2200      	movs	r2, #0
 80025e0:	2102      	movs	r1, #2
 80025e2:	4812      	ldr	r0, [pc, #72]	; (800262c <init_LCD+0x128>)
 80025e4:	f002 ffd9 	bl	800559a <HAL_GPIO_WritePin>
	send_nibble(0x02); // DL=0
 80025e8:	2002      	movs	r0, #2
 80025ea:	f7ff fed3 	bl	8002394 <send_nibble>
	send_nibble(0x0A);// N=1 F=0 FT1=1 FT0=0
 80025ee:	200a      	movs	r0, #10
 80025f0:	f7ff fed0 	bl	8002394 <send_nibble>
	while(check_busy_flag());
 80025f4:	bf00      	nop
 80025f6:	f7ff ff31 	bl	800245c <check_busy_flag>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1fa      	bne.n	80025f6 <init_LCD+0xf2>


    send_data(0x1F); //переключение в графику
 8002600:	201f      	movs	r0, #31
 8002602:	f7ff ff15 	bl	8002430 <send_data>
    while(check_busy_flag());
 8002606:	bf00      	nop
 8002608:	f7ff ff28 	bl	800245c <check_busy_flag>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1fa      	bne.n	8002608 <init_LCD+0x104>

    send_data(0x01); //очистили от мусора ОЗУ (т.с. что clear())
 8002612:	2001      	movs	r0, #1
 8002614:	f7ff ff0c 	bl	8002430 <send_data>
    while(check_busy_flag());
 8002618:	bf00      	nop
 800261a:	f7ff ff1f 	bl	800245c <check_busy_flag>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1fa      	bne.n	800261a <init_LCD+0x116>

    LcdClear_massive();
 8002624:	f7ff fdca 	bl	80021bc <LcdClear_massive>

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40020400 	.word	0x40020400

08002630 <LcdBarLine>:
while(check_busy_flag());

}

void LcdBarLine(uint32_t fill)    // рисуем прогресс-бар в второй строке
{
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	uint16_t i, full_fill_position;
	float y;

	if(fill>0xFFFFF)return;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800263e:	f080 808f 	bcs.w	8002760 <LcdBarLine+0x130>

	// поиск свободного места в массиве кеша дисплея
//	for (i = LCD_CACHSIZE-1; i > LCD_X_RES; i--) // поиск свободного места в массиве кеша дисплея, в указанной строке
//		if(LcdCache[i]==0x00)
//			found_free_position=i;
	y=LCD_X_RES;
 8002642:	4b49      	ldr	r3, [pc, #292]	; (8002768 <LcdBarLine+0x138>)
 8002644:	613b      	str	r3, [r7, #16]
	y*=8; //сколько всего диступно места
 8002646:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800264a:	6938      	ldr	r0, [r7, #16]
 800264c:	f7fe fbbc 	bl	8000dc8 <__aeabi_fmul>
 8002650:	4603      	mov	r3, r0
 8002652:	613b      	str	r3, [r7, #16]
	y/=(float)0xFFFFF;
 8002654:	4945      	ldr	r1, [pc, #276]	; (800276c <LcdBarLine+0x13c>)
 8002656:	6938      	ldr	r0, [r7, #16]
 8002658:	f7fe fc6a 	bl	8000f30 <__aeabi_fdiv>
 800265c:	4603      	mov	r3, r0
 800265e:	613b      	str	r3, [r7, #16]
	y*=(float)fill;// получаем коэфицент заполнения прогрессбара
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7fe fb59 	bl	8000d18 <__aeabi_ui2f>
 8002666:	4603      	mov	r3, r0
 8002668:	4619      	mov	r1, r3
 800266a:	6938      	ldr	r0, [r7, #16]
 800266c:	f7fe fbac 	bl	8000dc8 <__aeabi_fmul>
 8002670:	4603      	mov	r3, r0
 8002672:	613b      	str	r3, [r7, #16]
	full_fill_position=floor(y/8);
 8002674:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002678:	6938      	ldr	r0, [r7, #16]
 800267a:	f7fe fc59 	bl	8000f30 <__aeabi_fdiv>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd fef3 	bl	800046c <__aeabi_f2d>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f00b ff13 	bl	800e4b8 <floor>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	f7fe fa17 	bl	8000acc <__aeabi_d2uiz>
 800269e:	4603      	mov	r3, r0
 80026a0:	81fb      	strh	r3, [r7, #14]
	//need_to_be_filled=(LCD_CACHSIZE-1-found_free_position)*8 - ;
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 80026a2:	2364      	movs	r3, #100	; 0x64
 80026a4:	82fb      	strh	r3, [r7, #22]
 80026a6:	e057      	b.n	8002758 <LcdBarLine+0x128>
		if(y!=0)
 80026a8:	f04f 0100 	mov.w	r1, #0
 80026ac:	6938      	ldr	r0, [r7, #16]
 80026ae:	f7fe fd1f 	bl	80010f0 <__aeabi_fcmpeq>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d14c      	bne.n	8002752 <LcdBarLine+0x122>
		{
			if(full_fill_position>(i-LCD_X_RES))
 80026b8:	8afb      	ldrh	r3, [r7, #22]
 80026ba:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80026be:	89fb      	ldrh	r3, [r7, #14]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	dc08      	bgt.n	80026d6 <LcdBarLine+0xa6>
			{
				LcdCache[i]=LcdCache[i]^0xFF;
 80026c4:	8afb      	ldrh	r3, [r7, #22]
 80026c6:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <LcdBarLine+0x140>)
 80026c8:	5cd2      	ldrb	r2, [r2, r3]
 80026ca:	8afb      	ldrh	r3, [r7, #22]
 80026cc:	43d2      	mvns	r2, r2
 80026ce:	b2d1      	uxtb	r1, r2
 80026d0:	4a27      	ldr	r2, [pc, #156]	; (8002770 <LcdBarLine+0x140>)
 80026d2:	54d1      	strb	r1, [r2, r3]
 80026d4:	e03d      	b.n	8002752 <LcdBarLine+0x122>
			} else
			{
				y-=floor(y/8)*8;
 80026d6:	6938      	ldr	r0, [r7, #16]
 80026d8:	f7fd fec8 	bl	800046c <__aeabi_f2d>
 80026dc:	4604      	mov	r4, r0
 80026de:	460d      	mov	r5, r1
 80026e0:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80026e4:	6938      	ldr	r0, [r7, #16]
 80026e6:	f7fe fc23 	bl	8000f30 <__aeabi_fdiv>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd febd 	bl	800046c <__aeabi_f2d>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f00b fedd 	bl	800e4b8 <floor>
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <LcdBarLine+0x144>)
 8002704:	f7fd ff0a 	bl	800051c <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4620      	mov	r0, r4
 800270e:	4629      	mov	r1, r5
 8002710:	f7fd fd4c 	bl	80001ac <__aeabi_dsub>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe f9f6 	bl	8000b0c <__aeabi_d2f>
 8002720:	4603      	mov	r3, r0
 8002722:	613b      	str	r3, [r7, #16]
				LcdCache[i]=LcdCache[i]^((1<<(uint16_t)y)-1);
 8002724:	8afb      	ldrh	r3, [r7, #22]
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <LcdBarLine+0x140>)
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	b25c      	sxtb	r4, r3
 800272c:	6938      	ldr	r0, [r7, #16]
 800272e:	f7fe fd11 	bl	8001154 <__aeabi_f2uiz>
 8002732:	4603      	mov	r3, r0
 8002734:	b29b      	uxth	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	2301      	movs	r3, #1
 800273a:	4093      	lsls	r3, r2
 800273c:	b2db      	uxtb	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	b25b      	sxtb	r3, r3
 8002744:	4063      	eors	r3, r4
 8002746:	b25a      	sxtb	r2, r3
 8002748:	8afb      	ldrh	r3, [r7, #22]
 800274a:	b2d1      	uxtb	r1, r2
 800274c:	4a08      	ldr	r2, [pc, #32]	; (8002770 <LcdBarLine+0x140>)
 800274e:	54d1      	strb	r1, [r2, r3]
				break;
 8002750:	e007      	b.n	8002762 <LcdBarLine+0x132>
	for (i = LCD_X_RES; i < LCD_CACHSIZE; i++){ // заполнение прогрессбара
 8002752:	8afb      	ldrh	r3, [r7, #22]
 8002754:	3301      	adds	r3, #1
 8002756:	82fb      	strh	r3, [r7, #22]
 8002758:	8afb      	ldrh	r3, [r7, #22]
 800275a:	2bc7      	cmp	r3, #199	; 0xc7
 800275c:	d9a4      	bls.n	80026a8 <LcdBarLine+0x78>
 800275e:	e000      	b.n	8002762 <LcdBarLine+0x132>
	if(fill>0xFFFFF)return;
 8002760:	bf00      	nop
			}
		}
	}

}
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bdb0      	pop	{r4, r5, r7, pc}
 8002768:	42c80000 	.word	0x42c80000
 800276c:	497ffff0 	.word	0x497ffff0
 8002770:	20000ad4 	.word	0x20000ad4
 8002774:	40200000 	.word	0x40200000

08002778 <output_state>:
//==============================================================================================


//==============================================================================================
void output_state(uint8_t type)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
	switch(type)
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d87f      	bhi.n	8002888 <output_state+0x110>
 8002788:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <output_state+0x18>)
 800278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278e:	bf00      	nop
 8002790:	080027a1 	.word	0x080027a1
 8002794:	080027c1 	.word	0x080027c1
 8002798:	080027f9 	.word	0x080027f9
 800279c:	08002841 	.word	0x08002841
	{
	//----------------------------------------------------------//
	case Output_off_STATE:
	  Relay_control(1,0); // x1 mode
 80027a0:	2100      	movs	r1, #0
 80027a2:	2001      	movs	r0, #1
 80027a4:	f7fe ff52 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 80027a8:	2100      	movs	r1, #0
 80027aa:	2002      	movs	r0, #2
 80027ac:	f7fe ff4e 	bl	800164c <Relay_control>
	  Relay_control(3,0); // Output Enable
 80027b0:	2100      	movs	r1, #0
 80027b2:	2003      	movs	r0, #3
 80027b4:	f7fe ff4a 	bl	800164c <Relay_control>
	  Current_output_status=Output_off_STATE;
 80027b8:	4b35      	ldr	r3, [pc, #212]	; (8002890 <output_state+0x118>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
	  break;
 80027be:	e063      	b.n	8002888 <output_state+0x110>

	case Output_x1_STATE:
	  Relay_control(1,0); // x1 mode
 80027c0:	2100      	movs	r1, #0
 80027c2:	2001      	movs	r0, #1
 80027c4:	f7fe ff42 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 80027c8:	2100      	movs	r1, #0
 80027ca:	2002      	movs	r0, #2
 80027cc:	f7fe ff3e 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 80027d0:	2101      	movs	r1, #1
 80027d2:	2003      	movs	r0, #3
 80027d4:	f7fe ff3a 	bl	800164c <Relay_control>
	  Current_output_status=Output_x1_STATE;
 80027d8:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <output_state+0x118>)
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 80027de:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <output_state+0x11c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <output_state+0x120>)
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe f9e3 	bl	8000bb4 <__aeabi_fsub>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b2a      	ldr	r3, [pc, #168]	; (800289c <output_state+0x124>)
 80027f4:	601a      	str	r2, [r3, #0]
	  break;
 80027f6:	e047      	b.n	8002888 <output_state+0x110>

	case Output_x2_STATE:
	  Relay_control(1,1); // x1 mode
 80027f8:	2101      	movs	r1, #1
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7fe ff26 	bl	800164c <Relay_control>
	  Relay_control(2,1); // x2/x4 mode
 8002800:	2101      	movs	r1, #1
 8002802:	2002      	movs	r0, #2
 8002804:	f7fe ff22 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 8002808:	2101      	movs	r1, #1
 800280a:	2003      	movs	r0, #3
 800280c:	f7fe ff1e 	bl	800164c <Relay_control>
	  Current_output_status=Output_x2_STATE;
 8002810:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <output_state+0x118>)
 8002812:	2202      	movs	r2, #2
 8002814:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x2_coeff;
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <output_state+0x11c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <output_state+0x120>)
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe f9c7 	bl	8000bb4 <__aeabi_fsub>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <output_state+0x128>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f7fe fac9 	bl	8000dc8 <__aeabi_fmul>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <output_state+0x124>)
 800283c:	601a      	str	r2, [r3, #0]
	  break;
 800283e:	e023      	b.n	8002888 <output_state+0x110>

	case Output_x4_STATE:
	  Relay_control(1,1); // x1 mode
 8002840:	2101      	movs	r1, #1
 8002842:	2001      	movs	r0, #1
 8002844:	f7fe ff02 	bl	800164c <Relay_control>
	  Relay_control(2,0); // x2/x4 mode
 8002848:	2100      	movs	r1, #0
 800284a:	2002      	movs	r0, #2
 800284c:	f7fe fefe 	bl	800164c <Relay_control>
	  Relay_control(3,1); // Output Enable
 8002850:	2101      	movs	r1, #1
 8002852:	2003      	movs	r0, #3
 8002854:	f7fe fefa 	bl	800164c <Relay_control>
	  Current_output_status=Output_x4_STATE;
 8002858:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <output_state+0x118>)
 800285a:	2203      	movs	r2, #3
 800285c:	701a      	strb	r2, [r3, #0]
	  DAC_fullrange_voltage=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x4_coeff;
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <output_state+0x11c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <output_state+0x120>)
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe f9a3 	bl	8000bb4 <__aeabi_fsub>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <output_state+0x12c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f7fe faa5 	bl	8000dc8 <__aeabi_fmul>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <output_state+0x124>)
 8002884:	601a      	str	r2, [r3, #0]
	  break;
 8002886:	bf00      	nop
	}
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000c68 	.word	0x20000c68
 8002894:	20000c60 	.word	0x20000c60
 8002898:	20000c64 	.word	0x20000c64
 800289c:	20000c5c 	.word	0x20000c5c
 80028a0:	20000ab8 	.word	0x20000ab8
 80028a4:	20000abc 	.word	0x20000abc

080028a8 <display_screen>:
//==============================================================================================


//==============================================================================================
void display_screen(uint8_t type)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
	char sign;
	switch(type)
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	f200 808c 	bhi.w	80029d2 <display_screen+0x12a>
 80028ba:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <display_screen+0x18>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	080028d1 	.word	0x080028d1
 80028c4:	0800296d 	.word	0x0800296d
 80028c8:	0800298f 	.word	0x0800298f
 80028cc:	080029b1 	.word	0x080029b1
	{
	//----------------------------------------------------------//
	case dU_dt_SCREEN:
		if(DAC_code_direction==1)
 80028d0:	4b42      	ldr	r3, [pc, #264]	; (80029dc <display_screen+0x134>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <display_screen+0x36>
		{
			sign='+';
 80028d8:	232b      	movs	r3, #43	; 0x2b
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e001      	b.n	80028e2 <display_screen+0x3a>
		}
		else
		{
			sign='-';
 80028de:	232d      	movs	r3, #45	; 0x2d
 80028e0:	73fb      	strb	r3, [r7, #15]
		}
		sprintf(lcd_buf,"' %c%1.4EV/s",sign, DAC_target_speed);
 80028e2:	7bfc      	ldrb	r4, [r7, #15]
 80028e4:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <display_screen+0x138>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fdbf 	bl	800046c <__aeabi_f2d>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	e9cd 2300 	strd	r2, r3, [sp]
 80028f6:	4622      	mov	r2, r4
 80028f8:	493a      	ldr	r1, [pc, #232]	; (80029e4 <display_screen+0x13c>)
 80028fa:	483b      	ldr	r0, [pc, #236]	; (80029e8 <display_screen+0x140>)
 80028fc:	f00c fb00 	bl	800ef00 <siprintf>
		LcdString(1, 1);
 8002900:	2101      	movs	r1, #1
 8002902:	2001      	movs	r0, #1
 8002904:	f7ff fd00 	bl	8002308 <LcdString>

		if(cfg.LDACMODE==1){
 8002908:	4b38      	ldr	r3, [pc, #224]	; (80029ec <display_screen+0x144>)
 800290a:	789b      	ldrb	r3, [r3, #2]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d117      	bne.n	8002940 <display_screen+0x98>
			sprintf(lcd_buf,"ARM      %01u:%02u:%02u",eta_hours,eta_minute,eta_second);
 8002910:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <display_screen+0x148>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b37      	ldr	r3, [pc, #220]	; (80029f4 <display_screen+0x14c>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	4619      	mov	r1, r3
 800291c:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <display_screen+0x150>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	460b      	mov	r3, r1
 8002924:	4935      	ldr	r1, [pc, #212]	; (80029fc <display_screen+0x154>)
 8002926:	4830      	ldr	r0, [pc, #192]	; (80029e8 <display_screen+0x140>)
 8002928:	f00c faea 	bl	800ef00 <siprintf>
			LcdString(1, 2);
 800292c:	2102      	movs	r1, #2
 800292e:	2001      	movs	r0, #1
 8002930:	f7ff fcea 	bl	8002308 <LcdString>
			LcdBarLine(DAC_code);
 8002934:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <display_screen+0x158>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fe79 	bl	8002630 <LcdBarLine>
			{
				sprintf(lcd_buf,"READY TO FIGHT");
				LcdString(1, 2);
			}
		}
		break;
 800293e:	e048      	b.n	80029d2 <display_screen+0x12a>
			if(Current_output_status==Output_off_STATE)
 8002940:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <display_screen+0x15c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d108      	bne.n	800295a <display_screen+0xb2>
				sprintf(lcd_buf,"OUTPUT DISABLED");
 8002948:	492f      	ldr	r1, [pc, #188]	; (8002a08 <display_screen+0x160>)
 800294a:	4827      	ldr	r0, [pc, #156]	; (80029e8 <display_screen+0x140>)
 800294c:	f00c fad8 	bl	800ef00 <siprintf>
				LcdString(1, 2);
 8002950:	2102      	movs	r1, #2
 8002952:	2001      	movs	r0, #1
 8002954:	f7ff fcd8 	bl	8002308 <LcdString>
		break;
 8002958:	e03b      	b.n	80029d2 <display_screen+0x12a>
				sprintf(lcd_buf,"READY TO FIGHT");
 800295a:	492c      	ldr	r1, [pc, #176]	; (8002a0c <display_screen+0x164>)
 800295c:	4822      	ldr	r0, [pc, #136]	; (80029e8 <display_screen+0x140>)
 800295e:	f00c facf 	bl	800ef00 <siprintf>
				LcdString(1, 2);
 8002962:	2102      	movs	r1, #2
 8002964:	2001      	movs	r0, #1
 8002966:	f7ff fccf 	bl	8002308 <LcdString>
		break;
 800296a:	e032      	b.n	80029d2 <display_screen+0x12a>
	//----------------------------------------------------------//
	case Hello_SCREEN:
		sprintf(lcd_buf,"Hello AmpNuts!");
 800296c:	4928      	ldr	r1, [pc, #160]	; (8002a10 <display_screen+0x168>)
 800296e:	481e      	ldr	r0, [pc, #120]	; (80029e8 <display_screen+0x140>)
 8002970:	f00c fac6 	bl	800ef00 <siprintf>
		LcdString(1, 1);
 8002974:	2101      	movs	r1, #1
 8002976:	2001      	movs	r0, #1
 8002978:	f7ff fcc6 	bl	8002308 <LcdString>
		sprintf(lcd_buf,"I`m Micron-GLIN");
 800297c:	4925      	ldr	r1, [pc, #148]	; (8002a14 <display_screen+0x16c>)
 800297e:	481a      	ldr	r0, [pc, #104]	; (80029e8 <display_screen+0x140>)
 8002980:	f00c fabe 	bl	800ef00 <siprintf>
		LcdString(1, 2);
 8002984:	2102      	movs	r1, #2
 8002986:	2001      	movs	r0, #1
 8002988:	f7ff fcbe 	bl	8002308 <LcdString>
		break;
 800298c:	e021      	b.n	80029d2 <display_screen+0x12a>
	//----------------------------------------------------------//
	case Warm_up_SCREEN:
		sprintf(lcd_buf,"need time to");
 800298e:	4922      	ldr	r1, [pc, #136]	; (8002a18 <display_screen+0x170>)
 8002990:	4815      	ldr	r0, [pc, #84]	; (80029e8 <display_screen+0x140>)
 8002992:	f00c fab5 	bl	800ef00 <siprintf>
		LcdString(1, 1);
 8002996:	2101      	movs	r1, #1
 8002998:	2001      	movs	r0, #1
 800299a:	f7ff fcb5 	bl	8002308 <LcdString>
		sprintf(lcd_buf,"warm-up my refs");
 800299e:	491f      	ldr	r1, [pc, #124]	; (8002a1c <display_screen+0x174>)
 80029a0:	4811      	ldr	r0, [pc, #68]	; (80029e8 <display_screen+0x140>)
 80029a2:	f00c faad 	bl	800ef00 <siprintf>
		LcdString(1, 2);
 80029a6:	2102      	movs	r1, #2
 80029a8:	2001      	movs	r0, #1
 80029aa:	f7ff fcad 	bl	8002308 <LcdString>
		break;
 80029ae:	e010      	b.n	80029d2 <display_screen+0x12a>
	//----------------------------------------------------------//
	case Ready_SCREEN:
		sprintf(lcd_buf,"Let Mortal Kombat");
 80029b0:	491b      	ldr	r1, [pc, #108]	; (8002a20 <display_screen+0x178>)
 80029b2:	480d      	ldr	r0, [pc, #52]	; (80029e8 <display_screen+0x140>)
 80029b4:	f00c faa4 	bl	800ef00 <siprintf>
		LcdString(1, 1);
 80029b8:	2101      	movs	r1, #1
 80029ba:	2001      	movs	r0, #1
 80029bc:	f7ff fca4 	bl	8002308 <LcdString>
		sprintf(lcd_buf,"    begin !!!");
 80029c0:	4918      	ldr	r1, [pc, #96]	; (8002a24 <display_screen+0x17c>)
 80029c2:	4809      	ldr	r0, [pc, #36]	; (80029e8 <display_screen+0x140>)
 80029c4:	f00c fa9c 	bl	800ef00 <siprintf>
		LcdString(1, 2);
 80029c8:	2102      	movs	r1, #2
 80029ca:	2001      	movs	r0, #1
 80029cc:	f7ff fc9c 	bl	8002308 <LcdString>
		break;
 80029d0:	bf00      	nop
	}
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000c70 	.word	0x20000c70
 80029e0:	20000c58 	.word	0x20000c58
 80029e4:	08012a58 	.word	0x08012a58
 80029e8:	20000ac0 	.word	0x20000ac0
 80029ec:	20000c44 	.word	0x20000c44
 80029f0:	20000c18 	.word	0x20000c18
 80029f4:	20000c19 	.word	0x20000c19
 80029f8:	20000c1a 	.word	0x20000c1a
 80029fc:	08012a68 	.word	0x08012a68
 8002a00:	20000c6c 	.word	0x20000c6c
 8002a04:	20000c68 	.word	0x20000c68
 8002a08:	08012a80 	.word	0x08012a80
 8002a0c:	08012a90 	.word	0x08012a90
 8002a10:	08012aa0 	.word	0x08012aa0
 8002a14:	08012ab0 	.word	0x08012ab0
 8002a18:	08012ac0 	.word	0x08012ac0
 8002a1c:	08012ad0 	.word	0x08012ad0
 8002a20:	08012ae0 	.word	0x08012ae0
 8002a24:	08012af4 	.word	0x08012af4

08002a28 <send_answer_to_CDC>:
//==============================================================================================


//==============================================================================================
void send_answer_to_CDC(uint8_t type)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
	uint8_t cdc_counter=0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]

	switch(type)
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	f200 80b5 	bhi.w	8002ba8 <send_answer_to_CDC+0x180>
 8002a3e:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <send_answer_to_CDC+0x1c>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002a8b 	.word	0x08002a8b
 8002a48:	08002ab1 	.word	0x08002ab1
 8002a4c:	08002ad7 	.word	0x08002ad7
 8002a50:	08002afd 	.word	0x08002afd
 8002a54:	08002b23 	.word	0x08002b23
 8002a58:	08002b49 	.word	0x08002b49
 8002a5c:	08002ba9 	.word	0x08002ba9
 8002a60:	08002ba9 	.word	0x08002ba9
 8002a64:	08002ba9 	.word	0x08002ba9
 8002a68:	08002ba9 	.word	0x08002ba9
 8002a6c:	08002ba9 	.word	0x08002ba9
 8002a70:	08002ba9 	.word	0x08002ba9
 8002a74:	08002ba9 	.word	0x08002ba9
 8002a78:	08002ba9 	.word	0x08002ba9
 8002a7c:	08002ba9 	.word	0x08002ba9
 8002a80:	08002b6f 	.word	0x08002b6f
	{
	case ERROR_TYPE_1:
		while((CDC_Transmit_FS(Error1, strlen((const char *)Error1))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	3301      	adds	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	4849      	ldr	r0, [pc, #292]	; (8002bb0 <send_answer_to_CDC+0x188>)
 8002a8c:	f7fd fb82 	bl	8000194 <strlen>
 8002a90:	4603      	mov	r3, r0
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4619      	mov	r1, r3
 8002a96:	4846      	ldr	r0, [pc, #280]	; (8002bb0 <send_answer_to_CDC+0x188>)
 8002a98:	f00b f91a 	bl	800dcd0 <CDC_Transmit_FS>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d075      	beq.n	8002b8e <send_answer_to_CDC+0x166>
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2bff      	cmp	r3, #255	; 0xff
 8002aa6:	d1ed      	bne.n	8002a84 <send_answer_to_CDC+0x5c>
		break;
 8002aa8:	e071      	b.n	8002b8e <send_answer_to_CDC+0x166>
	case ERROR_TYPE_2:
		while((CDC_Transmit_FS(Error2, strlen((const char *)Error2))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	3301      	adds	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	4840      	ldr	r0, [pc, #256]	; (8002bb4 <send_answer_to_CDC+0x18c>)
 8002ab2:	f7fd fb6f 	bl	8000194 <strlen>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	4619      	mov	r1, r3
 8002abc:	483d      	ldr	r0, [pc, #244]	; (8002bb4 <send_answer_to_CDC+0x18c>)
 8002abe:	f00b f907 	bl	800dcd0 <CDC_Transmit_FS>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d064      	beq.n	8002b92 <send_answer_to_CDC+0x16a>
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2bff      	cmp	r3, #255	; 0xff
 8002acc:	d1ed      	bne.n	8002aaa <send_answer_to_CDC+0x82>
		break;
 8002ace:	e060      	b.n	8002b92 <send_answer_to_CDC+0x16a>
	case OK_TYPE_1:
		while((CDC_Transmit_FS(OK, strlen((const char *)OK))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
 8002ad6:	4838      	ldr	r0, [pc, #224]	; (8002bb8 <send_answer_to_CDC+0x190>)
 8002ad8:	f7fd fb5c 	bl	8000194 <strlen>
 8002adc:	4603      	mov	r3, r0
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4835      	ldr	r0, [pc, #212]	; (8002bb8 <send_answer_to_CDC+0x190>)
 8002ae4:	f00b f8f4 	bl	800dcd0 <CDC_Transmit_FS>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d053      	beq.n	8002b96 <send_answer_to_CDC+0x16e>
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2bff      	cmp	r3, #255	; 0xff
 8002af2:	d1ed      	bne.n	8002ad0 <send_answer_to_CDC+0xa8>
		break;
 8002af4:	e04f      	b.n	8002b96 <send_answer_to_CDC+0x16e>
	case OK_TYPE_2:
		while((CDC_Transmit_FS(OK_Enter, strlen((const char *)OK_Enter))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	3301      	adds	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	482f      	ldr	r0, [pc, #188]	; (8002bbc <send_answer_to_CDC+0x194>)
 8002afe:	f7fd fb49 	bl	8000194 <strlen>
 8002b02:	4603      	mov	r3, r0
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	4619      	mov	r1, r3
 8002b08:	482c      	ldr	r0, [pc, #176]	; (8002bbc <send_answer_to_CDC+0x194>)
 8002b0a:	f00b f8e1 	bl	800dcd0 <CDC_Transmit_FS>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d042      	beq.n	8002b9a <send_answer_to_CDC+0x172>
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2bff      	cmp	r3, #255	; 0xff
 8002b18:	d1ed      	bne.n	8002af6 <send_answer_to_CDC+0xce>
		break;
 8002b1a:	e03e      	b.n	8002b9a <send_answer_to_CDC+0x172>
	case CLEAR_TYPE_1:
		while((CDC_Transmit_FS(clear, strlen((const char *)clear))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	4827      	ldr	r0, [pc, #156]	; (8002bc0 <send_answer_to_CDC+0x198>)
 8002b24:	f7fd fb36 	bl	8000194 <strlen>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4824      	ldr	r0, [pc, #144]	; (8002bc0 <send_answer_to_CDC+0x198>)
 8002b30:	f00b f8ce 	bl	800dcd0 <CDC_Transmit_FS>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d031      	beq.n	8002b9e <send_answer_to_CDC+0x176>
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	2bff      	cmp	r3, #255	; 0xff
 8002b3e:	d1ed      	bne.n	8002b1c <send_answer_to_CDC+0xf4>
		break;
 8002b40:	e02d      	b.n	8002b9e <send_answer_to_CDC+0x176>
	case DONE_TYPE_1:
		while((CDC_Transmit_FS(Done, strlen((const char *)Done))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	3301      	adds	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	481e      	ldr	r0, [pc, #120]	; (8002bc4 <send_answer_to_CDC+0x19c>)
 8002b4a:	f7fd fb23 	bl	8000194 <strlen>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	4619      	mov	r1, r3
 8002b54:	481b      	ldr	r0, [pc, #108]	; (8002bc4 <send_answer_to_CDC+0x19c>)
 8002b56:	f00b f8bb 	bl	800dcd0 <CDC_Transmit_FS>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <send_answer_to_CDC+0x17a>
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2bff      	cmp	r3, #255	; 0xff
 8002b64:	d1ed      	bne.n	8002b42 <send_answer_to_CDC+0x11a>
		break;
 8002b66:	e01c      	b.n	8002ba2 <send_answer_to_CDC+0x17a>
	case RUN_CAL_TYPE_TEMP:
		while((CDC_Transmit_FS(run_cal, strlen((const char *)run_cal))!=USBD_OK)&&cdc_counter<0xFF)cdc_counter++;
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	4816      	ldr	r0, [pc, #88]	; (8002bc8 <send_answer_to_CDC+0x1a0>)
 8002b70:	f7fd fb10 	bl	8000194 <strlen>
 8002b74:	4603      	mov	r3, r0
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4813      	ldr	r0, [pc, #76]	; (8002bc8 <send_answer_to_CDC+0x1a0>)
 8002b7c:	f00b f8a8 	bl	800dcd0 <CDC_Transmit_FS>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00f      	beq.n	8002ba6 <send_answer_to_CDC+0x17e>
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2bff      	cmp	r3, #255	; 0xff
 8002b8a:	d1ed      	bne.n	8002b68 <send_answer_to_CDC+0x140>
		break;
 8002b8c:	e00b      	b.n	8002ba6 <send_answer_to_CDC+0x17e>
		break;
 8002b8e:	bf00      	nop
 8002b90:	e00a      	b.n	8002ba8 <send_answer_to_CDC+0x180>
		break;
 8002b92:	bf00      	nop
 8002b94:	e008      	b.n	8002ba8 <send_answer_to_CDC+0x180>
		break;
 8002b96:	bf00      	nop
 8002b98:	e006      	b.n	8002ba8 <send_answer_to_CDC+0x180>
		break;
 8002b9a:	bf00      	nop
 8002b9c:	e004      	b.n	8002ba8 <send_answer_to_CDC+0x180>
		break;
 8002b9e:	bf00      	nop
 8002ba0:	e002      	b.n	8002ba8 <send_answer_to_CDC+0x180>
		break;
 8002ba2:	bf00      	nop
 8002ba4:	e000      	b.n	8002ba8 <send_answer_to_CDC+0x180>
		break;
 8002ba6:	bf00      	nop
	}
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	2000034c 	.word	0x2000034c
 8002bb4:	200006e4 	.word	0x200006e4
 8002bb8:	20000320 	.word	0x20000320
 8002bbc:	200006cc 	.word	0x200006cc
 8002bc0:	20000344 	.word	0x20000344
 8002bc4:	20000710 	.word	0x20000710
 8002bc8:	20000328 	.word	0x20000328

08002bcc <cmd_SWEEP_START>:
//==============================================================================================


//==============================================================================================
void cmd_SWEEP_START()
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	DDS_Calculation();
 8002bd0:	f7fe fffc 	bl	8001bcc <DDS_Calculation>
	DAC_TEMP_CAL();
 8002bd4:	f7fe ff8a 	bl	8001aec <DAC_TEMP_CAL>
	CPLD_control(CPLD_ON_STATE); // Enable LDAC signal
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f7fe fe11 	bl	8001800 <CPLD_control>
	DAC_SendInit();
 8002bde:	f7fe fefd 	bl	80019dc <DAC_SendInit>
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <cmd_SWEEP_STOP>:
//==============================================================================================


//==============================================================================================
void cmd_SWEEP_STOP()
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	af00      	add	r7, sp, #0
	CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8002bea:	2000      	movs	r0, #0
 8002bec:	f7fe fe08 	bl	8001800 <CPLD_control>
	DAC_SendInit();
 8002bf0:	f7fe fef4 	bl	80019dc <DAC_SendInit>
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <cmd_DAC_SET>:
//==============================================================================================


//==============================================================================================
void cmd_DAC_SET(uint32_t code)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	if (code>0xFFFFF)return;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c06:	d21a      	bcs.n	8002c3e <cmd_DAC_SET+0x46>

	switch(code)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <cmd_DAC_SET+0x20>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <cmd_DAC_SET+0x50>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <cmd_DAC_SET+0x28>
 8002c16:	e007      	b.n	8002c28 <cmd_DAC_SET+0x30>
	{
	case DAC_CODE_DOWN:
		DAC_code_direction=1;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <cmd_DAC_SET+0x54>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
		break;
 8002c1e:	e003      	b.n	8002c28 <cmd_DAC_SET+0x30>
	case DAC_CODE_TOP:
		DAC_code_direction=0;
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <cmd_DAC_SET+0x54>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
		break;
 8002c26:	bf00      	nop
	}

	CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7fe fde9 	bl	8001800 <CPLD_control>
	DAC_SendInit();
 8002c2e:	f7fe fed5 	bl	80019dc <DAC_SendInit>
	DAC_TEMP_CAL();
 8002c32:	f7fe ff5b 	bl	8001aec <DAC_TEMP_CAL>
	DAC_Write(code);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe fe76 	bl	8001928 <DAC_Write>
 8002c3c:	e000      	b.n	8002c40 <cmd_DAC_SET+0x48>
	if (code>0xFFFFF)return;
 8002c3e:	bf00      	nop
}
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	000fffff 	.word	0x000fffff
 8002c4c:	20000c70 	.word	0x20000c70

08002c50 <cmd_SET_OUTPUT_VOLTAGE>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_SET_OUTPUT_VOLTAGE(float volt)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	float dac_resolution;

	if(volt>=cal_DAC_down_voltage && volt<=cal_DAC_up_voltage)
 8002c58:	4b80      	ldr	r3, [pc, #512]	; (8002e5c <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fa64 	bl	800112c <__aeabi_fcmpge>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d037      	beq.n	8002cda <cmd_SET_OUTPUT_VOLTAGE+0x8a>
 8002c6a:	4b7d      	ldr	r3, [pc, #500]	; (8002e60 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7fe fa51 	bl	8001118 <__aeabi_fcmple>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d02e      	beq.n	8002cda <cmd_SET_OUTPUT_VOLTAGE+0x8a>
	{
		if(Current_output_status!=Output_x1_STATE)output_state(Output_x1_STATE);
 8002c7c:	4b79      	ldr	r3, [pc, #484]	; (8002e64 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d002      	beq.n	8002c8a <cmd_SET_OUTPUT_VOLTAGE+0x3a>
 8002c84:	2001      	movs	r0, #1
 8002c86:	f7ff fd77 	bl	8002778 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 8002c8a:	4b75      	ldr	r3, [pc, #468]	; (8002e60 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a73      	ldr	r2, [pc, #460]	; (8002e5c <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd ff8d 	bl	8000bb4 <__aeabi_fsub>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4972      	ldr	r1, [pc, #456]	; (8002e68 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe f946 	bl	8000f30 <__aeabi_fdiv>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage)/dac_resolution);
 8002ca8:	4b6c      	ldr	r3, [pc, #432]	; (8002e5c <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fd ff80 	bl	8000bb4 <__aeabi_fsub>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	68f9      	ldr	r1, [r7, #12]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe f939 	bl	8000f30 <__aeabi_fdiv>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe fa47 	bl	8001154 <__aeabi_f2uiz>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4a68      	ldr	r2, [pc, #416]	; (8002e6c <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002cca:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002ccc:	4b67      	ldr	r3, [pc, #412]	; (8002e6c <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff91 	bl	8002bf8 <cmd_DAC_SET>
		return 1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0bc      	b.n	8002e54 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}
	if(volt>=(cal_DAC_down_voltage*gain_x2_coeff) && volt<=(cal_DAC_up_voltage*gain_x2_coeff))
 8002cda:	4b60      	ldr	r3, [pc, #384]	; (8002e5c <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a64      	ldr	r2, [pc, #400]	; (8002e70 <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe f86f 	bl	8000dc8 <__aeabi_fmul>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe fa1c 	bl	800112c <__aeabi_fcmpge>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d04d      	beq.n	8002d96 <cmd_SET_OUTPUT_VOLTAGE+0x146>
 8002cfa:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe f85f 	bl	8000dc8 <__aeabi_fmul>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe fa02 	bl	8001118 <__aeabi_fcmple>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d03d      	beq.n	8002d96 <cmd_SET_OUTPUT_VOLTAGE+0x146>
	{
		if(Current_output_status!=Output_x2_STATE)output_state(Output_x2_STATE);
 8002d1a:	4b52      	ldr	r3, [pc, #328]	; (8002e64 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d002      	beq.n	8002d28 <cmd_SET_OUTPUT_VOLTAGE+0xd8>
 8002d22:	2002      	movs	r0, #2
 8002d24:	f7ff fd28 	bl	8002778 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x2_coeff/0xFFFFF; // Calculate 1 LSB resolution
 8002d28:	4b4d      	ldr	r3, [pc, #308]	; (8002e60 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a4b      	ldr	r2, [pc, #300]	; (8002e5c <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd ff3e 	bl	8000bb4 <__aeabi_fsub>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f7fe f840 	bl	8000dc8 <__aeabi_fmul>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4947      	ldr	r1, [pc, #284]	; (8002e68 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe f8ef 	bl	8000f30 <__aeabi_fdiv>
 8002d52:	4603      	mov	r3, r0
 8002d54:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage*gain_x2_coeff)/dac_resolution);
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a45      	ldr	r2, [pc, #276]	; (8002e70 <cmd_SET_OUTPUT_VOLTAGE+0x220>)
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe f831 	bl	8000dc8 <__aeabi_fmul>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd ff22 	bl	8000bb4 <__aeabi_fsub>
 8002d70:	4603      	mov	r3, r0
 8002d72:	68f9      	ldr	r1, [r7, #12]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe f8db 	bl	8000f30 <__aeabi_fdiv>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe f9e9 	bl	8001154 <__aeabi_f2uiz>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002d86:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002d88:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff33 	bl	8002bf8 <cmd_DAC_SET>
		return 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e05e      	b.n	8002e54 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}
	if(volt>=(cal_DAC_down_voltage*gain_x4_coeff) && volt<=(cal_DAC_up_voltage*gain_x4_coeff))
 8002d96:	4b31      	ldr	r3, [pc, #196]	; (8002e5c <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a36      	ldr	r2, [pc, #216]	; (8002e74 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe f811 	bl	8000dc8 <__aeabi_fmul>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe f9be 	bl	800112c <__aeabi_fcmpge>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d04d      	beq.n	8002e52 <cmd_SET_OUTPUT_VOLTAGE+0x202>
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2e      	ldr	r2, [pc, #184]	; (8002e74 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe f801 	bl	8000dc8 <__aeabi_fmul>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe f9a4 	bl	8001118 <__aeabi_fcmple>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03d      	beq.n	8002e52 <cmd_SET_OUTPUT_VOLTAGE+0x202>
	{
		if(Current_output_status!=Output_x4_STATE)output_state(Output_x4_STATE);
 8002dd6:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <cmd_SET_OUTPUT_VOLTAGE+0x214>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d002      	beq.n	8002de4 <cmd_SET_OUTPUT_VOLTAGE+0x194>
 8002dde:	2003      	movs	r0, #3
 8002de0:	f7ff fcca 	bl	8002778 <output_state>
		dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)*gain_x4_coeff/0xFFFFF; // Calculate 1 LSB resolution
 8002de4:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <cmd_SET_OUTPUT_VOLTAGE+0x210>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fee0 	bl	8000bb4 <__aeabi_fsub>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f7fd ffe2 	bl	8000dc8 <__aeabi_fmul>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4918      	ldr	r1, [pc, #96]	; (8002e68 <cmd_SET_OUTPUT_VOLTAGE+0x218>)
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe f891 	bl	8000f30 <__aeabi_fdiv>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	60fb      	str	r3, [r7, #12]
		DAC_code=(uint32_t)((volt-cal_DAC_down_voltage*gain_x4_coeff)/dac_resolution);
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <cmd_SET_OUTPUT_VOLTAGE+0x20c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <cmd_SET_OUTPUT_VOLTAGE+0x224>)
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd ffd3 	bl	8000dc8 <__aeabi_fmul>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fd fec4 	bl	8000bb4 <__aeabi_fsub>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	68f9      	ldr	r1, [r7, #12]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f87d 	bl	8000f30 <__aeabi_fdiv>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe f98b 	bl	8001154 <__aeabi_f2uiz>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002e42:	6013      	str	r3, [r2, #0]
		cmd_DAC_SET(DAC_code);
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <cmd_SET_OUTPUT_VOLTAGE+0x21c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fed5 	bl	8002bf8 <cmd_DAC_SET>
		return 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <cmd_SET_OUTPUT_VOLTAGE+0x204>
	}

	return 0;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000c64 	.word	0x20000c64
 8002e60:	20000c60 	.word	0x20000c60
 8002e64:	20000c68 	.word	0x20000c68
 8002e68:	497ffff0 	.word	0x497ffff0
 8002e6c:	20000c6c 	.word	0x20000c6c
 8002e70:	20000ab8 	.word	0x20000ab8
 8002e74:	20000abc 	.word	0x20000abc

08002e78 <cmd_SWEEP_RATE>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_SWEEP_RATE(float rate)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
		if(rate<0.0009 || rate>1.1) // V/s
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fd faf3 	bl	800046c <__aeabi_f2d>
 8002e86:	a316      	add	r3, pc, #88	; (adr r3, 8002ee0 <cmd_SWEEP_RATE+0x68>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fdb8 	bl	8000a00 <__aeabi_dcmplt>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <cmd_SWEEP_RATE+0x34>
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fae8 	bl	800046c <__aeabi_f2d>
 8002e9c:	a312      	add	r3, pc, #72	; (adr r3, 8002ee8 <cmd_SWEEP_RATE+0x70>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd fdcb 	bl	8000a3c <__aeabi_dcmpgt>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <cmd_SWEEP_RATE+0x38>
		{
			return 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e010      	b.n	8002ed2 <cmd_SWEEP_RATE+0x5a>
		}
		else
		{
			DAC_target_speed=rate;
 8002eb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ef0 <cmd_SWEEP_RATE+0x78>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6013      	str	r3, [r2, #0]
			if(cfg.LDACMODE==0)
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <cmd_SWEEP_RATE+0x7c>)
 8002eb8:	789b      	ldrb	r3, [r3, #2]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <cmd_SWEEP_RATE+0x4e>
			{
				CPLD_control(CPLD_OFF_STATE);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7fe fc9e 	bl	8001800 <CPLD_control>
 8002ec4:	e002      	b.n	8002ecc <cmd_SWEEP_RATE+0x54>
			}
			else
			{
				CPLD_control(CPLD_ON_STATE);
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f7fe fc9a 	bl	8001800 <CPLD_control>
			}

			DDS_Calculation();
 8002ecc:	f7fe fe7e 	bl	8001bcc <DDS_Calculation>
			return 1;
 8002ed0:	2301      	movs	r3, #1
		}
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	f3af 8000 	nop.w
 8002ee0:	487fcb92 	.word	0x487fcb92
 8002ee4:	3f4d7dbf 	.word	0x3f4d7dbf
 8002ee8:	9999999a 	.word	0x9999999a
 8002eec:	3ff19999 	.word	0x3ff19999
 8002ef0:	20000c58 	.word	0x20000c58
 8002ef4:	20000c44 	.word	0x20000c44

08002ef8 <cmd_CAL>:
//==============================================================================================


//==============================================================================================
FunctionalState cmd_CAL(uint8_t cmd, float coeff)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	6039      	str	r1, [r7, #0]
 8002f02:	71fb      	strb	r3, [r7, #7]
	float tmpx;

	tmpx=coeff;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	3b06      	subs	r3, #6
 8002f0c:	2b07      	cmp	r3, #7
 8002f0e:	f200 80e7 	bhi.w	80030e0 <cmd_CAL+0x1e8>
 8002f12:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <cmd_CAL+0x20>)
 8002f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f18:	08002f39 	.word	0x08002f39
 8002f1c:	08002f4b 	.word	0x08002f4b
 8002f20:	08002f5d 	.word	0x08002f5d
 8002f24:	08002f6f 	.word	0x08002f6f
 8002f28:	08003005 	.word	0x08003005
 8002f2c:	08003073 	.word	0x08003073
 8002f30:	08002f81 	.word	0x08002f81
 8002f34:	08002fc3 	.word	0x08002fc3
	{
	case DAC_CAL_TEMP:
		DAC_Write(DAC_CODE_MIDDLE);
 8002f38:	4885      	ldr	r0, [pc, #532]	; (8003150 <cmd_CAL+0x258>)
 8002f3a:	f7fe fcf5 	bl	8001928 <DAC_Write>
		DAC_TEMP_CAL();
 8002f3e:	f7fe fdd5 	bl	8001aec <DAC_TEMP_CAL>
		DAC_Write(DAC_CODE_MIDDLE);
 8002f42:	4883      	ldr	r0, [pc, #524]	; (8003150 <cmd_CAL+0x258>)
 8002f44:	f7fe fcf0 	bl	8001928 <DAC_Write>
		break;
 8002f48:	e0ca      	b.n	80030e0 <cmd_CAL+0x1e8>

	case DAC_CAL_POLY_A:
		EEPROM_write(corr_coeff_1_EEPROM_ADDRESS,float_to_binary(tmpx));
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f97b 	bl	8003246 <float_to_binary>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4619      	mov	r1, r3
 8002f54:	2010      	movs	r0, #16
 8002f56:	f000 f9b5 	bl	80032c4 <EEPROM_write>
		break;
 8002f5a:	e0c1      	b.n	80030e0 <cmd_CAL+0x1e8>
	case DAC_CAL_POLY_B:
		EEPROM_write(corr_coeff_2_EEPROM_ADDRESS,float_to_binary(tmpx));
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f972 	bl	8003246 <float_to_binary>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4619      	mov	r1, r3
 8002f66:	2018      	movs	r0, #24
 8002f68:	f000 f9ac 	bl	80032c4 <EEPROM_write>
		break;
 8002f6c:	e0b8      	b.n	80030e0 <cmd_CAL+0x1e8>
	case DAC_CAL_POLY_C:
		EEPROM_write(corr_coeff_3_EEPROM_ADDRESS,float_to_binary(tmpx));
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f969 	bl	8003246 <float_to_binary>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4619      	mov	r1, r3
 8002f78:	2020      	movs	r0, #32
 8002f7a:	f000 f9a3 	bl	80032c4 <EEPROM_write>
		break;
 8002f7e:	e0af      	b.n	80030e0 <cmd_CAL+0x1e8>

	case GAIN_X2_CAL:
		if((tmpx<2.1 && tmpx>1.9))
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7fd fa73 	bl	800046c <__aeabi_f2d>
 8002f86:	a35a      	add	r3, pc, #360	; (adr r3, 80030f0 <cmd_CAL+0x1f8>)
 8002f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8c:	f7fd fd38 	bl	8000a00 <__aeabi_dcmplt>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d013      	beq.n	8002fbe <cmd_CAL+0xc6>
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f7fd fa68 	bl	800046c <__aeabi_f2d>
 8002f9c:	a356      	add	r3, pc, #344	; (adr r3, 80030f8 <cmd_CAL+0x200>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	f7fd fd4b 	bl	8000a3c <__aeabi_dcmpgt>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <cmd_CAL+0xc6>
		{
			EEPROM_write(gain_x2_EEPROM_ADDRESS,float_to_binary(tmpx));
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f94a 	bl	8003246 <float_to_binary>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	2028      	movs	r0, #40	; 0x28
 8002fb8:	f000 f984 	bl	80032c4 <EEPROM_write>
		}
		else return 0;
		break;
 8002fbc:	e090      	b.n	80030e0 <cmd_CAL+0x1e8>
		else return 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e091      	b.n	80030e6 <cmd_CAL+0x1ee>
	case GAIN_X4_CAL:
		if((tmpx<4.1 && tmpx>3.9))
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7fd fa52 	bl	800046c <__aeabi_f2d>
 8002fc8:	a34d      	add	r3, pc, #308	; (adr r3, 8003100 <cmd_CAL+0x208>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f7fd fd17 	bl	8000a00 <__aeabi_dcmplt>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <cmd_CAL+0x108>
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7fd fa47 	bl	800046c <__aeabi_f2d>
 8002fde:	a34a      	add	r3, pc, #296	; (adr r3, 8003108 <cmd_CAL+0x210>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f7fd fd2a 	bl	8000a3c <__aeabi_dcmpgt>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <cmd_CAL+0x108>
		{
			EEPROM_write(gain_x4_EEPROM_ADDRESS,float_to_binary(tmpx));
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f929 	bl	8003246 <float_to_binary>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	2030      	movs	r0, #48	; 0x30
 8002ffa:	f000 f963 	bl	80032c4 <EEPROM_write>
		}
		else return 0;
		break;
 8002ffe:	e06f      	b.n	80030e0 <cmd_CAL+0x1e8>
		else return 0;
 8003000:	2300      	movs	r3, #0
 8003002:	e070      	b.n	80030e6 <cmd_CAL+0x1ee>
	case DAC_CAL_TOP:
		if((tmpx<10.1 && tmpx>9.9) || (tmpx>6.8 && tmpx<7.1))
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f7fd fa31 	bl	800046c <__aeabi_f2d>
 800300a:	a341      	add	r3, pc, #260	; (adr r3, 8003110 <cmd_CAL+0x218>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f7fd fcf6 	bl	8000a00 <__aeabi_dcmplt>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <cmd_CAL+0x138>
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7fd fa26 	bl	800046c <__aeabi_f2d>
 8003020:	a33d      	add	r3, pc, #244	; (adr r3, 8003118 <cmd_CAL+0x220>)
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f7fd fd09 	bl	8000a3c <__aeabi_dcmpgt>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d115      	bne.n	800305c <cmd_CAL+0x164>
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7fd fa1b 	bl	800046c <__aeabi_f2d>
 8003036:	a33a      	add	r3, pc, #232	; (adr r3, 8003120 <cmd_CAL+0x228>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd fcfe 	bl	8000a3c <__aeabi_dcmpgt>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d013      	beq.n	800306e <cmd_CAL+0x176>
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7fd fa10 	bl	800046c <__aeabi_f2d>
 800304c:	a336      	add	r3, pc, #216	; (adr r3, 8003128 <cmd_CAL+0x230>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	f7fd fcd5 	bl	8000a00 <__aeabi_dcmplt>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <cmd_CAL+0x176>
		{
			EEPROM_write(cal_DAC_up_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f8f2 	bl	8003246 <float_to_binary>
 8003062:	4603      	mov	r3, r0
 8003064:	4619      	mov	r1, r3
 8003066:	2000      	movs	r0, #0
 8003068:	f000 f92c 	bl	80032c4 <EEPROM_write>
		}
		else return 0;
		break;
 800306c:	e038      	b.n	80030e0 <cmd_CAL+0x1e8>
		else return 0;
 800306e:	2300      	movs	r3, #0
 8003070:	e039      	b.n	80030e6 <cmd_CAL+0x1ee>
	case DAC_CAL_DOWN:
		if((tmpx>-10.1 && tmpx<-9.9) || (tmpx<-6.8 && tmpx>-7.1))
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7fd f9fa 	bl	800046c <__aeabi_f2d>
 8003078:	a32d      	add	r3, pc, #180	; (adr r3, 8003130 <cmd_CAL+0x238>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f7fd fcdd 	bl	8000a3c <__aeabi_dcmpgt>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <cmd_CAL+0x1a6>
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7fd f9ef 	bl	800046c <__aeabi_f2d>
 800308e:	a32a      	add	r3, pc, #168	; (adr r3, 8003138 <cmd_CAL+0x240>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fcb4 	bl	8000a00 <__aeabi_dcmplt>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d115      	bne.n	80030ca <cmd_CAL+0x1d2>
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7fd f9e4 	bl	800046c <__aeabi_f2d>
 80030a4:	a326      	add	r3, pc, #152	; (adr r3, 8003140 <cmd_CAL+0x248>)
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f7fd fca9 	bl	8000a00 <__aeabi_dcmplt>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d013      	beq.n	80030dc <cmd_CAL+0x1e4>
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7fd f9d9 	bl	800046c <__aeabi_f2d>
 80030ba:	a323      	add	r3, pc, #140	; (adr r3, 8003148 <cmd_CAL+0x250>)
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	f7fd fcbc 	bl	8000a3c <__aeabi_dcmpgt>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <cmd_CAL+0x1e4>
		{
			EEPROM_write(cal_DAC_down_voltage_EEPROM_ADDRESS,float_to_binary(tmpx)); // Write top voltage calibration to EEPROM in uV value
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f8bb 	bl	8003246 <float_to_binary>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4619      	mov	r1, r3
 80030d4:	2008      	movs	r0, #8
 80030d6:	f000 f8f5 	bl	80032c4 <EEPROM_write>
		}
		else return 0;
		break;
 80030da:	e001      	b.n	80030e0 <cmd_CAL+0x1e8>
		else return 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	e002      	b.n	80030e6 <cmd_CAL+0x1ee>
	}

	load_data_from_EEPROM();
 80030e0:	f000 f838 	bl	8003154 <load_data_from_EEPROM>
	return 1;
 80030e4:	2301      	movs	r3, #1
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	cccccccd 	.word	0xcccccccd
 80030f4:	4000cccc 	.word	0x4000cccc
 80030f8:	66666666 	.word	0x66666666
 80030fc:	3ffe6666 	.word	0x3ffe6666
 8003100:	66666666 	.word	0x66666666
 8003104:	40106666 	.word	0x40106666
 8003108:	33333333 	.word	0x33333333
 800310c:	400f3333 	.word	0x400f3333
 8003110:	33333333 	.word	0x33333333
 8003114:	40243333 	.word	0x40243333
 8003118:	cccccccd 	.word	0xcccccccd
 800311c:	4023cccc 	.word	0x4023cccc
 8003120:	33333333 	.word	0x33333333
 8003124:	401b3333 	.word	0x401b3333
 8003128:	66666666 	.word	0x66666666
 800312c:	401c6666 	.word	0x401c6666
 8003130:	33333333 	.word	0x33333333
 8003134:	c0243333 	.word	0xc0243333
 8003138:	cccccccd 	.word	0xcccccccd
 800313c:	c023cccc 	.word	0xc023cccc
 8003140:	33333333 	.word	0x33333333
 8003144:	c01b3333 	.word	0xc01b3333
 8003148:	66666666 	.word	0x66666666
 800314c:	c01c6666 	.word	0xc01c6666
 8003150:	0007ffff 	.word	0x0007ffff

08003154 <load_data_from_EEPROM>:
//==============================================================================================


//==============================================================================================
void load_data_from_EEPROM(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
	cal_DAC_up_voltage=binary_to_float(EEPROM_read(cal_DAC_up_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 8003158:	2000      	movs	r0, #0
 800315a:	f000 f899 	bl	8003290 <EEPROM_read>
 800315e:	4603      	mov	r3, r0
 8003160:	4618      	mov	r0, r3
 8003162:	f000 f85d 	bl	8003220 <binary_to_float>
 8003166:	4603      	mov	r3, r0
 8003168:	4a25      	ldr	r2, [pc, #148]	; (8003200 <load_data_from_EEPROM+0xac>)
 800316a:	6013      	str	r3, [r2, #0]
	cal_DAC_down_voltage=binary_to_float(EEPROM_read(cal_DAC_down_voltage_EEPROM_ADDRESS)); // Read top voltage calibration from EEPROM in uV value
 800316c:	2008      	movs	r0, #8
 800316e:	f000 f88f 	bl	8003290 <EEPROM_read>
 8003172:	4603      	mov	r3, r0
 8003174:	4618      	mov	r0, r3
 8003176:	f000 f853 	bl	8003220 <binary_to_float>
 800317a:	4603      	mov	r3, r0
 800317c:	4a21      	ldr	r2, [pc, #132]	; (8003204 <load_data_from_EEPROM+0xb0>)
 800317e:	6013      	str	r3, [r2, #0]
	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8003180:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <load_data_from_EEPROM+0xac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <load_data_from_EEPROM+0xb0>)
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd fd12 	bl	8000bb4 <__aeabi_fsub>
 8003190:	4603      	mov	r3, r0
 8003192:	461a      	mov	r2, r3
 8003194:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <load_data_from_EEPROM+0xb4>)
 8003196:	601a      	str	r2, [r3, #0]

	corr_coeff_1=binary_to_float(EEPROM_read(corr_coeff_1_EEPROM_ADDRESS));
 8003198:	2010      	movs	r0, #16
 800319a:	f000 f879 	bl	8003290 <EEPROM_read>
 800319e:	4603      	mov	r3, r0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 f83d 	bl	8003220 <binary_to_float>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4a18      	ldr	r2, [pc, #96]	; (800320c <load_data_from_EEPROM+0xb8>)
 80031aa:	6013      	str	r3, [r2, #0]
	corr_coeff_2=binary_to_float(EEPROM_read(corr_coeff_2_EEPROM_ADDRESS));
 80031ac:	2018      	movs	r0, #24
 80031ae:	f000 f86f 	bl	8003290 <EEPROM_read>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f833 	bl	8003220 <binary_to_float>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4a14      	ldr	r2, [pc, #80]	; (8003210 <load_data_from_EEPROM+0xbc>)
 80031be:	6013      	str	r3, [r2, #0]
	corr_coeff_3=binary_to_float(EEPROM_read(corr_coeff_3_EEPROM_ADDRESS));
 80031c0:	2020      	movs	r0, #32
 80031c2:	f000 f865 	bl	8003290 <EEPROM_read>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 f829 	bl	8003220 <binary_to_float>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a10      	ldr	r2, [pc, #64]	; (8003214 <load_data_from_EEPROM+0xc0>)
 80031d2:	6013      	str	r3, [r2, #0]
	gain_x2_coeff=binary_to_float(EEPROM_read(gain_x2_EEPROM_ADDRESS));
 80031d4:	2028      	movs	r0, #40	; 0x28
 80031d6:	f000 f85b 	bl	8003290 <EEPROM_read>
 80031da:	4603      	mov	r3, r0
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f81f 	bl	8003220 <binary_to_float>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <load_data_from_EEPROM+0xc4>)
 80031e6:	6013      	str	r3, [r2, #0]
	gain_x4_coeff=binary_to_float(EEPROM_read(gain_x4_EEPROM_ADDRESS));
 80031e8:	2030      	movs	r0, #48	; 0x30
 80031ea:	f000 f851 	bl	8003290 <EEPROM_read>
 80031ee:	4603      	mov	r3, r0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 f815 	bl	8003220 <binary_to_float>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4a08      	ldr	r2, [pc, #32]	; (800321c <load_data_from_EEPROM+0xc8>)
 80031fa:	6013      	str	r3, [r2, #0]
}
 80031fc:	bf00      	nop
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20000c60 	.word	0x20000c60
 8003204:	20000c64 	.word	0x20000c64
 8003208:	20000c5c 	.word	0x20000c5c
 800320c:	20000aac 	.word	0x20000aac
 8003210:	20000ab0 	.word	0x20000ab0
 8003214:	20000ab4 	.word	0x20000ab4
 8003218:	20000ab8 	.word	0x20000ab8
 800321c:	20000abc 	.word	0x20000abc

08003220 <binary_to_float>:
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC push_options
#pragma GCC optimize ("O0")

float binary_to_float(uint32_t a)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	    int * p;
	    float out=0;
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]

	    p = &out;
 800322e:	f107 0308 	add.w	r3, r7, #8
 8003232:	60fb      	str	r3, [r7, #12]
	    (*p)=a;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	601a      	str	r2, [r3, #0]
	    return out;
 800323a:	68bb      	ldr	r3, [r7, #8]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <float_to_binary>:


uint32_t float_to_binary(float a)
{
 8003246:	b480      	push	{r7}
 8003248:	b087      	sub	sp, #28
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
	    int i;
	    int * p;
	    uint32_t out=0;
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]

	    p = &a;
 8003252:	1d3b      	adds	r3, r7, #4
 8003254:	60fb      	str	r3, [r7, #12]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 8003256:	231f      	movs	r3, #31
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e010      	b.n	800327e <float_to_binary+0x38>
	    {
	    	out+=((*p) >> i & 1)<<i;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa42 f303 	asr.w	r3, r2, r3
 8003266:	f003 0201 	and.w	r2, r3, #1
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	461a      	mov	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4413      	add	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
	    for (i = sizeof(int) * 8 - 1; i >= 0; i--)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3b01      	subs	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	daeb      	bge.n	800325c <float_to_binary+0x16>
	    }

	    return out;
 8003284:	693b      	ldr	r3, [r7, #16]
}
 8003286:	4618      	mov	r0, r3
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <EEPROM_read>:
//==============================================================================================


//==============================================================================================
uint32_t EEPROM_read(uint32_t address_of_read)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	uint32_t Address;

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800329e:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80032a2:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <EEPROM_read+0x30>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d301      	bcc.n	80032b0 <EEPROM_read+0x20>
	{
		return 0x00;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e001      	b.n	80032b4 <EEPROM_read+0x24>
	}
	return *(__IO uint32_t *) Address;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	08082800 	.word	0x08082800

080032c4 <EEPROM_write>:
//==============================================================================================


//==============================================================================================
void EEPROM_write(uint32_t address_of_read, uint32_t data)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
	/* Clear all pending flags */
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR | FLASH_FLAG_OPTVERRUSR);

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
	     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80032d4:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80032d8:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <EEPROM_write+0x50>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d212      	bcs.n	8003308 <EEPROM_write+0x44>
	{
		return;
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 80032e2:	f001 fd0b 	bl	8004cfc <HAL_FLASHEx_DATAEEPROM_Unlock>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	68f9      	ldr	r1, [r7, #12]
 80032ea:	2002      	movs	r0, #2
 80032ec:	f001 fd64 	bl	8004db8 <HAL_FLASHEx_DATAEEPROM_Program>
 80032f0:	4603      	mov	r3, r0
 80032f2:	72fb      	strb	r3, [r7, #11]
	HAL_FLASHEx_DATAEEPROM_Lock();
 80032f4:	f001 fd1e 	bl	8004d34 <HAL_FLASHEx_DATAEEPROM_Lock>

	if(FLASHStatus != HAL_OK)
 80032f8:	7afb      	ldrb	r3, [r7, #11]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <EEPROM_write+0x48>
	{
		return;
	}
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR);

	if(*(__IO uint32_t *) Address != data)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	e002      	b.n	800330e <EEPROM_write+0x4a>
		return;
 8003308:	bf00      	nop
 800330a:	e000      	b.n	800330e <EEPROM_write+0x4a>
		return;
 800330c:	bf00      	nop
	{
		return;
	}

}
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	08082800 	.word	0x08082800

08003318 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332e:	4b7c      	ldr	r3, [pc, #496]	; (8003520 <MX_GPIO_Init+0x208>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	4a7b      	ldr	r2, [pc, #492]	; (8003520 <MX_GPIO_Init+0x208>)
 8003334:	f043 0304 	orr.w	r3, r3, #4
 8003338:	61d3      	str	r3, [r2, #28]
 800333a:	4b79      	ldr	r3, [pc, #484]	; (8003520 <MX_GPIO_Init+0x208>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003346:	4b76      	ldr	r3, [pc, #472]	; (8003520 <MX_GPIO_Init+0x208>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	4a75      	ldr	r2, [pc, #468]	; (8003520 <MX_GPIO_Init+0x208>)
 800334c:	f043 0320 	orr.w	r3, r3, #32
 8003350:	61d3      	str	r3, [r2, #28]
 8003352:	4b73      	ldr	r3, [pc, #460]	; (8003520 <MX_GPIO_Init+0x208>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800335e:	4b70      	ldr	r3, [pc, #448]	; (8003520 <MX_GPIO_Init+0x208>)
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	4a6f      	ldr	r2, [pc, #444]	; (8003520 <MX_GPIO_Init+0x208>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	61d3      	str	r3, [r2, #28]
 800336a:	4b6d      	ldr	r3, [pc, #436]	; (8003520 <MX_GPIO_Init+0x208>)
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003376:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <MX_GPIO_Init+0x208>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	4a69      	ldr	r2, [pc, #420]	; (8003520 <MX_GPIO_Init+0x208>)
 800337c:	f043 0302 	orr.w	r3, r3, #2
 8003380:	61d3      	str	r3, [r2, #28]
 8003382:	4b67      	ldr	r3, [pc, #412]	; (8003520 <MX_GPIO_Init+0x208>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Count_EN_GPIO_Port, Count_EN_Pin, GPIO_PIN_RESET);
 800338e:	2200      	movs	r2, #0
 8003390:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003394:	4863      	ldr	r0, [pc, #396]	; (8003524 <MX_GPIO_Init+0x20c>)
 8003396:	f002 f900 	bl	800559a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_cs_GPIO_Port, Relay_cs_Pin, GPIO_PIN_SET);
 800339a:	2201      	movs	r2, #1
 800339c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033a0:	4860      	ldr	r0, [pc, #384]	; (8003524 <MX_GPIO_Init+0x20c>)
 80033a2:	f002 f8fa 	bl	800559a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 80033a6:	2201      	movs	r2, #1
 80033a8:	f248 011f 	movw	r1, #32799	; 0x801f
 80033ac:	485e      	ldr	r0, [pc, #376]	; (8003528 <MX_GPIO_Init+0x210>)
 80033ae:	f002 f8f4 	bl	800559a <HAL_GPIO_WritePin>
                          |DAC_SYNC_Pin|DAC_CLR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RS_Pin|Display_Power_Pin, GPIO_PIN_RESET);
 80033b2:	2200      	movs	r2, #0
 80033b4:	f640 0101 	movw	r1, #2049	; 0x801
 80033b8:	485c      	ldr	r0, [pc, #368]	; (800352c <MX_GPIO_Init+0x214>)
 80033ba:	f002 f8ee 	bl	800559a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|SPI2_NSS_Pin
 80033be:	2201      	movs	r2, #1
 80033c0:	f241 413e 	movw	r1, #5182	; 0x143e
 80033c4:	4859      	ldr	r0, [pc, #356]	; (800352c <MX_GPIO_Init+0x214>)
 80033c6:	f002 f8e8 	bl	800559a <HAL_GPIO_WritePin>
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Start_button_Pin;
 80033ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80033d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033d6:	2301      	movs	r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Start_button_GPIO_Port, &GPIO_InitStruct);
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	4619      	mov	r1, r3
 80033e0:	4850      	ldr	r0, [pc, #320]	; (8003524 <MX_GPIO_Init+0x20c>)
 80033e2:	f001 ff43 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Count_EN_Pin;
 80033e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ec:	2301      	movs	r3, #1
 80033ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033f4:	2302      	movs	r3, #2
 80033f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Count_EN_GPIO_Port, &GPIO_InitStruct);
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	4619      	mov	r1, r3
 80033fe:	4849      	ldr	r0, [pc, #292]	; (8003524 <MX_GPIO_Init+0x20c>)
 8003400:	f001 ff34 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_cs_Pin;
 8003404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340a:	2301      	movs	r3, #1
 800340c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_cs_GPIO_Port, &GPIO_InitStruct);
 8003416:	f107 0314 	add.w	r3, r7, #20
 800341a:	4619      	mov	r1, r3
 800341c:	4841      	ldr	r0, [pc, #260]	; (8003524 <MX_GPIO_Init+0x20c>)
 800341e:	f001 ff25 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Control_bus_0_Pin|Control_bus_1_Pin|Control_bus_2_Pin|Control_bus_3_Pin
 8003422:	f248 030f 	movw	r3, #32783	; 0x800f
 8003426:	617b      	str	r3, [r7, #20]
                          |DAC_CLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003428:	2301      	movs	r3, #1
 800342a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003430:	2303      	movs	r3, #3
 8003432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	4619      	mov	r1, r3
 800343a:	483b      	ldr	r0, [pc, #236]	; (8003528 <MX_GPIO_Init+0x210>)
 800343c:	f001 ff16 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8003440:	2310      	movs	r3, #16
 8003442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003444:	2301      	movs	r3, #1
 8003446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003448:	2301      	movs	r3, #1
 800344a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344c:	2303      	movs	r3, #3
 800344e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	4619      	mov	r1, r3
 8003456:	4834      	ldr	r0, [pc, #208]	; (8003528 <MX_GPIO_Init+0x210>)
 8003458:	f001 ff08 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Display_RS_Pin;
 800345c:	2301      	movs	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003460:	2301      	movs	r3, #1
 8003462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003468:	2302      	movs	r3, #2
 800346a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Display_RS_GPIO_Port, &GPIO_InitStruct);
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4619      	mov	r1, r3
 8003472:	482e      	ldr	r0, [pc, #184]	; (800352c <MX_GPIO_Init+0x214>)
 8003474:	f001 fefa 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Display_RW_Pin|Display_DB4_Pin|Display_EN_Pin|Display_Power_Pin
 8003478:	f640 433e 	movw	r3, #3134	; 0xc3e
 800347c:	617b      	str	r3, [r7, #20]
                          |Display_DB5_Pin|Display_DB6_Pin|Display_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800347e:	2311      	movs	r3, #17
 8003480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003486:	2302      	movs	r3, #2
 8003488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4619      	mov	r1, r3
 8003490:	4826      	ldr	r0, [pc, #152]	; (800352c <MX_GPIO_Init+0x214>)
 8003492:	f001 feeb 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8003496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800349a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349c:	2301      	movs	r3, #1
 800349e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a4:	2303      	movs	r3, #3
 80034a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80034a8:	f107 0314 	add.w	r3, r7, #20
 80034ac:	4619      	mov	r1, r3
 80034ae:	481f      	ldr	r0, [pc, #124]	; (800352c <MX_GPIO_Init+0x214>)
 80034b0:	f001 fedc 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encode_Push_Pin;
 80034b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80034be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c0:	2301      	movs	r3, #1
 80034c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encode_Push_GPIO_Port, &GPIO_InitStruct);
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	4619      	mov	r1, r3
 80034ca:	4817      	ldr	r0, [pc, #92]	; (8003528 <MX_GPIO_Init+0x210>)
 80034cc:	f001 fece 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4619      	mov	r1, r3
 80034e6:	4810      	ldr	r0, [pc, #64]	; (8003528 <MX_GPIO_Init+0x210>)
 80034e8:	f001 fec0 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 80034ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	4619      	mov	r1, r3
 8003500:	4809      	ldr	r0, [pc, #36]	; (8003528 <MX_GPIO_Init+0x210>)
 8003502:	f001 feb3 	bl	800526c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	2101      	movs	r1, #1
 800350a:	2028      	movs	r0, #40	; 0x28
 800350c:	f001 fad9 	bl	8004ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003510:	2028      	movs	r0, #40	; 0x28
 8003512:	f001 faf2 	bl	8004afa <HAL_NVIC_EnableIRQ>

}
 8003516:	bf00      	nop
 8003518:	3728      	adds	r7, #40	; 0x28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	40020800 	.word	0x40020800
 8003528:	40020000 	.word	0x40020000
 800352c:	40020400 	.word	0x40020400

08003530 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <MX_I2C1_Init+0x50>)
 8003536:	4a13      	ldr	r2, [pc, #76]	; (8003584 <MX_I2C1_Init+0x54>)
 8003538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <MX_I2C1_Init+0x50>)
 800353c:	4a12      	ldr	r2, [pc, #72]	; (8003588 <MX_I2C1_Init+0x58>)
 800353e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <MX_I2C1_Init+0x50>)
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <MX_I2C1_Init+0x50>)
 8003548:	2200      	movs	r2, #0
 800354a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <MX_I2C1_Init+0x50>)
 800354e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003554:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <MX_I2C1_Init+0x50>)
 8003556:	2200      	movs	r2, #0
 8003558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800355a:	4b09      	ldr	r3, [pc, #36]	; (8003580 <MX_I2C1_Init+0x50>)
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <MX_I2C1_Init+0x50>)
 8003562:	2200      	movs	r2, #0
 8003564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <MX_I2C1_Init+0x50>)
 8003568:	2200      	movs	r2, #0
 800356a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800356c:	4804      	ldr	r0, [pc, #16]	; (8003580 <MX_I2C1_Init+0x50>)
 800356e:	f002 f845 	bl	80055fc <HAL_I2C_Init>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003578:	f000 fcde 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000bc4 	.word	0x20000bc4
 8003584:	40005400 	.word	0x40005400
 8003588:	000186a0 	.word	0x000186a0

0800358c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <HAL_I2C_MspInit+0x7c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d128      	bne.n	8003600 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	4b17      	ldr	r3, [pc, #92]	; (800360c <HAL_I2C_MspInit+0x80>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <HAL_I2C_MspInit+0x80>)
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	61d3      	str	r3, [r2, #28]
 80035ba:	4b14      	ldr	r3, [pc, #80]	; (800360c <HAL_I2C_MspInit+0x80>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TMP117_SCL_Pin|TMP117_SDA_Pin;
 80035c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035cc:	2312      	movs	r3, #18
 80035ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035d0:	2301      	movs	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d4:	2303      	movs	r3, #3
 80035d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035d8:	2304      	movs	r3, #4
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	4619      	mov	r1, r3
 80035e2:	480b      	ldr	r0, [pc, #44]	; (8003610 <HAL_I2C_MspInit+0x84>)
 80035e4:	f001 fe42 	bl	800526c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035e8:	4b08      	ldr	r3, [pc, #32]	; (800360c <HAL_I2C_MspInit+0x80>)
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	4a07      	ldr	r2, [pc, #28]	; (800360c <HAL_I2C_MspInit+0x80>)
 80035ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035f2:	6253      	str	r3, [r2, #36]	; 0x24
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_I2C_MspInit+0x80>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003600:	bf00      	nop
 8003602:	3728      	adds	r7, #40	; 0x28
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40005400 	.word	0x40005400
 800360c:	40023800 	.word	0x40023800
 8003610:	40020400 	.word	0x40020400

08003614 <USB_rx_command_buffer_push_refd>:

uint8_t eta_hours,eta_minute,eta_second;

int16_t Enc_Counter = 0;

CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4804      	ldr	r0, [pc, #16]	; (8003630 <USB_rx_command_buffer_push_refd+0x1c>)
 8003620:	f7fd ffc6 	bl	80015b0 <__circ_gbuf_push>
 8003624:	4603      	mov	r3, r0
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000728 	.word	0x20000728

08003634 <USB_rx_command_buffer_pop_refd>:
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4803      	ldr	r0, [pc, #12]	; (8003650 <USB_rx_command_buffer_pop_refd+0x1c>)
 8003642:	f7fd ff63 	bl	800150c <__circ_gbuf_pop>
 8003646:	4603      	mov	r3, r0
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000728 	.word	0x20000728

08003654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b095      	sub	sp, #84	; 0x54
 8003658:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 800365a:	4b57      	ldr	r3, [pc, #348]	; (80037b8 <main+0x164>)
 800365c:	2200      	movs	r2, #0
 800365e:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 8003660:	4b55      	ldr	r3, [pc, #340]	; (80037b8 <main+0x164>)
 8003662:	2208      	movs	r2, #8
 8003664:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8003666:	4b54      	ldr	r3, [pc, #336]	; (80037b8 <main+0x164>)
 8003668:	2201      	movs	r2, #1
 800366a:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 800366c:	4b52      	ldr	r3, [pc, #328]	; (80037b8 <main+0x164>)
 800366e:	2201      	movs	r2, #1
 8003670:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 8003672:	4b51      	ldr	r3, [pc, #324]	; (80037b8 <main+0x164>)
 8003674:	2200      	movs	r2, #0
 8003676:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8003678:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <main+0x164>)
 800367a:	2200      	movs	r2, #0
 800367c:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 800367e:	4b4e      	ldr	r3, [pc, #312]	; (80037b8 <main+0x164>)
 8003680:	2200      	movs	r2, #0
 8003682:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 8003684:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <main+0x164>)
 8003686:	2200      	movs	r2, #0
 8003688:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 800368a:	4b4b      	ldr	r3, [pc, #300]	; (80037b8 <main+0x164>)
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]

	DAC_target_speed=0.01; //  V/s
 8003690:	4b4a      	ldr	r3, [pc, #296]	; (80037bc <main+0x168>)
 8003692:	4a4b      	ldr	r2, [pc, #300]	; (80037c0 <main+0x16c>)
 8003694:	601a      	str	r2, [r3, #0]
	DAC_code=DAC_CODE_MIDDLE;
 8003696:	4b4b      	ldr	r3, [pc, #300]	; (80037c4 <main+0x170>)
 8003698:	4a4b      	ldr	r2, [pc, #300]	; (80037c8 <main+0x174>)
 800369a:	601a      	str	r2, [r3, #0]
	DAC_code_direction=1;
 800369c:	4b4b      	ldr	r3, [pc, #300]	; (80037cc <main+0x178>)
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036a2:	f001 f8a6 	bl	80047f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036a6:	f000 f8a5 	bl	80037f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036aa:	f7ff fe35 	bl	8003318 <MX_GPIO_Init>
  MX_SPI1_Init();
 80036ae:	f000 fc49 	bl	8003f44 <MX_SPI1_Init>
  MX_SPI2_Init();
 80036b2:	f000 fc7b 	bl	8003fac <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80036b6:	f00a fa07 	bl	800dac8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80036ba:	f000 fef1 	bl	80044a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80036be:	f000 ff3d 	bl	800453c <MX_TIM4_Init>
  MX_I2C1_Init();
 80036c2:	f7ff ff35 	bl	8003530 <MX_I2C1_Init>
  MX_TIM2_Init();
 80036c6:	f000 fe9f 	bl	8004408 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80036ca:	f000 f8df 	bl	800388c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  init_LCD();
 80036ce:	f7fe ff19 	bl	8002504 <init_LCD>
  LcdUpdate();
  LcdClear_massive();
  HAL_Delay(3000); //WarmUP
*/

  load_data_from_EEPROM();
 80036d2:	f7ff fd3f 	bl	8003154 <load_data_from_EEPROM>
  TMP117_Initialization(hi2c1);
 80036d6:	4c3e      	ldr	r4, [pc, #248]	; (80037d0 <main+0x17c>)
 80036d8:	4668      	mov	r0, sp
 80036da:	f104 0310 	add.w	r3, r4, #16
 80036de:	2244      	movs	r2, #68	; 0x44
 80036e0:	4619      	mov	r1, r3
 80036e2:	f00a ff97 	bl	800e614 <memcpy>
 80036e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80036ea:	f001 f82b 	bl	8004744 <TMP117_Initialization>
  DDS_Init();
 80036ee:	f7fe fb8d 	bl	8001e0c <DDS_Init>
  DAC_SendInit();
 80036f2:	f7fe f973 	bl	80019dc <DAC_SendInit>
  DAC_Write(DAC_code);
 80036f6:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <main+0x170>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe f914 	bl	8001928 <DAC_Write>

  HAL_TIM_Base_Start_IT(&htim3);
 8003700:	4834      	ldr	r0, [pc, #208]	; (80037d4 <main+0x180>)
 8003702:	f005 fcb3 	bl	800906c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8003706:	4834      	ldr	r0, [pc, #208]	; (80037d8 <main+0x184>)
 8003708:	f005 fcb0 	bl	800906c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800370c:	213c      	movs	r1, #60	; 0x3c
 800370e:	4833      	ldr	r0, [pc, #204]	; (80037dc <main+0x188>)
 8003710:	f005 fd9c 	bl	800924c <HAL_TIM_Encoder_Start>


  output_state(Output_off_STATE);
 8003714:	2000      	movs	r0, #0
 8003716:	f7ff f82f 	bl	8002778 <output_state>
  CPLD_control(CPLD_OFF_STATE);
 800371a:	2000      	movs	r0, #0
 800371c:	f7fe f870 	bl	8001800 <CPLD_control>

  send_answer_to_CDC(CLEAR_TYPE_1);
 8003720:	2004      	movs	r0, #4
 8003722:	f7ff f981 	bl	8002a28 <send_answer_to_CDC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(USB_CDC_End_Line_Received)
 8003726:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <main+0x18c>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d021      	beq.n	8003774 <main+0x120>
		{
			uint8_t i=0;
 8003730:	2300      	movs	r3, #0
 8003732:	71fb      	strb	r3, [r7, #7]
			USB_CDC_End_Line_Received=0;
 8003734:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <main+0x18c>)
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
			while (1) {
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	4a29      	ldr	r2, [pc, #164]	; (80037e4 <main+0x190>)
 800373e:	4413      	add	r3, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff77 	bl	8003634 <USB_rx_command_buffer_pop_refd>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <main+0x100>
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <main+0x190>)
 8003750:	210a      	movs	r1, #10
 8003752:	54d1      	strb	r1, [r2, r3]
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <main+0x190>)
 8003758:	5cd3      	ldrb	r3, [r2, r3]
 800375a:	2b0a      	cmp	r3, #10
 800375c:	d008      	beq.n	8003770 <main+0x11c>
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	4a20      	ldr	r2, [pc, #128]	; (80037e4 <main+0x190>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	2b0d      	cmp	r3, #13
 8003766:	d003      	beq.n	8003770 <main+0x11c>
				i++;
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	3301      	adds	r3, #1
 800376c:	71fb      	strb	r3, [r7, #7]
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 800376e:	e7e4      	b.n	800373a <main+0xe6>
			}
			Parsing_USB_command();
 8003770:	f000 f948 	bl	8003a04 <Parsing_USB_command>
		}

		if(Need_update_DDS)
 8003774:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <main+0x194>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00d      	beq.n	8003798 <main+0x144>
		{
			if(Ramp_dac_step_complete)
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <main+0x198>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <main+0x140>
			{
				DDS_Update();
 8003784:	f7fe fc1e 	bl	8001fc4 <DDS_Update>
				Need_update_DDS=0;
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <main+0x194>)
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
				Ramp_dac_step_complete=0;
 800378e:	4b17      	ldr	r3, [pc, #92]	; (80037ec <main+0x198>)
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
			}
			DDS_Calculation();
 8003794:	f7fe fa1a 	bl	8001bcc <DDS_Calculation>

		}
		if(Need_update_Display)
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <main+0x19c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0c2      	beq.n	8003726 <main+0xd2>
		{
			display_screen(dU_dt_SCREEN);
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7ff f881 	bl	80028a8 <display_screen>
			LcdUpdate();
 80037a6:	f7fe fcd5 	bl	8002154 <LcdUpdate>
			LcdClear_massive();
 80037aa:	f7fe fd07 	bl	80021bc <LcdClear_massive>
			Need_update_Display=0;
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <main+0x19c>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
		if(USB_CDC_End_Line_Received)
 80037b4:	e7b7      	b.n	8003726 <main+0xd2>
 80037b6:	bf00      	nop
 80037b8:	20000c44 	.word	0x20000c44
 80037bc:	20000c58 	.word	0x20000c58
 80037c0:	3c23d70a 	.word	0x3c23d70a
 80037c4:	20000c6c 	.word	0x20000c6c
 80037c8:	0007ffff 	.word	0x0007ffff
 80037cc:	20000c70 	.word	0x20000c70
 80037d0:	20000bc4 	.word	0x20000bc4
 80037d4:	20000d68 	.word	0x20000d68
 80037d8:	20000d28 	.word	0x20000d28
 80037dc:	20000da8 	.word	0x20000da8
 80037e0:	20000ba0 	.word	0x20000ba0
 80037e4:	20000ba4 	.word	0x20000ba4
 80037e8:	20000c72 	.word	0x20000c72
 80037ec:	20000c73 	.word	0x20000c73
 80037f0:	20000c71 	.word	0x20000c71

080037f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b092      	sub	sp, #72	; 0x48
 80037f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037fa:	f107 0314 	add.w	r3, r7, #20
 80037fe:	2234      	movs	r2, #52	; 0x34
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f00a ff14 	bl	800e630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003808:	463b      	mov	r3, r7
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	609a      	str	r2, [r3, #8]
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003816:	4b1c      	ldr	r3, [pc, #112]	; (8003888 <SystemClock_Config+0x94>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800381e:	4a1a      	ldr	r2, [pc, #104]	; (8003888 <SystemClock_Config+0x94>)
 8003820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003824:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003826:	2301      	movs	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800382a:	2301      	movs	r3, #1
 800382c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800382e:	2302      	movs	r3, #2
 8003830:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003838:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800383c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800383e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003842:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	4618      	mov	r0, r3
 800384a:	f003 ff4d 	bl	80076e8 <HAL_RCC_OscConfig>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8003854:	f000 fb70 	bl	8003f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003858:	230f      	movs	r3, #15
 800385a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800385c:	2303      	movs	r3, #3
 800385e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003860:	2300      	movs	r3, #0
 8003862:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800386c:	463b      	mov	r3, r7
 800386e:	2101      	movs	r1, #1
 8003870:	4618      	mov	r0, r3
 8003872:	f004 fa69 	bl	8007d48 <HAL_RCC_ClockConfig>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800387c:	f000 fb5c 	bl	8003f38 <Error_Handler>
  }
}
 8003880:	bf00      	nop
 8003882:	3748      	adds	r7, #72	; 0x48
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40007000 	.word	0x40007000

0800388c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003890:	2200      	movs	r2, #0
 8003892:	2100      	movs	r1, #0
 8003894:	2017      	movs	r0, #23
 8003896:	f001 f914 	bl	8004ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800389a:	2017      	movs	r0, #23
 800389c:	f001 f92d 	bl	8004afa <HAL_NVIC_EnableIRQ>
}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_PeriodElapsedCallback>:
//==============================================================================================


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	if (htim == &htim3 )// INL correction, each 500ms
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d106      	bne.n	80038c2 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		if(cfg.LDACMODE==1)Need_update_DDS=1;
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80038b6:	789b      	ldrb	r3, [r3, #2]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d102      	bne.n	80038c2 <HAL_TIM_PeriodElapsedCallback+0x1e>
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim2 )//User interface workload, each 10ms
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d102      	bne.n	80038d0 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		Need_update_Display=1;
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
	}

}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000d68 	.word	0x20000d68
 80038e0:	20000c44 	.word	0x20000c44
 80038e4:	20000c72 	.word	0x20000c72
 80038e8:	20000d28 	.word	0x20000d28
 80038ec:	20000c71 	.word	0x20000c71

080038f0 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	80fb      	strh	r3, [r7, #6]
	DAC_Write_FAST();
 80038fa:	f7fe f855 	bl	80019a8 <DAC_Write_FAST>
	Ramp_dac_step_complete=1;
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_GPIO_EXTI_Callback+0xfc>)
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_9)
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390a:	d16b      	bne.n	80039e4 <HAL_GPIO_EXTI_Callback+0xf4>
	{
		if(DAC_code_direction)
 800390c:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x100>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d035      	beq.n	8003980 <HAL_GPIO_EXTI_Callback+0x90>
		{
			if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 8003914:	4b37      	ldr	r3, [pc, #220]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x104>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 800391c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003920:	4a35      	ldr	r2, [pc, #212]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	4293      	cmp	r3, r2
 8003926:	d322      	bcc.n	800396e <HAL_GPIO_EXTI_Callback+0x7e>
			{
				DAC_code+=DDS_target_multipiller;
 8003928:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x108>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x104>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4413      	add	r3, r2
 8003932:	4a31      	ldr	r2, [pc, #196]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003934:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8003936:	4b31      	ldr	r3, [pc, #196]	; (80039fc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800393c:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 800393e:	4b2e      	ldr	r3, [pc, #184]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003948:	f023 030f 	bic.w	r3, r3, #15
 800394c:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <HAL_GPIO_EXTI_Callback+0x10c>)
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	4413      	add	r3, r2
 8003952:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003954:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8003956:	4b29      	ldr	r3, [pc, #164]	; (80039fc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	b29a      	uxth	r2, r3
 800395e:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <HAL_GPIO_EXTI_Callback+0x110>)
 8003960:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8003962:	4b26      	ldr	r3, [pc, #152]	; (80039fc <HAL_GPIO_EXTI_Callback+0x10c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	b29a      	uxth	r2, r3
 8003968:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <HAL_GPIO_EXTI_Callback+0x110>)
 800396a:	805a      	strh	r2, [r3, #2]
 800396c:	e03a      	b.n	80039e4 <HAL_GPIO_EXTI_Callback+0xf4>

			} else  {
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 800396e:	2000      	movs	r0, #0
 8003970:	f7fd ff46 	bl	8001800 <CPLD_control>
				DAC_SendInit();
 8003974:	f7fe f832 	bl	80019dc <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 8003978:	2005      	movs	r0, #5
 800397a:	f7ff f855 	bl	8002a28 <send_answer_to_CDC>
				return;
 800397e:	e031      	b.n	80039e4 <HAL_GPIO_EXTI_Callback+0xf4>
			}
		}
		else
		{
			if(DAC_code>=DDS_target_multipiller)
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x104>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d322      	bcc.n	80039d2 <HAL_GPIO_EXTI_Callback+0xe2>
			{
				DAC_code-=DDS_target_multipiller;
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x108>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x104>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x108>)
 8003998:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 800399a:	4b18      	ldr	r3, [pc, #96]	; (80039fc <HAL_GPIO_EXTI_Callback+0x10c>)
 800399c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039a0:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x108>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039ac:	f023 030f 	bic.w	r3, r3, #15
 80039b0:	4a12      	ldr	r2, [pc, #72]	; (80039fc <HAL_GPIO_EXTI_Callback+0x10c>)
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	4413      	add	r3, r2
 80039b6:	4a11      	ldr	r2, [pc, #68]	; (80039fc <HAL_GPIO_EXTI_Callback+0x10c>)
 80039b8:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_GPIO_EXTI_Callback+0x10c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <HAL_GPIO_EXTI_Callback+0x110>)
 80039c4:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <HAL_GPIO_EXTI_Callback+0x10c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <HAL_GPIO_EXTI_Callback+0x110>)
 80039ce:	805a      	strh	r2, [r3, #2]
 80039d0:	e008      	b.n	80039e4 <HAL_GPIO_EXTI_Callback+0xf4>

			} else {
				CPLD_control(CPLD_OFF_STATE); // Disable LDAC signal
 80039d2:	2000      	movs	r0, #0
 80039d4:	f7fd ff14 	bl	8001800 <CPLD_control>
				DAC_SendInit();
 80039d8:	f7fe f800 	bl	80019dc <DAC_SendInit>
				send_answer_to_CDC(DONE_TYPE_1);
 80039dc:	2005      	movs	r0, #5
 80039de:	f7ff f823 	bl	8002a28 <send_answer_to_CDC>
				return;
 80039e2:	bf00      	nop
			}
		}
	}
}
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000c73 	.word	0x20000c73
 80039f0:	20000c70 	.word	0x20000c70
 80039f4:	20000734 	.word	0x20000734
 80039f8:	20000c6c 	.word	0x20000c6c
 80039fc:	20000c3c 	.word	0x20000c3c
 8003a00:	20000c40 	.word	0x20000c40

08003a04 <Parsing_USB_command>:

void Parsing_USB_command(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b092      	sub	sp, #72	; 0x48
 8003a08:	af00      	add	r7, sp, #0
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];

	found = strtok((char *)command_buffer," ");
 8003a0a:	49c3      	ldr	r1, [pc, #780]	; (8003d18 <Parsing_USB_command+0x314>)
 8003a0c:	48c3      	ldr	r0, [pc, #780]	; (8003d1c <Parsing_USB_command+0x318>)
 8003a0e:	f00c f8b7 	bl	800fb80 <strtok>
 8003a12:	6438      	str	r0, [r7, #64]	; 0x40
	if(found!=NULL)
 8003a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00e      	beq.n	8003a38 <Parsing_USB_command+0x34>
	{
		strcpy(decoded_string_1,found);
 8003a1a:	f107 0320 	add.w	r3, r7, #32
 8003a1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a20:	4618      	mov	r0, r3
 8003a22:	f00b fa8d 	bl	800ef40 <strcpy>
	{
		send_answer_to_CDC(ERROR_TYPE_1);
		return;
	}

	found = strtok(NULL,"\r");
 8003a26:	49be      	ldr	r1, [pc, #760]	; (8003d20 <Parsing_USB_command+0x31c>)
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f00c f8a9 	bl	800fb80 <strtok>
 8003a2e:	6438      	str	r0, [r7, #64]	; 0x40
	if(found!=NULL)
 8003a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d023      	beq.n	8003a7e <Parsing_USB_command+0x7a>
 8003a36:	e003      	b.n	8003a40 <Parsing_USB_command+0x3c>
		send_answer_to_CDC(ERROR_TYPE_1);
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f7fe fff5 	bl	8002a28 <send_answer_to_CDC>
		return;
 8003a3e:	e24f      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
	{
		strcpy(decoded_string_2,found);
 8003a40:	463b      	mov	r3, r7
 8003a42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a44:	4618      	mov	r0, r3
 8003a46:	f00b fa7b 	bl	800ef40 <strcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4e:	e00d      	b.n	8003a6c <Parsing_USB_command+0x68>
 8003a50:	463a      	mov	r2, r7
 8003a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a54:	4413      	add	r3, r2
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d104      	bne.n	8003a66 <Parsing_USB_command+0x62>
 8003a5c:	463a      	mov	r2, r7
 8003a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a60:	4413      	add	r3, r2
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a68:	3301      	adds	r3, #1
 8003a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc fb90 	bl	8000194 <strlen>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d8e9      	bhi.n	8003a50 <Parsing_USB_command+0x4c>
 8003a7c:	e003      	b.n	8003a86 <Parsing_USB_command+0x82>
	}
	else
	{
		send_answer_to_CDC(ERROR_TYPE_1);
 8003a7e:	2000      	movs	r0, #0
 8003a80:	f7fe ffd2 	bl	8002a28 <send_answer_to_CDC>
		return;
 8003a84:	e22c      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8003a86:	f107 0320 	add.w	r3, r7, #32
 8003a8a:	49a6      	ldr	r1, [pc, #664]	; (8003d24 <Parsing_USB_command+0x320>)
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fc fb77 	bl	8000180 <strcmp>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d11f      	bne.n	8003ad8 <Parsing_USB_command+0xd4>
	{
		if(!(strcmp(decoded_string_2,"START")))
 8003a98:	463b      	mov	r3, r7
 8003a9a:	49a3      	ldr	r1, [pc, #652]	; (8003d28 <Parsing_USB_command+0x324>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fc fb6f 	bl	8000180 <strcmp>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d105      	bne.n	8003ab4 <Parsing_USB_command+0xb0>
		{
			cmd_SWEEP_START();
 8003aa8:	f7ff f890 	bl	8002bcc <cmd_SWEEP_START>
			send_answer_to_CDC(OK_TYPE_2);
 8003aac:	2003      	movs	r0, #3
 8003aae:	f7fe ffbb 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003ab2:	e215      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP")))
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	499d      	ldr	r1, [pc, #628]	; (8003d2c <Parsing_USB_command+0x328>)
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fc fb61 	bl	8000180 <strcmp>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <Parsing_USB_command+0xcc>
			{
				cmd_SWEEP_STOP();
 8003ac4:	f7ff f88f 	bl	8002be6 <cmd_SWEEP_STOP>
				send_answer_to_CDC(OK_TYPE_2);
 8003ac8:	2003      	movs	r0, #3
 8003aca:	f7fe ffad 	bl	8002a28 <send_answer_to_CDC>
				return;
 8003ace:	e207      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7fe ffa9 	bl	8002a28 <send_answer_to_CDC>
				return;
 8003ad6:	e203      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 8003ad8:	f107 0320 	add.w	r3, r7, #32
 8003adc:	4994      	ldr	r1, [pc, #592]	; (8003d30 <Parsing_USB_command+0x32c>)
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fc fb4e 	bl	8000180 <strcmp>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d136      	bne.n	8003b58 <Parsing_USB_command+0x154>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 8003aea:	463b      	mov	r3, r7
 8003aec:	4991      	ldr	r1, [pc, #580]	; (8003d34 <Parsing_USB_command+0x330>)
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc fb46 	bl	8000180 <strcmp>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <Parsing_USB_command+0x104>
			cmd_DAC_SET(DAC_CODE_TOP);
 8003afa:	488f      	ldr	r0, [pc, #572]	; (8003d38 <Parsing_USB_command+0x334>)
 8003afc:	f7ff f87c 	bl	8002bf8 <cmd_DAC_SET>
			send_answer_to_CDC(OK_TYPE_2);
 8003b00:	2003      	movs	r0, #3
 8003b02:	f7fe ff91 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003b06:	e1eb      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8003b08:	463b      	mov	r3, r7
 8003b0a:	498c      	ldr	r1, [pc, #560]	; (8003d3c <Parsing_USB_command+0x338>)
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fc fb37 	bl	8000180 <strcmp>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <Parsing_USB_command+0x122>
				cmd_DAC_SET(DAC_CODE_DOWN);
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f7ff f86d 	bl	8002bf8 <cmd_DAC_SET>
				send_answer_to_CDC(OK_TYPE_2);
 8003b1e:	2003      	movs	r0, #3
 8003b20:	f7fe ff82 	bl	8002a28 <send_answer_to_CDC>
				return;
 8003b24:	e1dc      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
			}
			else
			{
				if(cmd_SET_OUTPUT_VOLTAGE(atof(decoded_string_2)))
 8003b26:	463b      	mov	r3, r7
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f00a fd45 	bl	800e5b8 <atof>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	f7fc ffe9 	bl	8000b0c <__aeabi_d2f>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff f887 	bl	8002c50 <cmd_SET_OUTPUT_VOLTAGE>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <Parsing_USB_command+0x14c>
				{
					send_answer_to_CDC(OK_TYPE_2);
 8003b48:	2003      	movs	r0, #3
 8003b4a:	f7fe ff6d 	bl	8002a28 <send_answer_to_CDC>
					return;
 8003b4e:	e1c7      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
				}
				else
				{
					send_answer_to_CDC(ERROR_TYPE_2);
 8003b50:	2001      	movs	r0, #1
 8003b52:	f7fe ff69 	bl	8002a28 <send_answer_to_CDC>
					return;
 8003b56:	e1c3      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
	}


	// ==== OUTPUT command ====
	if(!(strcmp(decoded_string_1,"OUTPUT")))
 8003b58:	f107 0320 	add.w	r3, r7, #32
 8003b5c:	4978      	ldr	r1, [pc, #480]	; (8003d40 <Parsing_USB_command+0x33c>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fc fb0e 	bl	8000180 <strcmp>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d13f      	bne.n	8003bea <Parsing_USB_command+0x1e6>
	{
		if(!(strcmp(decoded_string_2,"OFF"))){
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	4975      	ldr	r1, [pc, #468]	; (8003d44 <Parsing_USB_command+0x340>)
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fc fb06 	bl	8000180 <strcmp>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <Parsing_USB_command+0x184>
			output_state(Output_off_STATE);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f7fe fdfc 	bl	8002778 <output_state>
			send_answer_to_CDC(OK_TYPE_2);
 8003b80:	2003      	movs	r0, #3
 8003b82:	f7fe ff51 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003b86:	e1ab      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"X1"))){
 8003b88:	463b      	mov	r3, r7
 8003b8a:	496f      	ldr	r1, [pc, #444]	; (8003d48 <Parsing_USB_command+0x344>)
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fc faf7 	bl	8000180 <strcmp>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <Parsing_USB_command+0x1a2>
				output_state(Output_x1_STATE);
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f7fe fded 	bl	8002778 <output_state>
				send_answer_to_CDC(OK_TYPE_2);
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	f7fe ff42 	bl	8002a28 <send_answer_to_CDC>
				return;
 8003ba4:	e19c      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
			}
			else
			{
				if(!(strcmp(decoded_string_2,"X2"))){
 8003ba6:	463b      	mov	r3, r7
 8003ba8:	4968      	ldr	r1, [pc, #416]	; (8003d4c <Parsing_USB_command+0x348>)
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fae8 	bl	8000180 <strcmp>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <Parsing_USB_command+0x1c0>
					output_state(Output_x2_STATE);
 8003bb6:	2002      	movs	r0, #2
 8003bb8:	f7fe fdde 	bl	8002778 <output_state>
					send_answer_to_CDC(OK_TYPE_2);
 8003bbc:	2003      	movs	r0, #3
 8003bbe:	f7fe ff33 	bl	8002a28 <send_answer_to_CDC>
					return;
 8003bc2:	e18d      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
				}
				else
				{
					if(!(strcmp(decoded_string_2,"X4"))){
 8003bc4:	463b      	mov	r3, r7
 8003bc6:	4962      	ldr	r1, [pc, #392]	; (8003d50 <Parsing_USB_command+0x34c>)
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fc fad9 	bl	8000180 <strcmp>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <Parsing_USB_command+0x1de>
						output_state(Output_x4_STATE);
 8003bd4:	2003      	movs	r0, #3
 8003bd6:	f7fe fdcf 	bl	8002778 <output_state>
						send_answer_to_CDC(OK_TYPE_2);
 8003bda:	2003      	movs	r0, #3
 8003bdc:	f7fe ff24 	bl	8002a28 <send_answer_to_CDC>
						return;
 8003be0:	e17e      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
					}
					else
					{
						send_answer_to_CDC(ERROR_TYPE_2);
 8003be2:	2001      	movs	r0, #1
 8003be4:	f7fe ff20 	bl	8002a28 <send_answer_to_CDC>
						return;
 8003be8:	e17a      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
			}
		}
	}

	// ==== DAC_CAL_TEMP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TEMP")))
 8003bea:	f107 0320 	add.w	r3, r7, #32
 8003bee:	4959      	ldr	r1, [pc, #356]	; (8003d54 <Parsing_USB_command+0x350>)
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fac5 	bl	8000180 <strcmp>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d116      	bne.n	8003c2a <Parsing_USB_command+0x226>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8003bfc:	463b      	mov	r3, r7
 8003bfe:	494a      	ldr	r1, [pc, #296]	; (8003d28 <Parsing_USB_command+0x324>)
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fc fabd 	bl	8000180 <strcmp>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <Parsing_USB_command+0x21e>
			send_answer_to_CDC(RUN_CAL_TYPE_TEMP);
 8003c0c:	200f      	movs	r0, #15
 8003c0e:	f7fe ff0b 	bl	8002a28 <send_answer_to_CDC>
			cmd_CAL(DAC_CAL_TEMP,NONE);
 8003c12:	4951      	ldr	r1, [pc, #324]	; (8003d58 <Parsing_USB_command+0x354>)
 8003c14:	2006      	movs	r0, #6
 8003c16:	f7ff f96f 	bl	8002ef8 <cmd_CAL>
			send_answer_to_CDC(OK_TYPE_1);
 8003c1a:	2002      	movs	r0, #2
 8003c1c:	f7fe ff04 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003c20:	e15e      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 8003c22:	2000      	movs	r0, #0
 8003c24:	f7fe ff00 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003c28:	e15a      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
	}

	// ==== DAC_CAL_POLY_A command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_A")))
 8003c2a:	f107 0320 	add.w	r3, r7, #32
 8003c2e:	494b      	ldr	r1, [pc, #300]	; (8003d5c <Parsing_USB_command+0x358>)
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fc faa5 	bl	8000180 <strcmp>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d112      	bne.n	8003c62 <Parsing_USB_command+0x25e>
	{
		cmd_CAL(DAC_CAL_POLY_A,atof(decoded_string_2));
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f00a fcba 	bl	800e5b8 <atof>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f7fc ff5e 	bl	8000b0c <__aeabi_d2f>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4619      	mov	r1, r3
 8003c54:	2007      	movs	r0, #7
 8003c56:	f7ff f94f 	bl	8002ef8 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003c5a:	2003      	movs	r0, #3
 8003c5c:	f7fe fee4 	bl	8002a28 <send_answer_to_CDC>
		return;
 8003c60:	e13e      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
	}

	// ==== DAC_CAL_POLY_B command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_B")))
 8003c62:	f107 0320 	add.w	r3, r7, #32
 8003c66:	493e      	ldr	r1, [pc, #248]	; (8003d60 <Parsing_USB_command+0x35c>)
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc fa89 	bl	8000180 <strcmp>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d112      	bne.n	8003c9a <Parsing_USB_command+0x296>
	{
		cmd_CAL(DAC_CAL_POLY_B,atof(decoded_string_2));
 8003c74:	463b      	mov	r3, r7
 8003c76:	4618      	mov	r0, r3
 8003c78:	f00a fc9e 	bl	800e5b8 <atof>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	f7fc ff42 	bl	8000b0c <__aeabi_d2f>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	2008      	movs	r0, #8
 8003c8e:	f7ff f933 	bl	8002ef8 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003c92:	2003      	movs	r0, #3
 8003c94:	f7fe fec8 	bl	8002a28 <send_answer_to_CDC>
		return;
 8003c98:	e122      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
	}

	// ==== DAC_CAL_POLY_C command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_POLY_C")))
 8003c9a:	f107 0320 	add.w	r3, r7, #32
 8003c9e:	4931      	ldr	r1, [pc, #196]	; (8003d64 <Parsing_USB_command+0x360>)
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fa6d 	bl	8000180 <strcmp>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d112      	bne.n	8003cd2 <Parsing_USB_command+0x2ce>
	{
		cmd_CAL(DAC_CAL_POLY_C,atof(decoded_string_2));
 8003cac:	463b      	mov	r3, r7
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f00a fc82 	bl	800e5b8 <atof>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4619      	mov	r1, r3
 8003cbc:	f7fc ff26 	bl	8000b0c <__aeabi_d2f>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	2009      	movs	r0, #9
 8003cc6:	f7ff f917 	bl	8002ef8 <cmd_CAL>
		send_answer_to_CDC(OK_TYPE_2);
 8003cca:	2003      	movs	r0, #3
 8003ccc:	f7fe feac 	bl	8002a28 <send_answer_to_CDC>
		return;
 8003cd0:	e106      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
	}

	// ==== GAIN_X2_CAL command ====
	if(!(strcmp(decoded_string_1,"GAIN_X2_CAL")))
 8003cd2:	f107 0320 	add.w	r3, r7, #32
 8003cd6:	4924      	ldr	r1, [pc, #144]	; (8003d68 <Parsing_USB_command+0x364>)
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fc fa51 	bl	8000180 <strcmp>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d143      	bne.n	8003d6c <Parsing_USB_command+0x368>
	{
		if(cmd_CAL(GAIN_X2_CAL,atof(decoded_string_2)))
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f00a fc66 	bl	800e5b8 <atof>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f7fc ff0a 	bl	8000b0c <__aeabi_d2f>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	200c      	movs	r0, #12
 8003cfe:	f7ff f8fb 	bl	8002ef8 <cmd_CAL>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <Parsing_USB_command+0x30c>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003d08:	2003      	movs	r0, #3
 8003d0a:	f7fe fe8d 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003d0e:	e0e7      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003d10:	2001      	movs	r0, #1
 8003d12:	f7fe fe89 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003d16:	e0e3      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
 8003d18:	08012b04 	.word	0x08012b04
 8003d1c:	20000ba4 	.word	0x20000ba4
 8003d20:	08012b08 	.word	0x08012b08
 8003d24:	08012b0c 	.word	0x08012b0c
 8003d28:	08012b14 	.word	0x08012b14
 8003d2c:	08012b1c 	.word	0x08012b1c
 8003d30:	08012b24 	.word	0x08012b24
 8003d34:	08012b2c 	.word	0x08012b2c
 8003d38:	000fffff 	.word	0x000fffff
 8003d3c:	08012b30 	.word	0x08012b30
 8003d40:	08012b38 	.word	0x08012b38
 8003d44:	08012b40 	.word	0x08012b40
 8003d48:	08012b44 	.word	0x08012b44
 8003d4c:	08012b48 	.word	0x08012b48
 8003d50:	08012b4c 	.word	0x08012b4c
 8003d54:	08012b50 	.word	0x08012b50
 8003d58:	41600000 	.word	0x41600000
 8003d5c:	08012b60 	.word	0x08012b60
 8003d60:	08012b70 	.word	0x08012b70
 8003d64:	08012b80 	.word	0x08012b80
 8003d68:	08012b90 	.word	0x08012b90
		}
	}

	// ==== GAIN_X4_CAL command ====
	if(!(strcmp(decoded_string_1,"GAIN_X4_CAL")))
 8003d6c:	f107 0320 	add.w	r3, r7, #32
 8003d70:	495d      	ldr	r1, [pc, #372]	; (8003ee8 <Parsing_USB_command+0x4e4>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc fa04 	bl	8000180 <strcmp>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d119      	bne.n	8003db2 <Parsing_USB_command+0x3ae>
	{
		if(cmd_CAL(GAIN_X4_CAL,atof(decoded_string_2)))
 8003d7e:	463b      	mov	r3, r7
 8003d80:	4618      	mov	r0, r3
 8003d82:	f00a fc19 	bl	800e5b8 <atof>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f7fc febd 	bl	8000b0c <__aeabi_d2f>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4619      	mov	r1, r3
 8003d96:	200d      	movs	r0, #13
 8003d98:	f7ff f8ae 	bl	8002ef8 <cmd_CAL>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <Parsing_USB_command+0x3a6>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003da2:	2003      	movs	r0, #3
 8003da4:	f7fe fe40 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003da8:	e09a      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003daa:	2001      	movs	r0, #1
 8003dac:	f7fe fe3c 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003db0:	e096      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
	}


	// ==== DAC_CAL_TOP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TOP")))
 8003db2:	f107 0320 	add.w	r3, r7, #32
 8003db6:	494d      	ldr	r1, [pc, #308]	; (8003eec <Parsing_USB_command+0x4e8>)
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc f9e1 	bl	8000180 <strcmp>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d119      	bne.n	8003df8 <Parsing_USB_command+0x3f4>
	{
		if(cmd_CAL(DAC_CAL_TOP,atof(decoded_string_2)))
 8003dc4:	463b      	mov	r3, r7
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f00a fbf6 	bl	800e5b8 <atof>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	f7fc fe9a 	bl	8000b0c <__aeabi_d2f>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4619      	mov	r1, r3
 8003ddc:	200a      	movs	r0, #10
 8003dde:	f7ff f88b 	bl	8002ef8 <cmd_CAL>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <Parsing_USB_command+0x3ec>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003de8:	2003      	movs	r0, #3
 8003dea:	f7fe fe1d 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003dee:	e077      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003df0:	2001      	movs	r0, #1
 8003df2:	f7fe fe19 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003df6:	e073      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
	}


	// ==== DAC_CAL_DOWN command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_DOWN")))
 8003df8:	f107 0320 	add.w	r3, r7, #32
 8003dfc:	493c      	ldr	r1, [pc, #240]	; (8003ef0 <Parsing_USB_command+0x4ec>)
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc f9be 	bl	8000180 <strcmp>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d119      	bne.n	8003e3e <Parsing_USB_command+0x43a>
	{
		if(cmd_CAL(DAC_CAL_DOWN,atof(decoded_string_2)))
 8003e0a:	463b      	mov	r3, r7
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f00a fbd3 	bl	800e5b8 <atof>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f7fc fe77 	bl	8000b0c <__aeabi_d2f>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4619      	mov	r1, r3
 8003e22:	200b      	movs	r0, #11
 8003e24:	f7ff f868 	bl	8002ef8 <cmd_CAL>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <Parsing_USB_command+0x432>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003e2e:	2003      	movs	r0, #3
 8003e30:	f7fe fdfa 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003e34:	e054      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_2);
 8003e36:	2001      	movs	r0, #1
 8003e38:	f7fe fdf6 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003e3c:	e050      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 8003e3e:	f107 0320 	add.w	r3, r7, #32
 8003e42:	492c      	ldr	r1, [pc, #176]	; (8003ef4 <Parsing_USB_command+0x4f0>)
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc f99b 	bl	8000180 <strcmp>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d118      	bne.n	8003e82 <Parsing_USB_command+0x47e>
	{
		if(cmd_SWEEP_RATE(atof(decoded_string_2)))
 8003e50:	463b      	mov	r3, r7
 8003e52:	4618      	mov	r0, r3
 8003e54:	f00a fbb0 	bl	800e5b8 <atof>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f7fc fe54 	bl	8000b0c <__aeabi_d2f>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff f806 	bl	8002e78 <cmd_SWEEP_RATE>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <Parsing_USB_command+0x476>
		{
			send_answer_to_CDC(OK_TYPE_2);
 8003e72:	2003      	movs	r0, #3
 8003e74:	f7fe fdd8 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003e78:	e032      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			send_answer_to_CDC(ERROR_TYPE_1);
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f7fe fdd4 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003e80:	e02e      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
	}

	// ==== SWEEP_DIRECTION command ====
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 8003e82:	f107 0320 	add.w	r3, r7, #32
 8003e86:	491c      	ldr	r1, [pc, #112]	; (8003ef8 <Parsing_USB_command+0x4f4>)
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc f979 	bl	8000180 <strcmp>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d121      	bne.n	8003ed8 <Parsing_USB_command+0x4d4>
	{
		if(!(strcmp(decoded_string_2,"UP"))){
 8003e94:	463b      	mov	r3, r7
 8003e96:	4919      	ldr	r1, [pc, #100]	; (8003efc <Parsing_USB_command+0x4f8>)
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fc f971 	bl	8000180 <strcmp>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <Parsing_USB_command+0x4ae>
			DAC_code_direction=1;
 8003ea4:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <Parsing_USB_command+0x4fc>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
			send_answer_to_CDC(OK_TYPE_2);
 8003eaa:	2003      	movs	r0, #3
 8003eac:	f7fe fdbc 	bl	8002a28 <send_answer_to_CDC>
			return;
 8003eb0:	e016      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	4913      	ldr	r1, [pc, #76]	; (8003f04 <Parsing_USB_command+0x500>)
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fc f962 	bl	8000180 <strcmp>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <Parsing_USB_command+0x4cc>
				DAC_code_direction=0;
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <Parsing_USB_command+0x4fc>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
				send_answer_to_CDC(OK_TYPE_2);
 8003ec8:	2003      	movs	r0, #3
 8003eca:	f7fe fdad 	bl	8002a28 <send_answer_to_CDC>
				return;
 8003ece:	e007      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
			}
			else
			{
				send_answer_to_CDC(ERROR_TYPE_1);
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f7fe fda9 	bl	8002a28 <send_answer_to_CDC>
				return;
 8003ed6:	e003      	b.n	8003ee0 <Parsing_USB_command+0x4dc>
			}

		}
	}

	send_answer_to_CDC(ERROR_TYPE_1);
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f7fe fda5 	bl	8002a28 <send_answer_to_CDC>
	return;
 8003ede:	bf00      	nop
}
 8003ee0:	3748      	adds	r7, #72	; 0x48
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	08012b9c 	.word	0x08012b9c
 8003eec:	08012ba8 	.word	0x08012ba8
 8003ef0:	08012bb4 	.word	0x08012bb4
 8003ef4:	08012bc4 	.word	0x08012bc4
 8003ef8:	08012bd0 	.word	0x08012bd0
 8003efc:	08012be0 	.word	0x08012be0
 8003f00:	20000c70 	.word	0x20000c70
 8003f04:	08012b30 	.word	0x08012b30

08003f08 <Write_to_circ_buffer>:

void Write_to_circ_buffer(uint8_t Buf)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 8003f12:	1dfb      	adds	r3, r7, #7
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fb7d 	bl	8003614 <USB_rx_command_buffer_push_refd>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <Write_to_circ_buffer+0x24>
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <Write_to_circ_buffer+0x2c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	809a      	strh	r2, [r3, #4]
 8003f26:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <Write_to_circ_buffer+0x2c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	80da      	strh	r2, [r3, #6]
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000728 	.word	0x20000728

08003f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f3c:	b672      	cpsid	i
}
 8003f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003f40:	e7fe      	b.n	8003f40 <Error_Handler+0x8>
	...

08003f44 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f4a:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f7a:	2218      	movs	r2, #24
 8003f7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f84:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f8c:	220a      	movs	r2, #10
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f90:	4804      	ldr	r0, [pc, #16]	; (8003fa4 <MX_SPI1_Init+0x60>)
 8003f92:	f004 f98b 	bl	80082ac <HAL_SPI_Init>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8003f9c:	f7ff ffcc 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003fa0:	bf00      	nop
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000c74 	.word	0x20000c74
 8003fa8:	40013000 	.word	0x40013000

08003fac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <MX_SPI2_Init+0x60>)
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <MX_SPI2_Init+0x60>)
 8003fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <MX_SPI2_Init+0x60>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <MX_SPI2_Init+0x60>)
 8003fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <MX_SPI2_Init+0x60>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003fd2:	4b0e      	ldr	r3, [pc, #56]	; (800400c <MX_SPI2_Init+0x60>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <MX_SPI2_Init+0x60>)
 8003fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fde:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <MX_SPI2_Init+0x60>)
 8003fe2:	2218      	movs	r2, #24
 8003fe4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <MX_SPI2_Init+0x60>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	621a      	str	r2, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fec:	4b07      	ldr	r3, [pc, #28]	; (800400c <MX_SPI2_Init+0x60>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <MX_SPI2_Init+0x60>)
 8003ff4:	220a      	movs	r2, #10
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ff8:	4804      	ldr	r0, [pc, #16]	; (800400c <MX_SPI2_Init+0x60>)
 8003ffa:	f004 f957 	bl	80082ac <HAL_SPI_Init>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8004004:	f7ff ff98 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004008:	bf00      	nop
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20000ccc 	.word	0x20000ccc
 8004010:	40003800 	.word	0x40003800

08004014 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08c      	sub	sp, #48	; 0x30
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401c:	f107 031c 	add.w	r3, r7, #28
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a32      	ldr	r2, [pc, #200]	; (80040fc <HAL_SPI_MspInit+0xe8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d130      	bne.n	8004098 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004036:	4b32      	ldr	r3, [pc, #200]	; (8004100 <HAL_SPI_MspInit+0xec>)
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4a31      	ldr	r2, [pc, #196]	; (8004100 <HAL_SPI_MspInit+0xec>)
 800403c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004040:	6213      	str	r3, [r2, #32]
 8004042:	4b2f      	ldr	r3, [pc, #188]	; (8004100 <HAL_SPI_MspInit+0xec>)
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800404a:	61bb      	str	r3, [r7, #24]
 800404c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800404e:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <HAL_SPI_MspInit+0xec>)
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4a2b      	ldr	r2, [pc, #172]	; (8004100 <HAL_SPI_MspInit+0xec>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	61d3      	str	r3, [r2, #28]
 800405a:	4b29      	ldr	r3, [pc, #164]	; (8004100 <HAL_SPI_MspInit+0xec>)
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004066:	23e0      	movs	r3, #224	; 0xe0
 8004068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406a:	2302      	movs	r3, #2
 800406c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004072:	2303      	movs	r3, #3
 8004074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004076:	2305      	movs	r3, #5
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407a:	f107 031c 	add.w	r3, r7, #28
 800407e:	4619      	mov	r1, r3
 8004080:	4820      	ldr	r0, [pc, #128]	; (8004104 <HAL_SPI_MspInit+0xf0>)
 8004082:	f001 f8f3 	bl	800526c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8004086:	2200      	movs	r2, #0
 8004088:	2101      	movs	r1, #1
 800408a:	2023      	movs	r0, #35	; 0x23
 800408c:	f000 fd19 	bl	8004ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004090:	2023      	movs	r0, #35	; 0x23
 8004092:	f000 fd32 	bl	8004afa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004096:	e02d      	b.n	80040f4 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <HAL_SPI_MspInit+0xf4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d128      	bne.n	80040f4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040a2:	4b17      	ldr	r3, [pc, #92]	; (8004100 <HAL_SPI_MspInit+0xec>)
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_SPI_MspInit+0xec>)
 80040a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040ac:	6253      	str	r3, [r2, #36]	; 0x24
 80040ae:	4b14      	ldr	r3, [pc, #80]	; (8004100 <HAL_SPI_MspInit+0xec>)
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_SPI_MspInit+0xec>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4a10      	ldr	r2, [pc, #64]	; (8004100 <HAL_SPI_MspInit+0xec>)
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	61d3      	str	r3, [r2, #28]
 80040c6:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <HAL_SPI_MspInit+0xec>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80040d2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80040d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d8:	2302      	movs	r3, #2
 80040da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e0:	2303      	movs	r3, #3
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040e4:	2305      	movs	r3, #5
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e8:	f107 031c 	add.w	r3, r7, #28
 80040ec:	4619      	mov	r1, r3
 80040ee:	4807      	ldr	r0, [pc, #28]	; (800410c <HAL_SPI_MspInit+0xf8>)
 80040f0:	f001 f8bc 	bl	800526c <HAL_GPIO_Init>
}
 80040f4:	bf00      	nop
 80040f6:	3730      	adds	r7, #48	; 0x30
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40013000 	.word	0x40013000
 8004100:	40023800 	.word	0x40023800
 8004104:	40020000 	.word	0x40020000
 8004108:	40003800 	.word	0x40003800
 800410c:	40020400 	.word	0x40020400

08004110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004116:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <HAL_MspInit+0xa0>)
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	4a25      	ldr	r2, [pc, #148]	; (80041b0 <HAL_MspInit+0xa0>)
 800411c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004120:	6253      	str	r3, [r2, #36]	; 0x24
 8004122:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <HAL_MspInit+0xa0>)
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800412e:	4b20      	ldr	r3, [pc, #128]	; (80041b0 <HAL_MspInit+0xa0>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	4a1f      	ldr	r2, [pc, #124]	; (80041b0 <HAL_MspInit+0xa0>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6213      	str	r3, [r2, #32]
 800413a:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <HAL_MspInit+0xa0>)
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <HAL_MspInit+0xa0>)
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <HAL_MspInit+0xa0>)
 800414c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004150:	6253      	str	r3, [r2, #36]	; 0x24
 8004152:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <HAL_MspInit+0xa0>)
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800415e:	2200      	movs	r2, #0
 8004160:	2101      	movs	r1, #1
 8004162:	f06f 000b 	mvn.w	r0, #11
 8004166:	f000 fcac 	bl	8004ac2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800416a:	2200      	movs	r2, #0
 800416c:	2101      	movs	r1, #1
 800416e:	f06f 000a 	mvn.w	r0, #10
 8004172:	f000 fca6 	bl	8004ac2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8004176:	2200      	movs	r2, #0
 8004178:	2101      	movs	r1, #1
 800417a:	f06f 0009 	mvn.w	r0, #9
 800417e:	f000 fca0 	bl	8004ac2 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 8004182:	2200      	movs	r2, #0
 8004184:	2101      	movs	r1, #1
 8004186:	f06f 0004 	mvn.w	r0, #4
 800418a:	f000 fc9a 	bl	8004ac2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 800418e:	2200      	movs	r2, #0
 8004190:	2101      	movs	r1, #1
 8004192:	f06f 0003 	mvn.w	r0, #3
 8004196:	f000 fc94 	bl	8004ac2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 800419a:	2200      	movs	r2, #0
 800419c:	2101      	movs	r1, #1
 800419e:	f06f 0001 	mvn.w	r0, #1
 80041a2:	f000 fc8e 	bl	8004ac2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800

080041b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041b8:	e7fe      	b.n	80041b8 <NMI_Handler+0x4>

080041ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041be:	e7fe      	b.n	80041be <HardFault_Handler+0x4>

080041c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041c4:	e7fe      	b.n	80041c4 <MemManage_Handler+0x4>

080041c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041c6:	b480      	push	{r7}
 80041c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041ca:	e7fe      	b.n	80041ca <BusFault_Handler+0x4>

080041cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041d0:	e7fe      	b.n	80041d0 <UsageFault_Handler+0x4>

080041d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041d2:	b480      	push	{r7}
 80041d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041de:	b480      	push	{r7}
 80041e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041ee:	bf00      	nop
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041fa:	f000 fb4d 	bl	8004898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004208:	4802      	ldr	r0, [pc, #8]	; (8004214 <USB_LP_IRQHandler+0x10>)
 800420a:	f001 ff45 	bl	8006098 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20001428 	.word	0x20001428

08004218 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encode_Push_Pin);
 800421c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004220:	f001 f9d4 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004224:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004228:	f001 f9d0 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800422c:	bf00      	nop
 800422e:	bd80      	pop	{r7, pc}

08004230 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004234:	4802      	ldr	r0, [pc, #8]	; (8004240 <TIM2_IRQHandler+0x10>)
 8004236:	f005 f873 	bl	8009320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000d28 	.word	0x20000d28

08004244 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004248:	4802      	ldr	r0, [pc, #8]	; (8004254 <TIM3_IRQHandler+0x10>)
 800424a:	f005 f869 	bl	8009320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000d68 	.word	0x20000d68

08004258 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800425c:	4802      	ldr	r0, [pc, #8]	; (8004268 <SPI1_IRQHandler+0x10>)
 800425e:	f004 fc91 	bl	8008b84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000c74 	.word	0x20000c74

0800426c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Start_button_Pin);
 8004270:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004274:	f001 f9aa 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}

0800427c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
	return 1;
 8004280:	2301      	movs	r3, #1
}
 8004282:	4618      	mov	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <_kill>:

int _kill(int pid, int sig)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004294:	f00a f994 	bl	800e5c0 <__errno>
 8004298:	4603      	mov	r3, r0
 800429a:	2216      	movs	r2, #22
 800429c:	601a      	str	r2, [r3, #0]
	return -1;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <_exit>:

void _exit (int status)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042b2:	f04f 31ff 	mov.w	r1, #4294967295
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ffe7 	bl	800428a <_kill>
	while (1) {}		/* Make sure we hang here */
 80042bc:	e7fe      	b.n	80042bc <_exit+0x12>

080042be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b086      	sub	sp, #24
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e00a      	b.n	80042e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042d0:	f3af 8000 	nop.w
 80042d4:	4601      	mov	r1, r0
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	60ba      	str	r2, [r7, #8]
 80042dc:	b2ca      	uxtb	r2, r1
 80042de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	3301      	adds	r3, #1
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	dbf0      	blt.n	80042d0 <_read+0x12>
	}

return len;
 80042ee:	687b      	ldr	r3, [r7, #4]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e009      	b.n	800431e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	60ba      	str	r2, [r7, #8]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	3301      	adds	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	dbf1      	blt.n	800430a <_write+0x12>
	}
	return len;
 8004326:	687b      	ldr	r3, [r7, #4]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <_close>:

int _close(int file)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	return -1;
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004356:	605a      	str	r2, [r3, #4]
	return 0;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <_isatty>:

int _isatty(int file)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	return 1;
 800436c:	2301      	movs	r3, #1
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
	return 0;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004398:	4a14      	ldr	r2, [pc, #80]	; (80043ec <_sbrk+0x5c>)
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <_sbrk+0x60>)
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043a4:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <_sbrk+0x64>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043ac:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <_sbrk+0x64>)
 80043ae:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <_sbrk+0x68>)
 80043b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <_sbrk+0x64>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d207      	bcs.n	80043d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043c0:	f00a f8fe 	bl	800e5c0 <__errno>
 80043c4:	4603      	mov	r3, r0
 80043c6:	220c      	movs	r2, #12
 80043c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043ca:	f04f 33ff 	mov.w	r3, #4294967295
 80043ce:	e009      	b.n	80043e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <_sbrk+0x64>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043d6:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <_sbrk+0x64>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4413      	add	r3, r2
 80043de:	4a05      	ldr	r2, [pc, #20]	; (80043f4 <_sbrk+0x64>)
 80043e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043e2:	68fb      	ldr	r3, [r7, #12]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20004000 	.word	0x20004000
 80043f0:	00000400 	.word	0x00000400
 80043f4:	20000d24 	.word	0x20000d24
 80043f8:	20001948 	.word	0x20001948

080043fc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800440e:	f107 0308 	add.w	r3, r7, #8
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	605a      	str	r2, [r3, #4]
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800441c:	463b      	mov	r3, r7
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004424:	4b1d      	ldr	r3, [pc, #116]	; (800449c <MX_TIM2_Init+0x94>)
 8004426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800442a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 -1;
 800442c:	4b1b      	ldr	r3, [pc, #108]	; (800449c <MX_TIM2_Init+0x94>)
 800442e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8004432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004434:	4b19      	ldr	r3, [pc, #100]	; (800449c <MX_TIM2_Init+0x94>)
 8004436:	2200      	movs	r2, #0
 8004438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 800443a:	4b18      	ldr	r3, [pc, #96]	; (800449c <MX_TIM2_Init+0x94>)
 800443c:	2231      	movs	r2, #49	; 0x31
 800443e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004440:	4b16      	ldr	r3, [pc, #88]	; (800449c <MX_TIM2_Init+0x94>)
 8004442:	2200      	movs	r2, #0
 8004444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <MX_TIM2_Init+0x94>)
 8004448:	2200      	movs	r2, #0
 800444a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800444c:	4813      	ldr	r0, [pc, #76]	; (800449c <MX_TIM2_Init+0x94>)
 800444e:	f004 fdcd 	bl	8008fec <HAL_TIM_Base_Init>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004458:	f7ff fd6e 	bl	8003f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800445c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004460:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004462:	f107 0308 	add.w	r3, r7, #8
 8004466:	4619      	mov	r1, r3
 8004468:	480c      	ldr	r0, [pc, #48]	; (800449c <MX_TIM2_Init+0x94>)
 800446a:	f005 f835 	bl	80094d8 <HAL_TIM_ConfigClockSource>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004474:	f7ff fd60 	bl	8003f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004478:	2300      	movs	r3, #0
 800447a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800447c:	2300      	movs	r3, #0
 800447e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004480:	463b      	mov	r3, r7
 8004482:	4619      	mov	r1, r3
 8004484:	4805      	ldr	r0, [pc, #20]	; (800449c <MX_TIM2_Init+0x94>)
 8004486:	f005 fa2b 	bl	80098e0 <HAL_TIMEx_MasterConfigSynchronization>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004490:	f7ff fd52 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004494:	bf00      	nop
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000d28 	.word	0x20000d28

080044a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b4:	463b      	mov	r3, r7
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044bc:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <MX_TIM3_Init+0x94>)
 80044be:	4a1e      	ldr	r2, [pc, #120]	; (8004538 <MX_TIM3_Init+0x98>)
 80044c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 -1;
 80044c2:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <MX_TIM3_Init+0x94>)
 80044c4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80044c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ca:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <MX_TIM3_Init+0x94>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 -1;
 80044d0:	4b18      	ldr	r3, [pc, #96]	; (8004534 <MX_TIM3_Init+0x94>)
 80044d2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80044d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044d8:	4b16      	ldr	r3, [pc, #88]	; (8004534 <MX_TIM3_Init+0x94>)
 80044da:	2200      	movs	r2, #0
 80044dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044de:	4b15      	ldr	r3, [pc, #84]	; (8004534 <MX_TIM3_Init+0x94>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80044e4:	4813      	ldr	r0, [pc, #76]	; (8004534 <MX_TIM3_Init+0x94>)
 80044e6:	f004 fd81 	bl	8008fec <HAL_TIM_Base_Init>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80044f0:	f7ff fd22 	bl	8003f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80044fa:	f107 0308 	add.w	r3, r7, #8
 80044fe:	4619      	mov	r1, r3
 8004500:	480c      	ldr	r0, [pc, #48]	; (8004534 <MX_TIM3_Init+0x94>)
 8004502:	f004 ffe9 	bl	80094d8 <HAL_TIM_ConfigClockSource>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800450c:	f7ff fd14 	bl	8003f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004510:	2300      	movs	r3, #0
 8004512:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004514:	2300      	movs	r3, #0
 8004516:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004518:	463b      	mov	r3, r7
 800451a:	4619      	mov	r1, r3
 800451c:	4805      	ldr	r0, [pc, #20]	; (8004534 <MX_TIM3_Init+0x94>)
 800451e:	f005 f9df 	bl	80098e0 <HAL_TIMEx_MasterConfigSynchronization>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004528:	f7ff fd06 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800452c:	bf00      	nop
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20000d68 	.word	0x20000d68
 8004538:	40000400 	.word	0x40000400

0800453c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08c      	sub	sp, #48	; 0x30
 8004540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004542:	f107 030c 	add.w	r3, r7, #12
 8004546:	2224      	movs	r2, #36	; 0x24
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f00a f870 	bl	800e630 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004550:	1d3b      	adds	r3, r7, #4
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004558:	4b20      	ldr	r3, [pc, #128]	; (80045dc <MX_TIM4_Init+0xa0>)
 800455a:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <MX_TIM4_Init+0xa4>)
 800455c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800455e:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <MX_TIM4_Init+0xa0>)
 8004560:	2200      	movs	r2, #0
 8004562:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <MX_TIM4_Init+0xa0>)
 8004566:	2200      	movs	r2, #0
 8004568:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800456a:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <MX_TIM4_Init+0xa0>)
 800456c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004570:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004572:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <MX_TIM4_Init+0xa0>)
 8004574:	2200      	movs	r2, #0
 8004576:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004578:	4b18      	ldr	r3, [pc, #96]	; (80045dc <MX_TIM4_Init+0xa0>)
 800457a:	2200      	movs	r2, #0
 800457c:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800457e:	2301      	movs	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004586:	2301      	movs	r3, #1
 8004588:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004592:	2302      	movs	r3, #2
 8004594:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004596:	2301      	movs	r3, #1
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800459a:	2300      	movs	r3, #0
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	4619      	mov	r1, r3
 80045a8:	480c      	ldr	r0, [pc, #48]	; (80045dc <MX_TIM4_Init+0xa0>)
 80045aa:	f004 fdb1 	bl	8009110 <HAL_TIM_Encoder_Init>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80045b4:	f7ff fcc0 	bl	8003f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045b8:	2300      	movs	r3, #0
 80045ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045bc:	2300      	movs	r3, #0
 80045be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80045c0:	1d3b      	adds	r3, r7, #4
 80045c2:	4619      	mov	r1, r3
 80045c4:	4805      	ldr	r0, [pc, #20]	; (80045dc <MX_TIM4_Init+0xa0>)
 80045c6:	f005 f98b 	bl	80098e0 <HAL_TIMEx_MasterConfigSynchronization>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80045d0:	f7ff fcb2 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80045d4:	bf00      	nop
 80045d6:	3730      	adds	r7, #48	; 0x30
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000da8 	.word	0x20000da8
 80045e0:	40000800 	.word	0x40000800

080045e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f4:	d114      	bne.n	8004620 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045f6:	4b19      	ldr	r3, [pc, #100]	; (800465c <HAL_TIM_Base_MspInit+0x78>)
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	4a18      	ldr	r2, [pc, #96]	; (800465c <HAL_TIM_Base_MspInit+0x78>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	6253      	str	r3, [r2, #36]	; 0x24
 8004602:	4b16      	ldr	r3, [pc, #88]	; (800465c <HAL_TIM_Base_MspInit+0x78>)
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800460e:	2200      	movs	r2, #0
 8004610:	2101      	movs	r1, #1
 8004612:	201c      	movs	r0, #28
 8004614:	f000 fa55 	bl	8004ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004618:	201c      	movs	r0, #28
 800461a:	f000 fa6e 	bl	8004afa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800461e:	e018      	b.n	8004652 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a0e      	ldr	r2, [pc, #56]	; (8004660 <HAL_TIM_Base_MspInit+0x7c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d113      	bne.n	8004652 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <HAL_TIM_Base_MspInit+0x78>)
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	4a0b      	ldr	r2, [pc, #44]	; (800465c <HAL_TIM_Base_MspInit+0x78>)
 8004630:	f043 0302 	orr.w	r3, r3, #2
 8004634:	6253      	str	r3, [r2, #36]	; 0x24
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <HAL_TIM_Base_MspInit+0x78>)
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004642:	2200      	movs	r2, #0
 8004644:	2101      	movs	r1, #1
 8004646:	201d      	movs	r0, #29
 8004648:	f000 fa3b 	bl	8004ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800464c:	201d      	movs	r0, #29
 800464e:	f000 fa54 	bl	8004afa <HAL_NVIC_EnableIRQ>
}
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800
 8004660:	40000400 	.word	0x40000400

08004664 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	; 0x28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d127      	bne.n	80046d6 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004686:	4b17      	ldr	r3, [pc, #92]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x80>)
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x80>)
 800468c:	f043 0304 	orr.w	r3, r3, #4
 8004690:	6253      	str	r3, [r2, #36]	; 0x24
 8004692:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x80>)
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469e:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	4a10      	ldr	r2, [pc, #64]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80046a4:	f043 0302 	orr.w	r3, r3, #2
 80046a8:	61d3      	str	r3, [r2, #28]
 80046aa:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046b6:	23c0      	movs	r3, #192	; 0xc0
 80046b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c2:	2300      	movs	r3, #0
 80046c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80046c6:	2302      	movs	r3, #2
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ca:	f107 0314 	add.w	r3, r7, #20
 80046ce:	4619      	mov	r1, r3
 80046d0:	4805      	ldr	r0, [pc, #20]	; (80046e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80046d2:	f000 fdcb 	bl	800526c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80046d6:	bf00      	nop
 80046d8:	3728      	adds	r7, #40	; 0x28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40020400 	.word	0x40020400

080046ec <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second)
{
 80046ec:	b084      	sub	sp, #16
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af02      	add	r7, sp, #8
 80046f4:	f107 0c08 	add.w	ip, r7, #8
 80046f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <TMP117_set_Configuration+0x50>)
 80046fe:	2201      	movs	r2, #1
 8004700:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 8004702:	4a0e      	ldr	r2, [pc, #56]	; (800473c <TMP117_set_Configuration+0x50>)
 8004704:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8004708:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 800470a:	4a0c      	ldr	r2, [pc, #48]	; (800473c <TMP117_set_Configuration+0x50>)
 800470c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8004710:	7093      	strb	r3, [r2, #2]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,2,100);
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <TMP117_set_Configuration+0x54>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	b299      	uxth	r1, r3
 8004718:	2364      	movs	r3, #100	; 0x64
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2302      	movs	r3, #2
 800471e:	4a07      	ldr	r2, [pc, #28]	; (800473c <TMP117_set_Configuration+0x50>)
 8004720:	f107 0008 	add.w	r0, r7, #8
 8004724:	f001 f8ae 	bl	8005884 <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
 8004728:	2001      	movs	r0, #1
 800472a:	f000 f8d1 	bl	80048d0 <HAL_Delay>
}
 800472e:	bf00      	nop
 8004730:	46bd      	mov	sp, r7
 8004732:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004736:	b004      	add	sp, #16
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000de8 	.word	0x20000de8
 8004740:	20000740 	.word	0x20000740

08004744 <TMP117_Initialization>:
   @Description   Custom Parameters for Sensor
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  void
 */
void TMP117_Initialization               (I2C_HandleTypeDef i2c)
{
 8004744:	b084      	sub	sp, #16
 8004746:	b580      	push	{r7, lr}
 8004748:	b094      	sub	sp, #80	; 0x50
 800474a:	af14      	add	r7, sp, #80	; 0x50
 800474c:	f107 0c08 	add.w	ip, r7, #8
 8004750:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    TMP117_set_Configuration(i2c,0x02,0x22);
 8004754:	2322      	movs	r3, #34	; 0x22
 8004756:	9312      	str	r3, [sp, #72]	; 0x48
 8004758:	2302      	movs	r3, #2
 800475a:	9311      	str	r3, [sp, #68]	; 0x44
 800475c:	4668      	mov	r0, sp
 800475e:	f107 0318 	add.w	r3, r7, #24
 8004762:	2244      	movs	r2, #68	; 0x44
 8004764:	4619      	mov	r1, r3
 8004766:	f009 ff55 	bl	800e614 <memcpy>
 800476a:	f107 0308 	add.w	r3, r7, #8
 800476e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004770:	f7ff ffbc 	bl	80046ec <TMP117_set_Configuration>
	HAL_Delay(100); // wait 1ms
 8004774:	2064      	movs	r0, #100	; 0x64
 8004776:	f000 f8ab 	bl	80048d0 <HAL_Delay>
	TMP117_set_Configuration(i2c,0x02,0x20);
 800477a:	2320      	movs	r3, #32
 800477c:	9312      	str	r3, [sp, #72]	; 0x48
 800477e:	2302      	movs	r3, #2
 8004780:	9311      	str	r3, [sp, #68]	; 0x44
 8004782:	4668      	mov	r0, sp
 8004784:	f107 0318 	add.w	r3, r7, #24
 8004788:	2244      	movs	r2, #68	; 0x44
 800478a:	4619      	mov	r1, r3
 800478c:	f009 ff42 	bl	800e614 <memcpy>
 8004790:	f107 0308 	add.w	r3, r7, #8
 8004794:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004796:	f7ff ffa9 	bl	80046ec <TMP117_set_Configuration>
//      TMP117_set_Temperature_Offset(i2c,0x00,0x00); //Default Value
//      TMP117_set_LowLimit(i2c,0x12,0x80);           //Set 10 Celcius
//      TMP117_set_HighLimit(i2c,0x51,0x20);          //Set 40 Celcius
}
 800479a:	bf00      	nop
 800479c:	46bd      	mov	sp, r7
 800479e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a2:	b004      	add	sp, #16
 80047a4:	4770      	bx	lr
	...

080047a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047a8:	480c      	ldr	r0, [pc, #48]	; (80047dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80047aa:	490d      	ldr	r1, [pc, #52]	; (80047e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80047ac:	4a0d      	ldr	r2, [pc, #52]	; (80047e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80047ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047b0:	e002      	b.n	80047b8 <LoopCopyDataInit>

080047b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047b6:	3304      	adds	r3, #4

080047b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047bc:	d3f9      	bcc.n	80047b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047c0:	4c0a      	ldr	r4, [pc, #40]	; (80047ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80047c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047c4:	e001      	b.n	80047ca <LoopFillZerobss>

080047c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047c8:	3204      	adds	r2, #4

080047ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047cc:	d3fb      	bcc.n	80047c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80047ce:	f7ff fe15 	bl	80043fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047d2:	f009 fefb 	bl	800e5cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047d6:	f7fe ff3d 	bl	8003654 <main>
  bx lr
 80047da:	4770      	bx	lr
  ldr r0, =_sdata
 80047dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047e0:	20000a90 	.word	0x20000a90
  ldr r2, =_sidata
 80047e4:	08013148 	.word	0x08013148
  ldr r2, =_sbss
 80047e8:	20000a90 	.word	0x20000a90
  ldr r4, =_ebss
 80047ec:	20001944 	.word	0x20001944

080047f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047f0:	e7fe      	b.n	80047f0 <ADC1_IRQHandler>

080047f2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047fc:	2003      	movs	r0, #3
 80047fe:	f000 f955 	bl	8004aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004802:	200f      	movs	r0, #15
 8004804:	f000 f80e 	bl	8004824 <HAL_InitTick>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	71fb      	strb	r3, [r7, #7]
 8004812:	e001      	b.n	8004818 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004814:	f7ff fc7c 	bl	8004110 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004818:	79fb      	ldrb	r3, [r7, #7]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004830:	4b16      	ldr	r3, [pc, #88]	; (800488c <HAL_InitTick+0x68>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d022      	beq.n	800487e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <HAL_InitTick+0x6c>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b13      	ldr	r3, [pc, #76]	; (800488c <HAL_InitTick+0x68>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004844:	fbb1 f3f3 	udiv	r3, r1, r3
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f962 	bl	8004b16 <HAL_SYSTICK_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10f      	bne.n	8004878 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b0f      	cmp	r3, #15
 800485c:	d809      	bhi.n	8004872 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800485e:	2200      	movs	r2, #0
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	f04f 30ff 	mov.w	r0, #4294967295
 8004866:	f000 f92c 	bl	8004ac2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800486a:	4a0a      	ldr	r2, [pc, #40]	; (8004894 <HAL_InitTick+0x70>)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	e007      	b.n	8004882 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
 8004876:	e004      	b.n	8004882 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
 800487c:	e001      	b.n	8004882 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004882:	7bfb      	ldrb	r3, [r7, #15]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000748 	.word	0x20000748
 8004890:	2000073c 	.word	0x2000073c
 8004894:	20000744 	.word	0x20000744

08004898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <HAL_IncTick+0x1c>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_IncTick+0x20>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4413      	add	r3, r2
 80048a6:	4a03      	ldr	r2, [pc, #12]	; (80048b4 <HAL_IncTick+0x1c>)
 80048a8:	6013      	str	r3, [r2, #0]
}
 80048aa:	bf00      	nop
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000dec 	.word	0x20000dec
 80048b8:	20000748 	.word	0x20000748

080048bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return uwTick;
 80048c0:	4b02      	ldr	r3, [pc, #8]	; (80048cc <HAL_GetTick+0x10>)
 80048c2:	681b      	ldr	r3, [r3, #0]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	20000dec 	.word	0x20000dec

080048d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048d8:	f7ff fff0 	bl	80048bc <HAL_GetTick>
 80048dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d004      	beq.n	80048f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80048ea:	4b09      	ldr	r3, [pc, #36]	; (8004910 <HAL_Delay+0x40>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048f4:	bf00      	nop
 80048f6:	f7ff ffe1 	bl	80048bc <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	429a      	cmp	r2, r3
 8004904:	d8f7      	bhi.n	80048f6 <HAL_Delay+0x26>
  {
  }
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20000748 	.word	0x20000748

08004914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <__NVIC_SetPriorityGrouping+0x44>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004930:	4013      	ands	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800493c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004946:	4a04      	ldr	r2, [pc, #16]	; (8004958 <__NVIC_SetPriorityGrouping+0x44>)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	60d3      	str	r3, [r2, #12]
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004960:	4b04      	ldr	r3, [pc, #16]	; (8004974 <__NVIC_GetPriorityGrouping+0x18>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 0307 	and.w	r3, r3, #7
}
 800496a:	4618      	mov	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000ed00 	.word	0xe000ed00

08004978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	2b00      	cmp	r3, #0
 8004988:	db0b      	blt.n	80049a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	f003 021f 	and.w	r2, r3, #31
 8004990:	4906      	ldr	r1, [pc, #24]	; (80049ac <__NVIC_EnableIRQ+0x34>)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	2001      	movs	r0, #1
 800499a:	fa00 f202 	lsl.w	r2, r0, r2
 800499e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	e000e100 	.word	0xe000e100

080049b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	6039      	str	r1, [r7, #0]
 80049ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	db0a      	blt.n	80049da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	490c      	ldr	r1, [pc, #48]	; (80049fc <__NVIC_SetPriority+0x4c>)
 80049ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ce:	0112      	lsls	r2, r2, #4
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	440b      	add	r3, r1
 80049d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049d8:	e00a      	b.n	80049f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	4908      	ldr	r1, [pc, #32]	; (8004a00 <__NVIC_SetPriority+0x50>)
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	3b04      	subs	r3, #4
 80049e8:	0112      	lsls	r2, r2, #4
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	440b      	add	r3, r1
 80049ee:	761a      	strb	r2, [r3, #24]
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	e000e100 	.word	0xe000e100
 8004a00:	e000ed00 	.word	0xe000ed00

08004a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b089      	sub	sp, #36	; 0x24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f1c3 0307 	rsb	r3, r3, #7
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	bf28      	it	cs
 8004a22:	2304      	movcs	r3, #4
 8004a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	2b06      	cmp	r3, #6
 8004a2c:	d902      	bls.n	8004a34 <NVIC_EncodePriority+0x30>
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	3b03      	subs	r3, #3
 8004a32:	e000      	b.n	8004a36 <NVIC_EncodePriority+0x32>
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43da      	mvns	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	401a      	ands	r2, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	fa01 f303 	lsl.w	r3, r1, r3
 8004a56:	43d9      	mvns	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a5c:	4313      	orrs	r3, r2
         );
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3724      	adds	r7, #36	; 0x24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a78:	d301      	bcc.n	8004a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e00f      	b.n	8004a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <SysTick_Config+0x40>)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a86:	210f      	movs	r1, #15
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	f7ff ff90 	bl	80049b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <SysTick_Config+0x40>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a96:	4b04      	ldr	r3, [pc, #16]	; (8004aa8 <SysTick_Config+0x40>)
 8004a98:	2207      	movs	r2, #7
 8004a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	e000e010 	.word	0xe000e010

08004aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff ff2d 	bl	8004914 <__NVIC_SetPriorityGrouping>
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	4603      	mov	r3, r0
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
 8004ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ad4:	f7ff ff42 	bl	800495c <__NVIC_GetPriorityGrouping>
 8004ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	6978      	ldr	r0, [r7, #20]
 8004ae0:	f7ff ff90 	bl	8004a04 <NVIC_EncodePriority>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aea:	4611      	mov	r1, r2
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff ff5f 	bl	80049b0 <__NVIC_SetPriority>
}
 8004af2:	bf00      	nop
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	4603      	mov	r3, r0
 8004b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff ff35 	bl	8004978 <__NVIC_EnableIRQ>
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff ffa2 	bl	8004a68 <SysTick_Config>
 8004b24:	4603      	mov	r3, r0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d005      	beq.n	8004b52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2204      	movs	r2, #4
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
 8004b50:	e029      	b.n	8004ba6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 020e 	bic.w	r2, r2, #14
 8004b60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0201 	bic.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f003 021c 	and.w	r2, r3, #28
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7e:	2101      	movs	r1, #1
 8004b80:	fa01 f202 	lsl.w	r2, r1, r2
 8004b84:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4798      	blx	r3
    }
  }
  return status;
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004bb8:	f7ff fe80 	bl	80048bc <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004bbe:	e010      	b.n	8004be2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d00c      	beq.n	8004be2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <FLASH_WaitForLastOperation+0x2e>
 8004bce:	f7ff fe75 	bl	80048bc <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d201      	bcs.n	8004be2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e02f      	b.n	8004c42 <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004be2:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <FLASH_WaitForLastOperation+0x9c>)
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d0e8      	beq.n	8004bc0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004bee:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <FLASH_WaitForLastOperation+0x9c>)
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d102      	bne.n	8004c00 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004bfa:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <FLASH_WaitForLastOperation+0x9c>)
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004c00:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <FLASH_WaitForLastOperation+0x9c>)
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0c:	d014      	beq.n	8004c38 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <FLASH_WaitForLastOperation+0x9c>)
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1a:	d00d      	beq.n	8004c38 <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <FLASH_WaitForLastOperation+0x9c>)
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c28:	d006      	beq.n	8004c38 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8004c2a:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <FLASH_WaitForLastOperation+0x9c>)
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8004c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c36:	d103      	bne.n	8004c40 <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004c38:	f000 f80a 	bl	8004c50 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40023c00 	.word	0x40023c00

08004c50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004c5a:	4b26      	ldr	r3, [pc, #152]	; (8004cf4 <FLASH_SetErrorCode+0xa4>)
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c66:	d109      	bne.n	8004c7c <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004c68:	4b23      	ldr	r3, [pc, #140]	; (8004cf8 <FLASH_SetErrorCode+0xa8>)
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <FLASH_SetErrorCode+0xa8>)
 8004c72:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8004c7c:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <FLASH_SetErrorCode+0xa4>)
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c88:	d109      	bne.n	8004c9e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <FLASH_SetErrorCode+0xa8>)
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	4a19      	ldr	r2, [pc, #100]	; (8004cf8 <FLASH_SetErrorCode+0xa8>)
 8004c94:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c9c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004c9e:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <FLASH_SetErrorCode+0xa4>)
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004caa:	d109      	bne.n	8004cc0 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004cac:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <FLASH_SetErrorCode+0xa8>)
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	f043 0304 	orr.w	r3, r3, #4
 8004cb4:	4a10      	ldr	r2, [pc, #64]	; (8004cf8 <FLASH_SetErrorCode+0xa8>)
 8004cb6:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004cbe:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <FLASH_SetErrorCode+0xa4>)
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ccc:	d109      	bne.n	8004ce2 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8004cce:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <FLASH_SetErrorCode+0xa8>)
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f043 0308 	orr.w	r3, r3, #8
 8004cd6:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <FLASH_SetErrorCode+0xa8>)
 8004cd8:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ce0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004ce2:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <FLASH_SetErrorCode+0xa4>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6193      	str	r3, [r2, #24]
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40023c00 	.word	0x40023c00
 8004cf8:	20000df0 	.word	0x20000df0

08004cfc <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8004d0e:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 8004d10:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8004d12:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8004d14:	4a06      	ldr	r2, [pc, #24]	; (8004d30 <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 8004d16:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40023c00 	.word	0x40023c00
 8004d2c:	89abcdef 	.word	0x89abcdef
 8004d30:	02030405 	.word	0x02030405

08004d34 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8004d38:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a04      	ldr	r2, [pc, #16]	; (8004d50 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40023c00 	.word	0x40023c00

08004d54 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d66:	f7ff ff23 	bl	8004bb0 <FLASH_WaitForLastOperation>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d11a      	bne.n	8004daa <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d74:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d102      	bne.n	8004d86 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d102      	bne.n	8004d92 <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004da2:	f7ff ff05 	bl	8004bb0 <FLASH_WaitForLastOperation>
 8004da6:	4603      	mov	r3, r0
 8004da8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000df0 	.word	0x20000df0

08004db8 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004dc8:	4b31      	ldr	r3, [pc, #196]	; (8004e90 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004dca:	7c1b      	ldrb	r3, [r3, #16]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e058      	b.n	8004e86 <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 8004dd4:	4b2e      	ldr	r3, [pc, #184]	; (8004e90 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004dda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004dde:	f7ff fee7 	bl	8004bb0 <FLASH_WaitForLastOperation>
 8004de2:	4603      	mov	r3, r0
 8004de4:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d148      	bne.n	8004e7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004dec:	4b28      	ldr	r3, [pc, #160]	; (8004e90 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d106      	bne.n	8004e06 <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	68b8      	ldr	r0, [r7, #8]
 8004dfc:	f000 fa18 	bl	8005230 <FLASH_DATAEEPROM_ProgramWord>
 8004e00:	4603      	mov	r3, r0
 8004e02:	75fb      	strb	r3, [r7, #23]
 8004e04:	e03b      	b.n	8004e7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d108      	bne.n	8004e1e <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	4619      	mov	r1, r3
 8004e12:	68b8      	ldr	r0, [r7, #8]
 8004e14:	f000 f99c 	bl	8005150 <FLASH_DATAEEPROM_ProgramHalfWord>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	75fb      	strb	r3, [r7, #23]
 8004e1c:	e02f      	b.n	8004e7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d108      	bne.n	8004e36 <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	4619      	mov	r1, r3
 8004e2a:	68b8      	ldr	r0, [r7, #8]
 8004e2c:	f000 f934 	bl	8005098 <FLASH_DATAEEPROM_ProgramByte>
 8004e30:	4603      	mov	r3, r0
 8004e32:	75fb      	strb	r3, [r7, #23]
 8004e34:	e023      	b.n	8004e7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d108      	bne.n	8004e4e <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	4619      	mov	r1, r3
 8004e42:	68b8      	ldr	r0, [r7, #8]
 8004e44:	f000 f826 	bl	8004e94 <FLASH_DATAEEPROM_FastProgramByte>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	75fb      	strb	r3, [r7, #23]
 8004e4c:	e017      	b.n	8004e7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d108      	bne.n	8004e66 <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	4619      	mov	r1, r3
 8004e5a:	68b8      	ldr	r0, [r7, #8]
 8004e5c:	f000 f87e 	bl	8004f5c <FLASH_DATAEEPROM_FastProgramHalfWord>
 8004e60:	4603      	mov	r3, r0
 8004e62:	75fb      	strb	r3, [r7, #23]
 8004e64:	e00b      	b.n	8004e7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d106      	bne.n	8004e7a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	68b8      	ldr	r0, [r7, #8]
 8004e70:	f000 f8ec 	bl	800504c <FLASH_DATAEEPROM_FastProgramWord>
 8004e74:	4603      	mov	r3, r0
 8004e76:	75fb      	strb	r3, [r7, #23]
 8004e78:	e001      	b.n	8004e7e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004e7e:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	741a      	strb	r2, [r3, #16]

  return status;
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000df0 	.word	0x20000df0

08004e94 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004eac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004eb0:	f7ff fe7e 	bl	8004bb0 <FLASH_WaitForLastOperation>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d145      	bne.n	8004f4a <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8004ebe:	4b25      	ldr	r3, [pc, #148]	; (8004f54 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4a24      	ldr	r2, [pc, #144]	; (8004f54 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8004ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec8:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ed6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004eda:	f7ff fe69 	bl	8004bb0 <FLASH_WaitForLastOperation>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	75fb      	strb	r3, [r7, #23]
 8004ee2:	e032      	b.n	8004f4a <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	22ff      	movs	r2, #255	; 0xff
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	43db      	mvns	r3, r3
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	4619      	mov	r1, r3
 8004f14:	2002      	movs	r0, #2
 8004f16:	f7ff ff1d 	bl	8004d54 <HAL_FLASHEx_DATAEEPROM_Erase>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	2010      	movs	r0, #16
 8004f30:	f7ff ff42 	bl	8004db8 <HAL_FLASHEx_DATAEEPROM_Program>
 8004f34:	4603      	mov	r3, r0
 8004f36:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8004f38:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8004f3a:	7c1b      	ldrb	r3, [r3, #16]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e003      	b.n	8004f4c <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40023c00 	.word	0x40023c00
 8004f58:	20000df0 	.word	0x20000df0

08004f5c <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f78:	f7ff fe1a 	bl	8004bb0 <FLASH_WaitForLastOperation>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d158      	bne.n	8005038 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8004f86:	4b2f      	ldr	r3, [pc, #188]	; (8005044 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4a2e      	ldr	r2, [pc, #184]	; (8005044 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 8004f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f90:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 8004f92:	887b      	ldrh	r3, [r7, #2]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	887a      	ldrh	r2, [r7, #2]
 8004f9c:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fa2:	f7ff fe05 	bl	8004bb0 <FLASH_WaitForLastOperation>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	75fb      	strb	r3, [r7, #23]
 8004faa:	e045      	b.n	8005038 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8004fac:	4b26      	ldr	r3, [pc, #152]	; (8005048 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d028      	beq.n	800500e <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f023 0303 	bic.w	r3, r3, #3
 8004fc2:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f023 0303 	bic.w	r3, r3, #3
 8004fec:	4619      	mov	r1, r3
 8004fee:	2002      	movs	r0, #2
 8004ff0:	f7ff feb0 	bl	8004d54 <HAL_FLASHEx_DATAEEPROM_Erase>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4619      	mov	r1, r3
 8005002:	2010      	movs	r0, #16
 8005004:	f7ff fed8 	bl	8004db8 <HAL_FLASHEx_DATAEEPROM_Program>
 8005008:	4603      	mov	r3, r0
 800500a:	75fb      	strb	r3, [r7, #23]
 800500c:	e00b      	b.n	8005026 <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 800500e:	2200      	movs	r2, #0
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	2004      	movs	r0, #4
 8005014:	f7ff fed0 	bl	8004db8 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3301      	adds	r3, #1
 800501c:	2200      	movs	r2, #0
 800501e:	4619      	mov	r1, r3
 8005020:	2004      	movs	r0, #4
 8005022:	f7ff fec9 	bl	8004db8 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8005026:	4b08      	ldr	r3, [pc, #32]	; (8005048 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8005028:	7c1b      	ldrb	r3, [r3, #16]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 800502e:	2302      	movs	r3, #2
 8005030:	e003      	b.n	800503a <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 8005032:	4b05      	ldr	r3, [pc, #20]	; (8005048 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8005034:	2201      	movs	r2, #1
 8005036:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005038:	7dfb      	ldrb	r3, [r7, #23]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40023c00 	.word	0x40023c00
 8005048:	20000df0 	.word	0x20000df0

0800504c <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800505a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800505e:	f7ff fda7 	bl	8004bb0 <FLASH_WaitForLastOperation>
 8005062:	4603      	mov	r3, r0
 8005064:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10e      	bne.n	800508a <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4a08      	ldr	r2, [pc, #32]	; (8005094 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8005072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005076:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800507e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005082:	f7ff fd95 	bl	8004bb0 <FLASH_WaitForLastOperation>
 8005086:	4603      	mov	r3, r0
 8005088:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 800508a:	7bfb      	ldrb	r3, [r7, #15]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40023c00 	.word	0x40023c00

08005098 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050b4:	f7ff fd7c 	bl	8004bb0 <FLASH_WaitForLastOperation>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d13f      	bne.n	8005142 <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 80050c2:	78fb      	ldrb	r3, [r7, #3]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050d2:	f7ff fd6d 	bl	8004bb0 <FLASH_WaitForLastOperation>
 80050d6:	4603      	mov	r3, r0
 80050d8:	75fb      	strb	r3, [r7, #23]
 80050da:	e032      	b.n	8005142 <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	22ff      	movs	r2, #255	; 0xff
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4013      	ands	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	4619      	mov	r1, r3
 800510c:	2002      	movs	r0, #2
 800510e:	f7ff fe21 	bl	8004d54 <HAL_FLASHEx_DATAEEPROM_Erase>
 8005112:	4603      	mov	r3, r0
 8005114:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8005116:	4b0d      	ldr	r3, [pc, #52]	; (800514c <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8005118:	2200      	movs	r2, #0
 800511a:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f023 0303 	bic.w	r3, r3, #3
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4619      	mov	r1, r3
 8005126:	2010      	movs	r0, #16
 8005128:	f7ff fe46 	bl	8004db8 <HAL_FLASHEx_DATAEEPROM_Program>
 800512c:	4603      	mov	r3, r0
 800512e:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8005132:	7c1b      	ldrb	r3, [r3, #16]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <FLASH_DATAEEPROM_ProgramByte+0xa4>
 8005138:	2302      	movs	r3, #2
 800513a:	e003      	b.n	8005144 <FLASH_DATAEEPROM_ProgramByte+0xac>
 800513c:	4b03      	ldr	r3, [pc, #12]	; (800514c <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 800513e:	2201      	movs	r2, #1
 8005140:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005142:	7dfb      	ldrb	r3, [r7, #23]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000df0 	.word	0x20000df0

08005150 <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005168:	f24c 3050 	movw	r0, #50000	; 0xc350
 800516c:	f7ff fd20 	bl	8004bb0 <FLASH_WaitForLastOperation>
 8005170:	4603      	mov	r3, r0
 8005172:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d152      	bne.n	8005220 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 800517a:	887b      	ldrh	r3, [r7, #2]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	887a      	ldrh	r2, [r7, #2]
 8005184:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005186:	f24c 3050 	movw	r0, #50000	; 0xc350
 800518a:	f7ff fd11 	bl	8004bb0 <FLASH_WaitForLastOperation>
 800518e:	4603      	mov	r3, r0
 8005190:	75fb      	strb	r3, [r7, #23]
 8005192:	e045      	b.n	8005220 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8005194:	4b25      	ldr	r3, [pc, #148]	; (800522c <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8005196:	2200      	movs	r2, #0
 8005198:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d028      	beq.n	80051f6 <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	43db      	mvns	r3, r3
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f023 0303 	bic.w	r3, r3, #3
 80051d4:	4619      	mov	r1, r3
 80051d6:	2002      	movs	r0, #2
 80051d8:	f7ff fdbc 	bl	8004d54 <HAL_FLASHEx_DATAEEPROM_Erase>
 80051dc:	4603      	mov	r3, r0
 80051de:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4619      	mov	r1, r3
 80051ea:	2010      	movs	r0, #16
 80051ec:	f7ff fde4 	bl	8004db8 <HAL_FLASHEx_DATAEEPROM_Program>
 80051f0:	4603      	mov	r3, r0
 80051f2:	75fb      	strb	r3, [r7, #23]
 80051f4:	e00b      	b.n	800520e <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 80051f6:	2200      	movs	r2, #0
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	2004      	movs	r0, #4
 80051fc:	f7ff fddc 	bl	8004db8 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3301      	adds	r3, #1
 8005204:	2200      	movs	r2, #0
 8005206:	4619      	mov	r1, r3
 8005208:	2004      	movs	r0, #4
 800520a:	f7ff fdd5 	bl	8004db8 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8005210:	7c1b      	ldrb	r3, [r3, #16]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 8005216:	2302      	movs	r3, #2
 8005218:	e003      	b.n	8005222 <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 800521c:	2201      	movs	r2, #1
 800521e:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005220:	7dfb      	ldrb	r3, [r7, #23]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000df0 	.word	0x20000df0

08005230 <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800523e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005242:	f7ff fcb5 	bl	8004bb0 <FLASH_WaitForLastOperation>
 8005246:	4603      	mov	r3, r0
 8005248:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d108      	bne.n	8005262 <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005256:	f24c 3050 	movw	r0, #50000	; 0xc350
 800525a:	f7ff fca9 	bl	8004bb0 <FLASH_WaitForLastOperation>
 800525e:	4603      	mov	r3, r0
 8005260:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005282:	e154      	b.n	800552e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	2101      	movs	r1, #1
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	fa01 f303 	lsl.w	r3, r1, r3
 8005290:	4013      	ands	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 8146 	beq.w	8005528 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d005      	beq.n	80052b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d130      	bne.n	8005316 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	2203      	movs	r2, #3
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	43db      	mvns	r3, r3
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4013      	ands	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80052ea:	2201      	movs	r2, #1
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	43db      	mvns	r3, r3
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4013      	ands	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	f003 0201 	and.w	r2, r3, #1
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b03      	cmp	r3, #3
 8005320:	d017      	beq.n	8005352 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	2203      	movs	r2, #3
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4013      	ands	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d123      	bne.n	80053a6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	08da      	lsrs	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3208      	adds	r2, #8
 8005366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	220f      	movs	r2, #15
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	43db      	mvns	r3, r3
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4013      	ands	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	08da      	lsrs	r2, r3, #3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3208      	adds	r2, #8
 80053a0:	6939      	ldr	r1, [r7, #16]
 80053a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	2203      	movs	r2, #3
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	43db      	mvns	r3, r3
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4013      	ands	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f003 0203 	and.w	r2, r3, #3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 80a0 	beq.w	8005528 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053e8:	4b58      	ldr	r3, [pc, #352]	; (800554c <HAL_GPIO_Init+0x2e0>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	4a57      	ldr	r2, [pc, #348]	; (800554c <HAL_GPIO_Init+0x2e0>)
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	6213      	str	r3, [r2, #32]
 80053f4:	4b55      	ldr	r3, [pc, #340]	; (800554c <HAL_GPIO_Init+0x2e0>)
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8005400:	4a53      	ldr	r2, [pc, #332]	; (8005550 <HAL_GPIO_Init+0x2e4>)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	089b      	lsrs	r3, r3, #2
 8005406:	3302      	adds	r3, #2
 8005408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800540c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	220f      	movs	r2, #15
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4013      	ands	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a4b      	ldr	r2, [pc, #300]	; (8005554 <HAL_GPIO_Init+0x2e8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d019      	beq.n	8005460 <HAL_GPIO_Init+0x1f4>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a4a      	ldr	r2, [pc, #296]	; (8005558 <HAL_GPIO_Init+0x2ec>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <HAL_GPIO_Init+0x1f0>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a49      	ldr	r2, [pc, #292]	; (800555c <HAL_GPIO_Init+0x2f0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00d      	beq.n	8005458 <HAL_GPIO_Init+0x1ec>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a48      	ldr	r2, [pc, #288]	; (8005560 <HAL_GPIO_Init+0x2f4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <HAL_GPIO_Init+0x1e8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a47      	ldr	r2, [pc, #284]	; (8005564 <HAL_GPIO_Init+0x2f8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d101      	bne.n	8005450 <HAL_GPIO_Init+0x1e4>
 800544c:	2304      	movs	r3, #4
 800544e:	e008      	b.n	8005462 <HAL_GPIO_Init+0x1f6>
 8005450:	2305      	movs	r3, #5
 8005452:	e006      	b.n	8005462 <HAL_GPIO_Init+0x1f6>
 8005454:	2303      	movs	r3, #3
 8005456:	e004      	b.n	8005462 <HAL_GPIO_Init+0x1f6>
 8005458:	2302      	movs	r3, #2
 800545a:	e002      	b.n	8005462 <HAL_GPIO_Init+0x1f6>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <HAL_GPIO_Init+0x1f6>
 8005460:	2300      	movs	r3, #0
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	f002 0203 	and.w	r2, r2, #3
 8005468:	0092      	lsls	r2, r2, #2
 800546a:	4093      	lsls	r3, r2
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005472:	4937      	ldr	r1, [pc, #220]	; (8005550 <HAL_GPIO_Init+0x2e4>)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	089b      	lsrs	r3, r3, #2
 8005478:	3302      	adds	r3, #2
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005480:	4b39      	ldr	r3, [pc, #228]	; (8005568 <HAL_GPIO_Init+0x2fc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	43db      	mvns	r3, r3
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4013      	ands	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80054a4:	4a30      	ldr	r2, [pc, #192]	; (8005568 <HAL_GPIO_Init+0x2fc>)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80054aa:	4b2f      	ldr	r3, [pc, #188]	; (8005568 <HAL_GPIO_Init+0x2fc>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	43db      	mvns	r3, r3
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4013      	ands	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80054ce:	4a26      	ldr	r2, [pc, #152]	; (8005568 <HAL_GPIO_Init+0x2fc>)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054d4:	4b24      	ldr	r3, [pc, #144]	; (8005568 <HAL_GPIO_Init+0x2fc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	43db      	mvns	r3, r3
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4013      	ands	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80054f8:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <HAL_GPIO_Init+0x2fc>)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054fe:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <HAL_GPIO_Init+0x2fc>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	43db      	mvns	r3, r3
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4013      	ands	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005522:	4a11      	ldr	r2, [pc, #68]	; (8005568 <HAL_GPIO_Init+0x2fc>)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3301      	adds	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	f47f aea3 	bne.w	8005284 <HAL_GPIO_Init+0x18>
  }
}
 800553e:	bf00      	nop
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40023800 	.word	0x40023800
 8005550:	40010000 	.word	0x40010000
 8005554:	40020000 	.word	0x40020000
 8005558:	40020400 	.word	0x40020400
 800555c:	40020800 	.word	0x40020800
 8005560:	40020c00 	.word	0x40020c00
 8005564:	40021000 	.word	0x40021000
 8005568:	40010400 	.word	0x40010400

0800556c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	887b      	ldrh	r3, [r7, #2]
 800557e:	4013      	ands	r3, r2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
 8005588:	e001      	b.n	800558e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800558e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr

0800559a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	460b      	mov	r3, r1
 80055a4:	807b      	strh	r3, [r7, #2]
 80055a6:	4613      	mov	r3, r2
 80055a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055aa:	787b      	ldrb	r3, [r7, #1]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055b0:	887a      	ldrh	r2, [r7, #2]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80055b6:	e003      	b.n	80055c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80055b8:	887b      	ldrh	r3, [r7, #2]
 80055ba:	041a      	lsls	r2, r3, #16
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	619a      	str	r2, [r3, #24]
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr
	...

080055cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80055d6:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	4013      	ands	r3, r2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d006      	beq.n	80055f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055e2:	4a05      	ldr	r2, [pc, #20]	; (80055f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe f980 	bl	80038f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40010400 	.word	0x40010400

080055fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e12b      	b.n	8005866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fd ffb2 	bl	800358c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2224      	movs	r2, #36	; 0x24
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800564e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800565e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005660:	f002 fdb0 	bl	80081c4 <HAL_RCC_GetPCLK1Freq>
 8005664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4a81      	ldr	r2, [pc, #516]	; (8005870 <HAL_I2C_Init+0x274>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d807      	bhi.n	8005680 <HAL_I2C_Init+0x84>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a80      	ldr	r2, [pc, #512]	; (8005874 <HAL_I2C_Init+0x278>)
 8005674:	4293      	cmp	r3, r2
 8005676:	bf94      	ite	ls
 8005678:	2301      	movls	r3, #1
 800567a:	2300      	movhi	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	e006      	b.n	800568e <HAL_I2C_Init+0x92>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4a7d      	ldr	r2, [pc, #500]	; (8005878 <HAL_I2C_Init+0x27c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	bf94      	ite	ls
 8005688:	2301      	movls	r3, #1
 800568a:	2300      	movhi	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e0e7      	b.n	8005866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a78      	ldr	r2, [pc, #480]	; (800587c <HAL_I2C_Init+0x280>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	0c9b      	lsrs	r3, r3, #18
 80056a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	4a6a      	ldr	r2, [pc, #424]	; (8005870 <HAL_I2C_Init+0x274>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d802      	bhi.n	80056d0 <HAL_I2C_Init+0xd4>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	3301      	adds	r3, #1
 80056ce:	e009      	b.n	80056e4 <HAL_I2C_Init+0xe8>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	4a69      	ldr	r2, [pc, #420]	; (8005880 <HAL_I2C_Init+0x284>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	099b      	lsrs	r3, r3, #6
 80056e2:	3301      	adds	r3, #1
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	495c      	ldr	r1, [pc, #368]	; (8005870 <HAL_I2C_Init+0x274>)
 8005700:	428b      	cmp	r3, r1
 8005702:	d819      	bhi.n	8005738 <HAL_I2C_Init+0x13c>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	1e59      	subs	r1, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005712:	1c59      	adds	r1, r3, #1
 8005714:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005718:	400b      	ands	r3, r1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <HAL_I2C_Init+0x138>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1e59      	subs	r1, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	fbb1 f3f3 	udiv	r3, r1, r3
 800572c:	3301      	adds	r3, #1
 800572e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005732:	e051      	b.n	80057d8 <HAL_I2C_Init+0x1dc>
 8005734:	2304      	movs	r3, #4
 8005736:	e04f      	b.n	80057d8 <HAL_I2C_Init+0x1dc>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d111      	bne.n	8005764 <HAL_I2C_Init+0x168>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	1e58      	subs	r0, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6859      	ldr	r1, [r3, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	440b      	add	r3, r1
 800574e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005752:	3301      	adds	r3, #1
 8005754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	e012      	b.n	800578a <HAL_I2C_Init+0x18e>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	1e58      	subs	r0, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	0099      	lsls	r1, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	fbb0 f3f3 	udiv	r3, r0, r3
 800577a:	3301      	adds	r3, #1
 800577c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005780:	2b00      	cmp	r3, #0
 8005782:	bf0c      	ite	eq
 8005784:	2301      	moveq	r3, #1
 8005786:	2300      	movne	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_I2C_Init+0x196>
 800578e:	2301      	movs	r3, #1
 8005790:	e022      	b.n	80057d8 <HAL_I2C_Init+0x1dc>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10e      	bne.n	80057b8 <HAL_I2C_Init+0x1bc>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1e58      	subs	r0, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6859      	ldr	r1, [r3, #4]
 80057a2:	460b      	mov	r3, r1
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	440b      	add	r3, r1
 80057a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ac:	3301      	adds	r3, #1
 80057ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b6:	e00f      	b.n	80057d8 <HAL_I2C_Init+0x1dc>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1e58      	subs	r0, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6859      	ldr	r1, [r3, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	0099      	lsls	r1, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ce:	3301      	adds	r3, #1
 80057d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	6809      	ldr	r1, [r1, #0]
 80057dc:	4313      	orrs	r3, r2
 80057de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6911      	ldr	r1, [r2, #16]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68d2      	ldr	r2, [r2, #12]
 8005812:	4311      	orrs	r1, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	430b      	orrs	r3, r1
 800581a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695a      	ldr	r2, [r3, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	000186a0 	.word	0x000186a0
 8005874:	001e847f 	.word	0x001e847f
 8005878:	003d08ff 	.word	0x003d08ff
 800587c:	431bde83 	.word	0x431bde83
 8005880:	10624dd3 	.word	0x10624dd3

08005884 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	607a      	str	r2, [r7, #4]
 800588e:	461a      	mov	r2, r3
 8005890:	460b      	mov	r3, r1
 8005892:	817b      	strh	r3, [r7, #10]
 8005894:	4613      	mov	r3, r2
 8005896:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005898:	f7ff f810 	bl	80048bc <HAL_GetTick>
 800589c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	f040 80e0 	bne.w	8005a6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	2319      	movs	r3, #25
 80058b2:	2201      	movs	r2, #1
 80058b4:	4970      	ldr	r1, [pc, #448]	; (8005a78 <HAL_I2C_Master_Transmit+0x1f4>)
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f964 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
 80058c4:	e0d3      	b.n	8005a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_I2C_Master_Transmit+0x50>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e0cc      	b.n	8005a6e <HAL_I2C_Master_Transmit+0x1ea>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d007      	beq.n	80058fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005908:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2221      	movs	r2, #33	; 0x21
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2210      	movs	r2, #16
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	893a      	ldrh	r2, [r7, #8]
 800592a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4a50      	ldr	r2, [pc, #320]	; (8005a7c <HAL_I2C_Master_Transmit+0x1f8>)
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800593c:	8979      	ldrh	r1, [r7, #10]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	6a3a      	ldr	r2, [r7, #32]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 f89c 	bl	8005a80 <I2C_MasterRequestWrite>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e08d      	b.n	8005a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005968:	e066      	b.n	8005a38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	6a39      	ldr	r1, [r7, #32]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f9de 	bl	8005d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00d      	beq.n	8005996 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	2b04      	cmp	r3, #4
 8005980:	d107      	bne.n	8005992 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005990:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e06b      	b.n	8005a6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	781a      	ldrb	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d11b      	bne.n	8005a0c <HAL_I2C_Master_Transmit+0x188>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d017      	beq.n	8005a0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	6a39      	ldr	r1, [r7, #32]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f9ce 	bl	8005db2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d107      	bne.n	8005a34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e01a      	b.n	8005a6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d194      	bne.n	800596a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e000      	b.n	8005a6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a6c:	2302      	movs	r3, #2
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	00100002 	.word	0x00100002
 8005a7c:	ffff0000 	.word	0xffff0000

08005a80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d006      	beq.n	8005aaa <I2C_MasterRequestWrite+0x2a>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d003      	beq.n	8005aaa <I2C_MasterRequestWrite+0x2a>
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005aa8:	d108      	bne.n	8005abc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	e00b      	b.n	8005ad4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	2b12      	cmp	r3, #18
 8005ac2:	d107      	bne.n	8005ad4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ad2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f84f 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00d      	beq.n	8005b08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005afa:	d103      	bne.n	8005b04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e035      	b.n	8005b74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b10:	d108      	bne.n	8005b24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b12:	897b      	ldrh	r3, [r7, #10]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b20:	611a      	str	r2, [r3, #16]
 8005b22:	e01b      	b.n	8005b5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b24:	897b      	ldrh	r3, [r7, #10]
 8005b26:	11db      	asrs	r3, r3, #7
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	f003 0306 	and.w	r3, r3, #6
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f063 030f 	orn	r3, r3, #15
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	490e      	ldr	r1, [pc, #56]	; (8005b7c <I2C_MasterRequestWrite+0xfc>)
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 f875 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e010      	b.n	8005b74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b52:	897b      	ldrh	r3, [r7, #10]
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	4907      	ldr	r1, [pc, #28]	; (8005b80 <I2C_MasterRequestWrite+0x100>)
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f865 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	00010008 	.word	0x00010008
 8005b80:	00010002 	.word	0x00010002

08005b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b94:	e025      	b.n	8005be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d021      	beq.n	8005be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fe fe8d 	bl	80048bc <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d116      	bne.n	8005be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f043 0220 	orr.w	r2, r3, #32
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e023      	b.n	8005c2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d10d      	bne.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	43da      	mvns	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bf0c      	ite	eq
 8005bfe:	2301      	moveq	r3, #1
 8005c00:	2300      	movne	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	e00c      	b.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	43da      	mvns	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4013      	ands	r3, r2
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bf0c      	ite	eq
 8005c1a:	2301      	moveq	r3, #1
 8005c1c:	2300      	movne	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d0b6      	beq.n	8005b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
 8005c3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c40:	e051      	b.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c50:	d123      	bne.n	8005c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f043 0204 	orr.w	r2, r3, #4
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e046      	b.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d021      	beq.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca2:	f7fe fe0b 	bl	80048bc <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d116      	bne.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f043 0220 	orr.w	r2, r3, #32
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e020      	b.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d10c      	bne.n	8005d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	43da      	mvns	r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	bf14      	ite	ne
 8005d02:	2301      	movne	r3, #1
 8005d04:	2300      	moveq	r3, #0
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	e00b      	b.n	8005d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	43da      	mvns	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4013      	ands	r3, r2
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d18d      	bne.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d3c:	e02d      	b.n	8005d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f878 	bl	8005e34 <I2C_IsAcknowledgeFailed>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e02d      	b.n	8005daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d021      	beq.n	8005d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d56:	f7fe fdb1 	bl	80048bc <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d116      	bne.n	8005d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e007      	b.n	8005daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da4:	2b80      	cmp	r3, #128	; 0x80
 8005da6:	d1ca      	bne.n	8005d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dbe:	e02d      	b.n	8005e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f837 	bl	8005e34 <I2C_IsAcknowledgeFailed>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e02d      	b.n	8005e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d021      	beq.n	8005e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd8:	f7fe fd70 	bl	80048bc <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d302      	bcc.n	8005dee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d116      	bne.n	8005e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	f043 0220 	orr.w	r2, r3, #32
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e007      	b.n	8005e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d1ca      	bne.n	8005dc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4a:	d11b      	bne.n	8005e84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	f043 0204 	orr.w	r2, r3, #4
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr

08005e90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e92:	b08b      	sub	sp, #44	; 0x2c
 8005e94:	af06      	add	r7, sp, #24
 8005e96:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e0d0      	b.n	8006044 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f008 f85c 	bl	800df74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2203      	movs	r2, #3
 8005ec0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f003 fd7d 	bl	80099c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	73fb      	strb	r3, [r7, #15]
 8005ed2:	e04c      	b.n	8005f6e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	440b      	add	r3, r1
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	440b      	add	r3, r1
 8005efa:	7bfa      	ldrb	r2, [r7, #15]
 8005efc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005efe:	7bfa      	ldrb	r2, [r7, #15]
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	b298      	uxth	r0, r3
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	440b      	add	r3, r1
 8005f10:	3336      	adds	r3, #54	; 0x36
 8005f12:	4602      	mov	r2, r0
 8005f14:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	440b      	add	r3, r1
 8005f26:	3303      	adds	r3, #3
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f2c:	7bfa      	ldrb	r2, [r7, #15]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	440b      	add	r3, r1
 8005f3a:	3338      	adds	r3, #56	; 0x38
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f40:	7bfa      	ldrb	r2, [r7, #15]
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	440b      	add	r3, r1
 8005f4e:	333c      	adds	r3, #60	; 0x3c
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f54:	7bfa      	ldrb	r2, [r7, #15]
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	440b      	add	r3, r1
 8005f62:	3340      	adds	r3, #64	; 0x40
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	73fb      	strb	r3, [r7, #15]
 8005f6e:	7bfa      	ldrb	r2, [r7, #15]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d3ad      	bcc.n	8005ed4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	73fb      	strb	r3, [r7, #15]
 8005f7c:	e044      	b.n	8006008 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f7e:	7bfa      	ldrb	r2, [r7, #15]
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	440b      	add	r3, r1
 8005f8c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f94:	7bfa      	ldrb	r2, [r7, #15]
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	440b      	add	r3, r1
 8005fa2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fa6:	7bfa      	ldrb	r2, [r7, #15]
 8005fa8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005faa:	7bfa      	ldrb	r2, [r7, #15]
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	440b      	add	r3, r1
 8005fb8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005fc0:	7bfa      	ldrb	r2, [r7, #15]
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	440b      	add	r3, r1
 8005fce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005fd6:	7bfa      	ldrb	r2, [r7, #15]
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	440b      	add	r3, r1
 8005fe4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fec:	7bfa      	ldrb	r2, [r7, #15]
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	440b      	add	r3, r1
 8005ffa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	3301      	adds	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
 8006008:	7bfa      	ldrb	r2, [r7, #15]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	429a      	cmp	r2, r3
 8006010:	d3b5      	bcc.n	8005f7e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	687e      	ldr	r6, [r7, #4]
 800601a:	466d      	mov	r5, sp
 800601c:	f106 0410 	add.w	r4, r6, #16
 8006020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	602b      	str	r3, [r5, #0]
 8006028:	1d33      	adds	r3, r6, #4
 800602a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800602c:	6838      	ldr	r0, [r7, #0]
 800602e:	f003 fce5 	bl	80099fc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800604c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_PCD_Start+0x16>
 800605e:	2302      	movs	r3, #2
 8006060:	e016      	b.n	8006090 <HAL_PCD_Start+0x44>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f003 fc94 	bl	800999c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006074:	2101      	movs	r1, #1
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f007 ff5e 	bl	800df38 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f006 f979 	bl	800c378 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f006 f971 	bl	800c38c <USB_ReadInterrupts>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b4:	d102      	bne.n	80060bc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 faf5 	bl	80066a6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f006 f963 	bl	800c38c <USB_ReadInterrupts>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d0:	d112      	bne.n	80060f8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060da:	b29a      	uxth	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e4:	b292      	uxth	r2, r2
 80060e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f007 ffbd 	bl	800e06a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80060f0:	2100      	movs	r1, #0
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f8c7 	bl	8006286 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f006 f945 	bl	800c38c <USB_ReadInterrupts>
 8006102:	4603      	mov	r3, r0
 8006104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800610c:	d10b      	bne.n	8006126 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006116:	b29a      	uxth	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006120:	b292      	uxth	r2, r2
 8006122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f006 f92e 	bl	800c38c <USB_ReadInterrupts>
 8006130:	4603      	mov	r3, r0
 8006132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613a:	d10b      	bne.n	8006154 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006144:	b29a      	uxth	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800614e:	b292      	uxth	r2, r2
 8006150:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4618      	mov	r0, r3
 800615a:	f006 f917 	bl	800c38c <USB_ReadInterrupts>
 800615e:	4603      	mov	r3, r0
 8006160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006168:	d126      	bne.n	80061b8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006172:	b29a      	uxth	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0204 	bic.w	r2, r2, #4
 800617c:	b292      	uxth	r2, r2
 800617e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800618a:	b29a      	uxth	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0208 	bic.w	r2, r2, #8
 8006194:	b292      	uxth	r2, r2
 8006196:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f007 ff9e 	bl	800e0dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061b2:	b292      	uxth	r2, r2
 80061b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f006 f8e5 	bl	800c38c <USB_ReadInterrupts>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061cc:	d126      	bne.n	800621c <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0208 	orr.w	r2, r2, #8
 80061e0:	b292      	uxth	r2, r2
 80061e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f8:	b292      	uxth	r2, r2
 80061fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006206:	b29a      	uxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0204 	orr.w	r2, r2, #4
 8006210:	b292      	uxth	r2, r2
 8006212:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f007 ff46 	bl	800e0a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	f006 f8b3 	bl	800c38c <USB_ReadInterrupts>
 8006226:	4603      	mov	r3, r0
 8006228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800622c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006230:	d10e      	bne.n	8006250 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800623a:	b29a      	uxth	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006244:	b292      	uxth	r2, r2
 8006246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f007 feff 	bl	800e04e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4618      	mov	r0, r3
 8006256:	f006 f899 	bl	800c38c <USB_ReadInterrupts>
 800625a:	4603      	mov	r3, r0
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006264:	d10b      	bne.n	800627e <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800626e:	b29a      	uxth	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006278:	b292      	uxth	r2, r2
 800627a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800627e:	bf00      	nop
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_PCD_SetAddress+0x1a>
 800629c:	2302      	movs	r3, #2
 800629e:	e013      	b.n	80062c8 <HAL_PCD_SetAddress+0x42>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	78fa      	ldrb	r2, [r7, #3]
 80062ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	78fa      	ldrb	r2, [r7, #3]
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f006 f84a 	bl	800c352 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	4608      	mov	r0, r1
 80062da:	4611      	mov	r1, r2
 80062dc:	461a      	mov	r2, r3
 80062de:	4603      	mov	r3, r0
 80062e0:	70fb      	strb	r3, [r7, #3]
 80062e2:	460b      	mov	r3, r1
 80062e4:	803b      	strh	r3, [r7, #0]
 80062e6:	4613      	mov	r3, r2
 80062e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da0e      	bge.n	8006314 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4413      	add	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	705a      	strb	r2, [r3, #1]
 8006312:	e00e      	b.n	8006332 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	f003 0207 	and.w	r2, r3, #7
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	4413      	add	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	b2da      	uxtb	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800633e:	883a      	ldrh	r2, [r7, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	78ba      	ldrb	r2, [r7, #2]
 8006348:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d004      	beq.n	800635c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800635c:	78bb      	ldrb	r3, [r7, #2]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d102      	bne.n	8006368 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_PCD_EP_Open+0xa6>
 8006372:	2302      	movs	r3, #2
 8006374:	e00e      	b.n	8006394 <HAL_PCD_EP_Open+0xc4>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68f9      	ldr	r1, [r7, #12]
 8006384:	4618      	mov	r0, r3
 8006386:	f003 fb59 	bl	8009a3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006392:	7afb      	ldrb	r3, [r7, #11]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	da0e      	bge.n	80063ce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4413      	add	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	705a      	strb	r2, [r3, #1]
 80063cc:	e00e      	b.n	80063ec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	f003 0207 	and.w	r2, r3, #7
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	4413      	add	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_PCD_EP_Close+0x6a>
 8006402:	2302      	movs	r3, #2
 8006404:	e00e      	b.n	8006424 <HAL_PCD_EP_Close+0x88>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68f9      	ldr	r1, [r7, #12]
 8006414:	4618      	mov	r0, r3
 8006416:	f003 fe7b 	bl	800a110 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	607a      	str	r2, [r7, #4]
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	460b      	mov	r3, r1
 800643a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800643c:	7afb      	ldrb	r3, [r7, #11]
 800643e:	f003 0207 	and.w	r2, r3, #7
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2200      	movs	r2, #0
 8006464:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2200      	movs	r2, #0
 800646a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800646c:	7afb      	ldrb	r3, [r7, #11]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	b2da      	uxtb	r2, r3
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006478:	7afb      	ldrb	r3, [r7, #11]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6979      	ldr	r1, [r7, #20]
 8006488:	4618      	mov	r0, r3
 800648a:	f004 f82d 	bl	800a4e8 <USB_EPStartXfer>
 800648e:	e005      	b.n	800649c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6979      	ldr	r1, [r7, #20]
 8006496:	4618      	mov	r0, r3
 8006498:	f004 f826 	bl	800a4e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	460b      	mov	r3, r1
 80064b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	f003 0207 	and.w	r2, r3, #7
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	440b      	add	r3, r1
 80064c4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80064c8:	681b      	ldr	r3, [r3, #0]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	460b      	mov	r3, r1
 80064e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064e4:	7afb      	ldrb	r3, [r7, #11]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2200      	movs	r2, #0
 8006518:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2201      	movs	r2, #1
 800651e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006520:	7afb      	ldrb	r3, [r7, #11]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	b2da      	uxtb	r2, r3
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800652c:	7afb      	ldrb	r3, [r7, #11]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	4618      	mov	r0, r3
 800653e:	f003 ffd3 	bl	800a4e8 <USB_EPStartXfer>
 8006542:	e005      	b.n	8006550 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6979      	ldr	r1, [r7, #20]
 800654a:	4618      	mov	r0, r3
 800654c:	f003 ffcc 	bl	800a4e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	460b      	mov	r3, r1
 8006564:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	f003 0207 	and.w	r2, r3, #7
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d901      	bls.n	8006578 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e03e      	b.n	80065f6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800657c:	2b00      	cmp	r3, #0
 800657e:	da0e      	bge.n	800659e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	4413      	add	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	705a      	strb	r2, [r3, #1]
 800659c:	e00c      	b.n	80065b8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800659e:	78fa      	ldrb	r2, [r7, #3]
 80065a0:	4613      	mov	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	4413      	add	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	f003 0307 	and.w	r3, r3, #7
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_PCD_EP_SetStall+0x7e>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e00e      	b.n	80065f6 <HAL_PCD_EP_SetStall+0x9c>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68f9      	ldr	r1, [r7, #12]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f005 fdb6 	bl	800c158 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	f003 020f 	and.w	r2, r3, #15
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	429a      	cmp	r2, r3
 8006616:	d901      	bls.n	800661c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e040      	b.n	800669e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800661c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006620:	2b00      	cmp	r3, #0
 8006622:	da0e      	bge.n	8006642 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	4413      	add	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	705a      	strb	r2, [r3, #1]
 8006640:	e00e      	b.n	8006660 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	f003 0207 	and.w	r2, r3, #7
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4413      	add	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	b2da      	uxtb	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_PCD_EP_ClrStall+0x82>
 800667c:	2302      	movs	r3, #2
 800667e:	e00e      	b.n	800669e <HAL_PCD_EP_ClrStall+0xa0>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68f9      	ldr	r1, [r7, #12]
 800668e:	4618      	mov	r0, r3
 8006690:	f005 fdb2 	bl	800c1f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b08e      	sub	sp, #56	; 0x38
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80066ae:	e2ec      	b.n	8006c8a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066b8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80066ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80066c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 8161 	bne.w	8006992 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80066d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066d2:	f003 0310 	and.w	r3, r3, #16
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d152      	bne.n	8006780 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ea:	81fb      	strh	r3, [r7, #14]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	89fb      	ldrh	r3, [r7, #14]
 80066f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3328      	adds	r3, #40	; 0x28
 8006702:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670c:	b29b      	uxth	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	4413      	add	r3, r2
 8006718:	3302      	adds	r3, #2
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	695a      	ldr	r2, [r3, #20]
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	441a      	add	r2, r3
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800673e:	2100      	movs	r1, #0
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f007 fc6a 	bl	800e01a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 829b 	beq.w	8006c8a <PCD_EP_ISR_Handler+0x5e4>
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 8296 	bne.w	8006c8a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006764:	b2db      	uxtb	r3, r3
 8006766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800676a:	b2da      	uxtb	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	b292      	uxth	r2, r2
 8006772:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800677e:	e284      	b.n	8006c8a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006790:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006796:	2b00      	cmp	r3, #0
 8006798:	d034      	beq.n	8006804 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	4413      	add	r3, r2
 80067ae:	3306      	adds	r3, #6
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6812      	ldr	r2, [r2, #0]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80067d8:	b29b      	uxth	r3, r3
 80067da:	f005 fe2b 	bl	800c434 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80067ea:	4013      	ands	r3, r2
 80067ec:	823b      	strh	r3, [r7, #16]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	8a3a      	ldrh	r2, [r7, #16]
 80067f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067f8:	b292      	uxth	r2, r2
 80067fa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f007 fbdf 	bl	800dfc0 <HAL_PCD_SetupStageCallback>
 8006802:	e242      	b.n	8006c8a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006804:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006808:	2b00      	cmp	r3, #0
 800680a:	f280 823e 	bge.w	8006c8a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29a      	uxth	r2, r3
 8006816:	f640 738f 	movw	r3, #3983	; 0xf8f
 800681a:	4013      	ands	r3, r2
 800681c:	83bb      	strh	r3, [r7, #28]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	8bba      	ldrh	r2, [r7, #28]
 8006824:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006828:	b292      	uxth	r2, r2
 800682a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006834:	b29b      	uxth	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	4413      	add	r3, r2
 8006840:	3306      	adds	r3, #6
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d019      	beq.n	8006894 <PCD_EP_ISR_Handler+0x1ee>
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d015      	beq.n	8006894 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	6959      	ldr	r1, [r3, #20]
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006878:	b29b      	uxth	r3, r3
 800687a:	f005 fddb 	bl	800c434 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	441a      	add	r2, r3
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800688c:	2100      	movs	r1, #0
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f007 fba8 	bl	800dfe4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	b29b      	uxth	r3, r3
 800689c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f040 81f2 	bne.w	8006c8a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	61bb      	str	r3, [r7, #24]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	4413      	add	r3, r2
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d112      	bne.n	80068f4 <PCD_EP_ISR_Handler+0x24e>
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068d8:	b29a      	uxth	r2, r3
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	801a      	strh	r2, [r3, #0]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	e02f      	b.n	8006954 <PCD_EP_ISR_Handler+0x2ae>
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b3e      	cmp	r3, #62	; 0x3e
 80068fa:	d813      	bhi.n	8006924 <PCD_EP_ISR_Handler+0x27e>
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	633b      	str	r3, [r7, #48]	; 0x30
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <PCD_EP_ISR_Handler+0x270>
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	3301      	adds	r3, #1
 8006914:	633b      	str	r3, [r7, #48]	; 0x30
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	b29b      	uxth	r3, r3
 800691a:	029b      	lsls	r3, r3, #10
 800691c:	b29a      	uxth	r2, r3
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e017      	b.n	8006954 <PCD_EP_ISR_Handler+0x2ae>
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	633b      	str	r3, [r7, #48]	; 0x30
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	2b00      	cmp	r3, #0
 8006936:	d102      	bne.n	800693e <PCD_EP_ISR_Handler+0x298>
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	3b01      	subs	r3, #1
 800693c:	633b      	str	r3, [r7, #48]	; 0x30
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	b29b      	uxth	r3, r3
 8006942:	029b      	lsls	r3, r3, #10
 8006944:	b29b      	uxth	r3, r3
 8006946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800694a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800694e:	b29a      	uxth	r2, r3
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006964:	827b      	strh	r3, [r7, #18]
 8006966:	8a7b      	ldrh	r3, [r7, #18]
 8006968:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800696c:	827b      	strh	r3, [r7, #18]
 800696e:	8a7b      	ldrh	r3, [r7, #18]
 8006970:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006974:	827b      	strh	r3, [r7, #18]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	8a7b      	ldrh	r3, [r7, #18]
 800697c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698c:	b29b      	uxth	r3, r3
 800698e:	8013      	strh	r3, [r2, #0]
 8006990:	e17b      	b.n	8006c8a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80069a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f280 80ea 	bge.w	8006b82 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29a      	uxth	r2, r3
 80069c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80069c4:	4013      	ands	r3, r2
 80069c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80069d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069dc:	b292      	uxth	r2, r2
 80069de:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80069e0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	4413      	add	r3, r2
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	7b1b      	ldrb	r3, [r3, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d122      	bne.n	8006a44 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	3306      	adds	r3, #6
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a26:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006a28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8087 	beq.w	8006b3e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	6959      	ldr	r1, [r3, #20]
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	88da      	ldrh	r2, [r3, #6]
 8006a3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a3e:	f005 fcf9 	bl	800c434 <USB_ReadPMA>
 8006a42:	e07c      	b.n	8006b3e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	78db      	ldrb	r3, [r3, #3]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d108      	bne.n	8006a5e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006a4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f927 	bl	8006ca6 <HAL_PCD_EP_DB_Receive>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a5c:	e06f      	b.n	8006b3e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a78:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	441a      	add	r2, r3
 8006a88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d021      	beq.n	8006afc <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	4413      	add	r3, r2
 8006acc:	3302      	adds	r3, #2
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ae0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006ae2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02a      	beq.n	8006b3e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6818      	ldr	r0, [r3, #0]
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	6959      	ldr	r1, [r3, #20]
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	891a      	ldrh	r2, [r3, #8]
 8006af4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006af6:	f005 fc9d 	bl	800c434 <USB_ReadPMA>
 8006afa:	e020      	b.n	8006b3e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4413      	add	r3, r2
 8006b10:	3306      	adds	r3, #6
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b24:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006b26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d008      	beq.n	8006b3e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	6959      	ldr	r1, [r3, #20]
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	895a      	ldrh	r2, [r3, #10]
 8006b38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b3a:	f005 fc7b 	bl	800c434 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	69da      	ldr	r2, [r3, #28]
 8006b42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b44:	441a      	add	r2, r3
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	695a      	ldr	r2, [r3, #20]
 8006b4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b50:	441a      	add	r2, r3
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d004      	beq.n	8006b68 <PCD_EP_ISR_Handler+0x4c2>
 8006b5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d206      	bcs.n	8006b76 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f007 fa38 	bl	800dfe4 <HAL_PCD_DataOutStageCallback>
 8006b74:	e005      	b.n	8006b82 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f003 fcb3 	bl	800a4e8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006b82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d07e      	beq.n	8006c8a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8006b8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bba:	843b      	strh	r3, [r7, #32]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	8c3b      	ldrh	r3, [r7, #32]
 8006bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	78db      	ldrb	r3, [r3, #3]
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d00c      	beq.n	8006bfa <PCD_EP_ISR_Handler+0x554>
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	78db      	ldrb	r3, [r3, #3]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d146      	bne.n	8006c7e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006bf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d141      	bne.n	8006c7e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3302      	adds	r3, #2
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6812      	ldr	r2, [r2, #0]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c22:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	8bfb      	ldrh	r3, [r7, #30]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d906      	bls.n	8006c3c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	8bfb      	ldrh	r3, [r7, #30]
 8006c34:	1ad2      	subs	r2, r2, r3
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	619a      	str	r2, [r3, #24]
 8006c3a:	e002      	b.n	8006c42 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	2200      	movs	r2, #0
 8006c40:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f007 f9e2 	bl	800e01a <HAL_PCD_DataInStageCallback>
 8006c56:	e018      	b.n	8006c8a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	695a      	ldr	r2, [r3, #20]
 8006c5c:	8bfb      	ldrh	r3, [r7, #30]
 8006c5e:	441a      	add	r2, r3
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	8bfb      	ldrh	r3, [r7, #30]
 8006c6a:	441a      	add	r2, r3
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c76:	4618      	mov	r0, r3
 8006c78:	f003 fc36 	bl	800a4e8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006c7c:	e005      	b.n	8006c8a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006c7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c80:	461a      	mov	r2, r3
 8006c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f91b 	bl	8006ec0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	b21b      	sxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f6ff ad0a 	blt.w	80066b0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3738      	adds	r7, #56	; 0x38
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b088      	sub	sp, #32
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d07e      	beq.n	8006dbc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3302      	adds	r3, #2
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	6812      	ldr	r2, [r2, #0]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ce6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	699a      	ldr	r2, [r3, #24]
 8006cec:	8b7b      	ldrh	r3, [r7, #26]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d306      	bcc.n	8006d00 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	8b7b      	ldrh	r3, [r7, #26]
 8006cf8:	1ad2      	subs	r2, r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	619a      	str	r2, [r3, #24]
 8006cfe:	e002      	b.n	8006d06 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2200      	movs	r2, #0
 8006d04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d123      	bne.n	8006d56 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d28:	833b      	strh	r3, [r7, #24]
 8006d2a:	8b3b      	ldrh	r3, [r7, #24]
 8006d2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d30:	833b      	strh	r3, [r7, #24]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	441a      	add	r2, r3
 8006d40:	8b3b      	ldrh	r3, [r7, #24]
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d01f      	beq.n	8006da0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7a:	82fb      	strh	r3, [r7, #22]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	441a      	add	r2, r3
 8006d8a:	8afb      	ldrh	r3, [r7, #22]
 8006d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006da0:	8b7b      	ldrh	r3, [r7, #26]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8087 	beq.w	8006eb6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	6959      	ldr	r1, [r3, #20]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	891a      	ldrh	r2, [r3, #8]
 8006db4:	8b7b      	ldrh	r3, [r7, #26]
 8006db6:	f005 fb3d 	bl	800c434 <USB_ReadPMA>
 8006dba:	e07c      	b.n	8006eb6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	4413      	add	r3, r2
 8006dd0:	3306      	adds	r3, #6
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	6812      	ldr	r2, [r2, #0]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006de4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	8b7b      	ldrh	r3, [r7, #26]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d306      	bcc.n	8006dfe <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	699a      	ldr	r2, [r3, #24]
 8006df4:	8b7b      	ldrh	r3, [r7, #26]
 8006df6:	1ad2      	subs	r2, r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	619a      	str	r2, [r3, #24]
 8006dfc:	e002      	b.n	8006e04 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2200      	movs	r2, #0
 8006e02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d123      	bne.n	8006e54 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e26:	83fb      	strh	r3, [r7, #30]
 8006e28:	8bfb      	ldrh	r3, [r7, #30]
 8006e2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e2e:	83fb      	strh	r3, [r7, #30]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	441a      	add	r2, r3
 8006e3e:	8bfb      	ldrh	r3, [r7, #30]
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d11f      	bne.n	8006e9e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e78:	83bb      	strh	r3, [r7, #28]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	441a      	add	r2, r3
 8006e88:	8bbb      	ldrh	r3, [r7, #28]
 8006e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006e9e:	8b7b      	ldrh	r3, [r7, #26]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d008      	beq.n	8006eb6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6818      	ldr	r0, [r3, #0]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	6959      	ldr	r1, [r3, #20]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	895a      	ldrh	r2, [r3, #10]
 8006eb0:	8b7b      	ldrh	r3, [r7, #26]
 8006eb2:	f005 fabf 	bl	800c434 <USB_ReadPMA>
    }
  }

  return count;
 8006eb6:	8b7b      	ldrh	r3, [r7, #26]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b0a2      	sub	sp, #136	; 0x88
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 81c7 	beq.w	8007268 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	4413      	add	r3, r2
 8006eee:	3302      	adds	r3, #2
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	699a      	ldr	r2, [r3, #24]
 8006f0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d907      	bls.n	8006f22 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f1a:	1ad2      	subs	r2, r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	619a      	str	r2, [r3, #24]
 8006f20:	e002      	b.n	8006f28 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2200      	movs	r2, #0
 8006f26:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 80b9 	bne.w	80070a4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d126      	bne.n	8006f88 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	4413      	add	r3, r2
 8006f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	011a      	lsls	r2, r3, #4
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	801a      	strh	r2, [r3, #0]
 8006f86:	e01a      	b.n	8006fbe <HAL_PCD_EP_DB_Transmit+0xfe>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	785b      	ldrb	r3, [r3, #1]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d116      	bne.n	8006fbe <HAL_PCD_EP_DB_Transmit+0xfe>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	633b      	str	r3, [r7, #48]	; 0x30
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	4413      	add	r3, r2
 8006fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	011a      	lsls	r2, r3, #4
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fba:	2200      	movs	r2, #0
 8006fbc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	623b      	str	r3, [r7, #32]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	785b      	ldrb	r3, [r3, #1]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d126      	bne.n	800701a <HAL_PCD_EP_DB_Transmit+0x15a>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	011a      	lsls	r2, r3, #4
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	4413      	add	r3, r2
 8006fee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	801a      	strh	r2, [r3, #0]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800700e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007012:	b29a      	uxth	r2, r3
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	801a      	strh	r2, [r3, #0]
 8007018:	e017      	b.n	800704a <HAL_PCD_EP_DB_Transmit+0x18a>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d113      	bne.n	800704a <HAL_PCD_EP_DB_Transmit+0x18a>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702a:	b29b      	uxth	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	4413      	add	r3, r2
 8007032:	623b      	str	r3, [r7, #32]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	011a      	lsls	r2, r3, #4
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	4413      	add	r3, r2
 800703e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007042:	61fb      	str	r3, [r7, #28]
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2200      	movs	r2, #0
 8007048:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	4619      	mov	r1, r3
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f006 ffe2 	bl	800e01a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 82d4 	beq.w	800760a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707c:	827b      	strh	r3, [r7, #18]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	441a      	add	r2, r3
 800708c:	8a7b      	ldrh	r3, [r7, #18]
 800708e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007096:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800709a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800709e:	b29b      	uxth	r3, r3
 80070a0:	8013      	strh	r3, [r2, #0]
 80070a2:	e2b2      	b.n	800760a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d021      	beq.n	80070f2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	441a      	add	r2, r3
 80070da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80070de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	f040 8286 	bne.w	800760a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	695a      	ldr	r2, [r3, #20]
 8007102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007106:	441a      	add	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	69da      	ldr	r2, [r3, #28]
 8007110:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007114:	441a      	add	r2, r3
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	6a1a      	ldr	r2, [r3, #32]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	429a      	cmp	r2, r3
 8007124:	d309      	bcc.n	800713a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	6a1a      	ldr	r2, [r3, #32]
 8007130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007132:	1ad2      	subs	r2, r2, r3
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	621a      	str	r2, [r3, #32]
 8007138:	e015      	b.n	8007166 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d107      	bne.n	8007152 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8007142:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007146:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007150:	e009      	b.n	8007166 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2200      	movs	r2, #0
 8007164:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	785b      	ldrb	r3, [r3, #1]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d155      	bne.n	800721a <HAL_PCD_EP_DB_Transmit+0x35a>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	63bb      	str	r3, [r7, #56]	; 0x38
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	4413      	add	r3, r2
 8007184:	63bb      	str	r3, [r7, #56]	; 0x38
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	011a      	lsls	r2, r3, #4
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	4413      	add	r3, r2
 8007190:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007194:	637b      	str	r3, [r7, #52]	; 0x34
 8007196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007198:	2b00      	cmp	r3, #0
 800719a:	d112      	bne.n	80071c2 <HAL_PCD_EP_DB_Transmit+0x302>
 800719c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071aa:	801a      	strh	r2, [r3, #0]
 80071ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	801a      	strh	r2, [r3, #0]
 80071c0:	e047      	b.n	8007252 <HAL_PCD_EP_DB_Transmit+0x392>
 80071c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071c4:	2b3e      	cmp	r3, #62	; 0x3e
 80071c6:	d811      	bhi.n	80071ec <HAL_PCD_EP_DB_Transmit+0x32c>
 80071c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_PCD_EP_DB_Transmit+0x31e>
 80071d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071da:	3301      	adds	r3, #1
 80071dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80071de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	029b      	lsls	r3, r3, #10
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e032      	b.n	8007252 <HAL_PCD_EP_DB_Transmit+0x392>
 80071ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ee:	095b      	lsrs	r3, r3, #5
 80071f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80071f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <HAL_PCD_EP_DB_Transmit+0x342>
 80071fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071fe:	3b01      	subs	r3, #1
 8007200:	64bb      	str	r3, [r7, #72]	; 0x48
 8007202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007204:	b29b      	uxth	r3, r3
 8007206:	029b      	lsls	r3, r3, #10
 8007208:	b29b      	uxth	r3, r3
 800720a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800720e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007212:	b29a      	uxth	r2, r3
 8007214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007216:	801a      	strh	r2, [r3, #0]
 8007218:	e01b      	b.n	8007252 <HAL_PCD_EP_DB_Transmit+0x392>
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d117      	bne.n	8007252 <HAL_PCD_EP_DB_Transmit+0x392>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	643b      	str	r3, [r7, #64]	; 0x40
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007230:	b29b      	uxth	r3, r3
 8007232:	461a      	mov	r2, r3
 8007234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007236:	4413      	add	r3, r2
 8007238:	643b      	str	r3, [r7, #64]	; 0x40
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	011a      	lsls	r2, r3, #4
 8007240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007242:	4413      	add	r3, r2
 8007244:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800724a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800724c:	b29a      	uxth	r2, r3
 800724e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007250:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	6959      	ldr	r1, [r3, #20]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	891a      	ldrh	r2, [r3, #8]
 800725e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007260:	b29b      	uxth	r3, r3
 8007262:	f005 f8a2 	bl	800c3aa <USB_WritePMA>
 8007266:	e1d0      	b.n	800760a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007270:	b29b      	uxth	r3, r3
 8007272:	461a      	mov	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	00db      	lsls	r3, r3, #3
 800727a:	4413      	add	r3, r2
 800727c:	3306      	adds	r3, #6
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007290:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	699a      	ldr	r2, [r3, #24]
 8007298:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800729c:	429a      	cmp	r2, r3
 800729e:	d307      	bcc.n	80072b0 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	699a      	ldr	r2, [r3, #24]
 80072a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072a8:	1ad2      	subs	r2, r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	619a      	str	r2, [r3, #24]
 80072ae:	e002      	b.n	80072b6 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2200      	movs	r2, #0
 80072b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f040 80c4 	bne.w	8007448 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	785b      	ldrb	r3, [r3, #1]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d126      	bne.n	8007316 <HAL_PCD_EP_DB_Transmit+0x456>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	461a      	mov	r2, r3
 80072da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072dc:	4413      	add	r3, r2
 80072de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	011a      	lsls	r2, r3, #4
 80072e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e8:	4413      	add	r3, r2
 80072ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80072f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730e:	b29a      	uxth	r2, r3
 8007310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007312:	801a      	strh	r2, [r3, #0]
 8007314:	e01a      	b.n	800734c <HAL_PCD_EP_DB_Transmit+0x48c>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d116      	bne.n	800734c <HAL_PCD_EP_DB_Transmit+0x48c>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	677b      	str	r3, [r7, #116]	; 0x74
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800732c:	b29b      	uxth	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007332:	4413      	add	r3, r2
 8007334:	677b      	str	r3, [r7, #116]	; 0x74
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	011a      	lsls	r2, r3, #4
 800733c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800733e:	4413      	add	r3, r2
 8007340:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007344:	673b      	str	r3, [r7, #112]	; 0x70
 8007346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007348:	2200      	movs	r2, #0
 800734a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	67bb      	str	r3, [r7, #120]	; 0x78
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d12f      	bne.n	80073ba <HAL_PCD_EP_DB_Transmit+0x4fa>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800736a:	b29b      	uxth	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007372:	4413      	add	r3, r2
 8007374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	011a      	lsls	r2, r3, #4
 800737e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007382:	4413      	add	r3, r2
 8007384:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800738c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007398:	b29a      	uxth	r2, r3
 800739a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800739e:	801a      	strh	r2, [r3, #0]
 80073a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073b6:	801a      	strh	r2, [r3, #0]
 80073b8:	e017      	b.n	80073ea <HAL_PCD_EP_DB_Transmit+0x52a>
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	785b      	ldrb	r3, [r3, #1]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d113      	bne.n	80073ea <HAL_PCD_EP_DB_Transmit+0x52a>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073d0:	4413      	add	r3, r2
 80073d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	011a      	lsls	r2, r3, #4
 80073da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073dc:	4413      	add	r3, r2
 80073de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073e6:	2200      	movs	r2, #0
 80073e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	4619      	mov	r1, r3
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f006 fe12 	bl	800e01a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f040 8104 	bne.w	800760a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	441a      	add	r2, r3
 800742e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800743a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800743e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007442:	b29b      	uxth	r3, r3
 8007444:	8013      	strh	r3, [r2, #0]
 8007446:	e0e0      	b.n	800760a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d121      	bne.n	8007496 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	441a      	add	r2, r3
 800747e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800748a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800748e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007492:	b29b      	uxth	r3, r3
 8007494:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800749c:	2b01      	cmp	r3, #1
 800749e:	f040 80b4 	bne.w	800760a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	695a      	ldr	r2, [r3, #20]
 80074a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074aa:	441a      	add	r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074b8:	441a      	add	r2, r3
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6a1a      	ldr	r2, [r3, #32]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d309      	bcc.n	80074de <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6a1a      	ldr	r2, [r3, #32]
 80074d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	621a      	str	r2, [r3, #32]
 80074dc:	e015      	b.n	800750a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d107      	bne.n	80074f6 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80074e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80074f4:	e009      	b.n	800750a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2200      	movs	r2, #0
 8007500:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	667b      	str	r3, [r7, #100]	; 0x64
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d155      	bne.n	80075c4 <HAL_PCD_EP_DB_Transmit+0x704>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007526:	b29b      	uxth	r3, r3
 8007528:	461a      	mov	r2, r3
 800752a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800752c:	4413      	add	r3, r2
 800752e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	011a      	lsls	r2, r3, #4
 8007536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007538:	4413      	add	r3, r2
 800753a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800753e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007542:	2b00      	cmp	r3, #0
 8007544:	d112      	bne.n	800756c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007550:	b29a      	uxth	r2, r3
 8007552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007554:	801a      	strh	r2, [r3, #0]
 8007556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007564:	b29a      	uxth	r2, r3
 8007566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007568:	801a      	strh	r2, [r3, #0]
 800756a:	e044      	b.n	80075f6 <HAL_PCD_EP_DB_Transmit+0x736>
 800756c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756e:	2b3e      	cmp	r3, #62	; 0x3e
 8007570:	d811      	bhi.n	8007596 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007574:	085b      	lsrs	r3, r3, #1
 8007576:	657b      	str	r3, [r7, #84]	; 0x54
 8007578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8007582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007584:	3301      	adds	r3, #1
 8007586:	657b      	str	r3, [r7, #84]	; 0x54
 8007588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800758a:	b29b      	uxth	r3, r3
 800758c:	029b      	lsls	r3, r3, #10
 800758e:	b29a      	uxth	r2, r3
 8007590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	e02f      	b.n	80075f6 <HAL_PCD_EP_DB_Transmit+0x736>
 8007596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007598:	095b      	lsrs	r3, r3, #5
 800759a:	657b      	str	r3, [r7, #84]	; 0x54
 800759c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800759e:	f003 031f 	and.w	r3, r3, #31
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d102      	bne.n	80075ac <HAL_PCD_EP_DB_Transmit+0x6ec>
 80075a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075a8:	3b01      	subs	r3, #1
 80075aa:	657b      	str	r3, [r7, #84]	; 0x54
 80075ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	029b      	lsls	r3, r3, #10
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075bc:	b29a      	uxth	r2, r3
 80075be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075c0:	801a      	strh	r2, [r3, #0]
 80075c2:	e018      	b.n	80075f6 <HAL_PCD_EP_DB_Transmit+0x736>
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	785b      	ldrb	r3, [r3, #1]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d114      	bne.n	80075f6 <HAL_PCD_EP_DB_Transmit+0x736>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	461a      	mov	r2, r3
 80075d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075da:	4413      	add	r3, r2
 80075dc:	667b      	str	r3, [r7, #100]	; 0x64
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	011a      	lsls	r2, r3, #4
 80075e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075e6:	4413      	add	r3, r2
 80075e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075ec:	663b      	str	r3, [r7, #96]	; 0x60
 80075ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075f4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6818      	ldr	r0, [r3, #0]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6959      	ldr	r1, [r3, #20]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	895a      	ldrh	r2, [r3, #10]
 8007602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007604:	b29b      	uxth	r3, r3
 8007606:	f004 fed0 	bl	800c3aa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007624:	823b      	strh	r3, [r7, #16]
 8007626:	8a3b      	ldrh	r3, [r7, #16]
 8007628:	f083 0310 	eor.w	r3, r3, #16
 800762c:	823b      	strh	r3, [r7, #16]
 800762e:	8a3b      	ldrh	r3, [r7, #16]
 8007630:	f083 0320 	eor.w	r3, r3, #32
 8007634:	823b      	strh	r3, [r7, #16]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	441a      	add	r2, r3
 8007644:	8a3b      	ldrh	r3, [r7, #16]
 8007646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007656:	b29b      	uxth	r3, r3
 8007658:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3788      	adds	r7, #136	; 0x88
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	607b      	str	r3, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	817b      	strh	r3, [r7, #10]
 8007672:	4613      	mov	r3, r2
 8007674:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007676:	897b      	ldrh	r3, [r7, #10]
 8007678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00b      	beq.n	800769a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007682:	897b      	ldrh	r3, [r7, #10]
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	e009      	b.n	80076ae <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800769a:	897a      	ldrh	r2, [r7, #10]
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80076ae:	893b      	ldrh	r3, [r7, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d107      	bne.n	80076c4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2200      	movs	r2, #0
 80076b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	b29a      	uxth	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	80da      	strh	r2, [r3, #6]
 80076c2:	e00b      	b.n	80076dc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2201      	movs	r2, #1
 80076c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	0c1b      	lsrs	r3, r3, #16
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bc80      	pop	{r7}
 80076e6:	4770      	bx	lr

080076e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e31d      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076fa:	4b94      	ldr	r3, [pc, #592]	; (800794c <HAL_RCC_OscConfig+0x264>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 030c 	and.w	r3, r3, #12
 8007702:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007704:	4b91      	ldr	r3, [pc, #580]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800770c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d07b      	beq.n	8007812 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	2b08      	cmp	r3, #8
 800771e:	d006      	beq.n	800772e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b0c      	cmp	r3, #12
 8007724:	d10f      	bne.n	8007746 <HAL_RCC_OscConfig+0x5e>
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800772c:	d10b      	bne.n	8007746 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800772e:	4b87      	ldr	r3, [pc, #540]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d06a      	beq.n	8007810 <HAL_RCC_OscConfig+0x128>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d166      	bne.n	8007810 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e2f7      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d106      	bne.n	800775c <HAL_RCC_OscConfig+0x74>
 800774e:	4b7f      	ldr	r3, [pc, #508]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a7e      	ldr	r2, [pc, #504]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	e02d      	b.n	80077b8 <HAL_RCC_OscConfig+0xd0>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10c      	bne.n	800777e <HAL_RCC_OscConfig+0x96>
 8007764:	4b79      	ldr	r3, [pc, #484]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a78      	ldr	r2, [pc, #480]	; (800794c <HAL_RCC_OscConfig+0x264>)
 800776a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	4b76      	ldr	r3, [pc, #472]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a75      	ldr	r2, [pc, #468]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	e01c      	b.n	80077b8 <HAL_RCC_OscConfig+0xd0>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2b05      	cmp	r3, #5
 8007784:	d10c      	bne.n	80077a0 <HAL_RCC_OscConfig+0xb8>
 8007786:	4b71      	ldr	r3, [pc, #452]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a70      	ldr	r2, [pc, #448]	; (800794c <HAL_RCC_OscConfig+0x264>)
 800778c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	4b6e      	ldr	r3, [pc, #440]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a6d      	ldr	r2, [pc, #436]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800779c:	6013      	str	r3, [r2, #0]
 800779e:	e00b      	b.n	80077b8 <HAL_RCC_OscConfig+0xd0>
 80077a0:	4b6a      	ldr	r3, [pc, #424]	; (800794c <HAL_RCC_OscConfig+0x264>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a69      	ldr	r2, [pc, #420]	; (800794c <HAL_RCC_OscConfig+0x264>)
 80077a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	4b67      	ldr	r3, [pc, #412]	; (800794c <HAL_RCC_OscConfig+0x264>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a66      	ldr	r2, [pc, #408]	; (800794c <HAL_RCC_OscConfig+0x264>)
 80077b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d013      	beq.n	80077e8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077c0:	f7fd f87c 	bl	80048bc <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077c6:	e008      	b.n	80077da <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077c8:	f7fd f878 	bl	80048bc <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b64      	cmp	r3, #100	; 0x64
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e2ad      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077da:	4b5c      	ldr	r3, [pc, #368]	; (800794c <HAL_RCC_OscConfig+0x264>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0f0      	beq.n	80077c8 <HAL_RCC_OscConfig+0xe0>
 80077e6:	e014      	b.n	8007812 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e8:	f7fd f868 	bl	80048bc <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077f0:	f7fd f864 	bl	80048bc <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b64      	cmp	r3, #100	; 0x64
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e299      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007802:	4b52      	ldr	r3, [pc, #328]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f0      	bne.n	80077f0 <HAL_RCC_OscConfig+0x108>
 800780e:	e000      	b.n	8007812 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d05a      	beq.n	80078d4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b04      	cmp	r3, #4
 8007822:	d005      	beq.n	8007830 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	2b0c      	cmp	r3, #12
 8007828:	d119      	bne.n	800785e <HAL_RCC_OscConfig+0x176>
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d116      	bne.n	800785e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007830:	4b46      	ldr	r3, [pc, #280]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <HAL_RCC_OscConfig+0x160>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d001      	beq.n	8007848 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e276      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007848:	4b40      	ldr	r3, [pc, #256]	; (800794c <HAL_RCC_OscConfig+0x264>)
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	493d      	ldr	r1, [pc, #244]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007858:	4313      	orrs	r3, r2
 800785a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800785c:	e03a      	b.n	80078d4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d020      	beq.n	80078a8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007866:	4b3a      	ldr	r3, [pc, #232]	; (8007950 <HAL_RCC_OscConfig+0x268>)
 8007868:	2201      	movs	r2, #1
 800786a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800786c:	f7fd f826 	bl	80048bc <HAL_GetTick>
 8007870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007872:	e008      	b.n	8007886 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007874:	f7fd f822 	bl	80048bc <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d901      	bls.n	8007886 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e257      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007886:	4b31      	ldr	r3, [pc, #196]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0f0      	beq.n	8007874 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007892:	4b2e      	ldr	r3, [pc, #184]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	492a      	ldr	r1, [pc, #168]	; (800794c <HAL_RCC_OscConfig+0x264>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	604b      	str	r3, [r1, #4]
 80078a6:	e015      	b.n	80078d4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078a8:	4b29      	ldr	r3, [pc, #164]	; (8007950 <HAL_RCC_OscConfig+0x268>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ae:	f7fd f805 	bl	80048bc <HAL_GetTick>
 80078b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078b6:	f7fd f801 	bl	80048bc <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e236      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80078c8:	4b20      	ldr	r3, [pc, #128]	; (800794c <HAL_RCC_OscConfig+0x264>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1f0      	bne.n	80078b6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0310 	and.w	r3, r3, #16
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 80b8 	beq.w	8007a52 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d170      	bne.n	80079ca <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80078e8:	4b18      	ldr	r3, [pc, #96]	; (800794c <HAL_RCC_OscConfig+0x264>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <HAL_RCC_OscConfig+0x218>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e21a      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1a      	ldr	r2, [r3, #32]
 8007904:	4b11      	ldr	r3, [pc, #68]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800790c:	429a      	cmp	r2, r3
 800790e:	d921      	bls.n	8007954 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fc69 	bl	80081ec <RCC_SetFlashLatencyFromMSIRange>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e208      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007924:	4b09      	ldr	r3, [pc, #36]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	4906      	ldr	r1, [pc, #24]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007932:	4313      	orrs	r3, r2
 8007934:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007936:	4b05      	ldr	r3, [pc, #20]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	061b      	lsls	r3, r3, #24
 8007944:	4901      	ldr	r1, [pc, #4]	; (800794c <HAL_RCC_OscConfig+0x264>)
 8007946:	4313      	orrs	r3, r2
 8007948:	604b      	str	r3, [r1, #4]
 800794a:	e020      	b.n	800798e <HAL_RCC_OscConfig+0x2a6>
 800794c:	40023800 	.word	0x40023800
 8007950:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007954:	4b99      	ldr	r3, [pc, #612]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a1b      	ldr	r3, [r3, #32]
 8007960:	4996      	ldr	r1, [pc, #600]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007962:	4313      	orrs	r3, r2
 8007964:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007966:	4b95      	ldr	r3, [pc, #596]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	061b      	lsls	r3, r3, #24
 8007974:	4991      	ldr	r1, [pc, #580]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007976:	4313      	orrs	r3, r2
 8007978:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fc34 	bl	80081ec <RCC_SetFlashLatencyFromMSIRange>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e1d3      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	0b5b      	lsrs	r3, r3, #13
 8007994:	3301      	adds	r3, #1
 8007996:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800799a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800799e:	4a87      	ldr	r2, [pc, #540]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 80079a0:	6892      	ldr	r2, [r2, #8]
 80079a2:	0912      	lsrs	r2, r2, #4
 80079a4:	f002 020f 	and.w	r2, r2, #15
 80079a8:	4985      	ldr	r1, [pc, #532]	; (8007bc0 <HAL_RCC_OscConfig+0x4d8>)
 80079aa:	5c8a      	ldrb	r2, [r1, r2]
 80079ac:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80079ae:	4a85      	ldr	r2, [pc, #532]	; (8007bc4 <HAL_RCC_OscConfig+0x4dc>)
 80079b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80079b2:	4b85      	ldr	r3, [pc, #532]	; (8007bc8 <HAL_RCC_OscConfig+0x4e0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fc ff34 	bl	8004824 <HAL_InitTick>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d045      	beq.n	8007a52 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	e1b5      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d029      	beq.n	8007a26 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80079d2:	4b7e      	ldr	r3, [pc, #504]	; (8007bcc <HAL_RCC_OscConfig+0x4e4>)
 80079d4:	2201      	movs	r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d8:	f7fc ff70 	bl	80048bc <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079e0:	f7fc ff6c 	bl	80048bc <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e1a1      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80079f2:	4b72      	ldr	r3, [pc, #456]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0f0      	beq.n	80079e0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80079fe:	4b6f      	ldr	r3, [pc, #444]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	496c      	ldr	r1, [pc, #432]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a10:	4b6a      	ldr	r3, [pc, #424]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	061b      	lsls	r3, r3, #24
 8007a1e:	4967      	ldr	r1, [pc, #412]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	604b      	str	r3, [r1, #4]
 8007a24:	e015      	b.n	8007a52 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007a26:	4b69      	ldr	r3, [pc, #420]	; (8007bcc <HAL_RCC_OscConfig+0x4e4>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a2c:	f7fc ff46 	bl	80048bc <HAL_GetTick>
 8007a30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007a32:	e008      	b.n	8007a46 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a34:	f7fc ff42 	bl	80048bc <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e177      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007a46:	4b5d      	ldr	r3, [pc, #372]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1f0      	bne.n	8007a34 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0308 	and.w	r3, r3, #8
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d030      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d016      	beq.n	8007a94 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a66:	4b5a      	ldr	r3, [pc, #360]	; (8007bd0 <HAL_RCC_OscConfig+0x4e8>)
 8007a68:	2201      	movs	r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a6c:	f7fc ff26 	bl	80048bc <HAL_GetTick>
 8007a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a72:	e008      	b.n	8007a86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a74:	f7fc ff22 	bl	80048bc <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d901      	bls.n	8007a86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e157      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a86:	4b4d      	ldr	r3, [pc, #308]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0f0      	beq.n	8007a74 <HAL_RCC_OscConfig+0x38c>
 8007a92:	e015      	b.n	8007ac0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a94:	4b4e      	ldr	r3, [pc, #312]	; (8007bd0 <HAL_RCC_OscConfig+0x4e8>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a9a:	f7fc ff0f 	bl	80048bc <HAL_GetTick>
 8007a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007aa0:	e008      	b.n	8007ab4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007aa2:	f7fc ff0b 	bl	80048bc <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e140      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ab4:	4b41      	ldr	r3, [pc, #260]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1f0      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80b5 	beq.w	8007c38 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ad2:	4b3a      	ldr	r3, [pc, #232]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10d      	bne.n	8007afa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ade:	4b37      	ldr	r3, [pc, #220]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	4a36      	ldr	r2, [pc, #216]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae8:	6253      	str	r3, [r2, #36]	; 0x24
 8007aea:	4b34      	ldr	r3, [pc, #208]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af2:	60bb      	str	r3, [r7, #8]
 8007af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007af6:	2301      	movs	r3, #1
 8007af8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007afa:	4b36      	ldr	r3, [pc, #216]	; (8007bd4 <HAL_RCC_OscConfig+0x4ec>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d118      	bne.n	8007b38 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b06:	4b33      	ldr	r3, [pc, #204]	; (8007bd4 <HAL_RCC_OscConfig+0x4ec>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a32      	ldr	r2, [pc, #200]	; (8007bd4 <HAL_RCC_OscConfig+0x4ec>)
 8007b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b12:	f7fc fed3 	bl	80048bc <HAL_GetTick>
 8007b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b18:	e008      	b.n	8007b2c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b1a:	f7fc fecf 	bl	80048bc <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	2b64      	cmp	r3, #100	; 0x64
 8007b26:	d901      	bls.n	8007b2c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e104      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b2c:	4b29      	ldr	r3, [pc, #164]	; (8007bd4 <HAL_RCC_OscConfig+0x4ec>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d0f0      	beq.n	8007b1a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d106      	bne.n	8007b4e <HAL_RCC_OscConfig+0x466>
 8007b40:	4b1e      	ldr	r3, [pc, #120]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b44:	4a1d      	ldr	r2, [pc, #116]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b4a:	6353      	str	r3, [r2, #52]	; 0x34
 8007b4c:	e02d      	b.n	8007baa <HAL_RCC_OscConfig+0x4c2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10c      	bne.n	8007b70 <HAL_RCC_OscConfig+0x488>
 8007b56:	4b19      	ldr	r3, [pc, #100]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5a:	4a18      	ldr	r2, [pc, #96]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b60:	6353      	str	r3, [r2, #52]	; 0x34
 8007b62:	4b16      	ldr	r3, [pc, #88]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b66:	4a15      	ldr	r2, [pc, #84]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b6c:	6353      	str	r3, [r2, #52]	; 0x34
 8007b6e:	e01c      	b.n	8007baa <HAL_RCC_OscConfig+0x4c2>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	2b05      	cmp	r3, #5
 8007b76:	d10c      	bne.n	8007b92 <HAL_RCC_OscConfig+0x4aa>
 8007b78:	4b10      	ldr	r3, [pc, #64]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7c:	4a0f      	ldr	r2, [pc, #60]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b82:	6353      	str	r3, [r2, #52]	; 0x34
 8007b84:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b88:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b8e:	6353      	str	r3, [r2, #52]	; 0x34
 8007b90:	e00b      	b.n	8007baa <HAL_RCC_OscConfig+0x4c2>
 8007b92:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b96:	4a09      	ldr	r2, [pc, #36]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b9c:	6353      	str	r3, [r2, #52]	; 0x34
 8007b9e:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba2:	4a06      	ldr	r2, [pc, #24]	; (8007bbc <HAL_RCC_OscConfig+0x4d4>)
 8007ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ba8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d024      	beq.n	8007bfc <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bb2:	f7fc fe83 	bl	80048bc <HAL_GetTick>
 8007bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bb8:	e019      	b.n	8007bee <HAL_RCC_OscConfig+0x506>
 8007bba:	bf00      	nop
 8007bbc:	40023800 	.word	0x40023800
 8007bc0:	08012c28 	.word	0x08012c28
 8007bc4:	2000073c 	.word	0x2000073c
 8007bc8:	20000744 	.word	0x20000744
 8007bcc:	42470020 	.word	0x42470020
 8007bd0:	42470680 	.word	0x42470680
 8007bd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bd8:	f7fc fe70 	bl	80048bc <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e0a3      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bee:	4b54      	ldr	r3, [pc, #336]	; (8007d40 <HAL_RCC_OscConfig+0x658>)
 8007bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d0ee      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x4f0>
 8007bfa:	e014      	b.n	8007c26 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bfc:	f7fc fe5e 	bl	80048bc <HAL_GetTick>
 8007c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c02:	e00a      	b.n	8007c1a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c04:	f7fc fe5a 	bl	80048bc <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d901      	bls.n	8007c1a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e08d      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c1a:	4b49      	ldr	r3, [pc, #292]	; (8007d40 <HAL_RCC_OscConfig+0x658>)
 8007c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1ee      	bne.n	8007c04 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007c26:	7ffb      	ldrb	r3, [r7, #31]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d105      	bne.n	8007c38 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c2c:	4b44      	ldr	r3, [pc, #272]	; (8007d40 <HAL_RCC_OscConfig+0x658>)
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	4a43      	ldr	r2, [pc, #268]	; (8007d40 <HAL_RCC_OscConfig+0x658>)
 8007c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c36:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d079      	beq.n	8007d34 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	2b0c      	cmp	r3, #12
 8007c44:	d056      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d13b      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c4e:	4b3d      	ldr	r3, [pc, #244]	; (8007d44 <HAL_RCC_OscConfig+0x65c>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c54:	f7fc fe32 	bl	80048bc <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c5c:	f7fc fe2e 	bl	80048bc <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e063      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c6e:	4b34      	ldr	r3, [pc, #208]	; (8007d40 <HAL_RCC_OscConfig+0x658>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1f0      	bne.n	8007c5c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c7a:	4b31      	ldr	r3, [pc, #196]	; (8007d40 <HAL_RCC_OscConfig+0x658>)
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8a:	4319      	orrs	r1, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c90:	430b      	orrs	r3, r1
 8007c92:	492b      	ldr	r1, [pc, #172]	; (8007d40 <HAL_RCC_OscConfig+0x658>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c98:	4b2a      	ldr	r3, [pc, #168]	; (8007d44 <HAL_RCC_OscConfig+0x65c>)
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c9e:	f7fc fe0d 	bl	80048bc <HAL_GetTick>
 8007ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ca4:	e008      	b.n	8007cb8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ca6:	f7fc fe09 	bl	80048bc <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e03e      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cb8:	4b21      	ldr	r3, [pc, #132]	; (8007d40 <HAL_RCC_OscConfig+0x658>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0f0      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x5be>
 8007cc4:	e036      	b.n	8007d34 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc6:	4b1f      	ldr	r3, [pc, #124]	; (8007d44 <HAL_RCC_OscConfig+0x65c>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ccc:	f7fc fdf6 	bl	80048bc <HAL_GetTick>
 8007cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cd2:	e008      	b.n	8007ce6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cd4:	f7fc fdf2 	bl	80048bc <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e027      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ce6:	4b16      	ldr	r3, [pc, #88]	; (8007d40 <HAL_RCC_OscConfig+0x658>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1f0      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x5ec>
 8007cf2:	e01f      	b.n	8007d34 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e01a      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007d00:	4b0f      	ldr	r3, [pc, #60]	; (8007d40 <HAL_RCC_OscConfig+0x658>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d10d      	bne.n	8007d30 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d106      	bne.n	8007d30 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d001      	beq.n	8007d34 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3720      	adds	r7, #32
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40023800 	.word	0x40023800
 8007d44:	42470060 	.word	0x42470060

08007d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e11a      	b.n	8007f92 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d5c:	4b8f      	ldr	r3, [pc, #572]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d919      	bls.n	8007d9e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d105      	bne.n	8007d7c <HAL_RCC_ClockConfig+0x34>
 8007d70:	4b8a      	ldr	r3, [pc, #552]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a89      	ldr	r2, [pc, #548]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007d76:	f043 0304 	orr.w	r3, r3, #4
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	4b87      	ldr	r3, [pc, #540]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f023 0201 	bic.w	r2, r3, #1
 8007d84:	4985      	ldr	r1, [pc, #532]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d8c:	4b83      	ldr	r3, [pc, #524]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d001      	beq.n	8007d9e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e0f9      	b.n	8007f92 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d008      	beq.n	8007dbc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007daa:	4b7d      	ldr	r3, [pc, #500]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	497a      	ldr	r1, [pc, #488]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 808e 	beq.w	8007ee6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d107      	bne.n	8007de2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dd2:	4b73      	ldr	r3, [pc, #460]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d121      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e0d7      	b.n	8007f92 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d107      	bne.n	8007dfa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dea:	4b6d      	ldr	r3, [pc, #436]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d115      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e0cb      	b.n	8007f92 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d107      	bne.n	8007e12 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e02:	4b67      	ldr	r3, [pc, #412]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e0bf      	b.n	8007f92 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007e12:	4b63      	ldr	r3, [pc, #396]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e0b7      	b.n	8007f92 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e22:	4b5f      	ldr	r3, [pc, #380]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f023 0203 	bic.w	r2, r3, #3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	495c      	ldr	r1, [pc, #368]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e34:	f7fc fd42 	bl	80048bc <HAL_GetTick>
 8007e38:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d112      	bne.n	8007e68 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e42:	e00a      	b.n	8007e5a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e44:	f7fc fd3a 	bl	80048bc <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d901      	bls.n	8007e5a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e09b      	b.n	8007f92 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e5a:	4b51      	ldr	r3, [pc, #324]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 030c 	and.w	r3, r3, #12
 8007e62:	2b08      	cmp	r3, #8
 8007e64:	d1ee      	bne.n	8007e44 <HAL_RCC_ClockConfig+0xfc>
 8007e66:	e03e      	b.n	8007ee6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d112      	bne.n	8007e96 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e70:	e00a      	b.n	8007e88 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e72:	f7fc fd23 	bl	80048bc <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d901      	bls.n	8007e88 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e084      	b.n	8007f92 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e88:	4b45      	ldr	r3, [pc, #276]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f003 030c 	and.w	r3, r3, #12
 8007e90:	2b0c      	cmp	r3, #12
 8007e92:	d1ee      	bne.n	8007e72 <HAL_RCC_ClockConfig+0x12a>
 8007e94:	e027      	b.n	8007ee6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d11d      	bne.n	8007eda <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e9e:	e00a      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ea0:	f7fc fd0c 	bl	80048bc <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d901      	bls.n	8007eb6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e06d      	b.n	8007f92 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007eb6:	4b3a      	ldr	r3, [pc, #232]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f003 030c 	and.w	r3, r3, #12
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d1ee      	bne.n	8007ea0 <HAL_RCC_ClockConfig+0x158>
 8007ec2:	e010      	b.n	8007ee6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ec4:	f7fc fcfa 	bl	80048bc <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e05b      	b.n	8007f92 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007eda:	4b31      	ldr	r3, [pc, #196]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 030c 	and.w	r3, r3, #12
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1ee      	bne.n	8007ec4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ee6:	4b2d      	ldr	r3, [pc, #180]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d219      	bcs.n	8007f28 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d105      	bne.n	8007f06 <HAL_RCC_ClockConfig+0x1be>
 8007efa:	4b28      	ldr	r3, [pc, #160]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a27      	ldr	r2, [pc, #156]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007f00:	f043 0304 	orr.w	r3, r3, #4
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	4b25      	ldr	r3, [pc, #148]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f023 0201 	bic.w	r2, r3, #1
 8007f0e:	4923      	ldr	r1, [pc, #140]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f16:	4b21      	ldr	r3, [pc, #132]	; (8007f9c <HAL_RCC_ClockConfig+0x254>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d001      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e034      	b.n	8007f92 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d008      	beq.n	8007f46 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f34:	4b1a      	ldr	r3, [pc, #104]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	4917      	ldr	r1, [pc, #92]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d009      	beq.n	8007f66 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f52:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	490f      	ldr	r1, [pc, #60]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f66:	f000 f823 	bl	8007fb0 <HAL_RCC_GetSysClockFreq>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <HAL_RCC_ClockConfig+0x258>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	091b      	lsrs	r3, r3, #4
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	490b      	ldr	r1, [pc, #44]	; (8007fa4 <HAL_RCC_ClockConfig+0x25c>)
 8007f78:	5ccb      	ldrb	r3, [r1, r3]
 8007f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7e:	4a0a      	ldr	r2, [pc, #40]	; (8007fa8 <HAL_RCC_ClockConfig+0x260>)
 8007f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007f82:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <HAL_RCC_ClockConfig+0x264>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fc fc4c 	bl	8004824 <HAL_InitTick>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	72fb      	strb	r3, [r7, #11]

  return status;
 8007f90:	7afb      	ldrb	r3, [r7, #11]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	40023c00 	.word	0x40023c00
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	08012c28 	.word	0x08012c28
 8007fa8:	2000073c 	.word	0x2000073c
 8007fac:	20000744 	.word	0x20000744

08007fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fb4:	b092      	sub	sp, #72	; 0x48
 8007fb6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8007fb8:	4b79      	ldr	r3, [pc, #484]	; (80081a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc0:	f003 030c 	and.w	r3, r3, #12
 8007fc4:	2b0c      	cmp	r3, #12
 8007fc6:	d00d      	beq.n	8007fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8007fc8:	2b0c      	cmp	r3, #12
 8007fca:	f200 80d5 	bhi.w	8008178 <HAL_RCC_GetSysClockFreq+0x1c8>
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d002      	beq.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x28>
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d003      	beq.n	8007fde <HAL_RCC_GetSysClockFreq+0x2e>
 8007fd6:	e0cf      	b.n	8008178 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fd8:	4b72      	ldr	r3, [pc, #456]	; (80081a4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007fda:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007fdc:	e0da      	b.n	8008194 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007fde:	4b72      	ldr	r3, [pc, #456]	; (80081a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007fe0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007fe2:	e0d7      	b.n	8008194 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe6:	0c9b      	lsrs	r3, r3, #18
 8007fe8:	f003 020f 	and.w	r2, r3, #15
 8007fec:	4b6f      	ldr	r3, [pc, #444]	; (80081ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007fee:	5c9b      	ldrb	r3, [r3, r2]
 8007ff0:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff4:	0d9b      	lsrs	r3, r3, #22
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ffe:	4b68      	ldr	r3, [pc, #416]	; (80081a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d05d      	beq.n	80080c6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	2200      	movs	r2, #0
 800800e:	4618      	mov	r0, r3
 8008010:	4611      	mov	r1, r2
 8008012:	4604      	mov	r4, r0
 8008014:	460d      	mov	r5, r1
 8008016:	4622      	mov	r2, r4
 8008018:	462b      	mov	r3, r5
 800801a:	f04f 0000 	mov.w	r0, #0
 800801e:	f04f 0100 	mov.w	r1, #0
 8008022:	0159      	lsls	r1, r3, #5
 8008024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008028:	0150      	lsls	r0, r2, #5
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4621      	mov	r1, r4
 8008030:	1a51      	subs	r1, r2, r1
 8008032:	6139      	str	r1, [r7, #16]
 8008034:	4629      	mov	r1, r5
 8008036:	eb63 0301 	sbc.w	r3, r3, r1
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008048:	4659      	mov	r1, fp
 800804a:	018b      	lsls	r3, r1, #6
 800804c:	4651      	mov	r1, sl
 800804e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008052:	4651      	mov	r1, sl
 8008054:	018a      	lsls	r2, r1, #6
 8008056:	46d4      	mov	ip, sl
 8008058:	ebb2 080c 	subs.w	r8, r2, ip
 800805c:	4659      	mov	r1, fp
 800805e:	eb63 0901 	sbc.w	r9, r3, r1
 8008062:	f04f 0200 	mov.w	r2, #0
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800806e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008076:	4690      	mov	r8, r2
 8008078:	4699      	mov	r9, r3
 800807a:	4623      	mov	r3, r4
 800807c:	eb18 0303 	adds.w	r3, r8, r3
 8008080:	60bb      	str	r3, [r7, #8]
 8008082:	462b      	mov	r3, r5
 8008084:	eb49 0303 	adc.w	r3, r9, r3
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	f04f 0200 	mov.w	r2, #0
 800808e:	f04f 0300 	mov.w	r3, #0
 8008092:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008096:	4629      	mov	r1, r5
 8008098:	024b      	lsls	r3, r1, #9
 800809a:	4620      	mov	r0, r4
 800809c:	4629      	mov	r1, r5
 800809e:	4604      	mov	r4, r0
 80080a0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80080a4:	4601      	mov	r1, r0
 80080a6:	024a      	lsls	r2, r1, #9
 80080a8:	4610      	mov	r0, r2
 80080aa:	4619      	mov	r1, r3
 80080ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ae:	2200      	movs	r2, #0
 80080b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80080b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080b8:	f7f9 f86c 	bl	8001194 <__aeabi_uldivmod>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4613      	mov	r3, r2
 80080c2:	647b      	str	r3, [r7, #68]	; 0x44
 80080c4:	e055      	b.n	8008172 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	2200      	movs	r2, #0
 80080ca:	623b      	str	r3, [r7, #32]
 80080cc:	627a      	str	r2, [r7, #36]	; 0x24
 80080ce:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80080d2:	4642      	mov	r2, r8
 80080d4:	464b      	mov	r3, r9
 80080d6:	f04f 0000 	mov.w	r0, #0
 80080da:	f04f 0100 	mov.w	r1, #0
 80080de:	0159      	lsls	r1, r3, #5
 80080e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080e4:	0150      	lsls	r0, r2, #5
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	46c4      	mov	ip, r8
 80080ec:	ebb2 0a0c 	subs.w	sl, r2, ip
 80080f0:	4640      	mov	r0, r8
 80080f2:	4649      	mov	r1, r9
 80080f4:	468c      	mov	ip, r1
 80080f6:	eb63 0b0c 	sbc.w	fp, r3, ip
 80080fa:	f04f 0200 	mov.w	r2, #0
 80080fe:	f04f 0300 	mov.w	r3, #0
 8008102:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008106:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800810a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800810e:	ebb2 040a 	subs.w	r4, r2, sl
 8008112:	eb63 050b 	sbc.w	r5, r3, fp
 8008116:	f04f 0200 	mov.w	r2, #0
 800811a:	f04f 0300 	mov.w	r3, #0
 800811e:	00eb      	lsls	r3, r5, #3
 8008120:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008124:	00e2      	lsls	r2, r4, #3
 8008126:	4614      	mov	r4, r2
 8008128:	461d      	mov	r5, r3
 800812a:	4603      	mov	r3, r0
 800812c:	18e3      	adds	r3, r4, r3
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	460b      	mov	r3, r1
 8008132:	eb45 0303 	adc.w	r3, r5, r3
 8008136:	607b      	str	r3, [r7, #4]
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008144:	4629      	mov	r1, r5
 8008146:	028b      	lsls	r3, r1, #10
 8008148:	4620      	mov	r0, r4
 800814a:	4629      	mov	r1, r5
 800814c:	4604      	mov	r4, r0
 800814e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8008152:	4601      	mov	r1, r0
 8008154:	028a      	lsls	r2, r1, #10
 8008156:	4610      	mov	r0, r2
 8008158:	4619      	mov	r1, r3
 800815a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815c:	2200      	movs	r2, #0
 800815e:	61bb      	str	r3, [r7, #24]
 8008160:	61fa      	str	r2, [r7, #28]
 8008162:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008166:	f7f9 f815 	bl	8001194 <__aeabi_uldivmod>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4613      	mov	r3, r2
 8008170:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8008172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008174:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008176:	e00d      	b.n	8008194 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008178:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	0b5b      	lsrs	r3, r3, #13
 800817e:	f003 0307 	and.w	r3, r3, #7
 8008182:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	3301      	adds	r3, #1
 8008188:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800818c:	fa02 f303 	lsl.w	r3, r2, r3
 8008190:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008192:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8008196:	4618      	mov	r0, r3
 8008198:	3748      	adds	r7, #72	; 0x48
 800819a:	46bd      	mov	sp, r7
 800819c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081a0:	40023800 	.word	0x40023800
 80081a4:	00f42400 	.word	0x00f42400
 80081a8:	007a1200 	.word	0x007a1200
 80081ac:	08012c1c 	.word	0x08012c1c

080081b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081b0:	b480      	push	{r7}
 80081b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081b4:	4b02      	ldr	r3, [pc, #8]	; (80081c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80081b6:	681b      	ldr	r3, [r3, #0]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bc80      	pop	{r7}
 80081be:	4770      	bx	lr
 80081c0:	2000073c 	.word	0x2000073c

080081c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081c8:	f7ff fff2 	bl	80081b0 <HAL_RCC_GetHCLKFreq>
 80081cc:	4602      	mov	r2, r0
 80081ce:	4b05      	ldr	r3, [pc, #20]	; (80081e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	0a1b      	lsrs	r3, r3, #8
 80081d4:	f003 0307 	and.w	r3, r3, #7
 80081d8:	4903      	ldr	r1, [pc, #12]	; (80081e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081da:	5ccb      	ldrb	r3, [r1, r3]
 80081dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	40023800 	.word	0x40023800
 80081e8:	08012c38 	.word	0x08012c38

080081ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80081f4:	2300      	movs	r3, #0
 80081f6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80081f8:	4b29      	ldr	r3, [pc, #164]	; (80082a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d12c      	bne.n	800825e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008204:	4b26      	ldr	r3, [pc, #152]	; (80082a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008210:	4b24      	ldr	r3, [pc, #144]	; (80082a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008218:	617b      	str	r3, [r7, #20]
 800821a:	e016      	b.n	800824a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800821c:	4b20      	ldr	r3, [pc, #128]	; (80082a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	4a1f      	ldr	r2, [pc, #124]	; (80082a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008226:	6253      	str	r3, [r2, #36]	; 0x24
 8008228:	4b1d      	ldr	r3, [pc, #116]	; (80082a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008234:	4b1b      	ldr	r3, [pc, #108]	; (80082a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800823c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800823e:	4b18      	ldr	r3, [pc, #96]	; (80082a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	4a17      	ldr	r2, [pc, #92]	; (80082a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008248:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008250:	d105      	bne.n	800825e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008258:	d101      	bne.n	800825e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800825a:	2301      	movs	r3, #1
 800825c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d105      	bne.n	8008270 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8008264:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a0f      	ldr	r2, [pc, #60]	; (80082a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800826a:	f043 0304 	orr.w	r3, r3, #4
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	4b0d      	ldr	r3, [pc, #52]	; (80082a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f023 0201 	bic.w	r2, r3, #1
 8008278:	490b      	ldr	r1, [pc, #44]	; (80082a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	4313      	orrs	r3, r2
 800827e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008280:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	429a      	cmp	r2, r3
 800828c:	d001      	beq.n	8008292 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	371c      	adds	r7, #28
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	40023800 	.word	0x40023800
 80082a4:	40007000 	.word	0x40007000
 80082a8:	40023c00 	.word	0x40023c00

080082ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e06e      	b.n	800839c <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d108      	bne.n	80082d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082ce:	d009      	beq.n	80082e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	61da      	str	r2, [r3, #28]
 80082d6:	e005      	b.n	80082e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fb fe88 	bl	8004014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800831a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800832c:	431a      	orrs	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008336:	431a      	orrs	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	431a      	orrs	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	431a      	orrs	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a1b      	ldr	r3, [r3, #32]
 8008364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008368:	ea42 0103 	orr.w	r1, r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	0c1a      	lsrs	r2, r3, #16
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f002 0204 	and.w	r2, r2, #4
 800838a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	4613      	mov	r3, r2
 80083b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d101      	bne.n	80083c6 <HAL_SPI_Transmit+0x22>
 80083c2:	2302      	movs	r3, #2
 80083c4:	e126      	b.n	8008614 <HAL_SPI_Transmit+0x270>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083ce:	f7fc fa75 	bl	80048bc <HAL_GetTick>
 80083d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80083d4:	88fb      	ldrh	r3, [r7, #6]
 80083d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d002      	beq.n	80083ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80083e4:	2302      	movs	r3, #2
 80083e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083e8:	e10b      	b.n	8008602 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <HAL_SPI_Transmit+0x52>
 80083f0:	88fb      	ldrh	r3, [r7, #6]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d102      	bne.n	80083fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083fa:	e102      	b.n	8008602 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2203      	movs	r2, #3
 8008400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	88fa      	ldrh	r2, [r7, #6]
 8008414:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	88fa      	ldrh	r2, [r7, #6]
 800841a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008442:	d10f      	bne.n	8008464 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008452:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008462:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846e:	2b40      	cmp	r3, #64	; 0x40
 8008470:	d007      	beq.n	8008482 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008480:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800848a:	d14b      	bne.n	8008524 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <HAL_SPI_Transmit+0xf6>
 8008494:	8afb      	ldrh	r3, [r7, #22]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d13e      	bne.n	8008518 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849e:	881a      	ldrh	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	1c9a      	adds	r2, r3, #2
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	3b01      	subs	r3, #1
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80084be:	e02b      	b.n	8008518 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d112      	bne.n	80084f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d2:	881a      	ldrh	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	1c9a      	adds	r2, r3, #2
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80084f2:	e011      	b.n	8008518 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084f4:	f7fc f9e2 	bl	80048bc <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d803      	bhi.n	800850c <HAL_SPI_Transmit+0x168>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850a:	d102      	bne.n	8008512 <HAL_SPI_Transmit+0x16e>
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d102      	bne.n	8008518 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008516:	e074      	b.n	8008602 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800851c:	b29b      	uxth	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1ce      	bne.n	80084c0 <HAL_SPI_Transmit+0x11c>
 8008522:	e04c      	b.n	80085be <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <HAL_SPI_Transmit+0x18e>
 800852c:	8afb      	ldrh	r3, [r7, #22]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d140      	bne.n	80085b4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	330c      	adds	r3, #12
 800853c:	7812      	ldrb	r2, [r2, #0]
 800853e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800854e:	b29b      	uxth	r3, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	b29a      	uxth	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008558:	e02c      	b.n	80085b4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b02      	cmp	r3, #2
 8008566:	d113      	bne.n	8008590 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	330c      	adds	r3, #12
 8008572:	7812      	ldrb	r2, [r2, #0]
 8008574:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008584:	b29b      	uxth	r3, r3
 8008586:	3b01      	subs	r3, #1
 8008588:	b29a      	uxth	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	86da      	strh	r2, [r3, #54]	; 0x36
 800858e:	e011      	b.n	80085b4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008590:	f7fc f994 	bl	80048bc <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	429a      	cmp	r2, r3
 800859e:	d803      	bhi.n	80085a8 <HAL_SPI_Transmit+0x204>
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a6:	d102      	bne.n	80085ae <HAL_SPI_Transmit+0x20a>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d102      	bne.n	80085b4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80085b2:	e026      	b.n	8008602 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1cd      	bne.n	800855a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 fcd0 	bl	8008f68 <SPI_EndRxTxTransaction>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2220      	movs	r2, #32
 80085d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10a      	bne.n	80085f2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085dc:	2300      	movs	r3, #0
 80085de:	613b      	str	r3, [r7, #16]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	613b      	str	r3, [r7, #16]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	613b      	str	r3, [r7, #16]
 80085f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	77fb      	strb	r3, [r7, #31]
 80085fe:	e000      	b.n	8008602 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008600:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008612:	7ffb      	ldrb	r3, [r7, #31]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3720      	adds	r7, #32
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af02      	add	r7, sp, #8
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008638:	d112      	bne.n	8008660 <HAL_SPI_Receive+0x44>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10e      	bne.n	8008660 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2204      	movs	r2, #4
 8008646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800864a:	88fa      	ldrh	r2, [r7, #6]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	4613      	mov	r3, r2
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	68b9      	ldr	r1, [r7, #8]
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 f8f1 	bl	800883e <HAL_SPI_TransmitReceive>
 800865c:	4603      	mov	r3, r0
 800865e:	e0ea      	b.n	8008836 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008666:	2b01      	cmp	r3, #1
 8008668:	d101      	bne.n	800866e <HAL_SPI_Receive+0x52>
 800866a:	2302      	movs	r3, #2
 800866c:	e0e3      	b.n	8008836 <HAL_SPI_Receive+0x21a>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008676:	f7fc f921 	bl	80048bc <HAL_GetTick>
 800867a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b01      	cmp	r3, #1
 8008686:	d002      	beq.n	800868e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008688:	2302      	movs	r3, #2
 800868a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800868c:	e0ca      	b.n	8008824 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <HAL_SPI_Receive+0x7e>
 8008694:	88fb      	ldrh	r3, [r7, #6]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d102      	bne.n	80086a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800869e:	e0c1      	b.n	8008824 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2204      	movs	r2, #4
 80086a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	88fa      	ldrh	r2, [r7, #6]
 80086b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	88fa      	ldrh	r2, [r7, #6]
 80086be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086e6:	d10f      	bne.n	8008708 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008706:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008712:	2b40      	cmp	r3, #64	; 0x40
 8008714:	d007      	beq.n	8008726 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008724:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d162      	bne.n	80087f4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800872e:	e02e      	b.n	800878e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b01      	cmp	r3, #1
 800873c:	d115      	bne.n	800876a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f103 020c 	add.w	r2, r3, #12
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	7812      	ldrb	r2, [r2, #0]
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800875e:	b29b      	uxth	r3, r3
 8008760:	3b01      	subs	r3, #1
 8008762:	b29a      	uxth	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008768:	e011      	b.n	800878e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800876a:	f7fc f8a7 	bl	80048bc <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d803      	bhi.n	8008782 <HAL_SPI_Receive+0x166>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008780:	d102      	bne.n	8008788 <HAL_SPI_Receive+0x16c>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d102      	bne.n	800878e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800878c:	e04a      	b.n	8008824 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008792:	b29b      	uxth	r3, r3
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1cb      	bne.n	8008730 <HAL_SPI_Receive+0x114>
 8008798:	e031      	b.n	80087fe <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d113      	bne.n	80087d0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b2:	b292      	uxth	r2, r2
 80087b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ba:	1c9a      	adds	r2, r3, #2
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	3b01      	subs	r3, #1
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087ce:	e011      	b.n	80087f4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087d0:	f7fc f874 	bl	80048bc <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d803      	bhi.n	80087e8 <HAL_SPI_Receive+0x1cc>
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e6:	d102      	bne.n	80087ee <HAL_SPI_Receive+0x1d2>
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d102      	bne.n	80087f4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80087f2:	e017      	b.n	8008824 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1cd      	bne.n	800879a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 fb4a 	bl	8008e9c <SPI_EndRxTransaction>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2220      	movs	r2, #32
 8008812:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	75fb      	strb	r3, [r7, #23]
 8008820:	e000      	b.n	8008824 <HAL_SPI_Receive+0x208>
  }

error :
 8008822:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008834:	7dfb      	ldrb	r3, [r7, #23]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b08c      	sub	sp, #48	; 0x30
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	607a      	str	r2, [r7, #4]
 800884a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800884c:	2301      	movs	r3, #1
 800884e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_SPI_TransmitReceive+0x26>
 8008860:	2302      	movs	r3, #2
 8008862:	e18a      	b.n	8008b7a <HAL_SPI_TransmitReceive+0x33c>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800886c:	f7fc f826 	bl	80048bc <HAL_GetTick>
 8008870:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008882:	887b      	ldrh	r3, [r7, #2]
 8008884:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800888a:	2b01      	cmp	r3, #1
 800888c:	d00f      	beq.n	80088ae <HAL_SPI_TransmitReceive+0x70>
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008894:	d107      	bne.n	80088a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d103      	bne.n	80088a6 <HAL_SPI_TransmitReceive+0x68>
 800889e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088a2:	2b04      	cmp	r3, #4
 80088a4:	d003      	beq.n	80088ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80088a6:	2302      	movs	r3, #2
 80088a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80088ac:	e15b      	b.n	8008b66 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d005      	beq.n	80088c0 <HAL_SPI_TransmitReceive+0x82>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <HAL_SPI_TransmitReceive+0x82>
 80088ba:	887b      	ldrh	r3, [r7, #2]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d103      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80088c6:	e14e      	b.n	8008b66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d003      	beq.n	80088dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2205      	movs	r2, #5
 80088d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	887a      	ldrh	r2, [r7, #2]
 80088ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	887a      	ldrh	r2, [r7, #2]
 80088f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	887a      	ldrh	r2, [r7, #2]
 80088fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	887a      	ldrh	r2, [r7, #2]
 8008904:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891c:	2b40      	cmp	r3, #64	; 0x40
 800891e:	d007      	beq.n	8008930 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800892e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008938:	d178      	bne.n	8008a2c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d002      	beq.n	8008948 <HAL_SPI_TransmitReceive+0x10a>
 8008942:	8b7b      	ldrh	r3, [r7, #26]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d166      	bne.n	8008a16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894c:	881a      	ldrh	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	1c9a      	adds	r2, r3, #2
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008962:	b29b      	uxth	r3, r3
 8008964:	3b01      	subs	r3, #1
 8008966:	b29a      	uxth	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800896c:	e053      	b.n	8008a16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b02      	cmp	r3, #2
 800897a:	d11b      	bne.n	80089b4 <HAL_SPI_TransmitReceive+0x176>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d016      	beq.n	80089b4 <HAL_SPI_TransmitReceive+0x176>
 8008986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008988:	2b01      	cmp	r3, #1
 800898a:	d113      	bne.n	80089b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	881a      	ldrh	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	1c9a      	adds	r2, r3, #2
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	3b01      	subs	r3, #1
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d119      	bne.n	80089f6 <HAL_SPI_TransmitReceive+0x1b8>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d014      	beq.n	80089f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	b292      	uxth	r2, r2
 80089d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	1c9a      	adds	r2, r3, #2
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089f2:	2301      	movs	r3, #1
 80089f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80089f6:	f7fb ff61 	bl	80048bc <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d807      	bhi.n	8008a16 <HAL_SPI_TransmitReceive+0x1d8>
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0c:	d003      	beq.n	8008a16 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a14:	e0a7      	b.n	8008b66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1a6      	bne.n	800896e <HAL_SPI_TransmitReceive+0x130>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1a1      	bne.n	800896e <HAL_SPI_TransmitReceive+0x130>
 8008a2a:	e07c      	b.n	8008b26 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <HAL_SPI_TransmitReceive+0x1fc>
 8008a34:	8b7b      	ldrh	r3, [r7, #26]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d16b      	bne.n	8008b12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	330c      	adds	r3, #12
 8008a44:	7812      	ldrb	r2, [r2, #0]
 8008a46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a60:	e057      	b.n	8008b12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d11c      	bne.n	8008aaa <HAL_SPI_TransmitReceive+0x26c>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d017      	beq.n	8008aaa <HAL_SPI_TransmitReceive+0x26c>
 8008a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d114      	bne.n	8008aaa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	330c      	adds	r3, #12
 8008a8a:	7812      	ldrb	r2, [r2, #0]
 8008a8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d119      	bne.n	8008aec <HAL_SPI_TransmitReceive+0x2ae>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d014      	beq.n	8008aec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68da      	ldr	r2, [r3, #12]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008acc:	b2d2      	uxtb	r2, r2
 8008ace:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008aec:	f7fb fee6 	bl	80048bc <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d803      	bhi.n	8008b04 <HAL_SPI_TransmitReceive+0x2c6>
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b02:	d102      	bne.n	8008b0a <HAL_SPI_TransmitReceive+0x2cc>
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d103      	bne.n	8008b12 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008b10:	e029      	b.n	8008b66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1a2      	bne.n	8008a62 <HAL_SPI_TransmitReceive+0x224>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d19d      	bne.n	8008a62 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 fa1c 	bl	8008f68 <SPI_EndRxTxTransaction>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d006      	beq.n	8008b44 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008b42:	e010      	b.n	8008b66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10b      	bne.n	8008b64 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	617b      	str	r3, [r7, #20]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	e000      	b.n	8008b66 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008b64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3730      	adds	r7, #48	; 0x30
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	099b      	lsrs	r3, r3, #6
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10f      	bne.n	8008bc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	099b      	lsrs	r3, r3, #6
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d004      	beq.n	8008bc8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	4798      	blx	r3
    return;
 8008bc6:	e0be      	b.n	8008d46 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00a      	beq.n	8008bea <HAL_SPI_IRQHandler+0x66>
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	09db      	lsrs	r3, r3, #7
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d004      	beq.n	8008bea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	4798      	blx	r3
    return;
 8008be8:	e0ad      	b.n	8008d46 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	095b      	lsrs	r3, r3, #5
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d106      	bne.n	8008c04 <HAL_SPI_IRQHandler+0x80>
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	099b      	lsrs	r3, r3, #6
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 80a1 	beq.w	8008d46 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	095b      	lsrs	r3, r3, #5
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 809a 	beq.w	8008d46 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	099b      	lsrs	r3, r3, #6
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d023      	beq.n	8008c66 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d011      	beq.n	8008c4e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2e:	f043 0204 	orr.w	r2, r3, #4
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c36:	2300      	movs	r3, #0
 8008c38:	617b      	str	r3, [r7, #20]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	e00b      	b.n	8008c66 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c4e:	2300      	movs	r3, #0
 8008c50:	613b      	str	r3, [r7, #16]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	613b      	str	r3, [r7, #16]
 8008c62:	693b      	ldr	r3, [r7, #16]
        return;
 8008c64:	e06f      	b.n	8008d46 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	095b      	lsrs	r3, r3, #5
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d014      	beq.n	8008c9c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c76:	f043 0201 	orr.w	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d04f      	beq.n	8008d44 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008cb2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d104      	bne.n	8008cd0 <HAL_SPI_IRQHandler+0x14c>
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d034      	beq.n	8008d3a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0203 	bic.w	r2, r2, #3
 8008cde:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d011      	beq.n	8008d0c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cec:	4a17      	ldr	r2, [pc, #92]	; (8008d4c <HAL_SPI_IRQHandler+0x1c8>)
 8008cee:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fb ff1a 	bl	8004b2e <HAL_DMA_Abort_IT>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d005      	beq.n	8008d0c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d016      	beq.n	8008d42 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d18:	4a0c      	ldr	r2, [pc, #48]	; (8008d4c <HAL_SPI_IRQHandler+0x1c8>)
 8008d1a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fb ff04 	bl	8004b2e <HAL_DMA_Abort_IT>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00a      	beq.n	8008d42 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008d38:	e003      	b.n	8008d42 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f808 	bl	8008d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008d40:	e000      	b.n	8008d44 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8008d42:	bf00      	nop
    return;
 8008d44:	bf00      	nop
  }
}
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	08008d63 	.word	0x08008d63

08008d50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bc80      	pop	{r7}
 8008d60:	4770      	bx	lr

08008d62 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f7ff ffe7 	bl	8008d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d9c:	f7fb fd8e 	bl	80048bc <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	1a9b      	subs	r3, r3, r2
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	4413      	add	r3, r2
 8008daa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008dac:	f7fb fd86 	bl	80048bc <HAL_GetTick>
 8008db0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008db2:	4b39      	ldr	r3, [pc, #228]	; (8008e98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	015b      	lsls	r3, r3, #5
 8008db8:	0d1b      	lsrs	r3, r3, #20
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	fb02 f303 	mul.w	r3, r2, r3
 8008dc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dc2:	e054      	b.n	8008e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dca:	d050      	beq.n	8008e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008dcc:	f7fb fd76 	bl	80048bc <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d902      	bls.n	8008de2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d13d      	bne.n	8008e5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008df0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dfa:	d111      	bne.n	8008e20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e04:	d004      	beq.n	8008e10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e0e:	d107      	bne.n	8008e20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e28:	d10f      	bne.n	8008e4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e017      	b.n	8008e8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	4013      	ands	r3, r2
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	bf0c      	ite	eq
 8008e7e:	2301      	moveq	r3, #1
 8008e80:	2300      	movne	r3, #0
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	461a      	mov	r2, r3
 8008e86:	79fb      	ldrb	r3, [r7, #7]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d19b      	bne.n	8008dc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3720      	adds	r7, #32
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	2000073c 	.word	0x2000073c

08008e9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af02      	add	r7, sp, #8
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eb0:	d111      	bne.n	8008ed6 <SPI_EndRxTransaction+0x3a>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eba:	d004      	beq.n	8008ec6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ec4:	d107      	bne.n	8008ed6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ed4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ede:	d12a      	bne.n	8008f36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ee8:	d012      	beq.n	8008f10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2180      	movs	r1, #128	; 0x80
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff ff49 	bl	8008d8c <SPI_WaitFlagStateUntilTimeout>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d02d      	beq.n	8008f5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f04:	f043 0220 	orr.w	r2, r3, #32
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e026      	b.n	8008f5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2200      	movs	r2, #0
 8008f18:	2101      	movs	r1, #1
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7ff ff36 	bl	8008d8c <SPI_WaitFlagStateUntilTimeout>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01a      	beq.n	8008f5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2a:	f043 0220 	orr.w	r2, r3, #32
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e013      	b.n	8008f5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2101      	movs	r1, #1
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f7ff ff23 	bl	8008d8c <SPI_WaitFlagStateUntilTimeout>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d007      	beq.n	8008f5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f50:	f043 0220 	orr.w	r2, r3, #32
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e000      	b.n	8008f5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b088      	sub	sp, #32
 8008f6c:	af02      	add	r7, sp, #8
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f74:	4b1b      	ldr	r3, [pc, #108]	; (8008fe4 <SPI_EndRxTxTransaction+0x7c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a1b      	ldr	r2, [pc, #108]	; (8008fe8 <SPI_EndRxTxTransaction+0x80>)
 8008f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7e:	0d5b      	lsrs	r3, r3, #21
 8008f80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f84:	fb02 f303 	mul.w	r3, r2, r3
 8008f88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f92:	d112      	bne.n	8008fba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2180      	movs	r1, #128	; 0x80
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f7ff fef4 	bl	8008d8c <SPI_WaitFlagStateUntilTimeout>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d016      	beq.n	8008fd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fae:	f043 0220 	orr.w	r2, r3, #32
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e00f      	b.n	8008fda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00a      	beq.n	8008fd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd0:	2b80      	cmp	r3, #128	; 0x80
 8008fd2:	d0f2      	beq.n	8008fba <SPI_EndRxTxTransaction+0x52>
 8008fd4:	e000      	b.n	8008fd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8008fd6:	bf00      	nop
  }

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	2000073c 	.word	0x2000073c
 8008fe8:	165e9f81 	.word	0x165e9f81

08008fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e031      	b.n	8009062 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7fb fae6 	bl	80045e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3304      	adds	r3, #4
 8009028:	4619      	mov	r1, r3
 800902a:	4610      	mov	r0, r2
 800902c:	f000 fb3c 	bl	80096a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b01      	cmp	r3, #1
 800907e:	d001      	beq.n	8009084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e03a      	b.n	80090fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0201 	orr.w	r2, r2, #1
 800909a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a4:	d00e      	beq.n	80090c4 <HAL_TIM_Base_Start_IT+0x58>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a16      	ldr	r2, [pc, #88]	; (8009104 <HAL_TIM_Base_Start_IT+0x98>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d009      	beq.n	80090c4 <HAL_TIM_Base_Start_IT+0x58>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a14      	ldr	r2, [pc, #80]	; (8009108 <HAL_TIM_Base_Start_IT+0x9c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d004      	beq.n	80090c4 <HAL_TIM_Base_Start_IT+0x58>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a13      	ldr	r2, [pc, #76]	; (800910c <HAL_TIM_Base_Start_IT+0xa0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d111      	bne.n	80090e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f003 0307 	and.w	r3, r3, #7
 80090ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b06      	cmp	r3, #6
 80090d4:	d010      	beq.n	80090f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0201 	orr.w	r2, r2, #1
 80090e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e6:	e007      	b.n	80090f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0201 	orr.w	r2, r2, #1
 80090f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	bc80      	pop	{r7}
 8009102:	4770      	bx	lr
 8009104:	40000400 	.word	0x40000400
 8009108:	40000800 	.word	0x40000800
 800910c:	40010800 	.word	0x40010800

08009110 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e08f      	b.n	8009244 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b00      	cmp	r3, #0
 800912e:	d106      	bne.n	800913e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7fb fa93 	bl	8004664 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2202      	movs	r2, #2
 8009142:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6812      	ldr	r2, [r2, #0]
 8009150:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009154:	f023 0307 	bic.w	r3, r3, #7
 8009158:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	3304      	adds	r3, #4
 8009162:	4619      	mov	r1, r3
 8009164:	4610      	mov	r0, r2
 8009166:	f000 fa9f 	bl	80096a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009192:	f023 0303 	bic.w	r3, r3, #3
 8009196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	021b      	lsls	r3, r3, #8
 80091a2:	4313      	orrs	r3, r2
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80091b0:	f023 030c 	bic.w	r3, r3, #12
 80091b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	021b      	lsls	r3, r3, #8
 80091cc:	4313      	orrs	r3, r2
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	011a      	lsls	r2, r3, #4
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	031b      	lsls	r3, r3, #12
 80091e0:	4313      	orrs	r3, r2
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80091ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80091f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	4313      	orrs	r3, r2
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	4313      	orrs	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3718      	adds	r7, #24
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800925c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009264:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d109      	bne.n	8009280 <HAL_TIM_Encoder_Start+0x34>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d001      	beq.n	8009276 <HAL_TIM_Encoder_Start+0x2a>
    {
      return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e050      	b.n	8009318 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2202      	movs	r2, #2
 800927a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800927e:	e01c      	b.n	80092ba <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b04      	cmp	r3, #4
 8009284:	d109      	bne.n	800929a <HAL_TIM_Encoder_Start+0x4e>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009286:	7bbb      	ldrb	r3, [r7, #14]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d001      	beq.n	8009290 <HAL_TIM_Encoder_Start+0x44>
    {
      return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e043      	b.n	8009318 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009298:	e00f      	b.n	80092ba <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d102      	bne.n	80092a6 <HAL_TIM_Encoder_Start+0x5a>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d001      	beq.n	80092aa <HAL_TIM_Encoder_Start+0x5e>
    {
      return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e036      	b.n	8009318 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2202      	movs	r2, #2
 80092ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2202      	movs	r2, #2
 80092b6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d003      	beq.n	80092c8 <HAL_TIM_Encoder_Start+0x7c>
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	d008      	beq.n	80092d8 <HAL_TIM_Encoder_Start+0x8c>
 80092c6:	e00f      	b.n	80092e8 <HAL_TIM_Encoder_Start+0x9c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2201      	movs	r2, #1
 80092ce:	2100      	movs	r1, #0
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fae1 	bl	8009898 <TIM_CCxChannelCmd>
      break;
 80092d6:	e016      	b.n	8009306 <HAL_TIM_Encoder_Start+0xba>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2201      	movs	r2, #1
 80092de:	2104      	movs	r1, #4
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 fad9 	bl	8009898 <TIM_CCxChannelCmd>
      break;
 80092e6:	e00e      	b.n	8009306 <HAL_TIM_Encoder_Start+0xba>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2201      	movs	r2, #1
 80092ee:	2100      	movs	r1, #0
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 fad1 	bl	8009898 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2201      	movs	r2, #1
 80092fc:	2104      	movs	r1, #4
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 faca 	bl	8009898 <TIM_CCxChannelCmd>
      break;
 8009304:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f042 0201 	orr.w	r2, r2, #1
 8009314:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b02      	cmp	r3, #2
 8009334:	d122      	bne.n	800937c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b02      	cmp	r3, #2
 8009342:	d11b      	bne.n	800937c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f06f 0202 	mvn.w	r2, #2
 800934c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d003      	beq.n	800936a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f985 	bl	8009672 <HAL_TIM_IC_CaptureCallback>
 8009368:	e005      	b.n	8009376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f978 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f987 	bl	8009684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	f003 0304 	and.w	r3, r3, #4
 8009386:	2b04      	cmp	r3, #4
 8009388:	d122      	bne.n	80093d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b04      	cmp	r3, #4
 8009396:	d11b      	bne.n	80093d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f06f 0204 	mvn.w	r2, #4
 80093a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2202      	movs	r2, #2
 80093a6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f95b 	bl	8009672 <HAL_TIM_IC_CaptureCallback>
 80093bc:	e005      	b.n	80093ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f94e 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f95d 	bl	8009684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	f003 0308 	and.w	r3, r3, #8
 80093da:	2b08      	cmp	r3, #8
 80093dc:	d122      	bne.n	8009424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	f003 0308 	and.w	r3, r3, #8
 80093e8:	2b08      	cmp	r3, #8
 80093ea:	d11b      	bne.n	8009424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f06f 0208 	mvn.w	r2, #8
 80093f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2204      	movs	r2, #4
 80093fa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f931 	bl	8009672 <HAL_TIM_IC_CaptureCallback>
 8009410:	e005      	b.n	800941e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f924 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f933 	bl	8009684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	f003 0310 	and.w	r3, r3, #16
 800942e:	2b10      	cmp	r3, #16
 8009430:	d122      	bne.n	8009478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	f003 0310 	and.w	r3, r3, #16
 800943c:	2b10      	cmp	r3, #16
 800943e:	d11b      	bne.n	8009478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f06f 0210 	mvn.w	r2, #16
 8009448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2208      	movs	r2, #8
 800944e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800945a:	2b00      	cmp	r3, #0
 800945c:	d003      	beq.n	8009466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f907 	bl	8009672 <HAL_TIM_IC_CaptureCallback>
 8009464:	e005      	b.n	8009472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f8fa 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f909 	bl	8009684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b01      	cmp	r3, #1
 8009484:	d10e      	bne.n	80094a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b01      	cmp	r3, #1
 8009492:	d107      	bne.n	80094a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f06f 0201 	mvn.w	r2, #1
 800949c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7fa fa00 	bl	80038a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ae:	2b40      	cmp	r3, #64	; 0x40
 80094b0:	d10e      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094bc:	2b40      	cmp	r3, #64	; 0x40
 80094be:	d107      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f8e3 	bl	8009696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d101      	bne.n	80094f0 <HAL_TIM_ConfigClockSource+0x18>
 80094ec:	2302      	movs	r3, #2
 80094ee:	e0b3      	b.n	8009658 <HAL_TIM_ConfigClockSource+0x180>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800950e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009516:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009528:	d03e      	beq.n	80095a8 <HAL_TIM_ConfigClockSource+0xd0>
 800952a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800952e:	f200 8087 	bhi.w	8009640 <HAL_TIM_ConfigClockSource+0x168>
 8009532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009536:	f000 8085 	beq.w	8009644 <HAL_TIM_ConfigClockSource+0x16c>
 800953a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800953e:	d87f      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x168>
 8009540:	2b70      	cmp	r3, #112	; 0x70
 8009542:	d01a      	beq.n	800957a <HAL_TIM_ConfigClockSource+0xa2>
 8009544:	2b70      	cmp	r3, #112	; 0x70
 8009546:	d87b      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x168>
 8009548:	2b60      	cmp	r3, #96	; 0x60
 800954a:	d050      	beq.n	80095ee <HAL_TIM_ConfigClockSource+0x116>
 800954c:	2b60      	cmp	r3, #96	; 0x60
 800954e:	d877      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x168>
 8009550:	2b50      	cmp	r3, #80	; 0x50
 8009552:	d03c      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0xf6>
 8009554:	2b50      	cmp	r3, #80	; 0x50
 8009556:	d873      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x168>
 8009558:	2b40      	cmp	r3, #64	; 0x40
 800955a:	d058      	beq.n	800960e <HAL_TIM_ConfigClockSource+0x136>
 800955c:	2b40      	cmp	r3, #64	; 0x40
 800955e:	d86f      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x168>
 8009560:	2b30      	cmp	r3, #48	; 0x30
 8009562:	d064      	beq.n	800962e <HAL_TIM_ConfigClockSource+0x156>
 8009564:	2b30      	cmp	r3, #48	; 0x30
 8009566:	d86b      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x168>
 8009568:	2b20      	cmp	r3, #32
 800956a:	d060      	beq.n	800962e <HAL_TIM_ConfigClockSource+0x156>
 800956c:	2b20      	cmp	r3, #32
 800956e:	d867      	bhi.n	8009640 <HAL_TIM_ConfigClockSource+0x168>
 8009570:	2b00      	cmp	r3, #0
 8009572:	d05c      	beq.n	800962e <HAL_TIM_ConfigClockSource+0x156>
 8009574:	2b10      	cmp	r3, #16
 8009576:	d05a      	beq.n	800962e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009578:	e062      	b.n	8009640 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6818      	ldr	r0, [r3, #0]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	6899      	ldr	r1, [r3, #8]
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	f000 f966 	bl	800985a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800959c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	609a      	str	r2, [r3, #8]
      break;
 80095a6:	e04e      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	6899      	ldr	r1, [r3, #8]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f000 f94f 	bl	800985a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689a      	ldr	r2, [r3, #8]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095ca:	609a      	str	r2, [r3, #8]
      break;
 80095cc:	e03b      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	6859      	ldr	r1, [r3, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	461a      	mov	r2, r3
 80095dc:	f000 f8c6 	bl	800976c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2150      	movs	r1, #80	; 0x50
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 f91d 	bl	8009826 <TIM_ITRx_SetConfig>
      break;
 80095ec:	e02b      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	6859      	ldr	r1, [r3, #4]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	461a      	mov	r2, r3
 80095fc:	f000 f8e4 	bl	80097c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2160      	movs	r1, #96	; 0x60
 8009606:	4618      	mov	r0, r3
 8009608:	f000 f90d 	bl	8009826 <TIM_ITRx_SetConfig>
      break;
 800960c:	e01b      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	6859      	ldr	r1, [r3, #4]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	461a      	mov	r2, r3
 800961c:	f000 f8a6 	bl	800976c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2140      	movs	r1, #64	; 0x40
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f8fd 	bl	8009826 <TIM_ITRx_SetConfig>
      break;
 800962c:	e00b      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f000 f8f4 	bl	8009826 <TIM_ITRx_SetConfig>
        break;
 800963e:	e002      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009640:	bf00      	nop
 8009642:	e000      	b.n	8009646 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009644:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	4770      	bx	lr

08009672 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009672:	b480      	push	{r7}
 8009674:	b083      	sub	sp, #12
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800967a:	bf00      	nop
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	bc80      	pop	{r7}
 8009682:	4770      	bx	lr

08009684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	bc80      	pop	{r7}
 8009694:	4770      	bx	lr

08009696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bc80      	pop	{r7}
 80096a6:	4770      	bx	lr

080096a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096be:	d007      	beq.n	80096d0 <TIM_Base_SetConfig+0x28>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a25      	ldr	r2, [pc, #148]	; (8009758 <TIM_Base_SetConfig+0xb0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d003      	beq.n	80096d0 <TIM_Base_SetConfig+0x28>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a24      	ldr	r2, [pc, #144]	; (800975c <TIM_Base_SetConfig+0xb4>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d108      	bne.n	80096e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e8:	d013      	beq.n	8009712 <TIM_Base_SetConfig+0x6a>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a1a      	ldr	r2, [pc, #104]	; (8009758 <TIM_Base_SetConfig+0xb0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00f      	beq.n	8009712 <TIM_Base_SetConfig+0x6a>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a19      	ldr	r2, [pc, #100]	; (800975c <TIM_Base_SetConfig+0xb4>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d00b      	beq.n	8009712 <TIM_Base_SetConfig+0x6a>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a18      	ldr	r2, [pc, #96]	; (8009760 <TIM_Base_SetConfig+0xb8>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d007      	beq.n	8009712 <TIM_Base_SetConfig+0x6a>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a17      	ldr	r2, [pc, #92]	; (8009764 <TIM_Base_SetConfig+0xbc>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d003      	beq.n	8009712 <TIM_Base_SetConfig+0x6a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a16      	ldr	r2, [pc, #88]	; (8009768 <TIM_Base_SetConfig+0xc0>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d108      	bne.n	8009724 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	4313      	orrs	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	615a      	str	r2, [r3, #20]
}
 800974e:	bf00      	nop
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	bc80      	pop	{r7}
 8009756:	4770      	bx	lr
 8009758:	40000400 	.word	0x40000400
 800975c:	40000800 	.word	0x40000800
 8009760:	40010800 	.word	0x40010800
 8009764:	40010c00 	.word	0x40010c00
 8009768:	40011000 	.word	0x40011000

0800976c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	f023 0201 	bic.w	r2, r3, #1
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	4313      	orrs	r3, r2
 80097a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f023 030a 	bic.w	r3, r3, #10
 80097a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097aa:	697a      	ldr	r2, [r7, #20]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	621a      	str	r2, [r3, #32]
}
 80097be:	bf00      	nop
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bc80      	pop	{r7}
 80097c6:	4770      	bx	lr

080097c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	f023 0210 	bic.w	r2, r3, #16
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	031b      	lsls	r3, r3, #12
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009804:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	011b      	lsls	r3, r3, #4
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	4313      	orrs	r3, r2
 800980e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	621a      	str	r2, [r3, #32]
}
 800981c:	bf00      	nop
 800981e:	371c      	adds	r7, #28
 8009820:	46bd      	mov	sp, r7
 8009822:	bc80      	pop	{r7}
 8009824:	4770      	bx	lr

08009826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009826:	b480      	push	{r7}
 8009828:	b085      	sub	sp, #20
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800983c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4313      	orrs	r3, r2
 8009844:	f043 0307 	orr.w	r3, r3, #7
 8009848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	609a      	str	r2, [r3, #8]
}
 8009850:	bf00      	nop
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr

0800985a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800985a:	b480      	push	{r7}
 800985c:	b087      	sub	sp, #28
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
 8009866:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009874:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	021a      	lsls	r2, r3, #8
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	431a      	orrs	r2, r3
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	4313      	orrs	r3, r2
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	609a      	str	r2, [r3, #8]
}
 800988e:	bf00      	nop
 8009890:	371c      	adds	r7, #28
 8009892:	46bd      	mov	sp, r7
 8009894:	bc80      	pop	{r7}
 8009896:	4770      	bx	lr

08009898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f003 031f 	and.w	r3, r3, #31
 80098aa:	2201      	movs	r2, #1
 80098ac:	fa02 f303 	lsl.w	r3, r2, r3
 80098b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a1a      	ldr	r2, [r3, #32]
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	43db      	mvns	r3, r3
 80098ba:	401a      	ands	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6a1a      	ldr	r2, [r3, #32]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f003 031f 	and.w	r3, r3, #31
 80098ca:	6879      	ldr	r1, [r7, #4]
 80098cc:	fa01 f303 	lsl.w	r3, r1, r3
 80098d0:	431a      	orrs	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	621a      	str	r2, [r3, #32]
}
 80098d6:	bf00      	nop
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	bc80      	pop	{r7}
 80098de:	4770      	bx	lr

080098e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d101      	bne.n	80098f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098f4:	2302      	movs	r3, #2
 80098f6:	e046      	b.n	8009986 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	4313      	orrs	r3, r2
 8009928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800993a:	d00e      	beq.n	800995a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a13      	ldr	r2, [pc, #76]	; (8009990 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d009      	beq.n	800995a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a12      	ldr	r2, [pc, #72]	; (8009994 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d004      	beq.n	800995a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a10      	ldr	r2, [pc, #64]	; (8009998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d10c      	bne.n	8009974 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	4313      	orrs	r3, r2
 800996a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	bc80      	pop	{r7}
 800998e:	4770      	bx	lr
 8009990:	40000400 	.word	0x40000400
 8009994:	40000800 	.word	0x40000800
 8009998:	40010800 	.word	0x40010800

0800999c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80099ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80099b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bc80      	pop	{r7}
 80099c6:	4770      	bx	lr

080099c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80099d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80099d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80099dc:	b29a      	uxth	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	43db      	mvns	r3, r3
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	4013      	ands	r3, r2
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bc80      	pop	{r7}
 80099fa:	4770      	bx	lr

080099fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80099fc:	b084      	sub	sp, #16
 80099fe:	b480      	push	{r7}
 8009a00:	b083      	sub	sp, #12
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	f107 0014 	add.w	r0, r7, #20
 8009a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	b004      	add	sp, #16
 8009a3a:	4770      	bx	lr

08009a3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b09b      	sub	sp, #108	; 0x6c
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a62:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	78db      	ldrb	r3, [r3, #3]
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d81f      	bhi.n	8009aae <USB_ActivateEndpoint+0x72>
 8009a6e:	a201      	add	r2, pc, #4	; (adr r2, 8009a74 <USB_ActivateEndpoint+0x38>)
 8009a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a74:	08009a85 	.word	0x08009a85
 8009a78:	08009aa1 	.word	0x08009aa1
 8009a7c:	08009ab7 	.word	0x08009ab7
 8009a80:	08009a93 	.word	0x08009a93
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009a84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a8c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009a90:	e012      	b.n	8009ab8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009a92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009a96:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009a9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009a9e:	e00b      	b.n	8009ab8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009aa0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009aa8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009aac:	e004      	b.n	8009ab8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8009ab4:	e000      	b.n	8009ab8 <USB_ActivateEndpoint+0x7c>
      break;
 8009ab6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	441a      	add	r2, r3
 8009ac2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	4313      	orrs	r3, r2
 8009afa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	441a      	add	r2, r3
 8009b08:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	7b1b      	ldrb	r3, [r3, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f040 8149 	bne.w	8009dbc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	785b      	ldrb	r3, [r3, #1]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 8084 	beq.w	8009c3c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	4413      	add	r3, r2
 8009b46:	617b      	str	r3, [r7, #20]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	011a      	lsls	r2, r3, #4
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b56:	613b      	str	r3, [r7, #16]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	88db      	ldrh	r3, [r3, #6]
 8009b5c:	085b      	lsrs	r3, r3, #1
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	81fb      	strh	r3, [r7, #14]
 8009b76:	89fb      	ldrh	r3, [r7, #14]
 8009b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d01b      	beq.n	8009bb8 <USB_ActivateEndpoint+0x17c>
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b96:	81bb      	strh	r3, [r7, #12]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	441a      	add	r2, r3
 8009ba2:	89bb      	ldrh	r3, [r7, #12]
 8009ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	78db      	ldrb	r3, [r3, #3]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d020      	beq.n	8009c02 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bd6:	813b      	strh	r3, [r7, #8]
 8009bd8:	893b      	ldrh	r3, [r7, #8]
 8009bda:	f083 0320 	eor.w	r3, r3, #32
 8009bde:	813b      	strh	r3, [r7, #8]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	441a      	add	r2, r3
 8009bea:	893b      	ldrh	r3, [r7, #8]
 8009bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	8013      	strh	r3, [r2, #0]
 8009c00:	e27f      	b.n	800a102 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c18:	817b      	strh	r3, [r7, #10]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	441a      	add	r2, r3
 8009c24:	897b      	ldrh	r3, [r7, #10]
 8009c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	8013      	strh	r3, [r2, #0]
 8009c3a:	e262      	b.n	800a102 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	461a      	mov	r2, r3
 8009c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4c:	4413      	add	r3, r2
 8009c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	011a      	lsls	r2, r3, #4
 8009c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	88db      	ldrh	r3, [r3, #6]
 8009c64:	085b      	lsrs	r3, r3, #1
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	627b      	str	r3, [r7, #36]	; 0x24
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	4413      	add	r3, r2
 8009c82:	627b      	str	r3, [r7, #36]	; 0x24
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	011a      	lsls	r2, r3, #4
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c92:	623b      	str	r3, [r7, #32]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d112      	bne.n	8009cc2 <USB_ActivateEndpoint+0x286>
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	801a      	strh	r2, [r3, #0]
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	801a      	strh	r2, [r3, #0]
 8009cc0:	e02f      	b.n	8009d22 <USB_ActivateEndpoint+0x2e6>
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8009cc8:	d813      	bhi.n	8009cf2 <USB_ActivateEndpoint+0x2b6>
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	085b      	lsrs	r3, r3, #1
 8009cd0:	663b      	str	r3, [r7, #96]	; 0x60
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <USB_ActivateEndpoint+0x2a8>
 8009cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	663b      	str	r3, [r7, #96]	; 0x60
 8009ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	029b      	lsls	r3, r3, #10
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	801a      	strh	r2, [r3, #0]
 8009cf0:	e017      	b.n	8009d22 <USB_ActivateEndpoint+0x2e6>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	095b      	lsrs	r3, r3, #5
 8009cf8:	663b      	str	r3, [r7, #96]	; 0x60
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	f003 031f 	and.w	r3, r3, #31
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d102      	bne.n	8009d0c <USB_ActivateEndpoint+0x2d0>
 8009d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8009d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	029b      	lsls	r3, r3, #10
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	881b      	ldrh	r3, [r3, #0]
 8009d2e:	83fb      	strh	r3, [r7, #30]
 8009d30:	8bfb      	ldrh	r3, [r7, #30]
 8009d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d01b      	beq.n	8009d72 <USB_ActivateEndpoint+0x336>
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d50:	83bb      	strh	r3, [r7, #28]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	441a      	add	r2, r3
 8009d5c:	8bbb      	ldrh	r3, [r7, #28]
 8009d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d88:	837b      	strh	r3, [r7, #26]
 8009d8a:	8b7b      	ldrh	r3, [r7, #26]
 8009d8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d90:	837b      	strh	r3, [r7, #26]
 8009d92:	8b7b      	ldrh	r3, [r7, #26]
 8009d94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d98:	837b      	strh	r3, [r7, #26]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	441a      	add	r2, r3
 8009da4:	8b7b      	ldrh	r3, [r7, #26]
 8009da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	8013      	strh	r3, [r2, #0]
 8009dba:	e1a2      	b.n	800a102 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dd2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	441a      	add	r2, r3
 8009de0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	461a      	mov	r2, r3
 8009e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e08:	4413      	add	r3, r2
 8009e0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	011a      	lsls	r2, r3, #4
 8009e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e14:	4413      	add	r3, r2
 8009e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	891b      	ldrh	r3, [r3, #8]
 8009e20:	085b      	lsrs	r3, r3, #1
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e2a:	801a      	strh	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	461a      	mov	r2, r3
 8009e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e3c:	4413      	add	r3, r2
 8009e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	011a      	lsls	r2, r3, #4
 8009e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	895b      	ldrh	r3, [r3, #10]
 8009e54:	085b      	lsrs	r3, r3, #1
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	005b      	lsls	r3, r3, #1
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e5e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	785b      	ldrb	r3, [r3, #1]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f040 8091 	bne.w	8009f8c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009e78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d01b      	beq.n	8009eba <USB_ActivateEndpoint+0x47e>
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e98:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	441a      	add	r2, r3
 8009ea4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	873b      	strh	r3, [r7, #56]	; 0x38
 8009ec8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d01b      	beq.n	8009f0a <USB_ActivateEndpoint+0x4ce>
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4413      	add	r3, r2
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	441a      	add	r2, r3
 8009ef4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f20:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009f22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009f24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f28:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009f2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009f2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	441a      	add	r2, r3
 8009f3c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f68:	867b      	strh	r3, [r7, #50]	; 0x32
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	441a      	add	r2, r3
 8009f74:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	8013      	strh	r3, [r2, #0]
 8009f8a:	e0ba      	b.n	800a102 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009f9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d01d      	beq.n	8009fe4 <USB_ActivateEndpoint+0x5a8>
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4413      	add	r3, r2
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fbe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	441a      	add	r2, r3
 8009fcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009ff4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d01d      	beq.n	800a03c <USB_ActivateEndpoint+0x600>
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a016:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	441a      	add	r2, r3
 800a024:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a02c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a038:	b29b      	uxth	r3, r3
 800a03a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	78db      	ldrb	r3, [r3, #3]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d024      	beq.n	800a08e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	881b      	ldrh	r3, [r3, #0]
 800a050:	b29b      	uxth	r3, r3
 800a052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a05a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a05e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a062:	f083 0320 	eor.w	r3, r3, #32
 800a066:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	441a      	add	r2, r3
 800a074:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a07c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a088:	b29b      	uxth	r3, r3
 800a08a:	8013      	strh	r3, [r2, #0]
 800a08c:	e01d      	b.n	800a0ca <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	441a      	add	r2, r3
 800a0b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	441a      	add	r2, r3
 800a0ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a0ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800a102:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a106:	4618      	mov	r0, r3
 800a108:	376c      	adds	r7, #108	; 0x6c
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bc80      	pop	{r7}
 800a10e:	4770      	bx	lr

0800a110 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a110:	b480      	push	{r7}
 800a112:	b08d      	sub	sp, #52	; 0x34
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	7b1b      	ldrb	r3, [r3, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f040 808e 	bne.w	800a240 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	785b      	ldrb	r3, [r3, #1]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d044      	beq.n	800a1b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	881b      	ldrh	r3, [r3, #0]
 800a138:	81bb      	strh	r3, [r7, #12]
 800a13a:	89bb      	ldrh	r3, [r7, #12]
 800a13c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a140:	2b00      	cmp	r3, #0
 800a142:	d01b      	beq.n	800a17c <USB_DeactivateEndpoint+0x6c>
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	b29b      	uxth	r3, r3
 800a152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15a:	817b      	strh	r3, [r7, #10]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	441a      	add	r2, r3
 800a166:	897b      	ldrh	r3, [r7, #10]
 800a168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a16c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a174:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a178:	b29b      	uxth	r3, r3
 800a17a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	b29b      	uxth	r3, r3
 800a18a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a18e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a192:	813b      	strh	r3, [r7, #8]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	441a      	add	r2, r3
 800a19e:	893b      	ldrh	r3, [r7, #8]
 800a1a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	8013      	strh	r3, [r2, #0]
 800a1b4:	e192      	b.n	800a4dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	827b      	strh	r3, [r7, #18]
 800a1c4:	8a7b      	ldrh	r3, [r7, #18]
 800a1c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d01b      	beq.n	800a206 <USB_DeactivateEndpoint+0xf6>
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e4:	823b      	strh	r3, [r7, #16]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	441a      	add	r2, r3
 800a1f0:	8a3b      	ldrh	r3, [r7, #16]
 800a1f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a202:	b29b      	uxth	r3, r3
 800a204:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	b29b      	uxth	r3, r3
 800a214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a21c:	81fb      	strh	r3, [r7, #14]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	441a      	add	r2, r3
 800a228:	89fb      	ldrh	r3, [r7, #14]
 800a22a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a22e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	8013      	strh	r3, [r2, #0]
 800a23e:	e14d      	b.n	800a4dc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	2b00      	cmp	r3, #0
 800a246:	f040 80a5 	bne.w	800a394 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	843b      	strh	r3, [r7, #32]
 800a258:	8c3b      	ldrh	r3, [r7, #32]
 800a25a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d01b      	beq.n	800a29a <USB_DeactivateEndpoint+0x18a>
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a278:	83fb      	strh	r3, [r7, #30]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	441a      	add	r2, r3
 800a284:	8bfb      	ldrh	r3, [r7, #30]
 800a286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a28a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a28e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a296:	b29b      	uxth	r3, r3
 800a298:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	83bb      	strh	r3, [r7, #28]
 800a2a8:	8bbb      	ldrh	r3, [r7, #28]
 800a2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d01b      	beq.n	800a2ea <USB_DeactivateEndpoint+0x1da>
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2c8:	837b      	strh	r3, [r7, #26]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	441a      	add	r2, r3
 800a2d4:	8b7b      	ldrh	r3, [r7, #26]
 800a2d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a300:	833b      	strh	r3, [r7, #24]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	441a      	add	r2, r3
 800a30c:	8b3b      	ldrh	r3, [r7, #24]
 800a30e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a31a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a31e:	b29b      	uxth	r3, r3
 800a320:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	b29b      	uxth	r3, r3
 800a330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a338:	82fb      	strh	r3, [r7, #22]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	441a      	add	r2, r3
 800a344:	8afb      	ldrh	r3, [r7, #22]
 800a346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a34a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a34e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a356:	b29b      	uxth	r3, r3
 800a358:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	b29b      	uxth	r3, r3
 800a368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a36c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a370:	82bb      	strh	r3, [r7, #20]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	441a      	add	r2, r3
 800a37c:	8abb      	ldrh	r3, [r7, #20]
 800a37e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a38a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a38e:	b29b      	uxth	r3, r3
 800a390:	8013      	strh	r3, [r2, #0]
 800a392:	e0a3      	b.n	800a4dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a3a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d01b      	beq.n	800a3e4 <USB_DeactivateEndpoint+0x2d4>
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	881b      	ldrh	r3, [r3, #0]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	441a      	add	r2, r3
 800a3ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a3d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	881b      	ldrh	r3, [r3, #0]
 800a3f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a3f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d01b      	beq.n	800a434 <USB_DeactivateEndpoint+0x324>
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	b29b      	uxth	r3, r3
 800a40a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a40e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a412:	853b      	strh	r3, [r7, #40]	; 0x28
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	441a      	add	r2, r3
 800a41e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a42c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a430:	b29b      	uxth	r3, r3
 800a432:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	881b      	ldrh	r3, [r3, #0]
 800a440:	b29b      	uxth	r3, r3
 800a442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a44a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	441a      	add	r2, r3
 800a456:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a45c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a468:	b29b      	uxth	r3, r3
 800a46a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a47e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a482:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	441a      	add	r2, r3
 800a48e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ba:	847b      	strh	r3, [r7, #34]	; 0x22
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	441a      	add	r2, r3
 800a4c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3734      	adds	r7, #52	; 0x34
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bc80      	pop	{r7}
 800a4e6:	4770      	bx	lr

0800a4e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b0cc      	sub	sp, #304	; 0x130
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4f6:	6018      	str	r0, [r3, #0]
 800a4f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a500:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	785b      	ldrb	r3, [r3, #1]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	f041 817d 	bne.w	800b80e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	699a      	ldr	r2, [r3, #24]
 800a520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d908      	bls.n	800a542 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a534:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a540:	e007      	b.n	800a552 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	7b1b      	ldrb	r3, [r3, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d152      	bne.n	800a608 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6959      	ldr	r1, [r3, #20]
 800a56e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	88da      	ldrh	r2, [r3, #6]
 800a57a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a57e:	b29b      	uxth	r3, r3
 800a580:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a584:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a588:	6800      	ldr	r0, [r0, #0]
 800a58a:	f001 ff0e 	bl	800c3aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a58e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a592:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a596:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a59a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a59e:	6812      	ldr	r2, [r2, #0]
 800a5a0:	601a      	str	r2, [r3, #0]
 800a5a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a5bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a5c0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800a5c4:	6812      	ldr	r2, [r2, #0]
 800a5c6:	440a      	add	r2, r1
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	011a      	lsls	r2, r3, #4
 800a5d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5dc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a5e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	801a      	strh	r2, [r3, #0]
 800a604:	f001 b8b5 	b.w	800b772 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a60c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	78db      	ldrb	r3, [r3, #3]
 800a614:	2b02      	cmp	r3, #2
 800a616:	f040 84c6 	bne.w	800afa6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a61a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a61e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6a1a      	ldr	r2, [r3, #32]
 800a626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a62a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	429a      	cmp	r2, r3
 800a634:	f240 8443 	bls.w	800aebe <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a63c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	b29b      	uxth	r3, r3
 800a656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a65a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a65e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a666:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	441a      	add	r2, r3
 800a67c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a688:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a690:	b29b      	uxth	r3, r3
 800a692:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6a1a      	ldr	r2, [r3, #32]
 800a6a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6a4:	1ad2      	subs	r2, r2, r3
 800a6a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a6b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f000 823e 	beq.w	800ab56 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a6da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6de:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a6e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a6e6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a6ea:	6812      	ldr	r2, [r2, #0]
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	785b      	ldrb	r3, [r3, #1]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f040 809a 	bne.w	800a834 <USB_EPStartXfer+0x34c>
 800a700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a708:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a70c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	601a      	str	r2, [r3, #0]
 800a714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a718:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a722:	b29b      	uxth	r3, r3
 800a724:	4619      	mov	r1, r3
 800a726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a72a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a72e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a732:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800a736:	6812      	ldr	r2, [r2, #0]
 800a738:	440a      	add	r2, r1
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	011a      	lsls	r2, r3, #4
 800a74a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a74e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4413      	add	r3, r2
 800a756:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a75a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a75e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d122      	bne.n	800a7b2 <USB_EPStartXfer+0x2ca>
 800a76c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a770:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a77e:	b29a      	uxth	r2, r3
 800a780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a784:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	801a      	strh	r2, [r3, #0]
 800a78c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a790:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	881b      	ldrh	r3, [r3, #0]
 800a798:	b29b      	uxth	r3, r3
 800a79a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a79e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	801a      	strh	r2, [r3, #0]
 800a7b0:	e079      	b.n	800a8a6 <USB_EPStartXfer+0x3be>
 800a7b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7b6:	2b3e      	cmp	r3, #62	; 0x3e
 800a7b8:	d81b      	bhi.n	800a7f2 <USB_EPStartXfer+0x30a>
 800a7ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7be:	085b      	lsrs	r3, r3, #1
 800a7c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a7c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7c8:	f003 0301 	and.w	r3, r3, #1
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d004      	beq.n	800a7da <USB_EPStartXfer+0x2f2>
 800a7d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a7da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	029b      	lsls	r3, r3, #10
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	801a      	strh	r2, [r3, #0]
 800a7f0:	e059      	b.n	800a8a6 <USB_EPStartXfer+0x3be>
 800a7f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7f6:	095b      	lsrs	r3, r3, #5
 800a7f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a7fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a800:	f003 031f 	and.w	r3, r3, #31
 800a804:	2b00      	cmp	r3, #0
 800a806:	d104      	bne.n	800a812 <USB_EPStartXfer+0x32a>
 800a808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a80c:	3b01      	subs	r3, #1
 800a80e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a812:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a816:	b29b      	uxth	r3, r3
 800a818:	029b      	lsls	r3, r3, #10
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a824:	b29a      	uxth	r2, r3
 800a826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a82a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	801a      	strh	r2, [r3, #0]
 800a832:	e038      	b.n	800a8a6 <USB_EPStartXfer+0x3be>
 800a834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	785b      	ldrb	r3, [r3, #1]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d130      	bne.n	800a8a6 <USB_EPStartXfer+0x3be>
 800a844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a848:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a852:	b29b      	uxth	r3, r3
 800a854:	4619      	mov	r1, r3
 800a856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a85a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a85e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a862:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800a866:	6812      	ldr	r2, [r2, #0]
 800a868:	440a      	add	r2, r1
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	011a      	lsls	r2, r3, #4
 800a87a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a87e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4413      	add	r3, r2
 800a886:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a88a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a88e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a898:	b29a      	uxth	r2, r3
 800a89a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a89e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a8a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	895b      	ldrh	r3, [r3, #10]
 800a8b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6959      	ldr	r1, [r3, #20]
 800a8c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a8cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a8d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a8d4:	6800      	ldr	r0, [r0, #0]
 800a8d6:	f001 fd68 	bl	800c3aa <USB_WritePMA>
            ep->xfer_buff += len;
 800a8da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	695a      	ldr	r2, [r3, #20]
 800a8e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8ea:	441a      	add	r2, r3
 800a8ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a8f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6a1a      	ldr	r2, [r3, #32]
 800a904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	429a      	cmp	r2, r3
 800a912:	d90f      	bls.n	800a934 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800a914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	6a1a      	ldr	r2, [r3, #32]
 800a920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a924:	1ad2      	subs	r2, r2, r3
 800a926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a92a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	621a      	str	r2, [r3, #32]
 800a932:	e00e      	b.n	800a952 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800a934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6a1b      	ldr	r3, [r3, #32]
 800a940:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800a944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2200      	movs	r2, #0
 800a950:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	785b      	ldrb	r3, [r3, #1]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f040 809a 	bne.w	800aa98 <USB_EPStartXfer+0x5b0>
 800a964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a968:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a96c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a970:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a974:	6812      	ldr	r2, [r2, #0]
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a97c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a986:	b29b      	uxth	r3, r3
 800a988:	4619      	mov	r1, r3
 800a98a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a98e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a992:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a996:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800a99a:	6812      	ldr	r2, [r2, #0]
 800a99c:	440a      	add	r2, r1
 800a99e:	601a      	str	r2, [r3, #0]
 800a9a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	011a      	lsls	r2, r3, #4
 800a9ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a9be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d122      	bne.n	800aa16 <USB_EPStartXfer+0x52e>
 800a9d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	801a      	strh	r2, [r3, #0]
 800a9f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	881b      	ldrh	r3, [r3, #0]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	801a      	strh	r2, [r3, #0]
 800aa14:	e083      	b.n	800ab1e <USB_EPStartXfer+0x636>
 800aa16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa1a:	2b3e      	cmp	r3, #62	; 0x3e
 800aa1c:	d81b      	bhi.n	800aa56 <USB_EPStartXfer+0x56e>
 800aa1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa22:	085b      	lsrs	r3, r3, #1
 800aa24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800aa28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <USB_EPStartXfer+0x556>
 800aa34:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800aa38:	3301      	adds	r3, #1
 800aa3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800aa3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	029b      	lsls	r3, r3, #10
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	801a      	strh	r2, [r3, #0]
 800aa54:	e063      	b.n	800ab1e <USB_EPStartXfer+0x636>
 800aa56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa5a:	095b      	lsrs	r3, r3, #5
 800aa5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800aa60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa64:	f003 031f 	and.w	r3, r3, #31
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d104      	bne.n	800aa76 <USB_EPStartXfer+0x58e>
 800aa6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800aa70:	3b01      	subs	r3, #1
 800aa72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800aa76:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	029b      	lsls	r3, r3, #10
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	801a      	strh	r2, [r3, #0]
 800aa96:	e042      	b.n	800ab1e <USB_EPStartXfer+0x636>
 800aa98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	785b      	ldrb	r3, [r3, #1]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d13a      	bne.n	800ab1e <USB_EPStartXfer+0x636>
 800aaa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800aab0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aab4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800aab8:	6812      	ldr	r2, [r2, #0]
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	4619      	mov	r1, r3
 800aace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aad2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800aad6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aada:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800aade:	6812      	ldr	r2, [r2, #0]
 800aae0:	440a      	add	r2, r1
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	011a      	lsls	r2, r3, #4
 800aaf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaf6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4413      	add	r3, r2
 800aafe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800ab02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ab1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	891b      	ldrh	r3, [r3, #8]
 800ab2a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	6959      	ldr	r1, [r3, #20]
 800ab3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ab44:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ab48:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ab4c:	6800      	ldr	r0, [r0, #0]
 800ab4e:	f001 fc2c 	bl	800c3aa <USB_WritePMA>
 800ab52:	f000 be0e 	b.w	800b772 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ab56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	785b      	ldrb	r3, [r3, #1]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d16d      	bne.n	800ac42 <USB_EPStartXfer+0x75a>
 800ab66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	461a      	mov	r2, r3
 800ab84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab86:	4413      	add	r3, r2
 800ab88:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	011a      	lsls	r2, r3, #4
 800ab98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aba0:	647b      	str	r3, [r7, #68]	; 0x44
 800aba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d112      	bne.n	800abd0 <USB_EPStartXfer+0x6e8>
 800abaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abb8:	801a      	strh	r2, [r3, #0]
 800abba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abc8:	b29a      	uxth	r2, r3
 800abca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abcc:	801a      	strh	r2, [r3, #0]
 800abce:	e063      	b.n	800ac98 <USB_EPStartXfer+0x7b0>
 800abd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abd4:	2b3e      	cmp	r3, #62	; 0x3e
 800abd6:	d817      	bhi.n	800ac08 <USB_EPStartXfer+0x720>
 800abd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abdc:	085b      	lsrs	r3, r3, #1
 800abde:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800abe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abe6:	f003 0301 	and.w	r3, r3, #1
 800abea:	2b00      	cmp	r3, #0
 800abec:	d004      	beq.n	800abf8 <USB_EPStartXfer+0x710>
 800abee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800abf2:	3301      	adds	r3, #1
 800abf4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800abf8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	029b      	lsls	r3, r3, #10
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac04:	801a      	strh	r2, [r3, #0]
 800ac06:	e047      	b.n	800ac98 <USB_EPStartXfer+0x7b0>
 800ac08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac0c:	095b      	lsrs	r3, r3, #5
 800ac0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ac12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac16:	f003 031f 	and.w	r3, r3, #31
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d104      	bne.n	800ac28 <USB_EPStartXfer+0x740>
 800ac1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ac22:	3b01      	subs	r3, #1
 800ac24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ac28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	029b      	lsls	r3, r3, #10
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac3e:	801a      	strh	r2, [r3, #0]
 800ac40:	e02a      	b.n	800ac98 <USB_EPStartXfer+0x7b0>
 800ac42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	785b      	ldrb	r3, [r3, #1]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d122      	bne.n	800ac98 <USB_EPStartXfer+0x7b0>
 800ac52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	653b      	str	r3, [r7, #80]	; 0x50
 800ac5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	461a      	mov	r2, r3
 800ac70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac72:	4413      	add	r3, r2
 800ac74:	653b      	str	r3, [r7, #80]	; 0x50
 800ac76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	011a      	lsls	r2, r3, #4
 800ac84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac86:	4413      	add	r3, r2
 800ac88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ac8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ac98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	891b      	ldrh	r3, [r3, #8]
 800aca4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6959      	ldr	r1, [r3, #20]
 800acb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acb8:	b29b      	uxth	r3, r3
 800acba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800acbe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800acc2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800acc6:	6800      	ldr	r0, [r0, #0]
 800acc8:	f001 fb6f 	bl	800c3aa <USB_WritePMA>
            ep->xfer_buff += len;
 800accc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	695a      	ldr	r2, [r3, #20]
 800acd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acdc:	441a      	add	r2, r3
 800acde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ace2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800acea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6a1a      	ldr	r2, [r3, #32]
 800acf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d90f      	bls.n	800ad26 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800ad06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6a1a      	ldr	r2, [r3, #32]
 800ad12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad16:	1ad2      	subs	r2, r2, r3
 800ad18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	621a      	str	r2, [r3, #32]
 800ad24:	e00e      	b.n	800ad44 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800ad26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800ad36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2200      	movs	r2, #0
 800ad42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ad44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	643b      	str	r3, [r7, #64]	; 0x40
 800ad50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	785b      	ldrb	r3, [r3, #1]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d16d      	bne.n	800ae3c <USB_EPStartXfer+0x954>
 800ad60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad80:	4413      	add	r3, r2
 800ad82:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	011a      	lsls	r2, r3, #4
 800ad92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad94:	4413      	add	r3, r2
 800ad96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ad9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d112      	bne.n	800adca <USB_EPStartXfer+0x8e2>
 800ada4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800adae:	b29a      	uxth	r2, r3
 800adb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb2:	801a      	strh	r2, [r3, #0]
 800adb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc6:	801a      	strh	r2, [r3, #0]
 800adc8:	e05d      	b.n	800ae86 <USB_EPStartXfer+0x99e>
 800adca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adce:	2b3e      	cmp	r3, #62	; 0x3e
 800add0:	d817      	bhi.n	800ae02 <USB_EPStartXfer+0x91a>
 800add2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800add6:	085b      	lsrs	r3, r3, #1
 800add8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800addc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d004      	beq.n	800adf2 <USB_EPStartXfer+0x90a>
 800ade8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800adec:	3301      	adds	r3, #1
 800adee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800adf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	029b      	lsls	r3, r3, #10
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adfe:	801a      	strh	r2, [r3, #0]
 800ae00:	e041      	b.n	800ae86 <USB_EPStartXfer+0x99e>
 800ae02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae06:	095b      	lsrs	r3, r3, #5
 800ae08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ae0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae10:	f003 031f 	and.w	r3, r3, #31
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d104      	bne.n	800ae22 <USB_EPStartXfer+0x93a>
 800ae18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ae22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	029b      	lsls	r3, r3, #10
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae38:	801a      	strh	r2, [r3, #0]
 800ae3a:	e024      	b.n	800ae86 <USB_EPStartXfer+0x99e>
 800ae3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	785b      	ldrb	r3, [r3, #1]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d11c      	bne.n	800ae86 <USB_EPStartXfer+0x99e>
 800ae4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae60:	4413      	add	r3, r2
 800ae62:	643b      	str	r3, [r7, #64]	; 0x40
 800ae64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	011a      	lsls	r2, r3, #4
 800ae72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae74:	4413      	add	r3, r2
 800ae76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ae86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	895b      	ldrh	r3, [r3, #10]
 800ae92:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6959      	ldr	r1, [r3, #20]
 800aea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800aeac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800aeb0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800aeb4:	6800      	ldr	r0, [r0, #0]
 800aeb6:	f001 fa78 	bl	800c3aa <USB_WritePMA>
 800aeba:	f000 bc5a 	b.w	800b772 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800aece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aed2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aedc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	4413      	add	r3, r2
 800aee8:	881b      	ldrh	r3, [r3, #0]
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aef4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aefc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	441a      	add	r2, r3
 800af12:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800af16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af26:	b29b      	uxth	r3, r3
 800af28:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800af2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af44:	b29b      	uxth	r3, r3
 800af46:	461a      	mov	r2, r3
 800af48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af4a:	4413      	add	r3, r2
 800af4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	011a      	lsls	r2, r3, #4
 800af5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af5e:	4413      	add	r3, r2
 800af60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800af64:	65bb      	str	r3, [r7, #88]	; 0x58
 800af66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800af70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	891b      	ldrh	r3, [r3, #8]
 800af7c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6959      	ldr	r1, [r3, #20]
 800af8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af90:	b29b      	uxth	r3, r3
 800af92:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800af96:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800af9a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800af9e:	6800      	ldr	r0, [r0, #0]
 800afa0:	f001 fa03 	bl	800c3aa <USB_WritePMA>
 800afa4:	e3e5      	b.n	800b772 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800afa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afcc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800afd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	441a      	add	r2, r3
 800afea:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800afee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aff6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800affa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800affe:	b29b      	uxth	r3, r3
 800b000:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6a1a      	ldr	r2, [r3, #32]
 800b00e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b012:	1ad2      	subs	r2, r2, r3
 800b014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b024:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b02e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	881b      	ldrh	r3, [r3, #0]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 81bc 	beq.w	800b3c0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b04c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b05a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	785b      	ldrb	r3, [r3, #1]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d16d      	bne.n	800b142 <USB_EPStartXfer+0xc5a>
 800b066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b06a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	67bb      	str	r3, [r7, #120]	; 0x78
 800b072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b080:	b29b      	uxth	r3, r3
 800b082:	461a      	mov	r2, r3
 800b084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b086:	4413      	add	r3, r2
 800b088:	67bb      	str	r3, [r7, #120]	; 0x78
 800b08a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b08e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	011a      	lsls	r2, r3, #4
 800b098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b09a:	4413      	add	r3, r2
 800b09c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b0a0:	677b      	str	r3, [r7, #116]	; 0x74
 800b0a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d112      	bne.n	800b0d0 <USB_EPStartXfer+0xbe8>
 800b0aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0b8:	801a      	strh	r2, [r3, #0]
 800b0ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0cc:	801a      	strh	r2, [r3, #0]
 800b0ce:	e060      	b.n	800b192 <USB_EPStartXfer+0xcaa>
 800b0d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0d4:	2b3e      	cmp	r3, #62	; 0x3e
 800b0d6:	d817      	bhi.n	800b108 <USB_EPStartXfer+0xc20>
 800b0d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0dc:	085b      	lsrs	r3, r3, #1
 800b0de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b0e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d004      	beq.n	800b0f8 <USB_EPStartXfer+0xc10>
 800b0ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b0f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	029b      	lsls	r3, r3, #10
 800b100:	b29a      	uxth	r2, r3
 800b102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b104:	801a      	strh	r2, [r3, #0]
 800b106:	e044      	b.n	800b192 <USB_EPStartXfer+0xcaa>
 800b108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b10c:	095b      	lsrs	r3, r3, #5
 800b10e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b116:	f003 031f 	and.w	r3, r3, #31
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d104      	bne.n	800b128 <USB_EPStartXfer+0xc40>
 800b11e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b122:	3b01      	subs	r3, #1
 800b124:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b128:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	029b      	lsls	r3, r3, #10
 800b130:	b29b      	uxth	r3, r3
 800b132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b13e:	801a      	strh	r2, [r3, #0]
 800b140:	e027      	b.n	800b192 <USB_EPStartXfer+0xcaa>
 800b142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	785b      	ldrb	r3, [r3, #1]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d11f      	bne.n	800b192 <USB_EPStartXfer+0xcaa>
 800b152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b156:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b160:	b29b      	uxth	r3, r3
 800b162:	461a      	mov	r2, r3
 800b164:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b168:	4413      	add	r3, r2
 800b16a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b16e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	011a      	lsls	r2, r3, #4
 800b17c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b180:	4413      	add	r3, r2
 800b182:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b186:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b190:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	895b      	ldrh	r3, [r3, #10]
 800b19e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6959      	ldr	r1, [r3, #20]
 800b1ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b1b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b1bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b1c0:	6800      	ldr	r0, [r0, #0]
 800b1c2:	f001 f8f2 	bl	800c3aa <USB_WritePMA>
          ep->xfer_buff += len;
 800b1c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	695a      	ldr	r2, [r3, #20]
 800b1d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1d6:	441a      	add	r2, r3
 800b1d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800b1e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	6a1a      	ldr	r2, [r3, #32]
 800b1f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d90f      	bls.n	800b220 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800b200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6a1a      	ldr	r2, [r3, #32]
 800b20c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b210:	1ad2      	subs	r2, r2, r3
 800b212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	621a      	str	r2, [r3, #32]
 800b21e:	e00e      	b.n	800b23e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800b220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	6a1b      	ldr	r3, [r3, #32]
 800b22c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800b230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2200      	movs	r2, #0
 800b23c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800b23e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 8295 	beq.w	800b772 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b24c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	785b      	ldrb	r3, [r3, #1]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d16d      	bne.n	800b334 <USB_EPStartXfer+0xe4c>
 800b258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b25c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	66bb      	str	r3, [r7, #104]	; 0x68
 800b264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b272:	b29b      	uxth	r3, r3
 800b274:	461a      	mov	r2, r3
 800b276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b278:	4413      	add	r3, r2
 800b27a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b27c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	011a      	lsls	r2, r3, #4
 800b28a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b28c:	4413      	add	r3, r2
 800b28e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b292:	667b      	str	r3, [r7, #100]	; 0x64
 800b294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d112      	bne.n	800b2c2 <USB_EPStartXfer+0xdda>
 800b29c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b29e:	881b      	ldrh	r3, [r3, #0]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2aa:	801a      	strh	r2, [r3, #0]
 800b2ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2ae:	881b      	ldrh	r3, [r3, #0]
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2be:	801a      	strh	r2, [r3, #0]
 800b2c0:	e063      	b.n	800b38a <USB_EPStartXfer+0xea2>
 800b2c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2c6:	2b3e      	cmp	r3, #62	; 0x3e
 800b2c8:	d817      	bhi.n	800b2fa <USB_EPStartXfer+0xe12>
 800b2ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2ce:	085b      	lsrs	r3, r3, #1
 800b2d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b2d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d004      	beq.n	800b2ea <USB_EPStartXfer+0xe02>
 800b2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	029b      	lsls	r3, r3, #10
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2f6:	801a      	strh	r2, [r3, #0]
 800b2f8:	e047      	b.n	800b38a <USB_EPStartXfer+0xea2>
 800b2fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2fe:	095b      	lsrs	r3, r3, #5
 800b300:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b308:	f003 031f 	and.w	r3, r3, #31
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d104      	bne.n	800b31a <USB_EPStartXfer+0xe32>
 800b310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b314:	3b01      	subs	r3, #1
 800b316:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b31e:	b29b      	uxth	r3, r3
 800b320:	029b      	lsls	r3, r3, #10
 800b322:	b29b      	uxth	r3, r3
 800b324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b330:	801a      	strh	r2, [r3, #0]
 800b332:	e02a      	b.n	800b38a <USB_EPStartXfer+0xea2>
 800b334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	785b      	ldrb	r3, [r3, #1]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d122      	bne.n	800b38a <USB_EPStartXfer+0xea2>
 800b344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b348:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	673b      	str	r3, [r7, #112]	; 0x70
 800b350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b354:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b35e:	b29b      	uxth	r3, r3
 800b360:	461a      	mov	r2, r3
 800b362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b364:	4413      	add	r3, r2
 800b366:	673b      	str	r3, [r7, #112]	; 0x70
 800b368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b36c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	011a      	lsls	r2, r3, #4
 800b376:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b378:	4413      	add	r3, r2
 800b37a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b37e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b384:	b29a      	uxth	r2, r3
 800b386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b388:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b38a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b38e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	891b      	ldrh	r3, [r3, #8]
 800b396:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b39a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b39e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	6959      	ldr	r1, [r3, #20]
 800b3a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b3b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b3b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b3b8:	6800      	ldr	r0, [r0, #0]
 800b3ba:	f000 fff6 	bl	800c3aa <USB_WritePMA>
 800b3be:	e1d8      	b.n	800b772 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b3c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	785b      	ldrb	r3, [r3, #1]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d178      	bne.n	800b4c2 <USB_EPStartXfer+0xfda>
 800b3d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	011a      	lsls	r2, r3, #4
 800b408:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b40c:	4413      	add	r3, r2
 800b40e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b412:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d116      	bne.n	800b44c <USB_EPStartXfer+0xf64>
 800b41e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	b29b      	uxth	r3, r3
 800b426:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b430:	801a      	strh	r2, [r3, #0]
 800b432:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b436:	881b      	ldrh	r3, [r3, #0]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b43e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b442:	b29a      	uxth	r2, r3
 800b444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b448:	801a      	strh	r2, [r3, #0]
 800b44a:	e06b      	b.n	800b524 <USB_EPStartXfer+0x103c>
 800b44c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b450:	2b3e      	cmp	r3, #62	; 0x3e
 800b452:	d818      	bhi.n	800b486 <USB_EPStartXfer+0xf9e>
 800b454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b458:	085b      	lsrs	r3, r3, #1
 800b45a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b45e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b462:	f003 0301 	and.w	r3, r3, #1
 800b466:	2b00      	cmp	r3, #0
 800b468:	d004      	beq.n	800b474 <USB_EPStartXfer+0xf8c>
 800b46a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b46e:	3301      	adds	r3, #1
 800b470:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b474:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b478:	b29b      	uxth	r3, r3
 800b47a:	029b      	lsls	r3, r3, #10
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b482:	801a      	strh	r2, [r3, #0]
 800b484:	e04e      	b.n	800b524 <USB_EPStartXfer+0x103c>
 800b486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b48a:	095b      	lsrs	r3, r3, #5
 800b48c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b494:	f003 031f 	and.w	r3, r3, #31
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d104      	bne.n	800b4a6 <USB_EPStartXfer+0xfbe>
 800b49c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b4a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	029b      	lsls	r3, r3, #10
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4be:	801a      	strh	r2, [r3, #0]
 800b4c0:	e030      	b.n	800b524 <USB_EPStartXfer+0x103c>
 800b4c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	785b      	ldrb	r3, [r3, #1]
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d128      	bne.n	800b524 <USB_EPStartXfer+0x103c>
 800b4d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b4e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b4fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	011a      	lsls	r2, r3, #4
 800b50a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b50e:	4413      	add	r3, r2
 800b510:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b514:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b522:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	891b      	ldrh	r3, [r3, #8]
 800b530:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	6959      	ldr	r1, [r3, #20]
 800b540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b544:	b29b      	uxth	r3, r3
 800b546:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b54a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b54e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b552:	6800      	ldr	r0, [r0, #0]
 800b554:	f000 ff29 	bl	800c3aa <USB_WritePMA>
          ep->xfer_buff += len;
 800b558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b55c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	695a      	ldr	r2, [r3, #20]
 800b564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b568:	441a      	add	r2, r3
 800b56a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b56e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800b576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b57a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6a1a      	ldr	r2, [r3, #32]
 800b582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d90f      	bls.n	800b5b2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800b592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	6a1a      	ldr	r2, [r3, #32]
 800b59e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5a2:	1ad2      	subs	r2, r2, r3
 800b5a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	621a      	str	r2, [r3, #32]
 800b5b0:	e00e      	b.n	800b5d0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800b5b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800b5c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800b5d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 80cc 	beq.w	800b772 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b5da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	785b      	ldrb	r3, [r3, #1]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d178      	bne.n	800b6ea <USB_EPStartXfer+0x1202>
 800b5f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b60a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b614:	b29b      	uxth	r3, r3
 800b616:	461a      	mov	r2, r3
 800b618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b61c:	4413      	add	r3, r2
 800b61e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	011a      	lsls	r2, r3, #4
 800b630:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b634:	4413      	add	r3, r2
 800b636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b63a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b63e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b642:	2b00      	cmp	r3, #0
 800b644:	d116      	bne.n	800b674 <USB_EPStartXfer+0x118c>
 800b646:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b64a:	881b      	ldrh	r3, [r3, #0]
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b652:	b29a      	uxth	r2, r3
 800b654:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b658:	801a      	strh	r2, [r3, #0]
 800b65a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b65e:	881b      	ldrh	r3, [r3, #0]
 800b660:	b29b      	uxth	r3, r3
 800b662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b670:	801a      	strh	r2, [r3, #0]
 800b672:	e064      	b.n	800b73e <USB_EPStartXfer+0x1256>
 800b674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b678:	2b3e      	cmp	r3, #62	; 0x3e
 800b67a:	d818      	bhi.n	800b6ae <USB_EPStartXfer+0x11c6>
 800b67c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b680:	085b      	lsrs	r3, r3, #1
 800b682:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d004      	beq.n	800b69c <USB_EPStartXfer+0x11b4>
 800b692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b696:	3301      	adds	r3, #1
 800b698:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b69c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	029b      	lsls	r3, r3, #10
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6aa:	801a      	strh	r2, [r3, #0]
 800b6ac:	e047      	b.n	800b73e <USB_EPStartXfer+0x1256>
 800b6ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6b2:	095b      	lsrs	r3, r3, #5
 800b6b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b6b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6bc:	f003 031f 	and.w	r3, r3, #31
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d104      	bne.n	800b6ce <USB_EPStartXfer+0x11e6>
 800b6c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b6ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	029b      	lsls	r3, r3, #10
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6e6:	801a      	strh	r2, [r3, #0]
 800b6e8:	e029      	b.n	800b73e <USB_EPStartXfer+0x1256>
 800b6ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	785b      	ldrb	r3, [r3, #1]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d121      	bne.n	800b73e <USB_EPStartXfer+0x1256>
 800b6fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b708:	b29b      	uxth	r3, r3
 800b70a:	461a      	mov	r2, r3
 800b70c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b710:	4413      	add	r3, r2
 800b712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b71a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	011a      	lsls	r2, r3, #4
 800b724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b728:	4413      	add	r3, r2
 800b72a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b72e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b736:	b29a      	uxth	r2, r3
 800b738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b73c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b73e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	895b      	ldrh	r3, [r3, #10]
 800b74a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b74e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6959      	ldr	r1, [r3, #20]
 800b75a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b75e:	b29b      	uxth	r3, r3
 800b760:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b764:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b768:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b76c:	6800      	ldr	r0, [r0, #0]
 800b76e:	f000 fe1c 	bl	800c3aa <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	b29b      	uxth	r3, r3
 800b790:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b794:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b79c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7a0:	8013      	strh	r3, [r2, #0]
 800b7a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7a6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b7aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b7ae:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b7b2:	8812      	ldrh	r2, [r2, #0]
 800b7b4:	f082 0210 	eor.w	r2, r2, #16
 800b7b8:	801a      	strh	r2, [r3, #0]
 800b7ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7be:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b7c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b7c6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b7ca:	8812      	ldrh	r2, [r2, #0]
 800b7cc:	f082 0220 	eor.w	r2, r2, #32
 800b7d0:	801a      	strh	r2, [r3, #0]
 800b7d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	441a      	add	r2, r3
 800b7ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7f0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b7f4:	881b      	ldrh	r3, [r3, #0]
 800b7f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b806:	b29b      	uxth	r3, r3
 800b808:	8013      	strh	r3, [r2, #0]
 800b80a:	f000 bc9f 	b.w	800c14c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b80e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	7b1b      	ldrb	r3, [r3, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f040 80ae 	bne.w	800b97c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	699a      	ldr	r2, [r3, #24]
 800b82c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d917      	bls.n	800b86c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800b83c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800b84c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	699a      	ldr	r2, [r3, #24]
 800b858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b85c:	1ad2      	subs	r2, r2, r3
 800b85e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	619a      	str	r2, [r3, #24]
 800b86a:	e00e      	b.n	800b88a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800b86c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800b87c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2200      	movs	r2, #0
 800b888:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b88a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b88e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b89c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	011a      	lsls	r2, r3, #4
 800b8c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b8cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b8d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d116      	bne.n	800b906 <USB_EPStartXfer+0x141e>
 800b8d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8ea:	801a      	strh	r2, [r3, #0]
 800b8ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8f0:	881b      	ldrh	r3, [r3, #0]
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b902:	801a      	strh	r2, [r3, #0]
 800b904:	e3e8      	b.n	800c0d8 <USB_EPStartXfer+0x1bf0>
 800b906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b90a:	2b3e      	cmp	r3, #62	; 0x3e
 800b90c:	d818      	bhi.n	800b940 <USB_EPStartXfer+0x1458>
 800b90e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b912:	085b      	lsrs	r3, r3, #1
 800b914:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b91c:	f003 0301 	and.w	r3, r3, #1
 800b920:	2b00      	cmp	r3, #0
 800b922:	d004      	beq.n	800b92e <USB_EPStartXfer+0x1446>
 800b924:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b928:	3301      	adds	r3, #1
 800b92a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b92e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b932:	b29b      	uxth	r3, r3
 800b934:	029b      	lsls	r3, r3, #10
 800b936:	b29a      	uxth	r2, r3
 800b938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b93c:	801a      	strh	r2, [r3, #0]
 800b93e:	e3cb      	b.n	800c0d8 <USB_EPStartXfer+0x1bf0>
 800b940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b944:	095b      	lsrs	r3, r3, #5
 800b946:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b94a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b94e:	f003 031f 	and.w	r3, r3, #31
 800b952:	2b00      	cmp	r3, #0
 800b954:	d104      	bne.n	800b960 <USB_EPStartXfer+0x1478>
 800b956:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b95a:	3b01      	subs	r3, #1
 800b95c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b960:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b964:	b29b      	uxth	r3, r3
 800b966:	029b      	lsls	r3, r3, #10
 800b968:	b29b      	uxth	r3, r3
 800b96a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b96e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b972:	b29a      	uxth	r2, r3
 800b974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b978:	801a      	strh	r2, [r3, #0]
 800b97a:	e3ad      	b.n	800c0d8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b97c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	78db      	ldrb	r3, [r3, #3]
 800b988:	2b02      	cmp	r3, #2
 800b98a:	f040 8200 	bne.w	800bd8e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b98e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	785b      	ldrb	r3, [r3, #1]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f040 8091 	bne.w	800bac2 <USB_EPStartXfer+0x15da>
 800b9a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b9c4:	4413      	add	r3, r2
 800b9c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	011a      	lsls	r2, r3, #4
 800b9d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b9dc:	4413      	add	r3, r2
 800b9de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b9e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d116      	bne.n	800ba24 <USB_EPStartXfer+0x153c>
 800b9f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9fa:	881b      	ldrh	r3, [r3, #0]
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba08:	801a      	strh	r2, [r3, #0]
 800ba0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba0e:	881b      	ldrh	r3, [r3, #0]
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba20:	801a      	strh	r2, [r3, #0]
 800ba22:	e083      	b.n	800bb2c <USB_EPStartXfer+0x1644>
 800ba24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	2b3e      	cmp	r3, #62	; 0x3e
 800ba32:	d820      	bhi.n	800ba76 <USB_EPStartXfer+0x158e>
 800ba34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	085b      	lsrs	r3, r3, #1
 800ba42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ba46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d004      	beq.n	800ba64 <USB_EPStartXfer+0x157c>
 800ba5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba5e:	3301      	adds	r3, #1
 800ba60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ba64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	029b      	lsls	r3, r3, #10
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba72:	801a      	strh	r2, [r3, #0]
 800ba74:	e05a      	b.n	800bb2c <USB_EPStartXfer+0x1644>
 800ba76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	095b      	lsrs	r3, r3, #5
 800ba84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ba88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	f003 031f 	and.w	r3, r3, #31
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d104      	bne.n	800baa6 <USB_EPStartXfer+0x15be>
 800ba9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa0:	3b01      	subs	r3, #1
 800baa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800baa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baaa:	b29b      	uxth	r3, r3
 800baac:	029b      	lsls	r3, r3, #10
 800baae:	b29b      	uxth	r3, r3
 800bab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bab8:	b29a      	uxth	r2, r3
 800baba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800babe:	801a      	strh	r2, [r3, #0]
 800bac0:	e034      	b.n	800bb2c <USB_EPStartXfer+0x1644>
 800bac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	785b      	ldrb	r3, [r3, #1]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d12c      	bne.n	800bb2c <USB_EPStartXfer+0x1644>
 800bad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bad6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baee:	b29b      	uxth	r3, r3
 800baf0:	461a      	mov	r2, r3
 800baf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800baf6:	4413      	add	r3, r2
 800baf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bafc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	011a      	lsls	r2, r3, #4
 800bb0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb0e:	4413      	add	r3, r2
 800bb10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bb2a:	801a      	strh	r2, [r3, #0]
 800bb2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	785b      	ldrb	r3, [r3, #1]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f040 8091 	bne.w	800bc6e <USB_EPStartXfer+0x1786>
 800bb4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bb5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bb70:	4413      	add	r3, r2
 800bb72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bb76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	011a      	lsls	r2, r3, #4
 800bb84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bb88:	4413      	add	r3, r2
 800bb8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bb8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d116      	bne.n	800bbd0 <USB_EPStartXfer+0x16e8>
 800bba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bba6:	881b      	ldrh	r3, [r3, #0]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bbb4:	801a      	strh	r2, [r3, #0]
 800bbb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bbcc:	801a      	strh	r2, [r3, #0]
 800bbce:	e07c      	b.n	800bcca <USB_EPStartXfer+0x17e2>
 800bbd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	2b3e      	cmp	r3, #62	; 0x3e
 800bbde:	d820      	bhi.n	800bc22 <USB_EPStartXfer+0x173a>
 800bbe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	085b      	lsrs	r3, r3, #1
 800bbee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bbf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d004      	beq.n	800bc10 <USB_EPStartXfer+0x1728>
 800bc06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bc10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	029b      	lsls	r3, r3, #10
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bc1e:	801a      	strh	r2, [r3, #0]
 800bc20:	e053      	b.n	800bcca <USB_EPStartXfer+0x17e2>
 800bc22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	095b      	lsrs	r3, r3, #5
 800bc30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bc34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	691b      	ldr	r3, [r3, #16]
 800bc40:	f003 031f 	and.w	r3, r3, #31
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d104      	bne.n	800bc52 <USB_EPStartXfer+0x176a>
 800bc48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bc52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	029b      	lsls	r3, r3, #10
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bc6a:	801a      	strh	r2, [r3, #0]
 800bc6c:	e02d      	b.n	800bcca <USB_EPStartXfer+0x17e2>
 800bc6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	785b      	ldrb	r3, [r3, #1]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d125      	bne.n	800bcca <USB_EPStartXfer+0x17e2>
 800bc7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bc94:	4413      	add	r3, r2
 800bc96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	011a      	lsls	r2, r3, #4
 800bca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bcac:	4413      	add	r3, r2
 800bcae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bcb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bcb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bcc8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bcca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	69db      	ldr	r3, [r3, #28]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f000 81fe 	beq.w	800c0d8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bcdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bcfc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bd00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d005      	beq.n	800bd14 <USB_EPStartXfer+0x182c>
 800bd08:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bd0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10d      	bne.n	800bd30 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bd14:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bd18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f040 81db 	bne.w	800c0d8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bd22:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bd26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f040 81d4 	bne.w	800c0d8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800bd30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	881b      	ldrh	r3, [r3, #0]
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd56:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800bd5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	441a      	add	r2, r3
 800bd74:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800bd78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	8013      	strh	r3, [r2, #0]
 800bd8c:	e1a4      	b.n	800c0d8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bd8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	78db      	ldrb	r3, [r3, #3]
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	f040 819a 	bne.w	800c0d4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bda0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bda4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	699a      	ldr	r2, [r3, #24]
 800bdac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d917      	bls.n	800bdec <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800bdbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800bdcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	699a      	ldr	r2, [r3, #24]
 800bdd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bddc:	1ad2      	subs	r2, r2, r3
 800bdde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bde2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	619a      	str	r2, [r3, #24]
 800bdea:	e00e      	b.n	800be0a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800bdec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800bdfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2200      	movs	r2, #0
 800be08:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800be0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	785b      	ldrb	r3, [r3, #1]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d178      	bne.n	800bf0c <USB_EPStartXfer+0x1a24>
 800be1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800be28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be36:	b29b      	uxth	r3, r3
 800be38:	461a      	mov	r2, r3
 800be3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800be3e:	4413      	add	r3, r2
 800be40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800be44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	011a      	lsls	r2, r3, #4
 800be52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800be56:	4413      	add	r3, r2
 800be58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800be5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be64:	2b00      	cmp	r3, #0
 800be66:	d116      	bne.n	800be96 <USB_EPStartXfer+0x19ae>
 800be68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	b29b      	uxth	r3, r3
 800be70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be74:	b29a      	uxth	r2, r3
 800be76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be7a:	801a      	strh	r2, [r3, #0]
 800be7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	b29b      	uxth	r3, r3
 800be84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be92:	801a      	strh	r2, [r3, #0]
 800be94:	e06b      	b.n	800bf6e <USB_EPStartXfer+0x1a86>
 800be96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be9a:	2b3e      	cmp	r3, #62	; 0x3e
 800be9c:	d818      	bhi.n	800bed0 <USB_EPStartXfer+0x19e8>
 800be9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bea2:	085b      	lsrs	r3, r3, #1
 800bea4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800beac:	f003 0301 	and.w	r3, r3, #1
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d004      	beq.n	800bebe <USB_EPStartXfer+0x19d6>
 800beb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800beb8:	3301      	adds	r3, #1
 800beba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	029b      	lsls	r3, r3, #10
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800becc:	801a      	strh	r2, [r3, #0]
 800bece:	e04e      	b.n	800bf6e <USB_EPStartXfer+0x1a86>
 800bed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bed4:	095b      	lsrs	r3, r3, #5
 800bed6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800beda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bede:	f003 031f 	and.w	r3, r3, #31
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d104      	bne.n	800bef0 <USB_EPStartXfer+0x1a08>
 800bee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800beea:	3b01      	subs	r3, #1
 800beec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	029b      	lsls	r3, r3, #10
 800bef8:	b29b      	uxth	r3, r3
 800befa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800befe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf08:	801a      	strh	r2, [r3, #0]
 800bf0a:	e030      	b.n	800bf6e <USB_EPStartXfer+0x1a86>
 800bf0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	785b      	ldrb	r3, [r3, #1]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d128      	bne.n	800bf6e <USB_EPStartXfer+0x1a86>
 800bf1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bf2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf40:	4413      	add	r3, r2
 800bf42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bf46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	011a      	lsls	r2, r3, #4
 800bf54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf58:	4413      	add	r3, r2
 800bf5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf6c:	801a      	strh	r2, [r3, #0]
 800bf6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	785b      	ldrb	r3, [r3, #1]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d178      	bne.n	800c07e <USB_EPStartXfer+0x1b96>
 800bf8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bf9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	461a      	mov	r2, r3
 800bfac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bfb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bfba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	011a      	lsls	r2, r3, #4
 800bfc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfc8:	4413      	add	r3, r2
 800bfca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bfce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bfd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d116      	bne.n	800c008 <USB_EPStartXfer+0x1b20>
 800bfda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfde:	881b      	ldrh	r3, [r3, #0]
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfec:	801a      	strh	r2, [r3, #0]
 800bfee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bffe:	b29a      	uxth	r2, r3
 800c000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c004:	801a      	strh	r2, [r3, #0]
 800c006:	e067      	b.n	800c0d8 <USB_EPStartXfer+0x1bf0>
 800c008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c00c:	2b3e      	cmp	r3, #62	; 0x3e
 800c00e:	d818      	bhi.n	800c042 <USB_EPStartXfer+0x1b5a>
 800c010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c014:	085b      	lsrs	r3, r3, #1
 800c016:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c01a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c01e:	f003 0301 	and.w	r3, r3, #1
 800c022:	2b00      	cmp	r3, #0
 800c024:	d004      	beq.n	800c030 <USB_EPStartXfer+0x1b48>
 800c026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c02a:	3301      	adds	r3, #1
 800c02c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c030:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c034:	b29b      	uxth	r3, r3
 800c036:	029b      	lsls	r3, r3, #10
 800c038:	b29a      	uxth	r2, r3
 800c03a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c03e:	801a      	strh	r2, [r3, #0]
 800c040:	e04a      	b.n	800c0d8 <USB_EPStartXfer+0x1bf0>
 800c042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c046:	095b      	lsrs	r3, r3, #5
 800c048:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c04c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c050:	f003 031f 	and.w	r3, r3, #31
 800c054:	2b00      	cmp	r3, #0
 800c056:	d104      	bne.n	800c062 <USB_EPStartXfer+0x1b7a>
 800c058:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c05c:	3b01      	subs	r3, #1
 800c05e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c062:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c066:	b29b      	uxth	r3, r3
 800c068:	029b      	lsls	r3, r3, #10
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c074:	b29a      	uxth	r2, r3
 800c076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c07a:	801a      	strh	r2, [r3, #0]
 800c07c:	e02c      	b.n	800c0d8 <USB_EPStartXfer+0x1bf0>
 800c07e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	785b      	ldrb	r3, [r3, #1]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d124      	bne.n	800c0d8 <USB_EPStartXfer+0x1bf0>
 800c08e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c092:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0a4:	4413      	add	r3, r2
 800c0a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c0aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	011a      	lsls	r2, r3, #4
 800c0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0bc:	4413      	add	r3, r2
 800c0be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c0c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0d0:	801a      	strh	r2, [r3, #0]
 800c0d2:	e001      	b.n	800c0d8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e03a      	b.n	800c14e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c0d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c102:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c106:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c10a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c10e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c112:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c116:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c11a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c11e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	441a      	add	r2, r3
 800c134:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c13c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c148:	b29b      	uxth	r3, r3
 800c14a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	785b      	ldrb	r3, [r3, #1]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d020      	beq.n	800c1ac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	881b      	ldrh	r3, [r3, #0]
 800c176:	b29b      	uxth	r3, r3
 800c178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c17c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c180:	81bb      	strh	r3, [r7, #12]
 800c182:	89bb      	ldrh	r3, [r7, #12]
 800c184:	f083 0310 	eor.w	r3, r3, #16
 800c188:	81bb      	strh	r3, [r7, #12]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	441a      	add	r2, r3
 800c194:	89bb      	ldrh	r3, [r7, #12]
 800c196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c19a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c19e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	8013      	strh	r3, [r2, #0]
 800c1aa:	e01f      	b.n	800c1ec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	881b      	ldrh	r3, [r3, #0]
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1c2:	81fb      	strh	r3, [r7, #14]
 800c1c4:	89fb      	ldrh	r3, [r7, #14]
 800c1c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c1ca:	81fb      	strh	r3, [r7, #14]
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	441a      	add	r2, r3
 800c1d6:	89fb      	ldrh	r3, [r7, #14]
 800c1d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bc80      	pop	{r7}
 800c1f6:	4770      	bx	lr

0800c1f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	7b1b      	ldrb	r3, [r3, #12]
 800c206:	2b00      	cmp	r3, #0
 800c208:	f040 809d 	bne.w	800c346 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	785b      	ldrb	r3, [r3, #1]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d04c      	beq.n	800c2ae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	881b      	ldrh	r3, [r3, #0]
 800c220:	823b      	strh	r3, [r7, #16]
 800c222:	8a3b      	ldrh	r3, [r7, #16]
 800c224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d01b      	beq.n	800c264 <USB_EPClearStall+0x6c>
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	4413      	add	r3, r2
 800c236:	881b      	ldrh	r3, [r3, #0]
 800c238:	b29b      	uxth	r3, r3
 800c23a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c23e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c242:	81fb      	strh	r3, [r7, #14]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	441a      	add	r2, r3
 800c24e:	89fb      	ldrh	r3, [r7, #14]
 800c250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c25c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c260:	b29b      	uxth	r3, r3
 800c262:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	78db      	ldrb	r3, [r3, #3]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d06c      	beq.n	800c346 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	b29b      	uxth	r3, r3
 800c27a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c282:	81bb      	strh	r3, [r7, #12]
 800c284:	89bb      	ldrh	r3, [r7, #12]
 800c286:	f083 0320 	eor.w	r3, r3, #32
 800c28a:	81bb      	strh	r3, [r7, #12]
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	441a      	add	r2, r3
 800c296:	89bb      	ldrh	r3, [r7, #12]
 800c298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c29c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	8013      	strh	r3, [r2, #0]
 800c2ac:	e04b      	b.n	800c346 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4413      	add	r3, r2
 800c2b8:	881b      	ldrh	r3, [r3, #0]
 800c2ba:	82fb      	strh	r3, [r7, #22]
 800c2bc:	8afb      	ldrh	r3, [r7, #22]
 800c2be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d01b      	beq.n	800c2fe <USB_EPClearStall+0x106>
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2dc:	82bb      	strh	r3, [r7, #20]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	441a      	add	r2, r3
 800c2e8:	8abb      	ldrh	r3, [r7, #20]
 800c2ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c2f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4413      	add	r3, r2
 800c308:	881b      	ldrh	r3, [r3, #0]
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c314:	827b      	strh	r3, [r7, #18]
 800c316:	8a7b      	ldrh	r3, [r7, #18]
 800c318:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c31c:	827b      	strh	r3, [r7, #18]
 800c31e:	8a7b      	ldrh	r3, [r7, #18]
 800c320:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c324:	827b      	strh	r3, [r7, #18]
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	441a      	add	r2, r3
 800c330:	8a7b      	ldrh	r3, [r7, #18]
 800c332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c33a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c342:	b29b      	uxth	r3, r3
 800c344:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c346:	2300      	movs	r3, #0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	371c      	adds	r7, #28
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bc80      	pop	{r7}
 800c350:	4770      	bx	lr

0800c352 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	460b      	mov	r3, r1
 800c35c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c35e:	78fb      	ldrb	r3, [r7, #3]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d103      	bne.n	800c36c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2280      	movs	r2, #128	; 0x80
 800c368:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	bc80      	pop	{r7}
 800c376:	4770      	bx	lr

0800c378 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	bc80      	pop	{r7}
 800c38a:	4770      	bx	lr

0800c38c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c39e:	68fb      	ldr	r3, [r7, #12]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3714      	adds	r7, #20
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bc80      	pop	{r7}
 800c3a8:	4770      	bx	lr

0800c3aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c3aa:	b480      	push	{r7}
 800c3ac:	b08d      	sub	sp, #52	; 0x34
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	60f8      	str	r0, [r7, #12]
 800c3b2:	60b9      	str	r1, [r7, #8]
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	80fb      	strh	r3, [r7, #6]
 800c3bc:	4613      	mov	r3, r2
 800c3be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c3c0:	88bb      	ldrh	r3, [r7, #4]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	085b      	lsrs	r3, r3, #1
 800c3c6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c3d0:	88fb      	ldrh	r3, [r7, #6]
 800c3d2:	005a      	lsls	r2, r3, #1
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3dc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3e2:	e01e      	b.n	800c422 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800c3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	021b      	lsls	r3, r3, #8
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	b29a      	uxth	r2, r3
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40c:	3302      	adds	r3, #2
 800c40e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800c410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c412:	3302      	adds	r3, #2
 800c414:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c418:	3301      	adds	r3, #1
 800c41a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41e:	3b01      	subs	r3, #1
 800c420:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1dd      	bne.n	800c3e4 <USB_WritePMA+0x3a>
  }
}
 800c428:	bf00      	nop
 800c42a:	bf00      	nop
 800c42c:	3734      	adds	r7, #52	; 0x34
 800c42e:	46bd      	mov	sp, r7
 800c430:	bc80      	pop	{r7}
 800c432:	4770      	bx	lr

0800c434 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c434:	b480      	push	{r7}
 800c436:	b08b      	sub	sp, #44	; 0x2c
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	4611      	mov	r1, r2
 800c440:	461a      	mov	r2, r3
 800c442:	460b      	mov	r3, r1
 800c444:	80fb      	strh	r3, [r7, #6]
 800c446:	4613      	mov	r3, r2
 800c448:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c44a:	88bb      	ldrh	r3, [r7, #4]
 800c44c:	085b      	lsrs	r3, r3, #1
 800c44e:	b29b      	uxth	r3, r3
 800c450:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	005a      	lsls	r2, r3, #1
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	4413      	add	r3, r2
 800c462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c466:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	627b      	str	r3, [r7, #36]	; 0x24
 800c46c:	e01b      	b.n	800c4a6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	881b      	ldrh	r3, [r3, #0]
 800c472:	b29b      	uxth	r3, r3
 800c474:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c476:	6a3b      	ldr	r3, [r7, #32]
 800c478:	3302      	adds	r3, #2
 800c47a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	3301      	adds	r3, #1
 800c488:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	0a1b      	lsrs	r3, r3, #8
 800c48e:	b2da      	uxtb	r2, r3
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	3301      	adds	r3, #1
 800c498:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c49a:	6a3b      	ldr	r3, [r7, #32]
 800c49c:	3302      	adds	r3, #2
 800c49e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1e0      	bne.n	800c46e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c4ac:	88bb      	ldrh	r3, [r7, #4]
 800c4ae:	f003 0301 	and.w	r3, r3, #1
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d007      	beq.n	800c4c8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800c4b8:	6a3b      	ldr	r3, [r7, #32]
 800c4ba:	881b      	ldrh	r3, [r3, #0]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	701a      	strb	r2, [r3, #0]
  }
}
 800c4c8:	bf00      	nop
 800c4ca:	372c      	adds	r7, #44	; 0x2c
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bc80      	pop	{r7}
 800c4d0:	4770      	bx	lr

0800c4d2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b084      	sub	sp, #16
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	460b      	mov	r3, r1
 800c4dc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	7c1b      	ldrb	r3, [r3, #16]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d115      	bne.n	800c516 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c4ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4ee:	2202      	movs	r2, #2
 800c4f0:	2181      	movs	r1, #129	; 0x81
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f001 fe75 	bl	800e1e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c4fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c502:	2202      	movs	r2, #2
 800c504:	2101      	movs	r1, #1
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f001 fe6b 	bl	800e1e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800c514:	e012      	b.n	800c53c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c516:	2340      	movs	r3, #64	; 0x40
 800c518:	2202      	movs	r2, #2
 800c51a:	2181      	movs	r1, #129	; 0x81
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f001 fe60 	bl	800e1e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c528:	2340      	movs	r3, #64	; 0x40
 800c52a:	2202      	movs	r2, #2
 800c52c:	2101      	movs	r1, #1
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f001 fe57 	bl	800e1e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c53c:	2308      	movs	r3, #8
 800c53e:	2203      	movs	r2, #3
 800c540:	2182      	movs	r1, #130	; 0x82
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f001 fe4d 	bl	800e1e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c54e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c552:	f001 ff6d 	bl	800e430 <USBD_static_malloc>
 800c556:	4602      	mov	r2, r0
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c564:	2b00      	cmp	r3, #0
 800c566:	d102      	bne.n	800c56e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c568:	2301      	movs	r3, #1
 800c56a:	73fb      	strb	r3, [r7, #15]
 800c56c:	e026      	b.n	800c5bc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c574:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	2200      	movs	r2, #0
 800c584:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	7c1b      	ldrb	r3, [r3, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d109      	bne.n	800c5ac <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c59e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5a2:	2101      	movs	r1, #1
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f001 ff0d 	bl	800e3c4 <USBD_LL_PrepareReceive>
 800c5aa:	e007      	b.n	800c5bc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c5b2:	2340      	movs	r3, #64	; 0x40
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f001 ff04 	bl	800e3c4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b084      	sub	sp, #16
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c5d6:	2181      	movs	r1, #129	; 0x81
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f001 fe28 	bl	800e22e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f001 fe21 	bl	800e22e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c5f4:	2182      	movs	r1, #130	; 0x82
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f001 fe19 	bl	800e22e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00e      	beq.n	800c62a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c61c:	4618      	mov	r0, r3
 800c61e:	f001 ff13 	bl	800e448 <USBD_static_free>
    pdev->pClassData = NULL;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2200      	movs	r2, #0
 800c626:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800c62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b086      	sub	sp, #24
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c644:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c646:	2300      	movs	r3, #0
 800c648:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c64a:	2300      	movs	r3, #0
 800c64c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d039      	beq.n	800c6d2 <USBD_CDC_Setup+0x9e>
 800c65e:	2b20      	cmp	r3, #32
 800c660:	d17f      	bne.n	800c762 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	88db      	ldrh	r3, [r3, #6]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d029      	beq.n	800c6be <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	b25b      	sxtb	r3, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	da11      	bge.n	800c698 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800c680:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	88d2      	ldrh	r2, [r2, #6]
 800c686:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c688:	6939      	ldr	r1, [r7, #16]
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	88db      	ldrh	r3, [r3, #6]
 800c68e:	461a      	mov	r2, r3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f001 f994 	bl	800d9be <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800c696:	e06b      	b.n	800c770 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	785a      	ldrb	r2, [r3, #1]
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	88db      	ldrh	r3, [r3, #6]
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c6ae:	6939      	ldr	r1, [r7, #16]
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	88db      	ldrh	r3, [r3, #6]
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f001 f9af 	bl	800da1a <USBD_CtlPrepareRx>
    break;
 800c6bc:	e058      	b.n	800c770 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	7850      	ldrb	r0, [r2, #1]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	6839      	ldr	r1, [r7, #0]
 800c6ce:	4798      	blx	r3
    break;
 800c6d0:	e04e      	b.n	800c770 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	785b      	ldrb	r3, [r3, #1]
 800c6d6:	2b0b      	cmp	r3, #11
 800c6d8:	d02e      	beq.n	800c738 <USBD_CDC_Setup+0x104>
 800c6da:	2b0b      	cmp	r3, #11
 800c6dc:	dc38      	bgt.n	800c750 <USBD_CDC_Setup+0x11c>
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d002      	beq.n	800c6e8 <USBD_CDC_Setup+0xb4>
 800c6e2:	2b0a      	cmp	r3, #10
 800c6e4:	d014      	beq.n	800c710 <USBD_CDC_Setup+0xdc>
 800c6e6:	e033      	b.n	800c750 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d107      	bne.n	800c702 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c6f2:	f107 030c 	add.w	r3, r7, #12
 800c6f6:	2202      	movs	r2, #2
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f001 f95f 	bl	800d9be <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c700:	e02e      	b.n	800c760 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f001 f8f0 	bl	800d8ea <USBD_CtlError>
			  ret = USBD_FAIL;
 800c70a:	2302      	movs	r3, #2
 800c70c:	75fb      	strb	r3, [r7, #23]
      break;
 800c70e:	e027      	b.n	800c760 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c716:	2b03      	cmp	r3, #3
 800c718:	d107      	bne.n	800c72a <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c71a:	f107 030f 	add.w	r3, r7, #15
 800c71e:	2201      	movs	r2, #1
 800c720:	4619      	mov	r1, r3
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f001 f94b 	bl	800d9be <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c728:	e01a      	b.n	800c760 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f001 f8dc 	bl	800d8ea <USBD_CtlError>
			  ret = USBD_FAIL;
 800c732:	2302      	movs	r3, #2
 800c734:	75fb      	strb	r3, [r7, #23]
      break;
 800c736:	e013      	b.n	800c760 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c73e:	2b03      	cmp	r3, #3
 800c740:	d00d      	beq.n	800c75e <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800c742:	6839      	ldr	r1, [r7, #0]
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f001 f8d0 	bl	800d8ea <USBD_CtlError>
			  ret = USBD_FAIL;
 800c74a:	2302      	movs	r3, #2
 800c74c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c74e:	e006      	b.n	800c75e <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 f8c9 	bl	800d8ea <USBD_CtlError>
      ret = USBD_FAIL;
 800c758:	2302      	movs	r3, #2
 800c75a:	75fb      	strb	r3, [r7, #23]
      break;
 800c75c:	e000      	b.n	800c760 <USBD_CDC_Setup+0x12c>
      break;
 800c75e:	bf00      	nop
    }
    break;
 800c760:	e006      	b.n	800c770 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f001 f8c0 	bl	800d8ea <USBD_CtlError>
    ret = USBD_FAIL;
 800c76a:	2302      	movs	r3, #2
 800c76c:	75fb      	strb	r3, [r7, #23]
    break;
 800c76e:	bf00      	nop
  }

  return ret;
 800c770:	7dfb      	ldrb	r3, [r7, #23]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3718      	adds	r7, #24
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b084      	sub	sp, #16
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
 800c782:	460b      	mov	r3, r1
 800c784:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c78c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c794:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d03a      	beq.n	800c816 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c7a0:	78fa      	ldrb	r2, [r7, #3]
 800c7a2:	6879      	ldr	r1, [r7, #4]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	440b      	add	r3, r1
 800c7ae:	331c      	adds	r3, #28
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d029      	beq.n	800c80a <USBD_CDC_DataIn+0x90>
 800c7b6:	78fa      	ldrb	r2, [r7, #3]
 800c7b8:	6879      	ldr	r1, [r7, #4]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4413      	add	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	440b      	add	r3, r1
 800c7c4:	331c      	adds	r3, #28
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	78f9      	ldrb	r1, [r7, #3]
 800c7ca:	68b8      	ldr	r0, [r7, #8]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	440b      	add	r3, r1
 800c7d2:	00db      	lsls	r3, r3, #3
 800c7d4:	4403      	add	r3, r0
 800c7d6:	3338      	adds	r3, #56	; 0x38
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	fbb2 f1f3 	udiv	r1, r2, r3
 800c7de:	fb01 f303 	mul.w	r3, r1, r3
 800c7e2:	1ad3      	subs	r3, r2, r3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d110      	bne.n	800c80a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c7e8:	78fa      	ldrb	r2, [r7, #3]
 800c7ea:	6879      	ldr	r1, [r7, #4]
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	440b      	add	r3, r1
 800c7f6:	331c      	adds	r3, #28
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c7fc:	78f9      	ldrb	r1, [r7, #3]
 800c7fe:	2300      	movs	r3, #0
 800c800:	2200      	movs	r2, #0
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f001 fdbb 	bl	800e37e <USBD_LL_Transmit>
 800c808:	e003      	b.n	800c812 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	e000      	b.n	800c818 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c816:	2302      	movs	r3, #2
  }
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	460b      	mov	r3, r1
 800c82a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c832:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c834:	78fb      	ldrb	r3, [r7, #3]
 800c836:	4619      	mov	r1, r3
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f001 fde6 	bl	800e40a <USBD_LL_GetRxDataSize>
 800c83e:	4602      	mov	r2, r0
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00d      	beq.n	800c86c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c864:	4611      	mov	r1, r2
 800c866:	4798      	blx	r3

    return USBD_OK;
 800c868:	2300      	movs	r3, #0
 800c86a:	e000      	b.n	800c86e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c86c:	2302      	movs	r3, #2
  }
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b084      	sub	sp, #16
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c884:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d015      	beq.n	800c8bc <USBD_CDC_EP0_RxReady+0x46>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c896:	2bff      	cmp	r3, #255	; 0xff
 800c898:	d010      	beq.n	800c8bc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c8a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c8b0:	b292      	uxth	r2, r2
 800c8b2:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	22ff      	movs	r2, #255	; 0xff
 800c8b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
	...

0800c8c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2243      	movs	r2, #67	; 0x43
 800c8d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c8d6:	4b03      	ldr	r3, [pc, #12]	; (800c8e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bc80      	pop	{r7}
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	200007d4 	.word	0x200007d4

0800c8e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2243      	movs	r2, #67	; 0x43
 800c8f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c8f6:	4b03      	ldr	r3, [pc, #12]	; (800c904 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bc80      	pop	{r7}
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	20000790 	.word	0x20000790

0800c908 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2243      	movs	r2, #67	; 0x43
 800c914:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c916:	4b03      	ldr	r3, [pc, #12]	; (800c924 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c918:	4618      	mov	r0, r3
 800c91a:	370c      	adds	r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bc80      	pop	{r7}
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	20000818 	.word	0x20000818

0800c928 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	220a      	movs	r2, #10
 800c934:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c936:	4b03      	ldr	r3, [pc, #12]	; (800c944 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c938:	4618      	mov	r0, r3
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bc80      	pop	{r7}
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	2000074c 	.word	0x2000074c

0800c948 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c952:	2302      	movs	r3, #2
 800c954:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d005      	beq.n	800c968 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c968:	7bfb      	ldrb	r3, [r7, #15]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3714      	adds	r7, #20
 800c96e:	46bd      	mov	sp, r7
 800c970:	bc80      	pop	{r7}
 800c972:	4770      	bx	lr

0800c974 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c974:	b480      	push	{r7}
 800c976:	b087      	sub	sp, #28
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	4613      	mov	r3, r2
 800c980:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c988:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c992:	88fa      	ldrh	r2, [r7, #6]
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	371c      	adds	r7, #28
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bc80      	pop	{r7}
 800c9a4:	4770      	bx	lr

0800c9a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c9a6:	b480      	push	{r7}
 800c9a8:	b085      	sub	sp, #20
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c9b6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	683a      	ldr	r2, [r7, #0]
 800c9bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bc80      	pop	{r7}
 800c9ca:	4770      	bx	lr

0800c9cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c9da:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d01c      	beq.n	800ca20 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d115      	bne.n	800ca1c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	2181      	movs	r1, #129	; 0x81
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f001 fcb3 	bl	800e37e <USBD_LL_Transmit>

      return USBD_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	e002      	b.n	800ca22 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e000      	b.n	800ca22 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ca20:	2302      	movs	r3, #2
  }
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b084      	sub	sp, #16
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ca38:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d017      	beq.n	800ca74 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	7c1b      	ldrb	r3, [r3, #16]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d109      	bne.n	800ca60 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca56:	2101      	movs	r1, #1
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f001 fcb3 	bl	800e3c4 <USBD_LL_PrepareReceive>
 800ca5e:	e007      	b.n	800ca70 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca66:	2340      	movs	r3, #64	; 0x40
 800ca68:	2101      	movs	r1, #1
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f001 fcaa 	bl	800e3c4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ca70:	2300      	movs	r3, #0
 800ca72:	e000      	b.n	800ca76 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ca74:	2302      	movs	r3, #2
  }
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b084      	sub	sp, #16
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	60f8      	str	r0, [r7, #12]
 800ca86:	60b9      	str	r1, [r7, #8]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ca92:	2302      	movs	r3, #2
 800ca94:	e01a      	b.n	800cacc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d003      	beq.n	800caa8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2200      	movs	r2, #0
 800caa4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d003      	beq.n	800cab6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	79fa      	ldrb	r2, [r7, #7]
 800cac2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f001 fb17 	bl	800e0f8 <USBD_LL_Init>

  return USBD_OK;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800cade:	2300      	movs	r3, #0
 800cae0:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d006      	beq.n	800caf6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	683a      	ldr	r2, [r7, #0]
 800caec:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800caf0:	2300      	movs	r3, #0
 800caf2:	73fb      	strb	r3, [r7, #15]
 800caf4:	e001      	b.n	800cafa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800caf6:	2302      	movs	r3, #2
 800caf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bc80      	pop	{r7}
 800cb04:	4770      	bx	lr

0800cb06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b082      	sub	sp, #8
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f001 fb4c 	bl	800e1ac <USBD_LL_Start>

  return USBD_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3708      	adds	r7, #8
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800cb1e:	b480      	push	{r7}
 800cb20:	b083      	sub	sp, #12
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bc80      	pop	{r7}
 800cb30:	4770      	bx	lr

0800cb32 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800cb3e:	2302      	movs	r3, #2
 800cb40:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00c      	beq.n	800cb66 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	78fa      	ldrb	r2, [r7, #3]
 800cb56:	4611      	mov	r1, r2
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	4798      	blx	r3
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d101      	bne.n	800cb66 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800cb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	78fa      	ldrb	r2, [r7, #3]
 800cb86:	4611      	mov	r1, r2
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	4798      	blx	r3
  return USBD_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b082      	sub	sp, #8
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cba6:	6839      	ldr	r1, [r7, #0]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f000 fe62 	bl	800d872 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800cbca:	f003 031f 	and.w	r3, r3, #31
 800cbce:	2b02      	cmp	r3, #2
 800cbd0:	d016      	beq.n	800cc00 <USBD_LL_SetupStage+0x6a>
 800cbd2:	2b02      	cmp	r3, #2
 800cbd4:	d81c      	bhi.n	800cc10 <USBD_LL_SetupStage+0x7a>
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d002      	beq.n	800cbe0 <USBD_LL_SetupStage+0x4a>
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d008      	beq.n	800cbf0 <USBD_LL_SetupStage+0x5a>
 800cbde:	e017      	b.n	800cc10 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 f9c5 	bl	800cf78 <USBD_StdDevReq>
    break;
 800cbee:	e01a      	b.n	800cc26 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 fa27 	bl	800d04c <USBD_StdItfReq>
    break;
 800cbfe:	e012      	b.n	800cc26 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cc06:	4619      	mov	r1, r3
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fa67 	bl	800d0dc <USBD_StdEPReq>
    break;
 800cc0e:	e00a      	b.n	800cc26 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800cc16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f001 fb24 	bl	800e26c <USBD_LL_StallEP>
    break;
 800cc24:	bf00      	nop
  }

  return USBD_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	460b      	mov	r3, r1
 800cc3a:	607a      	str	r2, [r7, #4]
 800cc3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800cc3e:	7afb      	ldrb	r3, [r7, #11]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d14b      	bne.n	800ccdc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cc4a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cc52:	2b03      	cmp	r3, #3
 800cc54:	d134      	bne.n	800ccc0 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	68da      	ldr	r2, [r3, #12]
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d919      	bls.n	800cc96 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	68da      	ldr	r2, [r3, #12]
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	1ad2      	subs	r2, r2, r3
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	68da      	ldr	r2, [r3, #12]
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d203      	bcs.n	800cc84 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	e002      	b.n	800cc8a <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f000 fee1 	bl	800da56 <USBD_CtlContinueRx>
 800cc94:	e038      	b.n	800cd08 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc9c:	691b      	ldr	r3, [r3, #16]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00a      	beq.n	800ccb8 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cca8:	2b03      	cmp	r3, #3
 800ccaa:	d105      	bne.n	800ccb8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f000 fede 	bl	800da7a <USBD_CtlSendStatus>
 800ccbe:	e023      	b.n	800cd08 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ccc6:	2b05      	cmp	r3, #5
 800ccc8:	d11e      	bne.n	800cd08 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f001 fac9 	bl	800e26c <USBD_LL_StallEP>
 800ccda:	e015      	b.n	800cd08 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cce2:	699b      	ldr	r3, [r3, #24]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00d      	beq.n	800cd04 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800ccee:	2b03      	cmp	r3, #3
 800ccf0:	d108      	bne.n	800cd04 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ccf8:	699b      	ldr	r3, [r3, #24]
 800ccfa:	7afa      	ldrb	r2, [r7, #11]
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	4798      	blx	r3
 800cd02:	e001      	b.n	800cd08 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cd04:	2302      	movs	r3, #2
 800cd06:	e000      	b.n	800cd0a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3718      	adds	r7, #24
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b086      	sub	sp, #24
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	60f8      	str	r0, [r7, #12]
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	607a      	str	r2, [r7, #4]
 800cd1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800cd20:	7afb      	ldrb	r3, [r7, #11]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d17f      	bne.n	800ce26 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	3314      	adds	r3, #20
 800cd2a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cd32:	2b02      	cmp	r3, #2
 800cd34:	d15c      	bne.n	800cdf0 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	68da      	ldr	r2, [r3, #12]
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d915      	bls.n	800cd6e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	68da      	ldr	r2, [r3, #12]
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	1ad2      	subs	r2, r2, r3
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	461a      	mov	r2, r3
 800cd58:	6879      	ldr	r1, [r7, #4]
 800cd5a:	68f8      	ldr	r0, [r7, #12]
 800cd5c:	f000 fe4b 	bl	800d9f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cd60:	2300      	movs	r3, #0
 800cd62:	2200      	movs	r2, #0
 800cd64:	2100      	movs	r1, #0
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	f001 fb2c 	bl	800e3c4 <USBD_LL_PrepareReceive>
 800cd6c:	e04e      	b.n	800ce0c <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	6912      	ldr	r2, [r2, #16]
 800cd76:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd7a:	fb01 f202 	mul.w	r2, r1, r2
 800cd7e:	1a9b      	subs	r3, r3, r2
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d11c      	bne.n	800cdbe <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	689a      	ldr	r2, [r3, #8]
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d316      	bcc.n	800cdbe <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	689a      	ldr	r2, [r3, #8]
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d20f      	bcs.n	800cdbe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd9e:	2200      	movs	r2, #0
 800cda0:	2100      	movs	r1, #0
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f000 fe27 	bl	800d9f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f001 fb04 	bl	800e3c4 <USBD_LL_PrepareReceive>
 800cdbc:	e026      	b.n	800ce0c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00a      	beq.n	800cde0 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800cdd0:	2b03      	cmp	r3, #3
 800cdd2:	d105      	bne.n	800cde0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800cde0:	2180      	movs	r1, #128	; 0x80
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f001 fa42 	bl	800e26c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f000 fe59 	bl	800daa0 <USBD_CtlReceiveStatus>
 800cdee:	e00d      	b.n	800ce0c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d004      	beq.n	800ce04 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d103      	bne.n	800ce0c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ce04:	2180      	movs	r1, #128	; 0x80
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f001 fa30 	bl	800e26c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d11d      	bne.n	800ce52 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f7ff fe81 	bl	800cb1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800ce24:	e015      	b.n	800ce52 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce2c:	695b      	ldr	r3, [r3, #20]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00d      	beq.n	800ce4e <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800ce38:	2b03      	cmp	r3, #3
 800ce3a:	d108      	bne.n	800ce4e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce42:	695b      	ldr	r3, [r3, #20]
 800ce44:	7afa      	ldrb	r2, [r7, #11]
 800ce46:	4611      	mov	r1, r2
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	4798      	blx	r3
 800ce4c:	e001      	b.n	800ce52 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ce4e:	2302      	movs	r3, #2
 800ce50:	e000      	b.n	800ce54 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ce52:	2300      	movs	r3, #0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3718      	adds	r7, #24
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce64:	2340      	movs	r3, #64	; 0x40
 800ce66:	2200      	movs	r2, #0
 800ce68:	2100      	movs	r1, #0
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f001 f9b9 	bl	800e1e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2240      	movs	r2, #64	; 0x40
 800ce7c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce80:	2340      	movs	r3, #64	; 0x40
 800ce82:	2200      	movs	r2, #0
 800ce84:	2180      	movs	r1, #128	; 0x80
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f001 f9ab 	bl	800e1e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2240      	movs	r2, #64	; 0x40
 800ce96:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d009      	beq.n	800ced4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	6852      	ldr	r2, [r2, #4]
 800cecc:	b2d2      	uxtb	r2, r2
 800cece:	4611      	mov	r1, r2
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	4798      	blx	r3
  }

  return USBD_OK;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800cede:	b480      	push	{r7}
 800cee0:	b083      	sub	sp, #12
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	460b      	mov	r3, r1
 800cee8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	78fa      	ldrb	r2, [r7, #3]
 800ceee:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	370c      	adds	r7, #12
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bc80      	pop	{r7}
 800cefa:	4770      	bx	lr

0800cefc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2204      	movs	r2, #4
 800cf14:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bc80      	pop	{r7}
 800cf22:	4770      	bx	lr

0800cf24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bc80      	pop	{r7}
 800cf42:	4770      	bx	lr

0800cf44 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cf52:	2b03      	cmp	r3, #3
 800cf54:	d10b      	bne.n	800cf6e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cf5c:	69db      	ldr	r3, [r3, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d005      	beq.n	800cf6e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cf68:	69db      	ldr	r3, [r3, #28]
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf8e:	2b40      	cmp	r3, #64	; 0x40
 800cf90:	d005      	beq.n	800cf9e <USBD_StdDevReq+0x26>
 800cf92:	2b40      	cmp	r3, #64	; 0x40
 800cf94:	d84f      	bhi.n	800d036 <USBD_StdDevReq+0xbe>
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d009      	beq.n	800cfae <USBD_StdDevReq+0x36>
 800cf9a:	2b20      	cmp	r3, #32
 800cf9c:	d14b      	bne.n	800d036 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	6839      	ldr	r1, [r7, #0]
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	4798      	blx	r3
    break;
 800cfac:	e048      	b.n	800d040 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	785b      	ldrb	r3, [r3, #1]
 800cfb2:	2b09      	cmp	r3, #9
 800cfb4:	d839      	bhi.n	800d02a <USBD_StdDevReq+0xb2>
 800cfb6:	a201      	add	r2, pc, #4	; (adr r2, 800cfbc <USBD_StdDevReq+0x44>)
 800cfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfbc:	0800d00d 	.word	0x0800d00d
 800cfc0:	0800d021 	.word	0x0800d021
 800cfc4:	0800d02b 	.word	0x0800d02b
 800cfc8:	0800d017 	.word	0x0800d017
 800cfcc:	0800d02b 	.word	0x0800d02b
 800cfd0:	0800cfef 	.word	0x0800cfef
 800cfd4:	0800cfe5 	.word	0x0800cfe5
 800cfd8:	0800d02b 	.word	0x0800d02b
 800cfdc:	0800d003 	.word	0x0800d003
 800cfe0:	0800cff9 	.word	0x0800cff9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 f9da 	bl	800d3a0 <USBD_GetDescriptor>
      break;
 800cfec:	e022      	b.n	800d034 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800cfee:	6839      	ldr	r1, [r7, #0]
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 facf 	bl	800d594 <USBD_SetAddress>
      break;
 800cff6:	e01d      	b.n	800d034 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fb0e 	bl	800d61c <USBD_SetConfig>
      break;
 800d000:	e018      	b.n	800d034 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800d002:	6839      	ldr	r1, [r7, #0]
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 fb97 	bl	800d738 <USBD_GetConfig>
      break;
 800d00a:	e013      	b.n	800d034 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800d00c:	6839      	ldr	r1, [r7, #0]
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fbc7 	bl	800d7a2 <USBD_GetStatus>
      break;
 800d014:	e00e      	b.n	800d034 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 fbf5 	bl	800d808 <USBD_SetFeature>
      break;
 800d01e:	e009      	b.n	800d034 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fc04 	bl	800d830 <USBD_ClrFeature>
      break;
 800d028:	e004      	b.n	800d034 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 fc5c 	bl	800d8ea <USBD_CtlError>
      break;
 800d032:	bf00      	nop
    }
    break;
 800d034:	e004      	b.n	800d040 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800d036:	6839      	ldr	r1, [r7, #0]
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 fc56 	bl	800d8ea <USBD_CtlError>
    break;
 800d03e:	bf00      	nop
  }

  return ret;
 800d040:	7bfb      	ldrb	r3, [r7, #15]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop

0800d04c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d056:	2300      	movs	r3, #0
 800d058:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d062:	2b40      	cmp	r3, #64	; 0x40
 800d064:	d005      	beq.n	800d072 <USBD_StdItfReq+0x26>
 800d066:	2b40      	cmp	r3, #64	; 0x40
 800d068:	d82e      	bhi.n	800d0c8 <USBD_StdItfReq+0x7c>
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <USBD_StdItfReq+0x26>
 800d06e:	2b20      	cmp	r3, #32
 800d070:	d12a      	bne.n	800d0c8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d078:	3b01      	subs	r3, #1
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d81d      	bhi.n	800d0ba <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	889b      	ldrh	r3, [r3, #4]
 800d082:	b2db      	uxtb	r3, r3
 800d084:	2b01      	cmp	r3, #1
 800d086:	d813      	bhi.n	800d0b0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	4798      	blx	r3
 800d096:	4603      	mov	r3, r0
 800d098:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	88db      	ldrh	r3, [r3, #6]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d110      	bne.n	800d0c4 <USBD_StdItfReq+0x78>
 800d0a2:	7bfb      	ldrb	r3, [r7, #15]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d10d      	bne.n	800d0c4 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fce6 	bl	800da7a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d0ae:	e009      	b.n	800d0c4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800d0b0:	6839      	ldr	r1, [r7, #0]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 fc19 	bl	800d8ea <USBD_CtlError>
      break;
 800d0b8:	e004      	b.n	800d0c4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fc14 	bl	800d8ea <USBD_CtlError>
      break;
 800d0c2:	e000      	b.n	800d0c6 <USBD_StdItfReq+0x7a>
      break;
 800d0c4:	bf00      	nop
    }
    break;
 800d0c6:	e004      	b.n	800d0d2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800d0c8:	6839      	ldr	r1, [r7, #0]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 fc0d 	bl	800d8ea <USBD_CtlError>
    break;
 800d0d0:	bf00      	nop
  }

  return USBD_OK;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	889b      	ldrh	r3, [r3, #4]
 800d0ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0f8:	2b40      	cmp	r3, #64	; 0x40
 800d0fa:	d007      	beq.n	800d10c <USBD_StdEPReq+0x30>
 800d0fc:	2b40      	cmp	r3, #64	; 0x40
 800d0fe:	f200 8144 	bhi.w	800d38a <USBD_StdEPReq+0x2ae>
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00a      	beq.n	800d11c <USBD_StdEPReq+0x40>
 800d106:	2b20      	cmp	r3, #32
 800d108:	f040 813f 	bne.w	800d38a <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	4798      	blx	r3
    break;
 800d11a:	e13b      	b.n	800d394 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d124:	2b20      	cmp	r3, #32
 800d126:	d10a      	bne.n	800d13e <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d12e:	689b      	ldr	r3, [r3, #8]
 800d130:	6839      	ldr	r1, [r7, #0]
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	4798      	blx	r3
 800d136:	4603      	mov	r3, r0
 800d138:	73fb      	strb	r3, [r7, #15]

      return ret;
 800d13a:	7bfb      	ldrb	r3, [r7, #15]
 800d13c:	e12b      	b.n	800d396 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	785b      	ldrb	r3, [r3, #1]
 800d142:	2b03      	cmp	r3, #3
 800d144:	d007      	beq.n	800d156 <USBD_StdEPReq+0x7a>
 800d146:	2b03      	cmp	r3, #3
 800d148:	f300 8119 	bgt.w	800d37e <USBD_StdEPReq+0x2a2>
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d072      	beq.n	800d236 <USBD_StdEPReq+0x15a>
 800d150:	2b01      	cmp	r3, #1
 800d152:	d03a      	beq.n	800d1ca <USBD_StdEPReq+0xee>
 800d154:	e113      	b.n	800d37e <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d002      	beq.n	800d166 <USBD_StdEPReq+0x8a>
 800d160:	2b03      	cmp	r3, #3
 800d162:	d015      	beq.n	800d190 <USBD_StdEPReq+0xb4>
 800d164:	e02b      	b.n	800d1be <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d166:	7bbb      	ldrb	r3, [r7, #14]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00c      	beq.n	800d186 <USBD_StdEPReq+0xaa>
 800d16c:	7bbb      	ldrb	r3, [r7, #14]
 800d16e:	2b80      	cmp	r3, #128	; 0x80
 800d170:	d009      	beq.n	800d186 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d172:	7bbb      	ldrb	r3, [r7, #14]
 800d174:	4619      	mov	r1, r3
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f001 f878 	bl	800e26c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d17c:	2180      	movs	r1, #128	; 0x80
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f001 f874 	bl	800e26c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d184:	e020      	b.n	800d1c8 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800d186:	6839      	ldr	r1, [r7, #0]
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 fbae 	bl	800d8ea <USBD_CtlError>
        break;
 800d18e:	e01b      	b.n	800d1c8 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	885b      	ldrh	r3, [r3, #2]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d10e      	bne.n	800d1b6 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d198:	7bbb      	ldrb	r3, [r7, #14]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00b      	beq.n	800d1b6 <USBD_StdEPReq+0xda>
 800d19e:	7bbb      	ldrb	r3, [r7, #14]
 800d1a0:	2b80      	cmp	r3, #128	; 0x80
 800d1a2:	d008      	beq.n	800d1b6 <USBD_StdEPReq+0xda>
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	88db      	ldrh	r3, [r3, #6]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d104      	bne.n	800d1b6 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f001 f85b 	bl	800e26c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fc5f 	bl	800da7a <USBD_CtlSendStatus>

        break;
 800d1bc:	e004      	b.n	800d1c8 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 fb92 	bl	800d8ea <USBD_CtlError>
        break;
 800d1c6:	bf00      	nop
      }
      break;
 800d1c8:	e0de      	b.n	800d388 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	d002      	beq.n	800d1da <USBD_StdEPReq+0xfe>
 800d1d4:	2b03      	cmp	r3, #3
 800d1d6:	d015      	beq.n	800d204 <USBD_StdEPReq+0x128>
 800d1d8:	e026      	b.n	800d228 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00c      	beq.n	800d1fa <USBD_StdEPReq+0x11e>
 800d1e0:	7bbb      	ldrb	r3, [r7, #14]
 800d1e2:	2b80      	cmp	r3, #128	; 0x80
 800d1e4:	d009      	beq.n	800d1fa <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d1e6:	7bbb      	ldrb	r3, [r7, #14]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f001 f83e 	bl	800e26c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d1f0:	2180      	movs	r1, #128	; 0x80
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f001 f83a 	bl	800e26c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d1f8:	e01c      	b.n	800d234 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800d1fa:	6839      	ldr	r1, [r7, #0]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fb74 	bl	800d8ea <USBD_CtlError>
        break;
 800d202:	e017      	b.n	800d234 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	885b      	ldrh	r3, [r3, #2]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d112      	bne.n	800d232 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d20c:	7bbb      	ldrb	r3, [r7, #14]
 800d20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d212:	2b00      	cmp	r3, #0
 800d214:	d004      	beq.n	800d220 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800d216:	7bbb      	ldrb	r3, [r7, #14]
 800d218:	4619      	mov	r1, r3
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f001 f845 	bl	800e2aa <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 fc2a 	bl	800da7a <USBD_CtlSendStatus>
        }
        break;
 800d226:	e004      	b.n	800d232 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800d228:	6839      	ldr	r1, [r7, #0]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fb5d 	bl	800d8ea <USBD_CtlError>
        break;
 800d230:	e000      	b.n	800d234 <USBD_StdEPReq+0x158>
        break;
 800d232:	bf00      	nop
      }
      break;
 800d234:	e0a8      	b.n	800d388 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d23c:	2b02      	cmp	r3, #2
 800d23e:	d002      	beq.n	800d246 <USBD_StdEPReq+0x16a>
 800d240:	2b03      	cmp	r3, #3
 800d242:	d031      	beq.n	800d2a8 <USBD_StdEPReq+0x1cc>
 800d244:	e095      	b.n	800d372 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d246:	7bbb      	ldrb	r3, [r7, #14]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d007      	beq.n	800d25c <USBD_StdEPReq+0x180>
 800d24c:	7bbb      	ldrb	r3, [r7, #14]
 800d24e:	2b80      	cmp	r3, #128	; 0x80
 800d250:	d004      	beq.n	800d25c <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fb48 	bl	800d8ea <USBD_CtlError>
          break;
 800d25a:	e08f      	b.n	800d37c <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d25c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d260:	2b00      	cmp	r3, #0
 800d262:	da0b      	bge.n	800d27c <USBD_StdEPReq+0x1a0>
 800d264:	7bbb      	ldrb	r3, [r7, #14]
 800d266:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d26a:	4613      	mov	r3, r2
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	4413      	add	r3, r2
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	3310      	adds	r3, #16
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	4413      	add	r3, r2
 800d278:	3304      	adds	r3, #4
 800d27a:	e00a      	b.n	800d292 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d27c:	7bbb      	ldrb	r3, [r7, #14]
 800d27e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d282:	4613      	mov	r3, r2
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4413      	add	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	4413      	add	r3, r2
 800d292:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	2200      	movs	r2, #0
 800d298:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	2202      	movs	r2, #2
 800d29e:	4619      	mov	r1, r3
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fb8c 	bl	800d9be <USBD_CtlSendData>
          break;
 800d2a6:	e069      	b.n	800d37c <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800d2a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	da11      	bge.n	800d2d4 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d2b0:	7bbb      	ldrb	r3, [r7, #14]
 800d2b2:	f003 020f 	and.w	r2, r3, #15
 800d2b6:	6879      	ldr	r1, [r7, #4]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	4413      	add	r3, r2
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	440b      	add	r3, r1
 800d2c2:	3318      	adds	r3, #24
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d117      	bne.n	800d2fa <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 fb0c 	bl	800d8ea <USBD_CtlError>
            break;
 800d2d2:	e053      	b.n	800d37c <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d2d4:	7bbb      	ldrb	r3, [r7, #14]
 800d2d6:	f003 020f 	and.w	r2, r3, #15
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	4613      	mov	r3, r2
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	4413      	add	r3, r2
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	440b      	add	r3, r1
 800d2e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d104      	bne.n	800d2fa <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800d2f0:	6839      	ldr	r1, [r7, #0]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 faf9 	bl	800d8ea <USBD_CtlError>
            break;
 800d2f8:	e040      	b.n	800d37c <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d2fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	da0b      	bge.n	800d31a <USBD_StdEPReq+0x23e>
 800d302:	7bbb      	ldrb	r3, [r7, #14]
 800d304:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d308:	4613      	mov	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	4413      	add	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	3310      	adds	r3, #16
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	4413      	add	r3, r2
 800d316:	3304      	adds	r3, #4
 800d318:	e00a      	b.n	800d330 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d31a:	7bbb      	ldrb	r3, [r7, #14]
 800d31c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d320:	4613      	mov	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	4413      	add	r3, r2
 800d330:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d332:	7bbb      	ldrb	r3, [r7, #14]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d002      	beq.n	800d33e <USBD_StdEPReq+0x262>
 800d338:	7bbb      	ldrb	r3, [r7, #14]
 800d33a:	2b80      	cmp	r3, #128	; 0x80
 800d33c:	d103      	bne.n	800d346 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	2200      	movs	r2, #0
 800d342:	601a      	str	r2, [r3, #0]
 800d344:	e00e      	b.n	800d364 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800d346:	7bbb      	ldrb	r3, [r7, #14]
 800d348:	4619      	mov	r1, r3
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 ffcc 	bl	800e2e8 <USBD_LL_IsStallEP>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	2201      	movs	r2, #1
 800d35a:	601a      	str	r2, [r3, #0]
 800d35c:	e002      	b.n	800d364 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	2200      	movs	r2, #0
 800d362:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	2202      	movs	r2, #2
 800d368:	4619      	mov	r1, r3
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fb27 	bl	800d9be <USBD_CtlSendData>
          break;
 800d370:	e004      	b.n	800d37c <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800d372:	6839      	ldr	r1, [r7, #0]
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 fab8 	bl	800d8ea <USBD_CtlError>
        break;
 800d37a:	bf00      	nop
      }
      break;
 800d37c:	e004      	b.n	800d388 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 fab2 	bl	800d8ea <USBD_CtlError>
      break;
 800d386:	bf00      	nop
    }
    break;
 800d388:	e004      	b.n	800d394 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800d38a:	6839      	ldr	r1, [r7, #0]
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 faac 	bl	800d8ea <USBD_CtlError>
    break;
 800d392:	bf00      	nop
  }

  return ret;
 800d394:	7bfb      	ldrb	r3, [r7, #15]
}
 800d396:	4618      	mov	r0, r3
 800d398:	3710      	adds	r7, #16
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
	...

0800d3a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	885b      	ldrh	r3, [r3, #2]
 800d3ae:	0a1b      	lsrs	r3, r3, #8
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	3b01      	subs	r3, #1
 800d3b4:	2b06      	cmp	r3, #6
 800d3b6:	f200 80c9 	bhi.w	800d54c <USBD_GetDescriptor+0x1ac>
 800d3ba:	a201      	add	r2, pc, #4	; (adr r2, 800d3c0 <USBD_GetDescriptor+0x20>)
 800d3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c0:	0800d3dd 	.word	0x0800d3dd
 800d3c4:	0800d3f5 	.word	0x0800d3f5
 800d3c8:	0800d435 	.word	0x0800d435
 800d3cc:	0800d54d 	.word	0x0800d54d
 800d3d0:	0800d54d 	.word	0x0800d54d
 800d3d4:	0800d4f9 	.word	0x0800d4f9
 800d3d8:	0800d51f 	.word	0x0800d51f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	7c12      	ldrb	r2, [r2, #16]
 800d3e8:	f107 010a 	add.w	r1, r7, #10
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	4798      	blx	r3
 800d3f0:	60f8      	str	r0, [r7, #12]
    break;
 800d3f2:	e0b0      	b.n	800d556 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7c1b      	ldrb	r3, [r3, #16]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10d      	bne.n	800d418 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d404:	f107 020a 	add.w	r2, r7, #10
 800d408:	4610      	mov	r0, r2
 800d40a:	4798      	blx	r3
 800d40c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	3301      	adds	r3, #1
 800d412:	2202      	movs	r2, #2
 800d414:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d416:	e09e      	b.n	800d556 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d420:	f107 020a 	add.w	r2, r7, #10
 800d424:	4610      	mov	r0, r2
 800d426:	4798      	blx	r3
 800d428:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	3301      	adds	r3, #1
 800d42e:	2202      	movs	r2, #2
 800d430:	701a      	strb	r2, [r3, #0]
    break;
 800d432:	e090      	b.n	800d556 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	885b      	ldrh	r3, [r3, #2]
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	2b05      	cmp	r3, #5
 800d43c:	d856      	bhi.n	800d4ec <USBD_GetDescriptor+0x14c>
 800d43e:	a201      	add	r2, pc, #4	; (adr r2, 800d444 <USBD_GetDescriptor+0xa4>)
 800d440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d444:	0800d45d 	.word	0x0800d45d
 800d448:	0800d475 	.word	0x0800d475
 800d44c:	0800d48d 	.word	0x0800d48d
 800d450:	0800d4a5 	.word	0x0800d4a5
 800d454:	0800d4bd 	.word	0x0800d4bd
 800d458:	0800d4d5 	.word	0x0800d4d5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	7c12      	ldrb	r2, [r2, #16]
 800d468:	f107 010a 	add.w	r1, r7, #10
 800d46c:	4610      	mov	r0, r2
 800d46e:	4798      	blx	r3
 800d470:	60f8      	str	r0, [r7, #12]
      break;
 800d472:	e040      	b.n	800d4f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	7c12      	ldrb	r2, [r2, #16]
 800d480:	f107 010a 	add.w	r1, r7, #10
 800d484:	4610      	mov	r0, r2
 800d486:	4798      	blx	r3
 800d488:	60f8      	str	r0, [r7, #12]
      break;
 800d48a:	e034      	b.n	800d4f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	7c12      	ldrb	r2, [r2, #16]
 800d498:	f107 010a 	add.w	r1, r7, #10
 800d49c:	4610      	mov	r0, r2
 800d49e:	4798      	blx	r3
 800d4a0:	60f8      	str	r0, [r7, #12]
      break;
 800d4a2:	e028      	b.n	800d4f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d4aa:	691b      	ldr	r3, [r3, #16]
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	7c12      	ldrb	r2, [r2, #16]
 800d4b0:	f107 010a 	add.w	r1, r7, #10
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	4798      	blx	r3
 800d4b8:	60f8      	str	r0, [r7, #12]
      break;
 800d4ba:	e01c      	b.n	800d4f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d4c2:	695b      	ldr	r3, [r3, #20]
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	7c12      	ldrb	r2, [r2, #16]
 800d4c8:	f107 010a 	add.w	r1, r7, #10
 800d4cc:	4610      	mov	r0, r2
 800d4ce:	4798      	blx	r3
 800d4d0:	60f8      	str	r0, [r7, #12]
      break;
 800d4d2:	e010      	b.n	800d4f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d4da:	699b      	ldr	r3, [r3, #24]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	7c12      	ldrb	r2, [r2, #16]
 800d4e0:	f107 010a 	add.w	r1, r7, #10
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	4798      	blx	r3
 800d4e8:	60f8      	str	r0, [r7, #12]
      break;
 800d4ea:	e004      	b.n	800d4f6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f9fb 	bl	800d8ea <USBD_CtlError>
      return;
 800d4f4:	e04b      	b.n	800d58e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800d4f6:	e02e      	b.n	800d556 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	7c1b      	ldrb	r3, [r3, #16]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d109      	bne.n	800d514 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d508:	f107 020a 	add.w	r2, r7, #10
 800d50c:	4610      	mov	r0, r2
 800d50e:	4798      	blx	r3
 800d510:	60f8      	str	r0, [r7, #12]
      break;
 800d512:	e020      	b.n	800d556 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d514:	6839      	ldr	r1, [r7, #0]
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 f9e7 	bl	800d8ea <USBD_CtlError>
      return;
 800d51c:	e037      	b.n	800d58e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	7c1b      	ldrb	r3, [r3, #16]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d10d      	bne.n	800d542 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d52e:	f107 020a 	add.w	r2, r7, #10
 800d532:	4610      	mov	r0, r2
 800d534:	4798      	blx	r3
 800d536:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	3301      	adds	r3, #1
 800d53c:	2207      	movs	r2, #7
 800d53e:	701a      	strb	r2, [r3, #0]
      break;
 800d540:	e009      	b.n	800d556 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d542:	6839      	ldr	r1, [r7, #0]
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 f9d0 	bl	800d8ea <USBD_CtlError>
      return;
 800d54a:	e020      	b.n	800d58e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 f9cb 	bl	800d8ea <USBD_CtlError>
    return;
 800d554:	e01b      	b.n	800d58e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800d556:	897b      	ldrh	r3, [r7, #10]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d011      	beq.n	800d580 <USBD_GetDescriptor+0x1e0>
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	88db      	ldrh	r3, [r3, #6]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d00d      	beq.n	800d580 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	88da      	ldrh	r2, [r3, #6]
 800d568:	897b      	ldrh	r3, [r7, #10]
 800d56a:	4293      	cmp	r3, r2
 800d56c:	bf28      	it	cs
 800d56e:	4613      	movcs	r3, r2
 800d570:	b29b      	uxth	r3, r3
 800d572:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800d574:	897b      	ldrh	r3, [r7, #10]
 800d576:	461a      	mov	r2, r3
 800d578:	68f9      	ldr	r1, [r7, #12]
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 fa1f 	bl	800d9be <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	88db      	ldrh	r3, [r3, #6]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d102      	bne.n	800d58e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 fa76 	bl	800da7a <USBD_CtlSendStatus>
  }
}
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	889b      	ldrh	r3, [r3, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d130      	bne.n	800d608 <USBD_SetAddress+0x74>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	88db      	ldrh	r3, [r3, #6]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d12c      	bne.n	800d608 <USBD_SetAddress+0x74>
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	885b      	ldrh	r3, [r3, #2]
 800d5b2:	2b7f      	cmp	r3, #127	; 0x7f
 800d5b4:	d828      	bhi.n	800d608 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	885b      	ldrh	r3, [r3, #2]
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d5c8:	2b03      	cmp	r3, #3
 800d5ca:	d104      	bne.n	800d5d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f98b 	bl	800d8ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5d4:	e01d      	b.n	800d612 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	7bfa      	ldrb	r2, [r7, #15]
 800d5da:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d5de:	7bfb      	ldrb	r3, [r7, #15]
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 feac 	bl	800e340 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fa46 	bl	800da7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d004      	beq.n	800d5fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5fc:	e009      	b.n	800d612 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2201      	movs	r2, #1
 800d602:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d606:	e004      	b.n	800d612 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d608:	6839      	ldr	r1, [r7, #0]
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 f96d 	bl	800d8ea <USBD_CtlError>
  }
}
 800d610:	bf00      	nop
 800d612:	bf00      	nop
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
	...

0800d61c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	885b      	ldrh	r3, [r3, #2]
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	4b41      	ldr	r3, [pc, #260]	; (800d734 <USBD_SetConfig+0x118>)
 800d62e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d630:	4b40      	ldr	r3, [pc, #256]	; (800d734 <USBD_SetConfig+0x118>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	2b01      	cmp	r3, #1
 800d636:	d904      	bls.n	800d642 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d638:	6839      	ldr	r1, [r7, #0]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 f955 	bl	800d8ea <USBD_CtlError>
 800d640:	e075      	b.n	800d72e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d002      	beq.n	800d652 <USBD_SetConfig+0x36>
 800d64c:	2b03      	cmp	r3, #3
 800d64e:	d023      	beq.n	800d698 <USBD_SetConfig+0x7c>
 800d650:	e062      	b.n	800d718 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800d652:	4b38      	ldr	r3, [pc, #224]	; (800d734 <USBD_SetConfig+0x118>)
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d01a      	beq.n	800d690 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800d65a:	4b36      	ldr	r3, [pc, #216]	; (800d734 <USBD_SetConfig+0x118>)
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	461a      	mov	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2203      	movs	r2, #3
 800d668:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d66c:	4b31      	ldr	r3, [pc, #196]	; (800d734 <USBD_SetConfig+0x118>)
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	4619      	mov	r1, r3
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7ff fa5d 	bl	800cb32 <USBD_SetClassConfig>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b02      	cmp	r3, #2
 800d67c:	d104      	bne.n	800d688 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800d67e:	6839      	ldr	r1, [r7, #0]
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f932 	bl	800d8ea <USBD_CtlError>
          return;
 800d686:	e052      	b.n	800d72e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 f9f6 	bl	800da7a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d68e:	e04e      	b.n	800d72e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 f9f2 	bl	800da7a <USBD_CtlSendStatus>
      break;
 800d696:	e04a      	b.n	800d72e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d698:	4b26      	ldr	r3, [pc, #152]	; (800d734 <USBD_SetConfig+0x118>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d112      	bne.n	800d6c6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2202      	movs	r2, #2
 800d6a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800d6a8:	4b22      	ldr	r3, [pc, #136]	; (800d734 <USBD_SetConfig+0x118>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800d6b2:	4b20      	ldr	r3, [pc, #128]	; (800d734 <USBD_SetConfig+0x118>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f7ff fa59 	bl	800cb70 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f9db 	bl	800da7a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d6c4:	e033      	b.n	800d72e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800d6c6:	4b1b      	ldr	r3, [pc, #108]	; (800d734 <USBD_SetConfig+0x118>)
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d01d      	beq.n	800d710 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7ff fa47 	bl	800cb70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d6e2:	4b14      	ldr	r3, [pc, #80]	; (800d734 <USBD_SetConfig+0x118>)
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d6ec:	4b11      	ldr	r3, [pc, #68]	; (800d734 <USBD_SetConfig+0x118>)
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7ff fa1d 	bl	800cb32 <USBD_SetClassConfig>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d104      	bne.n	800d708 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800d6fe:	6839      	ldr	r1, [r7, #0]
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 f8f2 	bl	800d8ea <USBD_CtlError>
          return;
 800d706:	e012      	b.n	800d72e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 f9b6 	bl	800da7a <USBD_CtlSendStatus>
      break;
 800d70e:	e00e      	b.n	800d72e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f9b2 	bl	800da7a <USBD_CtlSendStatus>
      break;
 800d716:	e00a      	b.n	800d72e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800d718:	6839      	ldr	r1, [r7, #0]
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 f8e5 	bl	800d8ea <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800d720:	4b04      	ldr	r3, [pc, #16]	; (800d734 <USBD_SetConfig+0x118>)
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	4619      	mov	r1, r3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f7ff fa22 	bl	800cb70 <USBD_ClrClassConfig>
      break;
 800d72c:	bf00      	nop
    }
  }
}
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	20000e08 	.word	0x20000e08

0800d738 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	88db      	ldrh	r3, [r3, #6]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d004      	beq.n	800d754 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800d74a:	6839      	ldr	r1, [r7, #0]
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 f8cc 	bl	800d8ea <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d752:	e022      	b.n	800d79a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d75a:	2b02      	cmp	r3, #2
 800d75c:	dc02      	bgt.n	800d764 <USBD_GetConfig+0x2c>
 800d75e:	2b00      	cmp	r3, #0
 800d760:	dc03      	bgt.n	800d76a <USBD_GetConfig+0x32>
 800d762:	e015      	b.n	800d790 <USBD_GetConfig+0x58>
 800d764:	2b03      	cmp	r3, #3
 800d766:	d00b      	beq.n	800d780 <USBD_GetConfig+0x48>
 800d768:	e012      	b.n	800d790 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	3308      	adds	r3, #8
 800d774:	2201      	movs	r2, #1
 800d776:	4619      	mov	r1, r3
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f000 f920 	bl	800d9be <USBD_CtlSendData>
      break;
 800d77e:	e00c      	b.n	800d79a <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	3304      	adds	r3, #4
 800d784:	2201      	movs	r2, #1
 800d786:	4619      	mov	r1, r3
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 f918 	bl	800d9be <USBD_CtlSendData>
      break;
 800d78e:	e004      	b.n	800d79a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800d790:	6839      	ldr	r1, [r7, #0]
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 f8a9 	bl	800d8ea <USBD_CtlError>
      break;
 800d798:	bf00      	nop
}
 800d79a:	bf00      	nop
 800d79c:	3708      	adds	r7, #8
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b082      	sub	sp, #8
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d7b2:	3b01      	subs	r3, #1
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	d81e      	bhi.n	800d7f6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	88db      	ldrh	r3, [r3, #6]
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	d004      	beq.n	800d7ca <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d7c0:	6839      	ldr	r1, [r7, #0]
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 f891 	bl	800d8ea <USBD_CtlError>
      break;
 800d7c8:	e01a      	b.n	800d800 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d005      	beq.n	800d7e6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	68db      	ldr	r3, [r3, #12]
 800d7de:	f043 0202 	orr.w	r2, r3, #2
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	330c      	adds	r3, #12
 800d7ea:	2202      	movs	r2, #2
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 f8e5 	bl	800d9be <USBD_CtlSendData>
    break;
 800d7f4:	e004      	b.n	800d800 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 f876 	bl	800d8ea <USBD_CtlError>
    break;
 800d7fe:	bf00      	nop
  }
}
 800d800:	bf00      	nop
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	885b      	ldrh	r3, [r3, #2]
 800d816:	2b01      	cmp	r3, #1
 800d818:	d106      	bne.n	800d828 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2201      	movs	r2, #1
 800d81e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 f929 	bl	800da7a <USBD_CtlSendStatus>
  }

}
 800d828:	bf00      	nop
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d840:	3b01      	subs	r3, #1
 800d842:	2b02      	cmp	r3, #2
 800d844:	d80b      	bhi.n	800d85e <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	885b      	ldrh	r3, [r3, #2]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d10c      	bne.n	800d868 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 f90f 	bl	800da7a <USBD_CtlSendStatus>
    }
    break;
 800d85c:	e004      	b.n	800d868 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800d85e:	6839      	ldr	r1, [r7, #0]
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 f842 	bl	800d8ea <USBD_CtlError>
    break;
 800d866:	e000      	b.n	800d86a <USBD_ClrFeature+0x3a>
    break;
 800d868:	bf00      	nop
  }
}
 800d86a:	bf00      	nop
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d872:	b480      	push	{r7}
 800d874:	b083      	sub	sp, #12
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
 800d87a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	781a      	ldrb	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	785a      	ldrb	r2, [r3, #1]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	3302      	adds	r3, #2
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	b29a      	uxth	r2, r3
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	3303      	adds	r3, #3
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	021b      	lsls	r3, r3, #8
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	4413      	add	r3, r2
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	3305      	adds	r3, #5
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	021b      	lsls	r3, r3, #8
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	4413      	add	r3, r2
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	3306      	adds	r3, #6
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	3307      	adds	r3, #7
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	021b      	lsls	r3, r3, #8
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	4413      	add	r3, r2
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	80da      	strh	r2, [r3, #6]

}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bc80      	pop	{r7}
 800d8e8:	4770      	bx	lr

0800d8ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	b082      	sub	sp, #8
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
 800d8f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d8f4:	2180      	movs	r1, #128	; 0x80
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 fcb8 	bl	800e26c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 fcb4 	bl	800e26c <USBD_LL_StallEP>
}
 800d904:	bf00      	nop
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d918:	2300      	movs	r3, #0
 800d91a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d032      	beq.n	800d988 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f000 f834 	bl	800d990 <USBD_GetLen>
 800d928:	4603      	mov	r3, r0
 800d92a:	3301      	adds	r3, #1
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	005b      	lsls	r3, r3, #1
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d936:	7dfb      	ldrb	r3, [r7, #23]
 800d938:	1c5a      	adds	r2, r3, #1
 800d93a:	75fa      	strb	r2, [r7, #23]
 800d93c:	461a      	mov	r2, r3
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	4413      	add	r3, r2
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	7812      	ldrb	r2, [r2, #0]
 800d946:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d948:	7dfb      	ldrb	r3, [r7, #23]
 800d94a:	1c5a      	adds	r2, r3, #1
 800d94c:	75fa      	strb	r2, [r7, #23]
 800d94e:	461a      	mov	r2, r3
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	4413      	add	r3, r2
 800d954:	2203      	movs	r2, #3
 800d956:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d958:	e012      	b.n	800d980 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	1c5a      	adds	r2, r3, #1
 800d95e:	60fa      	str	r2, [r7, #12]
 800d960:	7dfa      	ldrb	r2, [r7, #23]
 800d962:	1c51      	adds	r1, r2, #1
 800d964:	75f9      	strb	r1, [r7, #23]
 800d966:	4611      	mov	r1, r2
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	440a      	add	r2, r1
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d970:	7dfb      	ldrb	r3, [r7, #23]
 800d972:	1c5a      	adds	r2, r3, #1
 800d974:	75fa      	strb	r2, [r7, #23]
 800d976:	461a      	mov	r2, r3
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	4413      	add	r3, r2
 800d97c:	2200      	movs	r2, #0
 800d97e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1e8      	bne.n	800d95a <USBD_GetString+0x4e>
    }
  }
}
 800d988:	bf00      	nop
 800d98a:	3718      	adds	r7, #24
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800d998:	2300      	movs	r3, #0
 800d99a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800d99c:	e005      	b.n	800d9aa <USBD_GetLen+0x1a>
    {
        len++;
 800d99e:	7bfb      	ldrb	r3, [r7, #15]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d1f5      	bne.n	800d99e <USBD_GetLen+0xe>
    }

    return len;
 800d9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3714      	adds	r7, #20
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bc80      	pop	{r7}
 800d9bc:	4770      	bx	lr

0800d9be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b084      	sub	sp, #16
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	60f8      	str	r0, [r7, #12]
 800d9c6:	60b9      	str	r1, [r7, #8]
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2202      	movs	r2, #2
 800d9d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800d9d4:	88fa      	ldrh	r2, [r7, #6]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d9da:	88fa      	ldrh	r2, [r7, #6]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d9e0:	88fb      	ldrh	r3, [r7, #6]
 800d9e2:	68ba      	ldr	r2, [r7, #8]
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f000 fcc9 	bl	800e37e <USBD_LL_Transmit>

  return USBD_OK;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b084      	sub	sp, #16
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	60f8      	str	r0, [r7, #12]
 800d9fe:	60b9      	str	r1, [r7, #8]
 800da00:	4613      	mov	r3, r2
 800da02:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800da04:	88fb      	ldrh	r3, [r7, #6]
 800da06:	68ba      	ldr	r2, [r7, #8]
 800da08:	2100      	movs	r1, #0
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f000 fcb7 	bl	800e37e <USBD_LL_Transmit>

  return USBD_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	60f8      	str	r0, [r7, #12]
 800da22:	60b9      	str	r1, [r7, #8]
 800da24:	4613      	mov	r3, r2
 800da26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2203      	movs	r2, #3
 800da2c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800da30:	88fa      	ldrh	r2, [r7, #6]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800da38:	88fa      	ldrh	r2, [r7, #6]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800da40:	88fb      	ldrh	r3, [r7, #6]
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	2100      	movs	r1, #0
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f000 fcbc 	bl	800e3c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b084      	sub	sp, #16
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	60f8      	str	r0, [r7, #12]
 800da5e:	60b9      	str	r1, [r7, #8]
 800da60:	4613      	mov	r3, r2
 800da62:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da64:	88fb      	ldrh	r3, [r7, #6]
 800da66:	68ba      	ldr	r2, [r7, #8]
 800da68:	2100      	movs	r1, #0
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f000 fcaa 	bl	800e3c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b082      	sub	sp, #8
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2204      	movs	r2, #4
 800da86:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800da8a:	2300      	movs	r3, #0
 800da8c:	2200      	movs	r2, #0
 800da8e:	2100      	movs	r1, #0
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 fc74 	bl	800e37e <USBD_LL_Transmit>

  return USBD_OK;
 800da96:	2300      	movs	r3, #0
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3708      	adds	r7, #8
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2205      	movs	r2, #5
 800daac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800dab0:	2300      	movs	r3, #0
 800dab2:	2200      	movs	r2, #0
 800dab4:	2100      	movs	r1, #0
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 fc84 	bl	800e3c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dabc:	2300      	movs	r3, #0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
	...

0800dac8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dacc:	2200      	movs	r2, #0
 800dace:	4912      	ldr	r1, [pc, #72]	; (800db18 <MX_USB_DEVICE_Init+0x50>)
 800dad0:	4812      	ldr	r0, [pc, #72]	; (800db1c <MX_USB_DEVICE_Init+0x54>)
 800dad2:	f7fe ffd4 	bl	800ca7e <USBD_Init>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dadc:	f7f6 fa2c 	bl	8003f38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dae0:	490f      	ldr	r1, [pc, #60]	; (800db20 <MX_USB_DEVICE_Init+0x58>)
 800dae2:	480e      	ldr	r0, [pc, #56]	; (800db1c <MX_USB_DEVICE_Init+0x54>)
 800dae4:	f7fe fff6 	bl	800cad4 <USBD_RegisterClass>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800daee:	f7f6 fa23 	bl	8003f38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800daf2:	490c      	ldr	r1, [pc, #48]	; (800db24 <MX_USB_DEVICE_Init+0x5c>)
 800daf4:	4809      	ldr	r0, [pc, #36]	; (800db1c <MX_USB_DEVICE_Init+0x54>)
 800daf6:	f7fe ff27 	bl	800c948 <USBD_CDC_RegisterInterface>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d001      	beq.n	800db04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db00:	f7f6 fa1a 	bl	8003f38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db04:	4805      	ldr	r0, [pc, #20]	; (800db1c <MX_USB_DEVICE_Init+0x54>)
 800db06:	f7fe fffe 	bl	800cb06 <USBD_Start>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800db10:	f7f6 fa12 	bl	8003f38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db14:	bf00      	nop
 800db16:	bd80      	pop	{r7, pc}
 800db18:	2000086c 	.word	0x2000086c
 800db1c:	20000e0c 	.word	0x20000e0c
 800db20:	20000758 	.word	0x20000758
 800db24:	2000085c 	.word	0x2000085c

0800db28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db2c:	2200      	movs	r2, #0
 800db2e:	4905      	ldr	r1, [pc, #20]	; (800db44 <CDC_Init_FS+0x1c>)
 800db30:	4805      	ldr	r0, [pc, #20]	; (800db48 <CDC_Init_FS+0x20>)
 800db32:	f7fe ff1f 	bl	800c974 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db36:	4905      	ldr	r1, [pc, #20]	; (800db4c <CDC_Init_FS+0x24>)
 800db38:	4803      	ldr	r0, [pc, #12]	; (800db48 <CDC_Init_FS+0x20>)
 800db3a:	f7fe ff34 	bl	800c9a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800db40:	4618      	mov	r0, r3
 800db42:	bd80      	pop	{r7, pc}
 800db44:	20001128 	.word	0x20001128
 800db48:	20000e0c 	.word	0x20000e0c
 800db4c:	200010a8 	.word	0x200010a8

0800db50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800db50:	b480      	push	{r7}
 800db52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800db54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800db56:	4618      	mov	r0, r3
 800db58:	46bd      	mov	sp, r7
 800db5a:	bc80      	pop	{r7}
 800db5c:	4770      	bx	lr
	...

0800db60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	4603      	mov	r3, r0
 800db68:	6039      	str	r1, [r7, #0]
 800db6a:	71fb      	strb	r3, [r7, #7]
 800db6c:	4613      	mov	r3, r2
 800db6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800db70:	79fb      	ldrb	r3, [r7, #7]
 800db72:	2b23      	cmp	r3, #35	; 0x23
 800db74:	d866      	bhi.n	800dc44 <CDC_Control_FS+0xe4>
 800db76:	a201      	add	r2, pc, #4	; (adr r2, 800db7c <CDC_Control_FS+0x1c>)
 800db78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7c:	0800dc45 	.word	0x0800dc45
 800db80:	0800dc45 	.word	0x0800dc45
 800db84:	0800dc45 	.word	0x0800dc45
 800db88:	0800dc45 	.word	0x0800dc45
 800db8c:	0800dc45 	.word	0x0800dc45
 800db90:	0800dc45 	.word	0x0800dc45
 800db94:	0800dc45 	.word	0x0800dc45
 800db98:	0800dc45 	.word	0x0800dc45
 800db9c:	0800dc45 	.word	0x0800dc45
 800dba0:	0800dc45 	.word	0x0800dc45
 800dba4:	0800dc45 	.word	0x0800dc45
 800dba8:	0800dc45 	.word	0x0800dc45
 800dbac:	0800dc45 	.word	0x0800dc45
 800dbb0:	0800dc45 	.word	0x0800dc45
 800dbb4:	0800dc45 	.word	0x0800dc45
 800dbb8:	0800dc45 	.word	0x0800dc45
 800dbbc:	0800dc45 	.word	0x0800dc45
 800dbc0:	0800dc45 	.word	0x0800dc45
 800dbc4:	0800dc45 	.word	0x0800dc45
 800dbc8:	0800dc45 	.word	0x0800dc45
 800dbcc:	0800dc45 	.word	0x0800dc45
 800dbd0:	0800dc45 	.word	0x0800dc45
 800dbd4:	0800dc45 	.word	0x0800dc45
 800dbd8:	0800dc45 	.word	0x0800dc45
 800dbdc:	0800dc45 	.word	0x0800dc45
 800dbe0:	0800dc45 	.word	0x0800dc45
 800dbe4:	0800dc45 	.word	0x0800dc45
 800dbe8:	0800dc45 	.word	0x0800dc45
 800dbec:	0800dc45 	.word	0x0800dc45
 800dbf0:	0800dc45 	.word	0x0800dc45
 800dbf4:	0800dc45 	.word	0x0800dc45
 800dbf8:	0800dc45 	.word	0x0800dc45
 800dbfc:	0800dc45 	.word	0x0800dc45
 800dc00:	0800dc0d 	.word	0x0800dc0d
 800dc04:	0800dc45 	.word	0x0800dc45
 800dc08:	0800dc45 	.word	0x0800dc45
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	2220      	movs	r2, #32
 800dc10:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	3301      	adds	r3, #1
 800dc16:	22c2      	movs	r2, #194	; 0xc2
 800dc18:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	3302      	adds	r3, #2
 800dc1e:	2201      	movs	r2, #1
 800dc20:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	3303      	adds	r3, #3
 800dc26:	2200      	movs	r2, #0
 800dc28:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	2200      	movs	r2, #0
 800dc30:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	3305      	adds	r3, #5
 800dc36:	2200      	movs	r2, #0
 800dc38:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	3306      	adds	r3, #6
 800dc3e:	2208      	movs	r2, #8
 800dc40:	701a      	strb	r2, [r3, #0]
    break;
 800dc42:	e000      	b.n	800dc46 <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc44:	bf00      	nop
  }

  return (USBD_OK);
 800dc46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bc80      	pop	{r7}
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop

0800dc54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800dc62:	e018      	b.n	800dc96 <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	4413      	add	r3, r2
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	2b0a      	cmp	r3, #10
 800dc6e:	d005      	beq.n	800dc7c <CDC_Receive_FS+0x28>
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	4413      	add	r3, r2
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b0d      	cmp	r3, #13
 800dc7a:	d102      	bne.n	800dc82 <CDC_Receive_FS+0x2e>
 800dc7c:	4b12      	ldr	r3, [pc, #72]	; (800dcc8 <CDC_Receive_FS+0x74>)
 800dc7e:	2201      	movs	r2, #1
 800dc80:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	4413      	add	r3, r2
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7f6 f93c 	bl	8003f08 <Write_to_circ_buffer>
	  i++;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	3301      	adds	r3, #1
 800dc94:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	68fa      	ldr	r2, [r7, #12]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d3e1      	bcc.n	800dc64 <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	4619      	mov	r1, r3
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 f811 	bl	800dcd0 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dcae:	6879      	ldr	r1, [r7, #4]
 800dcb0:	4806      	ldr	r0, [pc, #24]	; (800dccc <CDC_Receive_FS+0x78>)
 800dcb2:	f7fe fe78 	bl	800c9a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dcb6:	4805      	ldr	r0, [pc, #20]	; (800dccc <CDC_Receive_FS+0x78>)
 800dcb8:	f7fe feb7 	bl	800ca2a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dcbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	20000ba0 	.word	0x20000ba0
 800dccc:	20000e0c 	.word	0x20000e0c

0800dcd0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	460b      	mov	r3, r1
 800dcda:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dce0:	4b0d      	ldr	r3, [pc, #52]	; (800dd18 <CDC_Transmit_FS+0x48>)
 800dce2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dce6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d001      	beq.n	800dcf6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	e00b      	b.n	800dd0e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dcf6:	887b      	ldrh	r3, [r7, #2]
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	6879      	ldr	r1, [r7, #4]
 800dcfc:	4806      	ldr	r0, [pc, #24]	; (800dd18 <CDC_Transmit_FS+0x48>)
 800dcfe:	f7fe fe39 	bl	800c974 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dd02:	4805      	ldr	r0, [pc, #20]	; (800dd18 <CDC_Transmit_FS+0x48>)
 800dd04:	f7fe fe62 	bl	800c9cc <USBD_CDC_TransmitPacket>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	20000e0c 	.word	0x20000e0c

0800dd1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2212      	movs	r2, #18
 800dd2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd2e:	4b03      	ldr	r3, [pc, #12]	; (800dd3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bc80      	pop	{r7}
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	20000888 	.word	0x20000888

0800dd40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4603      	mov	r3, r0
 800dd48:	6039      	str	r1, [r7, #0]
 800dd4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	2204      	movs	r2, #4
 800dd50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd52:	4b03      	ldr	r3, [pc, #12]	; (800dd60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bc80      	pop	{r7}
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	2000089c 	.word	0x2000089c

0800dd64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	6039      	str	r1, [r7, #0]
 800dd6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd70:	79fb      	ldrb	r3, [r7, #7]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d105      	bne.n	800dd82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	4907      	ldr	r1, [pc, #28]	; (800dd98 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd7a:	4808      	ldr	r0, [pc, #32]	; (800dd9c <USBD_FS_ProductStrDescriptor+0x38>)
 800dd7c:	f7ff fdc6 	bl	800d90c <USBD_GetString>
 800dd80:	e004      	b.n	800dd8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	4904      	ldr	r1, [pc, #16]	; (800dd98 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd86:	4805      	ldr	r0, [pc, #20]	; (800dd9c <USBD_FS_ProductStrDescriptor+0x38>)
 800dd88:	f7ff fdc0 	bl	800d90c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd8c:	4b02      	ldr	r3, [pc, #8]	; (800dd98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20001228 	.word	0x20001228
 800dd9c:	08012be4 	.word	0x08012be4

0800dda0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	4603      	mov	r3, r0
 800dda8:	6039      	str	r1, [r7, #0]
 800ddaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ddac:	683a      	ldr	r2, [r7, #0]
 800ddae:	4904      	ldr	r1, [pc, #16]	; (800ddc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ddb0:	4804      	ldr	r0, [pc, #16]	; (800ddc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ddb2:	f7ff fdab 	bl	800d90c <USBD_GetString>
  return USBD_StrDesc;
 800ddb6:	4b02      	ldr	r3, [pc, #8]	; (800ddc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	20001228 	.word	0x20001228
 800ddc4:	08012bf0 	.word	0x08012bf0

0800ddc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	6039      	str	r1, [r7, #0]
 800ddd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	221a      	movs	r2, #26
 800ddd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ddda:	f000 f843 	bl	800de64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ddde:	4b02      	ldr	r3, [pc, #8]	; (800dde8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	200008a0 	.word	0x200008a0

0800ddec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	6039      	str	r1, [r7, #0]
 800ddf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddf8:	79fb      	ldrb	r3, [r7, #7]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d105      	bne.n	800de0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	4907      	ldr	r1, [pc, #28]	; (800de20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de02:	4808      	ldr	r0, [pc, #32]	; (800de24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de04:	f7ff fd82 	bl	800d90c <USBD_GetString>
 800de08:	e004      	b.n	800de14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	4904      	ldr	r1, [pc, #16]	; (800de20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de0e:	4805      	ldr	r0, [pc, #20]	; (800de24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de10:	f7ff fd7c 	bl	800d90c <USBD_GetString>
  }
  return USBD_StrDesc;
 800de14:	4b02      	ldr	r3, [pc, #8]	; (800de20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	20001228 	.word	0x20001228
 800de24:	08012c00 	.word	0x08012c00

0800de28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	4603      	mov	r3, r0
 800de30:	6039      	str	r1, [r7, #0]
 800de32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de34:	79fb      	ldrb	r3, [r7, #7]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d105      	bne.n	800de46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	4907      	ldr	r1, [pc, #28]	; (800de5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de3e:	4808      	ldr	r0, [pc, #32]	; (800de60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de40:	f7ff fd64 	bl	800d90c <USBD_GetString>
 800de44:	e004      	b.n	800de50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	4904      	ldr	r1, [pc, #16]	; (800de5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de4a:	4805      	ldr	r0, [pc, #20]	; (800de60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de4c:	f7ff fd5e 	bl	800d90c <USBD_GetString>
  }
  return USBD_StrDesc;
 800de50:	4b02      	ldr	r3, [pc, #8]	; (800de5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	20001228 	.word	0x20001228
 800de60:	08012c0c 	.word	0x08012c0c

0800de64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de6a:	4b0f      	ldr	r3, [pc, #60]	; (800dea8 <Get_SerialNum+0x44>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de70:	4b0e      	ldr	r3, [pc, #56]	; (800deac <Get_SerialNum+0x48>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de76:	4b0e      	ldr	r3, [pc, #56]	; (800deb0 <Get_SerialNum+0x4c>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de7c:	68fa      	ldr	r2, [r7, #12]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4413      	add	r3, r2
 800de82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d009      	beq.n	800de9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de8a:	2208      	movs	r2, #8
 800de8c:	4909      	ldr	r1, [pc, #36]	; (800deb4 <Get_SerialNum+0x50>)
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f000 f814 	bl	800debc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de94:	2204      	movs	r2, #4
 800de96:	4908      	ldr	r1, [pc, #32]	; (800deb8 <Get_SerialNum+0x54>)
 800de98:	68b8      	ldr	r0, [r7, #8]
 800de9a:	f000 f80f 	bl	800debc <IntToUnicode>
  }
}
 800de9e:	bf00      	nop
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	1ff80050 	.word	0x1ff80050
 800deac:	1ff80054 	.word	0x1ff80054
 800deb0:	1ff80058 	.word	0x1ff80058
 800deb4:	200008a2 	.word	0x200008a2
 800deb8:	200008b2 	.word	0x200008b2

0800debc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800debc:	b480      	push	{r7}
 800debe:	b087      	sub	sp, #28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	4613      	mov	r3, r2
 800dec8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800deca:	2300      	movs	r3, #0
 800decc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dece:	2300      	movs	r3, #0
 800ded0:	75fb      	strb	r3, [r7, #23]
 800ded2:	e027      	b.n	800df24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	0f1b      	lsrs	r3, r3, #28
 800ded8:	2b09      	cmp	r3, #9
 800deda:	d80b      	bhi.n	800def4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	0f1b      	lsrs	r3, r3, #28
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	4619      	mov	r1, r3
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	440b      	add	r3, r1
 800deec:	3230      	adds	r2, #48	; 0x30
 800deee:	b2d2      	uxtb	r2, r2
 800def0:	701a      	strb	r2, [r3, #0]
 800def2:	e00a      	b.n	800df0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	0f1b      	lsrs	r3, r3, #28
 800def8:	b2da      	uxtb	r2, r3
 800defa:	7dfb      	ldrb	r3, [r7, #23]
 800defc:	005b      	lsls	r3, r3, #1
 800defe:	4619      	mov	r1, r3
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	440b      	add	r3, r1
 800df04:	3237      	adds	r2, #55	; 0x37
 800df06:	b2d2      	uxtb	r2, r2
 800df08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	011b      	lsls	r3, r3, #4
 800df0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	005b      	lsls	r3, r3, #1
 800df14:	3301      	adds	r3, #1
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	4413      	add	r3, r2
 800df1a:	2200      	movs	r2, #0
 800df1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df1e:	7dfb      	ldrb	r3, [r7, #23]
 800df20:	3301      	adds	r3, #1
 800df22:	75fb      	strb	r3, [r7, #23]
 800df24:	7dfa      	ldrb	r2, [r7, #23]
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d3d3      	bcc.n	800ded4 <IntToUnicode+0x18>
  }
}
 800df2c:	bf00      	nop
 800df2e:	bf00      	nop
 800df30:	371c      	adds	r7, #28
 800df32:	46bd      	mov	sp, r7
 800df34:	bc80      	pop	{r7}
 800df36:	4770      	bx	lr

0800df38 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	460b      	mov	r3, r1
 800df42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800df44:	78fb      	ldrb	r3, [r7, #3]
 800df46:	2b01      	cmp	r3, #1
 800df48:	d106      	bne.n	800df58 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800df4a:	4b09      	ldr	r3, [pc, #36]	; (800df70 <HAL_PCDEx_SetConnectionState+0x38>)
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	4a08      	ldr	r2, [pc, #32]	; (800df70 <HAL_PCDEx_SetConnectionState+0x38>)
 800df50:	f043 0301 	orr.w	r3, r3, #1
 800df54:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800df56:	e005      	b.n	800df64 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800df58:	4b05      	ldr	r3, [pc, #20]	; (800df70 <HAL_PCDEx_SetConnectionState+0x38>)
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	4a04      	ldr	r2, [pc, #16]	; (800df70 <HAL_PCDEx_SetConnectionState+0x38>)
 800df5e:	f023 0301 	bic.w	r3, r3, #1
 800df62:	6053      	str	r3, [r2, #4]
}
 800df64:	bf00      	nop
 800df66:	370c      	adds	r7, #12
 800df68:	46bd      	mov	sp, r7
 800df6a:	bc80      	pop	{r7}
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	40010000 	.word	0x40010000

0800df74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a0d      	ldr	r2, [pc, #52]	; (800dfb8 <HAL_PCD_MspInit+0x44>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d113      	bne.n	800dfae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800df86:	4b0d      	ldr	r3, [pc, #52]	; (800dfbc <HAL_PCD_MspInit+0x48>)
 800df88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8a:	4a0c      	ldr	r2, [pc, #48]	; (800dfbc <HAL_PCD_MspInit+0x48>)
 800df8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800df90:	6253      	str	r3, [r2, #36]	; 0x24
 800df92:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <HAL_PCD_MspInit+0x48>)
 800df94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df9a:	60fb      	str	r3, [r7, #12]
 800df9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800df9e:	2200      	movs	r2, #0
 800dfa0:	2101      	movs	r1, #1
 800dfa2:	2014      	movs	r0, #20
 800dfa4:	f7f6 fd8d 	bl	8004ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800dfa8:	2014      	movs	r0, #20
 800dfaa:	f7f6 fda6 	bl	8004afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800dfae:	bf00      	nop
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	40005c00 	.word	0x40005c00
 800dfbc:	40023800 	.word	0x40023800

0800dfc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	4610      	mov	r0, r2
 800dfd8:	f7fe fddd 	bl	800cb96 <USBD_LL_SetupStage>
}
 800dfdc:	bf00      	nop
 800dfde:	3708      	adds	r7, #8
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	460b      	mov	r3, r1
 800dfee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800dff6:	78fa      	ldrb	r2, [r7, #3]
 800dff8:	6879      	ldr	r1, [r7, #4]
 800dffa:	4613      	mov	r3, r2
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	4413      	add	r3, r2
 800e000:	00db      	lsls	r3, r3, #3
 800e002:	440b      	add	r3, r1
 800e004:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	78fb      	ldrb	r3, [r7, #3]
 800e00c:	4619      	mov	r1, r3
 800e00e:	f7fe fe0f 	bl	800cc30 <USBD_LL_DataOutStage>
}
 800e012:	bf00      	nop
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b082      	sub	sp, #8
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
 800e022:	460b      	mov	r3, r1
 800e024:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e02c:	78fa      	ldrb	r2, [r7, #3]
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	4613      	mov	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	00db      	lsls	r3, r3, #3
 800e038:	440b      	add	r3, r1
 800e03a:	333c      	adds	r3, #60	; 0x3c
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	78fb      	ldrb	r3, [r7, #3]
 800e040:	4619      	mov	r1, r3
 800e042:	f7fe fe66 	bl	800cd12 <USBD_LL_DataInStage>
}
 800e046:	bf00      	nop
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fe ff71 	bl	800cf44 <USBD_LL_SOF>
}
 800e062:	bf00      	nop
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b084      	sub	sp, #16
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e072:	2301      	movs	r3, #1
 800e074:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d001      	beq.n	800e082 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e07e:	f7f5 ff5b 	bl	8003f38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e088:	7bfa      	ldrb	r2, [r7, #15]
 800e08a:	4611      	mov	r1, r2
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fe ff26 	bl	800cede <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fe fedf 	bl	800ce5c <USBD_LL_Reset>
}
 800e09e:	bf00      	nop
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
	...

0800e0a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fe ff20 	bl	800cefc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	699b      	ldr	r3, [r3, #24]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d005      	beq.n	800e0d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0c4:	4b04      	ldr	r3, [pc, #16]	; (800e0d8 <HAL_PCD_SuspendCallback+0x30>)
 800e0c6:	691b      	ldr	r3, [r3, #16]
 800e0c8:	4a03      	ldr	r2, [pc, #12]	; (800e0d8 <HAL_PCD_SuspendCallback+0x30>)
 800e0ca:	f043 0306 	orr.w	r3, r3, #6
 800e0ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e0d0:	bf00      	nop
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	e000ed00 	.word	0xe000ed00

0800e0dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fe ff1a 	bl	800cf24 <USBD_LL_Resume>
}
 800e0f0:	bf00      	nop
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e100:	4a28      	ldr	r2, [pc, #160]	; (800e1a4 <USBD_LL_Init+0xac>)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4a26      	ldr	r2, [pc, #152]	; (800e1a4 <USBD_LL_Init+0xac>)
 800e10c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800e110:	4b24      	ldr	r3, [pc, #144]	; (800e1a4 <USBD_LL_Init+0xac>)
 800e112:	4a25      	ldr	r2, [pc, #148]	; (800e1a8 <USBD_LL_Init+0xb0>)
 800e114:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e116:	4b23      	ldr	r3, [pc, #140]	; (800e1a4 <USBD_LL_Init+0xac>)
 800e118:	2208      	movs	r2, #8
 800e11a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e11c:	4b21      	ldr	r3, [pc, #132]	; (800e1a4 <USBD_LL_Init+0xac>)
 800e11e:	2202      	movs	r2, #2
 800e120:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e122:	4b20      	ldr	r3, [pc, #128]	; (800e1a4 <USBD_LL_Init+0xac>)
 800e124:	2202      	movs	r2, #2
 800e126:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e128:	4b1e      	ldr	r3, [pc, #120]	; (800e1a4 <USBD_LL_Init+0xac>)
 800e12a:	2200      	movs	r2, #0
 800e12c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e12e:	4b1d      	ldr	r3, [pc, #116]	; (800e1a4 <USBD_LL_Init+0xac>)
 800e130:	2200      	movs	r2, #0
 800e132:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e134:	481b      	ldr	r0, [pc, #108]	; (800e1a4 <USBD_LL_Init+0xac>)
 800e136:	f7f7 feab 	bl	8005e90 <HAL_PCD_Init>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e140:	f7f5 fefa 	bl	8003f38 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e14a:	2318      	movs	r3, #24
 800e14c:	2200      	movs	r2, #0
 800e14e:	2100      	movs	r1, #0
 800e150:	f7f9 fa88 	bl	8007664 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e15a:	2358      	movs	r3, #88	; 0x58
 800e15c:	2200      	movs	r2, #0
 800e15e:	2180      	movs	r1, #128	; 0x80
 800e160:	f7f9 fa80 	bl	8007664 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e16a:	23c0      	movs	r3, #192	; 0xc0
 800e16c:	2200      	movs	r2, #0
 800e16e:	2181      	movs	r1, #129	; 0x81
 800e170:	f7f9 fa78 	bl	8007664 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e17a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e17e:	2200      	movs	r2, #0
 800e180:	2101      	movs	r1, #1
 800e182:	f7f9 fa6f 	bl	8007664 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e18c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e190:	2200      	movs	r2, #0
 800e192:	2182      	movs	r1, #130	; 0x82
 800e194:	f7f9 fa66 	bl	8007664 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	20001428 	.word	0x20001428
 800e1a8:	40005c00 	.word	0x40005c00

0800e1ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7f7 ff42 	bl	800604c <HAL_PCD_Start>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1cc:	7bfb      	ldrb	r3, [r7, #15]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f000 f944 	bl	800e45c <USBD_Get_USB_Status>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b084      	sub	sp, #16
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
 800e1ea:	4608      	mov	r0, r1
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	70fb      	strb	r3, [r7, #3]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	70bb      	strb	r3, [r7, #2]
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e200:	2300      	movs	r3, #0
 800e202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e20a:	78bb      	ldrb	r3, [r7, #2]
 800e20c:	883a      	ldrh	r2, [r7, #0]
 800e20e:	78f9      	ldrb	r1, [r7, #3]
 800e210:	f7f8 f85e 	bl	80062d0 <HAL_PCD_EP_Open>
 800e214:	4603      	mov	r3, r0
 800e216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e218:	7bfb      	ldrb	r3, [r7, #15]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f000 f91e 	bl	800e45c <USBD_Get_USB_Status>
 800e220:	4603      	mov	r3, r0
 800e222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e224:	7bbb      	ldrb	r3, [r7, #14]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}

0800e22e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e22e:	b580      	push	{r7, lr}
 800e230:	b084      	sub	sp, #16
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
 800e236:	460b      	mov	r3, r1
 800e238:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e23a:	2300      	movs	r3, #0
 800e23c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e23e:	2300      	movs	r3, #0
 800e240:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e248:	78fa      	ldrb	r2, [r7, #3]
 800e24a:	4611      	mov	r1, r2
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7f8 f8a5 	bl	800639c <HAL_PCD_EP_Close>
 800e252:	4603      	mov	r3, r0
 800e254:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e256:	7bfb      	ldrb	r3, [r7, #15]
 800e258:	4618      	mov	r0, r3
 800e25a:	f000 f8ff 	bl	800e45c <USBD_Get_USB_Status>
 800e25e:	4603      	mov	r3, r0
 800e260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e262:	7bbb      	ldrb	r3, [r7, #14]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	460b      	mov	r3, r1
 800e276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e286:	78fa      	ldrb	r2, [r7, #3]
 800e288:	4611      	mov	r1, r2
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7f8 f965 	bl	800655a <HAL_PCD_EP_SetStall>
 800e290:	4603      	mov	r3, r0
 800e292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e294:	7bfb      	ldrb	r3, [r7, #15]
 800e296:	4618      	mov	r0, r3
 800e298:	f000 f8e0 	bl	800e45c <USBD_Get_USB_Status>
 800e29c:	4603      	mov	r3, r0
 800e29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b084      	sub	sp, #16
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e2c4:	78fa      	ldrb	r2, [r7, #3]
 800e2c6:	4611      	mov	r1, r2
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7f8 f998 	bl	80065fe <HAL_PCD_EP_ClrStall>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2d2:	7bfb      	ldrb	r3, [r7, #15]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f000 f8c1 	bl	800e45c <USBD_Get_USB_Status>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3710      	adds	r7, #16
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e2fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e2fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e300:	2b00      	cmp	r3, #0
 800e302:	da0c      	bge.n	800e31e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e304:	78fb      	ldrb	r3, [r7, #3]
 800e306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e30a:	68f9      	ldr	r1, [r7, #12]
 800e30c:	1c5a      	adds	r2, r3, #1
 800e30e:	4613      	mov	r3, r2
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	4413      	add	r3, r2
 800e314:	00db      	lsls	r3, r3, #3
 800e316:	440b      	add	r3, r1
 800e318:	3302      	adds	r3, #2
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	e00b      	b.n	800e336 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e31e:	78fb      	ldrb	r3, [r7, #3]
 800e320:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e324:	68f9      	ldr	r1, [r7, #12]
 800e326:	4613      	mov	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	4413      	add	r3, r2
 800e32c:	00db      	lsls	r3, r3, #3
 800e32e:	440b      	add	r3, r1
 800e330:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800e334:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e336:	4618      	mov	r0, r3
 800e338:	3714      	adds	r7, #20
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bc80      	pop	{r7}
 800e33e:	4770      	bx	lr

0800e340 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	460b      	mov	r3, r1
 800e34a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e34c:	2300      	movs	r3, #0
 800e34e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e350:	2300      	movs	r3, #0
 800e352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e35a:	78fa      	ldrb	r2, [r7, #3]
 800e35c:	4611      	mov	r1, r2
 800e35e:	4618      	mov	r0, r3
 800e360:	f7f7 ff91 	bl	8006286 <HAL_PCD_SetAddress>
 800e364:	4603      	mov	r3, r0
 800e366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e368:	7bfb      	ldrb	r3, [r7, #15]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f000 f876 	bl	800e45c <USBD_Get_USB_Status>
 800e370:	4603      	mov	r3, r0
 800e372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e374:	7bbb      	ldrb	r3, [r7, #14]
}
 800e376:	4618      	mov	r0, r3
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}

0800e37e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b086      	sub	sp, #24
 800e382:	af00      	add	r7, sp, #0
 800e384:	60f8      	str	r0, [r7, #12]
 800e386:	607a      	str	r2, [r7, #4]
 800e388:	461a      	mov	r2, r3
 800e38a:	460b      	mov	r3, r1
 800e38c:	72fb      	strb	r3, [r7, #11]
 800e38e:	4613      	mov	r3, r2
 800e390:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e392:	2300      	movs	r3, #0
 800e394:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e396:	2300      	movs	r3, #0
 800e398:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e3a0:	893b      	ldrh	r3, [r7, #8]
 800e3a2:	7af9      	ldrb	r1, [r7, #11]
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	f7f8 f895 	bl	80064d4 <HAL_PCD_EP_Transmit>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3ae:	7dfb      	ldrb	r3, [r7, #23]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f000 f853 	bl	800e45c <USBD_Get_USB_Status>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3718      	adds	r7, #24
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b086      	sub	sp, #24
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	607a      	str	r2, [r7, #4]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	72fb      	strb	r3, [r7, #11]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e3e6:	893b      	ldrh	r3, [r7, #8]
 800e3e8:	7af9      	ldrb	r1, [r7, #11]
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	f7f8 f81e 	bl	800642c <HAL_PCD_EP_Receive>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3f4:	7dfb      	ldrb	r3, [r7, #23]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f000 f830 	bl	800e45c <USBD_Get_USB_Status>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e400:	7dbb      	ldrb	r3, [r7, #22]
}
 800e402:	4618      	mov	r0, r3
 800e404:	3718      	adds	r7, #24
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b082      	sub	sp, #8
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
 800e412:	460b      	mov	r3, r1
 800e414:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e41c:	78fa      	ldrb	r2, [r7, #3]
 800e41e:	4611      	mov	r1, r2
 800e420:	4618      	mov	r0, r3
 800e422:	f7f8 f840 	bl	80064a6 <HAL_PCD_EP_GetRxCount>
 800e426:	4603      	mov	r3, r0
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e438:	4b02      	ldr	r3, [pc, #8]	; (800e444 <USBD_static_malloc+0x14>)
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	370c      	adds	r7, #12
 800e43e:	46bd      	mov	sp, r7
 800e440:	bc80      	pop	{r7}
 800e442:	4770      	bx	lr
 800e444:	20001714 	.word	0x20001714

0800e448 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e448:	b480      	push	{r7}
 800e44a:	b083      	sub	sp, #12
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]

}
 800e450:	bf00      	nop
 800e452:	370c      	adds	r7, #12
 800e454:	46bd      	mov	sp, r7
 800e456:	bc80      	pop	{r7}
 800e458:	4770      	bx	lr
	...

0800e45c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	4603      	mov	r3, r0
 800e464:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e466:	2300      	movs	r3, #0
 800e468:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e46a:	79fb      	ldrb	r3, [r7, #7]
 800e46c:	2b03      	cmp	r3, #3
 800e46e:	d817      	bhi.n	800e4a0 <USBD_Get_USB_Status+0x44>
 800e470:	a201      	add	r2, pc, #4	; (adr r2, 800e478 <USBD_Get_USB_Status+0x1c>)
 800e472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e476:	bf00      	nop
 800e478:	0800e489 	.word	0x0800e489
 800e47c:	0800e48f 	.word	0x0800e48f
 800e480:	0800e495 	.word	0x0800e495
 800e484:	0800e49b 	.word	0x0800e49b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e488:	2300      	movs	r3, #0
 800e48a:	73fb      	strb	r3, [r7, #15]
    break;
 800e48c:	e00b      	b.n	800e4a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e48e:	2302      	movs	r3, #2
 800e490:	73fb      	strb	r3, [r7, #15]
    break;
 800e492:	e008      	b.n	800e4a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e494:	2301      	movs	r3, #1
 800e496:	73fb      	strb	r3, [r7, #15]
    break;
 800e498:	e005      	b.n	800e4a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e49a:	2302      	movs	r3, #2
 800e49c:	73fb      	strb	r3, [r7, #15]
    break;
 800e49e:	e002      	b.n	800e4a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e4a0:	2302      	movs	r3, #2
 800e4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e4a4:	bf00      	nop
  }
  return usb_status;
 800e4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3714      	adds	r7, #20
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bc80      	pop	{r7}
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop
 800e4b4:	0000      	movs	r0, r0
	...

0800e4b8 <floor>:
 800e4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4bc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e4c0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800e4c4:	2e13      	cmp	r6, #19
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	4607      	mov	r7, r0
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	dc33      	bgt.n	800e53a <floor+0x82>
 800e4d2:	2e00      	cmp	r6, #0
 800e4d4:	da14      	bge.n	800e500 <floor+0x48>
 800e4d6:	a334      	add	r3, pc, #208	; (adr r3, 800e5a8 <floor+0xf0>)
 800e4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4dc:	f7f1 fe68 	bl	80001b0 <__adddf3>
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	f7f2 faaa 	bl	8000a3c <__aeabi_dcmpgt>
 800e4e8:	b138      	cbz	r0, 800e4fa <floor+0x42>
 800e4ea:	2c00      	cmp	r4, #0
 800e4ec:	da58      	bge.n	800e5a0 <floor+0xe8>
 800e4ee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e4f2:	431d      	orrs	r5, r3
 800e4f4:	d001      	beq.n	800e4fa <floor+0x42>
 800e4f6:	2500      	movs	r5, #0
 800e4f8:	4c2d      	ldr	r4, [pc, #180]	; (800e5b0 <floor+0xf8>)
 800e4fa:	4623      	mov	r3, r4
 800e4fc:	462f      	mov	r7, r5
 800e4fe:	e025      	b.n	800e54c <floor+0x94>
 800e500:	4a2c      	ldr	r2, [pc, #176]	; (800e5b4 <floor+0xfc>)
 800e502:	fa42 f806 	asr.w	r8, r2, r6
 800e506:	ea01 0208 	and.w	r2, r1, r8
 800e50a:	4302      	orrs	r2, r0
 800e50c:	d01e      	beq.n	800e54c <floor+0x94>
 800e50e:	a326      	add	r3, pc, #152	; (adr r3, 800e5a8 <floor+0xf0>)
 800e510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e514:	f7f1 fe4c 	bl	80001b0 <__adddf3>
 800e518:	2200      	movs	r2, #0
 800e51a:	2300      	movs	r3, #0
 800e51c:	f7f2 fa8e 	bl	8000a3c <__aeabi_dcmpgt>
 800e520:	2800      	cmp	r0, #0
 800e522:	d0ea      	beq.n	800e4fa <floor+0x42>
 800e524:	2c00      	cmp	r4, #0
 800e526:	bfbe      	ittt	lt
 800e528:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e52c:	fa43 f606 	asrlt.w	r6, r3, r6
 800e530:	19a4      	addlt	r4, r4, r6
 800e532:	2500      	movs	r5, #0
 800e534:	ea24 0408 	bic.w	r4, r4, r8
 800e538:	e7df      	b.n	800e4fa <floor+0x42>
 800e53a:	2e33      	cmp	r6, #51	; 0x33
 800e53c:	dd0a      	ble.n	800e554 <floor+0x9c>
 800e53e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e542:	d103      	bne.n	800e54c <floor+0x94>
 800e544:	f7f1 fe34 	bl	80001b0 <__adddf3>
 800e548:	4607      	mov	r7, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	4638      	mov	r0, r7
 800e54e:	4619      	mov	r1, r3
 800e550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e554:	f04f 32ff 	mov.w	r2, #4294967295
 800e558:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800e55c:	fa22 f808 	lsr.w	r8, r2, r8
 800e560:	ea18 0f00 	tst.w	r8, r0
 800e564:	d0f2      	beq.n	800e54c <floor+0x94>
 800e566:	a310      	add	r3, pc, #64	; (adr r3, 800e5a8 <floor+0xf0>)
 800e568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56c:	f7f1 fe20 	bl	80001b0 <__adddf3>
 800e570:	2200      	movs	r2, #0
 800e572:	2300      	movs	r3, #0
 800e574:	f7f2 fa62 	bl	8000a3c <__aeabi_dcmpgt>
 800e578:	2800      	cmp	r0, #0
 800e57a:	d0be      	beq.n	800e4fa <floor+0x42>
 800e57c:	2c00      	cmp	r4, #0
 800e57e:	da02      	bge.n	800e586 <floor+0xce>
 800e580:	2e14      	cmp	r6, #20
 800e582:	d103      	bne.n	800e58c <floor+0xd4>
 800e584:	3401      	adds	r4, #1
 800e586:	ea25 0508 	bic.w	r5, r5, r8
 800e58a:	e7b6      	b.n	800e4fa <floor+0x42>
 800e58c:	2301      	movs	r3, #1
 800e58e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e592:	fa03 f606 	lsl.w	r6, r3, r6
 800e596:	4435      	add	r5, r6
 800e598:	42bd      	cmp	r5, r7
 800e59a:	bf38      	it	cc
 800e59c:	18e4      	addcc	r4, r4, r3
 800e59e:	e7f2      	b.n	800e586 <floor+0xce>
 800e5a0:	2500      	movs	r5, #0
 800e5a2:	462c      	mov	r4, r5
 800e5a4:	e7a9      	b.n	800e4fa <floor+0x42>
 800e5a6:	bf00      	nop
 800e5a8:	8800759c 	.word	0x8800759c
 800e5ac:	7e37e43c 	.word	0x7e37e43c
 800e5b0:	bff00000 	.word	0xbff00000
 800e5b4:	000fffff 	.word	0x000fffff

0800e5b8 <atof>:
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	f001 bad5 	b.w	800fb68 <strtod>
	...

0800e5c0 <__errno>:
 800e5c0:	4b01      	ldr	r3, [pc, #4]	; (800e5c8 <__errno+0x8>)
 800e5c2:	6818      	ldr	r0, [r3, #0]
 800e5c4:	4770      	bx	lr
 800e5c6:	bf00      	nop
 800e5c8:	200008bc 	.word	0x200008bc

0800e5cc <__libc_init_array>:
 800e5cc:	b570      	push	{r4, r5, r6, lr}
 800e5ce:	2600      	movs	r6, #0
 800e5d0:	4d0c      	ldr	r5, [pc, #48]	; (800e604 <__libc_init_array+0x38>)
 800e5d2:	4c0d      	ldr	r4, [pc, #52]	; (800e608 <__libc_init_array+0x3c>)
 800e5d4:	1b64      	subs	r4, r4, r5
 800e5d6:	10a4      	asrs	r4, r4, #2
 800e5d8:	42a6      	cmp	r6, r4
 800e5da:	d109      	bne.n	800e5f0 <__libc_init_array+0x24>
 800e5dc:	f004 fa30 	bl	8012a40 <_init>
 800e5e0:	2600      	movs	r6, #0
 800e5e2:	4d0a      	ldr	r5, [pc, #40]	; (800e60c <__libc_init_array+0x40>)
 800e5e4:	4c0a      	ldr	r4, [pc, #40]	; (800e610 <__libc_init_array+0x44>)
 800e5e6:	1b64      	subs	r4, r4, r5
 800e5e8:	10a4      	asrs	r4, r4, #2
 800e5ea:	42a6      	cmp	r6, r4
 800e5ec:	d105      	bne.n	800e5fa <__libc_init_array+0x2e>
 800e5ee:	bd70      	pop	{r4, r5, r6, pc}
 800e5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5f4:	4798      	blx	r3
 800e5f6:	3601      	adds	r6, #1
 800e5f8:	e7ee      	b.n	800e5d8 <__libc_init_array+0xc>
 800e5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5fe:	4798      	blx	r3
 800e600:	3601      	adds	r6, #1
 800e602:	e7f2      	b.n	800e5ea <__libc_init_array+0x1e>
 800e604:	08013140 	.word	0x08013140
 800e608:	08013140 	.word	0x08013140
 800e60c:	08013140 	.word	0x08013140
 800e610:	08013144 	.word	0x08013144

0800e614 <memcpy>:
 800e614:	440a      	add	r2, r1
 800e616:	4291      	cmp	r1, r2
 800e618:	f100 33ff 	add.w	r3, r0, #4294967295
 800e61c:	d100      	bne.n	800e620 <memcpy+0xc>
 800e61e:	4770      	bx	lr
 800e620:	b510      	push	{r4, lr}
 800e622:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e626:	4291      	cmp	r1, r2
 800e628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e62c:	d1f9      	bne.n	800e622 <memcpy+0xe>
 800e62e:	bd10      	pop	{r4, pc}

0800e630 <memset>:
 800e630:	4603      	mov	r3, r0
 800e632:	4402      	add	r2, r0
 800e634:	4293      	cmp	r3, r2
 800e636:	d100      	bne.n	800e63a <memset+0xa>
 800e638:	4770      	bx	lr
 800e63a:	f803 1b01 	strb.w	r1, [r3], #1
 800e63e:	e7f9      	b.n	800e634 <memset+0x4>

0800e640 <__cvt>:
 800e640:	2b00      	cmp	r3, #0
 800e642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e646:	461f      	mov	r7, r3
 800e648:	bfbb      	ittet	lt
 800e64a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800e64e:	461f      	movlt	r7, r3
 800e650:	2300      	movge	r3, #0
 800e652:	232d      	movlt	r3, #45	; 0x2d
 800e654:	b088      	sub	sp, #32
 800e656:	4614      	mov	r4, r2
 800e658:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e65a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e65c:	7013      	strb	r3, [r2, #0]
 800e65e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e660:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800e664:	f023 0820 	bic.w	r8, r3, #32
 800e668:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e66c:	d005      	beq.n	800e67a <__cvt+0x3a>
 800e66e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e672:	d100      	bne.n	800e676 <__cvt+0x36>
 800e674:	3501      	adds	r5, #1
 800e676:	2302      	movs	r3, #2
 800e678:	e000      	b.n	800e67c <__cvt+0x3c>
 800e67a:	2303      	movs	r3, #3
 800e67c:	aa07      	add	r2, sp, #28
 800e67e:	9204      	str	r2, [sp, #16]
 800e680:	aa06      	add	r2, sp, #24
 800e682:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e686:	e9cd 3500 	strd	r3, r5, [sp]
 800e68a:	4622      	mov	r2, r4
 800e68c:	463b      	mov	r3, r7
 800e68e:	f001 fb7f 	bl	800fd90 <_dtoa_r>
 800e692:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e696:	4606      	mov	r6, r0
 800e698:	d102      	bne.n	800e6a0 <__cvt+0x60>
 800e69a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e69c:	07db      	lsls	r3, r3, #31
 800e69e:	d522      	bpl.n	800e6e6 <__cvt+0xa6>
 800e6a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e6a4:	eb06 0905 	add.w	r9, r6, r5
 800e6a8:	d110      	bne.n	800e6cc <__cvt+0x8c>
 800e6aa:	7833      	ldrb	r3, [r6, #0]
 800e6ac:	2b30      	cmp	r3, #48	; 0x30
 800e6ae:	d10a      	bne.n	800e6c6 <__cvt+0x86>
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	4639      	mov	r1, r7
 800e6b8:	f7f2 f998 	bl	80009ec <__aeabi_dcmpeq>
 800e6bc:	b918      	cbnz	r0, 800e6c6 <__cvt+0x86>
 800e6be:	f1c5 0501 	rsb	r5, r5, #1
 800e6c2:	f8ca 5000 	str.w	r5, [sl]
 800e6c6:	f8da 3000 	ldr.w	r3, [sl]
 800e6ca:	4499      	add	r9, r3
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	4639      	mov	r1, r7
 800e6d4:	f7f2 f98a 	bl	80009ec <__aeabi_dcmpeq>
 800e6d8:	b108      	cbz	r0, 800e6de <__cvt+0x9e>
 800e6da:	f8cd 901c 	str.w	r9, [sp, #28]
 800e6de:	2230      	movs	r2, #48	; 0x30
 800e6e0:	9b07      	ldr	r3, [sp, #28]
 800e6e2:	454b      	cmp	r3, r9
 800e6e4:	d307      	bcc.n	800e6f6 <__cvt+0xb6>
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	9b07      	ldr	r3, [sp, #28]
 800e6ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e6ec:	1b9b      	subs	r3, r3, r6
 800e6ee:	6013      	str	r3, [r2, #0]
 800e6f0:	b008      	add	sp, #32
 800e6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6f6:	1c59      	adds	r1, r3, #1
 800e6f8:	9107      	str	r1, [sp, #28]
 800e6fa:	701a      	strb	r2, [r3, #0]
 800e6fc:	e7f0      	b.n	800e6e0 <__cvt+0xa0>

0800e6fe <__exponent>:
 800e6fe:	4603      	mov	r3, r0
 800e700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e702:	2900      	cmp	r1, #0
 800e704:	f803 2b02 	strb.w	r2, [r3], #2
 800e708:	bfb6      	itet	lt
 800e70a:	222d      	movlt	r2, #45	; 0x2d
 800e70c:	222b      	movge	r2, #43	; 0x2b
 800e70e:	4249      	neglt	r1, r1
 800e710:	2909      	cmp	r1, #9
 800e712:	7042      	strb	r2, [r0, #1]
 800e714:	dd2b      	ble.n	800e76e <__exponent+0x70>
 800e716:	f10d 0407 	add.w	r4, sp, #7
 800e71a:	46a4      	mov	ip, r4
 800e71c:	270a      	movs	r7, #10
 800e71e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e722:	460a      	mov	r2, r1
 800e724:	46a6      	mov	lr, r4
 800e726:	fb07 1516 	mls	r5, r7, r6, r1
 800e72a:	2a63      	cmp	r2, #99	; 0x63
 800e72c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800e730:	4631      	mov	r1, r6
 800e732:	f104 34ff 	add.w	r4, r4, #4294967295
 800e736:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e73a:	dcf0      	bgt.n	800e71e <__exponent+0x20>
 800e73c:	3130      	adds	r1, #48	; 0x30
 800e73e:	f1ae 0502 	sub.w	r5, lr, #2
 800e742:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e746:	4629      	mov	r1, r5
 800e748:	1c44      	adds	r4, r0, #1
 800e74a:	4561      	cmp	r1, ip
 800e74c:	d30a      	bcc.n	800e764 <__exponent+0x66>
 800e74e:	f10d 0209 	add.w	r2, sp, #9
 800e752:	eba2 020e 	sub.w	r2, r2, lr
 800e756:	4565      	cmp	r5, ip
 800e758:	bf88      	it	hi
 800e75a:	2200      	movhi	r2, #0
 800e75c:	4413      	add	r3, r2
 800e75e:	1a18      	subs	r0, r3, r0
 800e760:	b003      	add	sp, #12
 800e762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e764:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e768:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e76c:	e7ed      	b.n	800e74a <__exponent+0x4c>
 800e76e:	2330      	movs	r3, #48	; 0x30
 800e770:	3130      	adds	r1, #48	; 0x30
 800e772:	7083      	strb	r3, [r0, #2]
 800e774:	70c1      	strb	r1, [r0, #3]
 800e776:	1d03      	adds	r3, r0, #4
 800e778:	e7f1      	b.n	800e75e <__exponent+0x60>
	...

0800e77c <_printf_float>:
 800e77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e780:	b091      	sub	sp, #68	; 0x44
 800e782:	460c      	mov	r4, r1
 800e784:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e788:	4616      	mov	r6, r2
 800e78a:	461f      	mov	r7, r3
 800e78c:	4605      	mov	r5, r0
 800e78e:	f002 fc65 	bl	801105c <_localeconv_r>
 800e792:	6803      	ldr	r3, [r0, #0]
 800e794:	4618      	mov	r0, r3
 800e796:	9309      	str	r3, [sp, #36]	; 0x24
 800e798:	f7f1 fcfc 	bl	8000194 <strlen>
 800e79c:	2300      	movs	r3, #0
 800e79e:	930e      	str	r3, [sp, #56]	; 0x38
 800e7a0:	f8d8 3000 	ldr.w	r3, [r8]
 800e7a4:	900a      	str	r0, [sp, #40]	; 0x28
 800e7a6:	3307      	adds	r3, #7
 800e7a8:	f023 0307 	bic.w	r3, r3, #7
 800e7ac:	f103 0208 	add.w	r2, r3, #8
 800e7b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e7b4:	f8d4 b000 	ldr.w	fp, [r4]
 800e7b8:	f8c8 2000 	str.w	r2, [r8]
 800e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e7c4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800e7c8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e7cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	4b9c      	ldr	r3, [pc, #624]	; (800ea48 <_printf_float+0x2cc>)
 800e7d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7d8:	f7f2 f93a 	bl	8000a50 <__aeabi_dcmpun>
 800e7dc:	bb70      	cbnz	r0, 800e83c <_printf_float+0xc0>
 800e7de:	f04f 32ff 	mov.w	r2, #4294967295
 800e7e2:	4640      	mov	r0, r8
 800e7e4:	4b98      	ldr	r3, [pc, #608]	; (800ea48 <_printf_float+0x2cc>)
 800e7e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7e8:	f7f2 f914 	bl	8000a14 <__aeabi_dcmple>
 800e7ec:	bb30      	cbnz	r0, 800e83c <_printf_float+0xc0>
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4640      	mov	r0, r8
 800e7f4:	4651      	mov	r1, sl
 800e7f6:	f7f2 f903 	bl	8000a00 <__aeabi_dcmplt>
 800e7fa:	b110      	cbz	r0, 800e802 <_printf_float+0x86>
 800e7fc:	232d      	movs	r3, #45	; 0x2d
 800e7fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e802:	4b92      	ldr	r3, [pc, #584]	; (800ea4c <_printf_float+0x2d0>)
 800e804:	4892      	ldr	r0, [pc, #584]	; (800ea50 <_printf_float+0x2d4>)
 800e806:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e80a:	bf94      	ite	ls
 800e80c:	4698      	movls	r8, r3
 800e80e:	4680      	movhi	r8, r0
 800e810:	2303      	movs	r3, #3
 800e812:	f04f 0a00 	mov.w	sl, #0
 800e816:	6123      	str	r3, [r4, #16]
 800e818:	f02b 0304 	bic.w	r3, fp, #4
 800e81c:	6023      	str	r3, [r4, #0]
 800e81e:	4633      	mov	r3, r6
 800e820:	4621      	mov	r1, r4
 800e822:	4628      	mov	r0, r5
 800e824:	9700      	str	r7, [sp, #0]
 800e826:	aa0f      	add	r2, sp, #60	; 0x3c
 800e828:	f000 f9d4 	bl	800ebd4 <_printf_common>
 800e82c:	3001      	adds	r0, #1
 800e82e:	f040 8090 	bne.w	800e952 <_printf_float+0x1d6>
 800e832:	f04f 30ff 	mov.w	r0, #4294967295
 800e836:	b011      	add	sp, #68	; 0x44
 800e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83c:	4642      	mov	r2, r8
 800e83e:	4653      	mov	r3, sl
 800e840:	4640      	mov	r0, r8
 800e842:	4651      	mov	r1, sl
 800e844:	f7f2 f904 	bl	8000a50 <__aeabi_dcmpun>
 800e848:	b148      	cbz	r0, 800e85e <_printf_float+0xe2>
 800e84a:	f1ba 0f00 	cmp.w	sl, #0
 800e84e:	bfb8      	it	lt
 800e850:	232d      	movlt	r3, #45	; 0x2d
 800e852:	4880      	ldr	r0, [pc, #512]	; (800ea54 <_printf_float+0x2d8>)
 800e854:	bfb8      	it	lt
 800e856:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e85a:	4b7f      	ldr	r3, [pc, #508]	; (800ea58 <_printf_float+0x2dc>)
 800e85c:	e7d3      	b.n	800e806 <_printf_float+0x8a>
 800e85e:	6863      	ldr	r3, [r4, #4]
 800e860:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e864:	1c5a      	adds	r2, r3, #1
 800e866:	d142      	bne.n	800e8ee <_printf_float+0x172>
 800e868:	2306      	movs	r3, #6
 800e86a:	6063      	str	r3, [r4, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	9206      	str	r2, [sp, #24]
 800e870:	aa0e      	add	r2, sp, #56	; 0x38
 800e872:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e876:	aa0d      	add	r2, sp, #52	; 0x34
 800e878:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e87c:	9203      	str	r2, [sp, #12]
 800e87e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e882:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e886:	6023      	str	r3, [r4, #0]
 800e888:	6863      	ldr	r3, [r4, #4]
 800e88a:	4642      	mov	r2, r8
 800e88c:	9300      	str	r3, [sp, #0]
 800e88e:	4628      	mov	r0, r5
 800e890:	4653      	mov	r3, sl
 800e892:	910b      	str	r1, [sp, #44]	; 0x2c
 800e894:	f7ff fed4 	bl	800e640 <__cvt>
 800e898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e89a:	4680      	mov	r8, r0
 800e89c:	2947      	cmp	r1, #71	; 0x47
 800e89e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e8a0:	d108      	bne.n	800e8b4 <_printf_float+0x138>
 800e8a2:	1cc8      	adds	r0, r1, #3
 800e8a4:	db02      	blt.n	800e8ac <_printf_float+0x130>
 800e8a6:	6863      	ldr	r3, [r4, #4]
 800e8a8:	4299      	cmp	r1, r3
 800e8aa:	dd40      	ble.n	800e92e <_printf_float+0x1b2>
 800e8ac:	f1a9 0902 	sub.w	r9, r9, #2
 800e8b0:	fa5f f989 	uxtb.w	r9, r9
 800e8b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e8b8:	d81f      	bhi.n	800e8fa <_printf_float+0x17e>
 800e8ba:	464a      	mov	r2, r9
 800e8bc:	3901      	subs	r1, #1
 800e8be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e8c2:	910d      	str	r1, [sp, #52]	; 0x34
 800e8c4:	f7ff ff1b 	bl	800e6fe <__exponent>
 800e8c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8ca:	4682      	mov	sl, r0
 800e8cc:	1813      	adds	r3, r2, r0
 800e8ce:	2a01      	cmp	r2, #1
 800e8d0:	6123      	str	r3, [r4, #16]
 800e8d2:	dc02      	bgt.n	800e8da <_printf_float+0x15e>
 800e8d4:	6822      	ldr	r2, [r4, #0]
 800e8d6:	07d2      	lsls	r2, r2, #31
 800e8d8:	d501      	bpl.n	800e8de <_printf_float+0x162>
 800e8da:	3301      	adds	r3, #1
 800e8dc:	6123      	str	r3, [r4, #16]
 800e8de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d09b      	beq.n	800e81e <_printf_float+0xa2>
 800e8e6:	232d      	movs	r3, #45	; 0x2d
 800e8e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8ec:	e797      	b.n	800e81e <_printf_float+0xa2>
 800e8ee:	2947      	cmp	r1, #71	; 0x47
 800e8f0:	d1bc      	bne.n	800e86c <_printf_float+0xf0>
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d1ba      	bne.n	800e86c <_printf_float+0xf0>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e7b7      	b.n	800e86a <_printf_float+0xee>
 800e8fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e8fe:	d118      	bne.n	800e932 <_printf_float+0x1b6>
 800e900:	2900      	cmp	r1, #0
 800e902:	6863      	ldr	r3, [r4, #4]
 800e904:	dd0b      	ble.n	800e91e <_printf_float+0x1a2>
 800e906:	6121      	str	r1, [r4, #16]
 800e908:	b913      	cbnz	r3, 800e910 <_printf_float+0x194>
 800e90a:	6822      	ldr	r2, [r4, #0]
 800e90c:	07d0      	lsls	r0, r2, #31
 800e90e:	d502      	bpl.n	800e916 <_printf_float+0x19a>
 800e910:	3301      	adds	r3, #1
 800e912:	440b      	add	r3, r1
 800e914:	6123      	str	r3, [r4, #16]
 800e916:	f04f 0a00 	mov.w	sl, #0
 800e91a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e91c:	e7df      	b.n	800e8de <_printf_float+0x162>
 800e91e:	b913      	cbnz	r3, 800e926 <_printf_float+0x1aa>
 800e920:	6822      	ldr	r2, [r4, #0]
 800e922:	07d2      	lsls	r2, r2, #31
 800e924:	d501      	bpl.n	800e92a <_printf_float+0x1ae>
 800e926:	3302      	adds	r3, #2
 800e928:	e7f4      	b.n	800e914 <_printf_float+0x198>
 800e92a:	2301      	movs	r3, #1
 800e92c:	e7f2      	b.n	800e914 <_printf_float+0x198>
 800e92e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e934:	4299      	cmp	r1, r3
 800e936:	db05      	blt.n	800e944 <_printf_float+0x1c8>
 800e938:	6823      	ldr	r3, [r4, #0]
 800e93a:	6121      	str	r1, [r4, #16]
 800e93c:	07d8      	lsls	r0, r3, #31
 800e93e:	d5ea      	bpl.n	800e916 <_printf_float+0x19a>
 800e940:	1c4b      	adds	r3, r1, #1
 800e942:	e7e7      	b.n	800e914 <_printf_float+0x198>
 800e944:	2900      	cmp	r1, #0
 800e946:	bfcc      	ite	gt
 800e948:	2201      	movgt	r2, #1
 800e94a:	f1c1 0202 	rsble	r2, r1, #2
 800e94e:	4413      	add	r3, r2
 800e950:	e7e0      	b.n	800e914 <_printf_float+0x198>
 800e952:	6823      	ldr	r3, [r4, #0]
 800e954:	055a      	lsls	r2, r3, #21
 800e956:	d407      	bmi.n	800e968 <_printf_float+0x1ec>
 800e958:	6923      	ldr	r3, [r4, #16]
 800e95a:	4642      	mov	r2, r8
 800e95c:	4631      	mov	r1, r6
 800e95e:	4628      	mov	r0, r5
 800e960:	47b8      	blx	r7
 800e962:	3001      	adds	r0, #1
 800e964:	d12b      	bne.n	800e9be <_printf_float+0x242>
 800e966:	e764      	b.n	800e832 <_printf_float+0xb6>
 800e968:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e96c:	f240 80dd 	bls.w	800eb2a <_printf_float+0x3ae>
 800e970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e974:	2200      	movs	r2, #0
 800e976:	2300      	movs	r3, #0
 800e978:	f7f2 f838 	bl	80009ec <__aeabi_dcmpeq>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d033      	beq.n	800e9e8 <_printf_float+0x26c>
 800e980:	2301      	movs	r3, #1
 800e982:	4631      	mov	r1, r6
 800e984:	4628      	mov	r0, r5
 800e986:	4a35      	ldr	r2, [pc, #212]	; (800ea5c <_printf_float+0x2e0>)
 800e988:	47b8      	blx	r7
 800e98a:	3001      	adds	r0, #1
 800e98c:	f43f af51 	beq.w	800e832 <_printf_float+0xb6>
 800e990:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e994:	429a      	cmp	r2, r3
 800e996:	db02      	blt.n	800e99e <_printf_float+0x222>
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	07d8      	lsls	r0, r3, #31
 800e99c:	d50f      	bpl.n	800e9be <_printf_float+0x242>
 800e99e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9a2:	4631      	mov	r1, r6
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	47b8      	blx	r7
 800e9a8:	3001      	adds	r0, #1
 800e9aa:	f43f af42 	beq.w	800e832 <_printf_float+0xb6>
 800e9ae:	f04f 0800 	mov.w	r8, #0
 800e9b2:	f104 091a 	add.w	r9, r4, #26
 800e9b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9b8:	3b01      	subs	r3, #1
 800e9ba:	4543      	cmp	r3, r8
 800e9bc:	dc09      	bgt.n	800e9d2 <_printf_float+0x256>
 800e9be:	6823      	ldr	r3, [r4, #0]
 800e9c0:	079b      	lsls	r3, r3, #30
 800e9c2:	f100 8102 	bmi.w	800ebca <_printf_float+0x44e>
 800e9c6:	68e0      	ldr	r0, [r4, #12]
 800e9c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9ca:	4298      	cmp	r0, r3
 800e9cc:	bfb8      	it	lt
 800e9ce:	4618      	movlt	r0, r3
 800e9d0:	e731      	b.n	800e836 <_printf_float+0xba>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	464a      	mov	r2, r9
 800e9d6:	4631      	mov	r1, r6
 800e9d8:	4628      	mov	r0, r5
 800e9da:	47b8      	blx	r7
 800e9dc:	3001      	adds	r0, #1
 800e9de:	f43f af28 	beq.w	800e832 <_printf_float+0xb6>
 800e9e2:	f108 0801 	add.w	r8, r8, #1
 800e9e6:	e7e6      	b.n	800e9b6 <_printf_float+0x23a>
 800e9e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	dc38      	bgt.n	800ea60 <_printf_float+0x2e4>
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	4631      	mov	r1, r6
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	4a19      	ldr	r2, [pc, #100]	; (800ea5c <_printf_float+0x2e0>)
 800e9f6:	47b8      	blx	r7
 800e9f8:	3001      	adds	r0, #1
 800e9fa:	f43f af1a 	beq.w	800e832 <_printf_float+0xb6>
 800e9fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ea02:	4313      	orrs	r3, r2
 800ea04:	d102      	bne.n	800ea0c <_printf_float+0x290>
 800ea06:	6823      	ldr	r3, [r4, #0]
 800ea08:	07d9      	lsls	r1, r3, #31
 800ea0a:	d5d8      	bpl.n	800e9be <_printf_float+0x242>
 800ea0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea10:	4631      	mov	r1, r6
 800ea12:	4628      	mov	r0, r5
 800ea14:	47b8      	blx	r7
 800ea16:	3001      	adds	r0, #1
 800ea18:	f43f af0b 	beq.w	800e832 <_printf_float+0xb6>
 800ea1c:	f04f 0900 	mov.w	r9, #0
 800ea20:	f104 0a1a 	add.w	sl, r4, #26
 800ea24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea26:	425b      	negs	r3, r3
 800ea28:	454b      	cmp	r3, r9
 800ea2a:	dc01      	bgt.n	800ea30 <_printf_float+0x2b4>
 800ea2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea2e:	e794      	b.n	800e95a <_printf_float+0x1de>
 800ea30:	2301      	movs	r3, #1
 800ea32:	4652      	mov	r2, sl
 800ea34:	4631      	mov	r1, r6
 800ea36:	4628      	mov	r0, r5
 800ea38:	47b8      	blx	r7
 800ea3a:	3001      	adds	r0, #1
 800ea3c:	f43f aef9 	beq.w	800e832 <_printf_float+0xb6>
 800ea40:	f109 0901 	add.w	r9, r9, #1
 800ea44:	e7ee      	b.n	800ea24 <_printf_float+0x2a8>
 800ea46:	bf00      	nop
 800ea48:	7fefffff 	.word	0x7fefffff
 800ea4c:	08012c44 	.word	0x08012c44
 800ea50:	08012c48 	.word	0x08012c48
 800ea54:	08012c50 	.word	0x08012c50
 800ea58:	08012c4c 	.word	0x08012c4c
 800ea5c:	08012c54 	.word	0x08012c54
 800ea60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea64:	429a      	cmp	r2, r3
 800ea66:	bfa8      	it	ge
 800ea68:	461a      	movge	r2, r3
 800ea6a:	2a00      	cmp	r2, #0
 800ea6c:	4691      	mov	r9, r2
 800ea6e:	dc37      	bgt.n	800eae0 <_printf_float+0x364>
 800ea70:	f04f 0b00 	mov.w	fp, #0
 800ea74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea78:	f104 021a 	add.w	r2, r4, #26
 800ea7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ea80:	ebaa 0309 	sub.w	r3, sl, r9
 800ea84:	455b      	cmp	r3, fp
 800ea86:	dc33      	bgt.n	800eaf0 <_printf_float+0x374>
 800ea88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	db3b      	blt.n	800eb08 <_printf_float+0x38c>
 800ea90:	6823      	ldr	r3, [r4, #0]
 800ea92:	07da      	lsls	r2, r3, #31
 800ea94:	d438      	bmi.n	800eb08 <_printf_float+0x38c>
 800ea96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea98:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ea9a:	eba3 020a 	sub.w	r2, r3, sl
 800ea9e:	eba3 0901 	sub.w	r9, r3, r1
 800eaa2:	4591      	cmp	r9, r2
 800eaa4:	bfa8      	it	ge
 800eaa6:	4691      	movge	r9, r2
 800eaa8:	f1b9 0f00 	cmp.w	r9, #0
 800eaac:	dc34      	bgt.n	800eb18 <_printf_float+0x39c>
 800eaae:	f04f 0800 	mov.w	r8, #0
 800eab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eab6:	f104 0a1a 	add.w	sl, r4, #26
 800eaba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800eabe:	1a9b      	subs	r3, r3, r2
 800eac0:	eba3 0309 	sub.w	r3, r3, r9
 800eac4:	4543      	cmp	r3, r8
 800eac6:	f77f af7a 	ble.w	800e9be <_printf_float+0x242>
 800eaca:	2301      	movs	r3, #1
 800eacc:	4652      	mov	r2, sl
 800eace:	4631      	mov	r1, r6
 800ead0:	4628      	mov	r0, r5
 800ead2:	47b8      	blx	r7
 800ead4:	3001      	adds	r0, #1
 800ead6:	f43f aeac 	beq.w	800e832 <_printf_float+0xb6>
 800eada:	f108 0801 	add.w	r8, r8, #1
 800eade:	e7ec      	b.n	800eaba <_printf_float+0x33e>
 800eae0:	4613      	mov	r3, r2
 800eae2:	4631      	mov	r1, r6
 800eae4:	4642      	mov	r2, r8
 800eae6:	4628      	mov	r0, r5
 800eae8:	47b8      	blx	r7
 800eaea:	3001      	adds	r0, #1
 800eaec:	d1c0      	bne.n	800ea70 <_printf_float+0x2f4>
 800eaee:	e6a0      	b.n	800e832 <_printf_float+0xb6>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	4631      	mov	r1, r6
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	920b      	str	r2, [sp, #44]	; 0x2c
 800eaf8:	47b8      	blx	r7
 800eafa:	3001      	adds	r0, #1
 800eafc:	f43f ae99 	beq.w	800e832 <_printf_float+0xb6>
 800eb00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb02:	f10b 0b01 	add.w	fp, fp, #1
 800eb06:	e7b9      	b.n	800ea7c <_printf_float+0x300>
 800eb08:	4631      	mov	r1, r6
 800eb0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb0e:	4628      	mov	r0, r5
 800eb10:	47b8      	blx	r7
 800eb12:	3001      	adds	r0, #1
 800eb14:	d1bf      	bne.n	800ea96 <_printf_float+0x31a>
 800eb16:	e68c      	b.n	800e832 <_printf_float+0xb6>
 800eb18:	464b      	mov	r3, r9
 800eb1a:	4631      	mov	r1, r6
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	eb08 020a 	add.w	r2, r8, sl
 800eb22:	47b8      	blx	r7
 800eb24:	3001      	adds	r0, #1
 800eb26:	d1c2      	bne.n	800eaae <_printf_float+0x332>
 800eb28:	e683      	b.n	800e832 <_printf_float+0xb6>
 800eb2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb2c:	2a01      	cmp	r2, #1
 800eb2e:	dc01      	bgt.n	800eb34 <_printf_float+0x3b8>
 800eb30:	07db      	lsls	r3, r3, #31
 800eb32:	d537      	bpl.n	800eba4 <_printf_float+0x428>
 800eb34:	2301      	movs	r3, #1
 800eb36:	4642      	mov	r2, r8
 800eb38:	4631      	mov	r1, r6
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	47b8      	blx	r7
 800eb3e:	3001      	adds	r0, #1
 800eb40:	f43f ae77 	beq.w	800e832 <_printf_float+0xb6>
 800eb44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb48:	4631      	mov	r1, r6
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	47b8      	blx	r7
 800eb4e:	3001      	adds	r0, #1
 800eb50:	f43f ae6f 	beq.w	800e832 <_printf_float+0xb6>
 800eb54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb58:	2200      	movs	r2, #0
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	f7f1 ff46 	bl	80009ec <__aeabi_dcmpeq>
 800eb60:	b9d8      	cbnz	r0, 800eb9a <_printf_float+0x41e>
 800eb62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb64:	f108 0201 	add.w	r2, r8, #1
 800eb68:	3b01      	subs	r3, #1
 800eb6a:	4631      	mov	r1, r6
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	47b8      	blx	r7
 800eb70:	3001      	adds	r0, #1
 800eb72:	d10e      	bne.n	800eb92 <_printf_float+0x416>
 800eb74:	e65d      	b.n	800e832 <_printf_float+0xb6>
 800eb76:	2301      	movs	r3, #1
 800eb78:	464a      	mov	r2, r9
 800eb7a:	4631      	mov	r1, r6
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	47b8      	blx	r7
 800eb80:	3001      	adds	r0, #1
 800eb82:	f43f ae56 	beq.w	800e832 <_printf_float+0xb6>
 800eb86:	f108 0801 	add.w	r8, r8, #1
 800eb8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	4543      	cmp	r3, r8
 800eb90:	dcf1      	bgt.n	800eb76 <_printf_float+0x3fa>
 800eb92:	4653      	mov	r3, sl
 800eb94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb98:	e6e0      	b.n	800e95c <_printf_float+0x1e0>
 800eb9a:	f04f 0800 	mov.w	r8, #0
 800eb9e:	f104 091a 	add.w	r9, r4, #26
 800eba2:	e7f2      	b.n	800eb8a <_printf_float+0x40e>
 800eba4:	2301      	movs	r3, #1
 800eba6:	4642      	mov	r2, r8
 800eba8:	e7df      	b.n	800eb6a <_printf_float+0x3ee>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	464a      	mov	r2, r9
 800ebae:	4631      	mov	r1, r6
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	47b8      	blx	r7
 800ebb4:	3001      	adds	r0, #1
 800ebb6:	f43f ae3c 	beq.w	800e832 <_printf_float+0xb6>
 800ebba:	f108 0801 	add.w	r8, r8, #1
 800ebbe:	68e3      	ldr	r3, [r4, #12]
 800ebc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ebc2:	1a5b      	subs	r3, r3, r1
 800ebc4:	4543      	cmp	r3, r8
 800ebc6:	dcf0      	bgt.n	800ebaa <_printf_float+0x42e>
 800ebc8:	e6fd      	b.n	800e9c6 <_printf_float+0x24a>
 800ebca:	f04f 0800 	mov.w	r8, #0
 800ebce:	f104 0919 	add.w	r9, r4, #25
 800ebd2:	e7f4      	b.n	800ebbe <_printf_float+0x442>

0800ebd4 <_printf_common>:
 800ebd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd8:	4616      	mov	r6, r2
 800ebda:	4699      	mov	r9, r3
 800ebdc:	688a      	ldr	r2, [r1, #8]
 800ebde:	690b      	ldr	r3, [r1, #16]
 800ebe0:	4607      	mov	r7, r0
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	bfb8      	it	lt
 800ebe6:	4613      	movlt	r3, r2
 800ebe8:	6033      	str	r3, [r6, #0]
 800ebea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ebee:	460c      	mov	r4, r1
 800ebf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ebf4:	b10a      	cbz	r2, 800ebfa <_printf_common+0x26>
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	6033      	str	r3, [r6, #0]
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	0699      	lsls	r1, r3, #26
 800ebfe:	bf42      	ittt	mi
 800ec00:	6833      	ldrmi	r3, [r6, #0]
 800ec02:	3302      	addmi	r3, #2
 800ec04:	6033      	strmi	r3, [r6, #0]
 800ec06:	6825      	ldr	r5, [r4, #0]
 800ec08:	f015 0506 	ands.w	r5, r5, #6
 800ec0c:	d106      	bne.n	800ec1c <_printf_common+0x48>
 800ec0e:	f104 0a19 	add.w	sl, r4, #25
 800ec12:	68e3      	ldr	r3, [r4, #12]
 800ec14:	6832      	ldr	r2, [r6, #0]
 800ec16:	1a9b      	subs	r3, r3, r2
 800ec18:	42ab      	cmp	r3, r5
 800ec1a:	dc28      	bgt.n	800ec6e <_printf_common+0x9a>
 800ec1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec20:	1e13      	subs	r3, r2, #0
 800ec22:	6822      	ldr	r2, [r4, #0]
 800ec24:	bf18      	it	ne
 800ec26:	2301      	movne	r3, #1
 800ec28:	0692      	lsls	r2, r2, #26
 800ec2a:	d42d      	bmi.n	800ec88 <_printf_common+0xb4>
 800ec2c:	4649      	mov	r1, r9
 800ec2e:	4638      	mov	r0, r7
 800ec30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec34:	47c0      	blx	r8
 800ec36:	3001      	adds	r0, #1
 800ec38:	d020      	beq.n	800ec7c <_printf_common+0xa8>
 800ec3a:	6823      	ldr	r3, [r4, #0]
 800ec3c:	68e5      	ldr	r5, [r4, #12]
 800ec3e:	f003 0306 	and.w	r3, r3, #6
 800ec42:	2b04      	cmp	r3, #4
 800ec44:	bf18      	it	ne
 800ec46:	2500      	movne	r5, #0
 800ec48:	6832      	ldr	r2, [r6, #0]
 800ec4a:	f04f 0600 	mov.w	r6, #0
 800ec4e:	68a3      	ldr	r3, [r4, #8]
 800ec50:	bf08      	it	eq
 800ec52:	1aad      	subeq	r5, r5, r2
 800ec54:	6922      	ldr	r2, [r4, #16]
 800ec56:	bf08      	it	eq
 800ec58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	bfc4      	itt	gt
 800ec60:	1a9b      	subgt	r3, r3, r2
 800ec62:	18ed      	addgt	r5, r5, r3
 800ec64:	341a      	adds	r4, #26
 800ec66:	42b5      	cmp	r5, r6
 800ec68:	d11a      	bne.n	800eca0 <_printf_common+0xcc>
 800ec6a:	2000      	movs	r0, #0
 800ec6c:	e008      	b.n	800ec80 <_printf_common+0xac>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	4652      	mov	r2, sl
 800ec72:	4649      	mov	r1, r9
 800ec74:	4638      	mov	r0, r7
 800ec76:	47c0      	blx	r8
 800ec78:	3001      	adds	r0, #1
 800ec7a:	d103      	bne.n	800ec84 <_printf_common+0xb0>
 800ec7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec84:	3501      	adds	r5, #1
 800ec86:	e7c4      	b.n	800ec12 <_printf_common+0x3e>
 800ec88:	2030      	movs	r0, #48	; 0x30
 800ec8a:	18e1      	adds	r1, r4, r3
 800ec8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec90:	1c5a      	adds	r2, r3, #1
 800ec92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec96:	4422      	add	r2, r4
 800ec98:	3302      	adds	r3, #2
 800ec9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec9e:	e7c5      	b.n	800ec2c <_printf_common+0x58>
 800eca0:	2301      	movs	r3, #1
 800eca2:	4622      	mov	r2, r4
 800eca4:	4649      	mov	r1, r9
 800eca6:	4638      	mov	r0, r7
 800eca8:	47c0      	blx	r8
 800ecaa:	3001      	adds	r0, #1
 800ecac:	d0e6      	beq.n	800ec7c <_printf_common+0xa8>
 800ecae:	3601      	adds	r6, #1
 800ecb0:	e7d9      	b.n	800ec66 <_printf_common+0x92>
	...

0800ecb4 <_printf_i>:
 800ecb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb8:	7e0f      	ldrb	r7, [r1, #24]
 800ecba:	4691      	mov	r9, r2
 800ecbc:	2f78      	cmp	r7, #120	; 0x78
 800ecbe:	4680      	mov	r8, r0
 800ecc0:	460c      	mov	r4, r1
 800ecc2:	469a      	mov	sl, r3
 800ecc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ecc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ecca:	d807      	bhi.n	800ecdc <_printf_i+0x28>
 800eccc:	2f62      	cmp	r7, #98	; 0x62
 800ecce:	d80a      	bhi.n	800ece6 <_printf_i+0x32>
 800ecd0:	2f00      	cmp	r7, #0
 800ecd2:	f000 80d9 	beq.w	800ee88 <_printf_i+0x1d4>
 800ecd6:	2f58      	cmp	r7, #88	; 0x58
 800ecd8:	f000 80a4 	beq.w	800ee24 <_printf_i+0x170>
 800ecdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ece0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ece4:	e03a      	b.n	800ed5c <_printf_i+0xa8>
 800ece6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ecea:	2b15      	cmp	r3, #21
 800ecec:	d8f6      	bhi.n	800ecdc <_printf_i+0x28>
 800ecee:	a101      	add	r1, pc, #4	; (adr r1, 800ecf4 <_printf_i+0x40>)
 800ecf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ecf4:	0800ed4d 	.word	0x0800ed4d
 800ecf8:	0800ed61 	.word	0x0800ed61
 800ecfc:	0800ecdd 	.word	0x0800ecdd
 800ed00:	0800ecdd 	.word	0x0800ecdd
 800ed04:	0800ecdd 	.word	0x0800ecdd
 800ed08:	0800ecdd 	.word	0x0800ecdd
 800ed0c:	0800ed61 	.word	0x0800ed61
 800ed10:	0800ecdd 	.word	0x0800ecdd
 800ed14:	0800ecdd 	.word	0x0800ecdd
 800ed18:	0800ecdd 	.word	0x0800ecdd
 800ed1c:	0800ecdd 	.word	0x0800ecdd
 800ed20:	0800ee6f 	.word	0x0800ee6f
 800ed24:	0800ed91 	.word	0x0800ed91
 800ed28:	0800ee51 	.word	0x0800ee51
 800ed2c:	0800ecdd 	.word	0x0800ecdd
 800ed30:	0800ecdd 	.word	0x0800ecdd
 800ed34:	0800ee91 	.word	0x0800ee91
 800ed38:	0800ecdd 	.word	0x0800ecdd
 800ed3c:	0800ed91 	.word	0x0800ed91
 800ed40:	0800ecdd 	.word	0x0800ecdd
 800ed44:	0800ecdd 	.word	0x0800ecdd
 800ed48:	0800ee59 	.word	0x0800ee59
 800ed4c:	682b      	ldr	r3, [r5, #0]
 800ed4e:	1d1a      	adds	r2, r3, #4
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	602a      	str	r2, [r5, #0]
 800ed54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e0a4      	b.n	800eeaa <_printf_i+0x1f6>
 800ed60:	6820      	ldr	r0, [r4, #0]
 800ed62:	6829      	ldr	r1, [r5, #0]
 800ed64:	0606      	lsls	r6, r0, #24
 800ed66:	f101 0304 	add.w	r3, r1, #4
 800ed6a:	d50a      	bpl.n	800ed82 <_printf_i+0xce>
 800ed6c:	680e      	ldr	r6, [r1, #0]
 800ed6e:	602b      	str	r3, [r5, #0]
 800ed70:	2e00      	cmp	r6, #0
 800ed72:	da03      	bge.n	800ed7c <_printf_i+0xc8>
 800ed74:	232d      	movs	r3, #45	; 0x2d
 800ed76:	4276      	negs	r6, r6
 800ed78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed7c:	230a      	movs	r3, #10
 800ed7e:	485e      	ldr	r0, [pc, #376]	; (800eef8 <_printf_i+0x244>)
 800ed80:	e019      	b.n	800edb6 <_printf_i+0x102>
 800ed82:	680e      	ldr	r6, [r1, #0]
 800ed84:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed88:	602b      	str	r3, [r5, #0]
 800ed8a:	bf18      	it	ne
 800ed8c:	b236      	sxthne	r6, r6
 800ed8e:	e7ef      	b.n	800ed70 <_printf_i+0xbc>
 800ed90:	682b      	ldr	r3, [r5, #0]
 800ed92:	6820      	ldr	r0, [r4, #0]
 800ed94:	1d19      	adds	r1, r3, #4
 800ed96:	6029      	str	r1, [r5, #0]
 800ed98:	0601      	lsls	r1, r0, #24
 800ed9a:	d501      	bpl.n	800eda0 <_printf_i+0xec>
 800ed9c:	681e      	ldr	r6, [r3, #0]
 800ed9e:	e002      	b.n	800eda6 <_printf_i+0xf2>
 800eda0:	0646      	lsls	r6, r0, #25
 800eda2:	d5fb      	bpl.n	800ed9c <_printf_i+0xe8>
 800eda4:	881e      	ldrh	r6, [r3, #0]
 800eda6:	2f6f      	cmp	r7, #111	; 0x6f
 800eda8:	bf0c      	ite	eq
 800edaa:	2308      	moveq	r3, #8
 800edac:	230a      	movne	r3, #10
 800edae:	4852      	ldr	r0, [pc, #328]	; (800eef8 <_printf_i+0x244>)
 800edb0:	2100      	movs	r1, #0
 800edb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800edb6:	6865      	ldr	r5, [r4, #4]
 800edb8:	2d00      	cmp	r5, #0
 800edba:	bfa8      	it	ge
 800edbc:	6821      	ldrge	r1, [r4, #0]
 800edbe:	60a5      	str	r5, [r4, #8]
 800edc0:	bfa4      	itt	ge
 800edc2:	f021 0104 	bicge.w	r1, r1, #4
 800edc6:	6021      	strge	r1, [r4, #0]
 800edc8:	b90e      	cbnz	r6, 800edce <_printf_i+0x11a>
 800edca:	2d00      	cmp	r5, #0
 800edcc:	d04d      	beq.n	800ee6a <_printf_i+0x1b6>
 800edce:	4615      	mov	r5, r2
 800edd0:	fbb6 f1f3 	udiv	r1, r6, r3
 800edd4:	fb03 6711 	mls	r7, r3, r1, r6
 800edd8:	5dc7      	ldrb	r7, [r0, r7]
 800edda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800edde:	4637      	mov	r7, r6
 800ede0:	42bb      	cmp	r3, r7
 800ede2:	460e      	mov	r6, r1
 800ede4:	d9f4      	bls.n	800edd0 <_printf_i+0x11c>
 800ede6:	2b08      	cmp	r3, #8
 800ede8:	d10b      	bne.n	800ee02 <_printf_i+0x14e>
 800edea:	6823      	ldr	r3, [r4, #0]
 800edec:	07de      	lsls	r6, r3, #31
 800edee:	d508      	bpl.n	800ee02 <_printf_i+0x14e>
 800edf0:	6923      	ldr	r3, [r4, #16]
 800edf2:	6861      	ldr	r1, [r4, #4]
 800edf4:	4299      	cmp	r1, r3
 800edf6:	bfde      	ittt	le
 800edf8:	2330      	movle	r3, #48	; 0x30
 800edfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800edfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee02:	1b52      	subs	r2, r2, r5
 800ee04:	6122      	str	r2, [r4, #16]
 800ee06:	464b      	mov	r3, r9
 800ee08:	4621      	mov	r1, r4
 800ee0a:	4640      	mov	r0, r8
 800ee0c:	f8cd a000 	str.w	sl, [sp]
 800ee10:	aa03      	add	r2, sp, #12
 800ee12:	f7ff fedf 	bl	800ebd4 <_printf_common>
 800ee16:	3001      	adds	r0, #1
 800ee18:	d14c      	bne.n	800eeb4 <_printf_i+0x200>
 800ee1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee1e:	b004      	add	sp, #16
 800ee20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee24:	4834      	ldr	r0, [pc, #208]	; (800eef8 <_printf_i+0x244>)
 800ee26:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ee2a:	6829      	ldr	r1, [r5, #0]
 800ee2c:	6823      	ldr	r3, [r4, #0]
 800ee2e:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee32:	6029      	str	r1, [r5, #0]
 800ee34:	061d      	lsls	r5, r3, #24
 800ee36:	d514      	bpl.n	800ee62 <_printf_i+0x1ae>
 800ee38:	07df      	lsls	r7, r3, #31
 800ee3a:	bf44      	itt	mi
 800ee3c:	f043 0320 	orrmi.w	r3, r3, #32
 800ee40:	6023      	strmi	r3, [r4, #0]
 800ee42:	b91e      	cbnz	r6, 800ee4c <_printf_i+0x198>
 800ee44:	6823      	ldr	r3, [r4, #0]
 800ee46:	f023 0320 	bic.w	r3, r3, #32
 800ee4a:	6023      	str	r3, [r4, #0]
 800ee4c:	2310      	movs	r3, #16
 800ee4e:	e7af      	b.n	800edb0 <_printf_i+0xfc>
 800ee50:	6823      	ldr	r3, [r4, #0]
 800ee52:	f043 0320 	orr.w	r3, r3, #32
 800ee56:	6023      	str	r3, [r4, #0]
 800ee58:	2378      	movs	r3, #120	; 0x78
 800ee5a:	4828      	ldr	r0, [pc, #160]	; (800eefc <_printf_i+0x248>)
 800ee5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee60:	e7e3      	b.n	800ee2a <_printf_i+0x176>
 800ee62:	0659      	lsls	r1, r3, #25
 800ee64:	bf48      	it	mi
 800ee66:	b2b6      	uxthmi	r6, r6
 800ee68:	e7e6      	b.n	800ee38 <_printf_i+0x184>
 800ee6a:	4615      	mov	r5, r2
 800ee6c:	e7bb      	b.n	800ede6 <_printf_i+0x132>
 800ee6e:	682b      	ldr	r3, [r5, #0]
 800ee70:	6826      	ldr	r6, [r4, #0]
 800ee72:	1d18      	adds	r0, r3, #4
 800ee74:	6961      	ldr	r1, [r4, #20]
 800ee76:	6028      	str	r0, [r5, #0]
 800ee78:	0635      	lsls	r5, r6, #24
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	d501      	bpl.n	800ee82 <_printf_i+0x1ce>
 800ee7e:	6019      	str	r1, [r3, #0]
 800ee80:	e002      	b.n	800ee88 <_printf_i+0x1d4>
 800ee82:	0670      	lsls	r0, r6, #25
 800ee84:	d5fb      	bpl.n	800ee7e <_printf_i+0x1ca>
 800ee86:	8019      	strh	r1, [r3, #0]
 800ee88:	2300      	movs	r3, #0
 800ee8a:	4615      	mov	r5, r2
 800ee8c:	6123      	str	r3, [r4, #16]
 800ee8e:	e7ba      	b.n	800ee06 <_printf_i+0x152>
 800ee90:	682b      	ldr	r3, [r5, #0]
 800ee92:	2100      	movs	r1, #0
 800ee94:	1d1a      	adds	r2, r3, #4
 800ee96:	602a      	str	r2, [r5, #0]
 800ee98:	681d      	ldr	r5, [r3, #0]
 800ee9a:	6862      	ldr	r2, [r4, #4]
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	f002 f8fb 	bl	8011098 <memchr>
 800eea2:	b108      	cbz	r0, 800eea8 <_printf_i+0x1f4>
 800eea4:	1b40      	subs	r0, r0, r5
 800eea6:	6060      	str	r0, [r4, #4]
 800eea8:	6863      	ldr	r3, [r4, #4]
 800eeaa:	6123      	str	r3, [r4, #16]
 800eeac:	2300      	movs	r3, #0
 800eeae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eeb2:	e7a8      	b.n	800ee06 <_printf_i+0x152>
 800eeb4:	462a      	mov	r2, r5
 800eeb6:	4649      	mov	r1, r9
 800eeb8:	4640      	mov	r0, r8
 800eeba:	6923      	ldr	r3, [r4, #16]
 800eebc:	47d0      	blx	sl
 800eebe:	3001      	adds	r0, #1
 800eec0:	d0ab      	beq.n	800ee1a <_printf_i+0x166>
 800eec2:	6823      	ldr	r3, [r4, #0]
 800eec4:	079b      	lsls	r3, r3, #30
 800eec6:	d413      	bmi.n	800eef0 <_printf_i+0x23c>
 800eec8:	68e0      	ldr	r0, [r4, #12]
 800eeca:	9b03      	ldr	r3, [sp, #12]
 800eecc:	4298      	cmp	r0, r3
 800eece:	bfb8      	it	lt
 800eed0:	4618      	movlt	r0, r3
 800eed2:	e7a4      	b.n	800ee1e <_printf_i+0x16a>
 800eed4:	2301      	movs	r3, #1
 800eed6:	4632      	mov	r2, r6
 800eed8:	4649      	mov	r1, r9
 800eeda:	4640      	mov	r0, r8
 800eedc:	47d0      	blx	sl
 800eede:	3001      	adds	r0, #1
 800eee0:	d09b      	beq.n	800ee1a <_printf_i+0x166>
 800eee2:	3501      	adds	r5, #1
 800eee4:	68e3      	ldr	r3, [r4, #12]
 800eee6:	9903      	ldr	r1, [sp, #12]
 800eee8:	1a5b      	subs	r3, r3, r1
 800eeea:	42ab      	cmp	r3, r5
 800eeec:	dcf2      	bgt.n	800eed4 <_printf_i+0x220>
 800eeee:	e7eb      	b.n	800eec8 <_printf_i+0x214>
 800eef0:	2500      	movs	r5, #0
 800eef2:	f104 0619 	add.w	r6, r4, #25
 800eef6:	e7f5      	b.n	800eee4 <_printf_i+0x230>
 800eef8:	08012c56 	.word	0x08012c56
 800eefc:	08012c67 	.word	0x08012c67

0800ef00 <siprintf>:
 800ef00:	b40e      	push	{r1, r2, r3}
 800ef02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef06:	b500      	push	{lr}
 800ef08:	b09c      	sub	sp, #112	; 0x70
 800ef0a:	ab1d      	add	r3, sp, #116	; 0x74
 800ef0c:	9002      	str	r0, [sp, #8]
 800ef0e:	9006      	str	r0, [sp, #24]
 800ef10:	9107      	str	r1, [sp, #28]
 800ef12:	9104      	str	r1, [sp, #16]
 800ef14:	4808      	ldr	r0, [pc, #32]	; (800ef38 <siprintf+0x38>)
 800ef16:	4909      	ldr	r1, [pc, #36]	; (800ef3c <siprintf+0x3c>)
 800ef18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef1c:	9105      	str	r1, [sp, #20]
 800ef1e:	6800      	ldr	r0, [r0, #0]
 800ef20:	a902      	add	r1, sp, #8
 800ef22:	9301      	str	r3, [sp, #4]
 800ef24:	f002 feca 	bl	8011cbc <_svfiprintf_r>
 800ef28:	2200      	movs	r2, #0
 800ef2a:	9b02      	ldr	r3, [sp, #8]
 800ef2c:	701a      	strb	r2, [r3, #0]
 800ef2e:	b01c      	add	sp, #112	; 0x70
 800ef30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef34:	b003      	add	sp, #12
 800ef36:	4770      	bx	lr
 800ef38:	200008bc 	.word	0x200008bc
 800ef3c:	ffff0208 	.word	0xffff0208

0800ef40 <strcpy>:
 800ef40:	4603      	mov	r3, r0
 800ef42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef46:	f803 2b01 	strb.w	r2, [r3], #1
 800ef4a:	2a00      	cmp	r2, #0
 800ef4c:	d1f9      	bne.n	800ef42 <strcpy+0x2>
 800ef4e:	4770      	bx	lr

0800ef50 <sulp>:
 800ef50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef54:	460f      	mov	r7, r1
 800ef56:	4690      	mov	r8, r2
 800ef58:	f002 fc1c 	bl	8011794 <__ulp>
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	460d      	mov	r5, r1
 800ef60:	f1b8 0f00 	cmp.w	r8, #0
 800ef64:	d011      	beq.n	800ef8a <sulp+0x3a>
 800ef66:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ef6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	dd0b      	ble.n	800ef8a <sulp+0x3a>
 800ef72:	2400      	movs	r4, #0
 800ef74:	051b      	lsls	r3, r3, #20
 800ef76:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ef7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ef7e:	4622      	mov	r2, r4
 800ef80:	462b      	mov	r3, r5
 800ef82:	f7f1 facb 	bl	800051c <__aeabi_dmul>
 800ef86:	4604      	mov	r4, r0
 800ef88:	460d      	mov	r5, r1
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef92:	0000      	movs	r0, r0
 800ef94:	0000      	movs	r0, r0
	...

0800ef98 <_strtod_l>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	469b      	mov	fp, r3
 800ef9e:	2300      	movs	r3, #0
 800efa0:	b09f      	sub	sp, #124	; 0x7c
 800efa2:	931a      	str	r3, [sp, #104]	; 0x68
 800efa4:	4b9e      	ldr	r3, [pc, #632]	; (800f220 <_strtod_l+0x288>)
 800efa6:	4682      	mov	sl, r0
 800efa8:	681f      	ldr	r7, [r3, #0]
 800efaa:	460e      	mov	r6, r1
 800efac:	4638      	mov	r0, r7
 800efae:	9215      	str	r2, [sp, #84]	; 0x54
 800efb0:	f7f1 f8f0 	bl	8000194 <strlen>
 800efb4:	f04f 0800 	mov.w	r8, #0
 800efb8:	4604      	mov	r4, r0
 800efba:	f04f 0900 	mov.w	r9, #0
 800efbe:	9619      	str	r6, [sp, #100]	; 0x64
 800efc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800efc2:	781a      	ldrb	r2, [r3, #0]
 800efc4:	2a2b      	cmp	r2, #43	; 0x2b
 800efc6:	d04c      	beq.n	800f062 <_strtod_l+0xca>
 800efc8:	d83a      	bhi.n	800f040 <_strtod_l+0xa8>
 800efca:	2a0d      	cmp	r2, #13
 800efcc:	d833      	bhi.n	800f036 <_strtod_l+0x9e>
 800efce:	2a08      	cmp	r2, #8
 800efd0:	d833      	bhi.n	800f03a <_strtod_l+0xa2>
 800efd2:	2a00      	cmp	r2, #0
 800efd4:	d03d      	beq.n	800f052 <_strtod_l+0xba>
 800efd6:	2300      	movs	r3, #0
 800efd8:	930a      	str	r3, [sp, #40]	; 0x28
 800efda:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800efdc:	782b      	ldrb	r3, [r5, #0]
 800efde:	2b30      	cmp	r3, #48	; 0x30
 800efe0:	f040 80aa 	bne.w	800f138 <_strtod_l+0x1a0>
 800efe4:	786b      	ldrb	r3, [r5, #1]
 800efe6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800efea:	2b58      	cmp	r3, #88	; 0x58
 800efec:	d166      	bne.n	800f0bc <_strtod_l+0x124>
 800efee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eff0:	4650      	mov	r0, sl
 800eff2:	9301      	str	r3, [sp, #4]
 800eff4:	ab1a      	add	r3, sp, #104	; 0x68
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	4a8a      	ldr	r2, [pc, #552]	; (800f224 <_strtod_l+0x28c>)
 800effa:	f8cd b008 	str.w	fp, [sp, #8]
 800effe:	ab1b      	add	r3, sp, #108	; 0x6c
 800f000:	a919      	add	r1, sp, #100	; 0x64
 800f002:	f001 fd2d 	bl	8010a60 <__gethex>
 800f006:	f010 0607 	ands.w	r6, r0, #7
 800f00a:	4604      	mov	r4, r0
 800f00c:	d005      	beq.n	800f01a <_strtod_l+0x82>
 800f00e:	2e06      	cmp	r6, #6
 800f010:	d129      	bne.n	800f066 <_strtod_l+0xce>
 800f012:	2300      	movs	r3, #0
 800f014:	3501      	adds	r5, #1
 800f016:	9519      	str	r5, [sp, #100]	; 0x64
 800f018:	930a      	str	r3, [sp, #40]	; 0x28
 800f01a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f040 858a 	bne.w	800fb36 <_strtod_l+0xb9e>
 800f022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f024:	b1d3      	cbz	r3, 800f05c <_strtod_l+0xc4>
 800f026:	4642      	mov	r2, r8
 800f028:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f02c:	4610      	mov	r0, r2
 800f02e:	4619      	mov	r1, r3
 800f030:	b01f      	add	sp, #124	; 0x7c
 800f032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f036:	2a20      	cmp	r2, #32
 800f038:	d1cd      	bne.n	800efd6 <_strtod_l+0x3e>
 800f03a:	3301      	adds	r3, #1
 800f03c:	9319      	str	r3, [sp, #100]	; 0x64
 800f03e:	e7bf      	b.n	800efc0 <_strtod_l+0x28>
 800f040:	2a2d      	cmp	r2, #45	; 0x2d
 800f042:	d1c8      	bne.n	800efd6 <_strtod_l+0x3e>
 800f044:	2201      	movs	r2, #1
 800f046:	920a      	str	r2, [sp, #40]	; 0x28
 800f048:	1c5a      	adds	r2, r3, #1
 800f04a:	9219      	str	r2, [sp, #100]	; 0x64
 800f04c:	785b      	ldrb	r3, [r3, #1]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1c3      	bne.n	800efda <_strtod_l+0x42>
 800f052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f054:	9619      	str	r6, [sp, #100]	; 0x64
 800f056:	2b00      	cmp	r3, #0
 800f058:	f040 856b 	bne.w	800fb32 <_strtod_l+0xb9a>
 800f05c:	4642      	mov	r2, r8
 800f05e:	464b      	mov	r3, r9
 800f060:	e7e4      	b.n	800f02c <_strtod_l+0x94>
 800f062:	2200      	movs	r2, #0
 800f064:	e7ef      	b.n	800f046 <_strtod_l+0xae>
 800f066:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f068:	b13a      	cbz	r2, 800f07a <_strtod_l+0xe2>
 800f06a:	2135      	movs	r1, #53	; 0x35
 800f06c:	a81c      	add	r0, sp, #112	; 0x70
 800f06e:	f002 fc95 	bl	801199c <__copybits>
 800f072:	4650      	mov	r0, sl
 800f074:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f076:	f002 f85d 	bl	8011134 <_Bfree>
 800f07a:	3e01      	subs	r6, #1
 800f07c:	2e04      	cmp	r6, #4
 800f07e:	d806      	bhi.n	800f08e <_strtod_l+0xf6>
 800f080:	e8df f006 	tbb	[pc, r6]
 800f084:	1714030a 	.word	0x1714030a
 800f088:	0a          	.byte	0x0a
 800f089:	00          	.byte	0x00
 800f08a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800f08e:	0721      	lsls	r1, r4, #28
 800f090:	d5c3      	bpl.n	800f01a <_strtod_l+0x82>
 800f092:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f096:	e7c0      	b.n	800f01a <_strtod_l+0x82>
 800f098:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f09a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800f09e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f0a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f0a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f0aa:	e7f0      	b.n	800f08e <_strtod_l+0xf6>
 800f0ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f228 <_strtod_l+0x290>
 800f0b0:	e7ed      	b.n	800f08e <_strtod_l+0xf6>
 800f0b2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f0b6:	f04f 38ff 	mov.w	r8, #4294967295
 800f0ba:	e7e8      	b.n	800f08e <_strtod_l+0xf6>
 800f0bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f0be:	1c5a      	adds	r2, r3, #1
 800f0c0:	9219      	str	r2, [sp, #100]	; 0x64
 800f0c2:	785b      	ldrb	r3, [r3, #1]
 800f0c4:	2b30      	cmp	r3, #48	; 0x30
 800f0c6:	d0f9      	beq.n	800f0bc <_strtod_l+0x124>
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d0a6      	beq.n	800f01a <_strtod_l+0x82>
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	9307      	str	r3, [sp, #28]
 800f0d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f0d2:	220a      	movs	r2, #10
 800f0d4:	9308      	str	r3, [sp, #32]
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	469b      	mov	fp, r3
 800f0da:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f0de:	9819      	ldr	r0, [sp, #100]	; 0x64
 800f0e0:	7805      	ldrb	r5, [r0, #0]
 800f0e2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800f0e6:	b2d9      	uxtb	r1, r3
 800f0e8:	2909      	cmp	r1, #9
 800f0ea:	d927      	bls.n	800f13c <_strtod_l+0x1a4>
 800f0ec:	4622      	mov	r2, r4
 800f0ee:	4639      	mov	r1, r7
 800f0f0:	f003 f852 	bl	8012198 <strncmp>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d033      	beq.n	800f160 <_strtod_l+0x1c8>
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	462a      	mov	r2, r5
 800f0fc:	465c      	mov	r4, fp
 800f0fe:	4603      	mov	r3, r0
 800f100:	9004      	str	r0, [sp, #16]
 800f102:	2a65      	cmp	r2, #101	; 0x65
 800f104:	d001      	beq.n	800f10a <_strtod_l+0x172>
 800f106:	2a45      	cmp	r2, #69	; 0x45
 800f108:	d114      	bne.n	800f134 <_strtod_l+0x19c>
 800f10a:	b91c      	cbnz	r4, 800f114 <_strtod_l+0x17c>
 800f10c:	9a07      	ldr	r2, [sp, #28]
 800f10e:	4302      	orrs	r2, r0
 800f110:	d09f      	beq.n	800f052 <_strtod_l+0xba>
 800f112:	2400      	movs	r4, #0
 800f114:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800f116:	1c72      	adds	r2, r6, #1
 800f118:	9219      	str	r2, [sp, #100]	; 0x64
 800f11a:	7872      	ldrb	r2, [r6, #1]
 800f11c:	2a2b      	cmp	r2, #43	; 0x2b
 800f11e:	d079      	beq.n	800f214 <_strtod_l+0x27c>
 800f120:	2a2d      	cmp	r2, #45	; 0x2d
 800f122:	f000 8083 	beq.w	800f22c <_strtod_l+0x294>
 800f126:	2700      	movs	r7, #0
 800f128:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f12c:	2909      	cmp	r1, #9
 800f12e:	f240 8083 	bls.w	800f238 <_strtod_l+0x2a0>
 800f132:	9619      	str	r6, [sp, #100]	; 0x64
 800f134:	2500      	movs	r5, #0
 800f136:	e09f      	b.n	800f278 <_strtod_l+0x2e0>
 800f138:	2300      	movs	r3, #0
 800f13a:	e7c8      	b.n	800f0ce <_strtod_l+0x136>
 800f13c:	f1bb 0f08 	cmp.w	fp, #8
 800f140:	bfd5      	itete	le
 800f142:	9906      	ldrle	r1, [sp, #24]
 800f144:	9905      	ldrgt	r1, [sp, #20]
 800f146:	fb02 3301 	mlale	r3, r2, r1, r3
 800f14a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f14e:	f100 0001 	add.w	r0, r0, #1
 800f152:	bfd4      	ite	le
 800f154:	9306      	strle	r3, [sp, #24]
 800f156:	9305      	strgt	r3, [sp, #20]
 800f158:	f10b 0b01 	add.w	fp, fp, #1
 800f15c:	9019      	str	r0, [sp, #100]	; 0x64
 800f15e:	e7be      	b.n	800f0de <_strtod_l+0x146>
 800f160:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f162:	191a      	adds	r2, r3, r4
 800f164:	9219      	str	r2, [sp, #100]	; 0x64
 800f166:	5d1a      	ldrb	r2, [r3, r4]
 800f168:	f1bb 0f00 	cmp.w	fp, #0
 800f16c:	d036      	beq.n	800f1dc <_strtod_l+0x244>
 800f16e:	465c      	mov	r4, fp
 800f170:	9004      	str	r0, [sp, #16]
 800f172:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f176:	2b09      	cmp	r3, #9
 800f178:	d912      	bls.n	800f1a0 <_strtod_l+0x208>
 800f17a:	2301      	movs	r3, #1
 800f17c:	e7c1      	b.n	800f102 <_strtod_l+0x16a>
 800f17e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f180:	3001      	adds	r0, #1
 800f182:	1c5a      	adds	r2, r3, #1
 800f184:	9219      	str	r2, [sp, #100]	; 0x64
 800f186:	785a      	ldrb	r2, [r3, #1]
 800f188:	2a30      	cmp	r2, #48	; 0x30
 800f18a:	d0f8      	beq.n	800f17e <_strtod_l+0x1e6>
 800f18c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f190:	2b08      	cmp	r3, #8
 800f192:	f200 84d5 	bhi.w	800fb40 <_strtod_l+0xba8>
 800f196:	9004      	str	r0, [sp, #16]
 800f198:	2000      	movs	r0, #0
 800f19a:	4604      	mov	r4, r0
 800f19c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f19e:	9308      	str	r3, [sp, #32]
 800f1a0:	3a30      	subs	r2, #48	; 0x30
 800f1a2:	f100 0301 	add.w	r3, r0, #1
 800f1a6:	d013      	beq.n	800f1d0 <_strtod_l+0x238>
 800f1a8:	9904      	ldr	r1, [sp, #16]
 800f1aa:	1905      	adds	r5, r0, r4
 800f1ac:	4419      	add	r1, r3
 800f1ae:	9104      	str	r1, [sp, #16]
 800f1b0:	4623      	mov	r3, r4
 800f1b2:	210a      	movs	r1, #10
 800f1b4:	42ab      	cmp	r3, r5
 800f1b6:	d113      	bne.n	800f1e0 <_strtod_l+0x248>
 800f1b8:	1823      	adds	r3, r4, r0
 800f1ba:	2b08      	cmp	r3, #8
 800f1bc:	f104 0401 	add.w	r4, r4, #1
 800f1c0:	4404      	add	r4, r0
 800f1c2:	dc1b      	bgt.n	800f1fc <_strtod_l+0x264>
 800f1c4:	230a      	movs	r3, #10
 800f1c6:	9906      	ldr	r1, [sp, #24]
 800f1c8:	fb03 2301 	mla	r3, r3, r1, r2
 800f1cc:	9306      	str	r3, [sp, #24]
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	1c51      	adds	r1, r2, #1
 800f1d6:	9119      	str	r1, [sp, #100]	; 0x64
 800f1d8:	7852      	ldrb	r2, [r2, #1]
 800f1da:	e7ca      	b.n	800f172 <_strtod_l+0x1da>
 800f1dc:	4658      	mov	r0, fp
 800f1de:	e7d3      	b.n	800f188 <_strtod_l+0x1f0>
 800f1e0:	2b08      	cmp	r3, #8
 800f1e2:	dc04      	bgt.n	800f1ee <_strtod_l+0x256>
 800f1e4:	9f06      	ldr	r7, [sp, #24]
 800f1e6:	434f      	muls	r7, r1
 800f1e8:	9706      	str	r7, [sp, #24]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	e7e2      	b.n	800f1b4 <_strtod_l+0x21c>
 800f1ee:	1c5f      	adds	r7, r3, #1
 800f1f0:	2f10      	cmp	r7, #16
 800f1f2:	bfde      	ittt	le
 800f1f4:	9f05      	ldrle	r7, [sp, #20]
 800f1f6:	434f      	mulle	r7, r1
 800f1f8:	9705      	strle	r7, [sp, #20]
 800f1fa:	e7f6      	b.n	800f1ea <_strtod_l+0x252>
 800f1fc:	2c10      	cmp	r4, #16
 800f1fe:	bfdf      	itttt	le
 800f200:	230a      	movle	r3, #10
 800f202:	9905      	ldrle	r1, [sp, #20]
 800f204:	fb03 2301 	mlale	r3, r3, r1, r2
 800f208:	9305      	strle	r3, [sp, #20]
 800f20a:	e7e0      	b.n	800f1ce <_strtod_l+0x236>
 800f20c:	2300      	movs	r3, #0
 800f20e:	9304      	str	r3, [sp, #16]
 800f210:	2301      	movs	r3, #1
 800f212:	e77b      	b.n	800f10c <_strtod_l+0x174>
 800f214:	2700      	movs	r7, #0
 800f216:	1cb2      	adds	r2, r6, #2
 800f218:	9219      	str	r2, [sp, #100]	; 0x64
 800f21a:	78b2      	ldrb	r2, [r6, #2]
 800f21c:	e784      	b.n	800f128 <_strtod_l+0x190>
 800f21e:	bf00      	nop
 800f220:	08012e58 	.word	0x08012e58
 800f224:	08012c78 	.word	0x08012c78
 800f228:	7ff00000 	.word	0x7ff00000
 800f22c:	2701      	movs	r7, #1
 800f22e:	e7f2      	b.n	800f216 <_strtod_l+0x27e>
 800f230:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f232:	1c51      	adds	r1, r2, #1
 800f234:	9119      	str	r1, [sp, #100]	; 0x64
 800f236:	7852      	ldrb	r2, [r2, #1]
 800f238:	2a30      	cmp	r2, #48	; 0x30
 800f23a:	d0f9      	beq.n	800f230 <_strtod_l+0x298>
 800f23c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f240:	2908      	cmp	r1, #8
 800f242:	f63f af77 	bhi.w	800f134 <_strtod_l+0x19c>
 800f246:	f04f 0e0a 	mov.w	lr, #10
 800f24a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f24e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f250:	9209      	str	r2, [sp, #36]	; 0x24
 800f252:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f254:	1c51      	adds	r1, r2, #1
 800f256:	9119      	str	r1, [sp, #100]	; 0x64
 800f258:	7852      	ldrb	r2, [r2, #1]
 800f25a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f25e:	2d09      	cmp	r5, #9
 800f260:	d935      	bls.n	800f2ce <_strtod_l+0x336>
 800f262:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f264:	1b49      	subs	r1, r1, r5
 800f266:	2908      	cmp	r1, #8
 800f268:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f26c:	dc02      	bgt.n	800f274 <_strtod_l+0x2dc>
 800f26e:	4565      	cmp	r5, ip
 800f270:	bfa8      	it	ge
 800f272:	4665      	movge	r5, ip
 800f274:	b107      	cbz	r7, 800f278 <_strtod_l+0x2e0>
 800f276:	426d      	negs	r5, r5
 800f278:	2c00      	cmp	r4, #0
 800f27a:	d14c      	bne.n	800f316 <_strtod_l+0x37e>
 800f27c:	9907      	ldr	r1, [sp, #28]
 800f27e:	4301      	orrs	r1, r0
 800f280:	f47f aecb 	bne.w	800f01a <_strtod_l+0x82>
 800f284:	2b00      	cmp	r3, #0
 800f286:	f47f aee4 	bne.w	800f052 <_strtod_l+0xba>
 800f28a:	2a69      	cmp	r2, #105	; 0x69
 800f28c:	d026      	beq.n	800f2dc <_strtod_l+0x344>
 800f28e:	dc23      	bgt.n	800f2d8 <_strtod_l+0x340>
 800f290:	2a49      	cmp	r2, #73	; 0x49
 800f292:	d023      	beq.n	800f2dc <_strtod_l+0x344>
 800f294:	2a4e      	cmp	r2, #78	; 0x4e
 800f296:	f47f aedc 	bne.w	800f052 <_strtod_l+0xba>
 800f29a:	499d      	ldr	r1, [pc, #628]	; (800f510 <_strtod_l+0x578>)
 800f29c:	a819      	add	r0, sp, #100	; 0x64
 800f29e:	f001 fe2d 	bl	8010efc <__match>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	f43f aed5 	beq.w	800f052 <_strtod_l+0xba>
 800f2a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	2b28      	cmp	r3, #40	; 0x28
 800f2ae:	d12c      	bne.n	800f30a <_strtod_l+0x372>
 800f2b0:	4998      	ldr	r1, [pc, #608]	; (800f514 <_strtod_l+0x57c>)
 800f2b2:	aa1c      	add	r2, sp, #112	; 0x70
 800f2b4:	a819      	add	r0, sp, #100	; 0x64
 800f2b6:	f001 fe35 	bl	8010f24 <__hexnan>
 800f2ba:	2805      	cmp	r0, #5
 800f2bc:	d125      	bne.n	800f30a <_strtod_l+0x372>
 800f2be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f2c0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800f2c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f2c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f2cc:	e6a5      	b.n	800f01a <_strtod_l+0x82>
 800f2ce:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800f2d2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800f2d6:	e7bc      	b.n	800f252 <_strtod_l+0x2ba>
 800f2d8:	2a6e      	cmp	r2, #110	; 0x6e
 800f2da:	e7dc      	b.n	800f296 <_strtod_l+0x2fe>
 800f2dc:	498e      	ldr	r1, [pc, #568]	; (800f518 <_strtod_l+0x580>)
 800f2de:	a819      	add	r0, sp, #100	; 0x64
 800f2e0:	f001 fe0c 	bl	8010efc <__match>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	f43f aeb4 	beq.w	800f052 <_strtod_l+0xba>
 800f2ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f2ec:	498b      	ldr	r1, [pc, #556]	; (800f51c <_strtod_l+0x584>)
 800f2ee:	3b01      	subs	r3, #1
 800f2f0:	a819      	add	r0, sp, #100	; 0x64
 800f2f2:	9319      	str	r3, [sp, #100]	; 0x64
 800f2f4:	f001 fe02 	bl	8010efc <__match>
 800f2f8:	b910      	cbnz	r0, 800f300 <_strtod_l+0x368>
 800f2fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	9319      	str	r3, [sp, #100]	; 0x64
 800f300:	f04f 0800 	mov.w	r8, #0
 800f304:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800f520 <_strtod_l+0x588>
 800f308:	e687      	b.n	800f01a <_strtod_l+0x82>
 800f30a:	4886      	ldr	r0, [pc, #536]	; (800f524 <_strtod_l+0x58c>)
 800f30c:	f002 ff2e 	bl	801216c <nan>
 800f310:	4680      	mov	r8, r0
 800f312:	4689      	mov	r9, r1
 800f314:	e681      	b.n	800f01a <_strtod_l+0x82>
 800f316:	9b04      	ldr	r3, [sp, #16]
 800f318:	f1bb 0f00 	cmp.w	fp, #0
 800f31c:	bf08      	it	eq
 800f31e:	46a3      	moveq	fp, r4
 800f320:	1aeb      	subs	r3, r5, r3
 800f322:	2c10      	cmp	r4, #16
 800f324:	9806      	ldr	r0, [sp, #24]
 800f326:	4626      	mov	r6, r4
 800f328:	9307      	str	r3, [sp, #28]
 800f32a:	bfa8      	it	ge
 800f32c:	2610      	movge	r6, #16
 800f32e:	f7f1 f87b 	bl	8000428 <__aeabi_ui2d>
 800f332:	2c09      	cmp	r4, #9
 800f334:	4680      	mov	r8, r0
 800f336:	4689      	mov	r9, r1
 800f338:	dd13      	ble.n	800f362 <_strtod_l+0x3ca>
 800f33a:	4b7b      	ldr	r3, [pc, #492]	; (800f528 <_strtod_l+0x590>)
 800f33c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f340:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f344:	f7f1 f8ea 	bl	800051c <__aeabi_dmul>
 800f348:	4680      	mov	r8, r0
 800f34a:	9805      	ldr	r0, [sp, #20]
 800f34c:	4689      	mov	r9, r1
 800f34e:	f7f1 f86b 	bl	8000428 <__aeabi_ui2d>
 800f352:	4602      	mov	r2, r0
 800f354:	460b      	mov	r3, r1
 800f356:	4640      	mov	r0, r8
 800f358:	4649      	mov	r1, r9
 800f35a:	f7f0 ff29 	bl	80001b0 <__adddf3>
 800f35e:	4680      	mov	r8, r0
 800f360:	4689      	mov	r9, r1
 800f362:	2c0f      	cmp	r4, #15
 800f364:	dc36      	bgt.n	800f3d4 <_strtod_l+0x43c>
 800f366:	9b07      	ldr	r3, [sp, #28]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	f43f ae56 	beq.w	800f01a <_strtod_l+0x82>
 800f36e:	dd22      	ble.n	800f3b6 <_strtod_l+0x41e>
 800f370:	2b16      	cmp	r3, #22
 800f372:	dc09      	bgt.n	800f388 <_strtod_l+0x3f0>
 800f374:	496c      	ldr	r1, [pc, #432]	; (800f528 <_strtod_l+0x590>)
 800f376:	4642      	mov	r2, r8
 800f378:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f37c:	464b      	mov	r3, r9
 800f37e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f382:	f7f1 f8cb 	bl	800051c <__aeabi_dmul>
 800f386:	e7c3      	b.n	800f310 <_strtod_l+0x378>
 800f388:	9a07      	ldr	r2, [sp, #28]
 800f38a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f38e:	4293      	cmp	r3, r2
 800f390:	db20      	blt.n	800f3d4 <_strtod_l+0x43c>
 800f392:	4d65      	ldr	r5, [pc, #404]	; (800f528 <_strtod_l+0x590>)
 800f394:	f1c4 040f 	rsb	r4, r4, #15
 800f398:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f39c:	4642      	mov	r2, r8
 800f39e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3a2:	464b      	mov	r3, r9
 800f3a4:	f7f1 f8ba 	bl	800051c <__aeabi_dmul>
 800f3a8:	9b07      	ldr	r3, [sp, #28]
 800f3aa:	1b1c      	subs	r4, r3, r4
 800f3ac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f3b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3b4:	e7e5      	b.n	800f382 <_strtod_l+0x3ea>
 800f3b6:	9b07      	ldr	r3, [sp, #28]
 800f3b8:	3316      	adds	r3, #22
 800f3ba:	db0b      	blt.n	800f3d4 <_strtod_l+0x43c>
 800f3bc:	9b04      	ldr	r3, [sp, #16]
 800f3be:	4640      	mov	r0, r8
 800f3c0:	1b5d      	subs	r5, r3, r5
 800f3c2:	4b59      	ldr	r3, [pc, #356]	; (800f528 <_strtod_l+0x590>)
 800f3c4:	4649      	mov	r1, r9
 800f3c6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f3ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3ce:	f7f1 f9cf 	bl	8000770 <__aeabi_ddiv>
 800f3d2:	e79d      	b.n	800f310 <_strtod_l+0x378>
 800f3d4:	9b07      	ldr	r3, [sp, #28]
 800f3d6:	1ba6      	subs	r6, r4, r6
 800f3d8:	441e      	add	r6, r3
 800f3da:	2e00      	cmp	r6, #0
 800f3dc:	dd74      	ble.n	800f4c8 <_strtod_l+0x530>
 800f3de:	f016 030f 	ands.w	r3, r6, #15
 800f3e2:	d00a      	beq.n	800f3fa <_strtod_l+0x462>
 800f3e4:	4950      	ldr	r1, [pc, #320]	; (800f528 <_strtod_l+0x590>)
 800f3e6:	4642      	mov	r2, r8
 800f3e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f3ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3f0:	464b      	mov	r3, r9
 800f3f2:	f7f1 f893 	bl	800051c <__aeabi_dmul>
 800f3f6:	4680      	mov	r8, r0
 800f3f8:	4689      	mov	r9, r1
 800f3fa:	f036 060f 	bics.w	r6, r6, #15
 800f3fe:	d052      	beq.n	800f4a6 <_strtod_l+0x50e>
 800f400:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800f404:	dd27      	ble.n	800f456 <_strtod_l+0x4be>
 800f406:	f04f 0b00 	mov.w	fp, #0
 800f40a:	f8cd b010 	str.w	fp, [sp, #16]
 800f40e:	f8cd b020 	str.w	fp, [sp, #32]
 800f412:	f8cd b018 	str.w	fp, [sp, #24]
 800f416:	2322      	movs	r3, #34	; 0x22
 800f418:	f04f 0800 	mov.w	r8, #0
 800f41c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800f520 <_strtod_l+0x588>
 800f420:	f8ca 3000 	str.w	r3, [sl]
 800f424:	9b08      	ldr	r3, [sp, #32]
 800f426:	2b00      	cmp	r3, #0
 800f428:	f43f adf7 	beq.w	800f01a <_strtod_l+0x82>
 800f42c:	4650      	mov	r0, sl
 800f42e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f430:	f001 fe80 	bl	8011134 <_Bfree>
 800f434:	4650      	mov	r0, sl
 800f436:	9906      	ldr	r1, [sp, #24]
 800f438:	f001 fe7c 	bl	8011134 <_Bfree>
 800f43c:	4650      	mov	r0, sl
 800f43e:	9904      	ldr	r1, [sp, #16]
 800f440:	f001 fe78 	bl	8011134 <_Bfree>
 800f444:	4650      	mov	r0, sl
 800f446:	9908      	ldr	r1, [sp, #32]
 800f448:	f001 fe74 	bl	8011134 <_Bfree>
 800f44c:	4659      	mov	r1, fp
 800f44e:	4650      	mov	r0, sl
 800f450:	f001 fe70 	bl	8011134 <_Bfree>
 800f454:	e5e1      	b.n	800f01a <_strtod_l+0x82>
 800f456:	4b35      	ldr	r3, [pc, #212]	; (800f52c <_strtod_l+0x594>)
 800f458:	4640      	mov	r0, r8
 800f45a:	9305      	str	r3, [sp, #20]
 800f45c:	2300      	movs	r3, #0
 800f45e:	4649      	mov	r1, r9
 800f460:	461f      	mov	r7, r3
 800f462:	1136      	asrs	r6, r6, #4
 800f464:	2e01      	cmp	r6, #1
 800f466:	dc21      	bgt.n	800f4ac <_strtod_l+0x514>
 800f468:	b10b      	cbz	r3, 800f46e <_strtod_l+0x4d6>
 800f46a:	4680      	mov	r8, r0
 800f46c:	4689      	mov	r9, r1
 800f46e:	4b2f      	ldr	r3, [pc, #188]	; (800f52c <_strtod_l+0x594>)
 800f470:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f474:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f478:	4642      	mov	r2, r8
 800f47a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f47e:	464b      	mov	r3, r9
 800f480:	f7f1 f84c 	bl	800051c <__aeabi_dmul>
 800f484:	4b26      	ldr	r3, [pc, #152]	; (800f520 <_strtod_l+0x588>)
 800f486:	460a      	mov	r2, r1
 800f488:	400b      	ands	r3, r1
 800f48a:	4929      	ldr	r1, [pc, #164]	; (800f530 <_strtod_l+0x598>)
 800f48c:	4680      	mov	r8, r0
 800f48e:	428b      	cmp	r3, r1
 800f490:	d8b9      	bhi.n	800f406 <_strtod_l+0x46e>
 800f492:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f496:	428b      	cmp	r3, r1
 800f498:	bf86      	itte	hi
 800f49a:	f04f 38ff 	movhi.w	r8, #4294967295
 800f49e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800f534 <_strtod_l+0x59c>
 800f4a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	9305      	str	r3, [sp, #20]
 800f4aa:	e07f      	b.n	800f5ac <_strtod_l+0x614>
 800f4ac:	07f2      	lsls	r2, r6, #31
 800f4ae:	d505      	bpl.n	800f4bc <_strtod_l+0x524>
 800f4b0:	9b05      	ldr	r3, [sp, #20]
 800f4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b6:	f7f1 f831 	bl	800051c <__aeabi_dmul>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	9a05      	ldr	r2, [sp, #20]
 800f4be:	3701      	adds	r7, #1
 800f4c0:	3208      	adds	r2, #8
 800f4c2:	1076      	asrs	r6, r6, #1
 800f4c4:	9205      	str	r2, [sp, #20]
 800f4c6:	e7cd      	b.n	800f464 <_strtod_l+0x4cc>
 800f4c8:	d0ed      	beq.n	800f4a6 <_strtod_l+0x50e>
 800f4ca:	4276      	negs	r6, r6
 800f4cc:	f016 020f 	ands.w	r2, r6, #15
 800f4d0:	d00a      	beq.n	800f4e8 <_strtod_l+0x550>
 800f4d2:	4b15      	ldr	r3, [pc, #84]	; (800f528 <_strtod_l+0x590>)
 800f4d4:	4640      	mov	r0, r8
 800f4d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4da:	4649      	mov	r1, r9
 800f4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e0:	f7f1 f946 	bl	8000770 <__aeabi_ddiv>
 800f4e4:	4680      	mov	r8, r0
 800f4e6:	4689      	mov	r9, r1
 800f4e8:	1136      	asrs	r6, r6, #4
 800f4ea:	d0dc      	beq.n	800f4a6 <_strtod_l+0x50e>
 800f4ec:	2e1f      	cmp	r6, #31
 800f4ee:	dd23      	ble.n	800f538 <_strtod_l+0x5a0>
 800f4f0:	f04f 0b00 	mov.w	fp, #0
 800f4f4:	f8cd b010 	str.w	fp, [sp, #16]
 800f4f8:	f8cd b020 	str.w	fp, [sp, #32]
 800f4fc:	f8cd b018 	str.w	fp, [sp, #24]
 800f500:	2322      	movs	r3, #34	; 0x22
 800f502:	f04f 0800 	mov.w	r8, #0
 800f506:	f04f 0900 	mov.w	r9, #0
 800f50a:	f8ca 3000 	str.w	r3, [sl]
 800f50e:	e789      	b.n	800f424 <_strtod_l+0x48c>
 800f510:	08012c51 	.word	0x08012c51
 800f514:	08012c8c 	.word	0x08012c8c
 800f518:	08012c49 	.word	0x08012c49
 800f51c:	08012d7b 	.word	0x08012d7b
 800f520:	7ff00000 	.word	0x7ff00000
 800f524:	08012d77 	.word	0x08012d77
 800f528:	08012ef0 	.word	0x08012ef0
 800f52c:	08012ec8 	.word	0x08012ec8
 800f530:	7ca00000 	.word	0x7ca00000
 800f534:	7fefffff 	.word	0x7fefffff
 800f538:	f016 0310 	ands.w	r3, r6, #16
 800f53c:	bf18      	it	ne
 800f53e:	236a      	movne	r3, #106	; 0x6a
 800f540:	4640      	mov	r0, r8
 800f542:	9305      	str	r3, [sp, #20]
 800f544:	4649      	mov	r1, r9
 800f546:	2300      	movs	r3, #0
 800f548:	4fb0      	ldr	r7, [pc, #704]	; (800f80c <_strtod_l+0x874>)
 800f54a:	07f2      	lsls	r2, r6, #31
 800f54c:	d504      	bpl.n	800f558 <_strtod_l+0x5c0>
 800f54e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f552:	f7f0 ffe3 	bl	800051c <__aeabi_dmul>
 800f556:	2301      	movs	r3, #1
 800f558:	1076      	asrs	r6, r6, #1
 800f55a:	f107 0708 	add.w	r7, r7, #8
 800f55e:	d1f4      	bne.n	800f54a <_strtod_l+0x5b2>
 800f560:	b10b      	cbz	r3, 800f566 <_strtod_l+0x5ce>
 800f562:	4680      	mov	r8, r0
 800f564:	4689      	mov	r9, r1
 800f566:	9b05      	ldr	r3, [sp, #20]
 800f568:	b1c3      	cbz	r3, 800f59c <_strtod_l+0x604>
 800f56a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800f56e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f572:	2b00      	cmp	r3, #0
 800f574:	4649      	mov	r1, r9
 800f576:	dd11      	ble.n	800f59c <_strtod_l+0x604>
 800f578:	2b1f      	cmp	r3, #31
 800f57a:	f340 8127 	ble.w	800f7cc <_strtod_l+0x834>
 800f57e:	2b34      	cmp	r3, #52	; 0x34
 800f580:	bfd8      	it	le
 800f582:	f04f 33ff 	movle.w	r3, #4294967295
 800f586:	f04f 0800 	mov.w	r8, #0
 800f58a:	bfcf      	iteee	gt
 800f58c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f590:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f594:	fa03 f202 	lslle.w	r2, r3, r2
 800f598:	ea02 0901 	andle.w	r9, r2, r1
 800f59c:	2200      	movs	r2, #0
 800f59e:	2300      	movs	r3, #0
 800f5a0:	4640      	mov	r0, r8
 800f5a2:	4649      	mov	r1, r9
 800f5a4:	f7f1 fa22 	bl	80009ec <__aeabi_dcmpeq>
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	d1a1      	bne.n	800f4f0 <_strtod_l+0x558>
 800f5ac:	9b06      	ldr	r3, [sp, #24]
 800f5ae:	465a      	mov	r2, fp
 800f5b0:	9300      	str	r3, [sp, #0]
 800f5b2:	4650      	mov	r0, sl
 800f5b4:	4623      	mov	r3, r4
 800f5b6:	9908      	ldr	r1, [sp, #32]
 800f5b8:	f001 fe24 	bl	8011204 <__s2b>
 800f5bc:	9008      	str	r0, [sp, #32]
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	f43f af21 	beq.w	800f406 <_strtod_l+0x46e>
 800f5c4:	9b04      	ldr	r3, [sp, #16]
 800f5c6:	f04f 0b00 	mov.w	fp, #0
 800f5ca:	1b5d      	subs	r5, r3, r5
 800f5cc:	9b07      	ldr	r3, [sp, #28]
 800f5ce:	f8cd b010 	str.w	fp, [sp, #16]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	bfb4      	ite	lt
 800f5d6:	462b      	movlt	r3, r5
 800f5d8:	2300      	movge	r3, #0
 800f5da:	930e      	str	r3, [sp, #56]	; 0x38
 800f5dc:	9b07      	ldr	r3, [sp, #28]
 800f5de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f5e2:	9314      	str	r3, [sp, #80]	; 0x50
 800f5e4:	9b08      	ldr	r3, [sp, #32]
 800f5e6:	4650      	mov	r0, sl
 800f5e8:	6859      	ldr	r1, [r3, #4]
 800f5ea:	f001 fd63 	bl	80110b4 <_Balloc>
 800f5ee:	9006      	str	r0, [sp, #24]
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	f43f af10 	beq.w	800f416 <_strtod_l+0x47e>
 800f5f6:	9b08      	ldr	r3, [sp, #32]
 800f5f8:	300c      	adds	r0, #12
 800f5fa:	691a      	ldr	r2, [r3, #16]
 800f5fc:	f103 010c 	add.w	r1, r3, #12
 800f600:	3202      	adds	r2, #2
 800f602:	0092      	lsls	r2, r2, #2
 800f604:	f7ff f806 	bl	800e614 <memcpy>
 800f608:	ab1c      	add	r3, sp, #112	; 0x70
 800f60a:	9301      	str	r3, [sp, #4]
 800f60c:	ab1b      	add	r3, sp, #108	; 0x6c
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	4642      	mov	r2, r8
 800f612:	464b      	mov	r3, r9
 800f614:	4650      	mov	r0, sl
 800f616:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800f61a:	f002 f935 	bl	8011888 <__d2b>
 800f61e:	901a      	str	r0, [sp, #104]	; 0x68
 800f620:	2800      	cmp	r0, #0
 800f622:	f43f aef8 	beq.w	800f416 <_strtod_l+0x47e>
 800f626:	2101      	movs	r1, #1
 800f628:	4650      	mov	r0, sl
 800f62a:	f001 fe83 	bl	8011334 <__i2b>
 800f62e:	4603      	mov	r3, r0
 800f630:	9004      	str	r0, [sp, #16]
 800f632:	2800      	cmp	r0, #0
 800f634:	f43f aeef 	beq.w	800f416 <_strtod_l+0x47e>
 800f638:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f63a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f63c:	2d00      	cmp	r5, #0
 800f63e:	bfab      	itete	ge
 800f640:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f642:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800f644:	18ee      	addge	r6, r5, r3
 800f646:	1b5c      	sublt	r4, r3, r5
 800f648:	9b05      	ldr	r3, [sp, #20]
 800f64a:	bfa8      	it	ge
 800f64c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800f64e:	eba5 0503 	sub.w	r5, r5, r3
 800f652:	4415      	add	r5, r2
 800f654:	4b6e      	ldr	r3, [pc, #440]	; (800f810 <_strtod_l+0x878>)
 800f656:	f105 35ff 	add.w	r5, r5, #4294967295
 800f65a:	bfb8      	it	lt
 800f65c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800f65e:	429d      	cmp	r5, r3
 800f660:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f664:	f280 80c4 	bge.w	800f7f0 <_strtod_l+0x858>
 800f668:	1b5b      	subs	r3, r3, r5
 800f66a:	2b1f      	cmp	r3, #31
 800f66c:	f04f 0701 	mov.w	r7, #1
 800f670:	eba2 0203 	sub.w	r2, r2, r3
 800f674:	f300 80b1 	bgt.w	800f7da <_strtod_l+0x842>
 800f678:	2500      	movs	r5, #0
 800f67a:	fa07 f303 	lsl.w	r3, r7, r3
 800f67e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f680:	18b7      	adds	r7, r6, r2
 800f682:	9b05      	ldr	r3, [sp, #20]
 800f684:	42be      	cmp	r6, r7
 800f686:	4414      	add	r4, r2
 800f688:	441c      	add	r4, r3
 800f68a:	4633      	mov	r3, r6
 800f68c:	bfa8      	it	ge
 800f68e:	463b      	movge	r3, r7
 800f690:	42a3      	cmp	r3, r4
 800f692:	bfa8      	it	ge
 800f694:	4623      	movge	r3, r4
 800f696:	2b00      	cmp	r3, #0
 800f698:	bfc2      	ittt	gt
 800f69a:	1aff      	subgt	r7, r7, r3
 800f69c:	1ae4      	subgt	r4, r4, r3
 800f69e:	1af6      	subgt	r6, r6, r3
 800f6a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	dd17      	ble.n	800f6d6 <_strtod_l+0x73e>
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	4650      	mov	r0, sl
 800f6aa:	9904      	ldr	r1, [sp, #16]
 800f6ac:	f001 ff00 	bl	80114b0 <__pow5mult>
 800f6b0:	9004      	str	r0, [sp, #16]
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	f43f aeaf 	beq.w	800f416 <_strtod_l+0x47e>
 800f6b8:	4601      	mov	r1, r0
 800f6ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f6bc:	4650      	mov	r0, sl
 800f6be:	f001 fe4f 	bl	8011360 <__multiply>
 800f6c2:	9009      	str	r0, [sp, #36]	; 0x24
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	f43f aea6 	beq.w	800f416 <_strtod_l+0x47e>
 800f6ca:	4650      	mov	r0, sl
 800f6cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f6ce:	f001 fd31 	bl	8011134 <_Bfree>
 800f6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6d4:	931a      	str	r3, [sp, #104]	; 0x68
 800f6d6:	2f00      	cmp	r7, #0
 800f6d8:	f300 808e 	bgt.w	800f7f8 <_strtod_l+0x860>
 800f6dc:	9b07      	ldr	r3, [sp, #28]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	dd08      	ble.n	800f6f4 <_strtod_l+0x75c>
 800f6e2:	4650      	mov	r0, sl
 800f6e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6e6:	9906      	ldr	r1, [sp, #24]
 800f6e8:	f001 fee2 	bl	80114b0 <__pow5mult>
 800f6ec:	9006      	str	r0, [sp, #24]
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	f43f ae91 	beq.w	800f416 <_strtod_l+0x47e>
 800f6f4:	2c00      	cmp	r4, #0
 800f6f6:	dd08      	ble.n	800f70a <_strtod_l+0x772>
 800f6f8:	4622      	mov	r2, r4
 800f6fa:	4650      	mov	r0, sl
 800f6fc:	9906      	ldr	r1, [sp, #24]
 800f6fe:	f001 ff31 	bl	8011564 <__lshift>
 800f702:	9006      	str	r0, [sp, #24]
 800f704:	2800      	cmp	r0, #0
 800f706:	f43f ae86 	beq.w	800f416 <_strtod_l+0x47e>
 800f70a:	2e00      	cmp	r6, #0
 800f70c:	dd08      	ble.n	800f720 <_strtod_l+0x788>
 800f70e:	4632      	mov	r2, r6
 800f710:	4650      	mov	r0, sl
 800f712:	9904      	ldr	r1, [sp, #16]
 800f714:	f001 ff26 	bl	8011564 <__lshift>
 800f718:	9004      	str	r0, [sp, #16]
 800f71a:	2800      	cmp	r0, #0
 800f71c:	f43f ae7b 	beq.w	800f416 <_strtod_l+0x47e>
 800f720:	4650      	mov	r0, sl
 800f722:	9a06      	ldr	r2, [sp, #24]
 800f724:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f726:	f001 ffa9 	bl	801167c <__mdiff>
 800f72a:	4683      	mov	fp, r0
 800f72c:	2800      	cmp	r0, #0
 800f72e:	f43f ae72 	beq.w	800f416 <_strtod_l+0x47e>
 800f732:	2400      	movs	r4, #0
 800f734:	68c3      	ldr	r3, [r0, #12]
 800f736:	9904      	ldr	r1, [sp, #16]
 800f738:	60c4      	str	r4, [r0, #12]
 800f73a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f73c:	f001 ff82 	bl	8011644 <__mcmp>
 800f740:	42a0      	cmp	r0, r4
 800f742:	da6b      	bge.n	800f81c <_strtod_l+0x884>
 800f744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f746:	ea53 0308 	orrs.w	r3, r3, r8
 800f74a:	f040 8091 	bne.w	800f870 <_strtod_l+0x8d8>
 800f74e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f752:	2b00      	cmp	r3, #0
 800f754:	f040 808c 	bne.w	800f870 <_strtod_l+0x8d8>
 800f758:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f75c:	0d1b      	lsrs	r3, r3, #20
 800f75e:	051b      	lsls	r3, r3, #20
 800f760:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f764:	f240 8084 	bls.w	800f870 <_strtod_l+0x8d8>
 800f768:	f8db 3014 	ldr.w	r3, [fp, #20]
 800f76c:	b91b      	cbnz	r3, 800f776 <_strtod_l+0x7de>
 800f76e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f772:	2b01      	cmp	r3, #1
 800f774:	dd7c      	ble.n	800f870 <_strtod_l+0x8d8>
 800f776:	4659      	mov	r1, fp
 800f778:	2201      	movs	r2, #1
 800f77a:	4650      	mov	r0, sl
 800f77c:	f001 fef2 	bl	8011564 <__lshift>
 800f780:	9904      	ldr	r1, [sp, #16]
 800f782:	4683      	mov	fp, r0
 800f784:	f001 ff5e 	bl	8011644 <__mcmp>
 800f788:	2800      	cmp	r0, #0
 800f78a:	dd71      	ble.n	800f870 <_strtod_l+0x8d8>
 800f78c:	9905      	ldr	r1, [sp, #20]
 800f78e:	464b      	mov	r3, r9
 800f790:	4a20      	ldr	r2, [pc, #128]	; (800f814 <_strtod_l+0x87c>)
 800f792:	2900      	cmp	r1, #0
 800f794:	f000 808c 	beq.w	800f8b0 <_strtod_l+0x918>
 800f798:	ea02 0109 	and.w	r1, r2, r9
 800f79c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f7a0:	f300 8086 	bgt.w	800f8b0 <_strtod_l+0x918>
 800f7a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f7a8:	f77f aeaa 	ble.w	800f500 <_strtod_l+0x568>
 800f7ac:	4640      	mov	r0, r8
 800f7ae:	4649      	mov	r1, r9
 800f7b0:	4b19      	ldr	r3, [pc, #100]	; (800f818 <_strtod_l+0x880>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f7f0 feb2 	bl	800051c <__aeabi_dmul>
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	4303      	orrs	r3, r0
 800f7bc:	bf08      	it	eq
 800f7be:	2322      	moveq	r3, #34	; 0x22
 800f7c0:	4680      	mov	r8, r0
 800f7c2:	4689      	mov	r9, r1
 800f7c4:	bf08      	it	eq
 800f7c6:	f8ca 3000 	streq.w	r3, [sl]
 800f7ca:	e62f      	b.n	800f42c <_strtod_l+0x494>
 800f7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f7d4:	ea03 0808 	and.w	r8, r3, r8
 800f7d8:	e6e0      	b.n	800f59c <_strtod_l+0x604>
 800f7da:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800f7de:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800f7e2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800f7e6:	35e2      	adds	r5, #226	; 0xe2
 800f7e8:	fa07 f505 	lsl.w	r5, r7, r5
 800f7ec:	970f      	str	r7, [sp, #60]	; 0x3c
 800f7ee:	e747      	b.n	800f680 <_strtod_l+0x6e8>
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	2500      	movs	r5, #0
 800f7f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7f6:	e743      	b.n	800f680 <_strtod_l+0x6e8>
 800f7f8:	463a      	mov	r2, r7
 800f7fa:	4650      	mov	r0, sl
 800f7fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f7fe:	f001 feb1 	bl	8011564 <__lshift>
 800f802:	901a      	str	r0, [sp, #104]	; 0x68
 800f804:	2800      	cmp	r0, #0
 800f806:	f47f af69 	bne.w	800f6dc <_strtod_l+0x744>
 800f80a:	e604      	b.n	800f416 <_strtod_l+0x47e>
 800f80c:	08012ca0 	.word	0x08012ca0
 800f810:	fffffc02 	.word	0xfffffc02
 800f814:	7ff00000 	.word	0x7ff00000
 800f818:	39500000 	.word	0x39500000
 800f81c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f820:	d165      	bne.n	800f8ee <_strtod_l+0x956>
 800f822:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f824:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f828:	b35a      	cbz	r2, 800f882 <_strtod_l+0x8ea>
 800f82a:	4a99      	ldr	r2, [pc, #612]	; (800fa90 <_strtod_l+0xaf8>)
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d12b      	bne.n	800f888 <_strtod_l+0x8f0>
 800f830:	9b05      	ldr	r3, [sp, #20]
 800f832:	4641      	mov	r1, r8
 800f834:	b303      	cbz	r3, 800f878 <_strtod_l+0x8e0>
 800f836:	464a      	mov	r2, r9
 800f838:	4b96      	ldr	r3, [pc, #600]	; (800fa94 <_strtod_l+0xafc>)
 800f83a:	4013      	ands	r3, r2
 800f83c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f840:	f04f 32ff 	mov.w	r2, #4294967295
 800f844:	d81b      	bhi.n	800f87e <_strtod_l+0x8e6>
 800f846:	0d1b      	lsrs	r3, r3, #20
 800f848:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f84c:	fa02 f303 	lsl.w	r3, r2, r3
 800f850:	4299      	cmp	r1, r3
 800f852:	d119      	bne.n	800f888 <_strtod_l+0x8f0>
 800f854:	4b90      	ldr	r3, [pc, #576]	; (800fa98 <_strtod_l+0xb00>)
 800f856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f858:	429a      	cmp	r2, r3
 800f85a:	d102      	bne.n	800f862 <_strtod_l+0x8ca>
 800f85c:	3101      	adds	r1, #1
 800f85e:	f43f adda 	beq.w	800f416 <_strtod_l+0x47e>
 800f862:	f04f 0800 	mov.w	r8, #0
 800f866:	4b8b      	ldr	r3, [pc, #556]	; (800fa94 <_strtod_l+0xafc>)
 800f868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f86a:	401a      	ands	r2, r3
 800f86c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800f870:	9b05      	ldr	r3, [sp, #20]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d19a      	bne.n	800f7ac <_strtod_l+0x814>
 800f876:	e5d9      	b.n	800f42c <_strtod_l+0x494>
 800f878:	f04f 33ff 	mov.w	r3, #4294967295
 800f87c:	e7e8      	b.n	800f850 <_strtod_l+0x8b8>
 800f87e:	4613      	mov	r3, r2
 800f880:	e7e6      	b.n	800f850 <_strtod_l+0x8b8>
 800f882:	ea53 0308 	orrs.w	r3, r3, r8
 800f886:	d081      	beq.n	800f78c <_strtod_l+0x7f4>
 800f888:	b1e5      	cbz	r5, 800f8c4 <_strtod_l+0x92c>
 800f88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f88c:	421d      	tst	r5, r3
 800f88e:	d0ef      	beq.n	800f870 <_strtod_l+0x8d8>
 800f890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f892:	4640      	mov	r0, r8
 800f894:	4649      	mov	r1, r9
 800f896:	9a05      	ldr	r2, [sp, #20]
 800f898:	b1c3      	cbz	r3, 800f8cc <_strtod_l+0x934>
 800f89a:	f7ff fb59 	bl	800ef50 <sulp>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f8a6:	f7f0 fc83 	bl	80001b0 <__adddf3>
 800f8aa:	4680      	mov	r8, r0
 800f8ac:	4689      	mov	r9, r1
 800f8ae:	e7df      	b.n	800f870 <_strtod_l+0x8d8>
 800f8b0:	4013      	ands	r3, r2
 800f8b2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f8b6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f8ba:	f04f 38ff 	mov.w	r8, #4294967295
 800f8be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f8c2:	e7d5      	b.n	800f870 <_strtod_l+0x8d8>
 800f8c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8c6:	ea13 0f08 	tst.w	r3, r8
 800f8ca:	e7e0      	b.n	800f88e <_strtod_l+0x8f6>
 800f8cc:	f7ff fb40 	bl	800ef50 <sulp>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f8d8:	f7f0 fc68 	bl	80001ac <__aeabi_dsub>
 800f8dc:	2200      	movs	r2, #0
 800f8de:	2300      	movs	r3, #0
 800f8e0:	4680      	mov	r8, r0
 800f8e2:	4689      	mov	r9, r1
 800f8e4:	f7f1 f882 	bl	80009ec <__aeabi_dcmpeq>
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	d0c1      	beq.n	800f870 <_strtod_l+0x8d8>
 800f8ec:	e608      	b.n	800f500 <_strtod_l+0x568>
 800f8ee:	4658      	mov	r0, fp
 800f8f0:	9904      	ldr	r1, [sp, #16]
 800f8f2:	f002 f825 	bl	8011940 <__ratio>
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f8fc:	4606      	mov	r6, r0
 800f8fe:	460f      	mov	r7, r1
 800f900:	f7f1 f888 	bl	8000a14 <__aeabi_dcmple>
 800f904:	2800      	cmp	r0, #0
 800f906:	d070      	beq.n	800f9ea <_strtod_l+0xa52>
 800f908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d042      	beq.n	800f994 <_strtod_l+0x9fc>
 800f90e:	2600      	movs	r6, #0
 800f910:	4f62      	ldr	r7, [pc, #392]	; (800fa9c <_strtod_l+0xb04>)
 800f912:	4d62      	ldr	r5, [pc, #392]	; (800fa9c <_strtod_l+0xb04>)
 800f914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f91a:	0d1b      	lsrs	r3, r3, #20
 800f91c:	051b      	lsls	r3, r3, #20
 800f91e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f922:	4b5f      	ldr	r3, [pc, #380]	; (800faa0 <_strtod_l+0xb08>)
 800f924:	429a      	cmp	r2, r3
 800f926:	f040 80c3 	bne.w	800fab0 <_strtod_l+0xb18>
 800f92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f92c:	4640      	mov	r0, r8
 800f92e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800f932:	4649      	mov	r1, r9
 800f934:	f001 ff2e 	bl	8011794 <__ulp>
 800f938:	4602      	mov	r2, r0
 800f93a:	460b      	mov	r3, r1
 800f93c:	4630      	mov	r0, r6
 800f93e:	4639      	mov	r1, r7
 800f940:	f7f0 fdec 	bl	800051c <__aeabi_dmul>
 800f944:	4642      	mov	r2, r8
 800f946:	464b      	mov	r3, r9
 800f948:	f7f0 fc32 	bl	80001b0 <__adddf3>
 800f94c:	460b      	mov	r3, r1
 800f94e:	4951      	ldr	r1, [pc, #324]	; (800fa94 <_strtod_l+0xafc>)
 800f950:	4a54      	ldr	r2, [pc, #336]	; (800faa4 <_strtod_l+0xb0c>)
 800f952:	4019      	ands	r1, r3
 800f954:	4291      	cmp	r1, r2
 800f956:	4680      	mov	r8, r0
 800f958:	d95d      	bls.n	800fa16 <_strtod_l+0xa7e>
 800f95a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f95c:	4b4e      	ldr	r3, [pc, #312]	; (800fa98 <_strtod_l+0xb00>)
 800f95e:	429a      	cmp	r2, r3
 800f960:	d103      	bne.n	800f96a <_strtod_l+0x9d2>
 800f962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f964:	3301      	adds	r3, #1
 800f966:	f43f ad56 	beq.w	800f416 <_strtod_l+0x47e>
 800f96a:	f04f 38ff 	mov.w	r8, #4294967295
 800f96e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800fa98 <_strtod_l+0xb00>
 800f972:	4650      	mov	r0, sl
 800f974:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f976:	f001 fbdd 	bl	8011134 <_Bfree>
 800f97a:	4650      	mov	r0, sl
 800f97c:	9906      	ldr	r1, [sp, #24]
 800f97e:	f001 fbd9 	bl	8011134 <_Bfree>
 800f982:	4650      	mov	r0, sl
 800f984:	9904      	ldr	r1, [sp, #16]
 800f986:	f001 fbd5 	bl	8011134 <_Bfree>
 800f98a:	4659      	mov	r1, fp
 800f98c:	4650      	mov	r0, sl
 800f98e:	f001 fbd1 	bl	8011134 <_Bfree>
 800f992:	e627      	b.n	800f5e4 <_strtod_l+0x64c>
 800f994:	f1b8 0f00 	cmp.w	r8, #0
 800f998:	d119      	bne.n	800f9ce <_strtod_l+0xa36>
 800f99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f99c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9a0:	b9e3      	cbnz	r3, 800f9dc <_strtod_l+0xa44>
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	4639      	mov	r1, r7
 800f9a8:	4b3c      	ldr	r3, [pc, #240]	; (800fa9c <_strtod_l+0xb04>)
 800f9aa:	f7f1 f829 	bl	8000a00 <__aeabi_dcmplt>
 800f9ae:	b9c8      	cbnz	r0, 800f9e4 <_strtod_l+0xa4c>
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	4639      	mov	r1, r7
 800f9b6:	4b3c      	ldr	r3, [pc, #240]	; (800faa8 <_strtod_l+0xb10>)
 800f9b8:	f7f0 fdb0 	bl	800051c <__aeabi_dmul>
 800f9bc:	4604      	mov	r4, r0
 800f9be:	460d      	mov	r5, r1
 800f9c0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800f9c4:	9416      	str	r4, [sp, #88]	; 0x58
 800f9c6:	9317      	str	r3, [sp, #92]	; 0x5c
 800f9c8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800f9cc:	e7a2      	b.n	800f914 <_strtod_l+0x97c>
 800f9ce:	f1b8 0f01 	cmp.w	r8, #1
 800f9d2:	d103      	bne.n	800f9dc <_strtod_l+0xa44>
 800f9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	f43f ad92 	beq.w	800f500 <_strtod_l+0x568>
 800f9dc:	2600      	movs	r6, #0
 800f9de:	2400      	movs	r4, #0
 800f9e0:	4f32      	ldr	r7, [pc, #200]	; (800faac <_strtod_l+0xb14>)
 800f9e2:	e796      	b.n	800f912 <_strtod_l+0x97a>
 800f9e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f9e6:	4d30      	ldr	r5, [pc, #192]	; (800faa8 <_strtod_l+0xb10>)
 800f9e8:	e7ea      	b.n	800f9c0 <_strtod_l+0xa28>
 800f9ea:	4b2f      	ldr	r3, [pc, #188]	; (800faa8 <_strtod_l+0xb10>)
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	4639      	mov	r1, r7
 800f9f2:	f7f0 fd93 	bl	800051c <__aeabi_dmul>
 800f9f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	460d      	mov	r5, r1
 800f9fc:	b933      	cbnz	r3, 800fa0c <_strtod_l+0xa74>
 800f9fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa02:	9010      	str	r0, [sp, #64]	; 0x40
 800fa04:	9311      	str	r3, [sp, #68]	; 0x44
 800fa06:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800fa0a:	e783      	b.n	800f914 <_strtod_l+0x97c>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	460b      	mov	r3, r1
 800fa10:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800fa14:	e7f7      	b.n	800fa06 <_strtod_l+0xa6e>
 800fa16:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fa1a:	9b05      	ldr	r3, [sp, #20]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d1a8      	bne.n	800f972 <_strtod_l+0x9da>
 800fa20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa26:	0d1b      	lsrs	r3, r3, #20
 800fa28:	051b      	lsls	r3, r3, #20
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d1a1      	bne.n	800f972 <_strtod_l+0x9da>
 800fa2e:	4620      	mov	r0, r4
 800fa30:	4629      	mov	r1, r5
 800fa32:	f7f1 fbc7 	bl	80011c4 <__aeabi_d2lz>
 800fa36:	f7f0 fd43 	bl	80004c0 <__aeabi_l2d>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	4620      	mov	r0, r4
 800fa40:	4629      	mov	r1, r5
 800fa42:	f7f0 fbb3 	bl	80001ac <__aeabi_dsub>
 800fa46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa4c:	ea43 0308 	orr.w	r3, r3, r8
 800fa50:	4313      	orrs	r3, r2
 800fa52:	4604      	mov	r4, r0
 800fa54:	460d      	mov	r5, r1
 800fa56:	d066      	beq.n	800fb26 <_strtod_l+0xb8e>
 800fa58:	a309      	add	r3, pc, #36	; (adr r3, 800fa80 <_strtod_l+0xae8>)
 800fa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5e:	f7f0 ffcf 	bl	8000a00 <__aeabi_dcmplt>
 800fa62:	2800      	cmp	r0, #0
 800fa64:	f47f ace2 	bne.w	800f42c <_strtod_l+0x494>
 800fa68:	a307      	add	r3, pc, #28	; (adr r3, 800fa88 <_strtod_l+0xaf0>)
 800fa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6e:	4620      	mov	r0, r4
 800fa70:	4629      	mov	r1, r5
 800fa72:	f7f0 ffe3 	bl	8000a3c <__aeabi_dcmpgt>
 800fa76:	2800      	cmp	r0, #0
 800fa78:	f43f af7b 	beq.w	800f972 <_strtod_l+0x9da>
 800fa7c:	e4d6      	b.n	800f42c <_strtod_l+0x494>
 800fa7e:	bf00      	nop
 800fa80:	94a03595 	.word	0x94a03595
 800fa84:	3fdfffff 	.word	0x3fdfffff
 800fa88:	35afe535 	.word	0x35afe535
 800fa8c:	3fe00000 	.word	0x3fe00000
 800fa90:	000fffff 	.word	0x000fffff
 800fa94:	7ff00000 	.word	0x7ff00000
 800fa98:	7fefffff 	.word	0x7fefffff
 800fa9c:	3ff00000 	.word	0x3ff00000
 800faa0:	7fe00000 	.word	0x7fe00000
 800faa4:	7c9fffff 	.word	0x7c9fffff
 800faa8:	3fe00000 	.word	0x3fe00000
 800faac:	bff00000 	.word	0xbff00000
 800fab0:	9b05      	ldr	r3, [sp, #20]
 800fab2:	b313      	cbz	r3, 800fafa <_strtod_l+0xb62>
 800fab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fab6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800faba:	d81e      	bhi.n	800fafa <_strtod_l+0xb62>
 800fabc:	a326      	add	r3, pc, #152	; (adr r3, 800fb58 <_strtod_l+0xbc0>)
 800fabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac2:	4620      	mov	r0, r4
 800fac4:	4629      	mov	r1, r5
 800fac6:	f7f0 ffa5 	bl	8000a14 <__aeabi_dcmple>
 800faca:	b190      	cbz	r0, 800faf2 <_strtod_l+0xb5a>
 800facc:	4629      	mov	r1, r5
 800face:	4620      	mov	r0, r4
 800fad0:	f7f0 fffc 	bl	8000acc <__aeabi_d2uiz>
 800fad4:	2801      	cmp	r0, #1
 800fad6:	bf38      	it	cc
 800fad8:	2001      	movcc	r0, #1
 800fada:	f7f0 fca5 	bl	8000428 <__aeabi_ui2d>
 800fade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fae0:	4604      	mov	r4, r0
 800fae2:	460d      	mov	r5, r1
 800fae4:	b9d3      	cbnz	r3, 800fb1c <_strtod_l+0xb84>
 800fae6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800faea:	9012      	str	r0, [sp, #72]	; 0x48
 800faec:	9313      	str	r3, [sp, #76]	; 0x4c
 800faee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800faf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800faf4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800faf8:	1a9f      	subs	r7, r3, r2
 800fafa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fafe:	f001 fe49 	bl	8011794 <__ulp>
 800fb02:	4602      	mov	r2, r0
 800fb04:	460b      	mov	r3, r1
 800fb06:	4630      	mov	r0, r6
 800fb08:	4639      	mov	r1, r7
 800fb0a:	f7f0 fd07 	bl	800051c <__aeabi_dmul>
 800fb0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fb12:	f7f0 fb4d 	bl	80001b0 <__adddf3>
 800fb16:	4680      	mov	r8, r0
 800fb18:	4689      	mov	r9, r1
 800fb1a:	e77e      	b.n	800fa1a <_strtod_l+0xa82>
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	460b      	mov	r3, r1
 800fb20:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800fb24:	e7e3      	b.n	800faee <_strtod_l+0xb56>
 800fb26:	a30e      	add	r3, pc, #56	; (adr r3, 800fb60 <_strtod_l+0xbc8>)
 800fb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2c:	f7f0 ff68 	bl	8000a00 <__aeabi_dcmplt>
 800fb30:	e7a1      	b.n	800fa76 <_strtod_l+0xade>
 800fb32:	2300      	movs	r3, #0
 800fb34:	930a      	str	r3, [sp, #40]	; 0x28
 800fb36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fb38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fb3a:	6013      	str	r3, [r2, #0]
 800fb3c:	f7ff ba71 	b.w	800f022 <_strtod_l+0x8a>
 800fb40:	2a65      	cmp	r2, #101	; 0x65
 800fb42:	f43f ab63 	beq.w	800f20c <_strtod_l+0x274>
 800fb46:	2a45      	cmp	r2, #69	; 0x45
 800fb48:	f43f ab60 	beq.w	800f20c <_strtod_l+0x274>
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	f7ff bb95 	b.w	800f27c <_strtod_l+0x2e4>
 800fb52:	bf00      	nop
 800fb54:	f3af 8000 	nop.w
 800fb58:	ffc00000 	.word	0xffc00000
 800fb5c:	41dfffff 	.word	0x41dfffff
 800fb60:	94a03595 	.word	0x94a03595
 800fb64:	3fcfffff 	.word	0x3fcfffff

0800fb68 <strtod>:
 800fb68:	460a      	mov	r2, r1
 800fb6a:	4601      	mov	r1, r0
 800fb6c:	4802      	ldr	r0, [pc, #8]	; (800fb78 <strtod+0x10>)
 800fb6e:	4b03      	ldr	r3, [pc, #12]	; (800fb7c <strtod+0x14>)
 800fb70:	6800      	ldr	r0, [r0, #0]
 800fb72:	f7ff ba11 	b.w	800ef98 <_strtod_l>
 800fb76:	bf00      	nop
 800fb78:	200008bc 	.word	0x200008bc
 800fb7c:	20000924 	.word	0x20000924

0800fb80 <strtok>:
 800fb80:	4b16      	ldr	r3, [pc, #88]	; (800fbdc <strtok+0x5c>)
 800fb82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb86:	681f      	ldr	r7, [r3, #0]
 800fb88:	4605      	mov	r5, r0
 800fb8a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800fb8c:	460e      	mov	r6, r1
 800fb8e:	b9ec      	cbnz	r4, 800fbcc <strtok+0x4c>
 800fb90:	2050      	movs	r0, #80	; 0x50
 800fb92:	f001 fa67 	bl	8011064 <malloc>
 800fb96:	4602      	mov	r2, r0
 800fb98:	65b8      	str	r0, [r7, #88]	; 0x58
 800fb9a:	b920      	cbnz	r0, 800fba6 <strtok+0x26>
 800fb9c:	2157      	movs	r1, #87	; 0x57
 800fb9e:	4b10      	ldr	r3, [pc, #64]	; (800fbe0 <strtok+0x60>)
 800fba0:	4810      	ldr	r0, [pc, #64]	; (800fbe4 <strtok+0x64>)
 800fba2:	f000 f849 	bl	800fc38 <__assert_func>
 800fba6:	e9c0 4400 	strd	r4, r4, [r0]
 800fbaa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fbae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fbb2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800fbb6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800fbba:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800fbbe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800fbc2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800fbc6:	6184      	str	r4, [r0, #24]
 800fbc8:	7704      	strb	r4, [r0, #28]
 800fbca:	6244      	str	r4, [r0, #36]	; 0x24
 800fbcc:	4631      	mov	r1, r6
 800fbce:	4628      	mov	r0, r5
 800fbd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd8:	f000 b806 	b.w	800fbe8 <__strtok_r>
 800fbdc:	200008bc 	.word	0x200008bc
 800fbe0:	08012cc8 	.word	0x08012cc8
 800fbe4:	08012cdf 	.word	0x08012cdf

0800fbe8 <__strtok_r>:
 800fbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbea:	b908      	cbnz	r0, 800fbf0 <__strtok_r+0x8>
 800fbec:	6810      	ldr	r0, [r2, #0]
 800fbee:	b188      	cbz	r0, 800fc14 <__strtok_r+0x2c>
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	460f      	mov	r7, r1
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fbfa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fbfe:	b91e      	cbnz	r6, 800fc08 <__strtok_r+0x20>
 800fc00:	b965      	cbnz	r5, 800fc1c <__strtok_r+0x34>
 800fc02:	4628      	mov	r0, r5
 800fc04:	6015      	str	r5, [r2, #0]
 800fc06:	e005      	b.n	800fc14 <__strtok_r+0x2c>
 800fc08:	42b5      	cmp	r5, r6
 800fc0a:	d1f6      	bne.n	800fbfa <__strtok_r+0x12>
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d1f0      	bne.n	800fbf2 <__strtok_r+0xa>
 800fc10:	6014      	str	r4, [r2, #0]
 800fc12:	7003      	strb	r3, [r0, #0]
 800fc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc16:	461c      	mov	r4, r3
 800fc18:	e00c      	b.n	800fc34 <__strtok_r+0x4c>
 800fc1a:	b915      	cbnz	r5, 800fc22 <__strtok_r+0x3a>
 800fc1c:	460e      	mov	r6, r1
 800fc1e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc22:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fc26:	42ab      	cmp	r3, r5
 800fc28:	d1f7      	bne.n	800fc1a <__strtok_r+0x32>
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d0f3      	beq.n	800fc16 <__strtok_r+0x2e>
 800fc2e:	2300      	movs	r3, #0
 800fc30:	f804 3c01 	strb.w	r3, [r4, #-1]
 800fc34:	6014      	str	r4, [r2, #0]
 800fc36:	e7ed      	b.n	800fc14 <__strtok_r+0x2c>

0800fc38 <__assert_func>:
 800fc38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc3a:	4614      	mov	r4, r2
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	4b09      	ldr	r3, [pc, #36]	; (800fc64 <__assert_func+0x2c>)
 800fc40:	4605      	mov	r5, r0
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	68d8      	ldr	r0, [r3, #12]
 800fc46:	b14c      	cbz	r4, 800fc5c <__assert_func+0x24>
 800fc48:	4b07      	ldr	r3, [pc, #28]	; (800fc68 <__assert_func+0x30>)
 800fc4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc4e:	9100      	str	r1, [sp, #0]
 800fc50:	462b      	mov	r3, r5
 800fc52:	4906      	ldr	r1, [pc, #24]	; (800fc6c <__assert_func+0x34>)
 800fc54:	f000 fe8a 	bl	801096c <fiprintf>
 800fc58:	f002 fb80 	bl	801235c <abort>
 800fc5c:	4b04      	ldr	r3, [pc, #16]	; (800fc70 <__assert_func+0x38>)
 800fc5e:	461c      	mov	r4, r3
 800fc60:	e7f3      	b.n	800fc4a <__assert_func+0x12>
 800fc62:	bf00      	nop
 800fc64:	200008bc 	.word	0x200008bc
 800fc68:	08012d3c 	.word	0x08012d3c
 800fc6c:	08012d49 	.word	0x08012d49
 800fc70:	08012d77 	.word	0x08012d77

0800fc74 <quorem>:
 800fc74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc78:	6903      	ldr	r3, [r0, #16]
 800fc7a:	690c      	ldr	r4, [r1, #16]
 800fc7c:	4607      	mov	r7, r0
 800fc7e:	42a3      	cmp	r3, r4
 800fc80:	f2c0 8082 	blt.w	800fd88 <quorem+0x114>
 800fc84:	3c01      	subs	r4, #1
 800fc86:	f100 0514 	add.w	r5, r0, #20
 800fc8a:	f101 0814 	add.w	r8, r1, #20
 800fc8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc92:	9301      	str	r3, [sp, #4]
 800fc94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	fbb2 f6f3 	udiv	r6, r2, r3
 800fca4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fca8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fcac:	d331      	bcc.n	800fd12 <quorem+0x9e>
 800fcae:	f04f 0e00 	mov.w	lr, #0
 800fcb2:	4640      	mov	r0, r8
 800fcb4:	46ac      	mov	ip, r5
 800fcb6:	46f2      	mov	sl, lr
 800fcb8:	f850 2b04 	ldr.w	r2, [r0], #4
 800fcbc:	b293      	uxth	r3, r2
 800fcbe:	fb06 e303 	mla	r3, r6, r3, lr
 800fcc2:	0c12      	lsrs	r2, r2, #16
 800fcc4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	fb06 e202 	mla	r2, r6, r2, lr
 800fcce:	ebaa 0303 	sub.w	r3, sl, r3
 800fcd2:	f8dc a000 	ldr.w	sl, [ip]
 800fcd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fcda:	fa1f fa8a 	uxth.w	sl, sl
 800fcde:	4453      	add	r3, sl
 800fce0:	f8dc a000 	ldr.w	sl, [ip]
 800fce4:	b292      	uxth	r2, r2
 800fce6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fcea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcf4:	4581      	cmp	r9, r0
 800fcf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fcfa:	f84c 3b04 	str.w	r3, [ip], #4
 800fcfe:	d2db      	bcs.n	800fcb8 <quorem+0x44>
 800fd00:	f855 300b 	ldr.w	r3, [r5, fp]
 800fd04:	b92b      	cbnz	r3, 800fd12 <quorem+0x9e>
 800fd06:	9b01      	ldr	r3, [sp, #4]
 800fd08:	3b04      	subs	r3, #4
 800fd0a:	429d      	cmp	r5, r3
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	d32f      	bcc.n	800fd70 <quorem+0xfc>
 800fd10:	613c      	str	r4, [r7, #16]
 800fd12:	4638      	mov	r0, r7
 800fd14:	f001 fc96 	bl	8011644 <__mcmp>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	db25      	blt.n	800fd68 <quorem+0xf4>
 800fd1c:	4628      	mov	r0, r5
 800fd1e:	f04f 0c00 	mov.w	ip, #0
 800fd22:	3601      	adds	r6, #1
 800fd24:	f858 1b04 	ldr.w	r1, [r8], #4
 800fd28:	f8d0 e000 	ldr.w	lr, [r0]
 800fd2c:	b28b      	uxth	r3, r1
 800fd2e:	ebac 0303 	sub.w	r3, ip, r3
 800fd32:	fa1f f28e 	uxth.w	r2, lr
 800fd36:	4413      	add	r3, r2
 800fd38:	0c0a      	lsrs	r2, r1, #16
 800fd3a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fd3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd48:	45c1      	cmp	r9, r8
 800fd4a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fd4e:	f840 3b04 	str.w	r3, [r0], #4
 800fd52:	d2e7      	bcs.n	800fd24 <quorem+0xb0>
 800fd54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd5c:	b922      	cbnz	r2, 800fd68 <quorem+0xf4>
 800fd5e:	3b04      	subs	r3, #4
 800fd60:	429d      	cmp	r5, r3
 800fd62:	461a      	mov	r2, r3
 800fd64:	d30a      	bcc.n	800fd7c <quorem+0x108>
 800fd66:	613c      	str	r4, [r7, #16]
 800fd68:	4630      	mov	r0, r6
 800fd6a:	b003      	add	sp, #12
 800fd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd70:	6812      	ldr	r2, [r2, #0]
 800fd72:	3b04      	subs	r3, #4
 800fd74:	2a00      	cmp	r2, #0
 800fd76:	d1cb      	bne.n	800fd10 <quorem+0x9c>
 800fd78:	3c01      	subs	r4, #1
 800fd7a:	e7c6      	b.n	800fd0a <quorem+0x96>
 800fd7c:	6812      	ldr	r2, [r2, #0]
 800fd7e:	3b04      	subs	r3, #4
 800fd80:	2a00      	cmp	r2, #0
 800fd82:	d1f0      	bne.n	800fd66 <quorem+0xf2>
 800fd84:	3c01      	subs	r4, #1
 800fd86:	e7eb      	b.n	800fd60 <quorem+0xec>
 800fd88:	2000      	movs	r0, #0
 800fd8a:	e7ee      	b.n	800fd6a <quorem+0xf6>
 800fd8c:	0000      	movs	r0, r0
	...

0800fd90 <_dtoa_r>:
 800fd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd94:	4616      	mov	r6, r2
 800fd96:	461f      	mov	r7, r3
 800fd98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fd9a:	b099      	sub	sp, #100	; 0x64
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800fda2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800fda6:	b974      	cbnz	r4, 800fdc6 <_dtoa_r+0x36>
 800fda8:	2010      	movs	r0, #16
 800fdaa:	f001 f95b 	bl	8011064 <malloc>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	6268      	str	r0, [r5, #36]	; 0x24
 800fdb2:	b920      	cbnz	r0, 800fdbe <_dtoa_r+0x2e>
 800fdb4:	21ea      	movs	r1, #234	; 0xea
 800fdb6:	4ba8      	ldr	r3, [pc, #672]	; (8010058 <_dtoa_r+0x2c8>)
 800fdb8:	48a8      	ldr	r0, [pc, #672]	; (801005c <_dtoa_r+0x2cc>)
 800fdba:	f7ff ff3d 	bl	800fc38 <__assert_func>
 800fdbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fdc2:	6004      	str	r4, [r0, #0]
 800fdc4:	60c4      	str	r4, [r0, #12]
 800fdc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fdc8:	6819      	ldr	r1, [r3, #0]
 800fdca:	b151      	cbz	r1, 800fde2 <_dtoa_r+0x52>
 800fdcc:	685a      	ldr	r2, [r3, #4]
 800fdce:	2301      	movs	r3, #1
 800fdd0:	4093      	lsls	r3, r2
 800fdd2:	604a      	str	r2, [r1, #4]
 800fdd4:	608b      	str	r3, [r1, #8]
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	f001 f9ac 	bl	8011134 <_Bfree>
 800fddc:	2200      	movs	r2, #0
 800fdde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	1e3b      	subs	r3, r7, #0
 800fde4:	bfaf      	iteee	ge
 800fde6:	2300      	movge	r3, #0
 800fde8:	2201      	movlt	r2, #1
 800fdea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fdee:	9305      	strlt	r3, [sp, #20]
 800fdf0:	bfa8      	it	ge
 800fdf2:	f8c8 3000 	strge.w	r3, [r8]
 800fdf6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800fdfa:	4b99      	ldr	r3, [pc, #612]	; (8010060 <_dtoa_r+0x2d0>)
 800fdfc:	bfb8      	it	lt
 800fdfe:	f8c8 2000 	strlt.w	r2, [r8]
 800fe02:	ea33 0309 	bics.w	r3, r3, r9
 800fe06:	d119      	bne.n	800fe3c <_dtoa_r+0xac>
 800fe08:	f242 730f 	movw	r3, #9999	; 0x270f
 800fe0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fe0e:	6013      	str	r3, [r2, #0]
 800fe10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe14:	4333      	orrs	r3, r6
 800fe16:	f000 857f 	beq.w	8010918 <_dtoa_r+0xb88>
 800fe1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fe1c:	b953      	cbnz	r3, 800fe34 <_dtoa_r+0xa4>
 800fe1e:	4b91      	ldr	r3, [pc, #580]	; (8010064 <_dtoa_r+0x2d4>)
 800fe20:	e022      	b.n	800fe68 <_dtoa_r+0xd8>
 800fe22:	4b91      	ldr	r3, [pc, #580]	; (8010068 <_dtoa_r+0x2d8>)
 800fe24:	9303      	str	r3, [sp, #12]
 800fe26:	3308      	adds	r3, #8
 800fe28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fe2a:	6013      	str	r3, [r2, #0]
 800fe2c:	9803      	ldr	r0, [sp, #12]
 800fe2e:	b019      	add	sp, #100	; 0x64
 800fe30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe34:	4b8b      	ldr	r3, [pc, #556]	; (8010064 <_dtoa_r+0x2d4>)
 800fe36:	9303      	str	r3, [sp, #12]
 800fe38:	3303      	adds	r3, #3
 800fe3a:	e7f5      	b.n	800fe28 <_dtoa_r+0x98>
 800fe3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800fe40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800fe44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fe48:	2200      	movs	r2, #0
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	f7f0 fdce 	bl	80009ec <__aeabi_dcmpeq>
 800fe50:	4680      	mov	r8, r0
 800fe52:	b158      	cbz	r0, 800fe6c <_dtoa_r+0xdc>
 800fe54:	2301      	movs	r3, #1
 800fe56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fe58:	6013      	str	r3, [r2, #0]
 800fe5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f000 8558 	beq.w	8010912 <_dtoa_r+0xb82>
 800fe62:	4882      	ldr	r0, [pc, #520]	; (801006c <_dtoa_r+0x2dc>)
 800fe64:	6018      	str	r0, [r3, #0]
 800fe66:	1e43      	subs	r3, r0, #1
 800fe68:	9303      	str	r3, [sp, #12]
 800fe6a:	e7df      	b.n	800fe2c <_dtoa_r+0x9c>
 800fe6c:	ab16      	add	r3, sp, #88	; 0x58
 800fe6e:	9301      	str	r3, [sp, #4]
 800fe70:	ab17      	add	r3, sp, #92	; 0x5c
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	4628      	mov	r0, r5
 800fe76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fe7a:	f001 fd05 	bl	8011888 <__d2b>
 800fe7e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fe82:	4683      	mov	fp, r0
 800fe84:	2c00      	cmp	r4, #0
 800fe86:	d07f      	beq.n	800ff88 <_dtoa_r+0x1f8>
 800fe88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fe8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe8e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800fe92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800fe9a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800fe9e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800fea2:	2200      	movs	r2, #0
 800fea4:	4b72      	ldr	r3, [pc, #456]	; (8010070 <_dtoa_r+0x2e0>)
 800fea6:	f7f0 f981 	bl	80001ac <__aeabi_dsub>
 800feaa:	a365      	add	r3, pc, #404	; (adr r3, 8010040 <_dtoa_r+0x2b0>)
 800feac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb0:	f7f0 fb34 	bl	800051c <__aeabi_dmul>
 800feb4:	a364      	add	r3, pc, #400	; (adr r3, 8010048 <_dtoa_r+0x2b8>)
 800feb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feba:	f7f0 f979 	bl	80001b0 <__adddf3>
 800febe:	4606      	mov	r6, r0
 800fec0:	4620      	mov	r0, r4
 800fec2:	460f      	mov	r7, r1
 800fec4:	f7f0 fac0 	bl	8000448 <__aeabi_i2d>
 800fec8:	a361      	add	r3, pc, #388	; (adr r3, 8010050 <_dtoa_r+0x2c0>)
 800feca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fece:	f7f0 fb25 	bl	800051c <__aeabi_dmul>
 800fed2:	4602      	mov	r2, r0
 800fed4:	460b      	mov	r3, r1
 800fed6:	4630      	mov	r0, r6
 800fed8:	4639      	mov	r1, r7
 800feda:	f7f0 f969 	bl	80001b0 <__adddf3>
 800fede:	4606      	mov	r6, r0
 800fee0:	460f      	mov	r7, r1
 800fee2:	f7f0 fdcb 	bl	8000a7c <__aeabi_d2iz>
 800fee6:	2200      	movs	r2, #0
 800fee8:	4682      	mov	sl, r0
 800feea:	2300      	movs	r3, #0
 800feec:	4630      	mov	r0, r6
 800feee:	4639      	mov	r1, r7
 800fef0:	f7f0 fd86 	bl	8000a00 <__aeabi_dcmplt>
 800fef4:	b148      	cbz	r0, 800ff0a <_dtoa_r+0x17a>
 800fef6:	4650      	mov	r0, sl
 800fef8:	f7f0 faa6 	bl	8000448 <__aeabi_i2d>
 800fefc:	4632      	mov	r2, r6
 800fefe:	463b      	mov	r3, r7
 800ff00:	f7f0 fd74 	bl	80009ec <__aeabi_dcmpeq>
 800ff04:	b908      	cbnz	r0, 800ff0a <_dtoa_r+0x17a>
 800ff06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff0a:	f1ba 0f16 	cmp.w	sl, #22
 800ff0e:	d858      	bhi.n	800ffc2 <_dtoa_r+0x232>
 800ff10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ff14:	4b57      	ldr	r3, [pc, #348]	; (8010074 <_dtoa_r+0x2e4>)
 800ff16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	f7f0 fd6f 	bl	8000a00 <__aeabi_dcmplt>
 800ff22:	2800      	cmp	r0, #0
 800ff24:	d04f      	beq.n	800ffc6 <_dtoa_r+0x236>
 800ff26:	2300      	movs	r3, #0
 800ff28:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ff30:	1b1c      	subs	r4, r3, r4
 800ff32:	1e63      	subs	r3, r4, #1
 800ff34:	9309      	str	r3, [sp, #36]	; 0x24
 800ff36:	bf49      	itett	mi
 800ff38:	f1c4 0301 	rsbmi	r3, r4, #1
 800ff3c:	2300      	movpl	r3, #0
 800ff3e:	9306      	strmi	r3, [sp, #24]
 800ff40:	2300      	movmi	r3, #0
 800ff42:	bf54      	ite	pl
 800ff44:	9306      	strpl	r3, [sp, #24]
 800ff46:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ff48:	f1ba 0f00 	cmp.w	sl, #0
 800ff4c:	db3d      	blt.n	800ffca <_dtoa_r+0x23a>
 800ff4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff50:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ff54:	4453      	add	r3, sl
 800ff56:	9309      	str	r3, [sp, #36]	; 0x24
 800ff58:	2300      	movs	r3, #0
 800ff5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ff5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ff5e:	2b09      	cmp	r3, #9
 800ff60:	f200 808c 	bhi.w	801007c <_dtoa_r+0x2ec>
 800ff64:	2b05      	cmp	r3, #5
 800ff66:	bfc4      	itt	gt
 800ff68:	3b04      	subgt	r3, #4
 800ff6a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ff6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ff6e:	bfc8      	it	gt
 800ff70:	2400      	movgt	r4, #0
 800ff72:	f1a3 0302 	sub.w	r3, r3, #2
 800ff76:	bfd8      	it	le
 800ff78:	2401      	movle	r4, #1
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	f200 808a 	bhi.w	8010094 <_dtoa_r+0x304>
 800ff80:	e8df f003 	tbb	[pc, r3]
 800ff84:	5b4d4f2d 	.word	0x5b4d4f2d
 800ff88:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ff8c:	441c      	add	r4, r3
 800ff8e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ff92:	2b20      	cmp	r3, #32
 800ff94:	bfc3      	ittte	gt
 800ff96:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ff9a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ff9e:	fa09 f303 	lslgt.w	r3, r9, r3
 800ffa2:	f1c3 0320 	rsble	r3, r3, #32
 800ffa6:	bfc6      	itte	gt
 800ffa8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ffac:	4318      	orrgt	r0, r3
 800ffae:	fa06 f003 	lslle.w	r0, r6, r3
 800ffb2:	f7f0 fa39 	bl	8000428 <__aeabi_ui2d>
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ffbc:	3c01      	subs	r4, #1
 800ffbe:	9313      	str	r3, [sp, #76]	; 0x4c
 800ffc0:	e76f      	b.n	800fea2 <_dtoa_r+0x112>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e7b2      	b.n	800ff2c <_dtoa_r+0x19c>
 800ffc6:	900f      	str	r0, [sp, #60]	; 0x3c
 800ffc8:	e7b1      	b.n	800ff2e <_dtoa_r+0x19e>
 800ffca:	9b06      	ldr	r3, [sp, #24]
 800ffcc:	eba3 030a 	sub.w	r3, r3, sl
 800ffd0:	9306      	str	r3, [sp, #24]
 800ffd2:	f1ca 0300 	rsb	r3, sl, #0
 800ffd6:	930a      	str	r3, [sp, #40]	; 0x28
 800ffd8:	2300      	movs	r3, #0
 800ffda:	930e      	str	r3, [sp, #56]	; 0x38
 800ffdc:	e7be      	b.n	800ff5c <_dtoa_r+0x1cc>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffe2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	dc58      	bgt.n	801009a <_dtoa_r+0x30a>
 800ffe8:	f04f 0901 	mov.w	r9, #1
 800ffec:	464b      	mov	r3, r9
 800ffee:	f8cd 9020 	str.w	r9, [sp, #32]
 800fff2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800fff6:	2200      	movs	r2, #0
 800fff8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800fffa:	6042      	str	r2, [r0, #4]
 800fffc:	2204      	movs	r2, #4
 800fffe:	f102 0614 	add.w	r6, r2, #20
 8010002:	429e      	cmp	r6, r3
 8010004:	6841      	ldr	r1, [r0, #4]
 8010006:	d94e      	bls.n	80100a6 <_dtoa_r+0x316>
 8010008:	4628      	mov	r0, r5
 801000a:	f001 f853 	bl	80110b4 <_Balloc>
 801000e:	9003      	str	r0, [sp, #12]
 8010010:	2800      	cmp	r0, #0
 8010012:	d14c      	bne.n	80100ae <_dtoa_r+0x31e>
 8010014:	4602      	mov	r2, r0
 8010016:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801001a:	4b17      	ldr	r3, [pc, #92]	; (8010078 <_dtoa_r+0x2e8>)
 801001c:	e6cc      	b.n	800fdb8 <_dtoa_r+0x28>
 801001e:	2301      	movs	r3, #1
 8010020:	e7de      	b.n	800ffe0 <_dtoa_r+0x250>
 8010022:	2300      	movs	r3, #0
 8010024:	930b      	str	r3, [sp, #44]	; 0x2c
 8010026:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010028:	eb0a 0903 	add.w	r9, sl, r3
 801002c:	f109 0301 	add.w	r3, r9, #1
 8010030:	2b01      	cmp	r3, #1
 8010032:	9308      	str	r3, [sp, #32]
 8010034:	bfb8      	it	lt
 8010036:	2301      	movlt	r3, #1
 8010038:	e7dd      	b.n	800fff6 <_dtoa_r+0x266>
 801003a:	2301      	movs	r3, #1
 801003c:	e7f2      	b.n	8010024 <_dtoa_r+0x294>
 801003e:	bf00      	nop
 8010040:	636f4361 	.word	0x636f4361
 8010044:	3fd287a7 	.word	0x3fd287a7
 8010048:	8b60c8b3 	.word	0x8b60c8b3
 801004c:	3fc68a28 	.word	0x3fc68a28
 8010050:	509f79fb 	.word	0x509f79fb
 8010054:	3fd34413 	.word	0x3fd34413
 8010058:	08012cc8 	.word	0x08012cc8
 801005c:	08012d85 	.word	0x08012d85
 8010060:	7ff00000 	.word	0x7ff00000
 8010064:	08012d81 	.word	0x08012d81
 8010068:	08012d78 	.word	0x08012d78
 801006c:	08012c55 	.word	0x08012c55
 8010070:	3ff80000 	.word	0x3ff80000
 8010074:	08012ef0 	.word	0x08012ef0
 8010078:	08012de0 	.word	0x08012de0
 801007c:	2401      	movs	r4, #1
 801007e:	2300      	movs	r3, #0
 8010080:	940b      	str	r4, [sp, #44]	; 0x2c
 8010082:	9322      	str	r3, [sp, #136]	; 0x88
 8010084:	f04f 39ff 	mov.w	r9, #4294967295
 8010088:	2200      	movs	r2, #0
 801008a:	2312      	movs	r3, #18
 801008c:	f8cd 9020 	str.w	r9, [sp, #32]
 8010090:	9223      	str	r2, [sp, #140]	; 0x8c
 8010092:	e7b0      	b.n	800fff6 <_dtoa_r+0x266>
 8010094:	2301      	movs	r3, #1
 8010096:	930b      	str	r3, [sp, #44]	; 0x2c
 8010098:	e7f4      	b.n	8010084 <_dtoa_r+0x2f4>
 801009a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 801009e:	464b      	mov	r3, r9
 80100a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80100a4:	e7a7      	b.n	800fff6 <_dtoa_r+0x266>
 80100a6:	3101      	adds	r1, #1
 80100a8:	6041      	str	r1, [r0, #4]
 80100aa:	0052      	lsls	r2, r2, #1
 80100ac:	e7a7      	b.n	800fffe <_dtoa_r+0x26e>
 80100ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80100b0:	9a03      	ldr	r2, [sp, #12]
 80100b2:	601a      	str	r2, [r3, #0]
 80100b4:	9b08      	ldr	r3, [sp, #32]
 80100b6:	2b0e      	cmp	r3, #14
 80100b8:	f200 80a8 	bhi.w	801020c <_dtoa_r+0x47c>
 80100bc:	2c00      	cmp	r4, #0
 80100be:	f000 80a5 	beq.w	801020c <_dtoa_r+0x47c>
 80100c2:	f1ba 0f00 	cmp.w	sl, #0
 80100c6:	dd34      	ble.n	8010132 <_dtoa_r+0x3a2>
 80100c8:	4a9a      	ldr	r2, [pc, #616]	; (8010334 <_dtoa_r+0x5a4>)
 80100ca:	f00a 030f 	and.w	r3, sl, #15
 80100ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80100d2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80100d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80100da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80100de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80100e2:	d016      	beq.n	8010112 <_dtoa_r+0x382>
 80100e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80100e8:	4b93      	ldr	r3, [pc, #588]	; (8010338 <_dtoa_r+0x5a8>)
 80100ea:	2703      	movs	r7, #3
 80100ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80100f0:	f7f0 fb3e 	bl	8000770 <__aeabi_ddiv>
 80100f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100f8:	f004 040f 	and.w	r4, r4, #15
 80100fc:	4e8e      	ldr	r6, [pc, #568]	; (8010338 <_dtoa_r+0x5a8>)
 80100fe:	b954      	cbnz	r4, 8010116 <_dtoa_r+0x386>
 8010100:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010108:	f7f0 fb32 	bl	8000770 <__aeabi_ddiv>
 801010c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010110:	e029      	b.n	8010166 <_dtoa_r+0x3d6>
 8010112:	2702      	movs	r7, #2
 8010114:	e7f2      	b.n	80100fc <_dtoa_r+0x36c>
 8010116:	07e1      	lsls	r1, r4, #31
 8010118:	d508      	bpl.n	801012c <_dtoa_r+0x39c>
 801011a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801011e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010122:	f7f0 f9fb 	bl	800051c <__aeabi_dmul>
 8010126:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801012a:	3701      	adds	r7, #1
 801012c:	1064      	asrs	r4, r4, #1
 801012e:	3608      	adds	r6, #8
 8010130:	e7e5      	b.n	80100fe <_dtoa_r+0x36e>
 8010132:	f000 80a5 	beq.w	8010280 <_dtoa_r+0x4f0>
 8010136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801013a:	f1ca 0400 	rsb	r4, sl, #0
 801013e:	4b7d      	ldr	r3, [pc, #500]	; (8010334 <_dtoa_r+0x5a4>)
 8010140:	f004 020f 	and.w	r2, r4, #15
 8010144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014c:	f7f0 f9e6 	bl	800051c <__aeabi_dmul>
 8010150:	2702      	movs	r7, #2
 8010152:	2300      	movs	r3, #0
 8010154:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010158:	4e77      	ldr	r6, [pc, #476]	; (8010338 <_dtoa_r+0x5a8>)
 801015a:	1124      	asrs	r4, r4, #4
 801015c:	2c00      	cmp	r4, #0
 801015e:	f040 8084 	bne.w	801026a <_dtoa_r+0x4da>
 8010162:	2b00      	cmp	r3, #0
 8010164:	d1d2      	bne.n	801010c <_dtoa_r+0x37c>
 8010166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010168:	2b00      	cmp	r3, #0
 801016a:	f000 808b 	beq.w	8010284 <_dtoa_r+0x4f4>
 801016e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010172:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010176:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801017a:	2200      	movs	r2, #0
 801017c:	4b6f      	ldr	r3, [pc, #444]	; (801033c <_dtoa_r+0x5ac>)
 801017e:	f7f0 fc3f 	bl	8000a00 <__aeabi_dcmplt>
 8010182:	2800      	cmp	r0, #0
 8010184:	d07e      	beq.n	8010284 <_dtoa_r+0x4f4>
 8010186:	9b08      	ldr	r3, [sp, #32]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d07b      	beq.n	8010284 <_dtoa_r+0x4f4>
 801018c:	f1b9 0f00 	cmp.w	r9, #0
 8010190:	dd38      	ble.n	8010204 <_dtoa_r+0x474>
 8010192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010196:	2200      	movs	r2, #0
 8010198:	4b69      	ldr	r3, [pc, #420]	; (8010340 <_dtoa_r+0x5b0>)
 801019a:	f7f0 f9bf 	bl	800051c <__aeabi_dmul>
 801019e:	464c      	mov	r4, r9
 80101a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101a4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80101a8:	3701      	adds	r7, #1
 80101aa:	4638      	mov	r0, r7
 80101ac:	f7f0 f94c 	bl	8000448 <__aeabi_i2d>
 80101b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101b4:	f7f0 f9b2 	bl	800051c <__aeabi_dmul>
 80101b8:	2200      	movs	r2, #0
 80101ba:	4b62      	ldr	r3, [pc, #392]	; (8010344 <_dtoa_r+0x5b4>)
 80101bc:	f7ef fff8 	bl	80001b0 <__adddf3>
 80101c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80101c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80101c8:	9611      	str	r6, [sp, #68]	; 0x44
 80101ca:	2c00      	cmp	r4, #0
 80101cc:	d15d      	bne.n	801028a <_dtoa_r+0x4fa>
 80101ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101d2:	2200      	movs	r2, #0
 80101d4:	4b5c      	ldr	r3, [pc, #368]	; (8010348 <_dtoa_r+0x5b8>)
 80101d6:	f7ef ffe9 	bl	80001ac <__aeabi_dsub>
 80101da:	4602      	mov	r2, r0
 80101dc:	460b      	mov	r3, r1
 80101de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80101e2:	4633      	mov	r3, r6
 80101e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80101e6:	f7f0 fc29 	bl	8000a3c <__aeabi_dcmpgt>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	f040 829c 	bne.w	8010728 <_dtoa_r+0x998>
 80101f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80101f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80101fa:	f7f0 fc01 	bl	8000a00 <__aeabi_dcmplt>
 80101fe:	2800      	cmp	r0, #0
 8010200:	f040 8290 	bne.w	8010724 <_dtoa_r+0x994>
 8010204:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8010208:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801020c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801020e:	2b00      	cmp	r3, #0
 8010210:	f2c0 8152 	blt.w	80104b8 <_dtoa_r+0x728>
 8010214:	f1ba 0f0e 	cmp.w	sl, #14
 8010218:	f300 814e 	bgt.w	80104b8 <_dtoa_r+0x728>
 801021c:	4b45      	ldr	r3, [pc, #276]	; (8010334 <_dtoa_r+0x5a4>)
 801021e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010222:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010226:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801022a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801022c:	2b00      	cmp	r3, #0
 801022e:	f280 80db 	bge.w	80103e8 <_dtoa_r+0x658>
 8010232:	9b08      	ldr	r3, [sp, #32]
 8010234:	2b00      	cmp	r3, #0
 8010236:	f300 80d7 	bgt.w	80103e8 <_dtoa_r+0x658>
 801023a:	f040 8272 	bne.w	8010722 <_dtoa_r+0x992>
 801023e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010242:	2200      	movs	r2, #0
 8010244:	4b40      	ldr	r3, [pc, #256]	; (8010348 <_dtoa_r+0x5b8>)
 8010246:	f7f0 f969 	bl	800051c <__aeabi_dmul>
 801024a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801024e:	f7f0 fbeb 	bl	8000a28 <__aeabi_dcmpge>
 8010252:	9c08      	ldr	r4, [sp, #32]
 8010254:	4626      	mov	r6, r4
 8010256:	2800      	cmp	r0, #0
 8010258:	f040 8248 	bne.w	80106ec <_dtoa_r+0x95c>
 801025c:	2331      	movs	r3, #49	; 0x31
 801025e:	9f03      	ldr	r7, [sp, #12]
 8010260:	f10a 0a01 	add.w	sl, sl, #1
 8010264:	f807 3b01 	strb.w	r3, [r7], #1
 8010268:	e244      	b.n	80106f4 <_dtoa_r+0x964>
 801026a:	07e2      	lsls	r2, r4, #31
 801026c:	d505      	bpl.n	801027a <_dtoa_r+0x4ea>
 801026e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010272:	f7f0 f953 	bl	800051c <__aeabi_dmul>
 8010276:	2301      	movs	r3, #1
 8010278:	3701      	adds	r7, #1
 801027a:	1064      	asrs	r4, r4, #1
 801027c:	3608      	adds	r6, #8
 801027e:	e76d      	b.n	801015c <_dtoa_r+0x3cc>
 8010280:	2702      	movs	r7, #2
 8010282:	e770      	b.n	8010166 <_dtoa_r+0x3d6>
 8010284:	46d0      	mov	r8, sl
 8010286:	9c08      	ldr	r4, [sp, #32]
 8010288:	e78f      	b.n	80101aa <_dtoa_r+0x41a>
 801028a:	9903      	ldr	r1, [sp, #12]
 801028c:	4b29      	ldr	r3, [pc, #164]	; (8010334 <_dtoa_r+0x5a4>)
 801028e:	4421      	add	r1, r4
 8010290:	9112      	str	r1, [sp, #72]	; 0x48
 8010292:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010294:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010298:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801029c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80102a0:	2900      	cmp	r1, #0
 80102a2:	d055      	beq.n	8010350 <_dtoa_r+0x5c0>
 80102a4:	2000      	movs	r0, #0
 80102a6:	4929      	ldr	r1, [pc, #164]	; (801034c <_dtoa_r+0x5bc>)
 80102a8:	f7f0 fa62 	bl	8000770 <__aeabi_ddiv>
 80102ac:	463b      	mov	r3, r7
 80102ae:	4632      	mov	r2, r6
 80102b0:	f7ef ff7c 	bl	80001ac <__aeabi_dsub>
 80102b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80102b8:	9f03      	ldr	r7, [sp, #12]
 80102ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102be:	f7f0 fbdd 	bl	8000a7c <__aeabi_d2iz>
 80102c2:	4604      	mov	r4, r0
 80102c4:	f7f0 f8c0 	bl	8000448 <__aeabi_i2d>
 80102c8:	4602      	mov	r2, r0
 80102ca:	460b      	mov	r3, r1
 80102cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102d0:	f7ef ff6c 	bl	80001ac <__aeabi_dsub>
 80102d4:	4602      	mov	r2, r0
 80102d6:	460b      	mov	r3, r1
 80102d8:	3430      	adds	r4, #48	; 0x30
 80102da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80102de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80102e2:	f807 4b01 	strb.w	r4, [r7], #1
 80102e6:	f7f0 fb8b 	bl	8000a00 <__aeabi_dcmplt>
 80102ea:	2800      	cmp	r0, #0
 80102ec:	d174      	bne.n	80103d8 <_dtoa_r+0x648>
 80102ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102f2:	2000      	movs	r0, #0
 80102f4:	4911      	ldr	r1, [pc, #68]	; (801033c <_dtoa_r+0x5ac>)
 80102f6:	f7ef ff59 	bl	80001ac <__aeabi_dsub>
 80102fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80102fe:	f7f0 fb7f 	bl	8000a00 <__aeabi_dcmplt>
 8010302:	2800      	cmp	r0, #0
 8010304:	f040 80b7 	bne.w	8010476 <_dtoa_r+0x6e6>
 8010308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801030a:	429f      	cmp	r7, r3
 801030c:	f43f af7a 	beq.w	8010204 <_dtoa_r+0x474>
 8010310:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010314:	2200      	movs	r2, #0
 8010316:	4b0a      	ldr	r3, [pc, #40]	; (8010340 <_dtoa_r+0x5b0>)
 8010318:	f7f0 f900 	bl	800051c <__aeabi_dmul>
 801031c:	2200      	movs	r2, #0
 801031e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010326:	4b06      	ldr	r3, [pc, #24]	; (8010340 <_dtoa_r+0x5b0>)
 8010328:	f7f0 f8f8 	bl	800051c <__aeabi_dmul>
 801032c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010330:	e7c3      	b.n	80102ba <_dtoa_r+0x52a>
 8010332:	bf00      	nop
 8010334:	08012ef0 	.word	0x08012ef0
 8010338:	08012ec8 	.word	0x08012ec8
 801033c:	3ff00000 	.word	0x3ff00000
 8010340:	40240000 	.word	0x40240000
 8010344:	401c0000 	.word	0x401c0000
 8010348:	40140000 	.word	0x40140000
 801034c:	3fe00000 	.word	0x3fe00000
 8010350:	4630      	mov	r0, r6
 8010352:	4639      	mov	r1, r7
 8010354:	f7f0 f8e2 	bl	800051c <__aeabi_dmul>
 8010358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801035a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801035e:	9c03      	ldr	r4, [sp, #12]
 8010360:	9314      	str	r3, [sp, #80]	; 0x50
 8010362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010366:	f7f0 fb89 	bl	8000a7c <__aeabi_d2iz>
 801036a:	9015      	str	r0, [sp, #84]	; 0x54
 801036c:	f7f0 f86c 	bl	8000448 <__aeabi_i2d>
 8010370:	4602      	mov	r2, r0
 8010372:	460b      	mov	r3, r1
 8010374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010378:	f7ef ff18 	bl	80001ac <__aeabi_dsub>
 801037c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801037e:	4606      	mov	r6, r0
 8010380:	3330      	adds	r3, #48	; 0x30
 8010382:	f804 3b01 	strb.w	r3, [r4], #1
 8010386:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010388:	460f      	mov	r7, r1
 801038a:	429c      	cmp	r4, r3
 801038c:	f04f 0200 	mov.w	r2, #0
 8010390:	d124      	bne.n	80103dc <_dtoa_r+0x64c>
 8010392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010396:	4bb0      	ldr	r3, [pc, #704]	; (8010658 <_dtoa_r+0x8c8>)
 8010398:	f7ef ff0a 	bl	80001b0 <__adddf3>
 801039c:	4602      	mov	r2, r0
 801039e:	460b      	mov	r3, r1
 80103a0:	4630      	mov	r0, r6
 80103a2:	4639      	mov	r1, r7
 80103a4:	f7f0 fb4a 	bl	8000a3c <__aeabi_dcmpgt>
 80103a8:	2800      	cmp	r0, #0
 80103aa:	d163      	bne.n	8010474 <_dtoa_r+0x6e4>
 80103ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80103b0:	2000      	movs	r0, #0
 80103b2:	49a9      	ldr	r1, [pc, #676]	; (8010658 <_dtoa_r+0x8c8>)
 80103b4:	f7ef fefa 	bl	80001ac <__aeabi_dsub>
 80103b8:	4602      	mov	r2, r0
 80103ba:	460b      	mov	r3, r1
 80103bc:	4630      	mov	r0, r6
 80103be:	4639      	mov	r1, r7
 80103c0:	f7f0 fb1e 	bl	8000a00 <__aeabi_dcmplt>
 80103c4:	2800      	cmp	r0, #0
 80103c6:	f43f af1d 	beq.w	8010204 <_dtoa_r+0x474>
 80103ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80103cc:	1e7b      	subs	r3, r7, #1
 80103ce:	9314      	str	r3, [sp, #80]	; 0x50
 80103d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80103d4:	2b30      	cmp	r3, #48	; 0x30
 80103d6:	d0f8      	beq.n	80103ca <_dtoa_r+0x63a>
 80103d8:	46c2      	mov	sl, r8
 80103da:	e03b      	b.n	8010454 <_dtoa_r+0x6c4>
 80103dc:	4b9f      	ldr	r3, [pc, #636]	; (801065c <_dtoa_r+0x8cc>)
 80103de:	f7f0 f89d 	bl	800051c <__aeabi_dmul>
 80103e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103e6:	e7bc      	b.n	8010362 <_dtoa_r+0x5d2>
 80103e8:	9f03      	ldr	r7, [sp, #12]
 80103ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80103ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80103f2:	4640      	mov	r0, r8
 80103f4:	4649      	mov	r1, r9
 80103f6:	f7f0 f9bb 	bl	8000770 <__aeabi_ddiv>
 80103fa:	f7f0 fb3f 	bl	8000a7c <__aeabi_d2iz>
 80103fe:	4604      	mov	r4, r0
 8010400:	f7f0 f822 	bl	8000448 <__aeabi_i2d>
 8010404:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010408:	f7f0 f888 	bl	800051c <__aeabi_dmul>
 801040c:	4602      	mov	r2, r0
 801040e:	460b      	mov	r3, r1
 8010410:	4640      	mov	r0, r8
 8010412:	4649      	mov	r1, r9
 8010414:	f7ef feca 	bl	80001ac <__aeabi_dsub>
 8010418:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801041c:	f807 6b01 	strb.w	r6, [r7], #1
 8010420:	9e03      	ldr	r6, [sp, #12]
 8010422:	f8dd c020 	ldr.w	ip, [sp, #32]
 8010426:	1bbe      	subs	r6, r7, r6
 8010428:	45b4      	cmp	ip, r6
 801042a:	4602      	mov	r2, r0
 801042c:	460b      	mov	r3, r1
 801042e:	d136      	bne.n	801049e <_dtoa_r+0x70e>
 8010430:	f7ef febe 	bl	80001b0 <__adddf3>
 8010434:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010438:	4680      	mov	r8, r0
 801043a:	4689      	mov	r9, r1
 801043c:	f7f0 fafe 	bl	8000a3c <__aeabi_dcmpgt>
 8010440:	bb58      	cbnz	r0, 801049a <_dtoa_r+0x70a>
 8010442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010446:	4640      	mov	r0, r8
 8010448:	4649      	mov	r1, r9
 801044a:	f7f0 facf 	bl	80009ec <__aeabi_dcmpeq>
 801044e:	b108      	cbz	r0, 8010454 <_dtoa_r+0x6c4>
 8010450:	07e1      	lsls	r1, r4, #31
 8010452:	d422      	bmi.n	801049a <_dtoa_r+0x70a>
 8010454:	4628      	mov	r0, r5
 8010456:	4659      	mov	r1, fp
 8010458:	f000 fe6c 	bl	8011134 <_Bfree>
 801045c:	2300      	movs	r3, #0
 801045e:	703b      	strb	r3, [r7, #0]
 8010460:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010462:	f10a 0001 	add.w	r0, sl, #1
 8010466:	6018      	str	r0, [r3, #0]
 8010468:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801046a:	2b00      	cmp	r3, #0
 801046c:	f43f acde 	beq.w	800fe2c <_dtoa_r+0x9c>
 8010470:	601f      	str	r7, [r3, #0]
 8010472:	e4db      	b.n	800fe2c <_dtoa_r+0x9c>
 8010474:	4627      	mov	r7, r4
 8010476:	463b      	mov	r3, r7
 8010478:	461f      	mov	r7, r3
 801047a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801047e:	2a39      	cmp	r2, #57	; 0x39
 8010480:	d107      	bne.n	8010492 <_dtoa_r+0x702>
 8010482:	9a03      	ldr	r2, [sp, #12]
 8010484:	429a      	cmp	r2, r3
 8010486:	d1f7      	bne.n	8010478 <_dtoa_r+0x6e8>
 8010488:	2230      	movs	r2, #48	; 0x30
 801048a:	9903      	ldr	r1, [sp, #12]
 801048c:	f108 0801 	add.w	r8, r8, #1
 8010490:	700a      	strb	r2, [r1, #0]
 8010492:	781a      	ldrb	r2, [r3, #0]
 8010494:	3201      	adds	r2, #1
 8010496:	701a      	strb	r2, [r3, #0]
 8010498:	e79e      	b.n	80103d8 <_dtoa_r+0x648>
 801049a:	46d0      	mov	r8, sl
 801049c:	e7eb      	b.n	8010476 <_dtoa_r+0x6e6>
 801049e:	2200      	movs	r2, #0
 80104a0:	4b6e      	ldr	r3, [pc, #440]	; (801065c <_dtoa_r+0x8cc>)
 80104a2:	f7f0 f83b 	bl	800051c <__aeabi_dmul>
 80104a6:	2200      	movs	r2, #0
 80104a8:	2300      	movs	r3, #0
 80104aa:	4680      	mov	r8, r0
 80104ac:	4689      	mov	r9, r1
 80104ae:	f7f0 fa9d 	bl	80009ec <__aeabi_dcmpeq>
 80104b2:	2800      	cmp	r0, #0
 80104b4:	d09b      	beq.n	80103ee <_dtoa_r+0x65e>
 80104b6:	e7cd      	b.n	8010454 <_dtoa_r+0x6c4>
 80104b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80104ba:	2a00      	cmp	r2, #0
 80104bc:	f000 80d0 	beq.w	8010660 <_dtoa_r+0x8d0>
 80104c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80104c2:	2a01      	cmp	r2, #1
 80104c4:	f300 80ae 	bgt.w	8010624 <_dtoa_r+0x894>
 80104c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80104ca:	2a00      	cmp	r2, #0
 80104cc:	f000 80a6 	beq.w	801061c <_dtoa_r+0x88c>
 80104d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80104d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80104d6:	9f06      	ldr	r7, [sp, #24]
 80104d8:	9a06      	ldr	r2, [sp, #24]
 80104da:	2101      	movs	r1, #1
 80104dc:	441a      	add	r2, r3
 80104de:	9206      	str	r2, [sp, #24]
 80104e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104e2:	4628      	mov	r0, r5
 80104e4:	441a      	add	r2, r3
 80104e6:	9209      	str	r2, [sp, #36]	; 0x24
 80104e8:	f000 ff24 	bl	8011334 <__i2b>
 80104ec:	4606      	mov	r6, r0
 80104ee:	2f00      	cmp	r7, #0
 80104f0:	dd0c      	ble.n	801050c <_dtoa_r+0x77c>
 80104f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	dd09      	ble.n	801050c <_dtoa_r+0x77c>
 80104f8:	42bb      	cmp	r3, r7
 80104fa:	bfa8      	it	ge
 80104fc:	463b      	movge	r3, r7
 80104fe:	9a06      	ldr	r2, [sp, #24]
 8010500:	1aff      	subs	r7, r7, r3
 8010502:	1ad2      	subs	r2, r2, r3
 8010504:	9206      	str	r2, [sp, #24]
 8010506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010508:	1ad3      	subs	r3, r2, r3
 801050a:	9309      	str	r3, [sp, #36]	; 0x24
 801050c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801050e:	b1f3      	cbz	r3, 801054e <_dtoa_r+0x7be>
 8010510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010512:	2b00      	cmp	r3, #0
 8010514:	f000 80a8 	beq.w	8010668 <_dtoa_r+0x8d8>
 8010518:	2c00      	cmp	r4, #0
 801051a:	dd10      	ble.n	801053e <_dtoa_r+0x7ae>
 801051c:	4631      	mov	r1, r6
 801051e:	4622      	mov	r2, r4
 8010520:	4628      	mov	r0, r5
 8010522:	f000 ffc5 	bl	80114b0 <__pow5mult>
 8010526:	465a      	mov	r2, fp
 8010528:	4601      	mov	r1, r0
 801052a:	4606      	mov	r6, r0
 801052c:	4628      	mov	r0, r5
 801052e:	f000 ff17 	bl	8011360 <__multiply>
 8010532:	4680      	mov	r8, r0
 8010534:	4659      	mov	r1, fp
 8010536:	4628      	mov	r0, r5
 8010538:	f000 fdfc 	bl	8011134 <_Bfree>
 801053c:	46c3      	mov	fp, r8
 801053e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010540:	1b1a      	subs	r2, r3, r4
 8010542:	d004      	beq.n	801054e <_dtoa_r+0x7be>
 8010544:	4659      	mov	r1, fp
 8010546:	4628      	mov	r0, r5
 8010548:	f000 ffb2 	bl	80114b0 <__pow5mult>
 801054c:	4683      	mov	fp, r0
 801054e:	2101      	movs	r1, #1
 8010550:	4628      	mov	r0, r5
 8010552:	f000 feef 	bl	8011334 <__i2b>
 8010556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010558:	4604      	mov	r4, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	f340 8086 	ble.w	801066c <_dtoa_r+0x8dc>
 8010560:	461a      	mov	r2, r3
 8010562:	4601      	mov	r1, r0
 8010564:	4628      	mov	r0, r5
 8010566:	f000 ffa3 	bl	80114b0 <__pow5mult>
 801056a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801056c:	4604      	mov	r4, r0
 801056e:	2b01      	cmp	r3, #1
 8010570:	dd7f      	ble.n	8010672 <_dtoa_r+0x8e2>
 8010572:	f04f 0800 	mov.w	r8, #0
 8010576:	6923      	ldr	r3, [r4, #16]
 8010578:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801057c:	6918      	ldr	r0, [r3, #16]
 801057e:	f000 fe8b 	bl	8011298 <__hi0bits>
 8010582:	f1c0 0020 	rsb	r0, r0, #32
 8010586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010588:	4418      	add	r0, r3
 801058a:	f010 001f 	ands.w	r0, r0, #31
 801058e:	f000 8092 	beq.w	80106b6 <_dtoa_r+0x926>
 8010592:	f1c0 0320 	rsb	r3, r0, #32
 8010596:	2b04      	cmp	r3, #4
 8010598:	f340 808a 	ble.w	80106b0 <_dtoa_r+0x920>
 801059c:	f1c0 001c 	rsb	r0, r0, #28
 80105a0:	9b06      	ldr	r3, [sp, #24]
 80105a2:	4407      	add	r7, r0
 80105a4:	4403      	add	r3, r0
 80105a6:	9306      	str	r3, [sp, #24]
 80105a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105aa:	4403      	add	r3, r0
 80105ac:	9309      	str	r3, [sp, #36]	; 0x24
 80105ae:	9b06      	ldr	r3, [sp, #24]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	dd05      	ble.n	80105c0 <_dtoa_r+0x830>
 80105b4:	4659      	mov	r1, fp
 80105b6:	461a      	mov	r2, r3
 80105b8:	4628      	mov	r0, r5
 80105ba:	f000 ffd3 	bl	8011564 <__lshift>
 80105be:	4683      	mov	fp, r0
 80105c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	dd05      	ble.n	80105d2 <_dtoa_r+0x842>
 80105c6:	4621      	mov	r1, r4
 80105c8:	461a      	mov	r2, r3
 80105ca:	4628      	mov	r0, r5
 80105cc:	f000 ffca 	bl	8011564 <__lshift>
 80105d0:	4604      	mov	r4, r0
 80105d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d070      	beq.n	80106ba <_dtoa_r+0x92a>
 80105d8:	4621      	mov	r1, r4
 80105da:	4658      	mov	r0, fp
 80105dc:	f001 f832 	bl	8011644 <__mcmp>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	da6a      	bge.n	80106ba <_dtoa_r+0x92a>
 80105e4:	2300      	movs	r3, #0
 80105e6:	4659      	mov	r1, fp
 80105e8:	220a      	movs	r2, #10
 80105ea:	4628      	mov	r0, r5
 80105ec:	f000 fdc4 	bl	8011178 <__multadd>
 80105f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105f2:	4683      	mov	fp, r0
 80105f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	f000 8194 	beq.w	8010926 <_dtoa_r+0xb96>
 80105fe:	4631      	mov	r1, r6
 8010600:	2300      	movs	r3, #0
 8010602:	220a      	movs	r2, #10
 8010604:	4628      	mov	r0, r5
 8010606:	f000 fdb7 	bl	8011178 <__multadd>
 801060a:	f1b9 0f00 	cmp.w	r9, #0
 801060e:	4606      	mov	r6, r0
 8010610:	f300 8093 	bgt.w	801073a <_dtoa_r+0x9aa>
 8010614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010616:	2b02      	cmp	r3, #2
 8010618:	dc57      	bgt.n	80106ca <_dtoa_r+0x93a>
 801061a:	e08e      	b.n	801073a <_dtoa_r+0x9aa>
 801061c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801061e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010622:	e757      	b.n	80104d4 <_dtoa_r+0x744>
 8010624:	9b08      	ldr	r3, [sp, #32]
 8010626:	1e5c      	subs	r4, r3, #1
 8010628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801062a:	42a3      	cmp	r3, r4
 801062c:	bfb7      	itett	lt
 801062e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010630:	1b1c      	subge	r4, r3, r4
 8010632:	1ae2      	sublt	r2, r4, r3
 8010634:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010636:	bfbe      	ittt	lt
 8010638:	940a      	strlt	r4, [sp, #40]	; 0x28
 801063a:	189b      	addlt	r3, r3, r2
 801063c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801063e:	9b08      	ldr	r3, [sp, #32]
 8010640:	bfb8      	it	lt
 8010642:	2400      	movlt	r4, #0
 8010644:	2b00      	cmp	r3, #0
 8010646:	bfbb      	ittet	lt
 8010648:	9b06      	ldrlt	r3, [sp, #24]
 801064a:	9a08      	ldrlt	r2, [sp, #32]
 801064c:	9f06      	ldrge	r7, [sp, #24]
 801064e:	1a9f      	sublt	r7, r3, r2
 8010650:	bfac      	ite	ge
 8010652:	9b08      	ldrge	r3, [sp, #32]
 8010654:	2300      	movlt	r3, #0
 8010656:	e73f      	b.n	80104d8 <_dtoa_r+0x748>
 8010658:	3fe00000 	.word	0x3fe00000
 801065c:	40240000 	.word	0x40240000
 8010660:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010662:	9f06      	ldr	r7, [sp, #24]
 8010664:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8010666:	e742      	b.n	80104ee <_dtoa_r+0x75e>
 8010668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801066a:	e76b      	b.n	8010544 <_dtoa_r+0x7b4>
 801066c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801066e:	2b01      	cmp	r3, #1
 8010670:	dc19      	bgt.n	80106a6 <_dtoa_r+0x916>
 8010672:	9b04      	ldr	r3, [sp, #16]
 8010674:	b9bb      	cbnz	r3, 80106a6 <_dtoa_r+0x916>
 8010676:	9b05      	ldr	r3, [sp, #20]
 8010678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801067c:	b99b      	cbnz	r3, 80106a6 <_dtoa_r+0x916>
 801067e:	9b05      	ldr	r3, [sp, #20]
 8010680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010684:	0d1b      	lsrs	r3, r3, #20
 8010686:	051b      	lsls	r3, r3, #20
 8010688:	b183      	cbz	r3, 80106ac <_dtoa_r+0x91c>
 801068a:	f04f 0801 	mov.w	r8, #1
 801068e:	9b06      	ldr	r3, [sp, #24]
 8010690:	3301      	adds	r3, #1
 8010692:	9306      	str	r3, [sp, #24]
 8010694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010696:	3301      	adds	r3, #1
 8010698:	9309      	str	r3, [sp, #36]	; 0x24
 801069a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801069c:	2b00      	cmp	r3, #0
 801069e:	f47f af6a 	bne.w	8010576 <_dtoa_r+0x7e6>
 80106a2:	2001      	movs	r0, #1
 80106a4:	e76f      	b.n	8010586 <_dtoa_r+0x7f6>
 80106a6:	f04f 0800 	mov.w	r8, #0
 80106aa:	e7f6      	b.n	801069a <_dtoa_r+0x90a>
 80106ac:	4698      	mov	r8, r3
 80106ae:	e7f4      	b.n	801069a <_dtoa_r+0x90a>
 80106b0:	f43f af7d 	beq.w	80105ae <_dtoa_r+0x81e>
 80106b4:	4618      	mov	r0, r3
 80106b6:	301c      	adds	r0, #28
 80106b8:	e772      	b.n	80105a0 <_dtoa_r+0x810>
 80106ba:	9b08      	ldr	r3, [sp, #32]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	dc36      	bgt.n	801072e <_dtoa_r+0x99e>
 80106c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	dd33      	ble.n	801072e <_dtoa_r+0x99e>
 80106c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80106ca:	f1b9 0f00 	cmp.w	r9, #0
 80106ce:	d10d      	bne.n	80106ec <_dtoa_r+0x95c>
 80106d0:	4621      	mov	r1, r4
 80106d2:	464b      	mov	r3, r9
 80106d4:	2205      	movs	r2, #5
 80106d6:	4628      	mov	r0, r5
 80106d8:	f000 fd4e 	bl	8011178 <__multadd>
 80106dc:	4601      	mov	r1, r0
 80106de:	4604      	mov	r4, r0
 80106e0:	4658      	mov	r0, fp
 80106e2:	f000 ffaf 	bl	8011644 <__mcmp>
 80106e6:	2800      	cmp	r0, #0
 80106e8:	f73f adb8 	bgt.w	801025c <_dtoa_r+0x4cc>
 80106ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80106ee:	9f03      	ldr	r7, [sp, #12]
 80106f0:	ea6f 0a03 	mvn.w	sl, r3
 80106f4:	f04f 0800 	mov.w	r8, #0
 80106f8:	4621      	mov	r1, r4
 80106fa:	4628      	mov	r0, r5
 80106fc:	f000 fd1a 	bl	8011134 <_Bfree>
 8010700:	2e00      	cmp	r6, #0
 8010702:	f43f aea7 	beq.w	8010454 <_dtoa_r+0x6c4>
 8010706:	f1b8 0f00 	cmp.w	r8, #0
 801070a:	d005      	beq.n	8010718 <_dtoa_r+0x988>
 801070c:	45b0      	cmp	r8, r6
 801070e:	d003      	beq.n	8010718 <_dtoa_r+0x988>
 8010710:	4641      	mov	r1, r8
 8010712:	4628      	mov	r0, r5
 8010714:	f000 fd0e 	bl	8011134 <_Bfree>
 8010718:	4631      	mov	r1, r6
 801071a:	4628      	mov	r0, r5
 801071c:	f000 fd0a 	bl	8011134 <_Bfree>
 8010720:	e698      	b.n	8010454 <_dtoa_r+0x6c4>
 8010722:	2400      	movs	r4, #0
 8010724:	4626      	mov	r6, r4
 8010726:	e7e1      	b.n	80106ec <_dtoa_r+0x95c>
 8010728:	46c2      	mov	sl, r8
 801072a:	4626      	mov	r6, r4
 801072c:	e596      	b.n	801025c <_dtoa_r+0x4cc>
 801072e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010730:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010734:	2b00      	cmp	r3, #0
 8010736:	f000 80fd 	beq.w	8010934 <_dtoa_r+0xba4>
 801073a:	2f00      	cmp	r7, #0
 801073c:	dd05      	ble.n	801074a <_dtoa_r+0x9ba>
 801073e:	4631      	mov	r1, r6
 8010740:	463a      	mov	r2, r7
 8010742:	4628      	mov	r0, r5
 8010744:	f000 ff0e 	bl	8011564 <__lshift>
 8010748:	4606      	mov	r6, r0
 801074a:	f1b8 0f00 	cmp.w	r8, #0
 801074e:	d05c      	beq.n	801080a <_dtoa_r+0xa7a>
 8010750:	4628      	mov	r0, r5
 8010752:	6871      	ldr	r1, [r6, #4]
 8010754:	f000 fcae 	bl	80110b4 <_Balloc>
 8010758:	4607      	mov	r7, r0
 801075a:	b928      	cbnz	r0, 8010768 <_dtoa_r+0x9d8>
 801075c:	4602      	mov	r2, r0
 801075e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010762:	4b7f      	ldr	r3, [pc, #508]	; (8010960 <_dtoa_r+0xbd0>)
 8010764:	f7ff bb28 	b.w	800fdb8 <_dtoa_r+0x28>
 8010768:	6932      	ldr	r2, [r6, #16]
 801076a:	f106 010c 	add.w	r1, r6, #12
 801076e:	3202      	adds	r2, #2
 8010770:	0092      	lsls	r2, r2, #2
 8010772:	300c      	adds	r0, #12
 8010774:	f7fd ff4e 	bl	800e614 <memcpy>
 8010778:	2201      	movs	r2, #1
 801077a:	4639      	mov	r1, r7
 801077c:	4628      	mov	r0, r5
 801077e:	f000 fef1 	bl	8011564 <__lshift>
 8010782:	46b0      	mov	r8, r6
 8010784:	4606      	mov	r6, r0
 8010786:	9b03      	ldr	r3, [sp, #12]
 8010788:	3301      	adds	r3, #1
 801078a:	9308      	str	r3, [sp, #32]
 801078c:	9b03      	ldr	r3, [sp, #12]
 801078e:	444b      	add	r3, r9
 8010790:	930a      	str	r3, [sp, #40]	; 0x28
 8010792:	9b04      	ldr	r3, [sp, #16]
 8010794:	f003 0301 	and.w	r3, r3, #1
 8010798:	9309      	str	r3, [sp, #36]	; 0x24
 801079a:	9b08      	ldr	r3, [sp, #32]
 801079c:	4621      	mov	r1, r4
 801079e:	3b01      	subs	r3, #1
 80107a0:	4658      	mov	r0, fp
 80107a2:	9304      	str	r3, [sp, #16]
 80107a4:	f7ff fa66 	bl	800fc74 <quorem>
 80107a8:	4603      	mov	r3, r0
 80107aa:	4641      	mov	r1, r8
 80107ac:	3330      	adds	r3, #48	; 0x30
 80107ae:	9006      	str	r0, [sp, #24]
 80107b0:	4658      	mov	r0, fp
 80107b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80107b4:	f000 ff46 	bl	8011644 <__mcmp>
 80107b8:	4632      	mov	r2, r6
 80107ba:	4681      	mov	r9, r0
 80107bc:	4621      	mov	r1, r4
 80107be:	4628      	mov	r0, r5
 80107c0:	f000 ff5c 	bl	801167c <__mdiff>
 80107c4:	68c2      	ldr	r2, [r0, #12]
 80107c6:	4607      	mov	r7, r0
 80107c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107ca:	bb02      	cbnz	r2, 801080e <_dtoa_r+0xa7e>
 80107cc:	4601      	mov	r1, r0
 80107ce:	4658      	mov	r0, fp
 80107d0:	f000 ff38 	bl	8011644 <__mcmp>
 80107d4:	4602      	mov	r2, r0
 80107d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107d8:	4639      	mov	r1, r7
 80107da:	4628      	mov	r0, r5
 80107dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80107e0:	f000 fca8 	bl	8011134 <_Bfree>
 80107e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80107e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107e8:	9f08      	ldr	r7, [sp, #32]
 80107ea:	ea43 0102 	orr.w	r1, r3, r2
 80107ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107f0:	430b      	orrs	r3, r1
 80107f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107f4:	d10d      	bne.n	8010812 <_dtoa_r+0xa82>
 80107f6:	2b39      	cmp	r3, #57	; 0x39
 80107f8:	d029      	beq.n	801084e <_dtoa_r+0xabe>
 80107fa:	f1b9 0f00 	cmp.w	r9, #0
 80107fe:	dd01      	ble.n	8010804 <_dtoa_r+0xa74>
 8010800:	9b06      	ldr	r3, [sp, #24]
 8010802:	3331      	adds	r3, #49	; 0x31
 8010804:	9a04      	ldr	r2, [sp, #16]
 8010806:	7013      	strb	r3, [r2, #0]
 8010808:	e776      	b.n	80106f8 <_dtoa_r+0x968>
 801080a:	4630      	mov	r0, r6
 801080c:	e7b9      	b.n	8010782 <_dtoa_r+0x9f2>
 801080e:	2201      	movs	r2, #1
 8010810:	e7e2      	b.n	80107d8 <_dtoa_r+0xa48>
 8010812:	f1b9 0f00 	cmp.w	r9, #0
 8010816:	db06      	blt.n	8010826 <_dtoa_r+0xa96>
 8010818:	9922      	ldr	r1, [sp, #136]	; 0x88
 801081a:	ea41 0909 	orr.w	r9, r1, r9
 801081e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010820:	ea59 0101 	orrs.w	r1, r9, r1
 8010824:	d120      	bne.n	8010868 <_dtoa_r+0xad8>
 8010826:	2a00      	cmp	r2, #0
 8010828:	ddec      	ble.n	8010804 <_dtoa_r+0xa74>
 801082a:	4659      	mov	r1, fp
 801082c:	2201      	movs	r2, #1
 801082e:	4628      	mov	r0, r5
 8010830:	9308      	str	r3, [sp, #32]
 8010832:	f000 fe97 	bl	8011564 <__lshift>
 8010836:	4621      	mov	r1, r4
 8010838:	4683      	mov	fp, r0
 801083a:	f000 ff03 	bl	8011644 <__mcmp>
 801083e:	2800      	cmp	r0, #0
 8010840:	9b08      	ldr	r3, [sp, #32]
 8010842:	dc02      	bgt.n	801084a <_dtoa_r+0xaba>
 8010844:	d1de      	bne.n	8010804 <_dtoa_r+0xa74>
 8010846:	07da      	lsls	r2, r3, #31
 8010848:	d5dc      	bpl.n	8010804 <_dtoa_r+0xa74>
 801084a:	2b39      	cmp	r3, #57	; 0x39
 801084c:	d1d8      	bne.n	8010800 <_dtoa_r+0xa70>
 801084e:	2339      	movs	r3, #57	; 0x39
 8010850:	9a04      	ldr	r2, [sp, #16]
 8010852:	7013      	strb	r3, [r2, #0]
 8010854:	463b      	mov	r3, r7
 8010856:	461f      	mov	r7, r3
 8010858:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801085c:	3b01      	subs	r3, #1
 801085e:	2a39      	cmp	r2, #57	; 0x39
 8010860:	d050      	beq.n	8010904 <_dtoa_r+0xb74>
 8010862:	3201      	adds	r2, #1
 8010864:	701a      	strb	r2, [r3, #0]
 8010866:	e747      	b.n	80106f8 <_dtoa_r+0x968>
 8010868:	2a00      	cmp	r2, #0
 801086a:	dd03      	ble.n	8010874 <_dtoa_r+0xae4>
 801086c:	2b39      	cmp	r3, #57	; 0x39
 801086e:	d0ee      	beq.n	801084e <_dtoa_r+0xabe>
 8010870:	3301      	adds	r3, #1
 8010872:	e7c7      	b.n	8010804 <_dtoa_r+0xa74>
 8010874:	9a08      	ldr	r2, [sp, #32]
 8010876:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010878:	f802 3c01 	strb.w	r3, [r2, #-1]
 801087c:	428a      	cmp	r2, r1
 801087e:	d02a      	beq.n	80108d6 <_dtoa_r+0xb46>
 8010880:	4659      	mov	r1, fp
 8010882:	2300      	movs	r3, #0
 8010884:	220a      	movs	r2, #10
 8010886:	4628      	mov	r0, r5
 8010888:	f000 fc76 	bl	8011178 <__multadd>
 801088c:	45b0      	cmp	r8, r6
 801088e:	4683      	mov	fp, r0
 8010890:	f04f 0300 	mov.w	r3, #0
 8010894:	f04f 020a 	mov.w	r2, #10
 8010898:	4641      	mov	r1, r8
 801089a:	4628      	mov	r0, r5
 801089c:	d107      	bne.n	80108ae <_dtoa_r+0xb1e>
 801089e:	f000 fc6b 	bl	8011178 <__multadd>
 80108a2:	4680      	mov	r8, r0
 80108a4:	4606      	mov	r6, r0
 80108a6:	9b08      	ldr	r3, [sp, #32]
 80108a8:	3301      	adds	r3, #1
 80108aa:	9308      	str	r3, [sp, #32]
 80108ac:	e775      	b.n	801079a <_dtoa_r+0xa0a>
 80108ae:	f000 fc63 	bl	8011178 <__multadd>
 80108b2:	4631      	mov	r1, r6
 80108b4:	4680      	mov	r8, r0
 80108b6:	2300      	movs	r3, #0
 80108b8:	220a      	movs	r2, #10
 80108ba:	4628      	mov	r0, r5
 80108bc:	f000 fc5c 	bl	8011178 <__multadd>
 80108c0:	4606      	mov	r6, r0
 80108c2:	e7f0      	b.n	80108a6 <_dtoa_r+0xb16>
 80108c4:	f1b9 0f00 	cmp.w	r9, #0
 80108c8:	bfcc      	ite	gt
 80108ca:	464f      	movgt	r7, r9
 80108cc:	2701      	movle	r7, #1
 80108ce:	f04f 0800 	mov.w	r8, #0
 80108d2:	9a03      	ldr	r2, [sp, #12]
 80108d4:	4417      	add	r7, r2
 80108d6:	4659      	mov	r1, fp
 80108d8:	2201      	movs	r2, #1
 80108da:	4628      	mov	r0, r5
 80108dc:	9308      	str	r3, [sp, #32]
 80108de:	f000 fe41 	bl	8011564 <__lshift>
 80108e2:	4621      	mov	r1, r4
 80108e4:	4683      	mov	fp, r0
 80108e6:	f000 fead 	bl	8011644 <__mcmp>
 80108ea:	2800      	cmp	r0, #0
 80108ec:	dcb2      	bgt.n	8010854 <_dtoa_r+0xac4>
 80108ee:	d102      	bne.n	80108f6 <_dtoa_r+0xb66>
 80108f0:	9b08      	ldr	r3, [sp, #32]
 80108f2:	07db      	lsls	r3, r3, #31
 80108f4:	d4ae      	bmi.n	8010854 <_dtoa_r+0xac4>
 80108f6:	463b      	mov	r3, r7
 80108f8:	461f      	mov	r7, r3
 80108fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108fe:	2a30      	cmp	r2, #48	; 0x30
 8010900:	d0fa      	beq.n	80108f8 <_dtoa_r+0xb68>
 8010902:	e6f9      	b.n	80106f8 <_dtoa_r+0x968>
 8010904:	9a03      	ldr	r2, [sp, #12]
 8010906:	429a      	cmp	r2, r3
 8010908:	d1a5      	bne.n	8010856 <_dtoa_r+0xac6>
 801090a:	2331      	movs	r3, #49	; 0x31
 801090c:	f10a 0a01 	add.w	sl, sl, #1
 8010910:	e779      	b.n	8010806 <_dtoa_r+0xa76>
 8010912:	4b14      	ldr	r3, [pc, #80]	; (8010964 <_dtoa_r+0xbd4>)
 8010914:	f7ff baa8 	b.w	800fe68 <_dtoa_r+0xd8>
 8010918:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801091a:	2b00      	cmp	r3, #0
 801091c:	f47f aa81 	bne.w	800fe22 <_dtoa_r+0x92>
 8010920:	4b11      	ldr	r3, [pc, #68]	; (8010968 <_dtoa_r+0xbd8>)
 8010922:	f7ff baa1 	b.w	800fe68 <_dtoa_r+0xd8>
 8010926:	f1b9 0f00 	cmp.w	r9, #0
 801092a:	dc03      	bgt.n	8010934 <_dtoa_r+0xba4>
 801092c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801092e:	2b02      	cmp	r3, #2
 8010930:	f73f aecb 	bgt.w	80106ca <_dtoa_r+0x93a>
 8010934:	9f03      	ldr	r7, [sp, #12]
 8010936:	4621      	mov	r1, r4
 8010938:	4658      	mov	r0, fp
 801093a:	f7ff f99b 	bl	800fc74 <quorem>
 801093e:	9a03      	ldr	r2, [sp, #12]
 8010940:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010944:	f807 3b01 	strb.w	r3, [r7], #1
 8010948:	1aba      	subs	r2, r7, r2
 801094a:	4591      	cmp	r9, r2
 801094c:	ddba      	ble.n	80108c4 <_dtoa_r+0xb34>
 801094e:	4659      	mov	r1, fp
 8010950:	2300      	movs	r3, #0
 8010952:	220a      	movs	r2, #10
 8010954:	4628      	mov	r0, r5
 8010956:	f000 fc0f 	bl	8011178 <__multadd>
 801095a:	4683      	mov	fp, r0
 801095c:	e7eb      	b.n	8010936 <_dtoa_r+0xba6>
 801095e:	bf00      	nop
 8010960:	08012de0 	.word	0x08012de0
 8010964:	08012c54 	.word	0x08012c54
 8010968:	08012d78 	.word	0x08012d78

0801096c <fiprintf>:
 801096c:	b40e      	push	{r1, r2, r3}
 801096e:	b503      	push	{r0, r1, lr}
 8010970:	4601      	mov	r1, r0
 8010972:	ab03      	add	r3, sp, #12
 8010974:	4805      	ldr	r0, [pc, #20]	; (801098c <fiprintf+0x20>)
 8010976:	f853 2b04 	ldr.w	r2, [r3], #4
 801097a:	6800      	ldr	r0, [r0, #0]
 801097c:	9301      	str	r3, [sp, #4]
 801097e:	f001 fac5 	bl	8011f0c <_vfiprintf_r>
 8010982:	b002      	add	sp, #8
 8010984:	f85d eb04 	ldr.w	lr, [sp], #4
 8010988:	b003      	add	sp, #12
 801098a:	4770      	bx	lr
 801098c:	200008bc 	.word	0x200008bc

08010990 <rshift>:
 8010990:	6903      	ldr	r3, [r0, #16]
 8010992:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010996:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801099a:	f100 0414 	add.w	r4, r0, #20
 801099e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80109a2:	dd46      	ble.n	8010a32 <rshift+0xa2>
 80109a4:	f011 011f 	ands.w	r1, r1, #31
 80109a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80109ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80109b0:	d10c      	bne.n	80109cc <rshift+0x3c>
 80109b2:	4629      	mov	r1, r5
 80109b4:	f100 0710 	add.w	r7, r0, #16
 80109b8:	42b1      	cmp	r1, r6
 80109ba:	d335      	bcc.n	8010a28 <rshift+0x98>
 80109bc:	1a9b      	subs	r3, r3, r2
 80109be:	009b      	lsls	r3, r3, #2
 80109c0:	1eea      	subs	r2, r5, #3
 80109c2:	4296      	cmp	r6, r2
 80109c4:	bf38      	it	cc
 80109c6:	2300      	movcc	r3, #0
 80109c8:	4423      	add	r3, r4
 80109ca:	e015      	b.n	80109f8 <rshift+0x68>
 80109cc:	46a1      	mov	r9, r4
 80109ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80109d2:	f1c1 0820 	rsb	r8, r1, #32
 80109d6:	40cf      	lsrs	r7, r1
 80109d8:	f105 0e04 	add.w	lr, r5, #4
 80109dc:	4576      	cmp	r6, lr
 80109de:	46f4      	mov	ip, lr
 80109e0:	d816      	bhi.n	8010a10 <rshift+0x80>
 80109e2:	1a9a      	subs	r2, r3, r2
 80109e4:	0092      	lsls	r2, r2, #2
 80109e6:	3a04      	subs	r2, #4
 80109e8:	3501      	adds	r5, #1
 80109ea:	42ae      	cmp	r6, r5
 80109ec:	bf38      	it	cc
 80109ee:	2200      	movcc	r2, #0
 80109f0:	18a3      	adds	r3, r4, r2
 80109f2:	50a7      	str	r7, [r4, r2]
 80109f4:	b107      	cbz	r7, 80109f8 <rshift+0x68>
 80109f6:	3304      	adds	r3, #4
 80109f8:	42a3      	cmp	r3, r4
 80109fa:	eba3 0204 	sub.w	r2, r3, r4
 80109fe:	bf08      	it	eq
 8010a00:	2300      	moveq	r3, #0
 8010a02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a06:	6102      	str	r2, [r0, #16]
 8010a08:	bf08      	it	eq
 8010a0a:	6143      	streq	r3, [r0, #20]
 8010a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a10:	f8dc c000 	ldr.w	ip, [ip]
 8010a14:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a18:	ea4c 0707 	orr.w	r7, ip, r7
 8010a1c:	f849 7b04 	str.w	r7, [r9], #4
 8010a20:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a24:	40cf      	lsrs	r7, r1
 8010a26:	e7d9      	b.n	80109dc <rshift+0x4c>
 8010a28:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a2c:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a30:	e7c2      	b.n	80109b8 <rshift+0x28>
 8010a32:	4623      	mov	r3, r4
 8010a34:	e7e0      	b.n	80109f8 <rshift+0x68>

08010a36 <__hexdig_fun>:
 8010a36:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010a3a:	2b09      	cmp	r3, #9
 8010a3c:	d802      	bhi.n	8010a44 <__hexdig_fun+0xe>
 8010a3e:	3820      	subs	r0, #32
 8010a40:	b2c0      	uxtb	r0, r0
 8010a42:	4770      	bx	lr
 8010a44:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010a48:	2b05      	cmp	r3, #5
 8010a4a:	d801      	bhi.n	8010a50 <__hexdig_fun+0x1a>
 8010a4c:	3847      	subs	r0, #71	; 0x47
 8010a4e:	e7f7      	b.n	8010a40 <__hexdig_fun+0xa>
 8010a50:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010a54:	2b05      	cmp	r3, #5
 8010a56:	d801      	bhi.n	8010a5c <__hexdig_fun+0x26>
 8010a58:	3827      	subs	r0, #39	; 0x27
 8010a5a:	e7f1      	b.n	8010a40 <__hexdig_fun+0xa>
 8010a5c:	2000      	movs	r0, #0
 8010a5e:	4770      	bx	lr

08010a60 <__gethex>:
 8010a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a64:	b08b      	sub	sp, #44	; 0x2c
 8010a66:	9305      	str	r3, [sp, #20]
 8010a68:	4bb2      	ldr	r3, [pc, #712]	; (8010d34 <__gethex+0x2d4>)
 8010a6a:	9002      	str	r0, [sp, #8]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	468b      	mov	fp, r1
 8010a70:	4618      	mov	r0, r3
 8010a72:	4690      	mov	r8, r2
 8010a74:	9303      	str	r3, [sp, #12]
 8010a76:	f7ef fb8d 	bl	8000194 <strlen>
 8010a7a:	4682      	mov	sl, r0
 8010a7c:	9b03      	ldr	r3, [sp, #12]
 8010a7e:	f8db 2000 	ldr.w	r2, [fp]
 8010a82:	4403      	add	r3, r0
 8010a84:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010a88:	9306      	str	r3, [sp, #24]
 8010a8a:	1c93      	adds	r3, r2, #2
 8010a8c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010a90:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010a94:	32fe      	adds	r2, #254	; 0xfe
 8010a96:	18d1      	adds	r1, r2, r3
 8010a98:	461f      	mov	r7, r3
 8010a9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010a9e:	9101      	str	r1, [sp, #4]
 8010aa0:	2830      	cmp	r0, #48	; 0x30
 8010aa2:	d0f8      	beq.n	8010a96 <__gethex+0x36>
 8010aa4:	f7ff ffc7 	bl	8010a36 <__hexdig_fun>
 8010aa8:	4604      	mov	r4, r0
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	d13a      	bne.n	8010b24 <__gethex+0xc4>
 8010aae:	4652      	mov	r2, sl
 8010ab0:	4638      	mov	r0, r7
 8010ab2:	9903      	ldr	r1, [sp, #12]
 8010ab4:	f001 fb70 	bl	8012198 <strncmp>
 8010ab8:	4605      	mov	r5, r0
 8010aba:	2800      	cmp	r0, #0
 8010abc:	d166      	bne.n	8010b8c <__gethex+0x12c>
 8010abe:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010ac2:	eb07 060a 	add.w	r6, r7, sl
 8010ac6:	f7ff ffb6 	bl	8010a36 <__hexdig_fun>
 8010aca:	2800      	cmp	r0, #0
 8010acc:	d060      	beq.n	8010b90 <__gethex+0x130>
 8010ace:	4633      	mov	r3, r6
 8010ad0:	7818      	ldrb	r0, [r3, #0]
 8010ad2:	461f      	mov	r7, r3
 8010ad4:	2830      	cmp	r0, #48	; 0x30
 8010ad6:	f103 0301 	add.w	r3, r3, #1
 8010ada:	d0f9      	beq.n	8010ad0 <__gethex+0x70>
 8010adc:	f7ff ffab 	bl	8010a36 <__hexdig_fun>
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	fab0 f480 	clz	r4, r0
 8010ae6:	4635      	mov	r5, r6
 8010ae8:	0964      	lsrs	r4, r4, #5
 8010aea:	9301      	str	r3, [sp, #4]
 8010aec:	463a      	mov	r2, r7
 8010aee:	4616      	mov	r6, r2
 8010af0:	7830      	ldrb	r0, [r6, #0]
 8010af2:	3201      	adds	r2, #1
 8010af4:	f7ff ff9f 	bl	8010a36 <__hexdig_fun>
 8010af8:	2800      	cmp	r0, #0
 8010afa:	d1f8      	bne.n	8010aee <__gethex+0x8e>
 8010afc:	4652      	mov	r2, sl
 8010afe:	4630      	mov	r0, r6
 8010b00:	9903      	ldr	r1, [sp, #12]
 8010b02:	f001 fb49 	bl	8012198 <strncmp>
 8010b06:	b980      	cbnz	r0, 8010b2a <__gethex+0xca>
 8010b08:	b94d      	cbnz	r5, 8010b1e <__gethex+0xbe>
 8010b0a:	eb06 050a 	add.w	r5, r6, sl
 8010b0e:	462a      	mov	r2, r5
 8010b10:	4616      	mov	r6, r2
 8010b12:	7830      	ldrb	r0, [r6, #0]
 8010b14:	3201      	adds	r2, #1
 8010b16:	f7ff ff8e 	bl	8010a36 <__hexdig_fun>
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	d1f8      	bne.n	8010b10 <__gethex+0xb0>
 8010b1e:	1bad      	subs	r5, r5, r6
 8010b20:	00ad      	lsls	r5, r5, #2
 8010b22:	e004      	b.n	8010b2e <__gethex+0xce>
 8010b24:	2400      	movs	r4, #0
 8010b26:	4625      	mov	r5, r4
 8010b28:	e7e0      	b.n	8010aec <__gethex+0x8c>
 8010b2a:	2d00      	cmp	r5, #0
 8010b2c:	d1f7      	bne.n	8010b1e <__gethex+0xbe>
 8010b2e:	7833      	ldrb	r3, [r6, #0]
 8010b30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b34:	2b50      	cmp	r3, #80	; 0x50
 8010b36:	d139      	bne.n	8010bac <__gethex+0x14c>
 8010b38:	7873      	ldrb	r3, [r6, #1]
 8010b3a:	2b2b      	cmp	r3, #43	; 0x2b
 8010b3c:	d02a      	beq.n	8010b94 <__gethex+0x134>
 8010b3e:	2b2d      	cmp	r3, #45	; 0x2d
 8010b40:	d02c      	beq.n	8010b9c <__gethex+0x13c>
 8010b42:	f04f 0900 	mov.w	r9, #0
 8010b46:	1c71      	adds	r1, r6, #1
 8010b48:	7808      	ldrb	r0, [r1, #0]
 8010b4a:	f7ff ff74 	bl	8010a36 <__hexdig_fun>
 8010b4e:	1e43      	subs	r3, r0, #1
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	2b18      	cmp	r3, #24
 8010b54:	d82a      	bhi.n	8010bac <__gethex+0x14c>
 8010b56:	f1a0 0210 	sub.w	r2, r0, #16
 8010b5a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010b5e:	f7ff ff6a 	bl	8010a36 <__hexdig_fun>
 8010b62:	1e43      	subs	r3, r0, #1
 8010b64:	b2db      	uxtb	r3, r3
 8010b66:	2b18      	cmp	r3, #24
 8010b68:	d91b      	bls.n	8010ba2 <__gethex+0x142>
 8010b6a:	f1b9 0f00 	cmp.w	r9, #0
 8010b6e:	d000      	beq.n	8010b72 <__gethex+0x112>
 8010b70:	4252      	negs	r2, r2
 8010b72:	4415      	add	r5, r2
 8010b74:	f8cb 1000 	str.w	r1, [fp]
 8010b78:	b1d4      	cbz	r4, 8010bb0 <__gethex+0x150>
 8010b7a:	9b01      	ldr	r3, [sp, #4]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	bf14      	ite	ne
 8010b80:	2700      	movne	r7, #0
 8010b82:	2706      	moveq	r7, #6
 8010b84:	4638      	mov	r0, r7
 8010b86:	b00b      	add	sp, #44	; 0x2c
 8010b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b8c:	463e      	mov	r6, r7
 8010b8e:	4625      	mov	r5, r4
 8010b90:	2401      	movs	r4, #1
 8010b92:	e7cc      	b.n	8010b2e <__gethex+0xce>
 8010b94:	f04f 0900 	mov.w	r9, #0
 8010b98:	1cb1      	adds	r1, r6, #2
 8010b9a:	e7d5      	b.n	8010b48 <__gethex+0xe8>
 8010b9c:	f04f 0901 	mov.w	r9, #1
 8010ba0:	e7fa      	b.n	8010b98 <__gethex+0x138>
 8010ba2:	230a      	movs	r3, #10
 8010ba4:	fb03 0202 	mla	r2, r3, r2, r0
 8010ba8:	3a10      	subs	r2, #16
 8010baa:	e7d6      	b.n	8010b5a <__gethex+0xfa>
 8010bac:	4631      	mov	r1, r6
 8010bae:	e7e1      	b.n	8010b74 <__gethex+0x114>
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	1bf3      	subs	r3, r6, r7
 8010bb4:	3b01      	subs	r3, #1
 8010bb6:	2b07      	cmp	r3, #7
 8010bb8:	dc0a      	bgt.n	8010bd0 <__gethex+0x170>
 8010bba:	9802      	ldr	r0, [sp, #8]
 8010bbc:	f000 fa7a 	bl	80110b4 <_Balloc>
 8010bc0:	4604      	mov	r4, r0
 8010bc2:	b940      	cbnz	r0, 8010bd6 <__gethex+0x176>
 8010bc4:	4602      	mov	r2, r0
 8010bc6:	21de      	movs	r1, #222	; 0xde
 8010bc8:	4b5b      	ldr	r3, [pc, #364]	; (8010d38 <__gethex+0x2d8>)
 8010bca:	485c      	ldr	r0, [pc, #368]	; (8010d3c <__gethex+0x2dc>)
 8010bcc:	f7ff f834 	bl	800fc38 <__assert_func>
 8010bd0:	3101      	adds	r1, #1
 8010bd2:	105b      	asrs	r3, r3, #1
 8010bd4:	e7ef      	b.n	8010bb6 <__gethex+0x156>
 8010bd6:	f04f 0b00 	mov.w	fp, #0
 8010bda:	f100 0914 	add.w	r9, r0, #20
 8010bde:	f1ca 0301 	rsb	r3, sl, #1
 8010be2:	f8cd 9010 	str.w	r9, [sp, #16]
 8010be6:	f8cd b004 	str.w	fp, [sp, #4]
 8010bea:	9308      	str	r3, [sp, #32]
 8010bec:	42b7      	cmp	r7, r6
 8010bee:	d33f      	bcc.n	8010c70 <__gethex+0x210>
 8010bf0:	9f04      	ldr	r7, [sp, #16]
 8010bf2:	9b01      	ldr	r3, [sp, #4]
 8010bf4:	f847 3b04 	str.w	r3, [r7], #4
 8010bf8:	eba7 0709 	sub.w	r7, r7, r9
 8010bfc:	10bf      	asrs	r7, r7, #2
 8010bfe:	6127      	str	r7, [r4, #16]
 8010c00:	4618      	mov	r0, r3
 8010c02:	f000 fb49 	bl	8011298 <__hi0bits>
 8010c06:	017f      	lsls	r7, r7, #5
 8010c08:	f8d8 6000 	ldr.w	r6, [r8]
 8010c0c:	1a3f      	subs	r7, r7, r0
 8010c0e:	42b7      	cmp	r7, r6
 8010c10:	dd62      	ble.n	8010cd8 <__gethex+0x278>
 8010c12:	1bbf      	subs	r7, r7, r6
 8010c14:	4639      	mov	r1, r7
 8010c16:	4620      	mov	r0, r4
 8010c18:	f000 fee3 	bl	80119e2 <__any_on>
 8010c1c:	4682      	mov	sl, r0
 8010c1e:	b1a8      	cbz	r0, 8010c4c <__gethex+0x1ec>
 8010c20:	f04f 0a01 	mov.w	sl, #1
 8010c24:	1e7b      	subs	r3, r7, #1
 8010c26:	1159      	asrs	r1, r3, #5
 8010c28:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010c2c:	f003 021f 	and.w	r2, r3, #31
 8010c30:	fa0a f202 	lsl.w	r2, sl, r2
 8010c34:	420a      	tst	r2, r1
 8010c36:	d009      	beq.n	8010c4c <__gethex+0x1ec>
 8010c38:	4553      	cmp	r3, sl
 8010c3a:	dd05      	ble.n	8010c48 <__gethex+0x1e8>
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	1eb9      	subs	r1, r7, #2
 8010c40:	f000 fecf 	bl	80119e2 <__any_on>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	d144      	bne.n	8010cd2 <__gethex+0x272>
 8010c48:	f04f 0a02 	mov.w	sl, #2
 8010c4c:	4639      	mov	r1, r7
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f7ff fe9e 	bl	8010990 <rshift>
 8010c54:	443d      	add	r5, r7
 8010c56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c5a:	42ab      	cmp	r3, r5
 8010c5c:	da4a      	bge.n	8010cf4 <__gethex+0x294>
 8010c5e:	4621      	mov	r1, r4
 8010c60:	9802      	ldr	r0, [sp, #8]
 8010c62:	f000 fa67 	bl	8011134 <_Bfree>
 8010c66:	2300      	movs	r3, #0
 8010c68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c6a:	27a3      	movs	r7, #163	; 0xa3
 8010c6c:	6013      	str	r3, [r2, #0]
 8010c6e:	e789      	b.n	8010b84 <__gethex+0x124>
 8010c70:	1e73      	subs	r3, r6, #1
 8010c72:	9a06      	ldr	r2, [sp, #24]
 8010c74:	9307      	str	r3, [sp, #28]
 8010c76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d019      	beq.n	8010cb2 <__gethex+0x252>
 8010c7e:	f1bb 0f20 	cmp.w	fp, #32
 8010c82:	d107      	bne.n	8010c94 <__gethex+0x234>
 8010c84:	9b04      	ldr	r3, [sp, #16]
 8010c86:	9a01      	ldr	r2, [sp, #4]
 8010c88:	f843 2b04 	str.w	r2, [r3], #4
 8010c8c:	9304      	str	r3, [sp, #16]
 8010c8e:	2300      	movs	r3, #0
 8010c90:	469b      	mov	fp, r3
 8010c92:	9301      	str	r3, [sp, #4]
 8010c94:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010c98:	f7ff fecd 	bl	8010a36 <__hexdig_fun>
 8010c9c:	9b01      	ldr	r3, [sp, #4]
 8010c9e:	f000 000f 	and.w	r0, r0, #15
 8010ca2:	fa00 f00b 	lsl.w	r0, r0, fp
 8010ca6:	4303      	orrs	r3, r0
 8010ca8:	9301      	str	r3, [sp, #4]
 8010caa:	f10b 0b04 	add.w	fp, fp, #4
 8010cae:	9b07      	ldr	r3, [sp, #28]
 8010cb0:	e00d      	b.n	8010cce <__gethex+0x26e>
 8010cb2:	9a08      	ldr	r2, [sp, #32]
 8010cb4:	1e73      	subs	r3, r6, #1
 8010cb6:	4413      	add	r3, r2
 8010cb8:	42bb      	cmp	r3, r7
 8010cba:	d3e0      	bcc.n	8010c7e <__gethex+0x21e>
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	4652      	mov	r2, sl
 8010cc0:	9903      	ldr	r1, [sp, #12]
 8010cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8010cc4:	f001 fa68 	bl	8012198 <strncmp>
 8010cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cca:	2800      	cmp	r0, #0
 8010ccc:	d1d7      	bne.n	8010c7e <__gethex+0x21e>
 8010cce:	461e      	mov	r6, r3
 8010cd0:	e78c      	b.n	8010bec <__gethex+0x18c>
 8010cd2:	f04f 0a03 	mov.w	sl, #3
 8010cd6:	e7b9      	b.n	8010c4c <__gethex+0x1ec>
 8010cd8:	da09      	bge.n	8010cee <__gethex+0x28e>
 8010cda:	1bf7      	subs	r7, r6, r7
 8010cdc:	4621      	mov	r1, r4
 8010cde:	463a      	mov	r2, r7
 8010ce0:	9802      	ldr	r0, [sp, #8]
 8010ce2:	f000 fc3f 	bl	8011564 <__lshift>
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	1bed      	subs	r5, r5, r7
 8010cea:	f100 0914 	add.w	r9, r0, #20
 8010cee:	f04f 0a00 	mov.w	sl, #0
 8010cf2:	e7b0      	b.n	8010c56 <__gethex+0x1f6>
 8010cf4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010cf8:	42a8      	cmp	r0, r5
 8010cfa:	dd72      	ble.n	8010de2 <__gethex+0x382>
 8010cfc:	1b45      	subs	r5, r0, r5
 8010cfe:	42ae      	cmp	r6, r5
 8010d00:	dc35      	bgt.n	8010d6e <__gethex+0x30e>
 8010d02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d06:	2b02      	cmp	r3, #2
 8010d08:	d029      	beq.n	8010d5e <__gethex+0x2fe>
 8010d0a:	2b03      	cmp	r3, #3
 8010d0c:	d02b      	beq.n	8010d66 <__gethex+0x306>
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d11c      	bne.n	8010d4c <__gethex+0x2ec>
 8010d12:	42ae      	cmp	r6, r5
 8010d14:	d11a      	bne.n	8010d4c <__gethex+0x2ec>
 8010d16:	2e01      	cmp	r6, #1
 8010d18:	d112      	bne.n	8010d40 <__gethex+0x2e0>
 8010d1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d1e:	9a05      	ldr	r2, [sp, #20]
 8010d20:	2762      	movs	r7, #98	; 0x62
 8010d22:	6013      	str	r3, [r2, #0]
 8010d24:	2301      	movs	r3, #1
 8010d26:	6123      	str	r3, [r4, #16]
 8010d28:	f8c9 3000 	str.w	r3, [r9]
 8010d2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d2e:	601c      	str	r4, [r3, #0]
 8010d30:	e728      	b.n	8010b84 <__gethex+0x124>
 8010d32:	bf00      	nop
 8010d34:	08012e58 	.word	0x08012e58
 8010d38:	08012de0 	.word	0x08012de0
 8010d3c:	08012df1 	.word	0x08012df1
 8010d40:	4620      	mov	r0, r4
 8010d42:	1e71      	subs	r1, r6, #1
 8010d44:	f000 fe4d 	bl	80119e2 <__any_on>
 8010d48:	2800      	cmp	r0, #0
 8010d4a:	d1e6      	bne.n	8010d1a <__gethex+0x2ba>
 8010d4c:	4621      	mov	r1, r4
 8010d4e:	9802      	ldr	r0, [sp, #8]
 8010d50:	f000 f9f0 	bl	8011134 <_Bfree>
 8010d54:	2300      	movs	r3, #0
 8010d56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010d58:	2750      	movs	r7, #80	; 0x50
 8010d5a:	6013      	str	r3, [r2, #0]
 8010d5c:	e712      	b.n	8010b84 <__gethex+0x124>
 8010d5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d1f3      	bne.n	8010d4c <__gethex+0x2ec>
 8010d64:	e7d9      	b.n	8010d1a <__gethex+0x2ba>
 8010d66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d1d6      	bne.n	8010d1a <__gethex+0x2ba>
 8010d6c:	e7ee      	b.n	8010d4c <__gethex+0x2ec>
 8010d6e:	1e6f      	subs	r7, r5, #1
 8010d70:	f1ba 0f00 	cmp.w	sl, #0
 8010d74:	d132      	bne.n	8010ddc <__gethex+0x37c>
 8010d76:	b127      	cbz	r7, 8010d82 <__gethex+0x322>
 8010d78:	4639      	mov	r1, r7
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	f000 fe31 	bl	80119e2 <__any_on>
 8010d80:	4682      	mov	sl, r0
 8010d82:	2101      	movs	r1, #1
 8010d84:	117b      	asrs	r3, r7, #5
 8010d86:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010d8a:	f007 071f 	and.w	r7, r7, #31
 8010d8e:	fa01 f707 	lsl.w	r7, r1, r7
 8010d92:	421f      	tst	r7, r3
 8010d94:	f04f 0702 	mov.w	r7, #2
 8010d98:	4629      	mov	r1, r5
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	bf18      	it	ne
 8010d9e:	f04a 0a02 	orrne.w	sl, sl, #2
 8010da2:	1b76      	subs	r6, r6, r5
 8010da4:	f7ff fdf4 	bl	8010990 <rshift>
 8010da8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010dac:	f1ba 0f00 	cmp.w	sl, #0
 8010db0:	d048      	beq.n	8010e44 <__gethex+0x3e4>
 8010db2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010db6:	2b02      	cmp	r3, #2
 8010db8:	d015      	beq.n	8010de6 <__gethex+0x386>
 8010dba:	2b03      	cmp	r3, #3
 8010dbc:	d017      	beq.n	8010dee <__gethex+0x38e>
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d109      	bne.n	8010dd6 <__gethex+0x376>
 8010dc2:	f01a 0f02 	tst.w	sl, #2
 8010dc6:	d006      	beq.n	8010dd6 <__gethex+0x376>
 8010dc8:	f8d9 0000 	ldr.w	r0, [r9]
 8010dcc:	ea4a 0a00 	orr.w	sl, sl, r0
 8010dd0:	f01a 0f01 	tst.w	sl, #1
 8010dd4:	d10e      	bne.n	8010df4 <__gethex+0x394>
 8010dd6:	f047 0710 	orr.w	r7, r7, #16
 8010dda:	e033      	b.n	8010e44 <__gethex+0x3e4>
 8010ddc:	f04f 0a01 	mov.w	sl, #1
 8010de0:	e7cf      	b.n	8010d82 <__gethex+0x322>
 8010de2:	2701      	movs	r7, #1
 8010de4:	e7e2      	b.n	8010dac <__gethex+0x34c>
 8010de6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010de8:	f1c3 0301 	rsb	r3, r3, #1
 8010dec:	9315      	str	r3, [sp, #84]	; 0x54
 8010dee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d0f0      	beq.n	8010dd6 <__gethex+0x376>
 8010df4:	f04f 0c00 	mov.w	ip, #0
 8010df8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010dfc:	f104 0314 	add.w	r3, r4, #20
 8010e00:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e04:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e12:	d01c      	beq.n	8010e4e <__gethex+0x3ee>
 8010e14:	3201      	adds	r2, #1
 8010e16:	6002      	str	r2, [r0, #0]
 8010e18:	2f02      	cmp	r7, #2
 8010e1a:	f104 0314 	add.w	r3, r4, #20
 8010e1e:	d13d      	bne.n	8010e9c <__gethex+0x43c>
 8010e20:	f8d8 2000 	ldr.w	r2, [r8]
 8010e24:	3a01      	subs	r2, #1
 8010e26:	42b2      	cmp	r2, r6
 8010e28:	d10a      	bne.n	8010e40 <__gethex+0x3e0>
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	1171      	asrs	r1, r6, #5
 8010e2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e32:	f006 061f 	and.w	r6, r6, #31
 8010e36:	fa02 f606 	lsl.w	r6, r2, r6
 8010e3a:	421e      	tst	r6, r3
 8010e3c:	bf18      	it	ne
 8010e3e:	4617      	movne	r7, r2
 8010e40:	f047 0720 	orr.w	r7, r7, #32
 8010e44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e46:	601c      	str	r4, [r3, #0]
 8010e48:	9b05      	ldr	r3, [sp, #20]
 8010e4a:	601d      	str	r5, [r3, #0]
 8010e4c:	e69a      	b.n	8010b84 <__gethex+0x124>
 8010e4e:	4299      	cmp	r1, r3
 8010e50:	f843 cc04 	str.w	ip, [r3, #-4]
 8010e54:	d8d8      	bhi.n	8010e08 <__gethex+0x3a8>
 8010e56:	68a3      	ldr	r3, [r4, #8]
 8010e58:	459b      	cmp	fp, r3
 8010e5a:	db17      	blt.n	8010e8c <__gethex+0x42c>
 8010e5c:	6861      	ldr	r1, [r4, #4]
 8010e5e:	9802      	ldr	r0, [sp, #8]
 8010e60:	3101      	adds	r1, #1
 8010e62:	f000 f927 	bl	80110b4 <_Balloc>
 8010e66:	4681      	mov	r9, r0
 8010e68:	b918      	cbnz	r0, 8010e72 <__gethex+0x412>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	2184      	movs	r1, #132	; 0x84
 8010e6e:	4b19      	ldr	r3, [pc, #100]	; (8010ed4 <__gethex+0x474>)
 8010e70:	e6ab      	b.n	8010bca <__gethex+0x16a>
 8010e72:	6922      	ldr	r2, [r4, #16]
 8010e74:	f104 010c 	add.w	r1, r4, #12
 8010e78:	3202      	adds	r2, #2
 8010e7a:	0092      	lsls	r2, r2, #2
 8010e7c:	300c      	adds	r0, #12
 8010e7e:	f7fd fbc9 	bl	800e614 <memcpy>
 8010e82:	4621      	mov	r1, r4
 8010e84:	9802      	ldr	r0, [sp, #8]
 8010e86:	f000 f955 	bl	8011134 <_Bfree>
 8010e8a:	464c      	mov	r4, r9
 8010e8c:	6923      	ldr	r3, [r4, #16]
 8010e8e:	1c5a      	adds	r2, r3, #1
 8010e90:	6122      	str	r2, [r4, #16]
 8010e92:	2201      	movs	r2, #1
 8010e94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010e98:	615a      	str	r2, [r3, #20]
 8010e9a:	e7bd      	b.n	8010e18 <__gethex+0x3b8>
 8010e9c:	6922      	ldr	r2, [r4, #16]
 8010e9e:	455a      	cmp	r2, fp
 8010ea0:	dd0b      	ble.n	8010eba <__gethex+0x45a>
 8010ea2:	2101      	movs	r1, #1
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	f7ff fd73 	bl	8010990 <rshift>
 8010eaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010eae:	3501      	adds	r5, #1
 8010eb0:	42ab      	cmp	r3, r5
 8010eb2:	f6ff aed4 	blt.w	8010c5e <__gethex+0x1fe>
 8010eb6:	2701      	movs	r7, #1
 8010eb8:	e7c2      	b.n	8010e40 <__gethex+0x3e0>
 8010eba:	f016 061f 	ands.w	r6, r6, #31
 8010ebe:	d0fa      	beq.n	8010eb6 <__gethex+0x456>
 8010ec0:	4453      	add	r3, sl
 8010ec2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010ec6:	f000 f9e7 	bl	8011298 <__hi0bits>
 8010eca:	f1c6 0620 	rsb	r6, r6, #32
 8010ece:	42b0      	cmp	r0, r6
 8010ed0:	dbe7      	blt.n	8010ea2 <__gethex+0x442>
 8010ed2:	e7f0      	b.n	8010eb6 <__gethex+0x456>
 8010ed4:	08012de0 	.word	0x08012de0

08010ed8 <L_shift>:
 8010ed8:	f1c2 0208 	rsb	r2, r2, #8
 8010edc:	0092      	lsls	r2, r2, #2
 8010ede:	b570      	push	{r4, r5, r6, lr}
 8010ee0:	f1c2 0620 	rsb	r6, r2, #32
 8010ee4:	6843      	ldr	r3, [r0, #4]
 8010ee6:	6804      	ldr	r4, [r0, #0]
 8010ee8:	fa03 f506 	lsl.w	r5, r3, r6
 8010eec:	432c      	orrs	r4, r5
 8010eee:	40d3      	lsrs	r3, r2
 8010ef0:	6004      	str	r4, [r0, #0]
 8010ef2:	f840 3f04 	str.w	r3, [r0, #4]!
 8010ef6:	4288      	cmp	r0, r1
 8010ef8:	d3f4      	bcc.n	8010ee4 <L_shift+0xc>
 8010efa:	bd70      	pop	{r4, r5, r6, pc}

08010efc <__match>:
 8010efc:	b530      	push	{r4, r5, lr}
 8010efe:	6803      	ldr	r3, [r0, #0]
 8010f00:	3301      	adds	r3, #1
 8010f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f06:	b914      	cbnz	r4, 8010f0e <__match+0x12>
 8010f08:	6003      	str	r3, [r0, #0]
 8010f0a:	2001      	movs	r0, #1
 8010f0c:	bd30      	pop	{r4, r5, pc}
 8010f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010f16:	2d19      	cmp	r5, #25
 8010f18:	bf98      	it	ls
 8010f1a:	3220      	addls	r2, #32
 8010f1c:	42a2      	cmp	r2, r4
 8010f1e:	d0f0      	beq.n	8010f02 <__match+0x6>
 8010f20:	2000      	movs	r0, #0
 8010f22:	e7f3      	b.n	8010f0c <__match+0x10>

08010f24 <__hexnan>:
 8010f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f28:	2500      	movs	r5, #0
 8010f2a:	680b      	ldr	r3, [r1, #0]
 8010f2c:	4682      	mov	sl, r0
 8010f2e:	115e      	asrs	r6, r3, #5
 8010f30:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f34:	f013 031f 	ands.w	r3, r3, #31
 8010f38:	bf18      	it	ne
 8010f3a:	3604      	addne	r6, #4
 8010f3c:	1f37      	subs	r7, r6, #4
 8010f3e:	46b9      	mov	r9, r7
 8010f40:	463c      	mov	r4, r7
 8010f42:	46ab      	mov	fp, r5
 8010f44:	b087      	sub	sp, #28
 8010f46:	4690      	mov	r8, r2
 8010f48:	6802      	ldr	r2, [r0, #0]
 8010f4a:	9301      	str	r3, [sp, #4]
 8010f4c:	f846 5c04 	str.w	r5, [r6, #-4]
 8010f50:	9502      	str	r5, [sp, #8]
 8010f52:	7851      	ldrb	r1, [r2, #1]
 8010f54:	1c53      	adds	r3, r2, #1
 8010f56:	9303      	str	r3, [sp, #12]
 8010f58:	b341      	cbz	r1, 8010fac <__hexnan+0x88>
 8010f5a:	4608      	mov	r0, r1
 8010f5c:	9205      	str	r2, [sp, #20]
 8010f5e:	9104      	str	r1, [sp, #16]
 8010f60:	f7ff fd69 	bl	8010a36 <__hexdig_fun>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	d14f      	bne.n	8011008 <__hexnan+0xe4>
 8010f68:	9904      	ldr	r1, [sp, #16]
 8010f6a:	9a05      	ldr	r2, [sp, #20]
 8010f6c:	2920      	cmp	r1, #32
 8010f6e:	d818      	bhi.n	8010fa2 <__hexnan+0x7e>
 8010f70:	9b02      	ldr	r3, [sp, #8]
 8010f72:	459b      	cmp	fp, r3
 8010f74:	dd13      	ble.n	8010f9e <__hexnan+0x7a>
 8010f76:	454c      	cmp	r4, r9
 8010f78:	d206      	bcs.n	8010f88 <__hexnan+0x64>
 8010f7a:	2d07      	cmp	r5, #7
 8010f7c:	dc04      	bgt.n	8010f88 <__hexnan+0x64>
 8010f7e:	462a      	mov	r2, r5
 8010f80:	4649      	mov	r1, r9
 8010f82:	4620      	mov	r0, r4
 8010f84:	f7ff ffa8 	bl	8010ed8 <L_shift>
 8010f88:	4544      	cmp	r4, r8
 8010f8a:	d950      	bls.n	801102e <__hexnan+0x10a>
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	f1a4 0904 	sub.w	r9, r4, #4
 8010f92:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f96:	461d      	mov	r5, r3
 8010f98:	464c      	mov	r4, r9
 8010f9a:	f8cd b008 	str.w	fp, [sp, #8]
 8010f9e:	9a03      	ldr	r2, [sp, #12]
 8010fa0:	e7d7      	b.n	8010f52 <__hexnan+0x2e>
 8010fa2:	2929      	cmp	r1, #41	; 0x29
 8010fa4:	d156      	bne.n	8011054 <__hexnan+0x130>
 8010fa6:	3202      	adds	r2, #2
 8010fa8:	f8ca 2000 	str.w	r2, [sl]
 8010fac:	f1bb 0f00 	cmp.w	fp, #0
 8010fb0:	d050      	beq.n	8011054 <__hexnan+0x130>
 8010fb2:	454c      	cmp	r4, r9
 8010fb4:	d206      	bcs.n	8010fc4 <__hexnan+0xa0>
 8010fb6:	2d07      	cmp	r5, #7
 8010fb8:	dc04      	bgt.n	8010fc4 <__hexnan+0xa0>
 8010fba:	462a      	mov	r2, r5
 8010fbc:	4649      	mov	r1, r9
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f7ff ff8a 	bl	8010ed8 <L_shift>
 8010fc4:	4544      	cmp	r4, r8
 8010fc6:	d934      	bls.n	8011032 <__hexnan+0x10e>
 8010fc8:	4623      	mov	r3, r4
 8010fca:	f1a8 0204 	sub.w	r2, r8, #4
 8010fce:	f853 1b04 	ldr.w	r1, [r3], #4
 8010fd2:	429f      	cmp	r7, r3
 8010fd4:	f842 1f04 	str.w	r1, [r2, #4]!
 8010fd8:	d2f9      	bcs.n	8010fce <__hexnan+0xaa>
 8010fda:	1b3b      	subs	r3, r7, r4
 8010fdc:	f023 0303 	bic.w	r3, r3, #3
 8010fe0:	3304      	adds	r3, #4
 8010fe2:	3401      	adds	r4, #1
 8010fe4:	3e03      	subs	r6, #3
 8010fe6:	42b4      	cmp	r4, r6
 8010fe8:	bf88      	it	hi
 8010fea:	2304      	movhi	r3, #4
 8010fec:	2200      	movs	r2, #0
 8010fee:	4443      	add	r3, r8
 8010ff0:	f843 2b04 	str.w	r2, [r3], #4
 8010ff4:	429f      	cmp	r7, r3
 8010ff6:	d2fb      	bcs.n	8010ff0 <__hexnan+0xcc>
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	b91b      	cbnz	r3, 8011004 <__hexnan+0xe0>
 8010ffc:	4547      	cmp	r7, r8
 8010ffe:	d127      	bne.n	8011050 <__hexnan+0x12c>
 8011000:	2301      	movs	r3, #1
 8011002:	603b      	str	r3, [r7, #0]
 8011004:	2005      	movs	r0, #5
 8011006:	e026      	b.n	8011056 <__hexnan+0x132>
 8011008:	3501      	adds	r5, #1
 801100a:	2d08      	cmp	r5, #8
 801100c:	f10b 0b01 	add.w	fp, fp, #1
 8011010:	dd06      	ble.n	8011020 <__hexnan+0xfc>
 8011012:	4544      	cmp	r4, r8
 8011014:	d9c3      	bls.n	8010f9e <__hexnan+0x7a>
 8011016:	2300      	movs	r3, #0
 8011018:	2501      	movs	r5, #1
 801101a:	f844 3c04 	str.w	r3, [r4, #-4]
 801101e:	3c04      	subs	r4, #4
 8011020:	6822      	ldr	r2, [r4, #0]
 8011022:	f000 000f 	and.w	r0, r0, #15
 8011026:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801102a:	6022      	str	r2, [r4, #0]
 801102c:	e7b7      	b.n	8010f9e <__hexnan+0x7a>
 801102e:	2508      	movs	r5, #8
 8011030:	e7b5      	b.n	8010f9e <__hexnan+0x7a>
 8011032:	9b01      	ldr	r3, [sp, #4]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d0df      	beq.n	8010ff8 <__hexnan+0xd4>
 8011038:	f04f 32ff 	mov.w	r2, #4294967295
 801103c:	f1c3 0320 	rsb	r3, r3, #32
 8011040:	fa22 f303 	lsr.w	r3, r2, r3
 8011044:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011048:	401a      	ands	r2, r3
 801104a:	f846 2c04 	str.w	r2, [r6, #-4]
 801104e:	e7d3      	b.n	8010ff8 <__hexnan+0xd4>
 8011050:	3f04      	subs	r7, #4
 8011052:	e7d1      	b.n	8010ff8 <__hexnan+0xd4>
 8011054:	2004      	movs	r0, #4
 8011056:	b007      	add	sp, #28
 8011058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801105c <_localeconv_r>:
 801105c:	4800      	ldr	r0, [pc, #0]	; (8011060 <_localeconv_r+0x4>)
 801105e:	4770      	bx	lr
 8011060:	20000a14 	.word	0x20000a14

08011064 <malloc>:
 8011064:	4b02      	ldr	r3, [pc, #8]	; (8011070 <malloc+0xc>)
 8011066:	4601      	mov	r1, r0
 8011068:	6818      	ldr	r0, [r3, #0]
 801106a:	f000 bd57 	b.w	8011b1c <_malloc_r>
 801106e:	bf00      	nop
 8011070:	200008bc 	.word	0x200008bc

08011074 <__ascii_mbtowc>:
 8011074:	b082      	sub	sp, #8
 8011076:	b901      	cbnz	r1, 801107a <__ascii_mbtowc+0x6>
 8011078:	a901      	add	r1, sp, #4
 801107a:	b142      	cbz	r2, 801108e <__ascii_mbtowc+0x1a>
 801107c:	b14b      	cbz	r3, 8011092 <__ascii_mbtowc+0x1e>
 801107e:	7813      	ldrb	r3, [r2, #0]
 8011080:	600b      	str	r3, [r1, #0]
 8011082:	7812      	ldrb	r2, [r2, #0]
 8011084:	1e10      	subs	r0, r2, #0
 8011086:	bf18      	it	ne
 8011088:	2001      	movne	r0, #1
 801108a:	b002      	add	sp, #8
 801108c:	4770      	bx	lr
 801108e:	4610      	mov	r0, r2
 8011090:	e7fb      	b.n	801108a <__ascii_mbtowc+0x16>
 8011092:	f06f 0001 	mvn.w	r0, #1
 8011096:	e7f8      	b.n	801108a <__ascii_mbtowc+0x16>

08011098 <memchr>:
 8011098:	4603      	mov	r3, r0
 801109a:	b510      	push	{r4, lr}
 801109c:	b2c9      	uxtb	r1, r1
 801109e:	4402      	add	r2, r0
 80110a0:	4293      	cmp	r3, r2
 80110a2:	4618      	mov	r0, r3
 80110a4:	d101      	bne.n	80110aa <memchr+0x12>
 80110a6:	2000      	movs	r0, #0
 80110a8:	e003      	b.n	80110b2 <memchr+0x1a>
 80110aa:	7804      	ldrb	r4, [r0, #0]
 80110ac:	3301      	adds	r3, #1
 80110ae:	428c      	cmp	r4, r1
 80110b0:	d1f6      	bne.n	80110a0 <memchr+0x8>
 80110b2:	bd10      	pop	{r4, pc}

080110b4 <_Balloc>:
 80110b4:	b570      	push	{r4, r5, r6, lr}
 80110b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80110b8:	4604      	mov	r4, r0
 80110ba:	460d      	mov	r5, r1
 80110bc:	b976      	cbnz	r6, 80110dc <_Balloc+0x28>
 80110be:	2010      	movs	r0, #16
 80110c0:	f7ff ffd0 	bl	8011064 <malloc>
 80110c4:	4602      	mov	r2, r0
 80110c6:	6260      	str	r0, [r4, #36]	; 0x24
 80110c8:	b920      	cbnz	r0, 80110d4 <_Balloc+0x20>
 80110ca:	2166      	movs	r1, #102	; 0x66
 80110cc:	4b17      	ldr	r3, [pc, #92]	; (801112c <_Balloc+0x78>)
 80110ce:	4818      	ldr	r0, [pc, #96]	; (8011130 <_Balloc+0x7c>)
 80110d0:	f7fe fdb2 	bl	800fc38 <__assert_func>
 80110d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80110d8:	6006      	str	r6, [r0, #0]
 80110da:	60c6      	str	r6, [r0, #12]
 80110dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80110de:	68f3      	ldr	r3, [r6, #12]
 80110e0:	b183      	cbz	r3, 8011104 <_Balloc+0x50>
 80110e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80110ea:	b9b8      	cbnz	r0, 801111c <_Balloc+0x68>
 80110ec:	2101      	movs	r1, #1
 80110ee:	fa01 f605 	lsl.w	r6, r1, r5
 80110f2:	1d72      	adds	r2, r6, #5
 80110f4:	4620      	mov	r0, r4
 80110f6:	0092      	lsls	r2, r2, #2
 80110f8:	f000 fc94 	bl	8011a24 <_calloc_r>
 80110fc:	b160      	cbz	r0, 8011118 <_Balloc+0x64>
 80110fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011102:	e00e      	b.n	8011122 <_Balloc+0x6e>
 8011104:	2221      	movs	r2, #33	; 0x21
 8011106:	2104      	movs	r1, #4
 8011108:	4620      	mov	r0, r4
 801110a:	f000 fc8b 	bl	8011a24 <_calloc_r>
 801110e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011110:	60f0      	str	r0, [r6, #12]
 8011112:	68db      	ldr	r3, [r3, #12]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d1e4      	bne.n	80110e2 <_Balloc+0x2e>
 8011118:	2000      	movs	r0, #0
 801111a:	bd70      	pop	{r4, r5, r6, pc}
 801111c:	6802      	ldr	r2, [r0, #0]
 801111e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011122:	2300      	movs	r3, #0
 8011124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011128:	e7f7      	b.n	801111a <_Balloc+0x66>
 801112a:	bf00      	nop
 801112c:	08012cc8 	.word	0x08012cc8
 8011130:	08012e6c 	.word	0x08012e6c

08011134 <_Bfree>:
 8011134:	b570      	push	{r4, r5, r6, lr}
 8011136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011138:	4605      	mov	r5, r0
 801113a:	460c      	mov	r4, r1
 801113c:	b976      	cbnz	r6, 801115c <_Bfree+0x28>
 801113e:	2010      	movs	r0, #16
 8011140:	f7ff ff90 	bl	8011064 <malloc>
 8011144:	4602      	mov	r2, r0
 8011146:	6268      	str	r0, [r5, #36]	; 0x24
 8011148:	b920      	cbnz	r0, 8011154 <_Bfree+0x20>
 801114a:	218a      	movs	r1, #138	; 0x8a
 801114c:	4b08      	ldr	r3, [pc, #32]	; (8011170 <_Bfree+0x3c>)
 801114e:	4809      	ldr	r0, [pc, #36]	; (8011174 <_Bfree+0x40>)
 8011150:	f7fe fd72 	bl	800fc38 <__assert_func>
 8011154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011158:	6006      	str	r6, [r0, #0]
 801115a:	60c6      	str	r6, [r0, #12]
 801115c:	b13c      	cbz	r4, 801116e <_Bfree+0x3a>
 801115e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011160:	6862      	ldr	r2, [r4, #4]
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011168:	6021      	str	r1, [r4, #0]
 801116a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801116e:	bd70      	pop	{r4, r5, r6, pc}
 8011170:	08012cc8 	.word	0x08012cc8
 8011174:	08012e6c 	.word	0x08012e6c

08011178 <__multadd>:
 8011178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801117c:	4607      	mov	r7, r0
 801117e:	460c      	mov	r4, r1
 8011180:	461e      	mov	r6, r3
 8011182:	2000      	movs	r0, #0
 8011184:	690d      	ldr	r5, [r1, #16]
 8011186:	f101 0c14 	add.w	ip, r1, #20
 801118a:	f8dc 3000 	ldr.w	r3, [ip]
 801118e:	3001      	adds	r0, #1
 8011190:	b299      	uxth	r1, r3
 8011192:	fb02 6101 	mla	r1, r2, r1, r6
 8011196:	0c1e      	lsrs	r6, r3, #16
 8011198:	0c0b      	lsrs	r3, r1, #16
 801119a:	fb02 3306 	mla	r3, r2, r6, r3
 801119e:	b289      	uxth	r1, r1
 80111a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80111a4:	4285      	cmp	r5, r0
 80111a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80111aa:	f84c 1b04 	str.w	r1, [ip], #4
 80111ae:	dcec      	bgt.n	801118a <__multadd+0x12>
 80111b0:	b30e      	cbz	r6, 80111f6 <__multadd+0x7e>
 80111b2:	68a3      	ldr	r3, [r4, #8]
 80111b4:	42ab      	cmp	r3, r5
 80111b6:	dc19      	bgt.n	80111ec <__multadd+0x74>
 80111b8:	6861      	ldr	r1, [r4, #4]
 80111ba:	4638      	mov	r0, r7
 80111bc:	3101      	adds	r1, #1
 80111be:	f7ff ff79 	bl	80110b4 <_Balloc>
 80111c2:	4680      	mov	r8, r0
 80111c4:	b928      	cbnz	r0, 80111d2 <__multadd+0x5a>
 80111c6:	4602      	mov	r2, r0
 80111c8:	21b5      	movs	r1, #181	; 0xb5
 80111ca:	4b0c      	ldr	r3, [pc, #48]	; (80111fc <__multadd+0x84>)
 80111cc:	480c      	ldr	r0, [pc, #48]	; (8011200 <__multadd+0x88>)
 80111ce:	f7fe fd33 	bl	800fc38 <__assert_func>
 80111d2:	6922      	ldr	r2, [r4, #16]
 80111d4:	f104 010c 	add.w	r1, r4, #12
 80111d8:	3202      	adds	r2, #2
 80111da:	0092      	lsls	r2, r2, #2
 80111dc:	300c      	adds	r0, #12
 80111de:	f7fd fa19 	bl	800e614 <memcpy>
 80111e2:	4621      	mov	r1, r4
 80111e4:	4638      	mov	r0, r7
 80111e6:	f7ff ffa5 	bl	8011134 <_Bfree>
 80111ea:	4644      	mov	r4, r8
 80111ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80111f0:	3501      	adds	r5, #1
 80111f2:	615e      	str	r6, [r3, #20]
 80111f4:	6125      	str	r5, [r4, #16]
 80111f6:	4620      	mov	r0, r4
 80111f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111fc:	08012de0 	.word	0x08012de0
 8011200:	08012e6c 	.word	0x08012e6c

08011204 <__s2b>:
 8011204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011208:	4615      	mov	r5, r2
 801120a:	2209      	movs	r2, #9
 801120c:	461f      	mov	r7, r3
 801120e:	3308      	adds	r3, #8
 8011210:	460c      	mov	r4, r1
 8011212:	fb93 f3f2 	sdiv	r3, r3, r2
 8011216:	4606      	mov	r6, r0
 8011218:	2201      	movs	r2, #1
 801121a:	2100      	movs	r1, #0
 801121c:	429a      	cmp	r2, r3
 801121e:	db09      	blt.n	8011234 <__s2b+0x30>
 8011220:	4630      	mov	r0, r6
 8011222:	f7ff ff47 	bl	80110b4 <_Balloc>
 8011226:	b940      	cbnz	r0, 801123a <__s2b+0x36>
 8011228:	4602      	mov	r2, r0
 801122a:	21ce      	movs	r1, #206	; 0xce
 801122c:	4b18      	ldr	r3, [pc, #96]	; (8011290 <__s2b+0x8c>)
 801122e:	4819      	ldr	r0, [pc, #100]	; (8011294 <__s2b+0x90>)
 8011230:	f7fe fd02 	bl	800fc38 <__assert_func>
 8011234:	0052      	lsls	r2, r2, #1
 8011236:	3101      	adds	r1, #1
 8011238:	e7f0      	b.n	801121c <__s2b+0x18>
 801123a:	9b08      	ldr	r3, [sp, #32]
 801123c:	2d09      	cmp	r5, #9
 801123e:	6143      	str	r3, [r0, #20]
 8011240:	f04f 0301 	mov.w	r3, #1
 8011244:	6103      	str	r3, [r0, #16]
 8011246:	dd16      	ble.n	8011276 <__s2b+0x72>
 8011248:	f104 0909 	add.w	r9, r4, #9
 801124c:	46c8      	mov	r8, r9
 801124e:	442c      	add	r4, r5
 8011250:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011254:	4601      	mov	r1, r0
 8011256:	220a      	movs	r2, #10
 8011258:	4630      	mov	r0, r6
 801125a:	3b30      	subs	r3, #48	; 0x30
 801125c:	f7ff ff8c 	bl	8011178 <__multadd>
 8011260:	45a0      	cmp	r8, r4
 8011262:	d1f5      	bne.n	8011250 <__s2b+0x4c>
 8011264:	f1a5 0408 	sub.w	r4, r5, #8
 8011268:	444c      	add	r4, r9
 801126a:	1b2d      	subs	r5, r5, r4
 801126c:	1963      	adds	r3, r4, r5
 801126e:	42bb      	cmp	r3, r7
 8011270:	db04      	blt.n	801127c <__s2b+0x78>
 8011272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011276:	2509      	movs	r5, #9
 8011278:	340a      	adds	r4, #10
 801127a:	e7f6      	b.n	801126a <__s2b+0x66>
 801127c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011280:	4601      	mov	r1, r0
 8011282:	220a      	movs	r2, #10
 8011284:	4630      	mov	r0, r6
 8011286:	3b30      	subs	r3, #48	; 0x30
 8011288:	f7ff ff76 	bl	8011178 <__multadd>
 801128c:	e7ee      	b.n	801126c <__s2b+0x68>
 801128e:	bf00      	nop
 8011290:	08012de0 	.word	0x08012de0
 8011294:	08012e6c 	.word	0x08012e6c

08011298 <__hi0bits>:
 8011298:	0c02      	lsrs	r2, r0, #16
 801129a:	0412      	lsls	r2, r2, #16
 801129c:	4603      	mov	r3, r0
 801129e:	b9ca      	cbnz	r2, 80112d4 <__hi0bits+0x3c>
 80112a0:	0403      	lsls	r3, r0, #16
 80112a2:	2010      	movs	r0, #16
 80112a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80112a8:	bf04      	itt	eq
 80112aa:	021b      	lsleq	r3, r3, #8
 80112ac:	3008      	addeq	r0, #8
 80112ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80112b2:	bf04      	itt	eq
 80112b4:	011b      	lsleq	r3, r3, #4
 80112b6:	3004      	addeq	r0, #4
 80112b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80112bc:	bf04      	itt	eq
 80112be:	009b      	lsleq	r3, r3, #2
 80112c0:	3002      	addeq	r0, #2
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	db05      	blt.n	80112d2 <__hi0bits+0x3a>
 80112c6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80112ca:	f100 0001 	add.w	r0, r0, #1
 80112ce:	bf08      	it	eq
 80112d0:	2020      	moveq	r0, #32
 80112d2:	4770      	bx	lr
 80112d4:	2000      	movs	r0, #0
 80112d6:	e7e5      	b.n	80112a4 <__hi0bits+0xc>

080112d8 <__lo0bits>:
 80112d8:	6803      	ldr	r3, [r0, #0]
 80112da:	4602      	mov	r2, r0
 80112dc:	f013 0007 	ands.w	r0, r3, #7
 80112e0:	d00b      	beq.n	80112fa <__lo0bits+0x22>
 80112e2:	07d9      	lsls	r1, r3, #31
 80112e4:	d421      	bmi.n	801132a <__lo0bits+0x52>
 80112e6:	0798      	lsls	r0, r3, #30
 80112e8:	bf49      	itett	mi
 80112ea:	085b      	lsrmi	r3, r3, #1
 80112ec:	089b      	lsrpl	r3, r3, #2
 80112ee:	2001      	movmi	r0, #1
 80112f0:	6013      	strmi	r3, [r2, #0]
 80112f2:	bf5c      	itt	pl
 80112f4:	2002      	movpl	r0, #2
 80112f6:	6013      	strpl	r3, [r2, #0]
 80112f8:	4770      	bx	lr
 80112fa:	b299      	uxth	r1, r3
 80112fc:	b909      	cbnz	r1, 8011302 <__lo0bits+0x2a>
 80112fe:	2010      	movs	r0, #16
 8011300:	0c1b      	lsrs	r3, r3, #16
 8011302:	b2d9      	uxtb	r1, r3
 8011304:	b909      	cbnz	r1, 801130a <__lo0bits+0x32>
 8011306:	3008      	adds	r0, #8
 8011308:	0a1b      	lsrs	r3, r3, #8
 801130a:	0719      	lsls	r1, r3, #28
 801130c:	bf04      	itt	eq
 801130e:	091b      	lsreq	r3, r3, #4
 8011310:	3004      	addeq	r0, #4
 8011312:	0799      	lsls	r1, r3, #30
 8011314:	bf04      	itt	eq
 8011316:	089b      	lsreq	r3, r3, #2
 8011318:	3002      	addeq	r0, #2
 801131a:	07d9      	lsls	r1, r3, #31
 801131c:	d403      	bmi.n	8011326 <__lo0bits+0x4e>
 801131e:	085b      	lsrs	r3, r3, #1
 8011320:	f100 0001 	add.w	r0, r0, #1
 8011324:	d003      	beq.n	801132e <__lo0bits+0x56>
 8011326:	6013      	str	r3, [r2, #0]
 8011328:	4770      	bx	lr
 801132a:	2000      	movs	r0, #0
 801132c:	4770      	bx	lr
 801132e:	2020      	movs	r0, #32
 8011330:	4770      	bx	lr
	...

08011334 <__i2b>:
 8011334:	b510      	push	{r4, lr}
 8011336:	460c      	mov	r4, r1
 8011338:	2101      	movs	r1, #1
 801133a:	f7ff febb 	bl	80110b4 <_Balloc>
 801133e:	4602      	mov	r2, r0
 8011340:	b928      	cbnz	r0, 801134e <__i2b+0x1a>
 8011342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011346:	4b04      	ldr	r3, [pc, #16]	; (8011358 <__i2b+0x24>)
 8011348:	4804      	ldr	r0, [pc, #16]	; (801135c <__i2b+0x28>)
 801134a:	f7fe fc75 	bl	800fc38 <__assert_func>
 801134e:	2301      	movs	r3, #1
 8011350:	6144      	str	r4, [r0, #20]
 8011352:	6103      	str	r3, [r0, #16]
 8011354:	bd10      	pop	{r4, pc}
 8011356:	bf00      	nop
 8011358:	08012de0 	.word	0x08012de0
 801135c:	08012e6c 	.word	0x08012e6c

08011360 <__multiply>:
 8011360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011364:	4691      	mov	r9, r2
 8011366:	690a      	ldr	r2, [r1, #16]
 8011368:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801136c:	460c      	mov	r4, r1
 801136e:	429a      	cmp	r2, r3
 8011370:	bfbe      	ittt	lt
 8011372:	460b      	movlt	r3, r1
 8011374:	464c      	movlt	r4, r9
 8011376:	4699      	movlt	r9, r3
 8011378:	6927      	ldr	r7, [r4, #16]
 801137a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801137e:	68a3      	ldr	r3, [r4, #8]
 8011380:	6861      	ldr	r1, [r4, #4]
 8011382:	eb07 060a 	add.w	r6, r7, sl
 8011386:	42b3      	cmp	r3, r6
 8011388:	b085      	sub	sp, #20
 801138a:	bfb8      	it	lt
 801138c:	3101      	addlt	r1, #1
 801138e:	f7ff fe91 	bl	80110b4 <_Balloc>
 8011392:	b930      	cbnz	r0, 80113a2 <__multiply+0x42>
 8011394:	4602      	mov	r2, r0
 8011396:	f240 115d 	movw	r1, #349	; 0x15d
 801139a:	4b43      	ldr	r3, [pc, #268]	; (80114a8 <__multiply+0x148>)
 801139c:	4843      	ldr	r0, [pc, #268]	; (80114ac <__multiply+0x14c>)
 801139e:	f7fe fc4b 	bl	800fc38 <__assert_func>
 80113a2:	f100 0514 	add.w	r5, r0, #20
 80113a6:	462b      	mov	r3, r5
 80113a8:	2200      	movs	r2, #0
 80113aa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80113ae:	4543      	cmp	r3, r8
 80113b0:	d321      	bcc.n	80113f6 <__multiply+0x96>
 80113b2:	f104 0314 	add.w	r3, r4, #20
 80113b6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80113ba:	f109 0314 	add.w	r3, r9, #20
 80113be:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80113c2:	9202      	str	r2, [sp, #8]
 80113c4:	1b3a      	subs	r2, r7, r4
 80113c6:	3a15      	subs	r2, #21
 80113c8:	f022 0203 	bic.w	r2, r2, #3
 80113cc:	3204      	adds	r2, #4
 80113ce:	f104 0115 	add.w	r1, r4, #21
 80113d2:	428f      	cmp	r7, r1
 80113d4:	bf38      	it	cc
 80113d6:	2204      	movcc	r2, #4
 80113d8:	9201      	str	r2, [sp, #4]
 80113da:	9a02      	ldr	r2, [sp, #8]
 80113dc:	9303      	str	r3, [sp, #12]
 80113de:	429a      	cmp	r2, r3
 80113e0:	d80c      	bhi.n	80113fc <__multiply+0x9c>
 80113e2:	2e00      	cmp	r6, #0
 80113e4:	dd03      	ble.n	80113ee <__multiply+0x8e>
 80113e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d059      	beq.n	80114a2 <__multiply+0x142>
 80113ee:	6106      	str	r6, [r0, #16]
 80113f0:	b005      	add	sp, #20
 80113f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f6:	f843 2b04 	str.w	r2, [r3], #4
 80113fa:	e7d8      	b.n	80113ae <__multiply+0x4e>
 80113fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8011400:	f1ba 0f00 	cmp.w	sl, #0
 8011404:	d023      	beq.n	801144e <__multiply+0xee>
 8011406:	46a9      	mov	r9, r5
 8011408:	f04f 0c00 	mov.w	ip, #0
 801140c:	f104 0e14 	add.w	lr, r4, #20
 8011410:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011414:	f8d9 1000 	ldr.w	r1, [r9]
 8011418:	fa1f fb82 	uxth.w	fp, r2
 801141c:	b289      	uxth	r1, r1
 801141e:	fb0a 110b 	mla	r1, sl, fp, r1
 8011422:	4461      	add	r1, ip
 8011424:	f8d9 c000 	ldr.w	ip, [r9]
 8011428:	0c12      	lsrs	r2, r2, #16
 801142a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801142e:	fb0a c202 	mla	r2, sl, r2, ip
 8011432:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011436:	b289      	uxth	r1, r1
 8011438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801143c:	4577      	cmp	r7, lr
 801143e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011442:	f849 1b04 	str.w	r1, [r9], #4
 8011446:	d8e3      	bhi.n	8011410 <__multiply+0xb0>
 8011448:	9a01      	ldr	r2, [sp, #4]
 801144a:	f845 c002 	str.w	ip, [r5, r2]
 801144e:	9a03      	ldr	r2, [sp, #12]
 8011450:	3304      	adds	r3, #4
 8011452:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011456:	f1b9 0f00 	cmp.w	r9, #0
 801145a:	d020      	beq.n	801149e <__multiply+0x13e>
 801145c:	46ae      	mov	lr, r5
 801145e:	f04f 0a00 	mov.w	sl, #0
 8011462:	6829      	ldr	r1, [r5, #0]
 8011464:	f104 0c14 	add.w	ip, r4, #20
 8011468:	f8bc b000 	ldrh.w	fp, [ip]
 801146c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011470:	b289      	uxth	r1, r1
 8011472:	fb09 220b 	mla	r2, r9, fp, r2
 8011476:	4492      	add	sl, r2
 8011478:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801147c:	f84e 1b04 	str.w	r1, [lr], #4
 8011480:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011484:	f8be 1000 	ldrh.w	r1, [lr]
 8011488:	0c12      	lsrs	r2, r2, #16
 801148a:	fb09 1102 	mla	r1, r9, r2, r1
 801148e:	4567      	cmp	r7, ip
 8011490:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011494:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011498:	d8e6      	bhi.n	8011468 <__multiply+0x108>
 801149a:	9a01      	ldr	r2, [sp, #4]
 801149c:	50a9      	str	r1, [r5, r2]
 801149e:	3504      	adds	r5, #4
 80114a0:	e79b      	b.n	80113da <__multiply+0x7a>
 80114a2:	3e01      	subs	r6, #1
 80114a4:	e79d      	b.n	80113e2 <__multiply+0x82>
 80114a6:	bf00      	nop
 80114a8:	08012de0 	.word	0x08012de0
 80114ac:	08012e6c 	.word	0x08012e6c

080114b0 <__pow5mult>:
 80114b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114b4:	4615      	mov	r5, r2
 80114b6:	f012 0203 	ands.w	r2, r2, #3
 80114ba:	4606      	mov	r6, r0
 80114bc:	460f      	mov	r7, r1
 80114be:	d007      	beq.n	80114d0 <__pow5mult+0x20>
 80114c0:	4c25      	ldr	r4, [pc, #148]	; (8011558 <__pow5mult+0xa8>)
 80114c2:	3a01      	subs	r2, #1
 80114c4:	2300      	movs	r3, #0
 80114c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80114ca:	f7ff fe55 	bl	8011178 <__multadd>
 80114ce:	4607      	mov	r7, r0
 80114d0:	10ad      	asrs	r5, r5, #2
 80114d2:	d03d      	beq.n	8011550 <__pow5mult+0xa0>
 80114d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80114d6:	b97c      	cbnz	r4, 80114f8 <__pow5mult+0x48>
 80114d8:	2010      	movs	r0, #16
 80114da:	f7ff fdc3 	bl	8011064 <malloc>
 80114de:	4602      	mov	r2, r0
 80114e0:	6270      	str	r0, [r6, #36]	; 0x24
 80114e2:	b928      	cbnz	r0, 80114f0 <__pow5mult+0x40>
 80114e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80114e8:	4b1c      	ldr	r3, [pc, #112]	; (801155c <__pow5mult+0xac>)
 80114ea:	481d      	ldr	r0, [pc, #116]	; (8011560 <__pow5mult+0xb0>)
 80114ec:	f7fe fba4 	bl	800fc38 <__assert_func>
 80114f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80114f4:	6004      	str	r4, [r0, #0]
 80114f6:	60c4      	str	r4, [r0, #12]
 80114f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80114fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011500:	b94c      	cbnz	r4, 8011516 <__pow5mult+0x66>
 8011502:	f240 2171 	movw	r1, #625	; 0x271
 8011506:	4630      	mov	r0, r6
 8011508:	f7ff ff14 	bl	8011334 <__i2b>
 801150c:	2300      	movs	r3, #0
 801150e:	4604      	mov	r4, r0
 8011510:	f8c8 0008 	str.w	r0, [r8, #8]
 8011514:	6003      	str	r3, [r0, #0]
 8011516:	f04f 0900 	mov.w	r9, #0
 801151a:	07eb      	lsls	r3, r5, #31
 801151c:	d50a      	bpl.n	8011534 <__pow5mult+0x84>
 801151e:	4639      	mov	r1, r7
 8011520:	4622      	mov	r2, r4
 8011522:	4630      	mov	r0, r6
 8011524:	f7ff ff1c 	bl	8011360 <__multiply>
 8011528:	4680      	mov	r8, r0
 801152a:	4639      	mov	r1, r7
 801152c:	4630      	mov	r0, r6
 801152e:	f7ff fe01 	bl	8011134 <_Bfree>
 8011532:	4647      	mov	r7, r8
 8011534:	106d      	asrs	r5, r5, #1
 8011536:	d00b      	beq.n	8011550 <__pow5mult+0xa0>
 8011538:	6820      	ldr	r0, [r4, #0]
 801153a:	b938      	cbnz	r0, 801154c <__pow5mult+0x9c>
 801153c:	4622      	mov	r2, r4
 801153e:	4621      	mov	r1, r4
 8011540:	4630      	mov	r0, r6
 8011542:	f7ff ff0d 	bl	8011360 <__multiply>
 8011546:	6020      	str	r0, [r4, #0]
 8011548:	f8c0 9000 	str.w	r9, [r0]
 801154c:	4604      	mov	r4, r0
 801154e:	e7e4      	b.n	801151a <__pow5mult+0x6a>
 8011550:	4638      	mov	r0, r7
 8011552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011556:	bf00      	nop
 8011558:	08012fb8 	.word	0x08012fb8
 801155c:	08012cc8 	.word	0x08012cc8
 8011560:	08012e6c 	.word	0x08012e6c

08011564 <__lshift>:
 8011564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011568:	460c      	mov	r4, r1
 801156a:	4607      	mov	r7, r0
 801156c:	4691      	mov	r9, r2
 801156e:	6923      	ldr	r3, [r4, #16]
 8011570:	6849      	ldr	r1, [r1, #4]
 8011572:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011576:	68a3      	ldr	r3, [r4, #8]
 8011578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801157c:	f108 0601 	add.w	r6, r8, #1
 8011580:	42b3      	cmp	r3, r6
 8011582:	db0b      	blt.n	801159c <__lshift+0x38>
 8011584:	4638      	mov	r0, r7
 8011586:	f7ff fd95 	bl	80110b4 <_Balloc>
 801158a:	4605      	mov	r5, r0
 801158c:	b948      	cbnz	r0, 80115a2 <__lshift+0x3e>
 801158e:	4602      	mov	r2, r0
 8011590:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011594:	4b29      	ldr	r3, [pc, #164]	; (801163c <__lshift+0xd8>)
 8011596:	482a      	ldr	r0, [pc, #168]	; (8011640 <__lshift+0xdc>)
 8011598:	f7fe fb4e 	bl	800fc38 <__assert_func>
 801159c:	3101      	adds	r1, #1
 801159e:	005b      	lsls	r3, r3, #1
 80115a0:	e7ee      	b.n	8011580 <__lshift+0x1c>
 80115a2:	2300      	movs	r3, #0
 80115a4:	f100 0114 	add.w	r1, r0, #20
 80115a8:	f100 0210 	add.w	r2, r0, #16
 80115ac:	4618      	mov	r0, r3
 80115ae:	4553      	cmp	r3, sl
 80115b0:	db37      	blt.n	8011622 <__lshift+0xbe>
 80115b2:	6920      	ldr	r0, [r4, #16]
 80115b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115b8:	f104 0314 	add.w	r3, r4, #20
 80115bc:	f019 091f 	ands.w	r9, r9, #31
 80115c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80115c8:	d02f      	beq.n	801162a <__lshift+0xc6>
 80115ca:	468a      	mov	sl, r1
 80115cc:	f04f 0c00 	mov.w	ip, #0
 80115d0:	f1c9 0e20 	rsb	lr, r9, #32
 80115d4:	681a      	ldr	r2, [r3, #0]
 80115d6:	fa02 f209 	lsl.w	r2, r2, r9
 80115da:	ea42 020c 	orr.w	r2, r2, ip
 80115de:	f84a 2b04 	str.w	r2, [sl], #4
 80115e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80115e6:	4298      	cmp	r0, r3
 80115e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80115ec:	d8f2      	bhi.n	80115d4 <__lshift+0x70>
 80115ee:	1b03      	subs	r3, r0, r4
 80115f0:	3b15      	subs	r3, #21
 80115f2:	f023 0303 	bic.w	r3, r3, #3
 80115f6:	3304      	adds	r3, #4
 80115f8:	f104 0215 	add.w	r2, r4, #21
 80115fc:	4290      	cmp	r0, r2
 80115fe:	bf38      	it	cc
 8011600:	2304      	movcc	r3, #4
 8011602:	f841 c003 	str.w	ip, [r1, r3]
 8011606:	f1bc 0f00 	cmp.w	ip, #0
 801160a:	d001      	beq.n	8011610 <__lshift+0xac>
 801160c:	f108 0602 	add.w	r6, r8, #2
 8011610:	3e01      	subs	r6, #1
 8011612:	4638      	mov	r0, r7
 8011614:	4621      	mov	r1, r4
 8011616:	612e      	str	r6, [r5, #16]
 8011618:	f7ff fd8c 	bl	8011134 <_Bfree>
 801161c:	4628      	mov	r0, r5
 801161e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011622:	f842 0f04 	str.w	r0, [r2, #4]!
 8011626:	3301      	adds	r3, #1
 8011628:	e7c1      	b.n	80115ae <__lshift+0x4a>
 801162a:	3904      	subs	r1, #4
 801162c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011630:	4298      	cmp	r0, r3
 8011632:	f841 2f04 	str.w	r2, [r1, #4]!
 8011636:	d8f9      	bhi.n	801162c <__lshift+0xc8>
 8011638:	e7ea      	b.n	8011610 <__lshift+0xac>
 801163a:	bf00      	nop
 801163c:	08012de0 	.word	0x08012de0
 8011640:	08012e6c 	.word	0x08012e6c

08011644 <__mcmp>:
 8011644:	4603      	mov	r3, r0
 8011646:	690a      	ldr	r2, [r1, #16]
 8011648:	6900      	ldr	r0, [r0, #16]
 801164a:	b530      	push	{r4, r5, lr}
 801164c:	1a80      	subs	r0, r0, r2
 801164e:	d10d      	bne.n	801166c <__mcmp+0x28>
 8011650:	3314      	adds	r3, #20
 8011652:	3114      	adds	r1, #20
 8011654:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011658:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801165c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011664:	4295      	cmp	r5, r2
 8011666:	d002      	beq.n	801166e <__mcmp+0x2a>
 8011668:	d304      	bcc.n	8011674 <__mcmp+0x30>
 801166a:	2001      	movs	r0, #1
 801166c:	bd30      	pop	{r4, r5, pc}
 801166e:	42a3      	cmp	r3, r4
 8011670:	d3f4      	bcc.n	801165c <__mcmp+0x18>
 8011672:	e7fb      	b.n	801166c <__mcmp+0x28>
 8011674:	f04f 30ff 	mov.w	r0, #4294967295
 8011678:	e7f8      	b.n	801166c <__mcmp+0x28>
	...

0801167c <__mdiff>:
 801167c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011680:	460d      	mov	r5, r1
 8011682:	4607      	mov	r7, r0
 8011684:	4611      	mov	r1, r2
 8011686:	4628      	mov	r0, r5
 8011688:	4614      	mov	r4, r2
 801168a:	f7ff ffdb 	bl	8011644 <__mcmp>
 801168e:	1e06      	subs	r6, r0, #0
 8011690:	d111      	bne.n	80116b6 <__mdiff+0x3a>
 8011692:	4631      	mov	r1, r6
 8011694:	4638      	mov	r0, r7
 8011696:	f7ff fd0d 	bl	80110b4 <_Balloc>
 801169a:	4602      	mov	r2, r0
 801169c:	b928      	cbnz	r0, 80116aa <__mdiff+0x2e>
 801169e:	f240 2132 	movw	r1, #562	; 0x232
 80116a2:	4b3a      	ldr	r3, [pc, #232]	; (801178c <__mdiff+0x110>)
 80116a4:	483a      	ldr	r0, [pc, #232]	; (8011790 <__mdiff+0x114>)
 80116a6:	f7fe fac7 	bl	800fc38 <__assert_func>
 80116aa:	2301      	movs	r3, #1
 80116ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80116b0:	4610      	mov	r0, r2
 80116b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b6:	bfa4      	itt	ge
 80116b8:	4623      	movge	r3, r4
 80116ba:	462c      	movge	r4, r5
 80116bc:	4638      	mov	r0, r7
 80116be:	6861      	ldr	r1, [r4, #4]
 80116c0:	bfa6      	itte	ge
 80116c2:	461d      	movge	r5, r3
 80116c4:	2600      	movge	r6, #0
 80116c6:	2601      	movlt	r6, #1
 80116c8:	f7ff fcf4 	bl	80110b4 <_Balloc>
 80116cc:	4602      	mov	r2, r0
 80116ce:	b918      	cbnz	r0, 80116d8 <__mdiff+0x5c>
 80116d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80116d4:	4b2d      	ldr	r3, [pc, #180]	; (801178c <__mdiff+0x110>)
 80116d6:	e7e5      	b.n	80116a4 <__mdiff+0x28>
 80116d8:	f102 0814 	add.w	r8, r2, #20
 80116dc:	46c2      	mov	sl, r8
 80116de:	f04f 0c00 	mov.w	ip, #0
 80116e2:	6927      	ldr	r7, [r4, #16]
 80116e4:	60c6      	str	r6, [r0, #12]
 80116e6:	692e      	ldr	r6, [r5, #16]
 80116e8:	f104 0014 	add.w	r0, r4, #20
 80116ec:	f105 0914 	add.w	r9, r5, #20
 80116f0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80116f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80116f8:	3410      	adds	r4, #16
 80116fa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80116fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8011702:	fa1f f18b 	uxth.w	r1, fp
 8011706:	448c      	add	ip, r1
 8011708:	b299      	uxth	r1, r3
 801170a:	0c1b      	lsrs	r3, r3, #16
 801170c:	ebac 0101 	sub.w	r1, ip, r1
 8011710:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011714:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011718:	b289      	uxth	r1, r1
 801171a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801171e:	454e      	cmp	r6, r9
 8011720:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011724:	f84a 3b04 	str.w	r3, [sl], #4
 8011728:	d8e7      	bhi.n	80116fa <__mdiff+0x7e>
 801172a:	1b73      	subs	r3, r6, r5
 801172c:	3b15      	subs	r3, #21
 801172e:	f023 0303 	bic.w	r3, r3, #3
 8011732:	3515      	adds	r5, #21
 8011734:	3304      	adds	r3, #4
 8011736:	42ae      	cmp	r6, r5
 8011738:	bf38      	it	cc
 801173a:	2304      	movcc	r3, #4
 801173c:	4418      	add	r0, r3
 801173e:	4443      	add	r3, r8
 8011740:	461e      	mov	r6, r3
 8011742:	4605      	mov	r5, r0
 8011744:	4575      	cmp	r5, lr
 8011746:	d30e      	bcc.n	8011766 <__mdiff+0xea>
 8011748:	f10e 0103 	add.w	r1, lr, #3
 801174c:	1a09      	subs	r1, r1, r0
 801174e:	f021 0103 	bic.w	r1, r1, #3
 8011752:	3803      	subs	r0, #3
 8011754:	4586      	cmp	lr, r0
 8011756:	bf38      	it	cc
 8011758:	2100      	movcc	r1, #0
 801175a:	4419      	add	r1, r3
 801175c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8011760:	b18b      	cbz	r3, 8011786 <__mdiff+0x10a>
 8011762:	6117      	str	r7, [r2, #16]
 8011764:	e7a4      	b.n	80116b0 <__mdiff+0x34>
 8011766:	f855 8b04 	ldr.w	r8, [r5], #4
 801176a:	fa1f f188 	uxth.w	r1, r8
 801176e:	4461      	add	r1, ip
 8011770:	140c      	asrs	r4, r1, #16
 8011772:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011776:	b289      	uxth	r1, r1
 8011778:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801177c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8011780:	f846 1b04 	str.w	r1, [r6], #4
 8011784:	e7de      	b.n	8011744 <__mdiff+0xc8>
 8011786:	3f01      	subs	r7, #1
 8011788:	e7e8      	b.n	801175c <__mdiff+0xe0>
 801178a:	bf00      	nop
 801178c:	08012de0 	.word	0x08012de0
 8011790:	08012e6c 	.word	0x08012e6c

08011794 <__ulp>:
 8011794:	4b11      	ldr	r3, [pc, #68]	; (80117dc <__ulp+0x48>)
 8011796:	400b      	ands	r3, r1
 8011798:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801179c:	2b00      	cmp	r3, #0
 801179e:	dd02      	ble.n	80117a6 <__ulp+0x12>
 80117a0:	2000      	movs	r0, #0
 80117a2:	4619      	mov	r1, r3
 80117a4:	4770      	bx	lr
 80117a6:	425b      	negs	r3, r3
 80117a8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80117ac:	f04f 0000 	mov.w	r0, #0
 80117b0:	f04f 0100 	mov.w	r1, #0
 80117b4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80117b8:	da04      	bge.n	80117c4 <__ulp+0x30>
 80117ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80117be:	fa43 f102 	asr.w	r1, r3, r2
 80117c2:	4770      	bx	lr
 80117c4:	f1a2 0314 	sub.w	r3, r2, #20
 80117c8:	2b1e      	cmp	r3, #30
 80117ca:	bfd6      	itet	le
 80117cc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80117d0:	2301      	movgt	r3, #1
 80117d2:	fa22 f303 	lsrle.w	r3, r2, r3
 80117d6:	4618      	mov	r0, r3
 80117d8:	4770      	bx	lr
 80117da:	bf00      	nop
 80117dc:	7ff00000 	.word	0x7ff00000

080117e0 <__b2d>:
 80117e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117e4:	6907      	ldr	r7, [r0, #16]
 80117e6:	f100 0914 	add.w	r9, r0, #20
 80117ea:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80117ee:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80117f2:	f1a7 0804 	sub.w	r8, r7, #4
 80117f6:	4630      	mov	r0, r6
 80117f8:	f7ff fd4e 	bl	8011298 <__hi0bits>
 80117fc:	f1c0 0320 	rsb	r3, r0, #32
 8011800:	280a      	cmp	r0, #10
 8011802:	600b      	str	r3, [r1, #0]
 8011804:	491f      	ldr	r1, [pc, #124]	; (8011884 <__b2d+0xa4>)
 8011806:	dc17      	bgt.n	8011838 <__b2d+0x58>
 8011808:	45c1      	cmp	r9, r8
 801180a:	bf28      	it	cs
 801180c:	2200      	movcs	r2, #0
 801180e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011812:	fa26 f30c 	lsr.w	r3, r6, ip
 8011816:	bf38      	it	cc
 8011818:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801181c:	ea43 0501 	orr.w	r5, r3, r1
 8011820:	f100 0315 	add.w	r3, r0, #21
 8011824:	fa06 f303 	lsl.w	r3, r6, r3
 8011828:	fa22 f20c 	lsr.w	r2, r2, ip
 801182c:	ea43 0402 	orr.w	r4, r3, r2
 8011830:	4620      	mov	r0, r4
 8011832:	4629      	mov	r1, r5
 8011834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011838:	45c1      	cmp	r9, r8
 801183a:	bf2e      	itee	cs
 801183c:	2200      	movcs	r2, #0
 801183e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011842:	f1a7 0808 	subcc.w	r8, r7, #8
 8011846:	f1b0 030b 	subs.w	r3, r0, #11
 801184a:	d016      	beq.n	801187a <__b2d+0x9a>
 801184c:	f1c3 0720 	rsb	r7, r3, #32
 8011850:	fa22 f107 	lsr.w	r1, r2, r7
 8011854:	45c8      	cmp	r8, r9
 8011856:	fa06 f603 	lsl.w	r6, r6, r3
 801185a:	ea46 0601 	orr.w	r6, r6, r1
 801185e:	bf94      	ite	ls
 8011860:	2100      	movls	r1, #0
 8011862:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8011866:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801186a:	fa02 f003 	lsl.w	r0, r2, r3
 801186e:	40f9      	lsrs	r1, r7
 8011870:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011874:	ea40 0401 	orr.w	r4, r0, r1
 8011878:	e7da      	b.n	8011830 <__b2d+0x50>
 801187a:	4614      	mov	r4, r2
 801187c:	ea46 0501 	orr.w	r5, r6, r1
 8011880:	e7d6      	b.n	8011830 <__b2d+0x50>
 8011882:	bf00      	nop
 8011884:	3ff00000 	.word	0x3ff00000

08011888 <__d2b>:
 8011888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801188c:	2101      	movs	r1, #1
 801188e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8011892:	4690      	mov	r8, r2
 8011894:	461d      	mov	r5, r3
 8011896:	f7ff fc0d 	bl	80110b4 <_Balloc>
 801189a:	4604      	mov	r4, r0
 801189c:	b930      	cbnz	r0, 80118ac <__d2b+0x24>
 801189e:	4602      	mov	r2, r0
 80118a0:	f240 310a 	movw	r1, #778	; 0x30a
 80118a4:	4b24      	ldr	r3, [pc, #144]	; (8011938 <__d2b+0xb0>)
 80118a6:	4825      	ldr	r0, [pc, #148]	; (801193c <__d2b+0xb4>)
 80118a8:	f7fe f9c6 	bl	800fc38 <__assert_func>
 80118ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80118b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80118b4:	bb2d      	cbnz	r5, 8011902 <__d2b+0x7a>
 80118b6:	9301      	str	r3, [sp, #4]
 80118b8:	f1b8 0300 	subs.w	r3, r8, #0
 80118bc:	d026      	beq.n	801190c <__d2b+0x84>
 80118be:	4668      	mov	r0, sp
 80118c0:	9300      	str	r3, [sp, #0]
 80118c2:	f7ff fd09 	bl	80112d8 <__lo0bits>
 80118c6:	9900      	ldr	r1, [sp, #0]
 80118c8:	b1f0      	cbz	r0, 8011908 <__d2b+0x80>
 80118ca:	9a01      	ldr	r2, [sp, #4]
 80118cc:	f1c0 0320 	rsb	r3, r0, #32
 80118d0:	fa02 f303 	lsl.w	r3, r2, r3
 80118d4:	430b      	orrs	r3, r1
 80118d6:	40c2      	lsrs	r2, r0
 80118d8:	6163      	str	r3, [r4, #20]
 80118da:	9201      	str	r2, [sp, #4]
 80118dc:	9b01      	ldr	r3, [sp, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	bf14      	ite	ne
 80118e2:	2102      	movne	r1, #2
 80118e4:	2101      	moveq	r1, #1
 80118e6:	61a3      	str	r3, [r4, #24]
 80118e8:	6121      	str	r1, [r4, #16]
 80118ea:	b1c5      	cbz	r5, 801191e <__d2b+0x96>
 80118ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80118f0:	4405      	add	r5, r0
 80118f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80118f6:	603d      	str	r5, [r7, #0]
 80118f8:	6030      	str	r0, [r6, #0]
 80118fa:	4620      	mov	r0, r4
 80118fc:	b002      	add	sp, #8
 80118fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011906:	e7d6      	b.n	80118b6 <__d2b+0x2e>
 8011908:	6161      	str	r1, [r4, #20]
 801190a:	e7e7      	b.n	80118dc <__d2b+0x54>
 801190c:	a801      	add	r0, sp, #4
 801190e:	f7ff fce3 	bl	80112d8 <__lo0bits>
 8011912:	2101      	movs	r1, #1
 8011914:	9b01      	ldr	r3, [sp, #4]
 8011916:	6121      	str	r1, [r4, #16]
 8011918:	6163      	str	r3, [r4, #20]
 801191a:	3020      	adds	r0, #32
 801191c:	e7e5      	b.n	80118ea <__d2b+0x62>
 801191e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8011922:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011926:	6038      	str	r0, [r7, #0]
 8011928:	6918      	ldr	r0, [r3, #16]
 801192a:	f7ff fcb5 	bl	8011298 <__hi0bits>
 801192e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8011932:	6031      	str	r1, [r6, #0]
 8011934:	e7e1      	b.n	80118fa <__d2b+0x72>
 8011936:	bf00      	nop
 8011938:	08012de0 	.word	0x08012de0
 801193c:	08012e6c 	.word	0x08012e6c

08011940 <__ratio>:
 8011940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011944:	4688      	mov	r8, r1
 8011946:	4669      	mov	r1, sp
 8011948:	4681      	mov	r9, r0
 801194a:	f7ff ff49 	bl	80117e0 <__b2d>
 801194e:	460f      	mov	r7, r1
 8011950:	4604      	mov	r4, r0
 8011952:	460d      	mov	r5, r1
 8011954:	4640      	mov	r0, r8
 8011956:	a901      	add	r1, sp, #4
 8011958:	f7ff ff42 	bl	80117e0 <__b2d>
 801195c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011960:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011964:	468b      	mov	fp, r1
 8011966:	eba3 0c02 	sub.w	ip, r3, r2
 801196a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801196e:	1a9b      	subs	r3, r3, r2
 8011970:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011974:	2b00      	cmp	r3, #0
 8011976:	bfd5      	itete	le
 8011978:	460a      	movle	r2, r1
 801197a:	462a      	movgt	r2, r5
 801197c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011980:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011984:	bfd8      	it	le
 8011986:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801198a:	465b      	mov	r3, fp
 801198c:	4602      	mov	r2, r0
 801198e:	4639      	mov	r1, r7
 8011990:	4620      	mov	r0, r4
 8011992:	f7ee feed 	bl	8000770 <__aeabi_ddiv>
 8011996:	b003      	add	sp, #12
 8011998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801199c <__copybits>:
 801199c:	3901      	subs	r1, #1
 801199e:	b570      	push	{r4, r5, r6, lr}
 80119a0:	1149      	asrs	r1, r1, #5
 80119a2:	6914      	ldr	r4, [r2, #16]
 80119a4:	3101      	adds	r1, #1
 80119a6:	f102 0314 	add.w	r3, r2, #20
 80119aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80119ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80119b2:	1f05      	subs	r5, r0, #4
 80119b4:	42a3      	cmp	r3, r4
 80119b6:	d30c      	bcc.n	80119d2 <__copybits+0x36>
 80119b8:	1aa3      	subs	r3, r4, r2
 80119ba:	3b11      	subs	r3, #17
 80119bc:	f023 0303 	bic.w	r3, r3, #3
 80119c0:	3211      	adds	r2, #17
 80119c2:	42a2      	cmp	r2, r4
 80119c4:	bf88      	it	hi
 80119c6:	2300      	movhi	r3, #0
 80119c8:	4418      	add	r0, r3
 80119ca:	2300      	movs	r3, #0
 80119cc:	4288      	cmp	r0, r1
 80119ce:	d305      	bcc.n	80119dc <__copybits+0x40>
 80119d0:	bd70      	pop	{r4, r5, r6, pc}
 80119d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80119d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80119da:	e7eb      	b.n	80119b4 <__copybits+0x18>
 80119dc:	f840 3b04 	str.w	r3, [r0], #4
 80119e0:	e7f4      	b.n	80119cc <__copybits+0x30>

080119e2 <__any_on>:
 80119e2:	f100 0214 	add.w	r2, r0, #20
 80119e6:	6900      	ldr	r0, [r0, #16]
 80119e8:	114b      	asrs	r3, r1, #5
 80119ea:	4298      	cmp	r0, r3
 80119ec:	b510      	push	{r4, lr}
 80119ee:	db11      	blt.n	8011a14 <__any_on+0x32>
 80119f0:	dd0a      	ble.n	8011a08 <__any_on+0x26>
 80119f2:	f011 011f 	ands.w	r1, r1, #31
 80119f6:	d007      	beq.n	8011a08 <__any_on+0x26>
 80119f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80119fc:	fa24 f001 	lsr.w	r0, r4, r1
 8011a00:	fa00 f101 	lsl.w	r1, r0, r1
 8011a04:	428c      	cmp	r4, r1
 8011a06:	d10b      	bne.n	8011a20 <__any_on+0x3e>
 8011a08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	d803      	bhi.n	8011a18 <__any_on+0x36>
 8011a10:	2000      	movs	r0, #0
 8011a12:	bd10      	pop	{r4, pc}
 8011a14:	4603      	mov	r3, r0
 8011a16:	e7f7      	b.n	8011a08 <__any_on+0x26>
 8011a18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a1c:	2900      	cmp	r1, #0
 8011a1e:	d0f5      	beq.n	8011a0c <__any_on+0x2a>
 8011a20:	2001      	movs	r0, #1
 8011a22:	e7f6      	b.n	8011a12 <__any_on+0x30>

08011a24 <_calloc_r>:
 8011a24:	b570      	push	{r4, r5, r6, lr}
 8011a26:	fba1 5402 	umull	r5, r4, r1, r2
 8011a2a:	b934      	cbnz	r4, 8011a3a <_calloc_r+0x16>
 8011a2c:	4629      	mov	r1, r5
 8011a2e:	f000 f875 	bl	8011b1c <_malloc_r>
 8011a32:	4606      	mov	r6, r0
 8011a34:	b928      	cbnz	r0, 8011a42 <_calloc_r+0x1e>
 8011a36:	4630      	mov	r0, r6
 8011a38:	bd70      	pop	{r4, r5, r6, pc}
 8011a3a:	220c      	movs	r2, #12
 8011a3c:	2600      	movs	r6, #0
 8011a3e:	6002      	str	r2, [r0, #0]
 8011a40:	e7f9      	b.n	8011a36 <_calloc_r+0x12>
 8011a42:	462a      	mov	r2, r5
 8011a44:	4621      	mov	r1, r4
 8011a46:	f7fc fdf3 	bl	800e630 <memset>
 8011a4a:	e7f4      	b.n	8011a36 <_calloc_r+0x12>

08011a4c <_free_r>:
 8011a4c:	b538      	push	{r3, r4, r5, lr}
 8011a4e:	4605      	mov	r5, r0
 8011a50:	2900      	cmp	r1, #0
 8011a52:	d040      	beq.n	8011ad6 <_free_r+0x8a>
 8011a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a58:	1f0c      	subs	r4, r1, #4
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	bfb8      	it	lt
 8011a5e:	18e4      	addlt	r4, r4, r3
 8011a60:	f000 feba 	bl	80127d8 <__malloc_lock>
 8011a64:	4a1c      	ldr	r2, [pc, #112]	; (8011ad8 <_free_r+0x8c>)
 8011a66:	6813      	ldr	r3, [r2, #0]
 8011a68:	b933      	cbnz	r3, 8011a78 <_free_r+0x2c>
 8011a6a:	6063      	str	r3, [r4, #4]
 8011a6c:	6014      	str	r4, [r2, #0]
 8011a6e:	4628      	mov	r0, r5
 8011a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a74:	f000 beb6 	b.w	80127e4 <__malloc_unlock>
 8011a78:	42a3      	cmp	r3, r4
 8011a7a:	d908      	bls.n	8011a8e <_free_r+0x42>
 8011a7c:	6820      	ldr	r0, [r4, #0]
 8011a7e:	1821      	adds	r1, r4, r0
 8011a80:	428b      	cmp	r3, r1
 8011a82:	bf01      	itttt	eq
 8011a84:	6819      	ldreq	r1, [r3, #0]
 8011a86:	685b      	ldreq	r3, [r3, #4]
 8011a88:	1809      	addeq	r1, r1, r0
 8011a8a:	6021      	streq	r1, [r4, #0]
 8011a8c:	e7ed      	b.n	8011a6a <_free_r+0x1e>
 8011a8e:	461a      	mov	r2, r3
 8011a90:	685b      	ldr	r3, [r3, #4]
 8011a92:	b10b      	cbz	r3, 8011a98 <_free_r+0x4c>
 8011a94:	42a3      	cmp	r3, r4
 8011a96:	d9fa      	bls.n	8011a8e <_free_r+0x42>
 8011a98:	6811      	ldr	r1, [r2, #0]
 8011a9a:	1850      	adds	r0, r2, r1
 8011a9c:	42a0      	cmp	r0, r4
 8011a9e:	d10b      	bne.n	8011ab8 <_free_r+0x6c>
 8011aa0:	6820      	ldr	r0, [r4, #0]
 8011aa2:	4401      	add	r1, r0
 8011aa4:	1850      	adds	r0, r2, r1
 8011aa6:	4283      	cmp	r3, r0
 8011aa8:	6011      	str	r1, [r2, #0]
 8011aaa:	d1e0      	bne.n	8011a6e <_free_r+0x22>
 8011aac:	6818      	ldr	r0, [r3, #0]
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	4401      	add	r1, r0
 8011ab2:	6011      	str	r1, [r2, #0]
 8011ab4:	6053      	str	r3, [r2, #4]
 8011ab6:	e7da      	b.n	8011a6e <_free_r+0x22>
 8011ab8:	d902      	bls.n	8011ac0 <_free_r+0x74>
 8011aba:	230c      	movs	r3, #12
 8011abc:	602b      	str	r3, [r5, #0]
 8011abe:	e7d6      	b.n	8011a6e <_free_r+0x22>
 8011ac0:	6820      	ldr	r0, [r4, #0]
 8011ac2:	1821      	adds	r1, r4, r0
 8011ac4:	428b      	cmp	r3, r1
 8011ac6:	bf01      	itttt	eq
 8011ac8:	6819      	ldreq	r1, [r3, #0]
 8011aca:	685b      	ldreq	r3, [r3, #4]
 8011acc:	1809      	addeq	r1, r1, r0
 8011ace:	6021      	streq	r1, [r4, #0]
 8011ad0:	6063      	str	r3, [r4, #4]
 8011ad2:	6054      	str	r4, [r2, #4]
 8011ad4:	e7cb      	b.n	8011a6e <_free_r+0x22>
 8011ad6:	bd38      	pop	{r3, r4, r5, pc}
 8011ad8:	20001934 	.word	0x20001934

08011adc <sbrk_aligned>:
 8011adc:	b570      	push	{r4, r5, r6, lr}
 8011ade:	4e0e      	ldr	r6, [pc, #56]	; (8011b18 <sbrk_aligned+0x3c>)
 8011ae0:	460c      	mov	r4, r1
 8011ae2:	6831      	ldr	r1, [r6, #0]
 8011ae4:	4605      	mov	r5, r0
 8011ae6:	b911      	cbnz	r1, 8011aee <sbrk_aligned+0x12>
 8011ae8:	f000 fb46 	bl	8012178 <_sbrk_r>
 8011aec:	6030      	str	r0, [r6, #0]
 8011aee:	4621      	mov	r1, r4
 8011af0:	4628      	mov	r0, r5
 8011af2:	f000 fb41 	bl	8012178 <_sbrk_r>
 8011af6:	1c43      	adds	r3, r0, #1
 8011af8:	d00a      	beq.n	8011b10 <sbrk_aligned+0x34>
 8011afa:	1cc4      	adds	r4, r0, #3
 8011afc:	f024 0403 	bic.w	r4, r4, #3
 8011b00:	42a0      	cmp	r0, r4
 8011b02:	d007      	beq.n	8011b14 <sbrk_aligned+0x38>
 8011b04:	1a21      	subs	r1, r4, r0
 8011b06:	4628      	mov	r0, r5
 8011b08:	f000 fb36 	bl	8012178 <_sbrk_r>
 8011b0c:	3001      	adds	r0, #1
 8011b0e:	d101      	bne.n	8011b14 <sbrk_aligned+0x38>
 8011b10:	f04f 34ff 	mov.w	r4, #4294967295
 8011b14:	4620      	mov	r0, r4
 8011b16:	bd70      	pop	{r4, r5, r6, pc}
 8011b18:	20001938 	.word	0x20001938

08011b1c <_malloc_r>:
 8011b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b20:	1ccd      	adds	r5, r1, #3
 8011b22:	f025 0503 	bic.w	r5, r5, #3
 8011b26:	3508      	adds	r5, #8
 8011b28:	2d0c      	cmp	r5, #12
 8011b2a:	bf38      	it	cc
 8011b2c:	250c      	movcc	r5, #12
 8011b2e:	2d00      	cmp	r5, #0
 8011b30:	4607      	mov	r7, r0
 8011b32:	db01      	blt.n	8011b38 <_malloc_r+0x1c>
 8011b34:	42a9      	cmp	r1, r5
 8011b36:	d905      	bls.n	8011b44 <_malloc_r+0x28>
 8011b38:	230c      	movs	r3, #12
 8011b3a:	2600      	movs	r6, #0
 8011b3c:	603b      	str	r3, [r7, #0]
 8011b3e:	4630      	mov	r0, r6
 8011b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b44:	4e2e      	ldr	r6, [pc, #184]	; (8011c00 <_malloc_r+0xe4>)
 8011b46:	f000 fe47 	bl	80127d8 <__malloc_lock>
 8011b4a:	6833      	ldr	r3, [r6, #0]
 8011b4c:	461c      	mov	r4, r3
 8011b4e:	bb34      	cbnz	r4, 8011b9e <_malloc_r+0x82>
 8011b50:	4629      	mov	r1, r5
 8011b52:	4638      	mov	r0, r7
 8011b54:	f7ff ffc2 	bl	8011adc <sbrk_aligned>
 8011b58:	1c43      	adds	r3, r0, #1
 8011b5a:	4604      	mov	r4, r0
 8011b5c:	d14d      	bne.n	8011bfa <_malloc_r+0xde>
 8011b5e:	6834      	ldr	r4, [r6, #0]
 8011b60:	4626      	mov	r6, r4
 8011b62:	2e00      	cmp	r6, #0
 8011b64:	d140      	bne.n	8011be8 <_malloc_r+0xcc>
 8011b66:	6823      	ldr	r3, [r4, #0]
 8011b68:	4631      	mov	r1, r6
 8011b6a:	4638      	mov	r0, r7
 8011b6c:	eb04 0803 	add.w	r8, r4, r3
 8011b70:	f000 fb02 	bl	8012178 <_sbrk_r>
 8011b74:	4580      	cmp	r8, r0
 8011b76:	d13a      	bne.n	8011bee <_malloc_r+0xd2>
 8011b78:	6821      	ldr	r1, [r4, #0]
 8011b7a:	3503      	adds	r5, #3
 8011b7c:	1a6d      	subs	r5, r5, r1
 8011b7e:	f025 0503 	bic.w	r5, r5, #3
 8011b82:	3508      	adds	r5, #8
 8011b84:	2d0c      	cmp	r5, #12
 8011b86:	bf38      	it	cc
 8011b88:	250c      	movcc	r5, #12
 8011b8a:	4638      	mov	r0, r7
 8011b8c:	4629      	mov	r1, r5
 8011b8e:	f7ff ffa5 	bl	8011adc <sbrk_aligned>
 8011b92:	3001      	adds	r0, #1
 8011b94:	d02b      	beq.n	8011bee <_malloc_r+0xd2>
 8011b96:	6823      	ldr	r3, [r4, #0]
 8011b98:	442b      	add	r3, r5
 8011b9a:	6023      	str	r3, [r4, #0]
 8011b9c:	e00e      	b.n	8011bbc <_malloc_r+0xa0>
 8011b9e:	6822      	ldr	r2, [r4, #0]
 8011ba0:	1b52      	subs	r2, r2, r5
 8011ba2:	d41e      	bmi.n	8011be2 <_malloc_r+0xc6>
 8011ba4:	2a0b      	cmp	r2, #11
 8011ba6:	d916      	bls.n	8011bd6 <_malloc_r+0xba>
 8011ba8:	1961      	adds	r1, r4, r5
 8011baa:	42a3      	cmp	r3, r4
 8011bac:	6025      	str	r5, [r4, #0]
 8011bae:	bf18      	it	ne
 8011bb0:	6059      	strne	r1, [r3, #4]
 8011bb2:	6863      	ldr	r3, [r4, #4]
 8011bb4:	bf08      	it	eq
 8011bb6:	6031      	streq	r1, [r6, #0]
 8011bb8:	5162      	str	r2, [r4, r5]
 8011bba:	604b      	str	r3, [r1, #4]
 8011bbc:	4638      	mov	r0, r7
 8011bbe:	f104 060b 	add.w	r6, r4, #11
 8011bc2:	f000 fe0f 	bl	80127e4 <__malloc_unlock>
 8011bc6:	f026 0607 	bic.w	r6, r6, #7
 8011bca:	1d23      	adds	r3, r4, #4
 8011bcc:	1af2      	subs	r2, r6, r3
 8011bce:	d0b6      	beq.n	8011b3e <_malloc_r+0x22>
 8011bd0:	1b9b      	subs	r3, r3, r6
 8011bd2:	50a3      	str	r3, [r4, r2]
 8011bd4:	e7b3      	b.n	8011b3e <_malloc_r+0x22>
 8011bd6:	6862      	ldr	r2, [r4, #4]
 8011bd8:	42a3      	cmp	r3, r4
 8011bda:	bf0c      	ite	eq
 8011bdc:	6032      	streq	r2, [r6, #0]
 8011bde:	605a      	strne	r2, [r3, #4]
 8011be0:	e7ec      	b.n	8011bbc <_malloc_r+0xa0>
 8011be2:	4623      	mov	r3, r4
 8011be4:	6864      	ldr	r4, [r4, #4]
 8011be6:	e7b2      	b.n	8011b4e <_malloc_r+0x32>
 8011be8:	4634      	mov	r4, r6
 8011bea:	6876      	ldr	r6, [r6, #4]
 8011bec:	e7b9      	b.n	8011b62 <_malloc_r+0x46>
 8011bee:	230c      	movs	r3, #12
 8011bf0:	4638      	mov	r0, r7
 8011bf2:	603b      	str	r3, [r7, #0]
 8011bf4:	f000 fdf6 	bl	80127e4 <__malloc_unlock>
 8011bf8:	e7a1      	b.n	8011b3e <_malloc_r+0x22>
 8011bfa:	6025      	str	r5, [r4, #0]
 8011bfc:	e7de      	b.n	8011bbc <_malloc_r+0xa0>
 8011bfe:	bf00      	nop
 8011c00:	20001934 	.word	0x20001934

08011c04 <__ssputs_r>:
 8011c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c08:	688e      	ldr	r6, [r1, #8]
 8011c0a:	4682      	mov	sl, r0
 8011c0c:	429e      	cmp	r6, r3
 8011c0e:	460c      	mov	r4, r1
 8011c10:	4690      	mov	r8, r2
 8011c12:	461f      	mov	r7, r3
 8011c14:	d838      	bhi.n	8011c88 <__ssputs_r+0x84>
 8011c16:	898a      	ldrh	r2, [r1, #12]
 8011c18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011c1c:	d032      	beq.n	8011c84 <__ssputs_r+0x80>
 8011c1e:	6825      	ldr	r5, [r4, #0]
 8011c20:	6909      	ldr	r1, [r1, #16]
 8011c22:	3301      	adds	r3, #1
 8011c24:	eba5 0901 	sub.w	r9, r5, r1
 8011c28:	6965      	ldr	r5, [r4, #20]
 8011c2a:	444b      	add	r3, r9
 8011c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c34:	106d      	asrs	r5, r5, #1
 8011c36:	429d      	cmp	r5, r3
 8011c38:	bf38      	it	cc
 8011c3a:	461d      	movcc	r5, r3
 8011c3c:	0553      	lsls	r3, r2, #21
 8011c3e:	d531      	bpl.n	8011ca4 <__ssputs_r+0xa0>
 8011c40:	4629      	mov	r1, r5
 8011c42:	f7ff ff6b 	bl	8011b1c <_malloc_r>
 8011c46:	4606      	mov	r6, r0
 8011c48:	b950      	cbnz	r0, 8011c60 <__ssputs_r+0x5c>
 8011c4a:	230c      	movs	r3, #12
 8011c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c50:	f8ca 3000 	str.w	r3, [sl]
 8011c54:	89a3      	ldrh	r3, [r4, #12]
 8011c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c5a:	81a3      	strh	r3, [r4, #12]
 8011c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c60:	464a      	mov	r2, r9
 8011c62:	6921      	ldr	r1, [r4, #16]
 8011c64:	f7fc fcd6 	bl	800e614 <memcpy>
 8011c68:	89a3      	ldrh	r3, [r4, #12]
 8011c6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c72:	81a3      	strh	r3, [r4, #12]
 8011c74:	6126      	str	r6, [r4, #16]
 8011c76:	444e      	add	r6, r9
 8011c78:	6026      	str	r6, [r4, #0]
 8011c7a:	463e      	mov	r6, r7
 8011c7c:	6165      	str	r5, [r4, #20]
 8011c7e:	eba5 0509 	sub.w	r5, r5, r9
 8011c82:	60a5      	str	r5, [r4, #8]
 8011c84:	42be      	cmp	r6, r7
 8011c86:	d900      	bls.n	8011c8a <__ssputs_r+0x86>
 8011c88:	463e      	mov	r6, r7
 8011c8a:	4632      	mov	r2, r6
 8011c8c:	4641      	mov	r1, r8
 8011c8e:	6820      	ldr	r0, [r4, #0]
 8011c90:	f000 fd88 	bl	80127a4 <memmove>
 8011c94:	68a3      	ldr	r3, [r4, #8]
 8011c96:	2000      	movs	r0, #0
 8011c98:	1b9b      	subs	r3, r3, r6
 8011c9a:	60a3      	str	r3, [r4, #8]
 8011c9c:	6823      	ldr	r3, [r4, #0]
 8011c9e:	4433      	add	r3, r6
 8011ca0:	6023      	str	r3, [r4, #0]
 8011ca2:	e7db      	b.n	8011c5c <__ssputs_r+0x58>
 8011ca4:	462a      	mov	r2, r5
 8011ca6:	f000 fda3 	bl	80127f0 <_realloc_r>
 8011caa:	4606      	mov	r6, r0
 8011cac:	2800      	cmp	r0, #0
 8011cae:	d1e1      	bne.n	8011c74 <__ssputs_r+0x70>
 8011cb0:	4650      	mov	r0, sl
 8011cb2:	6921      	ldr	r1, [r4, #16]
 8011cb4:	f7ff feca 	bl	8011a4c <_free_r>
 8011cb8:	e7c7      	b.n	8011c4a <__ssputs_r+0x46>
	...

08011cbc <_svfiprintf_r>:
 8011cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cc0:	4698      	mov	r8, r3
 8011cc2:	898b      	ldrh	r3, [r1, #12]
 8011cc4:	4607      	mov	r7, r0
 8011cc6:	061b      	lsls	r3, r3, #24
 8011cc8:	460d      	mov	r5, r1
 8011cca:	4614      	mov	r4, r2
 8011ccc:	b09d      	sub	sp, #116	; 0x74
 8011cce:	d50e      	bpl.n	8011cee <_svfiprintf_r+0x32>
 8011cd0:	690b      	ldr	r3, [r1, #16]
 8011cd2:	b963      	cbnz	r3, 8011cee <_svfiprintf_r+0x32>
 8011cd4:	2140      	movs	r1, #64	; 0x40
 8011cd6:	f7ff ff21 	bl	8011b1c <_malloc_r>
 8011cda:	6028      	str	r0, [r5, #0]
 8011cdc:	6128      	str	r0, [r5, #16]
 8011cde:	b920      	cbnz	r0, 8011cea <_svfiprintf_r+0x2e>
 8011ce0:	230c      	movs	r3, #12
 8011ce2:	603b      	str	r3, [r7, #0]
 8011ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce8:	e0d1      	b.n	8011e8e <_svfiprintf_r+0x1d2>
 8011cea:	2340      	movs	r3, #64	; 0x40
 8011cec:	616b      	str	r3, [r5, #20]
 8011cee:	2300      	movs	r3, #0
 8011cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8011cf2:	2320      	movs	r3, #32
 8011cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011cf8:	2330      	movs	r3, #48	; 0x30
 8011cfa:	f04f 0901 	mov.w	r9, #1
 8011cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011ea8 <_svfiprintf_r+0x1ec>
 8011d06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d0a:	4623      	mov	r3, r4
 8011d0c:	469a      	mov	sl, r3
 8011d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d12:	b10a      	cbz	r2, 8011d18 <_svfiprintf_r+0x5c>
 8011d14:	2a25      	cmp	r2, #37	; 0x25
 8011d16:	d1f9      	bne.n	8011d0c <_svfiprintf_r+0x50>
 8011d18:	ebba 0b04 	subs.w	fp, sl, r4
 8011d1c:	d00b      	beq.n	8011d36 <_svfiprintf_r+0x7a>
 8011d1e:	465b      	mov	r3, fp
 8011d20:	4622      	mov	r2, r4
 8011d22:	4629      	mov	r1, r5
 8011d24:	4638      	mov	r0, r7
 8011d26:	f7ff ff6d 	bl	8011c04 <__ssputs_r>
 8011d2a:	3001      	adds	r0, #1
 8011d2c:	f000 80aa 	beq.w	8011e84 <_svfiprintf_r+0x1c8>
 8011d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d32:	445a      	add	r2, fp
 8011d34:	9209      	str	r2, [sp, #36]	; 0x24
 8011d36:	f89a 3000 	ldrb.w	r3, [sl]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	f000 80a2 	beq.w	8011e84 <_svfiprintf_r+0x1c8>
 8011d40:	2300      	movs	r3, #0
 8011d42:	f04f 32ff 	mov.w	r2, #4294967295
 8011d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d4a:	f10a 0a01 	add.w	sl, sl, #1
 8011d4e:	9304      	str	r3, [sp, #16]
 8011d50:	9307      	str	r3, [sp, #28]
 8011d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d56:	931a      	str	r3, [sp, #104]	; 0x68
 8011d58:	4654      	mov	r4, sl
 8011d5a:	2205      	movs	r2, #5
 8011d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d60:	4851      	ldr	r0, [pc, #324]	; (8011ea8 <_svfiprintf_r+0x1ec>)
 8011d62:	f7ff f999 	bl	8011098 <memchr>
 8011d66:	9a04      	ldr	r2, [sp, #16]
 8011d68:	b9d8      	cbnz	r0, 8011da2 <_svfiprintf_r+0xe6>
 8011d6a:	06d0      	lsls	r0, r2, #27
 8011d6c:	bf44      	itt	mi
 8011d6e:	2320      	movmi	r3, #32
 8011d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d74:	0711      	lsls	r1, r2, #28
 8011d76:	bf44      	itt	mi
 8011d78:	232b      	movmi	r3, #43	; 0x2b
 8011d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8011d82:	2b2a      	cmp	r3, #42	; 0x2a
 8011d84:	d015      	beq.n	8011db2 <_svfiprintf_r+0xf6>
 8011d86:	4654      	mov	r4, sl
 8011d88:	2000      	movs	r0, #0
 8011d8a:	f04f 0c0a 	mov.w	ip, #10
 8011d8e:	9a07      	ldr	r2, [sp, #28]
 8011d90:	4621      	mov	r1, r4
 8011d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d96:	3b30      	subs	r3, #48	; 0x30
 8011d98:	2b09      	cmp	r3, #9
 8011d9a:	d94e      	bls.n	8011e3a <_svfiprintf_r+0x17e>
 8011d9c:	b1b0      	cbz	r0, 8011dcc <_svfiprintf_r+0x110>
 8011d9e:	9207      	str	r2, [sp, #28]
 8011da0:	e014      	b.n	8011dcc <_svfiprintf_r+0x110>
 8011da2:	eba0 0308 	sub.w	r3, r0, r8
 8011da6:	fa09 f303 	lsl.w	r3, r9, r3
 8011daa:	4313      	orrs	r3, r2
 8011dac:	46a2      	mov	sl, r4
 8011dae:	9304      	str	r3, [sp, #16]
 8011db0:	e7d2      	b.n	8011d58 <_svfiprintf_r+0x9c>
 8011db2:	9b03      	ldr	r3, [sp, #12]
 8011db4:	1d19      	adds	r1, r3, #4
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	9103      	str	r1, [sp, #12]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	bfbb      	ittet	lt
 8011dbe:	425b      	neglt	r3, r3
 8011dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8011dc4:	9307      	strge	r3, [sp, #28]
 8011dc6:	9307      	strlt	r3, [sp, #28]
 8011dc8:	bfb8      	it	lt
 8011dca:	9204      	strlt	r2, [sp, #16]
 8011dcc:	7823      	ldrb	r3, [r4, #0]
 8011dce:	2b2e      	cmp	r3, #46	; 0x2e
 8011dd0:	d10c      	bne.n	8011dec <_svfiprintf_r+0x130>
 8011dd2:	7863      	ldrb	r3, [r4, #1]
 8011dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8011dd6:	d135      	bne.n	8011e44 <_svfiprintf_r+0x188>
 8011dd8:	9b03      	ldr	r3, [sp, #12]
 8011dda:	3402      	adds	r4, #2
 8011ddc:	1d1a      	adds	r2, r3, #4
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	9203      	str	r2, [sp, #12]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	bfb8      	it	lt
 8011de6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011dea:	9305      	str	r3, [sp, #20]
 8011dec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8011eac <_svfiprintf_r+0x1f0>
 8011df0:	2203      	movs	r2, #3
 8011df2:	4650      	mov	r0, sl
 8011df4:	7821      	ldrb	r1, [r4, #0]
 8011df6:	f7ff f94f 	bl	8011098 <memchr>
 8011dfa:	b140      	cbz	r0, 8011e0e <_svfiprintf_r+0x152>
 8011dfc:	2340      	movs	r3, #64	; 0x40
 8011dfe:	eba0 000a 	sub.w	r0, r0, sl
 8011e02:	fa03 f000 	lsl.w	r0, r3, r0
 8011e06:	9b04      	ldr	r3, [sp, #16]
 8011e08:	3401      	adds	r4, #1
 8011e0a:	4303      	orrs	r3, r0
 8011e0c:	9304      	str	r3, [sp, #16]
 8011e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e12:	2206      	movs	r2, #6
 8011e14:	4826      	ldr	r0, [pc, #152]	; (8011eb0 <_svfiprintf_r+0x1f4>)
 8011e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e1a:	f7ff f93d 	bl	8011098 <memchr>
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	d038      	beq.n	8011e94 <_svfiprintf_r+0x1d8>
 8011e22:	4b24      	ldr	r3, [pc, #144]	; (8011eb4 <_svfiprintf_r+0x1f8>)
 8011e24:	bb1b      	cbnz	r3, 8011e6e <_svfiprintf_r+0x1b2>
 8011e26:	9b03      	ldr	r3, [sp, #12]
 8011e28:	3307      	adds	r3, #7
 8011e2a:	f023 0307 	bic.w	r3, r3, #7
 8011e2e:	3308      	adds	r3, #8
 8011e30:	9303      	str	r3, [sp, #12]
 8011e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e34:	4433      	add	r3, r6
 8011e36:	9309      	str	r3, [sp, #36]	; 0x24
 8011e38:	e767      	b.n	8011d0a <_svfiprintf_r+0x4e>
 8011e3a:	460c      	mov	r4, r1
 8011e3c:	2001      	movs	r0, #1
 8011e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e42:	e7a5      	b.n	8011d90 <_svfiprintf_r+0xd4>
 8011e44:	2300      	movs	r3, #0
 8011e46:	f04f 0c0a 	mov.w	ip, #10
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	3401      	adds	r4, #1
 8011e4e:	9305      	str	r3, [sp, #20]
 8011e50:	4620      	mov	r0, r4
 8011e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e56:	3a30      	subs	r2, #48	; 0x30
 8011e58:	2a09      	cmp	r2, #9
 8011e5a:	d903      	bls.n	8011e64 <_svfiprintf_r+0x1a8>
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d0c5      	beq.n	8011dec <_svfiprintf_r+0x130>
 8011e60:	9105      	str	r1, [sp, #20]
 8011e62:	e7c3      	b.n	8011dec <_svfiprintf_r+0x130>
 8011e64:	4604      	mov	r4, r0
 8011e66:	2301      	movs	r3, #1
 8011e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e6c:	e7f0      	b.n	8011e50 <_svfiprintf_r+0x194>
 8011e6e:	ab03      	add	r3, sp, #12
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	462a      	mov	r2, r5
 8011e74:	4638      	mov	r0, r7
 8011e76:	4b10      	ldr	r3, [pc, #64]	; (8011eb8 <_svfiprintf_r+0x1fc>)
 8011e78:	a904      	add	r1, sp, #16
 8011e7a:	f7fc fc7f 	bl	800e77c <_printf_float>
 8011e7e:	1c42      	adds	r2, r0, #1
 8011e80:	4606      	mov	r6, r0
 8011e82:	d1d6      	bne.n	8011e32 <_svfiprintf_r+0x176>
 8011e84:	89ab      	ldrh	r3, [r5, #12]
 8011e86:	065b      	lsls	r3, r3, #25
 8011e88:	f53f af2c 	bmi.w	8011ce4 <_svfiprintf_r+0x28>
 8011e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e8e:	b01d      	add	sp, #116	; 0x74
 8011e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e94:	ab03      	add	r3, sp, #12
 8011e96:	9300      	str	r3, [sp, #0]
 8011e98:	462a      	mov	r2, r5
 8011e9a:	4638      	mov	r0, r7
 8011e9c:	4b06      	ldr	r3, [pc, #24]	; (8011eb8 <_svfiprintf_r+0x1fc>)
 8011e9e:	a904      	add	r1, sp, #16
 8011ea0:	f7fc ff08 	bl	800ecb4 <_printf_i>
 8011ea4:	e7eb      	b.n	8011e7e <_svfiprintf_r+0x1c2>
 8011ea6:	bf00      	nop
 8011ea8:	08012fc4 	.word	0x08012fc4
 8011eac:	08012fca 	.word	0x08012fca
 8011eb0:	08012fce 	.word	0x08012fce
 8011eb4:	0800e77d 	.word	0x0800e77d
 8011eb8:	08011c05 	.word	0x08011c05

08011ebc <__sfputc_r>:
 8011ebc:	6893      	ldr	r3, [r2, #8]
 8011ebe:	b410      	push	{r4}
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	6093      	str	r3, [r2, #8]
 8011ec6:	da07      	bge.n	8011ed8 <__sfputc_r+0x1c>
 8011ec8:	6994      	ldr	r4, [r2, #24]
 8011eca:	42a3      	cmp	r3, r4
 8011ecc:	db01      	blt.n	8011ed2 <__sfputc_r+0x16>
 8011ece:	290a      	cmp	r1, #10
 8011ed0:	d102      	bne.n	8011ed8 <__sfputc_r+0x1c>
 8011ed2:	bc10      	pop	{r4}
 8011ed4:	f000 b974 	b.w	80121c0 <__swbuf_r>
 8011ed8:	6813      	ldr	r3, [r2, #0]
 8011eda:	1c58      	adds	r0, r3, #1
 8011edc:	6010      	str	r0, [r2, #0]
 8011ede:	7019      	strb	r1, [r3, #0]
 8011ee0:	4608      	mov	r0, r1
 8011ee2:	bc10      	pop	{r4}
 8011ee4:	4770      	bx	lr

08011ee6 <__sfputs_r>:
 8011ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ee8:	4606      	mov	r6, r0
 8011eea:	460f      	mov	r7, r1
 8011eec:	4614      	mov	r4, r2
 8011eee:	18d5      	adds	r5, r2, r3
 8011ef0:	42ac      	cmp	r4, r5
 8011ef2:	d101      	bne.n	8011ef8 <__sfputs_r+0x12>
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	e007      	b.n	8011f08 <__sfputs_r+0x22>
 8011ef8:	463a      	mov	r2, r7
 8011efa:	4630      	mov	r0, r6
 8011efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f00:	f7ff ffdc 	bl	8011ebc <__sfputc_r>
 8011f04:	1c43      	adds	r3, r0, #1
 8011f06:	d1f3      	bne.n	8011ef0 <__sfputs_r+0xa>
 8011f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f0c <_vfiprintf_r>:
 8011f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f10:	460d      	mov	r5, r1
 8011f12:	4614      	mov	r4, r2
 8011f14:	4698      	mov	r8, r3
 8011f16:	4606      	mov	r6, r0
 8011f18:	b09d      	sub	sp, #116	; 0x74
 8011f1a:	b118      	cbz	r0, 8011f24 <_vfiprintf_r+0x18>
 8011f1c:	6983      	ldr	r3, [r0, #24]
 8011f1e:	b90b      	cbnz	r3, 8011f24 <_vfiprintf_r+0x18>
 8011f20:	f000 fb3a 	bl	8012598 <__sinit>
 8011f24:	4b89      	ldr	r3, [pc, #548]	; (801214c <_vfiprintf_r+0x240>)
 8011f26:	429d      	cmp	r5, r3
 8011f28:	d11b      	bne.n	8011f62 <_vfiprintf_r+0x56>
 8011f2a:	6875      	ldr	r5, [r6, #4]
 8011f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f2e:	07d9      	lsls	r1, r3, #31
 8011f30:	d405      	bmi.n	8011f3e <_vfiprintf_r+0x32>
 8011f32:	89ab      	ldrh	r3, [r5, #12]
 8011f34:	059a      	lsls	r2, r3, #22
 8011f36:	d402      	bmi.n	8011f3e <_vfiprintf_r+0x32>
 8011f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f3a:	f000 fbcb 	bl	80126d4 <__retarget_lock_acquire_recursive>
 8011f3e:	89ab      	ldrh	r3, [r5, #12]
 8011f40:	071b      	lsls	r3, r3, #28
 8011f42:	d501      	bpl.n	8011f48 <_vfiprintf_r+0x3c>
 8011f44:	692b      	ldr	r3, [r5, #16]
 8011f46:	b9eb      	cbnz	r3, 8011f84 <_vfiprintf_r+0x78>
 8011f48:	4629      	mov	r1, r5
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	f000 f998 	bl	8012280 <__swsetup_r>
 8011f50:	b1c0      	cbz	r0, 8011f84 <_vfiprintf_r+0x78>
 8011f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f54:	07dc      	lsls	r4, r3, #31
 8011f56:	d50e      	bpl.n	8011f76 <_vfiprintf_r+0x6a>
 8011f58:	f04f 30ff 	mov.w	r0, #4294967295
 8011f5c:	b01d      	add	sp, #116	; 0x74
 8011f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f62:	4b7b      	ldr	r3, [pc, #492]	; (8012150 <_vfiprintf_r+0x244>)
 8011f64:	429d      	cmp	r5, r3
 8011f66:	d101      	bne.n	8011f6c <_vfiprintf_r+0x60>
 8011f68:	68b5      	ldr	r5, [r6, #8]
 8011f6a:	e7df      	b.n	8011f2c <_vfiprintf_r+0x20>
 8011f6c:	4b79      	ldr	r3, [pc, #484]	; (8012154 <_vfiprintf_r+0x248>)
 8011f6e:	429d      	cmp	r5, r3
 8011f70:	bf08      	it	eq
 8011f72:	68f5      	ldreq	r5, [r6, #12]
 8011f74:	e7da      	b.n	8011f2c <_vfiprintf_r+0x20>
 8011f76:	89ab      	ldrh	r3, [r5, #12]
 8011f78:	0598      	lsls	r0, r3, #22
 8011f7a:	d4ed      	bmi.n	8011f58 <_vfiprintf_r+0x4c>
 8011f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f7e:	f000 fbaa 	bl	80126d6 <__retarget_lock_release_recursive>
 8011f82:	e7e9      	b.n	8011f58 <_vfiprintf_r+0x4c>
 8011f84:	2300      	movs	r3, #0
 8011f86:	9309      	str	r3, [sp, #36]	; 0x24
 8011f88:	2320      	movs	r3, #32
 8011f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f8e:	2330      	movs	r3, #48	; 0x30
 8011f90:	f04f 0901 	mov.w	r9, #1
 8011f94:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f98:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8012158 <_vfiprintf_r+0x24c>
 8011f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fa0:	4623      	mov	r3, r4
 8011fa2:	469a      	mov	sl, r3
 8011fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fa8:	b10a      	cbz	r2, 8011fae <_vfiprintf_r+0xa2>
 8011faa:	2a25      	cmp	r2, #37	; 0x25
 8011fac:	d1f9      	bne.n	8011fa2 <_vfiprintf_r+0x96>
 8011fae:	ebba 0b04 	subs.w	fp, sl, r4
 8011fb2:	d00b      	beq.n	8011fcc <_vfiprintf_r+0xc0>
 8011fb4:	465b      	mov	r3, fp
 8011fb6:	4622      	mov	r2, r4
 8011fb8:	4629      	mov	r1, r5
 8011fba:	4630      	mov	r0, r6
 8011fbc:	f7ff ff93 	bl	8011ee6 <__sfputs_r>
 8011fc0:	3001      	adds	r0, #1
 8011fc2:	f000 80aa 	beq.w	801211a <_vfiprintf_r+0x20e>
 8011fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fc8:	445a      	add	r2, fp
 8011fca:	9209      	str	r2, [sp, #36]	; 0x24
 8011fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	f000 80a2 	beq.w	801211a <_vfiprintf_r+0x20e>
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8011fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fe0:	f10a 0a01 	add.w	sl, sl, #1
 8011fe4:	9304      	str	r3, [sp, #16]
 8011fe6:	9307      	str	r3, [sp, #28]
 8011fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fec:	931a      	str	r3, [sp, #104]	; 0x68
 8011fee:	4654      	mov	r4, sl
 8011ff0:	2205      	movs	r2, #5
 8011ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ff6:	4858      	ldr	r0, [pc, #352]	; (8012158 <_vfiprintf_r+0x24c>)
 8011ff8:	f7ff f84e 	bl	8011098 <memchr>
 8011ffc:	9a04      	ldr	r2, [sp, #16]
 8011ffe:	b9d8      	cbnz	r0, 8012038 <_vfiprintf_r+0x12c>
 8012000:	06d1      	lsls	r1, r2, #27
 8012002:	bf44      	itt	mi
 8012004:	2320      	movmi	r3, #32
 8012006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801200a:	0713      	lsls	r3, r2, #28
 801200c:	bf44      	itt	mi
 801200e:	232b      	movmi	r3, #43	; 0x2b
 8012010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012014:	f89a 3000 	ldrb.w	r3, [sl]
 8012018:	2b2a      	cmp	r3, #42	; 0x2a
 801201a:	d015      	beq.n	8012048 <_vfiprintf_r+0x13c>
 801201c:	4654      	mov	r4, sl
 801201e:	2000      	movs	r0, #0
 8012020:	f04f 0c0a 	mov.w	ip, #10
 8012024:	9a07      	ldr	r2, [sp, #28]
 8012026:	4621      	mov	r1, r4
 8012028:	f811 3b01 	ldrb.w	r3, [r1], #1
 801202c:	3b30      	subs	r3, #48	; 0x30
 801202e:	2b09      	cmp	r3, #9
 8012030:	d94e      	bls.n	80120d0 <_vfiprintf_r+0x1c4>
 8012032:	b1b0      	cbz	r0, 8012062 <_vfiprintf_r+0x156>
 8012034:	9207      	str	r2, [sp, #28]
 8012036:	e014      	b.n	8012062 <_vfiprintf_r+0x156>
 8012038:	eba0 0308 	sub.w	r3, r0, r8
 801203c:	fa09 f303 	lsl.w	r3, r9, r3
 8012040:	4313      	orrs	r3, r2
 8012042:	46a2      	mov	sl, r4
 8012044:	9304      	str	r3, [sp, #16]
 8012046:	e7d2      	b.n	8011fee <_vfiprintf_r+0xe2>
 8012048:	9b03      	ldr	r3, [sp, #12]
 801204a:	1d19      	adds	r1, r3, #4
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	9103      	str	r1, [sp, #12]
 8012050:	2b00      	cmp	r3, #0
 8012052:	bfbb      	ittet	lt
 8012054:	425b      	neglt	r3, r3
 8012056:	f042 0202 	orrlt.w	r2, r2, #2
 801205a:	9307      	strge	r3, [sp, #28]
 801205c:	9307      	strlt	r3, [sp, #28]
 801205e:	bfb8      	it	lt
 8012060:	9204      	strlt	r2, [sp, #16]
 8012062:	7823      	ldrb	r3, [r4, #0]
 8012064:	2b2e      	cmp	r3, #46	; 0x2e
 8012066:	d10c      	bne.n	8012082 <_vfiprintf_r+0x176>
 8012068:	7863      	ldrb	r3, [r4, #1]
 801206a:	2b2a      	cmp	r3, #42	; 0x2a
 801206c:	d135      	bne.n	80120da <_vfiprintf_r+0x1ce>
 801206e:	9b03      	ldr	r3, [sp, #12]
 8012070:	3402      	adds	r4, #2
 8012072:	1d1a      	adds	r2, r3, #4
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	9203      	str	r2, [sp, #12]
 8012078:	2b00      	cmp	r3, #0
 801207a:	bfb8      	it	lt
 801207c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012080:	9305      	str	r3, [sp, #20]
 8012082:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801215c <_vfiprintf_r+0x250>
 8012086:	2203      	movs	r2, #3
 8012088:	4650      	mov	r0, sl
 801208a:	7821      	ldrb	r1, [r4, #0]
 801208c:	f7ff f804 	bl	8011098 <memchr>
 8012090:	b140      	cbz	r0, 80120a4 <_vfiprintf_r+0x198>
 8012092:	2340      	movs	r3, #64	; 0x40
 8012094:	eba0 000a 	sub.w	r0, r0, sl
 8012098:	fa03 f000 	lsl.w	r0, r3, r0
 801209c:	9b04      	ldr	r3, [sp, #16]
 801209e:	3401      	adds	r4, #1
 80120a0:	4303      	orrs	r3, r0
 80120a2:	9304      	str	r3, [sp, #16]
 80120a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120a8:	2206      	movs	r2, #6
 80120aa:	482d      	ldr	r0, [pc, #180]	; (8012160 <_vfiprintf_r+0x254>)
 80120ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120b0:	f7fe fff2 	bl	8011098 <memchr>
 80120b4:	2800      	cmp	r0, #0
 80120b6:	d03f      	beq.n	8012138 <_vfiprintf_r+0x22c>
 80120b8:	4b2a      	ldr	r3, [pc, #168]	; (8012164 <_vfiprintf_r+0x258>)
 80120ba:	bb1b      	cbnz	r3, 8012104 <_vfiprintf_r+0x1f8>
 80120bc:	9b03      	ldr	r3, [sp, #12]
 80120be:	3307      	adds	r3, #7
 80120c0:	f023 0307 	bic.w	r3, r3, #7
 80120c4:	3308      	adds	r3, #8
 80120c6:	9303      	str	r3, [sp, #12]
 80120c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ca:	443b      	add	r3, r7
 80120cc:	9309      	str	r3, [sp, #36]	; 0x24
 80120ce:	e767      	b.n	8011fa0 <_vfiprintf_r+0x94>
 80120d0:	460c      	mov	r4, r1
 80120d2:	2001      	movs	r0, #1
 80120d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80120d8:	e7a5      	b.n	8012026 <_vfiprintf_r+0x11a>
 80120da:	2300      	movs	r3, #0
 80120dc:	f04f 0c0a 	mov.w	ip, #10
 80120e0:	4619      	mov	r1, r3
 80120e2:	3401      	adds	r4, #1
 80120e4:	9305      	str	r3, [sp, #20]
 80120e6:	4620      	mov	r0, r4
 80120e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120ec:	3a30      	subs	r2, #48	; 0x30
 80120ee:	2a09      	cmp	r2, #9
 80120f0:	d903      	bls.n	80120fa <_vfiprintf_r+0x1ee>
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d0c5      	beq.n	8012082 <_vfiprintf_r+0x176>
 80120f6:	9105      	str	r1, [sp, #20]
 80120f8:	e7c3      	b.n	8012082 <_vfiprintf_r+0x176>
 80120fa:	4604      	mov	r4, r0
 80120fc:	2301      	movs	r3, #1
 80120fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012102:	e7f0      	b.n	80120e6 <_vfiprintf_r+0x1da>
 8012104:	ab03      	add	r3, sp, #12
 8012106:	9300      	str	r3, [sp, #0]
 8012108:	462a      	mov	r2, r5
 801210a:	4630      	mov	r0, r6
 801210c:	4b16      	ldr	r3, [pc, #88]	; (8012168 <_vfiprintf_r+0x25c>)
 801210e:	a904      	add	r1, sp, #16
 8012110:	f7fc fb34 	bl	800e77c <_printf_float>
 8012114:	4607      	mov	r7, r0
 8012116:	1c78      	adds	r0, r7, #1
 8012118:	d1d6      	bne.n	80120c8 <_vfiprintf_r+0x1bc>
 801211a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801211c:	07d9      	lsls	r1, r3, #31
 801211e:	d405      	bmi.n	801212c <_vfiprintf_r+0x220>
 8012120:	89ab      	ldrh	r3, [r5, #12]
 8012122:	059a      	lsls	r2, r3, #22
 8012124:	d402      	bmi.n	801212c <_vfiprintf_r+0x220>
 8012126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012128:	f000 fad5 	bl	80126d6 <__retarget_lock_release_recursive>
 801212c:	89ab      	ldrh	r3, [r5, #12]
 801212e:	065b      	lsls	r3, r3, #25
 8012130:	f53f af12 	bmi.w	8011f58 <_vfiprintf_r+0x4c>
 8012134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012136:	e711      	b.n	8011f5c <_vfiprintf_r+0x50>
 8012138:	ab03      	add	r3, sp, #12
 801213a:	9300      	str	r3, [sp, #0]
 801213c:	462a      	mov	r2, r5
 801213e:	4630      	mov	r0, r6
 8012140:	4b09      	ldr	r3, [pc, #36]	; (8012168 <_vfiprintf_r+0x25c>)
 8012142:	a904      	add	r1, sp, #16
 8012144:	f7fc fdb6 	bl	800ecb4 <_printf_i>
 8012148:	e7e4      	b.n	8012114 <_vfiprintf_r+0x208>
 801214a:	bf00      	nop
 801214c:	080130f8 	.word	0x080130f8
 8012150:	08013118 	.word	0x08013118
 8012154:	080130d8 	.word	0x080130d8
 8012158:	08012fc4 	.word	0x08012fc4
 801215c:	08012fca 	.word	0x08012fca
 8012160:	08012fce 	.word	0x08012fce
 8012164:	0800e77d 	.word	0x0800e77d
 8012168:	08011ee7 	.word	0x08011ee7

0801216c <nan>:
 801216c:	2000      	movs	r0, #0
 801216e:	4901      	ldr	r1, [pc, #4]	; (8012174 <nan+0x8>)
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop
 8012174:	7ff80000 	.word	0x7ff80000

08012178 <_sbrk_r>:
 8012178:	b538      	push	{r3, r4, r5, lr}
 801217a:	2300      	movs	r3, #0
 801217c:	4d05      	ldr	r5, [pc, #20]	; (8012194 <_sbrk_r+0x1c>)
 801217e:	4604      	mov	r4, r0
 8012180:	4608      	mov	r0, r1
 8012182:	602b      	str	r3, [r5, #0]
 8012184:	f7f2 f904 	bl	8004390 <_sbrk>
 8012188:	1c43      	adds	r3, r0, #1
 801218a:	d102      	bne.n	8012192 <_sbrk_r+0x1a>
 801218c:	682b      	ldr	r3, [r5, #0]
 801218e:	b103      	cbz	r3, 8012192 <_sbrk_r+0x1a>
 8012190:	6023      	str	r3, [r4, #0]
 8012192:	bd38      	pop	{r3, r4, r5, pc}
 8012194:	20001940 	.word	0x20001940

08012198 <strncmp>:
 8012198:	4603      	mov	r3, r0
 801219a:	b510      	push	{r4, lr}
 801219c:	b172      	cbz	r2, 80121bc <strncmp+0x24>
 801219e:	3901      	subs	r1, #1
 80121a0:	1884      	adds	r4, r0, r2
 80121a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80121a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80121aa:	4290      	cmp	r0, r2
 80121ac:	d101      	bne.n	80121b2 <strncmp+0x1a>
 80121ae:	42a3      	cmp	r3, r4
 80121b0:	d101      	bne.n	80121b6 <strncmp+0x1e>
 80121b2:	1a80      	subs	r0, r0, r2
 80121b4:	bd10      	pop	{r4, pc}
 80121b6:	2800      	cmp	r0, #0
 80121b8:	d1f3      	bne.n	80121a2 <strncmp+0xa>
 80121ba:	e7fa      	b.n	80121b2 <strncmp+0x1a>
 80121bc:	4610      	mov	r0, r2
 80121be:	e7f9      	b.n	80121b4 <strncmp+0x1c>

080121c0 <__swbuf_r>:
 80121c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121c2:	460e      	mov	r6, r1
 80121c4:	4614      	mov	r4, r2
 80121c6:	4605      	mov	r5, r0
 80121c8:	b118      	cbz	r0, 80121d2 <__swbuf_r+0x12>
 80121ca:	6983      	ldr	r3, [r0, #24]
 80121cc:	b90b      	cbnz	r3, 80121d2 <__swbuf_r+0x12>
 80121ce:	f000 f9e3 	bl	8012598 <__sinit>
 80121d2:	4b21      	ldr	r3, [pc, #132]	; (8012258 <__swbuf_r+0x98>)
 80121d4:	429c      	cmp	r4, r3
 80121d6:	d12b      	bne.n	8012230 <__swbuf_r+0x70>
 80121d8:	686c      	ldr	r4, [r5, #4]
 80121da:	69a3      	ldr	r3, [r4, #24]
 80121dc:	60a3      	str	r3, [r4, #8]
 80121de:	89a3      	ldrh	r3, [r4, #12]
 80121e0:	071a      	lsls	r2, r3, #28
 80121e2:	d52f      	bpl.n	8012244 <__swbuf_r+0x84>
 80121e4:	6923      	ldr	r3, [r4, #16]
 80121e6:	b36b      	cbz	r3, 8012244 <__swbuf_r+0x84>
 80121e8:	6923      	ldr	r3, [r4, #16]
 80121ea:	6820      	ldr	r0, [r4, #0]
 80121ec:	b2f6      	uxtb	r6, r6
 80121ee:	1ac0      	subs	r0, r0, r3
 80121f0:	6963      	ldr	r3, [r4, #20]
 80121f2:	4637      	mov	r7, r6
 80121f4:	4283      	cmp	r3, r0
 80121f6:	dc04      	bgt.n	8012202 <__swbuf_r+0x42>
 80121f8:	4621      	mov	r1, r4
 80121fa:	4628      	mov	r0, r5
 80121fc:	f000 f938 	bl	8012470 <_fflush_r>
 8012200:	bb30      	cbnz	r0, 8012250 <__swbuf_r+0x90>
 8012202:	68a3      	ldr	r3, [r4, #8]
 8012204:	3001      	adds	r0, #1
 8012206:	3b01      	subs	r3, #1
 8012208:	60a3      	str	r3, [r4, #8]
 801220a:	6823      	ldr	r3, [r4, #0]
 801220c:	1c5a      	adds	r2, r3, #1
 801220e:	6022      	str	r2, [r4, #0]
 8012210:	701e      	strb	r6, [r3, #0]
 8012212:	6963      	ldr	r3, [r4, #20]
 8012214:	4283      	cmp	r3, r0
 8012216:	d004      	beq.n	8012222 <__swbuf_r+0x62>
 8012218:	89a3      	ldrh	r3, [r4, #12]
 801221a:	07db      	lsls	r3, r3, #31
 801221c:	d506      	bpl.n	801222c <__swbuf_r+0x6c>
 801221e:	2e0a      	cmp	r6, #10
 8012220:	d104      	bne.n	801222c <__swbuf_r+0x6c>
 8012222:	4621      	mov	r1, r4
 8012224:	4628      	mov	r0, r5
 8012226:	f000 f923 	bl	8012470 <_fflush_r>
 801222a:	b988      	cbnz	r0, 8012250 <__swbuf_r+0x90>
 801222c:	4638      	mov	r0, r7
 801222e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012230:	4b0a      	ldr	r3, [pc, #40]	; (801225c <__swbuf_r+0x9c>)
 8012232:	429c      	cmp	r4, r3
 8012234:	d101      	bne.n	801223a <__swbuf_r+0x7a>
 8012236:	68ac      	ldr	r4, [r5, #8]
 8012238:	e7cf      	b.n	80121da <__swbuf_r+0x1a>
 801223a:	4b09      	ldr	r3, [pc, #36]	; (8012260 <__swbuf_r+0xa0>)
 801223c:	429c      	cmp	r4, r3
 801223e:	bf08      	it	eq
 8012240:	68ec      	ldreq	r4, [r5, #12]
 8012242:	e7ca      	b.n	80121da <__swbuf_r+0x1a>
 8012244:	4621      	mov	r1, r4
 8012246:	4628      	mov	r0, r5
 8012248:	f000 f81a 	bl	8012280 <__swsetup_r>
 801224c:	2800      	cmp	r0, #0
 801224e:	d0cb      	beq.n	80121e8 <__swbuf_r+0x28>
 8012250:	f04f 37ff 	mov.w	r7, #4294967295
 8012254:	e7ea      	b.n	801222c <__swbuf_r+0x6c>
 8012256:	bf00      	nop
 8012258:	080130f8 	.word	0x080130f8
 801225c:	08013118 	.word	0x08013118
 8012260:	080130d8 	.word	0x080130d8

08012264 <__ascii_wctomb>:
 8012264:	4603      	mov	r3, r0
 8012266:	4608      	mov	r0, r1
 8012268:	b141      	cbz	r1, 801227c <__ascii_wctomb+0x18>
 801226a:	2aff      	cmp	r2, #255	; 0xff
 801226c:	d904      	bls.n	8012278 <__ascii_wctomb+0x14>
 801226e:	228a      	movs	r2, #138	; 0x8a
 8012270:	f04f 30ff 	mov.w	r0, #4294967295
 8012274:	601a      	str	r2, [r3, #0]
 8012276:	4770      	bx	lr
 8012278:	2001      	movs	r0, #1
 801227a:	700a      	strb	r2, [r1, #0]
 801227c:	4770      	bx	lr
	...

08012280 <__swsetup_r>:
 8012280:	4b32      	ldr	r3, [pc, #200]	; (801234c <__swsetup_r+0xcc>)
 8012282:	b570      	push	{r4, r5, r6, lr}
 8012284:	681d      	ldr	r5, [r3, #0]
 8012286:	4606      	mov	r6, r0
 8012288:	460c      	mov	r4, r1
 801228a:	b125      	cbz	r5, 8012296 <__swsetup_r+0x16>
 801228c:	69ab      	ldr	r3, [r5, #24]
 801228e:	b913      	cbnz	r3, 8012296 <__swsetup_r+0x16>
 8012290:	4628      	mov	r0, r5
 8012292:	f000 f981 	bl	8012598 <__sinit>
 8012296:	4b2e      	ldr	r3, [pc, #184]	; (8012350 <__swsetup_r+0xd0>)
 8012298:	429c      	cmp	r4, r3
 801229a:	d10f      	bne.n	80122bc <__swsetup_r+0x3c>
 801229c:	686c      	ldr	r4, [r5, #4]
 801229e:	89a3      	ldrh	r3, [r4, #12]
 80122a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122a4:	0719      	lsls	r1, r3, #28
 80122a6:	d42c      	bmi.n	8012302 <__swsetup_r+0x82>
 80122a8:	06dd      	lsls	r5, r3, #27
 80122aa:	d411      	bmi.n	80122d0 <__swsetup_r+0x50>
 80122ac:	2309      	movs	r3, #9
 80122ae:	6033      	str	r3, [r6, #0]
 80122b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80122b4:	f04f 30ff 	mov.w	r0, #4294967295
 80122b8:	81a3      	strh	r3, [r4, #12]
 80122ba:	e03e      	b.n	801233a <__swsetup_r+0xba>
 80122bc:	4b25      	ldr	r3, [pc, #148]	; (8012354 <__swsetup_r+0xd4>)
 80122be:	429c      	cmp	r4, r3
 80122c0:	d101      	bne.n	80122c6 <__swsetup_r+0x46>
 80122c2:	68ac      	ldr	r4, [r5, #8]
 80122c4:	e7eb      	b.n	801229e <__swsetup_r+0x1e>
 80122c6:	4b24      	ldr	r3, [pc, #144]	; (8012358 <__swsetup_r+0xd8>)
 80122c8:	429c      	cmp	r4, r3
 80122ca:	bf08      	it	eq
 80122cc:	68ec      	ldreq	r4, [r5, #12]
 80122ce:	e7e6      	b.n	801229e <__swsetup_r+0x1e>
 80122d0:	0758      	lsls	r0, r3, #29
 80122d2:	d512      	bpl.n	80122fa <__swsetup_r+0x7a>
 80122d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122d6:	b141      	cbz	r1, 80122ea <__swsetup_r+0x6a>
 80122d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122dc:	4299      	cmp	r1, r3
 80122de:	d002      	beq.n	80122e6 <__swsetup_r+0x66>
 80122e0:	4630      	mov	r0, r6
 80122e2:	f7ff fbb3 	bl	8011a4c <_free_r>
 80122e6:	2300      	movs	r3, #0
 80122e8:	6363      	str	r3, [r4, #52]	; 0x34
 80122ea:	89a3      	ldrh	r3, [r4, #12]
 80122ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80122f0:	81a3      	strh	r3, [r4, #12]
 80122f2:	2300      	movs	r3, #0
 80122f4:	6063      	str	r3, [r4, #4]
 80122f6:	6923      	ldr	r3, [r4, #16]
 80122f8:	6023      	str	r3, [r4, #0]
 80122fa:	89a3      	ldrh	r3, [r4, #12]
 80122fc:	f043 0308 	orr.w	r3, r3, #8
 8012300:	81a3      	strh	r3, [r4, #12]
 8012302:	6923      	ldr	r3, [r4, #16]
 8012304:	b94b      	cbnz	r3, 801231a <__swsetup_r+0x9a>
 8012306:	89a3      	ldrh	r3, [r4, #12]
 8012308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801230c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012310:	d003      	beq.n	801231a <__swsetup_r+0x9a>
 8012312:	4621      	mov	r1, r4
 8012314:	4630      	mov	r0, r6
 8012316:	f000 fa05 	bl	8012724 <__smakebuf_r>
 801231a:	89a0      	ldrh	r0, [r4, #12]
 801231c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012320:	f010 0301 	ands.w	r3, r0, #1
 8012324:	d00a      	beq.n	801233c <__swsetup_r+0xbc>
 8012326:	2300      	movs	r3, #0
 8012328:	60a3      	str	r3, [r4, #8]
 801232a:	6963      	ldr	r3, [r4, #20]
 801232c:	425b      	negs	r3, r3
 801232e:	61a3      	str	r3, [r4, #24]
 8012330:	6923      	ldr	r3, [r4, #16]
 8012332:	b943      	cbnz	r3, 8012346 <__swsetup_r+0xc6>
 8012334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012338:	d1ba      	bne.n	80122b0 <__swsetup_r+0x30>
 801233a:	bd70      	pop	{r4, r5, r6, pc}
 801233c:	0781      	lsls	r1, r0, #30
 801233e:	bf58      	it	pl
 8012340:	6963      	ldrpl	r3, [r4, #20]
 8012342:	60a3      	str	r3, [r4, #8]
 8012344:	e7f4      	b.n	8012330 <__swsetup_r+0xb0>
 8012346:	2000      	movs	r0, #0
 8012348:	e7f7      	b.n	801233a <__swsetup_r+0xba>
 801234a:	bf00      	nop
 801234c:	200008bc 	.word	0x200008bc
 8012350:	080130f8 	.word	0x080130f8
 8012354:	08013118 	.word	0x08013118
 8012358:	080130d8 	.word	0x080130d8

0801235c <abort>:
 801235c:	2006      	movs	r0, #6
 801235e:	b508      	push	{r3, lr}
 8012360:	f000 fa9e 	bl	80128a0 <raise>
 8012364:	2001      	movs	r0, #1
 8012366:	f7f1 ffa0 	bl	80042aa <_exit>
	...

0801236c <__sflush_r>:
 801236c:	898a      	ldrh	r2, [r1, #12]
 801236e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012370:	4605      	mov	r5, r0
 8012372:	0710      	lsls	r0, r2, #28
 8012374:	460c      	mov	r4, r1
 8012376:	d457      	bmi.n	8012428 <__sflush_r+0xbc>
 8012378:	684b      	ldr	r3, [r1, #4]
 801237a:	2b00      	cmp	r3, #0
 801237c:	dc04      	bgt.n	8012388 <__sflush_r+0x1c>
 801237e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012380:	2b00      	cmp	r3, #0
 8012382:	dc01      	bgt.n	8012388 <__sflush_r+0x1c>
 8012384:	2000      	movs	r0, #0
 8012386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801238a:	2e00      	cmp	r6, #0
 801238c:	d0fa      	beq.n	8012384 <__sflush_r+0x18>
 801238e:	2300      	movs	r3, #0
 8012390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012394:	682f      	ldr	r7, [r5, #0]
 8012396:	602b      	str	r3, [r5, #0]
 8012398:	d032      	beq.n	8012400 <__sflush_r+0x94>
 801239a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801239c:	89a3      	ldrh	r3, [r4, #12]
 801239e:	075a      	lsls	r2, r3, #29
 80123a0:	d505      	bpl.n	80123ae <__sflush_r+0x42>
 80123a2:	6863      	ldr	r3, [r4, #4]
 80123a4:	1ac0      	subs	r0, r0, r3
 80123a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123a8:	b10b      	cbz	r3, 80123ae <__sflush_r+0x42>
 80123aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123ac:	1ac0      	subs	r0, r0, r3
 80123ae:	2300      	movs	r3, #0
 80123b0:	4602      	mov	r2, r0
 80123b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123b4:	4628      	mov	r0, r5
 80123b6:	6a21      	ldr	r1, [r4, #32]
 80123b8:	47b0      	blx	r6
 80123ba:	1c43      	adds	r3, r0, #1
 80123bc:	89a3      	ldrh	r3, [r4, #12]
 80123be:	d106      	bne.n	80123ce <__sflush_r+0x62>
 80123c0:	6829      	ldr	r1, [r5, #0]
 80123c2:	291d      	cmp	r1, #29
 80123c4:	d82c      	bhi.n	8012420 <__sflush_r+0xb4>
 80123c6:	4a29      	ldr	r2, [pc, #164]	; (801246c <__sflush_r+0x100>)
 80123c8:	40ca      	lsrs	r2, r1
 80123ca:	07d6      	lsls	r6, r2, #31
 80123cc:	d528      	bpl.n	8012420 <__sflush_r+0xb4>
 80123ce:	2200      	movs	r2, #0
 80123d0:	6062      	str	r2, [r4, #4]
 80123d2:	6922      	ldr	r2, [r4, #16]
 80123d4:	04d9      	lsls	r1, r3, #19
 80123d6:	6022      	str	r2, [r4, #0]
 80123d8:	d504      	bpl.n	80123e4 <__sflush_r+0x78>
 80123da:	1c42      	adds	r2, r0, #1
 80123dc:	d101      	bne.n	80123e2 <__sflush_r+0x76>
 80123de:	682b      	ldr	r3, [r5, #0]
 80123e0:	b903      	cbnz	r3, 80123e4 <__sflush_r+0x78>
 80123e2:	6560      	str	r0, [r4, #84]	; 0x54
 80123e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123e6:	602f      	str	r7, [r5, #0]
 80123e8:	2900      	cmp	r1, #0
 80123ea:	d0cb      	beq.n	8012384 <__sflush_r+0x18>
 80123ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123f0:	4299      	cmp	r1, r3
 80123f2:	d002      	beq.n	80123fa <__sflush_r+0x8e>
 80123f4:	4628      	mov	r0, r5
 80123f6:	f7ff fb29 	bl	8011a4c <_free_r>
 80123fa:	2000      	movs	r0, #0
 80123fc:	6360      	str	r0, [r4, #52]	; 0x34
 80123fe:	e7c2      	b.n	8012386 <__sflush_r+0x1a>
 8012400:	6a21      	ldr	r1, [r4, #32]
 8012402:	2301      	movs	r3, #1
 8012404:	4628      	mov	r0, r5
 8012406:	47b0      	blx	r6
 8012408:	1c41      	adds	r1, r0, #1
 801240a:	d1c7      	bne.n	801239c <__sflush_r+0x30>
 801240c:	682b      	ldr	r3, [r5, #0]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d0c4      	beq.n	801239c <__sflush_r+0x30>
 8012412:	2b1d      	cmp	r3, #29
 8012414:	d001      	beq.n	801241a <__sflush_r+0xae>
 8012416:	2b16      	cmp	r3, #22
 8012418:	d101      	bne.n	801241e <__sflush_r+0xb2>
 801241a:	602f      	str	r7, [r5, #0]
 801241c:	e7b2      	b.n	8012384 <__sflush_r+0x18>
 801241e:	89a3      	ldrh	r3, [r4, #12]
 8012420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012424:	81a3      	strh	r3, [r4, #12]
 8012426:	e7ae      	b.n	8012386 <__sflush_r+0x1a>
 8012428:	690f      	ldr	r7, [r1, #16]
 801242a:	2f00      	cmp	r7, #0
 801242c:	d0aa      	beq.n	8012384 <__sflush_r+0x18>
 801242e:	0793      	lsls	r3, r2, #30
 8012430:	bf18      	it	ne
 8012432:	2300      	movne	r3, #0
 8012434:	680e      	ldr	r6, [r1, #0]
 8012436:	bf08      	it	eq
 8012438:	694b      	ldreq	r3, [r1, #20]
 801243a:	1bf6      	subs	r6, r6, r7
 801243c:	600f      	str	r7, [r1, #0]
 801243e:	608b      	str	r3, [r1, #8]
 8012440:	2e00      	cmp	r6, #0
 8012442:	dd9f      	ble.n	8012384 <__sflush_r+0x18>
 8012444:	4633      	mov	r3, r6
 8012446:	463a      	mov	r2, r7
 8012448:	4628      	mov	r0, r5
 801244a:	6a21      	ldr	r1, [r4, #32]
 801244c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8012450:	47e0      	blx	ip
 8012452:	2800      	cmp	r0, #0
 8012454:	dc06      	bgt.n	8012464 <__sflush_r+0xf8>
 8012456:	89a3      	ldrh	r3, [r4, #12]
 8012458:	f04f 30ff 	mov.w	r0, #4294967295
 801245c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012460:	81a3      	strh	r3, [r4, #12]
 8012462:	e790      	b.n	8012386 <__sflush_r+0x1a>
 8012464:	4407      	add	r7, r0
 8012466:	1a36      	subs	r6, r6, r0
 8012468:	e7ea      	b.n	8012440 <__sflush_r+0xd4>
 801246a:	bf00      	nop
 801246c:	20400001 	.word	0x20400001

08012470 <_fflush_r>:
 8012470:	b538      	push	{r3, r4, r5, lr}
 8012472:	690b      	ldr	r3, [r1, #16]
 8012474:	4605      	mov	r5, r0
 8012476:	460c      	mov	r4, r1
 8012478:	b913      	cbnz	r3, 8012480 <_fflush_r+0x10>
 801247a:	2500      	movs	r5, #0
 801247c:	4628      	mov	r0, r5
 801247e:	bd38      	pop	{r3, r4, r5, pc}
 8012480:	b118      	cbz	r0, 801248a <_fflush_r+0x1a>
 8012482:	6983      	ldr	r3, [r0, #24]
 8012484:	b90b      	cbnz	r3, 801248a <_fflush_r+0x1a>
 8012486:	f000 f887 	bl	8012598 <__sinit>
 801248a:	4b14      	ldr	r3, [pc, #80]	; (80124dc <_fflush_r+0x6c>)
 801248c:	429c      	cmp	r4, r3
 801248e:	d11b      	bne.n	80124c8 <_fflush_r+0x58>
 8012490:	686c      	ldr	r4, [r5, #4]
 8012492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d0ef      	beq.n	801247a <_fflush_r+0xa>
 801249a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801249c:	07d0      	lsls	r0, r2, #31
 801249e:	d404      	bmi.n	80124aa <_fflush_r+0x3a>
 80124a0:	0599      	lsls	r1, r3, #22
 80124a2:	d402      	bmi.n	80124aa <_fflush_r+0x3a>
 80124a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124a6:	f000 f915 	bl	80126d4 <__retarget_lock_acquire_recursive>
 80124aa:	4628      	mov	r0, r5
 80124ac:	4621      	mov	r1, r4
 80124ae:	f7ff ff5d 	bl	801236c <__sflush_r>
 80124b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124b4:	4605      	mov	r5, r0
 80124b6:	07da      	lsls	r2, r3, #31
 80124b8:	d4e0      	bmi.n	801247c <_fflush_r+0xc>
 80124ba:	89a3      	ldrh	r3, [r4, #12]
 80124bc:	059b      	lsls	r3, r3, #22
 80124be:	d4dd      	bmi.n	801247c <_fflush_r+0xc>
 80124c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124c2:	f000 f908 	bl	80126d6 <__retarget_lock_release_recursive>
 80124c6:	e7d9      	b.n	801247c <_fflush_r+0xc>
 80124c8:	4b05      	ldr	r3, [pc, #20]	; (80124e0 <_fflush_r+0x70>)
 80124ca:	429c      	cmp	r4, r3
 80124cc:	d101      	bne.n	80124d2 <_fflush_r+0x62>
 80124ce:	68ac      	ldr	r4, [r5, #8]
 80124d0:	e7df      	b.n	8012492 <_fflush_r+0x22>
 80124d2:	4b04      	ldr	r3, [pc, #16]	; (80124e4 <_fflush_r+0x74>)
 80124d4:	429c      	cmp	r4, r3
 80124d6:	bf08      	it	eq
 80124d8:	68ec      	ldreq	r4, [r5, #12]
 80124da:	e7da      	b.n	8012492 <_fflush_r+0x22>
 80124dc:	080130f8 	.word	0x080130f8
 80124e0:	08013118 	.word	0x08013118
 80124e4:	080130d8 	.word	0x080130d8

080124e8 <std>:
 80124e8:	2300      	movs	r3, #0
 80124ea:	b510      	push	{r4, lr}
 80124ec:	4604      	mov	r4, r0
 80124ee:	e9c0 3300 	strd	r3, r3, [r0]
 80124f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80124f6:	6083      	str	r3, [r0, #8]
 80124f8:	8181      	strh	r1, [r0, #12]
 80124fa:	6643      	str	r3, [r0, #100]	; 0x64
 80124fc:	81c2      	strh	r2, [r0, #14]
 80124fe:	6183      	str	r3, [r0, #24]
 8012500:	4619      	mov	r1, r3
 8012502:	2208      	movs	r2, #8
 8012504:	305c      	adds	r0, #92	; 0x5c
 8012506:	f7fc f893 	bl	800e630 <memset>
 801250a:	4b05      	ldr	r3, [pc, #20]	; (8012520 <std+0x38>)
 801250c:	6224      	str	r4, [r4, #32]
 801250e:	6263      	str	r3, [r4, #36]	; 0x24
 8012510:	4b04      	ldr	r3, [pc, #16]	; (8012524 <std+0x3c>)
 8012512:	62a3      	str	r3, [r4, #40]	; 0x28
 8012514:	4b04      	ldr	r3, [pc, #16]	; (8012528 <std+0x40>)
 8012516:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012518:	4b04      	ldr	r3, [pc, #16]	; (801252c <std+0x44>)
 801251a:	6323      	str	r3, [r4, #48]	; 0x30
 801251c:	bd10      	pop	{r4, pc}
 801251e:	bf00      	nop
 8012520:	080128d9 	.word	0x080128d9
 8012524:	080128fb 	.word	0x080128fb
 8012528:	08012933 	.word	0x08012933
 801252c:	08012957 	.word	0x08012957

08012530 <_cleanup_r>:
 8012530:	4901      	ldr	r1, [pc, #4]	; (8012538 <_cleanup_r+0x8>)
 8012532:	f000 b8af 	b.w	8012694 <_fwalk_reent>
 8012536:	bf00      	nop
 8012538:	08012471 	.word	0x08012471

0801253c <__sfmoreglue>:
 801253c:	2268      	movs	r2, #104	; 0x68
 801253e:	b570      	push	{r4, r5, r6, lr}
 8012540:	1e4d      	subs	r5, r1, #1
 8012542:	4355      	muls	r5, r2
 8012544:	460e      	mov	r6, r1
 8012546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801254a:	f7ff fae7 	bl	8011b1c <_malloc_r>
 801254e:	4604      	mov	r4, r0
 8012550:	b140      	cbz	r0, 8012564 <__sfmoreglue+0x28>
 8012552:	2100      	movs	r1, #0
 8012554:	e9c0 1600 	strd	r1, r6, [r0]
 8012558:	300c      	adds	r0, #12
 801255a:	60a0      	str	r0, [r4, #8]
 801255c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012560:	f7fc f866 	bl	800e630 <memset>
 8012564:	4620      	mov	r0, r4
 8012566:	bd70      	pop	{r4, r5, r6, pc}

08012568 <__sfp_lock_acquire>:
 8012568:	4801      	ldr	r0, [pc, #4]	; (8012570 <__sfp_lock_acquire+0x8>)
 801256a:	f000 b8b3 	b.w	80126d4 <__retarget_lock_acquire_recursive>
 801256e:	bf00      	nop
 8012570:	2000193d 	.word	0x2000193d

08012574 <__sfp_lock_release>:
 8012574:	4801      	ldr	r0, [pc, #4]	; (801257c <__sfp_lock_release+0x8>)
 8012576:	f000 b8ae 	b.w	80126d6 <__retarget_lock_release_recursive>
 801257a:	bf00      	nop
 801257c:	2000193d 	.word	0x2000193d

08012580 <__sinit_lock_acquire>:
 8012580:	4801      	ldr	r0, [pc, #4]	; (8012588 <__sinit_lock_acquire+0x8>)
 8012582:	f000 b8a7 	b.w	80126d4 <__retarget_lock_acquire_recursive>
 8012586:	bf00      	nop
 8012588:	2000193e 	.word	0x2000193e

0801258c <__sinit_lock_release>:
 801258c:	4801      	ldr	r0, [pc, #4]	; (8012594 <__sinit_lock_release+0x8>)
 801258e:	f000 b8a2 	b.w	80126d6 <__retarget_lock_release_recursive>
 8012592:	bf00      	nop
 8012594:	2000193e 	.word	0x2000193e

08012598 <__sinit>:
 8012598:	b510      	push	{r4, lr}
 801259a:	4604      	mov	r4, r0
 801259c:	f7ff fff0 	bl	8012580 <__sinit_lock_acquire>
 80125a0:	69a3      	ldr	r3, [r4, #24]
 80125a2:	b11b      	cbz	r3, 80125ac <__sinit+0x14>
 80125a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125a8:	f7ff bff0 	b.w	801258c <__sinit_lock_release>
 80125ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80125b0:	6523      	str	r3, [r4, #80]	; 0x50
 80125b2:	4b13      	ldr	r3, [pc, #76]	; (8012600 <__sinit+0x68>)
 80125b4:	4a13      	ldr	r2, [pc, #76]	; (8012604 <__sinit+0x6c>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80125ba:	42a3      	cmp	r3, r4
 80125bc:	bf08      	it	eq
 80125be:	2301      	moveq	r3, #1
 80125c0:	4620      	mov	r0, r4
 80125c2:	bf08      	it	eq
 80125c4:	61a3      	streq	r3, [r4, #24]
 80125c6:	f000 f81f 	bl	8012608 <__sfp>
 80125ca:	6060      	str	r0, [r4, #4]
 80125cc:	4620      	mov	r0, r4
 80125ce:	f000 f81b 	bl	8012608 <__sfp>
 80125d2:	60a0      	str	r0, [r4, #8]
 80125d4:	4620      	mov	r0, r4
 80125d6:	f000 f817 	bl	8012608 <__sfp>
 80125da:	2200      	movs	r2, #0
 80125dc:	2104      	movs	r1, #4
 80125de:	60e0      	str	r0, [r4, #12]
 80125e0:	6860      	ldr	r0, [r4, #4]
 80125e2:	f7ff ff81 	bl	80124e8 <std>
 80125e6:	2201      	movs	r2, #1
 80125e8:	2109      	movs	r1, #9
 80125ea:	68a0      	ldr	r0, [r4, #8]
 80125ec:	f7ff ff7c 	bl	80124e8 <std>
 80125f0:	2202      	movs	r2, #2
 80125f2:	2112      	movs	r1, #18
 80125f4:	68e0      	ldr	r0, [r4, #12]
 80125f6:	f7ff ff77 	bl	80124e8 <std>
 80125fa:	2301      	movs	r3, #1
 80125fc:	61a3      	str	r3, [r4, #24]
 80125fe:	e7d1      	b.n	80125a4 <__sinit+0xc>
 8012600:	08012c40 	.word	0x08012c40
 8012604:	08012531 	.word	0x08012531

08012608 <__sfp>:
 8012608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801260a:	4607      	mov	r7, r0
 801260c:	f7ff ffac 	bl	8012568 <__sfp_lock_acquire>
 8012610:	4b1e      	ldr	r3, [pc, #120]	; (801268c <__sfp+0x84>)
 8012612:	681e      	ldr	r6, [r3, #0]
 8012614:	69b3      	ldr	r3, [r6, #24]
 8012616:	b913      	cbnz	r3, 801261e <__sfp+0x16>
 8012618:	4630      	mov	r0, r6
 801261a:	f7ff ffbd 	bl	8012598 <__sinit>
 801261e:	3648      	adds	r6, #72	; 0x48
 8012620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012624:	3b01      	subs	r3, #1
 8012626:	d503      	bpl.n	8012630 <__sfp+0x28>
 8012628:	6833      	ldr	r3, [r6, #0]
 801262a:	b30b      	cbz	r3, 8012670 <__sfp+0x68>
 801262c:	6836      	ldr	r6, [r6, #0]
 801262e:	e7f7      	b.n	8012620 <__sfp+0x18>
 8012630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012634:	b9d5      	cbnz	r5, 801266c <__sfp+0x64>
 8012636:	4b16      	ldr	r3, [pc, #88]	; (8012690 <__sfp+0x88>)
 8012638:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801263c:	60e3      	str	r3, [r4, #12]
 801263e:	6665      	str	r5, [r4, #100]	; 0x64
 8012640:	f000 f847 	bl	80126d2 <__retarget_lock_init_recursive>
 8012644:	f7ff ff96 	bl	8012574 <__sfp_lock_release>
 8012648:	2208      	movs	r2, #8
 801264a:	4629      	mov	r1, r5
 801264c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012650:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012654:	6025      	str	r5, [r4, #0]
 8012656:	61a5      	str	r5, [r4, #24]
 8012658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801265c:	f7fb ffe8 	bl	800e630 <memset>
 8012660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012668:	4620      	mov	r0, r4
 801266a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801266c:	3468      	adds	r4, #104	; 0x68
 801266e:	e7d9      	b.n	8012624 <__sfp+0x1c>
 8012670:	2104      	movs	r1, #4
 8012672:	4638      	mov	r0, r7
 8012674:	f7ff ff62 	bl	801253c <__sfmoreglue>
 8012678:	4604      	mov	r4, r0
 801267a:	6030      	str	r0, [r6, #0]
 801267c:	2800      	cmp	r0, #0
 801267e:	d1d5      	bne.n	801262c <__sfp+0x24>
 8012680:	f7ff ff78 	bl	8012574 <__sfp_lock_release>
 8012684:	230c      	movs	r3, #12
 8012686:	603b      	str	r3, [r7, #0]
 8012688:	e7ee      	b.n	8012668 <__sfp+0x60>
 801268a:	bf00      	nop
 801268c:	08012c40 	.word	0x08012c40
 8012690:	ffff0001 	.word	0xffff0001

08012694 <_fwalk_reent>:
 8012694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012698:	4606      	mov	r6, r0
 801269a:	4688      	mov	r8, r1
 801269c:	2700      	movs	r7, #0
 801269e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80126a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80126a6:	f1b9 0901 	subs.w	r9, r9, #1
 80126aa:	d505      	bpl.n	80126b8 <_fwalk_reent+0x24>
 80126ac:	6824      	ldr	r4, [r4, #0]
 80126ae:	2c00      	cmp	r4, #0
 80126b0:	d1f7      	bne.n	80126a2 <_fwalk_reent+0xe>
 80126b2:	4638      	mov	r0, r7
 80126b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126b8:	89ab      	ldrh	r3, [r5, #12]
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d907      	bls.n	80126ce <_fwalk_reent+0x3a>
 80126be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126c2:	3301      	adds	r3, #1
 80126c4:	d003      	beq.n	80126ce <_fwalk_reent+0x3a>
 80126c6:	4629      	mov	r1, r5
 80126c8:	4630      	mov	r0, r6
 80126ca:	47c0      	blx	r8
 80126cc:	4307      	orrs	r7, r0
 80126ce:	3568      	adds	r5, #104	; 0x68
 80126d0:	e7e9      	b.n	80126a6 <_fwalk_reent+0x12>

080126d2 <__retarget_lock_init_recursive>:
 80126d2:	4770      	bx	lr

080126d4 <__retarget_lock_acquire_recursive>:
 80126d4:	4770      	bx	lr

080126d6 <__retarget_lock_release_recursive>:
 80126d6:	4770      	bx	lr

080126d8 <__swhatbuf_r>:
 80126d8:	b570      	push	{r4, r5, r6, lr}
 80126da:	460e      	mov	r6, r1
 80126dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126e0:	4614      	mov	r4, r2
 80126e2:	2900      	cmp	r1, #0
 80126e4:	461d      	mov	r5, r3
 80126e6:	b096      	sub	sp, #88	; 0x58
 80126e8:	da08      	bge.n	80126fc <__swhatbuf_r+0x24>
 80126ea:	2200      	movs	r2, #0
 80126ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80126f0:	602a      	str	r2, [r5, #0]
 80126f2:	061a      	lsls	r2, r3, #24
 80126f4:	d410      	bmi.n	8012718 <__swhatbuf_r+0x40>
 80126f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126fa:	e00e      	b.n	801271a <__swhatbuf_r+0x42>
 80126fc:	466a      	mov	r2, sp
 80126fe:	f000 f951 	bl	80129a4 <_fstat_r>
 8012702:	2800      	cmp	r0, #0
 8012704:	dbf1      	blt.n	80126ea <__swhatbuf_r+0x12>
 8012706:	9a01      	ldr	r2, [sp, #4]
 8012708:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801270c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012710:	425a      	negs	r2, r3
 8012712:	415a      	adcs	r2, r3
 8012714:	602a      	str	r2, [r5, #0]
 8012716:	e7ee      	b.n	80126f6 <__swhatbuf_r+0x1e>
 8012718:	2340      	movs	r3, #64	; 0x40
 801271a:	2000      	movs	r0, #0
 801271c:	6023      	str	r3, [r4, #0]
 801271e:	b016      	add	sp, #88	; 0x58
 8012720:	bd70      	pop	{r4, r5, r6, pc}
	...

08012724 <__smakebuf_r>:
 8012724:	898b      	ldrh	r3, [r1, #12]
 8012726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012728:	079d      	lsls	r5, r3, #30
 801272a:	4606      	mov	r6, r0
 801272c:	460c      	mov	r4, r1
 801272e:	d507      	bpl.n	8012740 <__smakebuf_r+0x1c>
 8012730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012734:	6023      	str	r3, [r4, #0]
 8012736:	6123      	str	r3, [r4, #16]
 8012738:	2301      	movs	r3, #1
 801273a:	6163      	str	r3, [r4, #20]
 801273c:	b002      	add	sp, #8
 801273e:	bd70      	pop	{r4, r5, r6, pc}
 8012740:	466a      	mov	r2, sp
 8012742:	ab01      	add	r3, sp, #4
 8012744:	f7ff ffc8 	bl	80126d8 <__swhatbuf_r>
 8012748:	9900      	ldr	r1, [sp, #0]
 801274a:	4605      	mov	r5, r0
 801274c:	4630      	mov	r0, r6
 801274e:	f7ff f9e5 	bl	8011b1c <_malloc_r>
 8012752:	b948      	cbnz	r0, 8012768 <__smakebuf_r+0x44>
 8012754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012758:	059a      	lsls	r2, r3, #22
 801275a:	d4ef      	bmi.n	801273c <__smakebuf_r+0x18>
 801275c:	f023 0303 	bic.w	r3, r3, #3
 8012760:	f043 0302 	orr.w	r3, r3, #2
 8012764:	81a3      	strh	r3, [r4, #12]
 8012766:	e7e3      	b.n	8012730 <__smakebuf_r+0xc>
 8012768:	4b0d      	ldr	r3, [pc, #52]	; (80127a0 <__smakebuf_r+0x7c>)
 801276a:	62b3      	str	r3, [r6, #40]	; 0x28
 801276c:	89a3      	ldrh	r3, [r4, #12]
 801276e:	6020      	str	r0, [r4, #0]
 8012770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012774:	81a3      	strh	r3, [r4, #12]
 8012776:	9b00      	ldr	r3, [sp, #0]
 8012778:	6120      	str	r0, [r4, #16]
 801277a:	6163      	str	r3, [r4, #20]
 801277c:	9b01      	ldr	r3, [sp, #4]
 801277e:	b15b      	cbz	r3, 8012798 <__smakebuf_r+0x74>
 8012780:	4630      	mov	r0, r6
 8012782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012786:	f000 f91f 	bl	80129c8 <_isatty_r>
 801278a:	b128      	cbz	r0, 8012798 <__smakebuf_r+0x74>
 801278c:	89a3      	ldrh	r3, [r4, #12]
 801278e:	f023 0303 	bic.w	r3, r3, #3
 8012792:	f043 0301 	orr.w	r3, r3, #1
 8012796:	81a3      	strh	r3, [r4, #12]
 8012798:	89a0      	ldrh	r0, [r4, #12]
 801279a:	4305      	orrs	r5, r0
 801279c:	81a5      	strh	r5, [r4, #12]
 801279e:	e7cd      	b.n	801273c <__smakebuf_r+0x18>
 80127a0:	08012531 	.word	0x08012531

080127a4 <memmove>:
 80127a4:	4288      	cmp	r0, r1
 80127a6:	b510      	push	{r4, lr}
 80127a8:	eb01 0402 	add.w	r4, r1, r2
 80127ac:	d902      	bls.n	80127b4 <memmove+0x10>
 80127ae:	4284      	cmp	r4, r0
 80127b0:	4623      	mov	r3, r4
 80127b2:	d807      	bhi.n	80127c4 <memmove+0x20>
 80127b4:	1e43      	subs	r3, r0, #1
 80127b6:	42a1      	cmp	r1, r4
 80127b8:	d008      	beq.n	80127cc <memmove+0x28>
 80127ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80127be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80127c2:	e7f8      	b.n	80127b6 <memmove+0x12>
 80127c4:	4601      	mov	r1, r0
 80127c6:	4402      	add	r2, r0
 80127c8:	428a      	cmp	r2, r1
 80127ca:	d100      	bne.n	80127ce <memmove+0x2a>
 80127cc:	bd10      	pop	{r4, pc}
 80127ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80127d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80127d6:	e7f7      	b.n	80127c8 <memmove+0x24>

080127d8 <__malloc_lock>:
 80127d8:	4801      	ldr	r0, [pc, #4]	; (80127e0 <__malloc_lock+0x8>)
 80127da:	f7ff bf7b 	b.w	80126d4 <__retarget_lock_acquire_recursive>
 80127de:	bf00      	nop
 80127e0:	2000193c 	.word	0x2000193c

080127e4 <__malloc_unlock>:
 80127e4:	4801      	ldr	r0, [pc, #4]	; (80127ec <__malloc_unlock+0x8>)
 80127e6:	f7ff bf76 	b.w	80126d6 <__retarget_lock_release_recursive>
 80127ea:	bf00      	nop
 80127ec:	2000193c 	.word	0x2000193c

080127f0 <_realloc_r>:
 80127f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f4:	4680      	mov	r8, r0
 80127f6:	4614      	mov	r4, r2
 80127f8:	460e      	mov	r6, r1
 80127fa:	b921      	cbnz	r1, 8012806 <_realloc_r+0x16>
 80127fc:	4611      	mov	r1, r2
 80127fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012802:	f7ff b98b 	b.w	8011b1c <_malloc_r>
 8012806:	b92a      	cbnz	r2, 8012814 <_realloc_r+0x24>
 8012808:	f7ff f920 	bl	8011a4c <_free_r>
 801280c:	4625      	mov	r5, r4
 801280e:	4628      	mov	r0, r5
 8012810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012814:	f000 f8fa 	bl	8012a0c <_malloc_usable_size_r>
 8012818:	4284      	cmp	r4, r0
 801281a:	4607      	mov	r7, r0
 801281c:	d802      	bhi.n	8012824 <_realloc_r+0x34>
 801281e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012822:	d812      	bhi.n	801284a <_realloc_r+0x5a>
 8012824:	4621      	mov	r1, r4
 8012826:	4640      	mov	r0, r8
 8012828:	f7ff f978 	bl	8011b1c <_malloc_r>
 801282c:	4605      	mov	r5, r0
 801282e:	2800      	cmp	r0, #0
 8012830:	d0ed      	beq.n	801280e <_realloc_r+0x1e>
 8012832:	42bc      	cmp	r4, r7
 8012834:	4622      	mov	r2, r4
 8012836:	4631      	mov	r1, r6
 8012838:	bf28      	it	cs
 801283a:	463a      	movcs	r2, r7
 801283c:	f7fb feea 	bl	800e614 <memcpy>
 8012840:	4631      	mov	r1, r6
 8012842:	4640      	mov	r0, r8
 8012844:	f7ff f902 	bl	8011a4c <_free_r>
 8012848:	e7e1      	b.n	801280e <_realloc_r+0x1e>
 801284a:	4635      	mov	r5, r6
 801284c:	e7df      	b.n	801280e <_realloc_r+0x1e>

0801284e <_raise_r>:
 801284e:	291f      	cmp	r1, #31
 8012850:	b538      	push	{r3, r4, r5, lr}
 8012852:	4604      	mov	r4, r0
 8012854:	460d      	mov	r5, r1
 8012856:	d904      	bls.n	8012862 <_raise_r+0x14>
 8012858:	2316      	movs	r3, #22
 801285a:	6003      	str	r3, [r0, #0]
 801285c:	f04f 30ff 	mov.w	r0, #4294967295
 8012860:	bd38      	pop	{r3, r4, r5, pc}
 8012862:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012864:	b112      	cbz	r2, 801286c <_raise_r+0x1e>
 8012866:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801286a:	b94b      	cbnz	r3, 8012880 <_raise_r+0x32>
 801286c:	4620      	mov	r0, r4
 801286e:	f000 f831 	bl	80128d4 <_getpid_r>
 8012872:	462a      	mov	r2, r5
 8012874:	4601      	mov	r1, r0
 8012876:	4620      	mov	r0, r4
 8012878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801287c:	f000 b818 	b.w	80128b0 <_kill_r>
 8012880:	2b01      	cmp	r3, #1
 8012882:	d00a      	beq.n	801289a <_raise_r+0x4c>
 8012884:	1c59      	adds	r1, r3, #1
 8012886:	d103      	bne.n	8012890 <_raise_r+0x42>
 8012888:	2316      	movs	r3, #22
 801288a:	6003      	str	r3, [r0, #0]
 801288c:	2001      	movs	r0, #1
 801288e:	e7e7      	b.n	8012860 <_raise_r+0x12>
 8012890:	2400      	movs	r4, #0
 8012892:	4628      	mov	r0, r5
 8012894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012898:	4798      	blx	r3
 801289a:	2000      	movs	r0, #0
 801289c:	e7e0      	b.n	8012860 <_raise_r+0x12>
	...

080128a0 <raise>:
 80128a0:	4b02      	ldr	r3, [pc, #8]	; (80128ac <raise+0xc>)
 80128a2:	4601      	mov	r1, r0
 80128a4:	6818      	ldr	r0, [r3, #0]
 80128a6:	f7ff bfd2 	b.w	801284e <_raise_r>
 80128aa:	bf00      	nop
 80128ac:	200008bc 	.word	0x200008bc

080128b0 <_kill_r>:
 80128b0:	b538      	push	{r3, r4, r5, lr}
 80128b2:	2300      	movs	r3, #0
 80128b4:	4d06      	ldr	r5, [pc, #24]	; (80128d0 <_kill_r+0x20>)
 80128b6:	4604      	mov	r4, r0
 80128b8:	4608      	mov	r0, r1
 80128ba:	4611      	mov	r1, r2
 80128bc:	602b      	str	r3, [r5, #0]
 80128be:	f7f1 fce4 	bl	800428a <_kill>
 80128c2:	1c43      	adds	r3, r0, #1
 80128c4:	d102      	bne.n	80128cc <_kill_r+0x1c>
 80128c6:	682b      	ldr	r3, [r5, #0]
 80128c8:	b103      	cbz	r3, 80128cc <_kill_r+0x1c>
 80128ca:	6023      	str	r3, [r4, #0]
 80128cc:	bd38      	pop	{r3, r4, r5, pc}
 80128ce:	bf00      	nop
 80128d0:	20001940 	.word	0x20001940

080128d4 <_getpid_r>:
 80128d4:	f7f1 bcd2 	b.w	800427c <_getpid>

080128d8 <__sread>:
 80128d8:	b510      	push	{r4, lr}
 80128da:	460c      	mov	r4, r1
 80128dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128e0:	f000 f89c 	bl	8012a1c <_read_r>
 80128e4:	2800      	cmp	r0, #0
 80128e6:	bfab      	itete	ge
 80128e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80128ea:	89a3      	ldrhlt	r3, [r4, #12]
 80128ec:	181b      	addge	r3, r3, r0
 80128ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80128f2:	bfac      	ite	ge
 80128f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80128f6:	81a3      	strhlt	r3, [r4, #12]
 80128f8:	bd10      	pop	{r4, pc}

080128fa <__swrite>:
 80128fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128fe:	461f      	mov	r7, r3
 8012900:	898b      	ldrh	r3, [r1, #12]
 8012902:	4605      	mov	r5, r0
 8012904:	05db      	lsls	r3, r3, #23
 8012906:	460c      	mov	r4, r1
 8012908:	4616      	mov	r6, r2
 801290a:	d505      	bpl.n	8012918 <__swrite+0x1e>
 801290c:	2302      	movs	r3, #2
 801290e:	2200      	movs	r2, #0
 8012910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012914:	f000 f868 	bl	80129e8 <_lseek_r>
 8012918:	89a3      	ldrh	r3, [r4, #12]
 801291a:	4632      	mov	r2, r6
 801291c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012920:	81a3      	strh	r3, [r4, #12]
 8012922:	4628      	mov	r0, r5
 8012924:	463b      	mov	r3, r7
 8012926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801292a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801292e:	f000 b817 	b.w	8012960 <_write_r>

08012932 <__sseek>:
 8012932:	b510      	push	{r4, lr}
 8012934:	460c      	mov	r4, r1
 8012936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801293a:	f000 f855 	bl	80129e8 <_lseek_r>
 801293e:	1c43      	adds	r3, r0, #1
 8012940:	89a3      	ldrh	r3, [r4, #12]
 8012942:	bf15      	itete	ne
 8012944:	6560      	strne	r0, [r4, #84]	; 0x54
 8012946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801294a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801294e:	81a3      	strheq	r3, [r4, #12]
 8012950:	bf18      	it	ne
 8012952:	81a3      	strhne	r3, [r4, #12]
 8012954:	bd10      	pop	{r4, pc}

08012956 <__sclose>:
 8012956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801295a:	f000 b813 	b.w	8012984 <_close_r>
	...

08012960 <_write_r>:
 8012960:	b538      	push	{r3, r4, r5, lr}
 8012962:	4604      	mov	r4, r0
 8012964:	4608      	mov	r0, r1
 8012966:	4611      	mov	r1, r2
 8012968:	2200      	movs	r2, #0
 801296a:	4d05      	ldr	r5, [pc, #20]	; (8012980 <_write_r+0x20>)
 801296c:	602a      	str	r2, [r5, #0]
 801296e:	461a      	mov	r2, r3
 8012970:	f7f1 fcc2 	bl	80042f8 <_write>
 8012974:	1c43      	adds	r3, r0, #1
 8012976:	d102      	bne.n	801297e <_write_r+0x1e>
 8012978:	682b      	ldr	r3, [r5, #0]
 801297a:	b103      	cbz	r3, 801297e <_write_r+0x1e>
 801297c:	6023      	str	r3, [r4, #0]
 801297e:	bd38      	pop	{r3, r4, r5, pc}
 8012980:	20001940 	.word	0x20001940

08012984 <_close_r>:
 8012984:	b538      	push	{r3, r4, r5, lr}
 8012986:	2300      	movs	r3, #0
 8012988:	4d05      	ldr	r5, [pc, #20]	; (80129a0 <_close_r+0x1c>)
 801298a:	4604      	mov	r4, r0
 801298c:	4608      	mov	r0, r1
 801298e:	602b      	str	r3, [r5, #0]
 8012990:	f7f1 fcce 	bl	8004330 <_close>
 8012994:	1c43      	adds	r3, r0, #1
 8012996:	d102      	bne.n	801299e <_close_r+0x1a>
 8012998:	682b      	ldr	r3, [r5, #0]
 801299a:	b103      	cbz	r3, 801299e <_close_r+0x1a>
 801299c:	6023      	str	r3, [r4, #0]
 801299e:	bd38      	pop	{r3, r4, r5, pc}
 80129a0:	20001940 	.word	0x20001940

080129a4 <_fstat_r>:
 80129a4:	b538      	push	{r3, r4, r5, lr}
 80129a6:	2300      	movs	r3, #0
 80129a8:	4d06      	ldr	r5, [pc, #24]	; (80129c4 <_fstat_r+0x20>)
 80129aa:	4604      	mov	r4, r0
 80129ac:	4608      	mov	r0, r1
 80129ae:	4611      	mov	r1, r2
 80129b0:	602b      	str	r3, [r5, #0]
 80129b2:	f7f1 fcc8 	bl	8004346 <_fstat>
 80129b6:	1c43      	adds	r3, r0, #1
 80129b8:	d102      	bne.n	80129c0 <_fstat_r+0x1c>
 80129ba:	682b      	ldr	r3, [r5, #0]
 80129bc:	b103      	cbz	r3, 80129c0 <_fstat_r+0x1c>
 80129be:	6023      	str	r3, [r4, #0]
 80129c0:	bd38      	pop	{r3, r4, r5, pc}
 80129c2:	bf00      	nop
 80129c4:	20001940 	.word	0x20001940

080129c8 <_isatty_r>:
 80129c8:	b538      	push	{r3, r4, r5, lr}
 80129ca:	2300      	movs	r3, #0
 80129cc:	4d05      	ldr	r5, [pc, #20]	; (80129e4 <_isatty_r+0x1c>)
 80129ce:	4604      	mov	r4, r0
 80129d0:	4608      	mov	r0, r1
 80129d2:	602b      	str	r3, [r5, #0]
 80129d4:	f7f1 fcc6 	bl	8004364 <_isatty>
 80129d8:	1c43      	adds	r3, r0, #1
 80129da:	d102      	bne.n	80129e2 <_isatty_r+0x1a>
 80129dc:	682b      	ldr	r3, [r5, #0]
 80129de:	b103      	cbz	r3, 80129e2 <_isatty_r+0x1a>
 80129e0:	6023      	str	r3, [r4, #0]
 80129e2:	bd38      	pop	{r3, r4, r5, pc}
 80129e4:	20001940 	.word	0x20001940

080129e8 <_lseek_r>:
 80129e8:	b538      	push	{r3, r4, r5, lr}
 80129ea:	4604      	mov	r4, r0
 80129ec:	4608      	mov	r0, r1
 80129ee:	4611      	mov	r1, r2
 80129f0:	2200      	movs	r2, #0
 80129f2:	4d05      	ldr	r5, [pc, #20]	; (8012a08 <_lseek_r+0x20>)
 80129f4:	602a      	str	r2, [r5, #0]
 80129f6:	461a      	mov	r2, r3
 80129f8:	f7f1 fcbe 	bl	8004378 <_lseek>
 80129fc:	1c43      	adds	r3, r0, #1
 80129fe:	d102      	bne.n	8012a06 <_lseek_r+0x1e>
 8012a00:	682b      	ldr	r3, [r5, #0]
 8012a02:	b103      	cbz	r3, 8012a06 <_lseek_r+0x1e>
 8012a04:	6023      	str	r3, [r4, #0]
 8012a06:	bd38      	pop	{r3, r4, r5, pc}
 8012a08:	20001940 	.word	0x20001940

08012a0c <_malloc_usable_size_r>:
 8012a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a10:	1f18      	subs	r0, r3, #4
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	bfbc      	itt	lt
 8012a16:	580b      	ldrlt	r3, [r1, r0]
 8012a18:	18c0      	addlt	r0, r0, r3
 8012a1a:	4770      	bx	lr

08012a1c <_read_r>:
 8012a1c:	b538      	push	{r3, r4, r5, lr}
 8012a1e:	4604      	mov	r4, r0
 8012a20:	4608      	mov	r0, r1
 8012a22:	4611      	mov	r1, r2
 8012a24:	2200      	movs	r2, #0
 8012a26:	4d05      	ldr	r5, [pc, #20]	; (8012a3c <_read_r+0x20>)
 8012a28:	602a      	str	r2, [r5, #0]
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	f7f1 fc47 	bl	80042be <_read>
 8012a30:	1c43      	adds	r3, r0, #1
 8012a32:	d102      	bne.n	8012a3a <_read_r+0x1e>
 8012a34:	682b      	ldr	r3, [r5, #0]
 8012a36:	b103      	cbz	r3, 8012a3a <_read_r+0x1e>
 8012a38:	6023      	str	r3, [r4, #0]
 8012a3a:	bd38      	pop	{r3, r4, r5, pc}
 8012a3c:	20001940 	.word	0x20001940

08012a40 <_init>:
 8012a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a42:	bf00      	nop
 8012a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a46:	bc08      	pop	{r3}
 8012a48:	469e      	mov	lr, r3
 8012a4a:	4770      	bx	lr

08012a4c <_fini>:
 8012a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4e:	bf00      	nop
 8012a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a52:	bc08      	pop	{r3}
 8012a54:	469e      	mov	lr, r3
 8012a56:	4770      	bx	lr
