
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d958  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800da98  0800da98  0001da98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e028  0800e028  00020618  2**0
                  CONTENTS
  4 .ARM          00000008  0800e028  0800e028  0001e028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e030  0800e030  00020618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e030  0800e030  0001e030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e034  0800e034  0001e034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000618  20000000  0800e038  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb8  20000618  0800e650  00020618  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200012d0  0800e650  000212d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020618  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6cc  00000000  00000000  00020641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045bd  00000000  00000000  0003fd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  000442d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00045268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188a1  00000000  00000000  00046028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157da  00000000  00000000  0005e8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d306  00000000  00000000  000740a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f13a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fac  00000000  00000000  000f13fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000618 	.word	0x20000618
 800015c:	00000000 	.word	0x00000000
 8000160:	0800da80 	.word	0x0800da80

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000061c 	.word	0x2000061c
 800017c:	0800da80 	.word	0x0800da80

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_d2f>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a98:	bf24      	itt	cs
 8000a9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa2:	d90d      	bls.n	8000ac0 <__aeabi_d2f+0x30>
 8000aa4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab8:	bf08      	it	eq
 8000aba:	f020 0001 	biceq.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac4:	d121      	bne.n	8000b0a <__aeabi_d2f+0x7a>
 8000ac6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aca:	bfbc      	itt	lt
 8000acc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	4770      	bxlt	lr
 8000ad2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ada:	f1c2 0218 	rsb	r2, r2, #24
 8000ade:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aea:	bf18      	it	ne
 8000aec:	f040 0001 	orrne.w	r0, r0, #1
 8000af0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000afc:	ea40 000c 	orr.w	r0, r0, ip
 8000b00:	fa23 f302 	lsr.w	r3, r3, r2
 8000b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b08:	e7cc      	b.n	8000aa4 <__aeabi_d2f+0x14>
 8000b0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0e:	d107      	bne.n	8000b20 <__aeabi_d2f+0x90>
 8000b10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b14:	bf1e      	ittt	ne
 8000b16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1e:	4770      	bxne	lr
 8000b20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__gesf2>:
 8000b30:	f04f 3cff 	mov.w	ip, #4294967295
 8000b34:	e006      	b.n	8000b44 <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__lesf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	e002      	b.n	8000b44 <__cmpsf2+0x4>
 8000b3e:	bf00      	nop

08000b40 <__cmpsf2>:
 8000b40:	f04f 0c01 	mov.w	ip, #1
 8000b44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b54:	bf18      	it	ne
 8000b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5a:	d011      	beq.n	8000b80 <__cmpsf2+0x40>
 8000b5c:	b001      	add	sp, #4
 8000b5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b62:	bf18      	it	ne
 8000b64:	ea90 0f01 	teqne	r0, r1
 8000b68:	bf58      	it	pl
 8000b6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b6e:	bf88      	it	hi
 8000b70:	17c8      	asrhi	r0, r1, #31
 8000b72:	bf38      	it	cc
 8000b74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b78:	bf18      	it	ne
 8000b7a:	f040 0001 	orrne.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b84:	d102      	bne.n	8000b8c <__cmpsf2+0x4c>
 8000b86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b8a:	d105      	bne.n	8000b98 <__cmpsf2+0x58>
 8000b8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b90:	d1e4      	bne.n	8000b5c <__cmpsf2+0x1c>
 8000b92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b96:	d0e1      	beq.n	8000b5c <__cmpsf2+0x1c>
 8000b98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_cfrcmple>:
 8000ba0:	4684      	mov	ip, r0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	4661      	mov	r1, ip
 8000ba6:	e7ff      	b.n	8000ba8 <__aeabi_cfcmpeq>

08000ba8 <__aeabi_cfcmpeq>:
 8000ba8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000baa:	f7ff ffc9 	bl	8000b40 <__cmpsf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb8 <__aeabi_fcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cfcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_fcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cfcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_fcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cfcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_fcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffd2 	bl	8000ba0 <__aeabi_cfrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_fcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc8 	bl	8000ba0 <__aeabi_cfrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b9a6 	b.w	8000f80 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f83e 	bl	8000cbc <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2lz>:
 8000c4c:	b538      	push	{r3, r4, r5, lr}
 8000c4e:	460c      	mov	r4, r1
 8000c50:	4605      	mov	r5, r0
 8000c52:	4621      	mov	r1, r4
 8000c54:	4628      	mov	r0, r5
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f7ff fed1 	bl	8000a00 <__aeabi_dcmplt>
 8000c5e:	b928      	cbnz	r0, 8000c6c <__aeabi_d2lz+0x20>
 8000c60:	4628      	mov	r0, r5
 8000c62:	4621      	mov	r1, r4
 8000c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c68:	f000 b80a 	b.w	8000c80 <__aeabi_d2ulz>
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c72:	f000 f805 	bl	8000c80 <__aeabi_d2ulz>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	bd38      	pop	{r3, r4, r5, pc}
 8000c7e:	bf00      	nop

08000c80 <__aeabi_d2ulz>:
 8000c80:	b5d0      	push	{r4, r6, r7, lr}
 8000c82:	2200      	movs	r2, #0
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <__aeabi_d2ulz+0x34>)
 8000c86:	4606      	mov	r6, r0
 8000c88:	460f      	mov	r7, r1
 8000c8a:	f7ff fc47 	bl	800051c <__aeabi_dmul>
 8000c8e:	f7ff fedf 	bl	8000a50 <__aeabi_d2uiz>
 8000c92:	4604      	mov	r4, r0
 8000c94:	f7ff fbc8 	bl	8000428 <__aeabi_ui2d>
 8000c98:	2200      	movs	r2, #0
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <__aeabi_d2ulz+0x38>)
 8000c9c:	f7ff fc3e 	bl	800051c <__aeabi_dmul>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	4639      	mov	r1, r7
 8000ca8:	f7ff fa80 	bl	80001ac <__aeabi_dsub>
 8000cac:	f7ff fed0 	bl	8000a50 <__aeabi_d2uiz>
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb4:	3df00000 	.word	0x3df00000
 8000cb8:	41f00000 	.word	0x41f00000

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9e08      	ldr	r6, [sp, #32]
 8000cc2:	460d      	mov	r5, r1
 8000cc4:	4604      	mov	r4, r0
 8000cc6:	468e      	mov	lr, r1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f040 8083 	bne.w	8000dd4 <__udivmoddi4+0x118>
 8000cce:	428a      	cmp	r2, r1
 8000cd0:	4617      	mov	r7, r2
 8000cd2:	d947      	bls.n	8000d64 <__udivmoddi4+0xa8>
 8000cd4:	fab2 f382 	clz	r3, r2
 8000cd8:	b14b      	cbz	r3, 8000cee <__udivmoddi4+0x32>
 8000cda:	f1c3 0120 	rsb	r1, r3, #32
 8000cde:	fa05 fe03 	lsl.w	lr, r5, r3
 8000ce2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ce6:	409f      	lsls	r7, r3
 8000ce8:	ea41 0e0e 	orr.w	lr, r1, lr
 8000cec:	409c      	lsls	r4, r3
 8000cee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cf2:	fbbe fcf8 	udiv	ip, lr, r8
 8000cf6:	fa1f f987 	uxth.w	r9, r7
 8000cfa:	fb08 e21c 	mls	r2, r8, ip, lr
 8000cfe:	fb0c f009 	mul.w	r0, ip, r9
 8000d02:	0c21      	lsrs	r1, r4, #16
 8000d04:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	d90a      	bls.n	8000d22 <__udivmoddi4+0x66>
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000d12:	f080 8118 	bcs.w	8000f46 <__udivmoddi4+0x28a>
 8000d16:	4290      	cmp	r0, r2
 8000d18:	f240 8115 	bls.w	8000f46 <__udivmoddi4+0x28a>
 8000d1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d20:	443a      	add	r2, r7
 8000d22:	1a12      	subs	r2, r2, r0
 8000d24:	fbb2 f0f8 	udiv	r0, r2, r8
 8000d28:	fb08 2210 	mls	r2, r8, r0, r2
 8000d2c:	fb00 f109 	mul.w	r1, r0, r9
 8000d30:	b2a4      	uxth	r4, r4
 8000d32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d36:	42a1      	cmp	r1, r4
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0x92>
 8000d3a:	193c      	adds	r4, r7, r4
 8000d3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d40:	f080 8103 	bcs.w	8000f4a <__udivmoddi4+0x28e>
 8000d44:	42a1      	cmp	r1, r4
 8000d46:	f240 8100 	bls.w	8000f4a <__udivmoddi4+0x28e>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	1a64      	subs	r4, r4, r1
 8000d50:	2100      	movs	r1, #0
 8000d52:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d56:	b11e      	cbz	r6, 8000d60 <__udivmoddi4+0xa4>
 8000d58:	2200      	movs	r2, #0
 8000d5a:	40dc      	lsrs	r4, r3
 8000d5c:	e9c6 4200 	strd	r4, r2, [r6]
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	b902      	cbnz	r2, 8000d68 <__udivmoddi4+0xac>
 8000d66:	deff      	udf	#255	; 0xff
 8000d68:	fab2 f382 	clz	r3, r2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14f      	bne.n	8000e10 <__udivmoddi4+0x154>
 8000d70:	1a8d      	subs	r5, r1, r2
 8000d72:	2101      	movs	r1, #1
 8000d74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d78:	fa1f f882 	uxth.w	r8, r2
 8000d7c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000d80:	fb0e 551c 	mls	r5, lr, ip, r5
 8000d84:	fb08 f00c 	mul.w	r0, r8, ip
 8000d88:	0c22      	lsrs	r2, r4, #16
 8000d8a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000d8e:	42a8      	cmp	r0, r5
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0xe6>
 8000d92:	197d      	adds	r5, r7, r5
 8000d94:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0xe4>
 8000d9a:	42a8      	cmp	r0, r5
 8000d9c:	f200 80e9 	bhi.w	8000f72 <__udivmoddi4+0x2b6>
 8000da0:	4694      	mov	ip, r2
 8000da2:	1a2d      	subs	r5, r5, r0
 8000da4:	fbb5 f0fe 	udiv	r0, r5, lr
 8000da8:	fb0e 5510 	mls	r5, lr, r0, r5
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	b2a4      	uxth	r4, r4
 8000db2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db6:	45a0      	cmp	r8, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x10e>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc0:	d202      	bcs.n	8000dc8 <__udivmoddi4+0x10c>
 8000dc2:	45a0      	cmp	r8, r4
 8000dc4:	f200 80d9 	bhi.w	8000f7a <__udivmoddi4+0x2be>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	eba4 0408 	sub.w	r4, r4, r8
 8000dce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dd2:	e7c0      	b.n	8000d56 <__udivmoddi4+0x9a>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x12e>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	f000 80b1 	beq.w	8000f40 <__udivmoddi4+0x284>
 8000dde:	2100      	movs	r1, #0
 8000de0:	e9c6 0500 	strd	r0, r5, [r6]
 8000de4:	4608      	mov	r0, r1
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d14b      	bne.n	8000e8a <__udivmoddi4+0x1ce>
 8000df2:	42ab      	cmp	r3, r5
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0x140>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80b9 	bhi.w	8000f6e <__udivmoddi4+0x2b2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb65 0303 	sbc.w	r3, r5, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	d0aa      	beq.n	8000d60 <__udivmoddi4+0xa4>
 8000e0a:	e9c6 4e00 	strd	r4, lr, [r6]
 8000e0e:	e7a7      	b.n	8000d60 <__udivmoddi4+0xa4>
 8000e10:	409f      	lsls	r7, r3
 8000e12:	f1c3 0220 	rsb	r2, r3, #32
 8000e16:	40d1      	lsrs	r1, r2
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fa1f f887 	uxth.w	r8, r7
 8000e24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e28:	fa24 f202 	lsr.w	r2, r4, r2
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	fb00 fc08 	mul.w	ip, r0, r8
 8000e32:	432a      	orrs	r2, r5
 8000e34:	0c15      	lsrs	r5, r2, #16
 8000e36:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000e3a:	45ac      	cmp	ip, r5
 8000e3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x19a>
 8000e42:	197d      	adds	r5, r7, r5
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	f080 808f 	bcs.w	8000f6a <__udivmoddi4+0x2ae>
 8000e4c:	45ac      	cmp	ip, r5
 8000e4e:	f240 808c 	bls.w	8000f6a <__udivmoddi4+0x2ae>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	eba5 050c 	sub.w	r5, r5, ip
 8000e5a:	fbb5 f1fe 	udiv	r1, r5, lr
 8000e5e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000e62:	fb01 f908 	mul.w	r9, r1, r8
 8000e66:	b295      	uxth	r5, r2
 8000e68:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e6c:	45a9      	cmp	r9, r5
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x1c4>
 8000e70:	197d      	adds	r5, r7, r5
 8000e72:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e76:	d274      	bcs.n	8000f62 <__udivmoddi4+0x2a6>
 8000e78:	45a9      	cmp	r9, r5
 8000e7a:	d972      	bls.n	8000f62 <__udivmoddi4+0x2a6>
 8000e7c:	3902      	subs	r1, #2
 8000e7e:	443d      	add	r5, r7
 8000e80:	eba5 0509 	sub.w	r5, r5, r9
 8000e84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e88:	e778      	b.n	8000d7c <__udivmoddi4+0xc0>
 8000e8a:	f1c1 0720 	rsb	r7, r1, #32
 8000e8e:	408b      	lsls	r3, r1
 8000e90:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e94:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e98:	fa25 f407 	lsr.w	r4, r5, r7
 8000e9c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ea0:	fbb4 f9fe 	udiv	r9, r4, lr
 8000ea4:	fa1f f88c 	uxth.w	r8, ip
 8000ea8:	fb0e 4419 	mls	r4, lr, r9, r4
 8000eac:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb0:	fb09 fa08 	mul.w	sl, r9, r8
 8000eb4:	408d      	lsls	r5, r1
 8000eb6:	431d      	orrs	r5, r3
 8000eb8:	0c2b      	lsrs	r3, r5, #16
 8000eba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ebe:	45a2      	cmp	sl, r4
 8000ec0:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec4:	fa00 f301 	lsl.w	r3, r0, r1
 8000ec8:	d909      	bls.n	8000ede <__udivmoddi4+0x222>
 8000eca:	eb1c 0404 	adds.w	r4, ip, r4
 8000ece:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ed2:	d248      	bcs.n	8000f66 <__udivmoddi4+0x2aa>
 8000ed4:	45a2      	cmp	sl, r4
 8000ed6:	d946      	bls.n	8000f66 <__udivmoddi4+0x2aa>
 8000ed8:	f1a9 0902 	sub.w	r9, r9, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	eba4 040a 	sub.w	r4, r4, sl
 8000ee2:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ee6:	fb0e 4410 	mls	r4, lr, r0, r4
 8000eea:	fb00 fa08 	mul.w	sl, r0, r8
 8000eee:	b2ad      	uxth	r5, r5
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	45a2      	cmp	sl, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x24e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f00:	d22d      	bcs.n	8000f5e <__udivmoddi4+0x2a2>
 8000f02:	45a2      	cmp	sl, r4
 8000f04:	d92b      	bls.n	8000f5e <__udivmoddi4+0x2a2>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4464      	add	r4, ip
 8000f0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f12:	eba4 040a 	sub.w	r4, r4, sl
 8000f16:	454c      	cmp	r4, r9
 8000f18:	46c6      	mov	lr, r8
 8000f1a:	464d      	mov	r5, r9
 8000f1c:	d319      	bcc.n	8000f52 <__udivmoddi4+0x296>
 8000f1e:	d016      	beq.n	8000f4e <__udivmoddi4+0x292>
 8000f20:	b15e      	cbz	r6, 8000f3a <__udivmoddi4+0x27e>
 8000f22:	ebb3 020e 	subs.w	r2, r3, lr
 8000f26:	eb64 0405 	sbc.w	r4, r4, r5
 8000f2a:	fa04 f707 	lsl.w	r7, r4, r7
 8000f2e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f32:	431f      	orrs	r7, r3
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f40:	4631      	mov	r1, r6
 8000f42:	4630      	mov	r0, r6
 8000f44:	e70c      	b.n	8000d60 <__udivmoddi4+0xa4>
 8000f46:	468c      	mov	ip, r1
 8000f48:	e6eb      	b.n	8000d22 <__udivmoddi4+0x66>
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	e6ff      	b.n	8000d4e <__udivmoddi4+0x92>
 8000f4e:	4543      	cmp	r3, r8
 8000f50:	d2e6      	bcs.n	8000f20 <__udivmoddi4+0x264>
 8000f52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f56:	eb69 050c 	sbc.w	r5, r9, ip
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7e0      	b.n	8000f20 <__udivmoddi4+0x264>
 8000f5e:	4628      	mov	r0, r5
 8000f60:	e7d3      	b.n	8000f0a <__udivmoddi4+0x24e>
 8000f62:	4611      	mov	r1, r2
 8000f64:	e78c      	b.n	8000e80 <__udivmoddi4+0x1c4>
 8000f66:	4681      	mov	r9, r0
 8000f68:	e7b9      	b.n	8000ede <__udivmoddi4+0x222>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e773      	b.n	8000e56 <__udivmoddi4+0x19a>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e749      	b.n	8000e06 <__udivmoddi4+0x14a>
 8000f72:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f76:	443d      	add	r5, r7
 8000f78:	e713      	b.n	8000da2 <__udivmoddi4+0xe6>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	e724      	b.n	8000dca <__udivmoddi4+0x10e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	889b      	ldrh	r3, [r3, #4]
 8000f94:	461a      	mov	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	88db      	ldrh	r3, [r3, #6]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
	if (total < 0)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	da05      	bge.n	8000fb0 <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	891b      	ldrh	r3, [r3, #8]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4413      	add	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]

	if (total == 0)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d102      	bne.n	8000fbc <__circ_gbuf_pop+0x38>
		return -1; // Empty
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	e031      	b.n	8001020 <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	88db      	ldrh	r3, [r3, #6]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	8912      	ldrh	r2, [r2, #8]
 8000fc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8000fcc:	fb02 f200 	mul.w	r2, r2, r0
 8000fd0:	1a9b      	subs	r3, r3, r2
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	461a      	mov	r2, r3
			* circ_buf->element_size);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	895b      	ldrh	r3, [r3, #10]
 8000fda:	fb03 f302 	mul.w	r3, r3, r2
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 8000fde:	440b      	add	r3, r1
 8000fe0:	613b      	str	r3, [r7, #16]

	if (elem)
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d006      	beq.n	8000ff6 <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	895b      	ldrh	r3, [r3, #10]
 8000fec:	461a      	mov	r2, r3
 8000fee:	6939      	ldr	r1, [r7, #16]
 8000ff0:	68b8      	ldr	r0, [r7, #8]
 8000ff2:	f009 fe77 	bl	800ace4 <memcpy>

	if (!read_only) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d110      	bne.n	800101e <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	88db      	ldrh	r3, [r3, #6]
 8001000:	3301      	adds	r3, #1
 8001002:	b29a      	uxth	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	88db      	ldrh	r3, [r3, #6]
 800100c:	461a      	mov	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	891b      	ldrh	r3, [r3, #8]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	429a      	cmp	r2, r3
 8001016:	db02      	blt.n	800101e <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	461a      	mov	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	88db      	ldrh	r3, [r3, #6]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	da05      	bge.n	8001052 <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	891b      	ldrh	r3, [r3, #8]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	891b      	ldrh	r3, [r3, #8]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4293      	cmp	r3, r2
 800105c:	db02      	blt.n	8001064 <__circ_gbuf_push+0x3c>
		return -1; // Full
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	e02b      	b.n	80010bc <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6819      	ldr	r1, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	889b      	ldrh	r3, [r3, #4]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	8912      	ldrh	r2, [r2, #8]
 8001070:	fbb3 f0f2 	udiv	r0, r3, r2
 8001074:	fb02 f200 	mul.w	r2, r2, r0
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	461a      	mov	r2, r3
			* circ_buf->element_size );
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	895b      	ldrh	r3, [r3, #10]
 8001082:	fb03 f302 	mul.w	r3, r3, r2
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8001086:	440b      	add	r3, r1
 8001088:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	895b      	ldrh	r3, [r3, #10]
 800108e:	461a      	mov	r2, r3
 8001090:	6839      	ldr	r1, [r7, #0]
 8001092:	68b8      	ldr	r0, [r7, #8]
 8001094:	f009 fe26 	bl	800ace4 <memcpy>
	circ_buf->push_count++;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	889b      	ldrh	r3, [r3, #4]
 800109c:	3301      	adds	r3, #1
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	889b      	ldrh	r3, [r3, #4]
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	891b      	ldrh	r3, [r3, #8]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	429a      	cmp	r2, r3
 80010b2:	db02      	blt.n	80010ba <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	809a      	strh	r2, [r3, #4]
	return 0;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <DAC_Write>:
#include "dac_and_dds_func.h"

//==============================================================================================
void DAC_Write(uint32_t value)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <DAC_Write+0x64>)
 80010ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010d2:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80010dc:	f023 030f 	bic.w	r3, r3, #15
 80010e0:	4a11      	ldr	r2, [pc, #68]	; (8001128 <DAC_Write+0x64>)
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <DAC_Write+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <DAC_Write+0x64>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	0c1b      	lsrs	r3, r3, #16
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <DAC_Write+0x68>)
 80010f4:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <DAC_Write+0x64>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <DAC_Write+0x68>)
 80010fe:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2110      	movs	r1, #16
 8001104:	480a      	ldr	r0, [pc, #40]	; (8001130 <DAC_Write+0x6c>)
 8001106:	f002 fae6 	bl	80036d6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 800110a:	2302      	movs	r3, #2
 800110c:	2202      	movs	r2, #2
 800110e:	4907      	ldr	r1, [pc, #28]	; (800112c <DAC_Write+0x68>)
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <DAC_Write+0x70>)
 8001112:	f004 fd4b 	bl	8005bac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2110      	movs	r1, #16
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <DAC_Write+0x6c>)
 800111c:	f002 fadb 	bl	80036d6 <HAL_GPIO_WritePin>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000878 	.word	0x20000878
 800112c:	20000874 	.word	0x20000874
 8001130:	40020000 	.word	0x40020000
 8001134:	20000944 	.word	0x20000944

08001138 <DAC_Write_FAST>:

//==============================================================================================
void DAC_Write_FAST(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2110      	movs	r1, #16
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <DAC_Write_FAST+0x28>)
 8001142:	f002 fac8 	bl	80036d6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001146:	2302      	movs	r3, #2
 8001148:	2202      	movs	r2, #2
 800114a:	4906      	ldr	r1, [pc, #24]	; (8001164 <DAC_Write_FAST+0x2c>)
 800114c:	4806      	ldr	r0, [pc, #24]	; (8001168 <DAC_Write_FAST+0x30>)
 800114e:	f004 fd2d 	bl	8005bac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2110      	movs	r1, #16
 8001156:	4802      	ldr	r0, [pc, #8]	; (8001160 <DAC_Write_FAST+0x28>)
 8001158:	f002 fabd 	bl	80036d6 <HAL_GPIO_WritePin>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020000 	.word	0x40020000
 8001164:	20000874 	.word	0x20000874
 8001168:	20000944 	.word	0x20000944

0800116c <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

	DAC_tx_buffer=0x02000000; // Write CONFIG1
 8001170:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <DAC_SendInit+0xfc>)
 8001172:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001176:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <DAC_SendInit+0x100>)
 800117a:	7a1b      	ldrb	r3, [r3, #8]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	f003 0210 	and.w	r2, r3, #16
 8001182:	4b39      	ldr	r3, [pc, #228]	; (8001268 <DAC_SendInit+0xfc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a37      	ldr	r2, [pc, #220]	; (8001268 <DAC_SendInit+0xfc>)
 800118a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x0F)<<6;
 800118c:	4b37      	ldr	r3, [pc, #220]	; (800126c <DAC_SendInit+0x100>)
 800118e:	79db      	ldrb	r3, [r3, #7]
 8001190:	019b      	lsls	r3, r3, #6
 8001192:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
 8001196:	4b34      	ldr	r3, [pc, #208]	; (8001268 <DAC_SendInit+0xfc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a32      	ldr	r2, [pc, #200]	; (8001268 <DAC_SendInit+0xfc>)
 800119e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <DAC_SendInit+0x100>)
 80011a2:	799b      	ldrb	r3, [r3, #6]
 80011a4:	029b      	lsls	r3, r3, #10
 80011a6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <DAC_SendInit+0xfc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <DAC_SendInit+0xfc>)
 80011b2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <DAC_SendInit+0x100>)
 80011b6:	795b      	ldrb	r3, [r3, #5]
 80011b8:	02db      	lsls	r3, r3, #11
 80011ba:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <DAC_SendInit+0xfc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a28      	ldr	r2, [pc, #160]	; (8001268 <DAC_SendInit+0xfc>)
 80011c6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <DAC_SendInit+0x100>)
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	031b      	lsls	r3, r3, #12
 80011ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <DAC_SendInit+0xfc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a23      	ldr	r2, [pc, #140]	; (8001268 <DAC_SendInit+0xfc>)
 80011da:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <DAC_SendInit+0x100>)
 80011de:	78db      	ldrb	r3, [r3, #3]
 80011e0:	035b      	lsls	r3, r3, #13
 80011e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <DAC_SendInit+0xfc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <DAC_SendInit+0xfc>)
 80011ee:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <DAC_SendInit+0x100>)
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	039b      	lsls	r3, r3, #14
 80011f6:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <DAC_SendInit+0xfc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a19      	ldr	r2, [pc, #100]	; (8001268 <DAC_SendInit+0xfc>)
 8001202:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <DAC_SendInit+0x100>)
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	049b      	lsls	r3, r3, #18
 800120a:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <DAC_SendInit+0xfc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <DAC_SendInit+0xfc>)
 8001216:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <DAC_SendInit+0x100>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	05db      	lsls	r3, r3, #23
 800121e:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <DAC_SendInit+0xfc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <DAC_SendInit+0xfc>)
 800122a:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <DAC_SendInit+0xfc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	0c1b      	lsrs	r3, r3, #16
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <DAC_SendInit+0x104>)
 8001236:	801a      	strh	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <DAC_SendInit+0xfc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	b29a      	uxth	r2, r3
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <DAC_SendInit+0x104>)
 8001240:	805a      	strh	r2, [r3, #2]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2110      	movs	r1, #16
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <DAC_SendInit+0x108>)
 8001248:	f002 fa45 	bl	80036d6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 800124c:	2305      	movs	r3, #5
 800124e:	2202      	movs	r2, #2
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <DAC_SendInit+0x104>)
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <DAC_SendInit+0x10c>)
 8001254:	f004 fcaa 	bl	8005bac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2110      	movs	r1, #16
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <DAC_SendInit+0x108>)
 800125e:	f002 fa3a 	bl	80036d6 <HAL_GPIO_WritePin>

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000878 	.word	0x20000878
 800126c:	20000868 	.word	0x20000868
 8001270:	20000874 	.word	0x20000874
 8001274:	40020000 	.word	0x40020000
 8001278:	20000944 	.word	0x20000944

0800127c <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0
	uint32_t DAC_tx_buffer;
	uint16_t DAC_tx_tmp_buffer[2];

	uint8_t OK[]="OK\n\r";
 8001282:	4a5b      	ldr	r2, [pc, #364]	; (80013f0 <DAC_TEMP_CAL+0x174>)
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128c:	6018      	str	r0, [r3, #0]
 800128e:	3304      	adds	r3, #4
 8001290:	7019      	strb	r1, [r3, #0]
	uint8_t run_cal[]="\r\nCalibration in progress..";
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <DAC_TEMP_CAL+0x178>)
 8001294:	f107 0408 	add.w	r4, r7, #8
 8001298:	461d      	mov	r5, r3
 800129a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	2300      	movs	r3, #0
 80012ac:	80fb      	strh	r3, [r7, #6]
 80012ae:	2300      	movs	r3, #0
 80012b0:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint8_t count_tmp=HAL_GPIO_ReadPin(COUNT_EN_GPIO_Port, COUNT_EN_Pin); // Save LDAC signal state
 80012b2:	2108      	movs	r1, #8
 80012b4:	4850      	ldr	r0, [pc, #320]	; (80013f8 <DAC_TEMP_CAL+0x17c>)
 80012b6:	f002 f9f7 	bl	80036a8 <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	DDS_prepare_to_tempcal();
 80012c0:	f000 f98e 	bl	80015e0 <DDS_prepare_to_tempcal>

	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 80012c4:	2201      	movs	r2, #1
 80012c6:	2108      	movs	r1, #8
 80012c8:	484b      	ldr	r0, [pc, #300]	; (80013f8 <DAC_TEMP_CAL+0x17c>)
 80012ca:	f002 fa04 	bl	80036d6 <HAL_GPIO_WritePin>

	cfg.EN_TMP_CAL=1;
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <DAC_TEMP_CAL+0x180>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
	DAC_SendInit();
 80012d4:	f7ff ff4a 	bl	800116c <DAC_SendInit>
	HAL_Delay(10);
 80012d8:	200a      	movs	r0, #10
 80012da:	f001 fb97 	bl	8002a0c <HAL_Delay>

	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 80012de:	4b48      	ldr	r3, [pc, #288]	; (8001400 <DAC_TEMP_CAL+0x184>)
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80012e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 80012ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

	DAC_tx_buffer=0x85000000; // read status register
 80012f0:	f04f 4305 	mov.w	r3, #2231369728	; 0x85000000
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30

	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 80012f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f8:	0c1b      	lsrs	r3, r3, #16
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	803b      	strh	r3, [r7, #0]
	DAC_tx_tmp_buffer2[1]=(DAC_tx_buffer & 0x0000FFFF);
 80012fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001300:	b29b      	uxth	r3, r3
 8001302:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2110      	movs	r1, #16
 8001308:	483e      	ldr	r0, [pc, #248]	; (8001404 <DAC_TEMP_CAL+0x188>)
 800130a:	f002 f9e4 	bl	80036d6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 800130e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001312:	2302      	movs	r3, #2
 8001314:	2202      	movs	r2, #2
 8001316:	483c      	ldr	r0, [pc, #240]	; (8001408 <DAC_TEMP_CAL+0x18c>)
 8001318:	f004 fc48 	bl	8005bac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	2110      	movs	r1, #16
 8001320:	4838      	ldr	r0, [pc, #224]	; (8001404 <DAC_TEMP_CAL+0x188>)
 8001322:	f002 f9d8 	bl	80036d6 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8001326:	200a      	movs	r0, #10
 8001328:	f001 fb70 	bl	8002a0c <HAL_Delay>
	CDC_Transmit_FS(run_cal, strlen((const char *)run_cal));
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	4618      	mov	r0, r3
 8001332:	f7fe ff2f 	bl	8000194 <strlen>
 8001336:	4603      	mov	r3, r0
 8001338:	b29a      	uxth	r2, r3
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f009 f8af 	bl	800a4a4 <CDC_Transmit_FS>
	HAL_Delay(500); // Wait some time....
 8001346:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800134a:	f001 fb5f 	bl	8002a0c <HAL_Delay>

	do{ // Check complete flag
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2110      	movs	r1, #16
 8001352:	482c      	ldr	r0, [pc, #176]	; (8001404 <DAC_TEMP_CAL+0x188>)
 8001354:	f002 f9bf 	bl	80036d6 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 8001358:	4639      	mov	r1, r7
 800135a:	2302      	movs	r3, #2
 800135c:	2202      	movs	r2, #2
 800135e:	482a      	ldr	r0, [pc, #168]	; (8001408 <DAC_TEMP_CAL+0x18c>)
 8001360:	f004 fc24 	bl	8005bac <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2110      	movs	r1, #16
 8001368:	4826      	ldr	r0, [pc, #152]	; (8001404 <DAC_TEMP_CAL+0x188>)
 800136a:	f002 f9b4 	bl	80036d6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2110      	movs	r1, #16
 8001372:	4824      	ldr	r0, [pc, #144]	; (8001404 <DAC_TEMP_CAL+0x188>)
 8001374:	f002 f9af 	bl	80036d6 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 2, 2);
 8001378:	1d39      	adds	r1, r7, #4
 800137a:	2302      	movs	r3, #2
 800137c:	2202      	movs	r2, #2
 800137e:	4822      	ldr	r0, [pc, #136]	; (8001408 <DAC_TEMP_CAL+0x18c>)
 8001380:	f004 fd50 	bl	8005e24 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2110      	movs	r1, #16
 8001388:	481e      	ldr	r0, [pc, #120]	; (8001404 <DAC_TEMP_CAL+0x188>)
 800138a:	f002 f9a4 	bl	80036d6 <HAL_GPIO_WritePin>
		ALM=(spi_receive[1] & 0x1000) >> 12;
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	131b      	asrs	r3, r3, #12
 8001392:	b29b      	uxth	r3, r3
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	86fb      	strh	r3, [r7, #54]	; 0x36
		if(ALM!=1)HAL_Delay(1000);
 800139a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800139c:	2b01      	cmp	r3, #1
 800139e:	d003      	beq.n	80013a8 <DAC_TEMP_CAL+0x12c>
 80013a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a4:	f001 fb32 	bl	8002a0c <HAL_Delay>
	}while(ALM!=1);
 80013a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d1cf      	bne.n	800134e <DAC_TEMP_CAL+0xd2>

	HAL_Delay(10);
 80013ae:	200a      	movs	r0, #10
 80013b0:	f001 fb2c 	bl	8002a0c <HAL_Delay>
	CDC_Transmit_FS(OK, strlen((const char *)OK));
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe feeb 	bl	8000194 <strlen>
 80013be:	4603      	mov	r3, r0
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f009 f86b 	bl	800a4a4 <CDC_Transmit_FS>
	HAL_Delay(10);
 80013ce:	200a      	movs	r0, #10
 80013d0:	f001 fb1c 	bl	8002a0c <HAL_Delay>

	DDS_Init();
 80013d4:	f000 f81c 	bl	8001410 <DDS_Init>
	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, count_tmp); // Back LDAC signal state
 80013d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80013dc:	461a      	mov	r2, r3
 80013de:	2108      	movs	r1, #8
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <DAC_TEMP_CAL+0x17c>)
 80013e2:	f002 f978 	bl	80036d6 <HAL_GPIO_WritePin>
}
 80013e6:	bf00      	nop
 80013e8:	3738      	adds	r7, #56	; 0x38
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bdb0      	pop	{r4, r5, r7, pc}
 80013ee:	bf00      	nop
 80013f0:	0800da98 	.word	0x0800da98
 80013f4:	0800daa0 	.word	0x0800daa0
 80013f8:	40020400 	.word	0x40020400
 80013fc:	20000868 	.word	0x20000868
 8001400:	04000100 	.word	0x04000100
 8001404:	40020000 	.word	0x40020000
 8001408:	20000944 	.word	0x20000944
 800140c:	00000000 	.word	0x00000000

08001410 <DDS_Init>:

//==============================================================================================
void DDS_Init(void)
{
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[6];
	double hw_limit=1000; // 1(256)kHz hardware optimized limit
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <DDS_Init+0x1a8>)
 800141c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double dac_counts=1048576;
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b65      	ldr	r3, [pc, #404]	; (80015bc <DDS_Init+0x1ac>)
 8001426:	e9c7 2306 	strd	r2, r3, [r7, #24]


	DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 800142a:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <DDS_Init+0x1b0>)
 800142c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001430:	4b64      	ldr	r3, [pc, #400]	; (80015c4 <DDS_Init+0x1b4>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f99b 	bl	8000770 <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001442:	f7ff f995 	bl	8000770 <__aeabi_ddiv>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	495f      	ldr	r1, [pc, #380]	; (80015c8 <DDS_Init+0x1b8>)
 800144c:	e9c1 2300 	strd	r2, r3, [r1]

	if(DDS_target_frequecny>hw_limit)
 8001450:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <DDS_Init+0x1b8>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800145a:	f7ff fad1 	bl	8000a00 <__aeabi_dcmplt>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d036      	beq.n	80014d2 <DDS_Init+0xc2>
	{
		DDS_target_multipiller=DDS_target_frequecny/hw_limit;
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <DDS_Init+0x1b8>)
 8001466:	e9d3 0100 	ldrd	r0, r1, [r3]
 800146a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800146e:	f7ff f97f 	bl	8000770 <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fae9 	bl	8000a50 <__aeabi_d2uiz>
 800147e:	4603      	mov	r3, r0
 8001480:	4a52      	ldr	r2, [pc, #328]	; (80015cc <DDS_Init+0x1bc>)
 8001482:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=dac_counts/(DAC_fullrange_voltage/DAC_target_speed);
 8001484:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <DDS_Init+0x1b0>)
 8001486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148a:	4b4e      	ldr	r3, [pc, #312]	; (80015c4 <DDS_Init+0x1b4>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f96e 	bl	8000770 <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800149c:	f7ff f968 	bl	8000770 <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4948      	ldr	r1, [pc, #288]	; (80015c8 <DDS_Init+0x1b8>)
 80014a6:	e9c1 2300 	strd	r2, r3, [r1]
		DDS_target_frequecny/=(double)DDS_target_multipiller;
 80014aa:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <DDS_Init+0x1b8>)
 80014ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014b0:	4b46      	ldr	r3, [pc, #280]	; (80015cc <DDS_Init+0x1bc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7fe ffb7 	bl	8000428 <__aeabi_ui2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4620      	mov	r0, r4
 80014c0:	4629      	mov	r1, r5
 80014c2:	f7ff f955 	bl	8000770 <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	493f      	ldr	r1, [pc, #252]	; (80015c8 <DDS_Init+0x1b8>)
 80014cc:	e9c1 2300 	strd	r2, r3, [r1]
 80014d0:	e002      	b.n	80014d8 <DDS_Init+0xc8>
	} else DDS_target_multipiller = 1;
 80014d2:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <DDS_Init+0x1bc>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

	double DDS_FTW=((DDS_target_frequecny*256)/DDS_clock_frequecny)*(double)0xFFFFFFFF;
 80014d8:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <DDS_Init+0x1b8>)
 80014da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <DDS_Init+0x1c0>)
 80014e4:	f7ff f81a 	bl	800051c <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <DDS_Init+0x1c4>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f93b 	bl	8000770 <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a32b      	add	r3, pc, #172	; (adr r3, 80015b0 <DDS_Init+0x1a0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f808 	bl	800051c <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	e9c7 2304 	strd	r2, r3, [r7, #16]

	DDS_tx_buffer[0]=0xF800; // Enter DAC to Sleep+Reset mode
 8001514:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001518:	80bb      	strh	r3, [r7, #4]

	DDS_tx_buffer[1]=0x3300; // Write to Frequency 0 Reg, H MSB
 800151a:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 800151e:	80fb      	strh	r3, [r7, #6]
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001520:	88fc      	ldrh	r4, [r7, #6]
 8001522:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001526:	f7ff fa93 	bl	8000a50 <__aeabi_d2uiz>
 800152a:	4603      	mov	r3, r0
 800152c:	0e1b      	lsrs	r3, r3, #24
 800152e:	b29b      	uxth	r3, r3
 8001530:	4423      	add	r3, r4
 8001532:	b29b      	uxth	r3, r3
 8001534:	80fb      	strh	r3, [r7, #6]

	DDS_tx_buffer[2]=0x2200; // Write to Frequency 0 Reg, L MSBs
 8001536:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800153a:	813b      	strh	r3, [r7, #8]
	DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 800153c:	893c      	ldrh	r4, [r7, #8]
 800153e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001542:	f7ff fa85 	bl	8000a50 <__aeabi_d2uiz>
 8001546:	4603      	mov	r3, r0
 8001548:	0c1b      	lsrs	r3, r3, #16
 800154a:	b29b      	uxth	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	4423      	add	r3, r4
 8001552:	b29b      	uxth	r3, r3
 8001554:	813b      	strh	r3, [r7, #8]

	DDS_tx_buffer[3]=0x3100; // Write to Frequency 0 Reg, H LSBs
 8001556:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 800155a:	817b      	strh	r3, [r7, #10]
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 800155c:	897c      	ldrh	r4, [r7, #10]
 800155e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001562:	f7ff fa75 	bl	8000a50 <__aeabi_d2uiz>
 8001566:	4603      	mov	r3, r0
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	b29b      	uxth	r3, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	b29b      	uxth	r3, r3
 8001570:	4423      	add	r3, r4
 8001572:	b29b      	uxth	r3, r3
 8001574:	817b      	strh	r3, [r7, #10]

	DDS_tx_buffer[4]=0x2000; // Write to Frequency 0 Reg, L LSBs
 8001576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157a:	81bb      	strh	r3, [r7, #12]
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 800157c:	89bc      	ldrh	r4, [r7, #12]
 800157e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001582:	f7ff fa65 	bl	8000a50 <__aeabi_d2uiz>
 8001586:	4603      	mov	r3, r0
 8001588:	b29b      	uxth	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	b29b      	uxth	r3, r3
 800158e:	4423      	add	r3, r4
 8001590:	b29b      	uxth	r3, r3
 8001592:	81bb      	strh	r3, [r7, #12]

	DDS_tx_buffer[5]=0xC000; // Exit DAC from Sleep+Reset mode
 8001594:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001598:	81fb      	strh	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 800159a:	1d39      	adds	r1, r7, #4
 800159c:	2364      	movs	r3, #100	; 0x64
 800159e:	2206      	movs	r2, #6
 80015a0:	480d      	ldr	r0, [pc, #52]	; (80015d8 <DDS_Init+0x1c8>)
 80015a2:	f004 fb03 	bl	8005bac <HAL_SPI_Transmit>

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bdb0      	pop	{r4, r5, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	ffe00000 	.word	0xffe00000
 80015b4:	41efffff 	.word	0x41efffff
 80015b8:	408f4000 	.word	0x408f4000
 80015bc:	41300000 	.word	0x41300000
 80015c0:	200008b8 	.word	0x200008b8
 80015c4:	200008e0 	.word	0x200008e0
 80015c8:	20000888 	.word	0x20000888
 80015cc:	200002b8 	.word	0x200002b8
 80015d0:	40700000 	.word	0x40700000
 80015d4:	200002b0 	.word	0x200002b0
 80015d8:	200008ec 	.word	0x200008ec
 80015dc:	00000000 	.word	0x00000000

080015e0 <DDS_prepare_to_tempcal>:

//==============================================================================================
void DDS_prepare_to_tempcal(void)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
	uint16_t DDS_tx_buffer[6];

	DDS_target_frequecny=0.1;
 80015e6:	4948      	ldr	r1, [pc, #288]	; (8001708 <DDS_prepare_to_tempcal+0x128>)
 80015e8:	a343      	add	r3, pc, #268	; (adr r3, 80016f8 <DDS_prepare_to_tempcal+0x118>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	e9c1 2300 	strd	r2, r3, [r1]

	double DDS_FTW=((DDS_target_frequecny*256)/DDS_clock_frequecny)*(double)0xFFFFFFFF;
 80015f2:	4b45      	ldr	r3, [pc, #276]	; (8001708 <DDS_prepare_to_tempcal+0x128>)
 80015f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <DDS_prepare_to_tempcal+0x12c>)
 80015fe:	f7fe ff8d 	bl	800051c <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <DDS_prepare_to_tempcal+0x130>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7ff f8ae 	bl	8000770 <__aeabi_ddiv>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	a338      	add	r3, pc, #224	; (adr r3, 8001700 <DDS_prepare_to_tempcal+0x120>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7fe ff7b 	bl	800051c <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	DDS_tx_buffer[0]=0xF800; // Enter DAC to Sleep+Reset mode
 800162e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001632:	80bb      	strh	r3, [r7, #4]

	DDS_tx_buffer[1]=0x3300; // Write to Frequency 0 Reg, H MSB
 8001634:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001638:	80fb      	strh	r3, [r7, #6]
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 800163a:	88fc      	ldrh	r4, [r7, #6]
 800163c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001640:	f7ff fa06 	bl	8000a50 <__aeabi_d2uiz>
 8001644:	4603      	mov	r3, r0
 8001646:	0e1b      	lsrs	r3, r3, #24
 8001648:	b29b      	uxth	r3, r3
 800164a:	4423      	add	r3, r4
 800164c:	b29b      	uxth	r3, r3
 800164e:	80fb      	strh	r3, [r7, #6]

	DDS_tx_buffer[2]=0x2200; // Write to Frequency 0 Reg, L MSBs
 8001650:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001654:	813b      	strh	r3, [r7, #8]
	DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001656:	893c      	ldrh	r4, [r7, #8]
 8001658:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800165c:	f7ff f9f8 	bl	8000a50 <__aeabi_d2uiz>
 8001660:	4603      	mov	r3, r0
 8001662:	0c1b      	lsrs	r3, r3, #16
 8001664:	b29b      	uxth	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	b29b      	uxth	r3, r3
 800166a:	4423      	add	r3, r4
 800166c:	b29b      	uxth	r3, r3
 800166e:	813b      	strh	r3, [r7, #8]

	DDS_tx_buffer[3]=0x3100; // Write to Frequency 0 Reg, H LSBs
 8001670:	f44f 5344 	mov.w	r3, #12544	; 0x3100
 8001674:	817b      	strh	r3, [r7, #10]
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001676:	897c      	ldrh	r4, [r7, #10]
 8001678:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800167c:	f7ff f9e8 	bl	8000a50 <__aeabi_d2uiz>
 8001680:	4603      	mov	r3, r0
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	b29b      	uxth	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	b29b      	uxth	r3, r3
 800168a:	4423      	add	r3, r4
 800168c:	b29b      	uxth	r3, r3
 800168e:	817b      	strh	r3, [r7, #10]

	DDS_tx_buffer[4]=0x2000; // Write to Frequency 0 Reg, L LSBs
 8001690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001694:	81bb      	strh	r3, [r7, #12]
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 8001696:	89bc      	ldrh	r4, [r7, #12]
 8001698:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800169c:	f7ff f9d8 	bl	8000a50 <__aeabi_d2uiz>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4423      	add	r3, r4
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	81bb      	strh	r3, [r7, #12]

	DDS_tx_buffer[5]=0xC000; // Exit DAC from Sleep+Reset mode
 80016ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016b2:	81fb      	strh	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 80016b4:	1d39      	adds	r1, r7, #4
 80016b6:	2364      	movs	r3, #100	; 0x64
 80016b8:	2206      	movs	r2, #6
 80016ba:	4816      	ldr	r0, [pc, #88]	; (8001714 <DDS_prepare_to_tempcal+0x134>)
 80016bc:	f004 fa76 	bl	8005bac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_RESET); // Enable LDAC signal
 80016c0:	2200      	movs	r2, #0
 80016c2:	2108      	movs	r1, #8
 80016c4:	4814      	ldr	r0, [pc, #80]	; (8001718 <DDS_prepare_to_tempcal+0x138>)
 80016c6:	f002 f806 	bl	80036d6 <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(CPU_LDAC_GPIO_Port, CPU_LDAC_Pin)==GPIO_PIN_RESET); // Waiting LDAC become high
 80016ca:	bf00      	nop
 80016cc:	2104      	movs	r1, #4
 80016ce:	4813      	ldr	r0, [pc, #76]	; (800171c <DDS_prepare_to_tempcal+0x13c>)
 80016d0:	f001 ffea 	bl	80036a8 <HAL_GPIO_ReadPin>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f8      	beq.n	80016cc <DDS_prepare_to_tempcal+0xec>

	DDS_tx_buffer[0]=0xF800; // Enter DAC to Sleep+Reset mode
 80016da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016de:	80bb      	strh	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,100);
 80016e0:	1d39      	adds	r1, r7, #4
 80016e2:	2364      	movs	r3, #100	; 0x64
 80016e4:	2201      	movs	r2, #1
 80016e6:	480b      	ldr	r0, [pc, #44]	; (8001714 <DDS_prepare_to_tempcal+0x134>)
 80016e8:	f004 fa60 	bl	8005bac <HAL_SPI_Transmit>

}
 80016ec:	bf00      	nop
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	f3af 8000 	nop.w
 80016f8:	9999999a 	.word	0x9999999a
 80016fc:	3fb99999 	.word	0x3fb99999
 8001700:	ffe00000 	.word	0xffe00000
 8001704:	41efffff 	.word	0x41efffff
 8001708:	20000888 	.word	0x20000888
 800170c:	40700000 	.word	0x40700000
 8001710:	200002b0 	.word	0x200002b0
 8001714:	200008ec 	.word	0x200008ec
 8001718:	40020400 	.word	0x40020400
 800171c:	40020000 	.word	0x40020000

08001720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001736:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <MX_GPIO_Init+0x110>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a3d      	ldr	r2, [pc, #244]	; (8001830 <MX_GPIO_Init+0x110>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <MX_GPIO_Init+0x110>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b38      	ldr	r3, [pc, #224]	; (8001830 <MX_GPIO_Init+0x110>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a37      	ldr	r2, [pc, #220]	; (8001830 <MX_GPIO_Init+0x110>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b35      	ldr	r3, [pc, #212]	; (8001830 <MX_GPIO_Init+0x110>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b32      	ldr	r3, [pc, #200]	; (8001830 <MX_GPIO_Init+0x110>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a31      	ldr	r2, [pc, #196]	; (8001830 <MX_GPIO_Init+0x110>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <MX_GPIO_Init+0x110>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2111      	movs	r1, #17
 8001782:	482c      	ldr	r0, [pc, #176]	; (8001834 <MX_GPIO_Init+0x114>)
 8001784:	f001 ffa7 	bl	80036d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	2108      	movs	r1, #8
 800178c:	482a      	ldr	r0, [pc, #168]	; (8001838 <MX_GPIO_Init+0x118>)
 800178e:	f001 ffa2 	bl	80036d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_CLR_Pin;
 8001792:	2301      	movs	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001796:	2311      	movs	r3, #17
 8001798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179a:	2301      	movs	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_CLR_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	4619      	mov	r1, r3
 80017a8:	4822      	ldr	r0, [pc, #136]	; (8001834 <MX_GPIO_Init+0x114>)
 80017aa:	f001 fdfd 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ae:	2302      	movs	r3, #2
 80017b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	4619      	mov	r1, r3
 80017c0:	481c      	ldr	r0, [pc, #112]	; (8001834 <MX_GPIO_Init+0x114>)
 80017c2:	f001 fdf1 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CPU_LDAC_Pin;
 80017c6:	2304      	movs	r3, #4
 80017c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CPU_LDAC_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	4619      	mov	r1, r3
 80017da:	4816      	ldr	r0, [pc, #88]	; (8001834 <MX_GPIO_Init+0x114>)
 80017dc:	f001 fde4 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 80017e0:	2310      	movs	r3, #16
 80017e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4619      	mov	r1, r3
 80017f6:	480f      	ldr	r0, [pc, #60]	; (8001834 <MX_GPIO_Init+0x114>)
 80017f8:	f001 fdd6 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COUNT_EN_Pin;
 80017fc:	2308      	movs	r3, #8
 80017fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(COUNT_EN_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4619      	mov	r1, r3
 8001812:	4809      	ldr	r0, [pc, #36]	; (8001838 <MX_GPIO_Init+0x118>)
 8001814:	f001 fdc8 	bl	80033a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	2008      	movs	r0, #8
 800181e:	f001 f9ee 	bl	8002bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001822:	2008      	movs	r0, #8
 8001824:	f001 fa07 	bl	8002c36 <HAL_NVIC_EnableIRQ>

}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020400 	.word	0x40020400

0800183c <USB_rx_command_buffer_push_refd>:

uint32_t DAC_code=0x0;
FunctionalState DAC_code_direction;

// #define CRICBUF_CLEAN_ON_POP
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4804      	ldr	r0, [pc, #16]	; (8001858 <USB_rx_command_buffer_push_refd+0x1c>)
 8001848:	f7ff fbee 	bl	8001028 <__circ_gbuf_push>
 800184c:	4603      	mov	r3, r0
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200002bc 	.word	0x200002bc

0800185c <USB_rx_command_buffer_pop_refd>:
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <USB_rx_command_buffer_pop_refd+0x1c>)
 800186a:	f7ff fb8b 	bl	8000f84 <__circ_gbuf_pop>
 800186e:	4603      	mov	r3, r0
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200002bc 	.word	0x200002bc
 800187c:	00000000 	.word	0x00000000

08001880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 8001886:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <main+0x170>)
 8001888:	2200      	movs	r2, #0
 800188a:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 800188c:	4b58      	ldr	r3, [pc, #352]	; (80019f0 <main+0x170>)
 800188e:	2208      	movs	r2, #8
 8001890:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8001892:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <main+0x170>)
 8001894:	2201      	movs	r2, #1
 8001896:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=1; // SDO enabled
 8001898:	4b55      	ldr	r3, [pc, #340]	; (80019f0 <main+0x170>)
 800189a:	2201      	movs	r2, #1
 800189c:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 800189e:	4b54      	ldr	r3, [pc, #336]	; (80019f0 <main+0x170>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 80018a4:	4b52      	ldr	r3, [pc, #328]	; (80019f0 <main+0x170>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 80018aa:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <main+0x170>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 80018b0:	4b4f      	ldr	r3, [pc, #316]	; (80019f0 <main+0x170>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 80018b6:	4b4e      	ldr	r3, [pc, #312]	; (80019f0 <main+0x170>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]

	DAC_target_speed=0.001; //  V/s
 80018bc:	494d      	ldr	r1, [pc, #308]	; (80019f4 <main+0x174>)
 80018be:	a346      	add	r3, pc, #280	; (adr r3, 80019d8 <main+0x158>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	e9c1 2300 	strd	r2, r3, [r1]
	DAC_code=0x7FFFF;
 80018c8:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <main+0x178>)
 80018ca:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <main+0x17c>)
 80018cc:	601a      	str	r2, [r3, #0]
	DAC_code_direction=0;
 80018ce:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <main+0x180>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d4:	f001 f82b 	bl	800292e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d8:	f000 f8a0 	bl	8001a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018dc:	f7ff ff20 	bl	8001720 <MX_GPIO_Init>
  MX_SPI1_Init();
 80018e0:	f000 fdb8 	bl	8002454 <MX_SPI1_Init>
  MX_SPI2_Init();
 80018e4:	f000 fdee 	bl	80024c4 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80018e8:	f008 fcd8 	bl	800a29c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(2000); //WarmUP
 80018ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018f0:	f001 f88c 	bl	8002a0c <HAL_Delay>

	cal_DAC_up_voltage=((double)EEPROM_read(0x00))/1000000; // Read top voltage calibration from EEPROM in uV value
 80018f4:	2000      	movs	r0, #0
 80018f6:	f000 fd63 	bl	80023c0 <EEPROM_read>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fd93 	bl	8000428 <__aeabi_ui2d>
 8001902:	a337      	add	r3, pc, #220	; (adr r3, 80019e0 <main+0x160>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe ff32 	bl	8000770 <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	493c      	ldr	r1, [pc, #240]	; (8001a04 <main+0x184>)
 8001912:	e9c1 2300 	strd	r2, r3, [r1]
	cal_DAC_down_voltage=((double)EEPROM_read(0x08))/-1000000; // Read top voltage calibration from EEPROM in uV value
 8001916:	2008      	movs	r0, #8
 8001918:	f000 fd52 	bl	80023c0 <EEPROM_read>
 800191c:	4603      	mov	r3, r0
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fd82 	bl	8000428 <__aeabi_ui2d>
 8001924:	a330      	add	r3, pc, #192	; (adr r3, 80019e8 <main+0x168>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe ff21 	bl	8000770 <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4935      	ldr	r1, [pc, #212]	; (8001a08 <main+0x188>)
 8001934:	e9c1 2300 	strd	r2, r3, [r1]
	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <main+0x184>)
 800193a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800193e:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <main+0x188>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe fc32 	bl	80001ac <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	492f      	ldr	r1, [pc, #188]	; (8001a0c <main+0x18c>)
 800194e:	e9c1 2300 	strd	r2, r3, [r1]

	DDS_Init();
 8001952:	f7ff fd5d 	bl	8001410 <DDS_Init>
	DAC_SendInit();
 8001956:	f7ff fc09 	bl	800116c <DAC_SendInit>

	DAC_Write(DAC_code); //Middle
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <main+0x178>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fbb0 	bl	80010c4 <DAC_Write>

	HAL_Delay(10);
 8001964:	200a      	movs	r0, #10
 8001966:	f001 f851 	bl	8002a0c <HAL_Delay>
	CDC_Transmit_FS(clear, strlen((const char *)clear));
 800196a:	4829      	ldr	r0, [pc, #164]	; (8001a10 <main+0x190>)
 800196c:	f7fe fc12 	bl	8000194 <strlen>
 8001970:	4603      	mov	r3, r0
 8001972:	b29b      	uxth	r3, r3
 8001974:	4619      	mov	r1, r3
 8001976:	4826      	ldr	r0, [pc, #152]	; (8001a10 <main+0x190>)
 8001978:	f008 fd94 	bl	800a4a4 <CDC_Transmit_FS>
	HAL_Delay(10);
 800197c:	200a      	movs	r0, #10
 800197e:	f001 f845 	bl	8002a0c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(USB_CDC_End_Line_Received)
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <main+0x194>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0fa      	beq.n	8001982 <main+0x102>
		{
			uint8_t i=0;
 800198c:	2300      	movs	r3, #0
 800198e:	71fb      	strb	r3, [r7, #7]
			USB_CDC_End_Line_Received=0;
 8001990:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <main+0x194>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
			while (1) {
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <main+0x198>)
 800199a:	4413      	add	r3, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5d 	bl	800185c <USB_rx_command_buffer_pop_refd>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <main+0x130>
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <main+0x198>)
 80019ac:	210a      	movs	r1, #10
 80019ae:	54d1      	strb	r1, [r2, r3]
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	4a19      	ldr	r2, [pc, #100]	; (8001a18 <main+0x198>)
 80019b4:	5cd3      	ldrb	r3, [r2, r3]
 80019b6:	2b0a      	cmp	r3, #10
 80019b8:	d008      	beq.n	80019cc <main+0x14c>
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <main+0x198>)
 80019be:	5cd3      	ldrb	r3, [r2, r3]
 80019c0:	2b0d      	cmp	r3, #13
 80019c2:	d003      	beq.n	80019cc <main+0x14c>
				i++;
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	3301      	adds	r3, #1
 80019c8:	71fb      	strb	r3, [r7, #7]
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 80019ca:	e7e4      	b.n	8001996 <main+0x116>
			}
			Parsing_command();
 80019cc:	f000 f92c 	bl	8001c28 <Parsing_command>
		if(USB_CDC_End_Line_Received)
 80019d0:	e7d7      	b.n	8001982 <main+0x102>
 80019d2:	bf00      	nop
 80019d4:	f3af 8000 	nop.w
 80019d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019dc:	3f50624d 	.word	0x3f50624d
 80019e0:	00000000 	.word	0x00000000
 80019e4:	412e8480 	.word	0x412e8480
 80019e8:	00000000 	.word	0x00000000
 80019ec:	c12e8480 	.word	0xc12e8480
 80019f0:	20000868 	.word	0x20000868
 80019f4:	200008e0 	.word	0x200008e0
 80019f8:	20000634 	.word	0x20000634
 80019fc:	0007ffff 	.word	0x0007ffff
 8001a00:	200008e8 	.word	0x200008e8
 8001a04:	200008b0 	.word	0x200008b0
 8001a08:	20000880 	.word	0x20000880
 8001a0c:	200008b8 	.word	0x200008b8
 8001a10:	20000000 	.word	0x20000000
 8001a14:	200008df 	.word	0x200008df
 8001a18:	200008c0 	.word	0x200008c0

08001a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b092      	sub	sp, #72	; 0x48
 8001a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	2234      	movs	r2, #52	; 0x34
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f009 f968 	bl	800ad00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <SystemClock_Config+0x94>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001a46:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <SystemClock_Config+0x94>)
 8001a48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a4c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a56:	2302      	movs	r3, #2
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001a60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001a66:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fa8d 	bl	8004f90 <HAL_RCC_OscConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001a7c:	f000 fce4 	bl	8002448 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a80:	230f      	movs	r3, #15
 8001a82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a84:	2303      	movs	r3, #3
 8001a86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	2101      	movs	r1, #1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 fda9 	bl	80055f0 <HAL_RCC_ClockConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001aa4:	f000 fcd0 	bl	8002448 <Error_Handler>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3748      	adds	r7, #72	; 0x48
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
	DAC_Write_FAST();
 8001abe:	f7ff fb3b 	bl	8001138 <DAC_Write_FAST>

	if(GPIO_Pin == GPIO_PIN_2)
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	f040 8082 	bne.w	8001bce <HAL_GPIO_EXTI_Callback+0x11a>
	{
		if(DAC_code_direction)
 8001aca:	4b42      	ldr	r3, [pc, #264]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x120>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d040      	beq.n	8001b54 <HAL_GPIO_EXTI_Callback+0xa0>
		{
			if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 8001ad2:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 8001ada:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001ade:	4a3f      	ldr	r2, [pc, #252]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x128>)
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d322      	bcc.n	8001b2c <HAL_GPIO_EXTI_Callback+0x78>
			{
				DAC_code+=DDS_target_multipiller;
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x128>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a3a      	ldr	r2, [pc, #232]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x128>)
 8001af2:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8001af4:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001af6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001afa:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8001afc:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x128>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b06:	f023 030f 	bic.w	r3, r3, #15
 8001b0a:	4a35      	ldr	r2, [pc, #212]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001b12:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001b14:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0c1b      	lsrs	r3, r3, #16
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <HAL_GPIO_EXTI_Callback+0x130>)
 8001b1e:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001b20:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <HAL_GPIO_EXTI_Callback+0x130>)
 8001b28:	805a      	strh	r2, [r3, #2]
 8001b2a:	e050      	b.n	8001bce <HAL_GPIO_EXTI_Callback+0x11a>

			} else  {
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2108      	movs	r1, #8
 8001b30:	482d      	ldr	r0, [pc, #180]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x134>)
 8001b32:	f001 fdd0 	bl	80036d6 <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_GPIO_EXTI_Callback+0x138>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8001b3c:	f7ff fb16 	bl	800116c <DAC_SendInit>
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 8001b40:	482b      	ldr	r0, [pc, #172]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001b42:	f7fe fb27 	bl	8000194 <strlen>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4828      	ldr	r0, [pc, #160]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001b4e:	f008 fca9 	bl	800a4a4 <CDC_Transmit_FS>
				return;
 8001b52:	e03c      	b.n	8001bce <HAL_GPIO_EXTI_Callback+0x11a>
			}
		}
		else
		{
			if(DAC_code>=DDS_target_multipiller)
 8001b54:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x128>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d322      	bcc.n	8001ba6 <HAL_GPIO_EXTI_Callback+0xf2>
			{
				DAC_code-=DDS_target_multipiller;
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x128>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x128>)
 8001b6c:	6013      	str	r3, [r2, #0]
				DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001b70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b74:	601a      	str	r2, [r3, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x128>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b80:	f023 030f 	bic.w	r3, r3, #15
 8001b84:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001b8c:	6013      	str	r3, [r2, #0]

				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_GPIO_EXTI_Callback+0x130>)
 8001b98:	801a      	strh	r2, [r3, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_GPIO_EXTI_Callback+0x130>)
 8001ba2:	805a      	strh	r2, [r3, #2]
 8001ba4:	e013      	b.n	8001bce <HAL_GPIO_EXTI_Callback+0x11a>

			} else {
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2108      	movs	r1, #8
 8001baa:	480f      	ldr	r0, [pc, #60]	; (8001be8 <HAL_GPIO_EXTI_Callback+0x134>)
 8001bac:	f001 fd93 	bl	80036d6 <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_GPIO_EXTI_Callback+0x138>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8001bb6:	f7ff fad9 	bl	800116c <DAC_SendInit>
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 8001bba:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001bbc:	f7fe faea 	bl	8000194 <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480a      	ldr	r0, [pc, #40]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001bc8:	f008 fc6c 	bl	800a4a4 <CDC_Transmit_FS>
				return;
 8001bcc:	bf00      	nop
			}
		}
	}
}
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200008e8 	.word	0x200008e8
 8001bd8:	200002b8 	.word	0x200002b8
 8001bdc:	20000634 	.word	0x20000634
 8001be0:	20000878 	.word	0x20000878
 8001be4:	20000874 	.word	0x20000874
 8001be8:	40020400 	.word	0x40020400
 8001bec:	20000868 	.word	0x20000868
 8001bf0:	20000294 	.word	0x20000294

08001bf4 <Write_to_circ_buffer>:

//==============================================================================================
void Write_to_circ_buffer(uint8_t Buf)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 8001bfe:	1dfb      	adds	r3, r7, #7
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fe1b 	bl	800183c <USB_rx_command_buffer_push_refd>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <Write_to_circ_buffer+0x24>
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <Write_to_circ_buffer+0x2c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	809a      	strh	r2, [r3, #4]
 8001c12:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <Write_to_circ_buffer+0x2c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	80da      	strh	r2, [r3, #6]
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200002bc 	.word	0x200002bc
 8001c24:	00000000 	.word	0x00000000

08001c28 <Parsing_command>:

//==============================================================================================
void Parsing_command(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b096      	sub	sp, #88	; 0x58
 8001c2c:	af00      	add	r7, sp, #0
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];
	double dac_resolution;

	found = strtok((char *)command_buffer," ");
 8001c2e:	49c0      	ldr	r1, [pc, #768]	; (8001f30 <Parsing_command+0x308>)
 8001c30:	48c0      	ldr	r0, [pc, #768]	; (8001f34 <Parsing_command+0x30c>)
 8001c32:	f009 fe99 	bl	800b968 <strtok>
 8001c36:	6538      	str	r0, [r7, #80]	; 0x50
	if(found!=NULL)
 8001c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00e      	beq.n	8001c5c <Parsing_command+0x34>
	{
		strcpy(decoded_string_1,found);
 8001c3e:	f107 0320 	add.w	r3, r7, #32
 8001c42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001c44:	4618      	mov	r0, r3
 8001c46:	f009 f863 	bl	800ad10 <strcpy>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
		HAL_Delay(10);
		return;
	}

	found = strtok(NULL,"\r");
 8001c4a:	49bb      	ldr	r1, [pc, #748]	; (8001f38 <Parsing_command+0x310>)
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f009 fe8b 	bl	800b968 <strtok>
 8001c52:	6538      	str	r0, [r7, #80]	; 0x50
	if(found!=NULL)
 8001c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d02f      	beq.n	8001cba <Parsing_command+0x92>
 8001c5a:	e00f      	b.n	8001c7c <Parsing_command+0x54>
		HAL_Delay(10);
 8001c5c:	200a      	movs	r0, #10
 8001c5e:	f000 fed5 	bl	8002a0c <HAL_Delay>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8001c62:	48b6      	ldr	r0, [pc, #728]	; (8001f3c <Parsing_command+0x314>)
 8001c64:	f7fe fa96 	bl	8000194 <strlen>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	48b3      	ldr	r0, [pc, #716]	; (8001f3c <Parsing_command+0x314>)
 8001c70:	f008 fc18 	bl	800a4a4 <CDC_Transmit_FS>
		HAL_Delay(10);
 8001c74:	200a      	movs	r0, #10
 8001c76:	f000 fec9 	bl	8002a0c <HAL_Delay>
		return;
 8001c7a:	e390      	b.n	800239e <Parsing_command+0x776>
	{
		strcpy(decoded_string_2,found);
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001c80:	4618      	mov	r0, r3
 8001c82:	f009 f845 	bl	800ad10 <strcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 8001c86:	2300      	movs	r3, #0
 8001c88:	657b      	str	r3, [r7, #84]	; 0x54
 8001c8a:	e00d      	b.n	8001ca8 <Parsing_command+0x80>
 8001c8c:	463a      	mov	r2, r7
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c90:	4413      	add	r3, r2
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d104      	bne.n	8001ca2 <Parsing_command+0x7a>
 8001c98:	463a      	mov	r2, r7
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9c:	4413      	add	r3, r2
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fa72 	bl	8000194 <strlen>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8e9      	bhi.n	8001c8c <Parsing_command+0x64>
 8001cb8:	e00f      	b.n	8001cda <Parsing_command+0xb2>
	}
	else
	{
		HAL_Delay(10);
 8001cba:	200a      	movs	r0, #10
 8001cbc:	f000 fea6 	bl	8002a0c <HAL_Delay>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8001cc0:	489e      	ldr	r0, [pc, #632]	; (8001f3c <Parsing_command+0x314>)
 8001cc2:	f7fe fa67 	bl	8000194 <strlen>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	489b      	ldr	r0, [pc, #620]	; (8001f3c <Parsing_command+0x314>)
 8001cce:	f008 fbe9 	bl	800a4a4 <CDC_Transmit_FS>
		HAL_Delay(10);
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f000 fe9a 	bl	8002a0c <HAL_Delay>
		return;
 8001cd8:	e361      	b.n	800239e <Parsing_command+0x776>
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8001cda:	f107 0320 	add.w	r3, r7, #32
 8001cde:	4998      	ldr	r1, [pc, #608]	; (8001f40 <Parsing_command+0x318>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fa4d 	bl	8000180 <strcmp>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d157      	bne.n	8001d9c <Parsing_command+0x174>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8001cec:	463b      	mov	r3, r7
 8001cee:	4995      	ldr	r1, [pc, #596]	; (8001f44 <Parsing_command+0x31c>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fa45 	bl	8000180 <strcmp>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d11d      	bne.n	8001d38 <Parsing_command+0x110>
			DAC_TEMP_CAL();
 8001cfc:	f7ff fabe 	bl	800127c <DAC_TEMP_CAL>
			HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_RESET); // Enable LDAC signal
 8001d00:	2200      	movs	r2, #0
 8001d02:	2108      	movs	r1, #8
 8001d04:	4890      	ldr	r0, [pc, #576]	; (8001f48 <Parsing_command+0x320>)
 8001d06:	f001 fce6 	bl	80036d6 <HAL_GPIO_WritePin>
			cfg.LDACMODE=1;
 8001d0a:	4b90      	ldr	r3, [pc, #576]	; (8001f4c <Parsing_command+0x324>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 8001d10:	f7ff fa2c 	bl	800116c <DAC_SendInit>
			DDS_Init();
 8001d14:	f7ff fb7c 	bl	8001410 <DDS_Init>
			HAL_Delay(10);
 8001d18:	200a      	movs	r0, #10
 8001d1a:	f000 fe77 	bl	8002a0c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001d1e:	488c      	ldr	r0, [pc, #560]	; (8001f50 <Parsing_command+0x328>)
 8001d20:	f7fe fa38 	bl	8000194 <strlen>
 8001d24:	4603      	mov	r3, r0
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4889      	ldr	r0, [pc, #548]	; (8001f50 <Parsing_command+0x328>)
 8001d2c:	f008 fbba 	bl	800a4a4 <CDC_Transmit_FS>
			HAL_Delay(10);
 8001d30:	200a      	movs	r0, #10
 8001d32:	f000 fe6b 	bl	8002a0c <HAL_Delay>
			return;
 8001d36:	e332      	b.n	800239e <Parsing_command+0x776>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP"))){
 8001d38:	463b      	mov	r3, r7
 8001d3a:	4986      	ldr	r1, [pc, #536]	; (8001f54 <Parsing_command+0x32c>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fa1f 	bl	8000180 <strcmp>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d119      	bne.n	8001d7c <Parsing_command+0x154>
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2108      	movs	r1, #8
 8001d4c:	487e      	ldr	r0, [pc, #504]	; (8001f48 <Parsing_command+0x320>)
 8001d4e:	f001 fcc2 	bl	80036d6 <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8001d52:	4b7e      	ldr	r3, [pc, #504]	; (8001f4c <Parsing_command+0x324>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8001d58:	f7ff fa08 	bl	800116c <DAC_SendInit>
				HAL_Delay(10);
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	f000 fe55 	bl	8002a0c <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001d62:	487b      	ldr	r0, [pc, #492]	; (8001f50 <Parsing_command+0x328>)
 8001d64:	f7fe fa16 	bl	8000194 <strlen>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4878      	ldr	r0, [pc, #480]	; (8001f50 <Parsing_command+0x328>)
 8001d70:	f008 fb98 	bl	800a4a4 <CDC_Transmit_FS>
				HAL_Delay(10);
 8001d74:	200a      	movs	r0, #10
 8001d76:	f000 fe49 	bl	8002a0c <HAL_Delay>
				return;
 8001d7a:	e310      	b.n	800239e <Parsing_command+0x776>
			}
			else
			{
				HAL_Delay(10);
 8001d7c:	200a      	movs	r0, #10
 8001d7e:	f000 fe45 	bl	8002a0c <HAL_Delay>
				CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8001d82:	486e      	ldr	r0, [pc, #440]	; (8001f3c <Parsing_command+0x314>)
 8001d84:	f7fe fa06 	bl	8000194 <strlen>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	486b      	ldr	r0, [pc, #428]	; (8001f3c <Parsing_command+0x314>)
 8001d90:	f008 fb88 	bl	800a4a4 <CDC_Transmit_FS>
				HAL_Delay(10);
 8001d94:	200a      	movs	r0, #10
 8001d96:	f000 fe39 	bl	8002a0c <HAL_Delay>
				return;
 8001d9a:	e300      	b.n	800239e <Parsing_command+0x776>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	496d      	ldr	r1, [pc, #436]	; (8001f58 <Parsing_command+0x330>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe f9ec 	bl	8000180 <strcmp>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 80f4 	bne.w	8001f98 <Parsing_command+0x370>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 8001db0:	463b      	mov	r3, r7
 8001db2:	496a      	ldr	r1, [pc, #424]	; (8001f5c <Parsing_command+0x334>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe f9e3 	bl	8000180 <strcmp>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d11f      	bne.n	8001e00 <Parsing_command+0x1d8>
			DAC_code=0xFFFFF;
 8001dc0:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <Parsing_command+0x338>)
 8001dc2:	4a68      	ldr	r2, [pc, #416]	; (8001f64 <Parsing_command+0x33c>)
 8001dc4:	601a      	str	r2, [r3, #0]
			DAC_code_direction=0;
 8001dc6:	4b68      	ldr	r3, [pc, #416]	; (8001f68 <Parsing_command+0x340>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
			cfg.LDACMODE=0;
 8001dcc:	4b5f      	ldr	r3, [pc, #380]	; (8001f4c <Parsing_command+0x324>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 8001dd2:	f7ff f9cb 	bl	800116c <DAC_SendInit>
			DAC_Write(DAC_code);
 8001dd6:	4b62      	ldr	r3, [pc, #392]	; (8001f60 <Parsing_command+0x338>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f972 	bl	80010c4 <DAC_Write>
			HAL_Delay(10);
 8001de0:	200a      	movs	r0, #10
 8001de2:	f000 fe13 	bl	8002a0c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001de6:	485a      	ldr	r0, [pc, #360]	; (8001f50 <Parsing_command+0x328>)
 8001de8:	f7fe f9d4 	bl	8000194 <strlen>
 8001dec:	4603      	mov	r3, r0
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	4857      	ldr	r0, [pc, #348]	; (8001f50 <Parsing_command+0x328>)
 8001df4:	f008 fb56 	bl	800a4a4 <CDC_Transmit_FS>
			HAL_Delay(10);
 8001df8:	200a      	movs	r0, #10
 8001dfa:	f000 fe07 	bl	8002a0c <HAL_Delay>
			return;
 8001dfe:	e2ce      	b.n	800239e <Parsing_command+0x776>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8001e00:	463b      	mov	r3, r7
 8001e02:	495a      	ldr	r1, [pc, #360]	; (8001f6c <Parsing_command+0x344>)
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe f9bb 	bl	8000180 <strcmp>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d11f      	bne.n	8001e50 <Parsing_command+0x228>
				DAC_code=0x0;
 8001e10:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <Parsing_command+0x338>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
				DAC_code_direction=1;
 8001e16:	4b54      	ldr	r3, [pc, #336]	; (8001f68 <Parsing_command+0x340>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
				cfg.LDACMODE=0;
 8001e1c:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <Parsing_command+0x324>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8001e22:	f7ff f9a3 	bl	800116c <DAC_SendInit>
				DAC_Write(DAC_code);
 8001e26:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <Parsing_command+0x338>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f94a 	bl	80010c4 <DAC_Write>
				HAL_Delay(10);
 8001e30:	200a      	movs	r0, #10
 8001e32:	f000 fdeb 	bl	8002a0c <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001e36:	4846      	ldr	r0, [pc, #280]	; (8001f50 <Parsing_command+0x328>)
 8001e38:	f7fe f9ac 	bl	8000194 <strlen>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4619      	mov	r1, r3
 8001e42:	4843      	ldr	r0, [pc, #268]	; (8001f50 <Parsing_command+0x328>)
 8001e44:	f008 fb2e 	bl	800a4a4 <CDC_Transmit_FS>
				HAL_Delay(10);
 8001e48:	200a      	movs	r0, #10
 8001e4a:	f000 fddf 	bl	8002a0c <HAL_Delay>
				return;
 8001e4e:	e2a6      	b.n	800239e <Parsing_command+0x776>
			}
			else
			{
				atof_tmp=atof(decoded_string_2);
 8001e50:	463b      	mov	r3, r7
 8001e52:	4618      	mov	r0, r3
 8001e54:	f008 ff18 	bl	800ac88 <atof>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7fe fe16 	bl	8000a90 <__aeabi_d2f>
 8001e64:	4603      	mov	r3, r0
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
				if(atof_tmp>=cal_DAC_down_voltage && atof_tmp<=cal_DAC_up_voltage)
 8001e68:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e6a:	f7fe faff 	bl	800046c <__aeabi_f2d>
 8001e6e:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <Parsing_command+0x348>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f7fe fdd8 	bl	8000a28 <__aeabi_dcmpge>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d07c      	beq.n	8001f78 <Parsing_command+0x350>
 8001e7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e80:	f7fe faf4 	bl	800046c <__aeabi_f2d>
 8001e84:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <Parsing_command+0x34c>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	f7fe fdc3 	bl	8000a14 <__aeabi_dcmple>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d071      	beq.n	8001f78 <Parsing_command+0x350>
				{
					dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 8001e94:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <Parsing_command+0x34c>)
 8001e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e9a:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <Parsing_command+0x348>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe f984 	bl	80001ac <__aeabi_dsub>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	a31e      	add	r3, pc, #120	; (adr r3, 8001f28 <Parsing_command+0x300>)
 8001eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb2:	f7fe fc5d 	bl	8000770 <__aeabi_ddiv>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
					DAC_code=(uint32_t)((atof_tmp-cal_DAC_down_voltage)/dac_resolution);
 8001ebe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ec0:	f7fe fad4 	bl	800046c <__aeabi_f2d>
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <Parsing_command+0x348>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe f96f 	bl	80001ac <__aeabi_dsub>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001eda:	f7fe fc49 	bl	8000770 <__aeabi_ddiv>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe fdb3 	bl	8000a50 <__aeabi_d2uiz>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <Parsing_command+0x338>)
 8001eee:	6013      	str	r3, [r2, #0]

					cfg.LDACMODE=0;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <Parsing_command+0x324>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	709a      	strb	r2, [r3, #2]
					DAC_TEMP_CAL();
 8001ef6:	f7ff f9c1 	bl	800127c <DAC_TEMP_CAL>
					DAC_Write(DAC_code);
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <Parsing_command+0x338>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f8e0 	bl	80010c4 <DAC_Write>

					HAL_Delay(10);
 8001f04:	200a      	movs	r0, #10
 8001f06:	f000 fd81 	bl	8002a0c <HAL_Delay>
					CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001f0a:	4811      	ldr	r0, [pc, #68]	; (8001f50 <Parsing_command+0x328>)
 8001f0c:	f7fe f942 	bl	8000194 <strlen>
 8001f10:	4603      	mov	r3, r0
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	480e      	ldr	r0, [pc, #56]	; (8001f50 <Parsing_command+0x328>)
 8001f18:	f008 fac4 	bl	800a4a4 <CDC_Transmit_FS>
					HAL_Delay(10);
 8001f1c:	200a      	movs	r0, #10
 8001f1e:	f000 fd75 	bl	8002a0c <HAL_Delay>
					return;
 8001f22:	e23c      	b.n	800239e <Parsing_command+0x776>
 8001f24:	f3af 8000 	nop.w
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	412ffffe 	.word	0x412ffffe
 8001f30:	0800dabc 	.word	0x0800dabc
 8001f34:	200008c0 	.word	0x200008c0
 8001f38:	0800dac0 	.word	0x0800dac0
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	0800dac4 	.word	0x0800dac4
 8001f44:	0800dacc 	.word	0x0800dacc
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	20000868 	.word	0x20000868
 8001f50:	20000250 	.word	0x20000250
 8001f54:	0800dad4 	.word	0x0800dad4
 8001f58:	0800dadc 	.word	0x0800dadc
 8001f5c:	0800dae4 	.word	0x0800dae4
 8001f60:	20000634 	.word	0x20000634
 8001f64:	000fffff 	.word	0x000fffff
 8001f68:	200008e8 	.word	0x200008e8
 8001f6c:	0800dae8 	.word	0x0800dae8
 8001f70:	20000880 	.word	0x20000880
 8001f74:	200008b0 	.word	0x200008b0
				}
				else
				{
					HAL_Delay(10);
 8001f78:	200a      	movs	r0, #10
 8001f7a:	f000 fd47 	bl	8002a0c <HAL_Delay>
					CDC_Transmit_FS(Error2, strlen((const char *)Error2));  // SEND ERROR TO CDC!!!
 8001f7e:	48be      	ldr	r0, [pc, #760]	; (8002278 <Parsing_command+0x650>)
 8001f80:	f7fe f908 	bl	8000194 <strlen>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4619      	mov	r1, r3
 8001f8a:	48bb      	ldr	r0, [pc, #748]	; (8002278 <Parsing_command+0x650>)
 8001f8c:	f008 fa8a 	bl	800a4a4 <CDC_Transmit_FS>
					HAL_Delay(10);
 8001f90:	200a      	movs	r0, #10
 8001f92:	f000 fd3b 	bl	8002a0c <HAL_Delay>
					return;
 8001f96:	e202      	b.n	800239e <Parsing_command+0x776>

		}
	}

	// ==== DAC_CAL_TEMP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TEMP")))
 8001f98:	f107 0320 	add.w	r3, r7, #32
 8001f9c:	49b7      	ldr	r1, [pc, #732]	; (800227c <Parsing_command+0x654>)
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe f8ee 	bl	8000180 <strcmp>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d127      	bne.n	8001ffa <Parsing_command+0x3d2>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8001faa:	463b      	mov	r3, r7
 8001fac:	49b4      	ldr	r1, [pc, #720]	; (8002280 <Parsing_command+0x658>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe f8e6 	bl	8000180 <strcmp>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10f      	bne.n	8001fda <Parsing_command+0x3b2>
			DAC_code=0x7FFFF;
 8001fba:	4bb2      	ldr	r3, [pc, #712]	; (8002284 <Parsing_command+0x65c>)
 8001fbc:	4ab2      	ldr	r2, [pc, #712]	; (8002288 <Parsing_command+0x660>)
 8001fbe:	601a      	str	r2, [r3, #0]
			DAC_Write(DAC_code);
 8001fc0:	4bb0      	ldr	r3, [pc, #704]	; (8002284 <Parsing_command+0x65c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff f87d 	bl	80010c4 <DAC_Write>
			DAC_TEMP_CAL();
 8001fca:	f7ff f957 	bl	800127c <DAC_TEMP_CAL>
			DAC_Write(DAC_code);
 8001fce:	4bad      	ldr	r3, [pc, #692]	; (8002284 <Parsing_command+0x65c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f876 	bl	80010c4 <DAC_Write>
			return;
 8001fd8:	e1e1      	b.n	800239e <Parsing_command+0x776>
		}
		else
		{
			HAL_Delay(10);
 8001fda:	200a      	movs	r0, #10
 8001fdc:	f000 fd16 	bl	8002a0c <HAL_Delay>
			CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8001fe0:	48aa      	ldr	r0, [pc, #680]	; (800228c <Parsing_command+0x664>)
 8001fe2:	f7fe f8d7 	bl	8000194 <strlen>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4619      	mov	r1, r3
 8001fec:	48a7      	ldr	r0, [pc, #668]	; (800228c <Parsing_command+0x664>)
 8001fee:	f008 fa59 	bl	800a4a4 <CDC_Transmit_FS>
			HAL_Delay(10);
 8001ff2:	200a      	movs	r0, #10
 8001ff4:	f000 fd0a 	bl	8002a0c <HAL_Delay>
			return;
 8001ff8:	e1d1      	b.n	800239e <Parsing_command+0x776>
		}
	}

	// ==== DAC_CAL_TOP command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_TOP")))
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	49a4      	ldr	r1, [pc, #656]	; (8002290 <Parsing_command+0x668>)
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe f8bd 	bl	8000180 <strcmp>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d16b      	bne.n	80020e4 <Parsing_command+0x4bc>
	{
		atof_tmp=atof(decoded_string_2);
 800200c:	463b      	mov	r3, r7
 800200e:	4618      	mov	r0, r3
 8002010:	f008 fe3a 	bl	800ac88 <atof>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fd38 	bl	8000a90 <__aeabi_d2f>
 8002020:	4603      	mov	r3, r0
 8002022:	64fb      	str	r3, [r7, #76]	; 0x4c
		if(atof_tmp>9.9 && atof_tmp<10.1)
 8002024:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002026:	f7fe fa21 	bl	800046c <__aeabi_f2d>
 800202a:	a385      	add	r3, pc, #532	; (adr r3, 8002240 <Parsing_command+0x618>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fd04 	bl	8000a3c <__aeabi_dcmpgt>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d044      	beq.n	80020c4 <Parsing_command+0x49c>
 800203a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800203c:	f7fe fa16 	bl	800046c <__aeabi_f2d>
 8002040:	a381      	add	r3, pc, #516	; (adr r3, 8002248 <Parsing_command+0x620>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe fcdb 	bl	8000a00 <__aeabi_dcmplt>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d039      	beq.n	80020c4 <Parsing_command+0x49c>
		{
			cal_DAC_up_voltage=atof_tmp;
 8002050:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002052:	f7fe fa0b 	bl	800046c <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	498e      	ldr	r1, [pc, #568]	; (8002294 <Parsing_command+0x66c>)
 800205c:	e9c1 2300 	strd	r2, r3, [r1]
			EEPROM_write(0x00,(uint32_t)(cal_DAC_up_voltage*1000000)); // Write top voltage calibration to EEPROM in uV value
 8002060:	4b8c      	ldr	r3, [pc, #560]	; (8002294 <Parsing_command+0x66c>)
 8002062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002066:	a37a      	add	r3, pc, #488	; (adr r3, 8002250 <Parsing_command+0x628>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe fa56 	bl	800051c <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f7fe fcea 	bl	8000a50 <__aeabi_d2uiz>
 800207c:	4603      	mov	r3, r0
 800207e:	4619      	mov	r1, r3
 8002080:	2000      	movs	r0, #0
 8002082:	f000 f9b7 	bl	80023f4 <EEPROM_write>
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002086:	4b83      	ldr	r3, [pc, #524]	; (8002294 <Parsing_command+0x66c>)
 8002088:	e9d3 0100 	ldrd	r0, r1, [r3]
 800208c:	4b82      	ldr	r3, [pc, #520]	; (8002298 <Parsing_command+0x670>)
 800208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002092:	f7fe f88b 	bl	80001ac <__aeabi_dsub>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4980      	ldr	r1, [pc, #512]	; (800229c <Parsing_command+0x674>)
 800209c:	e9c1 2300 	strd	r2, r3, [r1]
			DDS_Init();
 80020a0:	f7ff f9b6 	bl	8001410 <DDS_Init>

			HAL_Delay(10);
 80020a4:	200a      	movs	r0, #10
 80020a6:	f000 fcb1 	bl	8002a0c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 80020aa:	487d      	ldr	r0, [pc, #500]	; (80022a0 <Parsing_command+0x678>)
 80020ac:	f7fe f872 	bl	8000194 <strlen>
 80020b0:	4603      	mov	r3, r0
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4619      	mov	r1, r3
 80020b6:	487a      	ldr	r0, [pc, #488]	; (80022a0 <Parsing_command+0x678>)
 80020b8:	f008 f9f4 	bl	800a4a4 <CDC_Transmit_FS>
			HAL_Delay(10);
 80020bc:	200a      	movs	r0, #10
 80020be:	f000 fca5 	bl	8002a0c <HAL_Delay>
			return;
 80020c2:	e16c      	b.n	800239e <Parsing_command+0x776>
		}
		else
		{
			HAL_Delay(10);
 80020c4:	200a      	movs	r0, #10
 80020c6:	f000 fca1 	bl	8002a0c <HAL_Delay>
			CDC_Transmit_FS(Error2, strlen((const char *)Error2));  // SEND ERROR TO CDC!!!
 80020ca:	486b      	ldr	r0, [pc, #428]	; (8002278 <Parsing_command+0x650>)
 80020cc:	f7fe f862 	bl	8000194 <strlen>
 80020d0:	4603      	mov	r3, r0
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4619      	mov	r1, r3
 80020d6:	4868      	ldr	r0, [pc, #416]	; (8002278 <Parsing_command+0x650>)
 80020d8:	f008 f9e4 	bl	800a4a4 <CDC_Transmit_FS>
			HAL_Delay(10);
 80020dc:	200a      	movs	r0, #10
 80020de:	f000 fc95 	bl	8002a0c <HAL_Delay>
			return;
 80020e2:	e15c      	b.n	800239e <Parsing_command+0x776>
		}
	}


	// ==== DAC_CAL_DOWN command ====
	if(!(strcmp(decoded_string_1,"DAC_CAL_DOWN")))
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	496e      	ldr	r1, [pc, #440]	; (80022a4 <Parsing_command+0x67c>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe f848 	bl	8000180 <strcmp>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d16b      	bne.n	80021ce <Parsing_command+0x5a6>
	{
		atof_tmp=atof(decoded_string_2);
 80020f6:	463b      	mov	r3, r7
 80020f8:	4618      	mov	r0, r3
 80020fa:	f008 fdc5 	bl	800ac88 <atof>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fcc3 	bl	8000a90 <__aeabi_d2f>
 800210a:	4603      	mov	r3, r0
 800210c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if(atof_tmp>-10.1 && atof_tmp<-9.9)
 800210e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002110:	f7fe f9ac 	bl	800046c <__aeabi_f2d>
 8002114:	a350      	add	r3, pc, #320	; (adr r3, 8002258 <Parsing_command+0x630>)
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	f7fe fc8f 	bl	8000a3c <__aeabi_dcmpgt>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d044      	beq.n	80021ae <Parsing_command+0x586>
 8002124:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002126:	f7fe f9a1 	bl	800046c <__aeabi_f2d>
 800212a:	a34d      	add	r3, pc, #308	; (adr r3, 8002260 <Parsing_command+0x638>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fc66 	bl	8000a00 <__aeabi_dcmplt>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d039      	beq.n	80021ae <Parsing_command+0x586>
		{
			cal_DAC_down_voltage=atof_tmp;
 800213a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800213c:	f7fe f996 	bl	800046c <__aeabi_f2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4954      	ldr	r1, [pc, #336]	; (8002298 <Parsing_command+0x670>)
 8002146:	e9c1 2300 	strd	r2, r3, [r1]
			EEPROM_write(0x08,(uint32_t)(cal_DAC_down_voltage*-1000000)); // Write top voltage calibration to EEPROM in uV value
 800214a:	4b53      	ldr	r3, [pc, #332]	; (8002298 <Parsing_command+0x670>)
 800214c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002150:	a345      	add	r3, pc, #276	; (adr r3, 8002268 <Parsing_command+0x640>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe f9e1 	bl	800051c <__aeabi_dmul>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	f7fe fc75 	bl	8000a50 <__aeabi_d2uiz>
 8002166:	4603      	mov	r3, r0
 8002168:	4619      	mov	r1, r3
 800216a:	2008      	movs	r0, #8
 800216c:	f000 f942 	bl	80023f4 <EEPROM_write>
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002170:	4b48      	ldr	r3, [pc, #288]	; (8002294 <Parsing_command+0x66c>)
 8002172:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002176:	4b48      	ldr	r3, [pc, #288]	; (8002298 <Parsing_command+0x670>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe f816 	bl	80001ac <__aeabi_dsub>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4945      	ldr	r1, [pc, #276]	; (800229c <Parsing_command+0x674>)
 8002186:	e9c1 2300 	strd	r2, r3, [r1]
			DDS_Init();
 800218a:	f7ff f941 	bl	8001410 <DDS_Init>

			HAL_Delay(10);
 800218e:	200a      	movs	r0, #10
 8002190:	f000 fc3c 	bl	8002a0c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002194:	4842      	ldr	r0, [pc, #264]	; (80022a0 <Parsing_command+0x678>)
 8002196:	f7fd fffd 	bl	8000194 <strlen>
 800219a:	4603      	mov	r3, r0
 800219c:	b29b      	uxth	r3, r3
 800219e:	4619      	mov	r1, r3
 80021a0:	483f      	ldr	r0, [pc, #252]	; (80022a0 <Parsing_command+0x678>)
 80021a2:	f008 f97f 	bl	800a4a4 <CDC_Transmit_FS>
			HAL_Delay(10);
 80021a6:	200a      	movs	r0, #10
 80021a8:	f000 fc30 	bl	8002a0c <HAL_Delay>
			return;
 80021ac:	e0f7      	b.n	800239e <Parsing_command+0x776>
		}
		else
		{
			HAL_Delay(10);
 80021ae:	200a      	movs	r0, #10
 80021b0:	f000 fc2c 	bl	8002a0c <HAL_Delay>
			CDC_Transmit_FS(Error2, strlen((const char *)Error2));  // SEND ERROR TO CDC!!!
 80021b4:	4830      	ldr	r0, [pc, #192]	; (8002278 <Parsing_command+0x650>)
 80021b6:	f7fd ffed 	bl	8000194 <strlen>
 80021ba:	4603      	mov	r3, r0
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4619      	mov	r1, r3
 80021c0:	482d      	ldr	r0, [pc, #180]	; (8002278 <Parsing_command+0x650>)
 80021c2:	f008 f96f 	bl	800a4a4 <CDC_Transmit_FS>
			HAL_Delay(10);
 80021c6:	200a      	movs	r0, #10
 80021c8:	f000 fc20 	bl	8002a0c <HAL_Delay>
			return;
 80021cc:	e0e7      	b.n	800239e <Parsing_command+0x776>
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 80021ce:	f107 0320 	add.w	r3, r7, #32
 80021d2:	4935      	ldr	r1, [pc, #212]	; (80022a8 <Parsing_command+0x680>)
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fd ffd3 	bl	8000180 <strcmp>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d17f      	bne.n	80022e0 <Parsing_command+0x6b8>
	{
		atof_tmp=atof(decoded_string_2);
 80021e0:	463b      	mov	r3, r7
 80021e2:	4618      	mov	r0, r3
 80021e4:	f008 fd50 	bl	800ac88 <atof>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7fe fc4e 	bl	8000a90 <__aeabi_d2f>
 80021f4:	4603      	mov	r3, r0
 80021f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if(atof_tmp<0.001 || atof_tmp>1)
 80021f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80021fa:	f7fe f937 	bl	800046c <__aeabi_f2d>
 80021fe:	a31c      	add	r3, pc, #112	; (adr r3, 8002270 <Parsing_command+0x648>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	f7fe fbfc 	bl	8000a00 <__aeabi_dcmplt>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <Parsing_command+0x5f6>
 800220e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002212:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002214:	f7fe fcf8 	bl	8000c08 <__aeabi_fcmpgt>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d046      	beq.n	80022ac <Parsing_command+0x684>
		{
			HAL_Delay(10);
 800221e:	200a      	movs	r0, #10
 8002220:	f000 fbf4 	bl	8002a0c <HAL_Delay>
			CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002224:	4819      	ldr	r0, [pc, #100]	; (800228c <Parsing_command+0x664>)
 8002226:	f7fd ffb5 	bl	8000194 <strlen>
 800222a:	4603      	mov	r3, r0
 800222c:	b29b      	uxth	r3, r3
 800222e:	4619      	mov	r1, r3
 8002230:	4816      	ldr	r0, [pc, #88]	; (800228c <Parsing_command+0x664>)
 8002232:	f008 f937 	bl	800a4a4 <CDC_Transmit_FS>
			HAL_Delay(10);
 8002236:	200a      	movs	r0, #10
 8002238:	f000 fbe8 	bl	8002a0c <HAL_Delay>
			return;
 800223c:	e0af      	b.n	800239e <Parsing_command+0x776>
 800223e:	bf00      	nop
 8002240:	cccccccd 	.word	0xcccccccd
 8002244:	4023cccc 	.word	0x4023cccc
 8002248:	33333333 	.word	0x33333333
 800224c:	40243333 	.word	0x40243333
 8002250:	00000000 	.word	0x00000000
 8002254:	412e8480 	.word	0x412e8480
 8002258:	33333333 	.word	0x33333333
 800225c:	c0243333 	.word	0xc0243333
 8002260:	cccccccd 	.word	0xcccccccd
 8002264:	c023cccc 	.word	0xc023cccc
 8002268:	00000000 	.word	0x00000000
 800226c:	c12e8480 	.word	0xc12e8480
 8002270:	d2f1a9fc 	.word	0xd2f1a9fc
 8002274:	3f50624d 	.word	0x3f50624d
 8002278:	20000268 	.word	0x20000268
 800227c:	0800daf0 	.word	0x0800daf0
 8002280:	0800dacc 	.word	0x0800dacc
 8002284:	20000634 	.word	0x20000634
 8002288:	0007ffff 	.word	0x0007ffff
 800228c:	20000008 	.word	0x20000008
 8002290:	0800db00 	.word	0x0800db00
 8002294:	200008b0 	.word	0x200008b0
 8002298:	20000880 	.word	0x20000880
 800229c:	200008b8 	.word	0x200008b8
 80022a0:	20000250 	.word	0x20000250
 80022a4:	0800db0c 	.word	0x0800db0c
 80022a8:	0800db1c 	.word	0x0800db1c
		}
		else
		{
			DAC_target_speed=atof_tmp;
 80022ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80022ae:	f7fe f8dd 	bl	800046c <__aeabi_f2d>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	493b      	ldr	r1, [pc, #236]	; (80023a4 <Parsing_command+0x77c>)
 80022b8:	e9c1 2300 	strd	r2, r3, [r1]
			DDS_Init();
 80022bc:	f7ff f8a8 	bl	8001410 <DDS_Init>

			HAL_Delay(10);
 80022c0:	200a      	movs	r0, #10
 80022c2:	f000 fba3 	bl	8002a0c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 80022c6:	4838      	ldr	r0, [pc, #224]	; (80023a8 <Parsing_command+0x780>)
 80022c8:	f7fd ff64 	bl	8000194 <strlen>
 80022cc:	4603      	mov	r3, r0
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	4619      	mov	r1, r3
 80022d2:	4835      	ldr	r0, [pc, #212]	; (80023a8 <Parsing_command+0x780>)
 80022d4:	f008 f8e6 	bl	800a4a4 <CDC_Transmit_FS>
			HAL_Delay(10);
 80022d8:	200a      	movs	r0, #10
 80022da:	f000 fb97 	bl	8002a0c <HAL_Delay>
			return;
 80022de:	e05e      	b.n	800239e <Parsing_command+0x776>
		}
	}

	// ==== SWEEP_DIRECTION command ====
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 80022e0:	f107 0320 	add.w	r3, r7, #32
 80022e4:	4931      	ldr	r1, [pc, #196]	; (80023ac <Parsing_command+0x784>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fd ff4a 	bl	8000180 <strcmp>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d145      	bne.n	800237e <Parsing_command+0x756>
	{
		if(!(strcmp(decoded_string_2,"UP"))){
 80022f2:	463b      	mov	r3, r7
 80022f4:	492e      	ldr	r1, [pc, #184]	; (80023b0 <Parsing_command+0x788>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fd ff42 	bl	8000180 <strcmp>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d112      	bne.n	8002328 <Parsing_command+0x700>
			DAC_code_direction=1;
 8002302:	4b2c      	ldr	r3, [pc, #176]	; (80023b4 <Parsing_command+0x78c>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
			HAL_Delay(10);
 8002308:	200a      	movs	r0, #10
 800230a:	f000 fb7f 	bl	8002a0c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 800230e:	4826      	ldr	r0, [pc, #152]	; (80023a8 <Parsing_command+0x780>)
 8002310:	f7fd ff40 	bl	8000194 <strlen>
 8002314:	4603      	mov	r3, r0
 8002316:	b29b      	uxth	r3, r3
 8002318:	4619      	mov	r1, r3
 800231a:	4823      	ldr	r0, [pc, #140]	; (80023a8 <Parsing_command+0x780>)
 800231c:	f008 f8c2 	bl	800a4a4 <CDC_Transmit_FS>
			HAL_Delay(10);
 8002320:	200a      	movs	r0, #10
 8002322:	f000 fb73 	bl	8002a0c <HAL_Delay>
			return;
 8002326:	e03a      	b.n	800239e <Parsing_command+0x776>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8002328:	463b      	mov	r3, r7
 800232a:	4923      	ldr	r1, [pc, #140]	; (80023b8 <Parsing_command+0x790>)
 800232c:	4618      	mov	r0, r3
 800232e:	f7fd ff27 	bl	8000180 <strcmp>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d112      	bne.n	800235e <Parsing_command+0x736>
				DAC_code_direction=0;
 8002338:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <Parsing_command+0x78c>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
				HAL_Delay(10);
 800233e:	200a      	movs	r0, #10
 8002340:	f000 fb64 	bl	8002a0c <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002344:	4818      	ldr	r0, [pc, #96]	; (80023a8 <Parsing_command+0x780>)
 8002346:	f7fd ff25 	bl	8000194 <strlen>
 800234a:	4603      	mov	r3, r0
 800234c:	b29b      	uxth	r3, r3
 800234e:	4619      	mov	r1, r3
 8002350:	4815      	ldr	r0, [pc, #84]	; (80023a8 <Parsing_command+0x780>)
 8002352:	f008 f8a7 	bl	800a4a4 <CDC_Transmit_FS>
				HAL_Delay(10);
 8002356:	200a      	movs	r0, #10
 8002358:	f000 fb58 	bl	8002a0c <HAL_Delay>
				return;
 800235c:	e01f      	b.n	800239e <Parsing_command+0x776>
			}
			else
			{
				HAL_Delay(10);
 800235e:	200a      	movs	r0, #10
 8002360:	f000 fb54 	bl	8002a0c <HAL_Delay>
				CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002364:	4815      	ldr	r0, [pc, #84]	; (80023bc <Parsing_command+0x794>)
 8002366:	f7fd ff15 	bl	8000194 <strlen>
 800236a:	4603      	mov	r3, r0
 800236c:	b29b      	uxth	r3, r3
 800236e:	4619      	mov	r1, r3
 8002370:	4812      	ldr	r0, [pc, #72]	; (80023bc <Parsing_command+0x794>)
 8002372:	f008 f897 	bl	800a4a4 <CDC_Transmit_FS>
				HAL_Delay(10);
 8002376:	200a      	movs	r0, #10
 8002378:	f000 fb48 	bl	8002a0c <HAL_Delay>
				return;
 800237c:	e00f      	b.n	800239e <Parsing_command+0x776>





	HAL_Delay(10);
 800237e:	200a      	movs	r0, #10
 8002380:	f000 fb44 	bl	8002a0c <HAL_Delay>
	CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <Parsing_command+0x794>)
 8002386:	f7fd ff05 	bl	8000194 <strlen>
 800238a:	4603      	mov	r3, r0
 800238c:	b29b      	uxth	r3, r3
 800238e:	4619      	mov	r1, r3
 8002390:	480a      	ldr	r0, [pc, #40]	; (80023bc <Parsing_command+0x794>)
 8002392:	f008 f887 	bl	800a4a4 <CDC_Transmit_FS>
	HAL_Delay(10);
 8002396:	200a      	movs	r0, #10
 8002398:	f000 fb38 	bl	8002a0c <HAL_Delay>
	return;
 800239c:	bf00      	nop
}
 800239e:	3758      	adds	r7, #88	; 0x58
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200008e0 	.word	0x200008e0
 80023a8:	20000250 	.word	0x20000250
 80023ac:	0800db28 	.word	0x0800db28
 80023b0:	0800db38 	.word	0x0800db38
 80023b4:	200008e8 	.word	0x200008e8
 80023b8:	0800dae8 	.word	0x0800dae8
 80023bc:	20000008 	.word	0x20000008

080023c0 <EEPROM_read>:

//==============================================================================================
uint32_t EEPROM_read(uint32_t address_of_read)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	uint32_t Address;

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80023ce:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80023d2:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <EEPROM_read+0x30>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d301      	bcc.n	80023e0 <EEPROM_read+0x20>
	{
		return 0x00;
 80023dc:	2300      	movs	r3, #0
 80023de:	e001      	b.n	80023e4 <EEPROM_read+0x24>
	}
	return *(__IO uint32_t *) Address;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	08082800 	.word	0x08082800

080023f4 <EEPROM_write>:
//==============================================================================================
void EEPROM_write(uint32_t address_of_read, uint32_t data)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
	/* Clear all pending flags */
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR | FLASH_FLAG_OPTVERRUSR);

	/*  Data EEPROM Fast Word program of FAST_DATA_32 at addresses defined by
	     DATA_EEPROM_START_ADDR and DATA_EEPROM_END_ADDR */
	Address = DATA_EEPROM_START_ADDR + address_of_read;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002404:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002408:	60fb      	str	r3, [r7, #12]
	if(Address > DATA_EEPROM_END_ADDR)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <EEPROM_write+0x50>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d212      	bcs.n	8002438 <EEPROM_write+0x44>
	{
		return;
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 8002412:	f000 fd11 	bl	8002e38 <HAL_FLASHEx_DATAEEPROM_Unlock>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	68f9      	ldr	r1, [r7, #12]
 800241a:	2002      	movs	r0, #2
 800241c:	f000 fd6a 	bl	8002ef4 <HAL_FLASHEx_DATAEEPROM_Program>
 8002420:	4603      	mov	r3, r0
 8002422:	72fb      	strb	r3, [r7, #11]
	HAL_FLASHEx_DATAEEPROM_Lock();
 8002424:	f000 fd24 	bl	8002e70 <HAL_FLASHEx_DATAEEPROM_Lock>

	if(FLASHStatus != HAL_OK)
 8002428:	7afb      	ldrb	r3, [r7, #11]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <EEPROM_write+0x48>
	{
		return;
	}
	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR);

	if(*(__IO uint32_t *) Address != data)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	e002      	b.n	800243e <EEPROM_write+0x4a>
		return;
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <EEPROM_write+0x4a>
		return;
 800243c:	bf00      	nop
	{
		return;
	}

}
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	08082800 	.word	0x08082800

08002448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800244c:	b672      	cpsid	i
}
 800244e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002450:	e7fe      	b.n	8002450 <Error_Handler+0x8>
	...

08002454 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <MX_SPI1_Init+0x68>)
 800245a:	4a19      	ldr	r2, [pc, #100]	; (80024c0 <MX_SPI1_Init+0x6c>)
 800245c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <MX_SPI1_Init+0x68>)
 8002460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002464:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <MX_SPI1_Init+0x68>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <MX_SPI1_Init+0x68>)
 800246e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002472:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <MX_SPI1_Init+0x68>)
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <MX_SPI1_Init+0x68>)
 800247c:	2201      	movs	r2, #1
 800247e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <MX_SPI1_Init+0x68>)
 8002482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002486:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <MX_SPI1_Init+0x68>)
 800248a:	2218      	movs	r2, #24
 800248c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <MX_SPI1_Init+0x68>)
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <MX_SPI1_Init+0x68>)
 8002496:	2200      	movs	r2, #0
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <MX_SPI1_Init+0x68>)
 800249c:	2200      	movs	r2, #0
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <MX_SPI1_Init+0x68>)
 80024a2:	220a      	movs	r2, #10
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_SPI1_Init+0x68>)
 80024a8:	f003 fb04 	bl	8005ab4 <HAL_SPI_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80024b2:	f7ff ffc9 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000944 	.word	0x20000944
 80024c0:	40013000 	.word	0x40013000

080024c4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <MX_SPI2_Init+0x68>)
 80024ca:	4a19      	ldr	r2, [pc, #100]	; (8002530 <MX_SPI2_Init+0x6c>)
 80024cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <MX_SPI2_Init+0x68>)
 80024d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <MX_SPI2_Init+0x68>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <MX_SPI2_Init+0x68>)
 80024de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <MX_SPI2_Init+0x68>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <MX_SPI2_Init+0x68>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <MX_SPI2_Init+0x68>)
 80024f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80024f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MX_SPI2_Init+0x68>)
 80024fa:	2218      	movs	r2, #24
 80024fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <MX_SPI2_Init+0x68>)
 8002500:	2200      	movs	r2, #0
 8002502:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <MX_SPI2_Init+0x68>)
 8002506:	2200      	movs	r2, #0
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <MX_SPI2_Init+0x68>)
 800250c:	2200      	movs	r2, #0
 800250e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <MX_SPI2_Init+0x68>)
 8002512:	220a      	movs	r2, #10
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002516:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_SPI2_Init+0x68>)
 8002518:	f003 facc 	bl	8005ab4 <HAL_SPI_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002522:	f7ff ff91 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200008ec 	.word	0x200008ec
 8002530:	40003800 	.word	0x40003800

08002534 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08c      	sub	sp, #48	; 0x30
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 031c 	add.w	r3, r7, #28
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a32      	ldr	r2, [pc, #200]	; (800261c <HAL_SPI_MspInit+0xe8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d130      	bne.n	80025b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002556:	4b32      	ldr	r3, [pc, #200]	; (8002620 <HAL_SPI_MspInit+0xec>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a31      	ldr	r2, [pc, #196]	; (8002620 <HAL_SPI_MspInit+0xec>)
 800255c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_SPI_MspInit+0xec>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <HAL_SPI_MspInit+0xec>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a2b      	ldr	r2, [pc, #172]	; (8002620 <HAL_SPI_MspInit+0xec>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	61d3      	str	r3, [r2, #28]
 800257a:	4b29      	ldr	r3, [pc, #164]	; (8002620 <HAL_SPI_MspInit+0xec>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002586:	23e0      	movs	r3, #224	; 0xe0
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	2303      	movs	r3, #3
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002596:	2305      	movs	r3, #5
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 031c 	add.w	r3, r7, #28
 800259e:	4619      	mov	r1, r3
 80025a0:	4820      	ldr	r0, [pc, #128]	; (8002624 <HAL_SPI_MspInit+0xf0>)
 80025a2:	f000 ff01 	bl	80033a8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2101      	movs	r1, #1
 80025aa:	2023      	movs	r0, #35	; 0x23
 80025ac:	f000 fb27 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025b0:	2023      	movs	r0, #35	; 0x23
 80025b2:	f000 fb40 	bl	8002c36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80025b6:	e02d      	b.n	8002614 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <HAL_SPI_MspInit+0xf4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d128      	bne.n	8002614 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_SPI_MspInit+0xec>)
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_SPI_MspInit+0xec>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025cc:	6253      	str	r3, [r2, #36]	; 0x24
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_SPI_MspInit+0xec>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_SPI_MspInit+0xec>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_SPI_MspInit+0xec>)
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	61d3      	str	r3, [r2, #28]
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_SPI_MspInit+0xec>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80025f2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80025f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002604:	2305      	movs	r3, #5
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	4807      	ldr	r0, [pc, #28]	; (800262c <HAL_SPI_MspInit+0xf8>)
 8002610:	f000 feca 	bl	80033a8 <HAL_GPIO_Init>
}
 8002614:	bf00      	nop
 8002616:	3730      	adds	r7, #48	; 0x30
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40013000 	.word	0x40013000
 8002620:	40023800 	.word	0x40023800
 8002624:	40020000 	.word	0x40020000
 8002628:	40003800 	.word	0x40003800
 800262c:	40020400 	.word	0x40020400

08002630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <HAL_MspInit+0xa0>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <HAL_MspInit+0xa0>)
 800263c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002640:	6253      	str	r3, [r2, #36]	; 0x24
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <HAL_MspInit+0xa0>)
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_MspInit+0xa0>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a1f      	ldr	r2, [pc, #124]	; (80026d0 <HAL_MspInit+0xa0>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6213      	str	r3, [r2, #32]
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <HAL_MspInit+0xa0>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_MspInit+0xa0>)
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <HAL_MspInit+0xa0>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6253      	str	r3, [r2, #36]	; 0x24
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_MspInit+0xa0>)
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2101      	movs	r1, #1
 8002682:	f06f 000b 	mvn.w	r0, #11
 8002686:	f000 faba 	bl	8002bfe <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2101      	movs	r1, #1
 800268e:	f06f 000a 	mvn.w	r0, #10
 8002692:	f000 fab4 	bl	8002bfe <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2101      	movs	r1, #1
 800269a:	f06f 0009 	mvn.w	r0, #9
 800269e:	f000 faae 	bl	8002bfe <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2101      	movs	r1, #1
 80026a6:	f06f 0004 	mvn.w	r0, #4
 80026aa:	f000 faa8 	bl	8002bfe <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2101      	movs	r1, #1
 80026b2:	f06f 0003 	mvn.w	r0, #3
 80026b6:	f000 faa2 	bl	8002bfe <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2101      	movs	r1, #1
 80026be:	f06f 0001 	mvn.w	r0, #1
 80026c2:	f000 fa9c 	bl	8002bfe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <NMI_Handler+0x4>

080026da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <HardFault_Handler+0x4>

080026e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <MemManage_Handler+0x4>

080026e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <BusFault_Handler+0x4>

080026ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <UsageFault_Handler+0x4>

080026f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800271a:	f000 f95b 	bl	80029d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}

08002722 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CPU_LDAC_Pin);
 8002726:	2004      	movs	r0, #4
 8002728:	f000 ffee 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}

08002730 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <USB_LP_IRQHandler+0x10>)
 8002736:	f001 f903 	bl	8003940 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000fd4 	.word	0x20000fd4

08002744 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <SPI1_IRQHandler+0x10>)
 800274a:	f003 fe1f 	bl	800638c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000944 	.word	0x20000944

08002758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
	return 1;
 800275c:	2301      	movs	r3, #1
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <_kill>:

int _kill(int pid, int sig)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002770:	f008 fa8e 	bl	800ac90 <__errno>
 8002774:	4603      	mov	r3, r0
 8002776:	2216      	movs	r2, #22
 8002778:	601a      	str	r2, [r3, #0]
	return -1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <_exit>:

void _exit (int status)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800278e:	f04f 31ff 	mov.w	r1, #4294967295
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ffe7 	bl	8002766 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002798:	e7fe      	b.n	8002798 <_exit+0x12>

0800279a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e00a      	b.n	80027c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027ac:	f3af 8000 	nop.w
 80027b0:	4601      	mov	r1, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	60ba      	str	r2, [r7, #8]
 80027b8:	b2ca      	uxtb	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	3301      	adds	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	dbf0      	blt.n	80027ac <_read+0x12>
	}

return len;
 80027ca:	687b      	ldr	r3, [r7, #4]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	e009      	b.n	80027fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	60ba      	str	r2, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3301      	adds	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	429a      	cmp	r2, r3
 8002800:	dbf1      	blt.n	80027e6 <_write+0x12>
	}
	return len;
 8002802:	687b      	ldr	r3, [r7, #4]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_close>:

int _close(int file)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	return -1;
 8002814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002832:	605a      	str	r2, [r3, #4]
	return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <_isatty>:

int _isatty(int file)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	return 1;
 8002848:	2301      	movs	r3, #1
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
	return 0;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <_sbrk+0x5c>)
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <_sbrk+0x60>)
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <_sbrk+0x64>)
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <_sbrk+0x68>)
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	d207      	bcs.n	80028ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800289c:	f008 f9f8 	bl	800ac90 <__errno>
 80028a0:	4603      	mov	r3, r0
 80028a2:	220c      	movs	r2, #12
 80028a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
 80028aa:	e009      	b.n	80028c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <_sbrk+0x64>)
 80028bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028be:	68fb      	ldr	r3, [r7, #12]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20004000 	.word	0x20004000
 80028cc:	00000400 	.word	0x00000400
 80028d0:	20000638 	.word	0x20000638
 80028d4:	200012d0 	.word	0x200012d0

080028d8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028e6:	490d      	ldr	r1, [pc, #52]	; (800291c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028e8:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028fc:	4c0a      	ldr	r4, [pc, #40]	; (8002928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800290a:	f7ff ffe5 	bl	80028d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800290e:	f008 f9c5 	bl	800ac9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002912:	f7fe ffb5 	bl	8001880 <main>
  bx lr
 8002916:	4770      	bx	lr
  ldr r0, =_sdata
 8002918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800291c:	20000618 	.word	0x20000618
  ldr r2, =_sidata
 8002920:	0800e038 	.word	0x0800e038
  ldr r2, =_sbss
 8002924:	20000618 	.word	0x20000618
  ldr r4, =_ebss
 8002928:	200012d0 	.word	0x200012d0

0800292c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800292c:	e7fe      	b.n	800292c <ADC1_IRQHandler>

0800292e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002938:	2003      	movs	r0, #3
 800293a:	f000 f955 	bl	8002be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800293e:	200f      	movs	r0, #15
 8002940:	f000 f80e 	bl	8002960 <HAL_InitTick>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	71fb      	strb	r3, [r7, #7]
 800294e:	e001      	b.n	8002954 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002950:	f7ff fe6e 	bl	8002630 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002954:	79fb      	ldrb	r3, [r7, #7]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_InitTick+0x68>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d022      	beq.n	80029ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002974:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_InitTick+0x6c>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_InitTick+0x68>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002980:	fbb1 f3f3 	udiv	r3, r1, r3
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f962 	bl	8002c52 <HAL_SYSTICK_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10f      	bne.n	80029b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b0f      	cmp	r3, #15
 8002998:	d809      	bhi.n	80029ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299a:	2200      	movs	r2, #0
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	f04f 30ff 	mov.w	r0, #4294967295
 80029a2:	f000 f92c 	bl	8002bfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_InitTick+0x70>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e007      	b.n	80029be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	e004      	b.n	80029be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	e001      	b.n	80029be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200002d0 	.word	0x200002d0
 80029cc:	200002c8 	.word	0x200002c8
 80029d0:	200002cc 	.word	0x200002cc

080029d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_IncTick+0x1c>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_IncTick+0x20>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <HAL_IncTick+0x1c>)
 80029e4:	6013      	str	r3, [r2, #0]
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	2000099c 	.word	0x2000099c
 80029f4:	200002d0 	.word	0x200002d0

080029f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return uwTick;
 80029fc:	4b02      	ldr	r3, [pc, #8]	; (8002a08 <HAL_GetTick+0x10>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	2000099c 	.word	0x2000099c

08002a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a14:	f7ff fff0 	bl	80029f8 <HAL_GetTick>
 8002a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a24:	d004      	beq.n	8002a30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_Delay+0x40>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a30:	bf00      	nop
 8002a32:	f7ff ffe1 	bl	80029f8 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d8f7      	bhi.n	8002a32 <HAL_Delay+0x26>
  {
  }
}
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200002d0 	.word	0x200002d0

08002a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a82:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	60d3      	str	r3, [r2, #12]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 0307 	and.w	r3, r3, #7
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db0b      	blt.n	8002ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	4906      	ldr	r1, [pc, #24]	; (8002ae8 <__NVIC_EnableIRQ+0x34>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	; (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	; (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb4:	d301      	bcc.n	8002bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00f      	b.n	8002bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <SysTick_Config+0x40>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc2:	210f      	movs	r1, #15
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	f7ff ff90 	bl	8002aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <SysTick_Config+0x40>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <SysTick_Config+0x40>)
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000e010 	.word	0xe000e010

08002be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff2d 	bl	8002a50 <__NVIC_SetPriorityGrouping>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c10:	f7ff ff42 	bl	8002a98 <__NVIC_GetPriorityGrouping>
 8002c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f7ff ff90 	bl	8002b40 <NVIC_EncodePriority>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff5f 	bl	8002aec <__NVIC_SetPriority>
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff35 	bl	8002ab4 <__NVIC_EnableIRQ>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ffa2 	bl	8002ba4 <SysTick_Config>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d005      	beq.n	8002c8e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2204      	movs	r2, #4
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e029      	b.n	8002ce2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 020e 	bic.w	r2, r2, #14
 8002c9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 021c 	and.w	r2, r3, #28
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
    }
  }
  return status;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002cf4:	f7ff fe80 	bl	80029f8 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002cfa:	e010      	b.n	8002d1e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d00c      	beq.n	8002d1e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <FLASH_WaitForLastOperation+0x2e>
 8002d0a:	f7ff fe75 	bl	80029f8 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d201      	bcs.n	8002d1e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e02f      	b.n	8002d7e <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <FLASH_WaitForLastOperation+0x9c>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d0e8      	beq.n	8002cfc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d2a:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <FLASH_WaitForLastOperation+0x9c>)
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d102      	bne.n	8002d3c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <FLASH_WaitForLastOperation+0x9c>)
 8002d38:	2202      	movs	r2, #2
 8002d3a:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002d3c:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <FLASH_WaitForLastOperation+0x9c>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d48:	d014      	beq.n	8002d74 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <FLASH_WaitForLastOperation+0x9c>)
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d56:	d00d      	beq.n	8002d74 <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <FLASH_WaitForLastOperation+0x9c>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d64:	d006      	beq.n	8002d74 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002d66:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <FLASH_WaitForLastOperation+0x9c>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8002d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d72:	d103      	bne.n	8002d7c <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002d74:	f000 f80a 	bl	8002d8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00

08002d8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <FLASH_SetErrorCode+0xa4>)
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da2:	d109      	bne.n	8002db8 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <FLASH_SetErrorCode+0xa8>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <FLASH_SetErrorCode+0xa8>)
 8002dae:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <FLASH_SetErrorCode+0xa4>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc4:	d109      	bne.n	8002dda <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <FLASH_SetErrorCode+0xa8>)
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <FLASH_SetErrorCode+0xa8>)
 8002dd0:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <FLASH_SetErrorCode+0xa4>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de6:	d109      	bne.n	8002dfc <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002de8:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <FLASH_SetErrorCode+0xa8>)
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <FLASH_SetErrorCode+0xa8>)
 8002df2:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dfa:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <FLASH_SetErrorCode+0xa4>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e08:	d109      	bne.n	8002e1e <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <FLASH_SetErrorCode+0xa8>)
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f043 0308 	orr.w	r3, r3, #8
 8002e12:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <FLASH_SetErrorCode+0xa8>)
 8002e14:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e1c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e1e:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <FLASH_SetErrorCode+0xa4>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6193      	str	r3, [r2, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023c00 	.word	0x40023c00
 8002e34:	200009a0 	.word	0x200009a0

08002e38 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8002e4a:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 8002e4c:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8002e50:	4a06      	ldr	r2, [pc, #24]	; (8002e6c <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 8002e52:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e000      	b.n	8002e5a <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00
 8002e68:	89abcdef 	.word	0x89abcdef
 8002e6c:	02030405 	.word	0x02030405

08002e70 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4a04      	ldr	r2, [pc, #16]	; (8002e8c <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40023c00 	.word	0x40023c00

08002e90 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002e9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ea2:	f7ff ff23 	bl	8002cec <FLASH_WaitForLastOperation>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d11a      	bne.n	8002ee6 <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d102      	bne.n	8002ec2 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d102      	bne.n	8002ece <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002eda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ede:	f7ff ff05 	bl	8002cec <FLASH_WaitForLastOperation>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200009a0 	.word	0x200009a0

08002ef4 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f04:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8002f06:	7c1b      	ldrb	r3, [r3, #16]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e058      	b.n	8002fc2 <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 8002f10:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f1a:	f7ff fee7 	bl	8002cec <FLASH_WaitForLastOperation>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d148      	bne.n	8002fba <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f28:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d106      	bne.n	8002f42 <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	68b8      	ldr	r0, [r7, #8]
 8002f38:	f000 fa18 	bl	800336c <FLASH_DATAEEPROM_ProgramWord>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	75fb      	strb	r3, [r7, #23]
 8002f40:	e03b      	b.n	8002fba <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d108      	bne.n	8002f5a <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	68b8      	ldr	r0, [r7, #8]
 8002f50:	f000 f99c 	bl	800328c <FLASH_DATAEEPROM_ProgramHalfWord>
 8002f54:	4603      	mov	r3, r0
 8002f56:	75fb      	strb	r3, [r7, #23]
 8002f58:	e02f      	b.n	8002fba <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d108      	bne.n	8002f72 <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	4619      	mov	r1, r3
 8002f66:	68b8      	ldr	r0, [r7, #8]
 8002f68:	f000 f934 	bl	80031d4 <FLASH_DATAEEPROM_ProgramByte>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	75fb      	strb	r3, [r7, #23]
 8002f70:	e023      	b.n	8002fba <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d108      	bne.n	8002f8a <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	68b8      	ldr	r0, [r7, #8]
 8002f80:	f000 f826 	bl	8002fd0 <FLASH_DATAEEPROM_FastProgramByte>
 8002f84:	4603      	mov	r3, r0
 8002f86:	75fb      	strb	r3, [r7, #23]
 8002f88:	e017      	b.n	8002fba <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d108      	bne.n	8002fa2 <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4619      	mov	r1, r3
 8002f96:	68b8      	ldr	r0, [r7, #8]
 8002f98:	f000 f87e 	bl	8003098 <FLASH_DATAEEPROM_FastProgramHalfWord>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	75fb      	strb	r3, [r7, #23]
 8002fa0:	e00b      	b.n	8002fba <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d106      	bne.n	8002fb6 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	68b8      	ldr	r0, [r7, #8]
 8002fac:	f000 f8ec 	bl	8003188 <FLASH_DATAEEPROM_FastProgramWord>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	75fb      	strb	r3, [r7, #23]
 8002fb4:	e001      	b.n	8002fba <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002fba:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	741a      	strb	r2, [r3, #16]

  return status;
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200009a0 	.word	0x200009a0

08002fd0 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002fe8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fec:	f7ff fe7e 	bl	8002cec <FLASH_WaitForLastOperation>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d145      	bne.n	8003086 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a24      	ldr	r2, [pc, #144]	; (8003090 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8003000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003004:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003012:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003016:	f7ff fe69 	bl	8002cec <FLASH_WaitForLastOperation>
 800301a:	4603      	mov	r3, r0
 800301c:	75fb      	strb	r3, [r7, #23]
 800301e:	e032      	b.n	8003086 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	22ff      	movs	r2, #255	; 0xff
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	4619      	mov	r1, r3
 8003050:	2002      	movs	r0, #2
 8003052:	f7ff ff1d 	bl	8002e90 <HAL_FLASHEx_DATAEEPROM_Erase>
 8003056:	4603      	mov	r3, r0
 8003058:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800305a:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 800305c:	2200      	movs	r2, #0
 800305e:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f023 0303 	bic.w	r3, r3, #3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4619      	mov	r1, r3
 800306a:	2010      	movs	r0, #16
 800306c:	f7ff ff42 	bl	8002ef4 <HAL_FLASHEx_DATAEEPROM_Program>
 8003070:	4603      	mov	r3, r0
 8003072:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8003076:	7c1b      	ldrb	r3, [r3, #16]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 800307c:	2302      	movs	r3, #2
 800307e:	e003      	b.n	8003088 <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8003082:	2201      	movs	r2, #1
 8003084:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40023c00 	.word	0x40023c00
 8003094:	200009a0 	.word	0x200009a0

08003098 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030b4:	f7ff fe1a 	bl	8002cec <FLASH_WaitForLastOperation>
 80030b8:	4603      	mov	r3, r0
 80030ba:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d158      	bne.n	8003174 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4a2e      	ldr	r2, [pc, #184]	; (8003180 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 80030c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030cc:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 80030ce:	887b      	ldrh	r3, [r7, #2]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030de:	f7ff fe05 	bl	8002cec <FLASH_WaitForLastOperation>
 80030e2:	4603      	mov	r3, r0
 80030e4:	75fb      	strb	r3, [r7, #23]
 80030e6:	e045      	b.n	8003174 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80030e8:	4b26      	ldr	r3, [pc, #152]	; (8003184 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d028      	beq.n	800314a <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	43db      	mvns	r3, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f023 0303 	bic.w	r3, r3, #3
 8003128:	4619      	mov	r1, r3
 800312a:	2002      	movs	r0, #2
 800312c:	f7ff feb0 	bl	8002e90 <HAL_FLASHEx_DATAEEPROM_Erase>
 8003130:	4603      	mov	r3, r0
 8003132:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4619      	mov	r1, r3
 800313e:	2010      	movs	r0, #16
 8003140:	f7ff fed8 	bl	8002ef4 <HAL_FLASHEx_DATAEEPROM_Program>
 8003144:	4603      	mov	r3, r0
 8003146:	75fb      	strb	r3, [r7, #23]
 8003148:	e00b      	b.n	8003162 <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 800314a:	2200      	movs	r2, #0
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	2004      	movs	r0, #4
 8003150:	f7ff fed0 	bl	8002ef4 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3301      	adds	r3, #1
 8003158:	2200      	movs	r2, #0
 800315a:	4619      	mov	r1, r3
 800315c:	2004      	movs	r0, #4
 800315e:	f7ff fec9 	bl	8002ef4 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8003164:	7c1b      	ldrb	r3, [r3, #16]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 800316a:	2302      	movs	r3, #2
 800316c:	e003      	b.n	8003176 <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8003170:	2201      	movs	r2, #1
 8003172:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003174:	7dfb      	ldrb	r3, [r7, #23]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00
 8003184:	200009a0 	.word	0x200009a0

08003188 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003196:	f24c 3050 	movw	r0, #50000	; 0xc350
 800319a:	f7ff fda7 	bl	8002cec <FLASH_WaitForLastOperation>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10e      	bne.n	80031c6 <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 80031ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b2:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031be:	f7ff fd95 	bl	8002cec <FLASH_WaitForLastOperation>
 80031c2:	4603      	mov	r3, r0
 80031c4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023c00 	.word	0x40023c00

080031d4 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031f0:	f7ff fd7c 	bl	8002cec <FLASH_WaitForLastOperation>
 80031f4:	4603      	mov	r3, r0
 80031f6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d13f      	bne.n	800327e <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800320a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800320e:	f7ff fd6d 	bl	8002cec <FLASH_WaitForLastOperation>
 8003212:	4603      	mov	r3, r0
 8003214:	75fb      	strb	r3, [r7, #23]
 8003216:	e032      	b.n	800327e <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f023 0303 	bic.w	r3, r3, #3
 800321e:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	22ff      	movs	r2, #255	; 0xff
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	43db      	mvns	r3, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f023 0303 	bic.w	r3, r3, #3
 8003246:	4619      	mov	r1, r3
 8003248:	2002      	movs	r0, #2
 800324a:	f7ff fe21 	bl	8002e90 <HAL_FLASHEx_DATAEEPROM_Erase>
 800324e:	4603      	mov	r3, r0
 8003250:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003252:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8003254:	2200      	movs	r2, #0
 8003256:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f023 0303 	bic.w	r3, r3, #3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4619      	mov	r1, r3
 8003262:	2010      	movs	r0, #16
 8003264:	f7ff fe46 	bl	8002ef4 <HAL_FLASHEx_DATAEEPROM_Program>
 8003268:	4603      	mov	r3, r0
 800326a:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 800326e:	7c1b      	ldrb	r3, [r3, #16]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <FLASH_DATAEEPROM_ProgramByte+0xa4>
 8003274:	2302      	movs	r3, #2
 8003276:	e003      	b.n	8003280 <FLASH_DATAEEPROM_ProgramByte+0xac>
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 800327a:	2201      	movs	r2, #1
 800327c:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200009a0 	.word	0x200009a0

0800328c <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80032a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032a8:	f7ff fd20 	bl	8002cec <FLASH_WaitForLastOperation>
 80032ac:	4603      	mov	r3, r0
 80032ae:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d152      	bne.n	800335c <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 80032b6:	887b      	ldrh	r3, [r7, #2]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d009      	beq.n	80032d0 <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80032c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032c6:	f7ff fd11 	bl	8002cec <FLASH_WaitForLastOperation>
 80032ca:	4603      	mov	r3, r0
 80032cc:	75fb      	strb	r3, [r7, #23]
 80032ce:	e045      	b.n	800335c <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d028      	beq.n	8003332 <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	43db      	mvns	r3, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f023 0303 	bic.w	r3, r3, #3
 8003310:	4619      	mov	r1, r3
 8003312:	2002      	movs	r0, #2
 8003314:	f7ff fdbc 	bl	8002e90 <HAL_FLASHEx_DATAEEPROM_Erase>
 8003318:	4603      	mov	r3, r0
 800331a:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f023 0303 	bic.w	r3, r3, #3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4619      	mov	r1, r3
 8003326:	2010      	movs	r0, #16
 8003328:	f7ff fde4 	bl	8002ef4 <HAL_FLASHEx_DATAEEPROM_Program>
 800332c:	4603      	mov	r3, r0
 800332e:	75fb      	strb	r3, [r7, #23]
 8003330:	e00b      	b.n	800334a <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 8003332:	2200      	movs	r2, #0
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	2004      	movs	r0, #4
 8003338:	f7ff fddc 	bl	8002ef4 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	2200      	movs	r2, #0
 8003342:	4619      	mov	r1, r3
 8003344:	2004      	movs	r0, #4
 8003346:	f7ff fdd5 	bl	8002ef4 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 800334c:	7c1b      	ldrb	r3, [r3, #16]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 8003352:	2302      	movs	r3, #2
 8003354:	e003      	b.n	800335e <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8003358:	2201      	movs	r2, #1
 800335a:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800335c:	7dfb      	ldrb	r3, [r7, #23]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200009a0 	.word	0x200009a0

0800336c <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800337a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800337e:	f7ff fcb5 	bl	8002cec <FLASH_WaitForLastOperation>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d108      	bne.n	800339e <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003392:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003396:	f7ff fca9 	bl	8002cec <FLASH_WaitForLastOperation>
 800339a:	4603      	mov	r3, r0
 800339c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 800339e:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80033be:	e154      	b.n	800366a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2101      	movs	r1, #1
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	4013      	ands	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8146 	beq.w	8003664 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d005      	beq.n	80033f0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d130      	bne.n	8003452 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2203      	movs	r2, #3
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003426:	2201      	movs	r2, #1
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	f003 0201 	and.w	r2, r3, #1
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b03      	cmp	r3, #3
 800345c:	d017      	beq.n	800348e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	2203      	movs	r2, #3
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d123      	bne.n	80034e2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	08da      	lsrs	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3208      	adds	r2, #8
 80034a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	08da      	lsrs	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3208      	adds	r2, #8
 80034dc:	6939      	ldr	r1, [r7, #16]
 80034de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	2203      	movs	r2, #3
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0203 	and.w	r2, r3, #3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80a0 	beq.w	8003664 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003524:	4b58      	ldr	r3, [pc, #352]	; (8003688 <HAL_GPIO_Init+0x2e0>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a57      	ldr	r2, [pc, #348]	; (8003688 <HAL_GPIO_Init+0x2e0>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	4b55      	ldr	r3, [pc, #340]	; (8003688 <HAL_GPIO_Init+0x2e0>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800353c:	4a53      	ldr	r2, [pc, #332]	; (800368c <HAL_GPIO_Init+0x2e4>)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	3302      	adds	r3, #2
 8003544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003548:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	220f      	movs	r2, #15
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a4b      	ldr	r2, [pc, #300]	; (8003690 <HAL_GPIO_Init+0x2e8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d019      	beq.n	800359c <HAL_GPIO_Init+0x1f4>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a4a      	ldr	r2, [pc, #296]	; (8003694 <HAL_GPIO_Init+0x2ec>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <HAL_GPIO_Init+0x1f0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a49      	ldr	r2, [pc, #292]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00d      	beq.n	8003594 <HAL_GPIO_Init+0x1ec>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a48      	ldr	r2, [pc, #288]	; (800369c <HAL_GPIO_Init+0x2f4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <HAL_GPIO_Init+0x1e8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a47      	ldr	r2, [pc, #284]	; (80036a0 <HAL_GPIO_Init+0x2f8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_GPIO_Init+0x1e4>
 8003588:	2304      	movs	r3, #4
 800358a:	e008      	b.n	800359e <HAL_GPIO_Init+0x1f6>
 800358c:	2305      	movs	r3, #5
 800358e:	e006      	b.n	800359e <HAL_GPIO_Init+0x1f6>
 8003590:	2303      	movs	r3, #3
 8003592:	e004      	b.n	800359e <HAL_GPIO_Init+0x1f6>
 8003594:	2302      	movs	r3, #2
 8003596:	e002      	b.n	800359e <HAL_GPIO_Init+0x1f6>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_GPIO_Init+0x1f6>
 800359c:	2300      	movs	r3, #0
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	f002 0203 	and.w	r2, r2, #3
 80035a4:	0092      	lsls	r2, r2, #2
 80035a6:	4093      	lsls	r3, r2
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035ae:	4937      	ldr	r1, [pc, #220]	; (800368c <HAL_GPIO_Init+0x2e4>)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	3302      	adds	r3, #2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035bc:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <HAL_GPIO_Init+0x2fc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035e0:	4a30      	ldr	r2, [pc, #192]	; (80036a4 <HAL_GPIO_Init+0x2fc>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035e6:	4b2f      	ldr	r3, [pc, #188]	; (80036a4 <HAL_GPIO_Init+0x2fc>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800360a:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <HAL_GPIO_Init+0x2fc>)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003610:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_GPIO_Init+0x2fc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003634:	4a1b      	ldr	r2, [pc, #108]	; (80036a4 <HAL_GPIO_Init+0x2fc>)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800363a:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <HAL_GPIO_Init+0x2fc>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	43db      	mvns	r3, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800365e:	4a11      	ldr	r2, [pc, #68]	; (80036a4 <HAL_GPIO_Init+0x2fc>)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	3301      	adds	r3, #1
 8003668:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	f47f aea3 	bne.w	80033c0 <HAL_GPIO_Init+0x18>
  }
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800
 800368c:	40010000 	.word	0x40010000
 8003690:	40020000 	.word	0x40020000
 8003694:	40020400 	.word	0x40020400
 8003698:	40020800 	.word	0x40020800
 800369c:	40020c00 	.word	0x40020c00
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40010400 	.word	0x40010400

080036a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	887b      	ldrh	r3, [r7, #2]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
 80036c4:	e001      	b.n	80036ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	807b      	strh	r3, [r7, #2]
 80036e2:	4613      	mov	r3, r2
 80036e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036e6:	787b      	ldrb	r3, [r7, #1]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ec:	887a      	ldrh	r2, [r7, #2]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80036f2:	e003      	b.n	80036fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	041a      	lsls	r2, r3, #16
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	619a      	str	r2, [r3, #24]
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
	...

08003708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d006      	beq.n	800372c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe f9c4 	bl	8001ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40010400 	.word	0x40010400

08003738 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373a:	b08b      	sub	sp, #44	; 0x2c
 800373c:	af06      	add	r7, sp, #24
 800373e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0d0      	b.n	80038ec <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f006 fff2 	bl	800a748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2203      	movs	r2, #3
 8003768:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f003 f855 	bl	8006820 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003776:	2300      	movs	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]
 800377a:	e04c      	b.n	8003816 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	3301      	adds	r3, #1
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	440b      	add	r3, r1
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	b298      	uxth	r0, r3
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	3336      	adds	r3, #54	; 0x36
 80037ba:	4602      	mov	r2, r0
 80037bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	3303      	adds	r3, #3
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037d4:	7bfa      	ldrb	r2, [r7, #15]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	440b      	add	r3, r1
 80037e2:	3338      	adds	r3, #56	; 0x38
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	440b      	add	r3, r1
 80037f6:	333c      	adds	r3, #60	; 0x3c
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037fc:	7bfa      	ldrb	r2, [r7, #15]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	3340      	adds	r3, #64	; 0x40
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	3301      	adds	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
 8003816:	7bfa      	ldrb	r2, [r7, #15]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d3ad      	bcc.n	800377c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	e044      	b.n	80038b0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	440b      	add	r3, r1
 8003834:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	440b      	add	r3, r1
 800384a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800384e:	7bfa      	ldrb	r2, [r7, #15]
 8003850:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	440b      	add	r3, r1
 8003860:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	440b      	add	r3, r1
 8003876:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800387e:	7bfa      	ldrb	r2, [r7, #15]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	440b      	add	r3, r1
 800388c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	440b      	add	r3, r1
 80038a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	3301      	adds	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d3b5      	bcc.n	8003826 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	687e      	ldr	r6, [r7, #4]
 80038c2:	466d      	mov	r5, sp
 80038c4:	f106 0410 	add.w	r4, r6, #16
 80038c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	602b      	str	r3, [r5, #0]
 80038d0:	1d33      	adds	r3, r6, #4
 80038d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d4:	6838      	ldr	r0, [r7, #0]
 80038d6:	f002 ffbd 	bl	8006854 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_PCD_Start+0x16>
 8003906:	2302      	movs	r3, #2
 8003908:	e016      	b.n	8003938 <HAL_PCD_Start+0x44>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f002 ff6c 	bl	80067f4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800391c:	2101      	movs	r1, #1
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f006 fef4 	bl	800a70c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f005 f910 	bl	8008b4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f005 f908 	bl	8008b62 <USB_ReadInterrupts>
 8003952:	4603      	mov	r3, r0
 8003954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395c:	d102      	bne.n	8003964 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 faf5 	bl	8003f4e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f005 f8fa 	bl	8008b62 <USB_ReadInterrupts>
 800396e:	4603      	mov	r3, r0
 8003970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003978:	d112      	bne.n	80039a0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398c:	b292      	uxth	r2, r2
 800398e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f006 ff53 	bl	800a83e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003998:	2100      	movs	r1, #0
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8c7 	bl	8003b2e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f005 f8dc 	bl	8008b62 <USB_ReadInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039b4:	d10b      	bne.n	80039ce <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039c8:	b292      	uxth	r2, r2
 80039ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f005 f8c5 	bl	8008b62 <USB_ReadInterrupts>
 80039d8:	4603      	mov	r3, r0
 80039da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e2:	d10b      	bne.n	80039fc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039f6:	b292      	uxth	r2, r2
 80039f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f005 f8ae 	bl	8008b62 <USB_ReadInterrupts>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a10:	d126      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0204 	bic.w	r2, r2, #4
 8003a24:	b292      	uxth	r2, r2
 8003a26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0208 	bic.w	r2, r2, #8
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f006 ff34 	bl	800a8b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a5a:	b292      	uxth	r2, r2
 8003a5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f005 f87c 	bl	8008b62 <USB_ReadInterrupts>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a74:	d126      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0208 	orr.w	r2, r2, #8
 8003a88:	b292      	uxth	r2, r2
 8003a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa0:	b292      	uxth	r2, r2
 8003aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0204 	orr.w	r2, r2, #4
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f006 fedc 	bl	800a87c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f005 f84a 	bl	8008b62 <USB_ReadInterrupts>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d10e      	bne.n	8003af8 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003aec:	b292      	uxth	r2, r2
 8003aee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f006 fe95 	bl	800a822 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f005 f830 	bl	8008b62 <USB_ReadInterrupts>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0c:	d10b      	bne.n	8003b26 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b20:	b292      	uxth	r2, r2
 8003b22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_PCD_SetAddress+0x1a>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e013      	b.n	8003b70 <HAL_PCD_SetAddress+0x42>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f004 ffe1 	bl	8008b28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	461a      	mov	r2, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	70fb      	strb	r3, [r7, #3]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	803b      	strh	r3, [r7, #0]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	da0e      	bge.n	8003bbc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	705a      	strb	r2, [r3, #1]
 8003bba:	e00e      	b.n	8003bda <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 0207 	and.w	r2, r3, #7
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003be6:	883a      	ldrh	r2, [r7, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	78ba      	ldrb	r2, [r7, #2]
 8003bf0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	785b      	ldrb	r3, [r3, #1]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d004      	beq.n	8003c04 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c04:	78bb      	ldrb	r3, [r7, #2]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d102      	bne.n	8003c10 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_PCD_EP_Open+0xa6>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e00e      	b.n	8003c3c <HAL_PCD_EP_Open+0xc4>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f002 fe31 	bl	8006894 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	da0e      	bge.n	8003c76 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	705a      	strb	r2, [r3, #1]
 8003c74:	e00e      	b.n	8003c94 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	f003 0207 	and.w	r2, r3, #7
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_PCD_EP_Close+0x6a>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e00e      	b.n	8003ccc <HAL_PCD_EP_Close+0x88>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f003 f953 	bl	8006f68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce4:	7afb      	ldrb	r3, [r7, #11]
 8003ce6:	f003 0207 	and.w	r2, r3, #7
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2200      	movs	r2, #0
 8003d12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d14:	7afb      	ldrb	r3, [r7, #11]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6979      	ldr	r1, [r7, #20]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f003 fb05 	bl	8007340 <USB_EPStartXfer>
 8003d36:	e005      	b.n	8003d44 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6979      	ldr	r1, [r7, #20]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f003 fafe 	bl	8007340 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	f003 0207 	and.w	r2, r3, #7
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003d70:	681b      	ldr	r3, [r3, #0]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d8c:	7afb      	ldrb	r3, [r7, #11]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc8:	7afb      	ldrb	r3, [r7, #11]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dd4:	7afb      	ldrb	r3, [r7, #11]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6979      	ldr	r1, [r7, #20]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 faab 	bl	8007340 <USB_EPStartXfer>
 8003dea:	e005      	b.n	8003df8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6979      	ldr	r1, [r7, #20]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f003 faa4 	bl	8007340 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	f003 0207 	and.w	r2, r3, #7
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d901      	bls.n	8003e20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e03e      	b.n	8003e9e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	da0e      	bge.n	8003e46 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	705a      	strb	r2, [r3, #1]
 8003e44:	e00c      	b.n	8003e60 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_PCD_EP_SetStall+0x7e>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e00e      	b.n	8003e9e <HAL_PCD_EP_SetStall+0x9c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68f9      	ldr	r1, [r7, #12]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f004 fd4d 	bl	800892e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	f003 020f 	and.w	r2, r3, #15
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d901      	bls.n	8003ec4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e040      	b.n	8003f46 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	da0e      	bge.n	8003eea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	705a      	strb	r2, [r3, #1]
 8003ee8:	e00e      	b.n	8003f08 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	f003 0207 	and.w	r2, r3, #7
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_PCD_EP_ClrStall+0x82>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e00e      	b.n	8003f46 <HAL_PCD_EP_ClrStall+0xa0>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68f9      	ldr	r1, [r7, #12]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f004 fd49 	bl	80089ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b08e      	sub	sp, #56	; 0x38
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f56:	e2ec      	b.n	8004532 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f60:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003f6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 8161 	bne.w	800423a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d152      	bne.n	8004028 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	81fb      	strh	r3, [r7, #14]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	89fb      	ldrh	r3, [r7, #14]
 8003f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3328      	adds	r3, #40	; 0x28
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	441a      	add	r2, r3
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f006 fc00 	bl	800a7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 829b 	beq.w	8004532 <PCD_EP_ISR_Handler+0x5e4>
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f040 8296 	bne.w	8004532 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004012:	b2da      	uxtb	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	b292      	uxth	r2, r2
 800401a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004026:	e284      	b.n	8004532 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004038:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800403a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403e:	2b00      	cmp	r3, #0
 8004040:	d034      	beq.n	80040ac <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404a:	b29b      	uxth	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	3306      	adds	r3, #6
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004080:	b29b      	uxth	r3, r3
 8004082:	f004 fdc2 	bl	8008c0a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29a      	uxth	r2, r3
 800408e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004092:	4013      	ands	r3, r2
 8004094:	823b      	strh	r3, [r7, #16]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	8a3a      	ldrh	r2, [r7, #16]
 800409c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040a0:	b292      	uxth	r2, r2
 80040a2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f006 fb75 	bl	800a794 <HAL_PCD_SetupStageCallback>
 80040aa:	e242      	b.n	8004532 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80040ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f280 823e 	bge.w	8004532 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040c2:	4013      	ands	r3, r2
 80040c4:	83bb      	strh	r3, [r7, #28]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	8bba      	ldrh	r2, [r7, #28]
 80040cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040d0:	b292      	uxth	r2, r2
 80040d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040dc:	b29b      	uxth	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4413      	add	r3, r2
 80040e8:	3306      	adds	r3, #6
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d019      	beq.n	800413c <PCD_EP_ISR_Handler+0x1ee>
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d015      	beq.n	800413c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	6959      	ldr	r1, [r3, #20]
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004120:	b29b      	uxth	r3, r3
 8004122:	f004 fd72 	bl	8008c0a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	441a      	add	r2, r3
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004134:	2100      	movs	r1, #0
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f006 fb3e 	bl	800a7b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 81f2 	bne.w	8004532 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415c:	b29b      	uxth	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	4413      	add	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d112      	bne.n	800419c <PCD_EP_ISR_Handler+0x24e>
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004180:	b29a      	uxth	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	b29b      	uxth	r3, r3
 800418c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004194:	b29a      	uxth	r2, r3
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	e02f      	b.n	80041fc <PCD_EP_ISR_Handler+0x2ae>
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b3e      	cmp	r3, #62	; 0x3e
 80041a2:	d813      	bhi.n	80041cc <PCD_EP_ISR_Handler+0x27e>
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	633b      	str	r3, [r7, #48]	; 0x30
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <PCD_EP_ISR_Handler+0x270>
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	3301      	adds	r3, #1
 80041bc:	633b      	str	r3, [r7, #48]	; 0x30
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	801a      	strh	r2, [r3, #0]
 80041ca:	e017      	b.n	80041fc <PCD_EP_ISR_Handler+0x2ae>
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	633b      	str	r3, [r7, #48]	; 0x30
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <PCD_EP_ISR_Handler+0x298>
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	3b01      	subs	r3, #1
 80041e4:	633b      	str	r3, [r7, #48]	; 0x30
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	029b      	lsls	r3, r3, #10
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420c:	827b      	strh	r3, [r7, #18]
 800420e:	8a7b      	ldrh	r3, [r7, #18]
 8004210:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004214:	827b      	strh	r3, [r7, #18]
 8004216:	8a7b      	ldrh	r3, [r7, #18]
 8004218:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800421c:	827b      	strh	r3, [r7, #18]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	8a7b      	ldrh	r3, [r7, #18]
 8004224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004234:	b29b      	uxth	r3, r3
 8004236:	8013      	strh	r3, [r2, #0]
 8004238:	e17b      	b.n	8004532 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800424c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004250:	2b00      	cmp	r3, #0
 8004252:	f280 80ea 	bge.w	800442a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29a      	uxth	r2, r3
 8004268:	f640 738f 	movw	r3, #3983	; 0xf8f
 800426c:	4013      	ands	r3, r2
 800426e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004284:	b292      	uxth	r2, r2
 8004286:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004288:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	4413      	add	r3, r2
 800429c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	7b1b      	ldrb	r3, [r3, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d122      	bne.n	80042ec <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4413      	add	r3, r2
 80042ba:	3306      	adds	r3, #6
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ce:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80042d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8087 	beq.w	80043e6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	6959      	ldr	r1, [r3, #20]
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	88da      	ldrh	r2, [r3, #6]
 80042e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042e6:	f004 fc90 	bl	8008c0a <USB_ReadPMA>
 80042ea:	e07c      	b.n	80043e6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	78db      	ldrb	r3, [r3, #3]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d108      	bne.n	8004306 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80042f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042f6:	461a      	mov	r2, r3
 80042f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f927 	bl	800454e <HAL_PCD_EP_DB_Receive>
 8004300:	4603      	mov	r3, r0
 8004302:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004304:	e06f      	b.n	80043e6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004320:	847b      	strh	r3, [r7, #34]	; 0x22
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	441a      	add	r2, r3
 8004330:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800433a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800433e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004342:	b29b      	uxth	r3, r3
 8004344:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d021      	beq.n	80043a4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004368:	b29b      	uxth	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4413      	add	r3, r2
 8004374:	3302      	adds	r3, #2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004388:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800438a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800438c:	2b00      	cmp	r3, #0
 800438e:	d02a      	beq.n	80043e6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	6959      	ldr	r1, [r3, #20]
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	891a      	ldrh	r2, [r3, #8]
 800439c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800439e:	f004 fc34 	bl	8008c0a <USB_ReadPMA>
 80043a2:	e020      	b.n	80043e6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4413      	add	r3, r2
 80043b8:	3306      	adds	r3, #6
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043cc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80043ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	6959      	ldr	r1, [r3, #20]
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	895a      	ldrh	r2, [r3, #10]
 80043e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043e2:	f004 fc12 	bl	8008c0a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043ec:	441a      	add	r2, r3
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043f8:	441a      	add	r2, r3
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <PCD_EP_ISR_Handler+0x4c2>
 8004406:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	429a      	cmp	r2, r3
 800440e:	d206      	bcs.n	800441e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f006 f9ce 	bl	800a7b8 <HAL_PCD_DataOutStageCallback>
 800441c:	e005      	b.n	800442a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004424:	4618      	mov	r0, r3
 8004426:	f002 ff8b 	bl	8007340 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800442a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b00      	cmp	r3, #0
 8004432:	d07e      	beq.n	8004532 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004434:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	b29b      	uxth	r3, r3
 800445a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	843b      	strh	r3, [r7, #32]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	8c3b      	ldrh	r3, [r7, #32]
 8004474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800447c:	b29b      	uxth	r3, r3
 800447e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	78db      	ldrb	r3, [r3, #3]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d00c      	beq.n	80044a2 <PCD_EP_ISR_Handler+0x554>
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	78db      	ldrb	r3, [r3, #3]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004494:	2b02      	cmp	r3, #2
 8004496:	d146      	bne.n	8004526 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004498:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d141      	bne.n	8004526 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	3302      	adds	r3, #2
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ca:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	699a      	ldr	r2, [r3, #24]
 80044d0:	8bfb      	ldrh	r3, [r7, #30]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d906      	bls.n	80044e4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	8bfb      	ldrh	r3, [r7, #30]
 80044dc:	1ad2      	subs	r2, r2, r3
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	619a      	str	r2, [r3, #24]
 80044e2:	e002      	b.n	80044ea <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	2200      	movs	r2, #0
 80044e8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f006 f978 	bl	800a7ee <HAL_PCD_DataInStageCallback>
 80044fe:	e018      	b.n	8004532 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	695a      	ldr	r2, [r3, #20]
 8004504:	8bfb      	ldrh	r3, [r7, #30]
 8004506:	441a      	add	r2, r3
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	8bfb      	ldrh	r3, [r7, #30]
 8004512:	441a      	add	r2, r3
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800451e:	4618      	mov	r0, r3
 8004520:	f002 ff0e 	bl	8007340 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004524:	e005      	b.n	8004532 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004526:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004528:	461a      	mov	r2, r3
 800452a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f91b 	bl	8004768 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800453a:	b29b      	uxth	r3, r3
 800453c:	b21b      	sxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	f6ff ad0a 	blt.w	8003f58 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3738      	adds	r7, #56	; 0x38
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b088      	sub	sp, #32
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	4613      	mov	r3, r2
 800455a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d07e      	beq.n	8004664 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800456e:	b29b      	uxth	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	3302      	adds	r3, #2
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800458e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	8b7b      	ldrh	r3, [r7, #26]
 8004596:	429a      	cmp	r2, r3
 8004598:	d306      	bcc.n	80045a8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	8b7b      	ldrh	r3, [r7, #26]
 80045a0:	1ad2      	subs	r2, r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	619a      	str	r2, [r3, #24]
 80045a6:	e002      	b.n	80045ae <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2200      	movs	r2, #0
 80045ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d123      	bne.n	80045fe <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d0:	833b      	strh	r3, [r7, #24]
 80045d2:	8b3b      	ldrh	r3, [r7, #24]
 80045d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045d8:	833b      	strh	r3, [r7, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	441a      	add	r2, r3
 80045e8:	8b3b      	ldrh	r3, [r7, #24]
 80045ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01f      	beq.n	8004648 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004622:	82fb      	strh	r3, [r7, #22]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	8afb      	ldrh	r3, [r7, #22]
 8004634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004640:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004644:	b29b      	uxth	r3, r3
 8004646:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004648:	8b7b      	ldrh	r3, [r7, #26]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 8087 	beq.w	800475e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	6959      	ldr	r1, [r3, #20]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	891a      	ldrh	r2, [r3, #8]
 800465c:	8b7b      	ldrh	r3, [r7, #26]
 800465e:	f004 fad4 	bl	8008c0a <USB_ReadPMA>
 8004662:	e07c      	b.n	800475e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466c:	b29b      	uxth	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	3306      	adds	r3, #6
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800468c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	8b7b      	ldrh	r3, [r7, #26]
 8004694:	429a      	cmp	r2, r3
 8004696:	d306      	bcc.n	80046a6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	699a      	ldr	r2, [r3, #24]
 800469c:	8b7b      	ldrh	r3, [r7, #26]
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	619a      	str	r2, [r3, #24]
 80046a4:	e002      	b.n	80046ac <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2200      	movs	r2, #0
 80046aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d123      	bne.n	80046fc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	83fb      	strh	r3, [r7, #30]
 80046d0:	8bfb      	ldrh	r3, [r7, #30]
 80046d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046d6:	83fb      	strh	r3, [r7, #30]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	8bfb      	ldrh	r3, [r7, #30]
 80046e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11f      	bne.n	8004746 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004720:	83bb      	strh	r3, [r7, #28]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	8bbb      	ldrh	r3, [r7, #28]
 8004732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004742:	b29b      	uxth	r3, r3
 8004744:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004746:	8b7b      	ldrh	r3, [r7, #26]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	6959      	ldr	r1, [r3, #20]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	895a      	ldrh	r2, [r3, #10]
 8004758:	8b7b      	ldrh	r3, [r7, #26]
 800475a:	f004 fa56 	bl	8008c0a <USB_ReadPMA>
    }
  }

  return count;
 800475e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b0a2      	sub	sp, #136	; 0x88
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	4613      	mov	r3, r2
 8004774:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 81c7 	beq.w	8004b10 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	3302      	adds	r3, #2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d907      	bls.n	80047ca <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	619a      	str	r2, [r3, #24]
 80047c8:	e002      	b.n	80047d0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f040 80b9 	bne.w	800494c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	785b      	ldrb	r3, [r3, #1]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d126      	bne.n	8004830 <HAL_PCD_EP_DB_Transmit+0xc8>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	4413      	add	r3, r2
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	011a      	lsls	r2, r3, #4
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	4413      	add	r3, r2
 8004804:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004814:	b29a      	uxth	r2, r3
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004828:	b29a      	uxth	r2, r3
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	801a      	strh	r2, [r3, #0]
 800482e:	e01a      	b.n	8004866 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d116      	bne.n	8004866 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	633b      	str	r3, [r7, #48]	; 0x30
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004846:	b29b      	uxth	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	4413      	add	r3, r2
 800484e:	633b      	str	r3, [r7, #48]	; 0x30
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	011a      	lsls	r2, r3, #4
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	4413      	add	r3, r2
 800485a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004862:	2200      	movs	r2, #0
 8004864:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d126      	bne.n	80048c2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	4413      	add	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	011a      	lsls	r2, r3, #4
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	4413      	add	r3, r2
 8004896:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	e017      	b.n	80048f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d113      	bne.n	80048f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	4413      	add	r3, r2
 80048da:	623b      	str	r3, [r7, #32]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	011a      	lsls	r2, r3, #4
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	4413      	add	r3, r2
 80048e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2200      	movs	r2, #0
 80048f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	4619      	mov	r1, r3
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f005 ff78 	bl	800a7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 82d4 	beq.w	8004eb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004924:	827b      	strh	r3, [r7, #18]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	441a      	add	r2, r3
 8004934:	8a7b      	ldrh	r3, [r7, #18]
 8004936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800493a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004946:	b29b      	uxth	r3, r3
 8004948:	8013      	strh	r3, [r2, #0]
 800494a:	e2b2      	b.n	8004eb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d021      	beq.n	800499a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004970:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004996:	b29b      	uxth	r3, r3
 8004998:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	f040 8286 	bne.w	8004eb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049ae:	441a      	add	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049bc:	441a      	add	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6a1a      	ldr	r2, [r3, #32]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d309      	bcc.n	80049e2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	6a1a      	ldr	r2, [r3, #32]
 80049d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049da:	1ad2      	subs	r2, r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	621a      	str	r2, [r3, #32]
 80049e0:	e015      	b.n	8004a0e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d107      	bne.n	80049fa <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80049ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049f8:	e009      	b.n	8004a0e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	785b      	ldrb	r3, [r3, #1]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d155      	bne.n	8004ac2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	4413      	add	r3, r2
 8004a2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	011a      	lsls	r2, r3, #4
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	4413      	add	r3, r2
 8004a38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d112      	bne.n	8004a6a <HAL_PCD_EP_DB_Transmit+0x302>
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a52:	801a      	strh	r2, [r3, #0]
 8004a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	e047      	b.n	8004afa <HAL_PCD_EP_DB_Transmit+0x392>
 8004a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8004a6e:	d811      	bhi.n	8004a94 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a82:	3301      	adds	r3, #1
 8004a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	029b      	lsls	r3, r3, #10
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a90:	801a      	strh	r2, [r3, #0]
 8004a92:	e032      	b.n	8004afa <HAL_PCD_EP_DB_Transmit+0x392>
 8004a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d102      	bne.n	8004aaa <HAL_PCD_EP_DB_Transmit+0x342>
 8004aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	029b      	lsls	r3, r3, #10
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	e01b      	b.n	8004afa <HAL_PCD_EP_DB_Transmit+0x392>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d117      	bne.n	8004afa <HAL_PCD_EP_DB_Transmit+0x392>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ade:	4413      	add	r3, r2
 8004ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	011a      	lsls	r2, r3, #4
 8004ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aea:	4413      	add	r3, r2
 8004aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6959      	ldr	r1, [r3, #20]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	891a      	ldrh	r2, [r3, #8]
 8004b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f004 f839 	bl	8008b80 <USB_WritePMA>
 8004b0e:	e1d0      	b.n	8004eb2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4413      	add	r3, r2
 8004b24:	3306      	adds	r3, #6
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d307      	bcc.n	8004b58 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	699a      	ldr	r2, [r3, #24]
 8004b4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b50:	1ad2      	subs	r2, r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	619a      	str	r2, [r3, #24]
 8004b56:	e002      	b.n	8004b5e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f040 80c4 	bne.w	8004cf0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	785b      	ldrb	r3, [r3, #1]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d126      	bne.n	8004bbe <HAL_PCD_EP_DB_Transmit+0x456>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b84:	4413      	add	r3, r2
 8004b86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	011a      	lsls	r2, r3, #4
 8004b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b90:	4413      	add	r3, r2
 8004b92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ba6:	801a      	strh	r2, [r3, #0]
 8004ba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	e01a      	b.n	8004bf4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d116      	bne.n	8004bf4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	677b      	str	r3, [r7, #116]	; 0x74
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bda:	4413      	add	r3, r2
 8004bdc:	677b      	str	r3, [r7, #116]	; 0x74
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	011a      	lsls	r2, r3, #4
 8004be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be6:	4413      	add	r3, r2
 8004be8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bec:	673b      	str	r3, [r7, #112]	; 0x70
 8004bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	785b      	ldrb	r3, [r3, #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d12f      	bne.n	8004c62 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	011a      	lsls	r2, r3, #4
 8004c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c5e:	801a      	strh	r2, [r3, #0]
 8004c60:	e017      	b.n	8004c92 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d113      	bne.n	8004c92 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c78:	4413      	add	r3, r2
 8004c7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	011a      	lsls	r2, r3, #4
 8004c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c84:	4413      	add	r3, r2
 8004c86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c8e:	2200      	movs	r2, #0
 8004c90:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	4619      	mov	r1, r3
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f005 fda8 	bl	800a7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f040 8104 	bne.w	8004eb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	441a      	add	r2, r3
 8004cd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]
 8004cee:	e0e0      	b.n	8004eb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d121      	bne.n	8004d3e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d14:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	441a      	add	r2, r3
 8004d26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	f040 80b4 	bne.w	8004eb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d52:	441a      	add	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d60:	441a      	add	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6a1a      	ldr	r2, [r3, #32]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d309      	bcc.n	8004d86 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	6a1a      	ldr	r2, [r3, #32]
 8004d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7e:	1ad2      	subs	r2, r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	621a      	str	r2, [r3, #32]
 8004d84:	e015      	b.n	8004db2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d107      	bne.n	8004d9e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004d8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d9c:	e009      	b.n	8004db2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2200      	movs	r2, #0
 8004da8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	667b      	str	r3, [r7, #100]	; 0x64
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d155      	bne.n	8004e6c <HAL_PCD_EP_DB_Transmit+0x704>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd4:	4413      	add	r3, r2
 8004dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	011a      	lsls	r2, r3, #4
 8004dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de0:	4413      	add	r3, r2
 8004de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004de6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d112      	bne.n	8004e14 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dfc:	801a      	strh	r2, [r3, #0]
 8004dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e10:	801a      	strh	r2, [r3, #0]
 8004e12:	e044      	b.n	8004e9e <HAL_PCD_EP_DB_Transmit+0x736>
 8004e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e16:	2b3e      	cmp	r3, #62	; 0x3e
 8004e18:	d811      	bhi.n	8004e3e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	029b      	lsls	r3, r3, #10
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	e02f      	b.n	8004e9e <HAL_PCD_EP_DB_Transmit+0x736>
 8004e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	657b      	str	r3, [r7, #84]	; 0x54
 8004e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e50:	3b01      	subs	r3, #1
 8004e52:	657b      	str	r3, [r7, #84]	; 0x54
 8004e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	e018      	b.n	8004e9e <HAL_PCD_EP_DB_Transmit+0x736>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d114      	bne.n	8004e9e <HAL_PCD_EP_DB_Transmit+0x736>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e82:	4413      	add	r3, r2
 8004e84:	667b      	str	r3, [r7, #100]	; 0x64
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	011a      	lsls	r2, r3, #4
 8004e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e8e:	4413      	add	r3, r2
 8004e90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e94:	663b      	str	r3, [r7, #96]	; 0x60
 8004e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e9c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6959      	ldr	r1, [r3, #20]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	895a      	ldrh	r2, [r3, #10]
 8004eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f003 fe67 	bl	8008b80 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ecc:	823b      	strh	r3, [r7, #16]
 8004ece:	8a3b      	ldrh	r3, [r7, #16]
 8004ed0:	f083 0310 	eor.w	r3, r3, #16
 8004ed4:	823b      	strh	r3, [r7, #16]
 8004ed6:	8a3b      	ldrh	r3, [r7, #16]
 8004ed8:	f083 0320 	eor.w	r3, r3, #32
 8004edc:	823b      	strh	r3, [r7, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	8a3b      	ldrh	r3, [r7, #16]
 8004eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3788      	adds	r7, #136	; 0x88
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	817b      	strh	r3, [r7, #10]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f1e:	897b      	ldrh	r3, [r7, #10]
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f2a:	897b      	ldrh	r3, [r7, #10]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e009      	b.n	8004f56 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f42:	897a      	ldrh	r2, [r7, #10]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f56:	893b      	ldrh	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d107      	bne.n	8004f6c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	80da      	strh	r2, [r3, #6]
 8004f6a:	e00b      	b.n	8004f84 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e31d      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fa2:	4b94      	ldr	r3, [pc, #592]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fac:	4b91      	ldr	r3, [pc, #580]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d07b      	beq.n	80050ba <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d006      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d10f      	bne.n	8004fee <HAL_RCC_OscConfig+0x5e>
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd4:	d10b      	bne.n	8004fee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd6:	4b87      	ldr	r3, [pc, #540]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d06a      	beq.n	80050b8 <HAL_RCC_OscConfig+0x128>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d166      	bne.n	80050b8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e2f7      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d106      	bne.n	8005004 <HAL_RCC_OscConfig+0x74>
 8004ff6:	4b7f      	ldr	r3, [pc, #508]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a7e      	ldr	r2, [pc, #504]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8004ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	e02d      	b.n	8005060 <HAL_RCC_OscConfig+0xd0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10c      	bne.n	8005026 <HAL_RCC_OscConfig+0x96>
 800500c:	4b79      	ldr	r3, [pc, #484]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a78      	ldr	r2, [pc, #480]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8005012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	4b76      	ldr	r3, [pc, #472]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a75      	ldr	r2, [pc, #468]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 800501e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	e01c      	b.n	8005060 <HAL_RCC_OscConfig+0xd0>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b05      	cmp	r3, #5
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0xb8>
 800502e:	4b71      	ldr	r3, [pc, #452]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a70      	ldr	r2, [pc, #448]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8005034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4b6e      	ldr	r3, [pc, #440]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a6d      	ldr	r2, [pc, #436]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8005040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e00b      	b.n	8005060 <HAL_RCC_OscConfig+0xd0>
 8005048:	4b6a      	ldr	r3, [pc, #424]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a69      	ldr	r2, [pc, #420]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 800504e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b67      	ldr	r3, [pc, #412]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a66      	ldr	r2, [pc, #408]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 800505a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d013      	beq.n	8005090 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fd fcc6 	bl	80029f8 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005070:	f7fd fcc2 	bl	80029f8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e2ad      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005082:	4b5c      	ldr	r3, [pc, #368]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0xe0>
 800508e:	e014      	b.n	80050ba <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005090:	f7fd fcb2 	bl	80029f8 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005098:	f7fd fcae 	bl	80029f8 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	; 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e299      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050aa:	4b52      	ldr	r3, [pc, #328]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x108>
 80050b6:	e000      	b.n	80050ba <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d05a      	beq.n	800517c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d119      	bne.n	8005106 <HAL_RCC_OscConfig+0x176>
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d116      	bne.n	8005106 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d8:	4b46      	ldr	r3, [pc, #280]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_OscConfig+0x160>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e276      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f0:	4b40      	ldr	r3, [pc, #256]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	493d      	ldr	r1, [pc, #244]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8005100:	4313      	orrs	r3, r2
 8005102:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005104:	e03a      	b.n	800517c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d020      	beq.n	8005150 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800510e:	4b3a      	ldr	r3, [pc, #232]	; (80051f8 <HAL_RCC_OscConfig+0x268>)
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fd fc70 	bl	80029f8 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800511c:	f7fd fc6c 	bl	80029f8 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e257      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800512e:	4b31      	ldr	r3, [pc, #196]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513a:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	492a      	ldr	r1, [pc, #168]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 800514a:	4313      	orrs	r3, r2
 800514c:	604b      	str	r3, [r1, #4]
 800514e:	e015      	b.n	800517c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005150:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <HAL_RCC_OscConfig+0x268>)
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7fd fc4f 	bl	80029f8 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800515e:	f7fd fc4b 	bl	80029f8 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e236      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005170:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1f0      	bne.n	800515e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 80b8 	beq.w	80052fa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d170      	bne.n	8005272 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005190:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_RCC_OscConfig+0x218>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e21a      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1a      	ldr	r2, [r3, #32]
 80051ac:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d921      	bls.n	80051fc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fc19 	bl	80059f4 <RCC_SetFlashLatencyFromMSIRange>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e208      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	4906      	ldr	r1, [pc, #24]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	4901      	ldr	r1, [pc, #4]	; (80051f4 <HAL_RCC_OscConfig+0x264>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
 80051f2:	e020      	b.n	8005236 <HAL_RCC_OscConfig+0x2a6>
 80051f4:	40023800 	.word	0x40023800
 80051f8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051fc:	4ba4      	ldr	r3, [pc, #656]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	49a1      	ldr	r1, [pc, #644]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800520e:	4ba0      	ldr	r3, [pc, #640]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	061b      	lsls	r3, r3, #24
 800521c:	499c      	ldr	r1, [pc, #624]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 800521e:	4313      	orrs	r3, r2
 8005220:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fbe4 	bl	80059f4 <RCC_SetFlashLatencyFromMSIRange>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e1d3      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	0b5b      	lsrs	r3, r3, #13
 800523c:	3301      	adds	r3, #1
 800523e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005246:	4a92      	ldr	r2, [pc, #584]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005248:	6892      	ldr	r2, [r2, #8]
 800524a:	0912      	lsrs	r2, r2, #4
 800524c:	f002 020f 	and.w	r2, r2, #15
 8005250:	4990      	ldr	r1, [pc, #576]	; (8005494 <HAL_RCC_OscConfig+0x504>)
 8005252:	5c8a      	ldrb	r2, [r1, r2]
 8005254:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005256:	4a90      	ldr	r2, [pc, #576]	; (8005498 <HAL_RCC_OscConfig+0x508>)
 8005258:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800525a:	4b90      	ldr	r3, [pc, #576]	; (800549c <HAL_RCC_OscConfig+0x50c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fd fb7e 	bl	8002960 <HAL_InitTick>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d045      	beq.n	80052fa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	e1b5      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d029      	beq.n	80052ce <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800527a:	4b89      	ldr	r3, [pc, #548]	; (80054a0 <HAL_RCC_OscConfig+0x510>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005280:	f7fd fbba 	bl	80029f8 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005288:	f7fd fbb6 	bl	80029f8 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e1a1      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800529a:	4b7d      	ldr	r3, [pc, #500]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052a6:	4b7a      	ldr	r3, [pc, #488]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	4977      	ldr	r1, [pc, #476]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052b8:	4b75      	ldr	r3, [pc, #468]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	4972      	ldr	r1, [pc, #456]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	604b      	str	r3, [r1, #4]
 80052cc:	e015      	b.n	80052fa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052ce:	4b74      	ldr	r3, [pc, #464]	; (80054a0 <HAL_RCC_OscConfig+0x510>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d4:	f7fd fb90 	bl	80029f8 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052dc:	f7fd fb8c 	bl	80029f8 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e177      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80052ee:	4b68      	ldr	r3, [pc, #416]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d030      	beq.n	8005368 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d016      	beq.n	800533c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800530e:	4b65      	ldr	r3, [pc, #404]	; (80054a4 <HAL_RCC_OscConfig+0x514>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005314:	f7fd fb70 	bl	80029f8 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800531c:	f7fd fb6c 	bl	80029f8 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e157      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800532e:	4b58      	ldr	r3, [pc, #352]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0x38c>
 800533a:	e015      	b.n	8005368 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800533c:	4b59      	ldr	r3, [pc, #356]	; (80054a4 <HAL_RCC_OscConfig+0x514>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005342:	f7fd fb59 	bl	80029f8 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800534a:	f7fd fb55 	bl	80029f8 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e140      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800535c:	4b4c      	ldr	r3, [pc, #304]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f0      	bne.n	800534a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80b5 	beq.w	80054e0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800537a:	4b45      	ldr	r3, [pc, #276]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10d      	bne.n	80053a2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005386:	4b42      	ldr	r3, [pc, #264]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	4a41      	ldr	r2, [pc, #260]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 800538c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005390:	6253      	str	r3, [r2, #36]	; 0x24
 8005392:	4b3f      	ldr	r3, [pc, #252]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539a:	60bb      	str	r3, [r7, #8]
 800539c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800539e:	2301      	movs	r3, #1
 80053a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a2:	4b41      	ldr	r3, [pc, #260]	; (80054a8 <HAL_RCC_OscConfig+0x518>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d118      	bne.n	80053e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ae:	4b3e      	ldr	r3, [pc, #248]	; (80054a8 <HAL_RCC_OscConfig+0x518>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a3d      	ldr	r2, [pc, #244]	; (80054a8 <HAL_RCC_OscConfig+0x518>)
 80053b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ba:	f7fd fb1d 	bl	80029f8 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c2:	f7fd fb19 	bl	80029f8 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b64      	cmp	r3, #100	; 0x64
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e104      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d4:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <HAL_RCC_OscConfig+0x518>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d106      	bne.n	80053f6 <HAL_RCC_OscConfig+0x466>
 80053e8:	4b29      	ldr	r3, [pc, #164]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	4a28      	ldr	r2, [pc, #160]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 80053ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f2:	6353      	str	r3, [r2, #52]	; 0x34
 80053f4:	e02d      	b.n	8005452 <HAL_RCC_OscConfig+0x4c2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10c      	bne.n	8005418 <HAL_RCC_OscConfig+0x488>
 80053fe:	4b24      	ldr	r3, [pc, #144]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005402:	4a23      	ldr	r2, [pc, #140]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005408:	6353      	str	r3, [r2, #52]	; 0x34
 800540a:	4b21      	ldr	r3, [pc, #132]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	4a20      	ldr	r2, [pc, #128]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005414:	6353      	str	r3, [r2, #52]	; 0x34
 8005416:	e01c      	b.n	8005452 <HAL_RCC_OscConfig+0x4c2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b05      	cmp	r3, #5
 800541e:	d10c      	bne.n	800543a <HAL_RCC_OscConfig+0x4aa>
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800542a:	6353      	str	r3, [r2, #52]	; 0x34
 800542c:	4b18      	ldr	r3, [pc, #96]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 800542e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005430:	4a17      	ldr	r2, [pc, #92]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005436:	6353      	str	r3, [r2, #52]	; 0x34
 8005438:	e00b      	b.n	8005452 <HAL_RCC_OscConfig+0x4c2>
 800543a:	4b15      	ldr	r3, [pc, #84]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 800543c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543e:	4a14      	ldr	r2, [pc, #80]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005444:	6353      	str	r3, [r2, #52]	; 0x34
 8005446:	4b12      	ldr	r3, [pc, #72]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 8005448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544a:	4a11      	ldr	r2, [pc, #68]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 800544c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005450:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d015      	beq.n	8005486 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800545a:	f7fd facd 	bl	80029f8 <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005460:	e00a      	b.n	8005478 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005462:	f7fd fac9 	bl	80029f8 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005470:	4293      	cmp	r3, r2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e0b2      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <HAL_RCC_OscConfig+0x500>)
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0ee      	beq.n	8005462 <HAL_RCC_OscConfig+0x4d2>
 8005484:	e023      	b.n	80054ce <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005486:	f7fd fab7 	bl	80029f8 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800548c:	e019      	b.n	80054c2 <HAL_RCC_OscConfig+0x532>
 800548e:	bf00      	nop
 8005490:	40023800 	.word	0x40023800
 8005494:	0800db80 	.word	0x0800db80
 8005498:	200002c8 	.word	0x200002c8
 800549c:	200002cc 	.word	0x200002cc
 80054a0:	42470020 	.word	0x42470020
 80054a4:	42470680 	.word	0x42470680
 80054a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ac:	f7fd faa4 	bl	80029f8 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e08d      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054c2:	4b49      	ldr	r3, [pc, #292]	; (80055e8 <HAL_RCC_OscConfig+0x658>)
 80054c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1ee      	bne.n	80054ac <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054ce:	7ffb      	ldrb	r3, [r7, #31]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d105      	bne.n	80054e0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d4:	4b44      	ldr	r3, [pc, #272]	; (80055e8 <HAL_RCC_OscConfig+0x658>)
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	4a43      	ldr	r2, [pc, #268]	; (80055e8 <HAL_RCC_OscConfig+0x658>)
 80054da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054de:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d079      	beq.n	80055dc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b0c      	cmp	r3, #12
 80054ec:	d056      	beq.n	800559c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d13b      	bne.n	800556e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f6:	4b3d      	ldr	r3, [pc, #244]	; (80055ec <HAL_RCC_OscConfig+0x65c>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fc:	f7fd fa7c 	bl	80029f8 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005504:	f7fd fa78 	bl	80029f8 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e063      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005516:	4b34      	ldr	r3, [pc, #208]	; (80055e8 <HAL_RCC_OscConfig+0x658>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005522:	4b31      	ldr	r3, [pc, #196]	; (80055e8 <HAL_RCC_OscConfig+0x658>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	4319      	orrs	r1, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	430b      	orrs	r3, r1
 800553a:	492b      	ldr	r1, [pc, #172]	; (80055e8 <HAL_RCC_OscConfig+0x658>)
 800553c:	4313      	orrs	r3, r2
 800553e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005540:	4b2a      	ldr	r3, [pc, #168]	; (80055ec <HAL_RCC_OscConfig+0x65c>)
 8005542:	2201      	movs	r2, #1
 8005544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005546:	f7fd fa57 	bl	80029f8 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800554e:	f7fd fa53 	bl	80029f8 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e03e      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005560:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <HAL_RCC_OscConfig+0x658>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x5be>
 800556c:	e036      	b.n	80055dc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556e:	4b1f      	ldr	r3, [pc, #124]	; (80055ec <HAL_RCC_OscConfig+0x65c>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fd fa40 	bl	80029f8 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557c:	f7fd fa3c 	bl	80029f8 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e027      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800558e:	4b16      	ldr	r3, [pc, #88]	; (80055e8 <HAL_RCC_OscConfig+0x658>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x5ec>
 800559a:	e01f      	b.n	80055dc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e01a      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <HAL_RCC_OscConfig+0x658>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d10d      	bne.n	80055d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d106      	bne.n	80055d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d001      	beq.n	80055dc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40023800 	.word	0x40023800
 80055ec:	42470060 	.word	0x42470060

080055f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e11a      	b.n	800583a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005604:	4b8f      	ldr	r3, [pc, #572]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d919      	bls.n	8005646 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d105      	bne.n	8005624 <HAL_RCC_ClockConfig+0x34>
 8005618:	4b8a      	ldr	r3, [pc, #552]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a89      	ldr	r2, [pc, #548]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 800561e:	f043 0304 	orr.w	r3, r3, #4
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	4b87      	ldr	r3, [pc, #540]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f023 0201 	bic.w	r2, r3, #1
 800562c:	4985      	ldr	r1, [pc, #532]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	4313      	orrs	r3, r2
 8005632:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005634:	4b83      	ldr	r3, [pc, #524]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d001      	beq.n	8005646 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e0f9      	b.n	800583a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005652:	4b7d      	ldr	r3, [pc, #500]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	497a      	ldr	r1, [pc, #488]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 8005660:	4313      	orrs	r3, r2
 8005662:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 808e 	beq.w	800578e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d107      	bne.n	800568a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800567a:	4b73      	ldr	r3, [pc, #460]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d121      	bne.n	80056ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e0d7      	b.n	800583a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d107      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005692:	4b6d      	ldr	r3, [pc, #436]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d115      	bne.n	80056ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e0cb      	b.n	800583a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d107      	bne.n	80056ba <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056aa:	4b67      	ldr	r3, [pc, #412]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e0bf      	b.n	800583a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80056ba:	4b63      	ldr	r3, [pc, #396]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e0b7      	b.n	800583a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ca:	4b5f      	ldr	r3, [pc, #380]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f023 0203 	bic.w	r2, r3, #3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	495c      	ldr	r1, [pc, #368]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056dc:	f7fd f98c 	bl	80029f8 <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d112      	bne.n	8005710 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056ea:	e00a      	b.n	8005702 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ec:	f7fd f984 	bl	80029f8 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e09b      	b.n	800583a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005702:	4b51      	ldr	r3, [pc, #324]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
 800570a:	2b08      	cmp	r3, #8
 800570c:	d1ee      	bne.n	80056ec <HAL_RCC_ClockConfig+0xfc>
 800570e:	e03e      	b.n	800578e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d112      	bne.n	800573e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005718:	e00a      	b.n	8005730 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800571a:	f7fd f96d 	bl	80029f8 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f241 3288 	movw	r2, #5000	; 0x1388
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e084      	b.n	800583a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005730:	4b45      	ldr	r3, [pc, #276]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b0c      	cmp	r3, #12
 800573a:	d1ee      	bne.n	800571a <HAL_RCC_ClockConfig+0x12a>
 800573c:	e027      	b.n	800578e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d11d      	bne.n	8005782 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005746:	e00a      	b.n	800575e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005748:	f7fd f956 	bl	80029f8 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	; 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e06d      	b.n	800583a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800575e:	4b3a      	ldr	r3, [pc, #232]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b04      	cmp	r3, #4
 8005768:	d1ee      	bne.n	8005748 <HAL_RCC_ClockConfig+0x158>
 800576a:	e010      	b.n	800578e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800576c:	f7fd f944 	bl	80029f8 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	; 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e05b      	b.n	800583a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005782:	4b31      	ldr	r3, [pc, #196]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1ee      	bne.n	800576c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800578e:	4b2d      	ldr	r3, [pc, #180]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d219      	bcs.n	80057d0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d105      	bne.n	80057ae <HAL_RCC_ClockConfig+0x1be>
 80057a2:	4b28      	ldr	r3, [pc, #160]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a27      	ldr	r2, [pc, #156]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 80057a8:	f043 0304 	orr.w	r3, r3, #4
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	4b25      	ldr	r3, [pc, #148]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f023 0201 	bic.w	r2, r3, #1
 80057b6:	4923      	ldr	r1, [pc, #140]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057be:	4b21      	ldr	r3, [pc, #132]	; (8005844 <HAL_RCC_ClockConfig+0x254>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d001      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e034      	b.n	800583a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057dc:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4917      	ldr	r1, [pc, #92]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057fa:	4b13      	ldr	r3, [pc, #76]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	490f      	ldr	r1, [pc, #60]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 800580a:	4313      	orrs	r3, r2
 800580c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800580e:	f000 f823 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8005812:	4602      	mov	r2, r0
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <HAL_RCC_ClockConfig+0x258>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	490b      	ldr	r1, [pc, #44]	; (800584c <HAL_RCC_ClockConfig+0x25c>)
 8005820:	5ccb      	ldrb	r3, [r1, r3]
 8005822:	fa22 f303 	lsr.w	r3, r2, r3
 8005826:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <HAL_RCC_ClockConfig+0x260>)
 8005828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800582a:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <HAL_RCC_ClockConfig+0x264>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f7fd f896 	bl	8002960 <HAL_InitTick>
 8005834:	4603      	mov	r3, r0
 8005836:	72fb      	strb	r3, [r7, #11]

  return status;
 8005838:	7afb      	ldrb	r3, [r7, #11]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40023c00 	.word	0x40023c00
 8005848:	40023800 	.word	0x40023800
 800584c:	0800db80 	.word	0x0800db80
 8005850:	200002c8 	.word	0x200002c8
 8005854:	200002cc 	.word	0x200002cc

08005858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005858:	b5b0      	push	{r4, r5, r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800585e:	4b61      	ldr	r3, [pc, #388]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x18c>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b0c      	cmp	r3, #12
 800586c:	d00d      	beq.n	800588a <HAL_RCC_GetSysClockFreq+0x32>
 800586e:	2b0c      	cmp	r3, #12
 8005870:	f200 80a4 	bhi.w	80059bc <HAL_RCC_GetSysClockFreq+0x164>
 8005874:	2b04      	cmp	r3, #4
 8005876:	d002      	beq.n	800587e <HAL_RCC_GetSysClockFreq+0x26>
 8005878:	2b08      	cmp	r3, #8
 800587a:	d003      	beq.n	8005884 <HAL_RCC_GetSysClockFreq+0x2c>
 800587c:	e09e      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800587e:	4b5a      	ldr	r3, [pc, #360]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x190>)
 8005880:	613b      	str	r3, [r7, #16]
      break;
 8005882:	e0a9      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005884:	4b59      	ldr	r3, [pc, #356]	; (80059ec <HAL_RCC_GetSysClockFreq+0x194>)
 8005886:	613b      	str	r3, [r7, #16]
      break;
 8005888:	e0a6      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	0c9b      	lsrs	r3, r3, #18
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	4a57      	ldr	r2, [pc, #348]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x198>)
 8005894:	5cd3      	ldrb	r3, [r2, r3]
 8005896:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	0d9b      	lsrs	r3, r3, #22
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	3301      	adds	r3, #1
 80058a2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058a4:	4b4f      	ldr	r3, [pc, #316]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x18c>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d041      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	461c      	mov	r4, r3
 80058b4:	f04f 0500 	mov.w	r5, #0
 80058b8:	4620      	mov	r0, r4
 80058ba:	4629      	mov	r1, r5
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	014b      	lsls	r3, r1, #5
 80058c6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058ca:	0142      	lsls	r2, r0, #5
 80058cc:	4610      	mov	r0, r2
 80058ce:	4619      	mov	r1, r3
 80058d0:	1b00      	subs	r0, r0, r4
 80058d2:	eb61 0105 	sbc.w	r1, r1, r5
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	018b      	lsls	r3, r1, #6
 80058e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058e4:	0182      	lsls	r2, r0, #6
 80058e6:	1a12      	subs	r2, r2, r0
 80058e8:	eb63 0301 	sbc.w	r3, r3, r1
 80058ec:	f04f 0000 	mov.w	r0, #0
 80058f0:	f04f 0100 	mov.w	r1, #0
 80058f4:	00d9      	lsls	r1, r3, #3
 80058f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058fa:	00d0      	lsls	r0, r2, #3
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	1912      	adds	r2, r2, r4
 8005902:	eb45 0303 	adc.w	r3, r5, r3
 8005906:	f04f 0000 	mov.w	r0, #0
 800590a:	f04f 0100 	mov.w	r1, #0
 800590e:	0259      	lsls	r1, r3, #9
 8005910:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005914:	0250      	lsls	r0, r2, #9
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4610      	mov	r0, r2
 800591c:	4619      	mov	r1, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	461a      	mov	r2, r3
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	f7fb f979 	bl	8000c1c <__aeabi_uldivmod>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4613      	mov	r3, r2
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e040      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	461c      	mov	r4, r3
 8005938:	f04f 0500 	mov.w	r5, #0
 800593c:	4620      	mov	r0, r4
 800593e:	4629      	mov	r1, r5
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	014b      	lsls	r3, r1, #5
 800594a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800594e:	0142      	lsls	r2, r0, #5
 8005950:	4610      	mov	r0, r2
 8005952:	4619      	mov	r1, r3
 8005954:	1b00      	subs	r0, r0, r4
 8005956:	eb61 0105 	sbc.w	r1, r1, r5
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	018b      	lsls	r3, r1, #6
 8005964:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005968:	0182      	lsls	r2, r0, #6
 800596a:	1a12      	subs	r2, r2, r0
 800596c:	eb63 0301 	sbc.w	r3, r3, r1
 8005970:	f04f 0000 	mov.w	r0, #0
 8005974:	f04f 0100 	mov.w	r1, #0
 8005978:	00d9      	lsls	r1, r3, #3
 800597a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800597e:	00d0      	lsls	r0, r2, #3
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	1912      	adds	r2, r2, r4
 8005986:	eb45 0303 	adc.w	r3, r5, r3
 800598a:	f04f 0000 	mov.w	r0, #0
 800598e:	f04f 0100 	mov.w	r1, #0
 8005992:	0299      	lsls	r1, r3, #10
 8005994:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005998:	0290      	lsls	r0, r2, #10
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4610      	mov	r0, r2
 80059a0:	4619      	mov	r1, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	461a      	mov	r2, r3
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	f7fb f937 	bl	8000c1c <__aeabi_uldivmod>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4613      	mov	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	613b      	str	r3, [r7, #16]
      break;
 80059ba:	e00d      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80059bc:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x18c>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	0b5b      	lsrs	r3, r3, #13
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	3301      	adds	r3, #1
 80059cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	613b      	str	r3, [r7, #16]
      break;
 80059d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059d8:	693b      	ldr	r3, [r7, #16]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bdb0      	pop	{r4, r5, r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	00f42400 	.word	0x00f42400
 80059ec:	007a1200 	.word	0x007a1200
 80059f0:	0800db74 	.word	0x0800db74

080059f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a00:	4b29      	ldr	r3, [pc, #164]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d12c      	bne.n	8005a66 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a0c:	4b26      	ldr	r3, [pc, #152]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005a18:	4b24      	ldr	r3, [pc, #144]	; (8005aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e016      	b.n	8005a52 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a24:	4b20      	ldr	r3, [pc, #128]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	4a1f      	ldr	r2, [pc, #124]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	6253      	str	r3, [r2, #36]	; 0x24
 8005a30:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005a3c:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005a44:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a46:	4b18      	ldr	r3, [pc, #96]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	4a17      	ldr	r2, [pc, #92]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a50:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005a58:	d105      	bne.n	8005a66 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a60:	d101      	bne.n	8005a66 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005a62:	2301      	movs	r3, #1
 8005a64:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d105      	bne.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005a6c:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a0f      	ldr	r2, [pc, #60]	; (8005ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a72:	f043 0304 	orr.w	r3, r3, #4
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f023 0201 	bic.w	r2, r3, #1
 8005a80:	490b      	ldr	r1, [pc, #44]	; (8005ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a88:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d001      	beq.n	8005a9a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	40007000 	.word	0x40007000
 8005ab0:	40023c00 	.word	0x40023c00

08005ab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e06e      	b.n	8005ba4 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d108      	bne.n	8005ae0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad6:	d009      	beq.n	8005aec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	61da      	str	r2, [r3, #28]
 8005ade:	e005      	b.n	8005aec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fc fd14 	bl	8002534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b70:	ea42 0103 	orr.w	r1, r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	0c1a      	lsrs	r2, r3, #16
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f002 0204 	and.w	r2, r2, #4
 8005b92:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_SPI_Transmit+0x22>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e126      	b.n	8005e1c <HAL_SPI_Transmit+0x270>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bd6:	f7fc ff0f 	bl	80029f8 <HAL_GetTick>
 8005bda:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d002      	beq.n	8005bf2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bec:	2302      	movs	r3, #2
 8005bee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bf0:	e10b      	b.n	8005e0a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_SPI_Transmit+0x52>
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d102      	bne.n	8005c04 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c02:	e102      	b.n	8005e0a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2203      	movs	r2, #3
 8005c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4a:	d10f      	bne.n	8005c6c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d007      	beq.n	8005c8a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c92:	d14b      	bne.n	8005d2c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_SPI_Transmit+0xf6>
 8005c9c:	8afb      	ldrh	r3, [r7, #22]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d13e      	bne.n	8005d20 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	881a      	ldrh	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	1c9a      	adds	r2, r3, #2
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cc6:	e02b      	b.n	8005d20 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d112      	bne.n	8005cfc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	881a      	ldrh	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	1c9a      	adds	r2, r3, #2
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cfa:	e011      	b.n	8005d20 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cfc:	f7fc fe7c 	bl	80029f8 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d803      	bhi.n	8005d14 <HAL_SPI_Transmit+0x168>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d12:	d102      	bne.n	8005d1a <HAL_SPI_Transmit+0x16e>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d102      	bne.n	8005d20 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d1e:	e074      	b.n	8005e0a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1ce      	bne.n	8005cc8 <HAL_SPI_Transmit+0x11c>
 8005d2a:	e04c      	b.n	8005dc6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <HAL_SPI_Transmit+0x18e>
 8005d34:	8afb      	ldrh	r3, [r7, #22]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d140      	bne.n	8005dbc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	330c      	adds	r3, #12
 8005d44:	7812      	ldrb	r2, [r2, #0]
 8005d46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d60:	e02c      	b.n	8005dbc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d113      	bne.n	8005d98 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	330c      	adds	r3, #12
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d96:	e011      	b.n	8005dbc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d98:	f7fc fe2e 	bl	80029f8 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d803      	bhi.n	8005db0 <HAL_SPI_Transmit+0x204>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d102      	bne.n	8005db6 <HAL_SPI_Transmit+0x20a>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dba:	e026      	b.n	8005e0a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1cd      	bne.n	8005d62 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fcd0 	bl	8006770 <SPI_EndRxTxTransaction>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	e000      	b.n	8005e0a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3720      	adds	r7, #32
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e40:	d112      	bne.n	8005e68 <HAL_SPI_Receive+0x44>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10e      	bne.n	8005e68 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e52:	88fa      	ldrh	r2, [r7, #6]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f8f1 	bl	8006046 <HAL_SPI_TransmitReceive>
 8005e64:	4603      	mov	r3, r0
 8005e66:	e0ea      	b.n	800603e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_SPI_Receive+0x52>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e0e3      	b.n	800603e <HAL_SPI_Receive+0x21a>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7e:	f7fc fdbb 	bl	80029f8 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d002      	beq.n	8005e96 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
 8005e92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e94:	e0ca      	b.n	800602c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_SPI_Receive+0x7e>
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ea6:	e0c1      	b.n	800602c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2204      	movs	r2, #4
 8005eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	88fa      	ldrh	r2, [r7, #6]
 8005ec0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	88fa      	ldrh	r2, [r7, #6]
 8005ec6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eee:	d10f      	bne.n	8005f10 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d007      	beq.n	8005f2e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d162      	bne.n	8005ffc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f36:	e02e      	b.n	8005f96 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d115      	bne.n	8005f72 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f103 020c 	add.w	r2, r3, #12
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	7812      	ldrb	r2, [r2, #0]
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f70:	e011      	b.n	8005f96 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f72:	f7fc fd41 	bl	80029f8 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d803      	bhi.n	8005f8a <HAL_SPI_Receive+0x166>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d102      	bne.n	8005f90 <HAL_SPI_Receive+0x16c>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f94:	e04a      	b.n	800602c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1cb      	bne.n	8005f38 <HAL_SPI_Receive+0x114>
 8005fa0:	e031      	b.n	8006006 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d113      	bne.n	8005fd8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	b292      	uxth	r2, r2
 8005fbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	1c9a      	adds	r2, r3, #2
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fd6:	e011      	b.n	8005ffc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fd8:	f7fc fd0e 	bl	80029f8 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d803      	bhi.n	8005ff0 <HAL_SPI_Receive+0x1cc>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d102      	bne.n	8005ff6 <HAL_SPI_Receive+0x1d2>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d102      	bne.n	8005ffc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ffa:	e017      	b.n	800602c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1cd      	bne.n	8005fa2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fb4a 	bl	80066a4 <SPI_EndRxTransaction>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	75fb      	strb	r3, [r7, #23]
 8006028:	e000      	b.n	800602c <HAL_SPI_Receive+0x208>
  }

error :
 800602a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800603c:	7dfb      	ldrb	r3, [r7, #23]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b08c      	sub	sp, #48	; 0x30
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
 8006052:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006054:	2301      	movs	r3, #1
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_SPI_TransmitReceive+0x26>
 8006068:	2302      	movs	r3, #2
 800606a:	e18a      	b.n	8006382 <HAL_SPI_TransmitReceive+0x33c>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006074:	f7fc fcc0 	bl	80029f8 <HAL_GetTick>
 8006078:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800608a:	887b      	ldrh	r3, [r7, #2]
 800608c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800608e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006092:	2b01      	cmp	r3, #1
 8006094:	d00f      	beq.n	80060b6 <HAL_SPI_TransmitReceive+0x70>
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800609c:	d107      	bne.n	80060ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <HAL_SPI_TransmitReceive+0x68>
 80060a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d003      	beq.n	80060b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060ae:	2302      	movs	r3, #2
 80060b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060b4:	e15b      	b.n	800636e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x82>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x82>
 80060c2:	887b      	ldrh	r3, [r7, #2]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d103      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060ce:	e14e      	b.n	800636e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d003      	beq.n	80060e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2205      	movs	r2, #5
 80060e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	887a      	ldrh	r2, [r7, #2]
 80060f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	887a      	ldrh	r2, [r7, #2]
 80060fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	887a      	ldrh	r2, [r7, #2]
 8006106:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	887a      	ldrh	r2, [r7, #2]
 800610c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d007      	beq.n	8006138 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006136:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006140:	d178      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <HAL_SPI_TransmitReceive+0x10a>
 800614a:	8b7b      	ldrh	r3, [r7, #26]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d166      	bne.n	800621e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	881a      	ldrh	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	1c9a      	adds	r2, r3, #2
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006174:	e053      	b.n	800621e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b02      	cmp	r3, #2
 8006182:	d11b      	bne.n	80061bc <HAL_SPI_TransmitReceive+0x176>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <HAL_SPI_TransmitReceive+0x176>
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d113      	bne.n	80061bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	881a      	ldrh	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	1c9a      	adds	r2, r3, #2
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d119      	bne.n	80061fe <HAL_SPI_TransmitReceive+0x1b8>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d014      	beq.n	80061fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	b292      	uxth	r2, r2
 80061e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061fa:	2301      	movs	r3, #1
 80061fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061fe:	f7fc fbfb 	bl	80029f8 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800620a:	429a      	cmp	r2, r3
 800620c:	d807      	bhi.n	800621e <HAL_SPI_TransmitReceive+0x1d8>
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006214:	d003      	beq.n	800621e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800621c:	e0a7      	b.n	800636e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1a6      	bne.n	8006176 <HAL_SPI_TransmitReceive+0x130>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1a1      	bne.n	8006176 <HAL_SPI_TransmitReceive+0x130>
 8006232:	e07c      	b.n	800632e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_SPI_TransmitReceive+0x1fc>
 800623c:	8b7b      	ldrh	r3, [r7, #26]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d16b      	bne.n	800631a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	330c      	adds	r3, #12
 800624c:	7812      	ldrb	r2, [r2, #0]
 800624e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006268:	e057      	b.n	800631a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b02      	cmp	r3, #2
 8006276:	d11c      	bne.n	80062b2 <HAL_SPI_TransmitReceive+0x26c>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d017      	beq.n	80062b2 <HAL_SPI_TransmitReceive+0x26c>
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d114      	bne.n	80062b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	7812      	ldrb	r2, [r2, #0]
 8006294:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d119      	bne.n	80062f4 <HAL_SPI_TransmitReceive+0x2ae>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d014      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062f0:	2301      	movs	r3, #1
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062f4:	f7fc fb80 	bl	80029f8 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006300:	429a      	cmp	r2, r3
 8006302:	d803      	bhi.n	800630c <HAL_SPI_TransmitReceive+0x2c6>
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d102      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x2cc>
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	2b00      	cmp	r3, #0
 8006310:	d103      	bne.n	800631a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006318:	e029      	b.n	800636e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800631e:	b29b      	uxth	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1a2      	bne.n	800626a <HAL_SPI_TransmitReceive+0x224>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d19d      	bne.n	800626a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800632e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006330:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fa1c 	bl	8006770 <SPI_EndRxTxTransaction>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d006      	beq.n	800634c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800634a:	e010      	b.n	800636e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10b      	bne.n	800636c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	e000      	b.n	800636e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800636c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800637e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006382:	4618      	mov	r0, r3
 8006384:	3730      	adds	r7, #48	; 0x30
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10f      	bne.n	80063d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	099b      	lsrs	r3, r3, #6
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d004      	beq.n	80063d0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
    return;
 80063ce:	e0be      	b.n	800654e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <HAL_SPI_IRQHandler+0x66>
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	09db      	lsrs	r3, r3, #7
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	4798      	blx	r3
    return;
 80063f0:	e0ad      	b.n	800654e <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_SPI_IRQHandler+0x80>
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	099b      	lsrs	r3, r3, #6
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 80a1 	beq.w	800654e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 809a 	beq.w	800654e <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	099b      	lsrs	r3, r3, #6
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d023      	beq.n	800646e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b03      	cmp	r3, #3
 8006430:	d011      	beq.n	8006456 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006436:	f043 0204 	orr.w	r2, r3, #4
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	e00b      	b.n	800646e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	693b      	ldr	r3, [r7, #16]
        return;
 800646c:	e06f      	b.n	800654e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d014      	beq.n	80064a4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647e:	f043 0201 	orr.w	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d04f      	beq.n	800654c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <HAL_SPI_IRQHandler+0x14c>
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d034      	beq.n	8006542 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0203 	bic.w	r2, r2, #3
 80064e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d011      	beq.n	8006514 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f4:	4a17      	ldr	r2, [pc, #92]	; (8006554 <HAL_SPI_IRQHandler+0x1c8>)
 80064f6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fc fbb4 	bl	8002c6a <HAL_DMA_Abort_IT>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006518:	2b00      	cmp	r3, #0
 800651a:	d016      	beq.n	800654a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006520:	4a0c      	ldr	r2, [pc, #48]	; (8006554 <HAL_SPI_IRQHandler+0x1c8>)
 8006522:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006528:	4618      	mov	r0, r3
 800652a:	f7fc fb9e 	bl	8002c6a <HAL_DMA_Abort_IT>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006538:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006540:	e003      	b.n	800654a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f808 	bl	8006558 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006548:	e000      	b.n	800654c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800654a:	bf00      	nop
    return;
 800654c:	bf00      	nop
  }
}
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	0800656b 	.word	0x0800656b

08006558 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr

0800656a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b084      	sub	sp, #16
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff ffe7 	bl	8006558 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	4613      	mov	r3, r2
 80065a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065a4:	f7fc fa28 	bl	80029f8 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	4413      	add	r3, r2
 80065b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065b4:	f7fc fa20 	bl	80029f8 <HAL_GetTick>
 80065b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065ba:	4b39      	ldr	r3, [pc, #228]	; (80066a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	015b      	lsls	r3, r3, #5
 80065c0:	0d1b      	lsrs	r3, r3, #20
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	fb02 f303 	mul.w	r3, r2, r3
 80065c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ca:	e054      	b.n	8006676 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d2:	d050      	beq.n	8006676 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065d4:	f7fc fa10 	bl	80029f8 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d902      	bls.n	80065ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d13d      	bne.n	8006666 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006602:	d111      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800660c:	d004      	beq.n	8006618 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006616:	d107      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006630:	d10f      	bne.n	8006652 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006650:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e017      	b.n	8006696 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	3b01      	subs	r3, #1
 8006674:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4013      	ands	r3, r2
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	429a      	cmp	r2, r3
 8006692:	d19b      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	200002c8 	.word	0x200002c8

080066a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af02      	add	r7, sp, #8
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b8:	d111      	bne.n	80066de <SPI_EndRxTransaction+0x3a>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c2:	d004      	beq.n	80066ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066cc:	d107      	bne.n	80066de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066e6:	d12a      	bne.n	800673e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f0:	d012      	beq.n	8006718 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	2180      	movs	r1, #128	; 0x80
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7ff ff49 	bl	8006594 <SPI_WaitFlagStateUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d02d      	beq.n	8006764 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670c:	f043 0220 	orr.w	r2, r3, #32
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e026      	b.n	8006766 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2200      	movs	r2, #0
 8006720:	2101      	movs	r1, #1
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff ff36 	bl	8006594 <SPI_WaitFlagStateUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01a      	beq.n	8006764 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	f043 0220 	orr.w	r2, r3, #32
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e013      	b.n	8006766 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2200      	movs	r2, #0
 8006746:	2101      	movs	r1, #1
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff ff23 	bl	8006594 <SPI_WaitFlagStateUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006758:	f043 0220 	orr.w	r2, r3, #32
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e000      	b.n	8006766 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <SPI_EndRxTxTransaction+0x7c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <SPI_EndRxTxTransaction+0x80>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	0d5b      	lsrs	r3, r3, #21
 8006788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800678c:	fb02 f303 	mul.w	r3, r2, r3
 8006790:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800679a:	d112      	bne.n	80067c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2200      	movs	r2, #0
 80067a4:	2180      	movs	r1, #128	; 0x80
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff fef4 	bl	8006594 <SPI_WaitFlagStateUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d016      	beq.n	80067e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	f043 0220 	orr.w	r2, r3, #32
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e00f      	b.n	80067e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b80      	cmp	r3, #128	; 0x80
 80067da:	d0f2      	beq.n	80067c2 <SPI_EndRxTxTransaction+0x52>
 80067dc:	e000      	b.n	80067e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80067de:	bf00      	nop
  }

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	200002c8 	.word	0x200002c8
 80067f0:	165e9f81 	.word	0x165e9f81

080067f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006804:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006808:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	b29a      	uxth	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006828:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800682c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	b29b      	uxth	r3, r3
 800683a:	43db      	mvns	r3, r3
 800683c:	b29b      	uxth	r3, r3
 800683e:	4013      	ands	r3, r2
 8006840:	b29a      	uxth	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr

08006854 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006854:	b084      	sub	sp, #16
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	f107 0014 	add.w	r0, r7, #20
 8006862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	b004      	add	sp, #16
 8006892:	4770      	bx	lr

08006894 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006894:	b480      	push	{r7}
 8006896:	b09b      	sub	sp, #108	; 0x6c
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80068b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	78db      	ldrb	r3, [r3, #3]
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d81f      	bhi.n	8006906 <USB_ActivateEndpoint+0x72>
 80068c6:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <USB_ActivateEndpoint+0x38>)
 80068c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068cc:	080068dd 	.word	0x080068dd
 80068d0:	080068f9 	.word	0x080068f9
 80068d4:	0800690f 	.word	0x0800690f
 80068d8:	080068eb 	.word	0x080068eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80068dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80068e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068e4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80068e8:	e012      	b.n	8006910 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80068ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80068ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80068f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80068f6:	e00b      	b.n	8006910 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80068f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80068fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006900:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006904:	e004      	b.n	8006910 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800690c:	e000      	b.n	8006910 <USB_ActivateEndpoint+0x7c>
      break;
 800690e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	441a      	add	r2, r3
 800691a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800691e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692e:	b29b      	uxth	r3, r3
 8006930:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006948:	b29a      	uxth	r2, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	b29b      	uxth	r3, r3
 8006950:	4313      	orrs	r3, r2
 8006952:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	441a      	add	r2, r3
 8006960:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800696c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	7b1b      	ldrb	r3, [r3, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 8149 	bne.w	8006c14 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8084 	beq.w	8006a94 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	4413      	add	r3, r2
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	011a      	lsls	r2, r3, #4
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	88db      	ldrh	r3, [r3, #6]
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	81fb      	strh	r3, [r7, #14]
 80069ce:	89fb      	ldrh	r3, [r7, #14]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01b      	beq.n	8006a10 <USB_ActivateEndpoint+0x17c>
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	81bb      	strh	r3, [r7, #12]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	89bb      	ldrh	r3, [r7, #12]
 80069fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	78db      	ldrb	r3, [r3, #3]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d020      	beq.n	8006a5a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a2e:	813b      	strh	r3, [r7, #8]
 8006a30:	893b      	ldrh	r3, [r7, #8]
 8006a32:	f083 0320 	eor.w	r3, r3, #32
 8006a36:	813b      	strh	r3, [r7, #8]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	441a      	add	r2, r3
 8006a42:	893b      	ldrh	r3, [r7, #8]
 8006a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	8013      	strh	r3, [r2, #0]
 8006a58:	e27f      	b.n	8006f5a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a70:	817b      	strh	r3, [r7, #10]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	441a      	add	r2, r3
 8006a7c:	897b      	ldrh	r3, [r7, #10]
 8006a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	8013      	strh	r3, [r2, #0]
 8006a92:	e262      	b.n	8006f5a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	4413      	add	r3, r2
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	011a      	lsls	r2, r3, #4
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	88db      	ldrh	r3, [r3, #6]
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	4413      	add	r3, r2
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	011a      	lsls	r2, r3, #4
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aea:	623b      	str	r3, [r7, #32]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d112      	bne.n	8006b1a <USB_ActivateEndpoint+0x286>
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	e02f      	b.n	8006b7a <USB_ActivateEndpoint+0x2e6>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b20:	d813      	bhi.n	8006b4a <USB_ActivateEndpoint+0x2b6>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	663b      	str	r3, [r7, #96]	; 0x60
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <USB_ActivateEndpoint+0x2a8>
 8006b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b38:	3301      	adds	r3, #1
 8006b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8006b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	029b      	lsls	r3, r3, #10
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	801a      	strh	r2, [r3, #0]
 8006b48:	e017      	b.n	8006b7a <USB_ActivateEndpoint+0x2e6>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	663b      	str	r3, [r7, #96]	; 0x60
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d102      	bne.n	8006b64 <USB_ActivateEndpoint+0x2d0>
 8006b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b60:	3b01      	subs	r3, #1
 8006b62:	663b      	str	r3, [r7, #96]	; 0x60
 8006b64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	029b      	lsls	r3, r3, #10
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	83fb      	strh	r3, [r7, #30]
 8006b88:	8bfb      	ldrh	r3, [r7, #30]
 8006b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d01b      	beq.n	8006bca <USB_ActivateEndpoint+0x336>
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba8:	83bb      	strh	r3, [r7, #28]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	441a      	add	r2, r3
 8006bb4:	8bbb      	ldrh	r3, [r7, #28]
 8006bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be0:	837b      	strh	r3, [r7, #26]
 8006be2:	8b7b      	ldrh	r3, [r7, #26]
 8006be4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006be8:	837b      	strh	r3, [r7, #26]
 8006bea:	8b7b      	ldrh	r3, [r7, #26]
 8006bec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bf0:	837b      	strh	r3, [r7, #26]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	441a      	add	r2, r3
 8006bfc:	8b7b      	ldrh	r3, [r7, #26]
 8006bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	8013      	strh	r3, [r2, #0]
 8006c12:	e1a2      	b.n	8006f5a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c44:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c60:	4413      	add	r3, r2
 8006c62:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	011a      	lsls	r2, r3, #4
 8006c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c72:	657b      	str	r3, [r7, #84]	; 0x54
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	891b      	ldrh	r3, [r3, #8]
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c82:	801a      	strh	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	653b      	str	r3, [r7, #80]	; 0x50
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c94:	4413      	add	r3, r2
 8006c96:	653b      	str	r3, [r7, #80]	; 0x50
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	011a      	lsls	r2, r3, #4
 8006c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	895b      	ldrh	r3, [r3, #10]
 8006cac:	085b      	lsrs	r3, r3, #1
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f040 8091 	bne.w	8006de4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006cd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01b      	beq.n	8006d12 <USB_ActivateEndpoint+0x47e>
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	441a      	add	r2, r3
 8006cfc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006d20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d01b      	beq.n	8006d62 <USB_ActivateEndpoint+0x4ce>
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d40:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	441a      	add	r2, r3
 8006d4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d78:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d88:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	441a      	add	r2, r3
 8006d94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc0:	867b      	strh	r3, [r7, #50]	; 0x32
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]
 8006de2:	e0ba      	b.n	8006f5a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006df4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01d      	beq.n	8006e3c <USB_ActivateEndpoint+0x5a8>
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e16:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006e4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01d      	beq.n	8006e94 <USB_ActivateEndpoint+0x600>
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	441a      	add	r2, r3
 8006e7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	78db      	ldrb	r3, [r3, #3]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d024      	beq.n	8006ee6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006eb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006eba:	f083 0320 	eor.w	r3, r3, #32
 8006ebe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	441a      	add	r2, r3
 8006ecc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	8013      	strh	r3, [r2, #0]
 8006ee4:	e01d      	b.n	8006f22 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006efc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	441a      	add	r2, r3
 8006f0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f38:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	441a      	add	r2, r3
 8006f44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006f5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	376c      	adds	r7, #108	; 0x6c
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr

08006f68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b08d      	sub	sp, #52	; 0x34
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	7b1b      	ldrb	r3, [r3, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f040 808e 	bne.w	8007098 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d044      	beq.n	800700e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	81bb      	strh	r3, [r7, #12]
 8006f92:	89bb      	ldrh	r3, [r7, #12]
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d01b      	beq.n	8006fd4 <USB_DeactivateEndpoint+0x6c>
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	817b      	strh	r3, [r7, #10]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	897b      	ldrh	r3, [r7, #10]
 8006fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fea:	813b      	strh	r3, [r7, #8]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	893b      	ldrh	r3, [r7, #8]
 8006ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007008:	b29b      	uxth	r3, r3
 800700a:	8013      	strh	r3, [r2, #0]
 800700c:	e192      	b.n	8007334 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	827b      	strh	r3, [r7, #18]
 800701c:	8a7b      	ldrh	r3, [r7, #18]
 800701e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01b      	beq.n	800705e <USB_DeactivateEndpoint+0xf6>
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	b29b      	uxth	r3, r3
 8007034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703c:	823b      	strh	r3, [r7, #16]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	441a      	add	r2, r3
 8007048:	8a3b      	ldrh	r3, [r7, #16]
 800704a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007052:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705a:	b29b      	uxth	r3, r3
 800705c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007074:	81fb      	strh	r3, [r7, #14]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	441a      	add	r2, r3
 8007080:	89fb      	ldrh	r3, [r7, #14]
 8007082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800708a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800708e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007092:	b29b      	uxth	r3, r3
 8007094:	8013      	strh	r3, [r2, #0]
 8007096:	e14d      	b.n	8007334 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f040 80a5 	bne.w	80071ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	843b      	strh	r3, [r7, #32]
 80070b0:	8c3b      	ldrh	r3, [r7, #32]
 80070b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01b      	beq.n	80070f2 <USB_DeactivateEndpoint+0x18a>
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d0:	83fb      	strh	r3, [r7, #30]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	441a      	add	r2, r3
 80070dc:	8bfb      	ldrh	r3, [r7, #30]
 80070de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	83bb      	strh	r3, [r7, #28]
 8007100:	8bbb      	ldrh	r3, [r7, #28]
 8007102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01b      	beq.n	8007142 <USB_DeactivateEndpoint+0x1da>
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007120:	837b      	strh	r3, [r7, #26]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	441a      	add	r2, r3
 800712c:	8b7b      	ldrh	r3, [r7, #26]
 800712e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800713a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800713e:	b29b      	uxth	r3, r3
 8007140:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007158:	833b      	strh	r3, [r7, #24]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	441a      	add	r2, r3
 8007164:	8b3b      	ldrh	r3, [r7, #24]
 8007166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800716e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007172:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007176:	b29b      	uxth	r3, r3
 8007178:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800718c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007190:	82fb      	strh	r3, [r7, #22]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	441a      	add	r2, r3
 800719c:	8afb      	ldrh	r3, [r7, #22]
 800719e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c8:	82bb      	strh	r3, [r7, #20]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	441a      	add	r2, r3
 80071d4:	8abb      	ldrh	r3, [r7, #20]
 80071d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	8013      	strh	r3, [r2, #0]
 80071ea:	e0a3      	b.n	8007334 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80071fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01b      	beq.n	800723c <USB_DeactivateEndpoint+0x2d4>
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29b      	uxth	r3, r3
 8007212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	441a      	add	r2, r3
 8007226:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800722c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007238:	b29b      	uxth	r3, r3
 800723a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	857b      	strh	r3, [r7, #42]	; 0x2a
 800724a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800724c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01b      	beq.n	800728c <USB_DeactivateEndpoint+0x324>
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	b29b      	uxth	r3, r3
 8007262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726a:	853b      	strh	r3, [r7, #40]	; 0x28
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	441a      	add	r2, r3
 8007276:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800727c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007284:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007288:	b29b      	uxth	r3, r3
 800728a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b29b      	uxth	r3, r3
 800729a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	441a      	add	r2, r3
 80072ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	441a      	add	r2, r3
 80072e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800730e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007312:	847b      	strh	r3, [r7, #34]	; 0x22
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	441a      	add	r2, r3
 800731e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800732c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007330:	b29b      	uxth	r3, r3
 8007332:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3734      	adds	r7, #52	; 0x34
 800733a:	46bd      	mov	sp, r7
 800733c:	bc80      	pop	{r7}
 800733e:	4770      	bx	lr

08007340 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b0cc      	sub	sp, #304	; 0x130
 8007344:	af00      	add	r7, sp, #0
 8007346:	1d3b      	adds	r3, r7, #4
 8007348:	6018      	str	r0, [r3, #0]
 800734a:	463b      	mov	r3, r7
 800734c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800734e:	463b      	mov	r3, r7
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	2b01      	cmp	r3, #1
 8007356:	f040 872e 	bne.w	80081b6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800735a:	463b      	mov	r3, r7
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	699a      	ldr	r2, [r3, #24]
 8007360:	463b      	mov	r3, r7
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	429a      	cmp	r2, r3
 8007368:	d905      	bls.n	8007376 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800736a:	463b      	mov	r3, r7
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007374:	e004      	b.n	8007380 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007376:	463b      	mov	r3, r7
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007380:	463b      	mov	r3, r7
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	7b1b      	ldrb	r3, [r3, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d134      	bne.n	80073f4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800738a:	463b      	mov	r3, r7
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6959      	ldr	r1, [r3, #20]
 8007390:	463b      	mov	r3, r7
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	88da      	ldrh	r2, [r3, #6]
 8007396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739a:	b29b      	uxth	r3, r3
 800739c:	1d38      	adds	r0, r7, #4
 800739e:	6800      	ldr	r0, [r0, #0]
 80073a0:	f001 fbee 	bl	8008b80 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073a4:	f107 0310 	add.w	r3, r7, #16
 80073a8:	1d3a      	adds	r2, r7, #4
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	1d3b      	adds	r3, r7, #4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	4619      	mov	r1, r3
 80073ba:	f107 0310 	add.w	r3, r7, #16
 80073be:	f107 0210 	add.w	r2, r7, #16
 80073c2:	6812      	ldr	r2, [r2, #0]
 80073c4:	440a      	add	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	463b      	mov	r3, r7
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	011a      	lsls	r2, r3, #4
 80073d0:	f107 0310 	add.w	r3, r7, #16
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4413      	add	r3, r2
 80073d8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80073dc:	f107 030c 	add.w	r3, r7, #12
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	f107 030c 	add.w	r3, r7, #12
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	f000 beac 	b.w	800814c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80073f4:	463b      	mov	r3, r7
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	78db      	ldrb	r3, [r3, #3]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	f040 838c 	bne.w	8007b18 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007400:	463b      	mov	r3, r7
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6a1a      	ldr	r2, [r3, #32]
 8007406:	463b      	mov	r3, r7
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	429a      	cmp	r2, r3
 800740e:	f240 8330 	bls.w	8007a72 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007412:	1d3b      	adds	r3, r7, #4
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	463b      	mov	r3, r7
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007430:	1d3b      	adds	r3, r7, #4
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	463b      	mov	r3, r7
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	441a      	add	r2, r3
 800743e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800744a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800744e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007452:	b29b      	uxth	r3, r3
 8007454:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007456:	463b      	mov	r3, r7
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a1a      	ldr	r2, [r3, #32]
 800745c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007460:	1ad2      	subs	r2, r2, r3
 8007462:	463b      	mov	r3, r7
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007468:	1d3b      	adds	r3, r7, #4
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	463b      	mov	r3, r7
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 819e 	beq.w	80077c0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007488:	1d3a      	adds	r2, r7, #4
 800748a:	6812      	ldr	r2, [r2, #0]
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	463b      	mov	r3, r7
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d17a      	bne.n	800758e <USB_EPStartXfer+0x24e>
 8007498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800749c:	1d3a      	adds	r2, r7, #4
 800749e:	6812      	ldr	r2, [r2, #0]
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80074b6:	6812      	ldr	r2, [r2, #0]
 80074b8:	440a      	add	r2, r1
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	463b      	mov	r3, r7
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	011a      	lsls	r2, r3, #4
 80074c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4413      	add	r3, r2
 80074cc:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80074d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d11a      	bne.n	8007514 <USB_EPStartXfer+0x1d4>
 80074de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007508:	b29a      	uxth	r2, r3
 800750a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	801a      	strh	r2, [r3, #0]
 8007512:	e062      	b.n	80075da <USB_EPStartXfer+0x29a>
 8007514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007518:	2b3e      	cmp	r3, #62	; 0x3e
 800751a:	d819      	bhi.n	8007550 <USB_EPStartXfer+0x210>
 800751c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007520:	085b      	lsrs	r3, r3, #1
 8007522:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d004      	beq.n	800753c <USB_EPStartXfer+0x1fc>
 8007532:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007536:	3301      	adds	r3, #1
 8007538:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800753c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007540:	b29b      	uxth	r3, r3
 8007542:	029b      	lsls	r3, r3, #10
 8007544:	b29a      	uxth	r2, r3
 8007546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	e044      	b.n	80075da <USB_EPStartXfer+0x29a>
 8007550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800755a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755e:	f003 031f 	and.w	r3, r3, #31
 8007562:	2b00      	cmp	r3, #0
 8007564:	d104      	bne.n	8007570 <USB_EPStartXfer+0x230>
 8007566:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800756a:	3b01      	subs	r3, #1
 800756c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007574:	b29b      	uxth	r3, r3
 8007576:	029b      	lsls	r3, r3, #10
 8007578:	b29b      	uxth	r3, r3
 800757a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007582:	b29a      	uxth	r2, r3
 8007584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	e025      	b.n	80075da <USB_EPStartXfer+0x29a>
 800758e:	463b      	mov	r3, r7
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d120      	bne.n	80075da <USB_EPStartXfer+0x29a>
 8007598:	1d3b      	adds	r3, r7, #4
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	4619      	mov	r1, r3
 80075a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075ac:	6812      	ldr	r2, [r2, #0]
 80075ae:	440a      	add	r2, r1
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	463b      	mov	r3, r7
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	011a      	lsls	r2, r3, #4
 80075ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80075c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075da:	463b      	mov	r3, r7
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	895b      	ldrh	r3, [r3, #10]
 80075e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075e4:	463b      	mov	r3, r7
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6959      	ldr	r1, [r3, #20]
 80075ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075f4:	1d38      	adds	r0, r7, #4
 80075f6:	6800      	ldr	r0, [r0, #0]
 80075f8:	f001 fac2 	bl	8008b80 <USB_WritePMA>
            ep->xfer_buff += len;
 80075fc:	463b      	mov	r3, r7
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695a      	ldr	r2, [r3, #20]
 8007602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007606:	441a      	add	r2, r3
 8007608:	463b      	mov	r3, r7
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800760e:	463b      	mov	r3, r7
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6a1a      	ldr	r2, [r3, #32]
 8007614:	463b      	mov	r3, r7
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	429a      	cmp	r2, r3
 800761c:	d909      	bls.n	8007632 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800761e:	463b      	mov	r3, r7
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6a1a      	ldr	r2, [r3, #32]
 8007624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007628:	1ad2      	subs	r2, r2, r3
 800762a:	463b      	mov	r3, r7
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	621a      	str	r2, [r3, #32]
 8007630:	e008      	b.n	8007644 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8007632:	463b      	mov	r3, r7
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800763c:	463b      	mov	r3, r7
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2200      	movs	r2, #0
 8007642:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007644:	463b      	mov	r3, r7
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d17a      	bne.n	8007744 <USB_EPStartXfer+0x404>
 800764e:	f107 0318 	add.w	r3, r7, #24
 8007652:	1d3a      	adds	r2, r7, #4
 8007654:	6812      	ldr	r2, [r2, #0]
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	1d3b      	adds	r3, r7, #4
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007660:	b29b      	uxth	r3, r3
 8007662:	4619      	mov	r1, r3
 8007664:	f107 0318 	add.w	r3, r7, #24
 8007668:	f107 0218 	add.w	r2, r7, #24
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	440a      	add	r2, r1
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	463b      	mov	r3, r7
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	011a      	lsls	r2, r3, #4
 800767a:	f107 0318 	add.w	r3, r7, #24
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4413      	add	r3, r2
 8007682:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007686:	f107 0314 	add.w	r3, r7, #20
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d11a      	bne.n	80076ca <USB_EPStartXfer+0x38a>
 8007694:	f107 0314 	add.w	r3, r7, #20
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	f107 0314 	add.w	r3, r7, #20
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	f107 0314 	add.w	r3, r7, #20
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076be:	b29a      	uxth	r2, r3
 80076c0:	f107 0314 	add.w	r3, r7, #20
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	e067      	b.n	800779a <USB_EPStartXfer+0x45a>
 80076ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ce:	2b3e      	cmp	r3, #62	; 0x3e
 80076d0:	d819      	bhi.n	8007706 <USB_EPStartXfer+0x3c6>
 80076d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80076dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <USB_EPStartXfer+0x3b2>
 80076e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80076ec:	3301      	adds	r3, #1
 80076ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80076f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	029b      	lsls	r3, r3, #10
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	f107 0314 	add.w	r3, r7, #20
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	801a      	strh	r2, [r3, #0]
 8007704:	e049      	b.n	800779a <USB_EPStartXfer+0x45a>
 8007706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007714:	f003 031f 	and.w	r3, r3, #31
 8007718:	2b00      	cmp	r3, #0
 800771a:	d104      	bne.n	8007726 <USB_EPStartXfer+0x3e6>
 800771c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007720:	3b01      	subs	r3, #1
 8007722:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007726:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800772a:	b29b      	uxth	r3, r3
 800772c:	029b      	lsls	r3, r3, #10
 800772e:	b29b      	uxth	r3, r3
 8007730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007738:	b29a      	uxth	r2, r3
 800773a:	f107 0314 	add.w	r3, r7, #20
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	801a      	strh	r2, [r3, #0]
 8007742:	e02a      	b.n	800779a <USB_EPStartXfer+0x45a>
 8007744:	463b      	mov	r3, r7
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	785b      	ldrb	r3, [r3, #1]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d125      	bne.n	800779a <USB_EPStartXfer+0x45a>
 800774e:	f107 0320 	add.w	r3, r7, #32
 8007752:	1d3a      	adds	r2, r7, #4
 8007754:	6812      	ldr	r2, [r2, #0]
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007760:	b29b      	uxth	r3, r3
 8007762:	4619      	mov	r1, r3
 8007764:	f107 0320 	add.w	r3, r7, #32
 8007768:	f107 0220 	add.w	r2, r7, #32
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	440a      	add	r2, r1
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	463b      	mov	r3, r7
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	011a      	lsls	r2, r3, #4
 800777a:	f107 0320 	add.w	r3, r7, #32
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4413      	add	r3, r2
 8007782:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007786:	f107 031c 	add.w	r3, r7, #28
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007790:	b29a      	uxth	r2, r3
 8007792:	f107 031c 	add.w	r3, r7, #28
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800779a:	463b      	mov	r3, r7
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	891b      	ldrh	r3, [r3, #8]
 80077a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077a4:	463b      	mov	r3, r7
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6959      	ldr	r1, [r3, #20]
 80077aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077b4:	1d38      	adds	r0, r7, #4
 80077b6:	6800      	ldr	r0, [r0, #0]
 80077b8:	f001 f9e2 	bl	8008b80 <USB_WritePMA>
 80077bc:	f000 bcc6 	b.w	800814c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077c0:	463b      	mov	r3, r7
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d164      	bne.n	8007894 <USB_EPStartXfer+0x554>
 80077ca:	1d3b      	adds	r3, r7, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80077d0:	1d3b      	adds	r3, r7, #4
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077d8:	b29b      	uxth	r3, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077de:	4413      	add	r3, r2
 80077e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077e2:	463b      	mov	r3, r7
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	011a      	lsls	r2, r3, #4
 80077ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ec:	4413      	add	r3, r2
 80077ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077f2:	647b      	str	r3, [r7, #68]	; 0x44
 80077f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d112      	bne.n	8007822 <USB_EPStartXfer+0x4e2>
 80077fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007806:	b29a      	uxth	r2, r3
 8007808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800780a:	801a      	strh	r2, [r3, #0]
 800780c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781a:	b29a      	uxth	r2, r3
 800781c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800781e:	801a      	strh	r2, [r3, #0]
 8007820:	e057      	b.n	80078d2 <USB_EPStartXfer+0x592>
 8007822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007826:	2b3e      	cmp	r3, #62	; 0x3e
 8007828:	d817      	bhi.n	800785a <USB_EPStartXfer+0x51a>
 800782a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800782e:	085b      	lsrs	r3, r3, #1
 8007830:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <USB_EPStartXfer+0x50a>
 8007840:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007844:	3301      	adds	r3, #1
 8007846:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800784a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800784e:	b29b      	uxth	r3, r3
 8007850:	029b      	lsls	r3, r3, #10
 8007852:	b29a      	uxth	r2, r3
 8007854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007856:	801a      	strh	r2, [r3, #0]
 8007858:	e03b      	b.n	80078d2 <USB_EPStartXfer+0x592>
 800785a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800785e:	095b      	lsrs	r3, r3, #5
 8007860:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007868:	f003 031f 	and.w	r3, r3, #31
 800786c:	2b00      	cmp	r3, #0
 800786e:	d104      	bne.n	800787a <USB_EPStartXfer+0x53a>
 8007870:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007874:	3b01      	subs	r3, #1
 8007876:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800787a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800787e:	b29b      	uxth	r3, r3
 8007880:	029b      	lsls	r3, r3, #10
 8007882:	b29b      	uxth	r3, r3
 8007884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788c:	b29a      	uxth	r2, r3
 800788e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007890:	801a      	strh	r2, [r3, #0]
 8007892:	e01e      	b.n	80078d2 <USB_EPStartXfer+0x592>
 8007894:	463b      	mov	r3, r7
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d119      	bne.n	80078d2 <USB_EPStartXfer+0x592>
 800789e:	1d3b      	adds	r3, r7, #4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	653b      	str	r3, [r7, #80]	; 0x50
 80078a4:	1d3b      	adds	r3, r7, #4
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	461a      	mov	r2, r3
 80078b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b2:	4413      	add	r3, r2
 80078b4:	653b      	str	r3, [r7, #80]	; 0x50
 80078b6:	463b      	mov	r3, r7
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	011a      	lsls	r2, r3, #4
 80078be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078c0:	4413      	add	r3, r2
 80078c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80078d2:	463b      	mov	r3, r7
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	891b      	ldrh	r3, [r3, #8]
 80078d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078dc:	463b      	mov	r3, r7
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6959      	ldr	r1, [r3, #20]
 80078e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078ec:	1d38      	adds	r0, r7, #4
 80078ee:	6800      	ldr	r0, [r0, #0]
 80078f0:	f001 f946 	bl	8008b80 <USB_WritePMA>
            ep->xfer_buff += len;
 80078f4:	463b      	mov	r3, r7
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695a      	ldr	r2, [r3, #20]
 80078fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fe:	441a      	add	r2, r3
 8007900:	463b      	mov	r3, r7
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007906:	463b      	mov	r3, r7
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6a1a      	ldr	r2, [r3, #32]
 800790c:	463b      	mov	r3, r7
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	429a      	cmp	r2, r3
 8007914:	d909      	bls.n	800792a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007916:	463b      	mov	r3, r7
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6a1a      	ldr	r2, [r3, #32]
 800791c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007920:	1ad2      	subs	r2, r2, r3
 8007922:	463b      	mov	r3, r7
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	621a      	str	r2, [r3, #32]
 8007928:	e008      	b.n	800793c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800792a:	463b      	mov	r3, r7
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007934:	463b      	mov	r3, r7
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2200      	movs	r2, #0
 800793a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800793c:	1d3b      	adds	r3, r7, #4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	643b      	str	r3, [r7, #64]	; 0x40
 8007942:	463b      	mov	r3, r7
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	785b      	ldrb	r3, [r3, #1]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d164      	bne.n	8007a16 <USB_EPStartXfer+0x6d6>
 800794c:	1d3b      	adds	r3, r7, #4
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	63bb      	str	r3, [r7, #56]	; 0x38
 8007952:	1d3b      	adds	r3, r7, #4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800795a:	b29b      	uxth	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	4413      	add	r3, r2
 8007962:	63bb      	str	r3, [r7, #56]	; 0x38
 8007964:	463b      	mov	r3, r7
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	011a      	lsls	r2, r3, #4
 800796c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796e:	4413      	add	r3, r2
 8007970:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
 8007976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d112      	bne.n	80079a4 <USB_EPStartXfer+0x664>
 800797e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007988:	b29a      	uxth	r2, r3
 800798a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799c:	b29a      	uxth	r2, r3
 800799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a0:	801a      	strh	r2, [r3, #0]
 80079a2:	e054      	b.n	8007a4e <USB_EPStartXfer+0x70e>
 80079a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a8:	2b3e      	cmp	r3, #62	; 0x3e
 80079aa:	d817      	bhi.n	80079dc <USB_EPStartXfer+0x69c>
 80079ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <USB_EPStartXfer+0x68c>
 80079c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80079c6:	3301      	adds	r3, #1
 80079c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	029b      	lsls	r3, r3, #10
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e038      	b.n	8007a4e <USB_EPStartXfer+0x70e>
 80079dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e0:	095b      	lsrs	r3, r3, #5
 80079e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ea:	f003 031f 	and.w	r3, r3, #31
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d104      	bne.n	80079fc <USB_EPStartXfer+0x6bc>
 80079f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80079f6:	3b01      	subs	r3, #1
 80079f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	029b      	lsls	r3, r3, #10
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e01b      	b.n	8007a4e <USB_EPStartXfer+0x70e>
 8007a16:	463b      	mov	r3, r7
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d116      	bne.n	8007a4e <USB_EPStartXfer+0x70e>
 8007a20:	1d3b      	adds	r3, r7, #4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a2e:	4413      	add	r3, r2
 8007a30:	643b      	str	r3, [r7, #64]	; 0x40
 8007a32:	463b      	mov	r3, r7
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	011a      	lsls	r2, r3, #4
 8007a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a4e:	463b      	mov	r3, r7
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	895b      	ldrh	r3, [r3, #10]
 8007a54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a58:	463b      	mov	r3, r7
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6959      	ldr	r1, [r3, #20]
 8007a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a68:	1d38      	adds	r0, r7, #4
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	f001 f888 	bl	8008b80 <USB_WritePMA>
 8007a70:	e36c      	b.n	800814c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a72:	463b      	mov	r3, r7
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007a7c:	1d3b      	adds	r3, r7, #4
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	463b      	mov	r3, r7
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a96:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007a9a:	1d3b      	adds	r3, r7, #4
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	441a      	add	r2, r3
 8007aa8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ac0:	1d3b      	adds	r3, r7, #4
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ac6:	1d3b      	adds	r3, r7, #4
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ad4:	4413      	add	r3, r2
 8007ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ad8:	463b      	mov	r3, r7
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	011a      	lsls	r2, r3, #4
 8007ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007af2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007af4:	463b      	mov	r3, r7
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	891b      	ldrh	r3, [r3, #8]
 8007afa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007afe:	463b      	mov	r3, r7
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6959      	ldr	r1, [r3, #20]
 8007b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b0e:	1d38      	adds	r0, r7, #4
 8007b10:	6800      	ldr	r0, [r0, #0]
 8007b12:	f001 f835 	bl	8008b80 <USB_WritePMA>
 8007b16:	e319      	b.n	800814c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007b18:	1d3b      	adds	r3, r7, #4
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	463b      	mov	r3, r7
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b32:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007b36:	1d3b      	adds	r3, r7, #4
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	441a      	add	r2, r3
 8007b44:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b50:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6a1a      	ldr	r2, [r3, #32]
 8007b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b66:	1ad2      	subs	r2, r2, r3
 8007b68:	463b      	mov	r3, r7
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b6e:	1d3b      	adds	r3, r7, #4
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	463b      	mov	r3, r7
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 8162 	beq.w	8007e4e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b8a:	1d3b      	adds	r3, r7, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b92:	463b      	mov	r3, r7
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	785b      	ldrb	r3, [r3, #1]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d164      	bne.n	8007c66 <USB_EPStartXfer+0x926>
 8007b9c:	1d3b      	adds	r3, r7, #4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb0:	4413      	add	r3, r2
 8007bb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	011a      	lsls	r2, r3, #4
 8007bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bc4:	677b      	str	r3, [r7, #116]	; 0x74
 8007bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d112      	bne.n	8007bf4 <USB_EPStartXfer+0x8b4>
 8007bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bdc:	801a      	strh	r2, [r3, #0]
 8007bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e057      	b.n	8007ca4 <USB_EPStartXfer+0x964>
 8007bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf8:	2b3e      	cmp	r3, #62	; 0x3e
 8007bfa:	d817      	bhi.n	8007c2c <USB_EPStartXfer+0x8ec>
 8007bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c00:	085b      	lsrs	r3, r3, #1
 8007c02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d004      	beq.n	8007c1c <USB_EPStartXfer+0x8dc>
 8007c12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c16:	3301      	adds	r3, #1
 8007c18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	029b      	lsls	r3, r3, #10
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c28:	801a      	strh	r2, [r3, #0]
 8007c2a:	e03b      	b.n	8007ca4 <USB_EPStartXfer+0x964>
 8007c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c30:	095b      	lsrs	r3, r3, #5
 8007c32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c3a:	f003 031f 	and.w	r3, r3, #31
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d104      	bne.n	8007c4c <USB_EPStartXfer+0x90c>
 8007c42:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c46:	3b01      	subs	r3, #1
 8007c48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	029b      	lsls	r3, r3, #10
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c62:	801a      	strh	r2, [r3, #0]
 8007c64:	e01e      	b.n	8007ca4 <USB_EPStartXfer+0x964>
 8007c66:	463b      	mov	r3, r7
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	785b      	ldrb	r3, [r3, #1]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d119      	bne.n	8007ca4 <USB_EPStartXfer+0x964>
 8007c70:	1d3b      	adds	r3, r7, #4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c80:	4413      	add	r3, r2
 8007c82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c86:	463b      	mov	r3, r7
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	011a      	lsls	r2, r3, #4
 8007c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c92:	4413      	add	r3, r2
 8007c94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ca2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ca4:	463b      	mov	r3, r7
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	895b      	ldrh	r3, [r3, #10]
 8007caa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cae:	463b      	mov	r3, r7
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6959      	ldr	r1, [r3, #20]
 8007cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007cbe:	1d38      	adds	r0, r7, #4
 8007cc0:	6800      	ldr	r0, [r0, #0]
 8007cc2:	f000 ff5d 	bl	8008b80 <USB_WritePMA>
          ep->xfer_buff += len;
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	695a      	ldr	r2, [r3, #20]
 8007ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd0:	441a      	add	r2, r3
 8007cd2:	463b      	mov	r3, r7
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007cd8:	463b      	mov	r3, r7
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6a1a      	ldr	r2, [r3, #32]
 8007cde:	463b      	mov	r3, r7
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d909      	bls.n	8007cfc <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007ce8:	463b      	mov	r3, r7
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6a1a      	ldr	r2, [r3, #32]
 8007cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf2:	1ad2      	subs	r2, r2, r3
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	621a      	str	r2, [r3, #32]
 8007cfa:	e008      	b.n	8007d0e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007cfc:	463b      	mov	r3, r7
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007d06:	463b      	mov	r3, r7
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 821a 	beq.w	800814c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d18:	463b      	mov	r3, r7
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d164      	bne.n	8007dec <USB_EPStartXfer+0xaac>
 8007d22:	1d3b      	adds	r3, r7, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d28:	1d3b      	adds	r3, r7, #4
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	461a      	mov	r2, r3
 8007d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d36:	4413      	add	r3, r2
 8007d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d3a:	463b      	mov	r3, r7
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	011a      	lsls	r2, r3, #4
 8007d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d44:	4413      	add	r3, r2
 8007d46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d4a:	667b      	str	r3, [r7, #100]	; 0x64
 8007d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d112      	bne.n	8007d7a <USB_EPStartXfer+0xa3a>
 8007d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	e057      	b.n	8007e2a <USB_EPStartXfer+0xaea>
 8007d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d80:	d817      	bhi.n	8007db2 <USB_EPStartXfer+0xa72>
 8007d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d86:	085b      	lsrs	r3, r3, #1
 8007d88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <USB_EPStartXfer+0xa62>
 8007d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	029b      	lsls	r3, r3, #10
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	e03b      	b.n	8007e2a <USB_EPStartXfer+0xaea>
 8007db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc0:	f003 031f 	and.w	r3, r3, #31
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d104      	bne.n	8007dd2 <USB_EPStartXfer+0xa92>
 8007dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	029b      	lsls	r3, r3, #10
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	e01e      	b.n	8007e2a <USB_EPStartXfer+0xaea>
 8007dec:	463b      	mov	r3, r7
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	785b      	ldrb	r3, [r3, #1]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d119      	bne.n	8007e2a <USB_EPStartXfer+0xaea>
 8007df6:	1d3b      	adds	r3, r7, #4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8007dfc:	1d3b      	adds	r3, r7, #4
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	461a      	mov	r2, r3
 8007e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e0a:	4413      	add	r3, r2
 8007e0c:	673b      	str	r3, [r7, #112]	; 0x70
 8007e0e:	463b      	mov	r3, r7
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	011a      	lsls	r2, r3, #4
 8007e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e18:	4413      	add	r3, r2
 8007e1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	891b      	ldrh	r3, [r3, #8]
 8007e30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e34:	463b      	mov	r3, r7
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6959      	ldr	r1, [r3, #20]
 8007e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e44:	1d38      	adds	r0, r7, #4
 8007e46:	6800      	ldr	r0, [r0, #0]
 8007e48:	f000 fe9a 	bl	8008b80 <USB_WritePMA>
 8007e4c:	e17e      	b.n	800814c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e4e:	463b      	mov	r3, r7
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	785b      	ldrb	r3, [r3, #1]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d16f      	bne.n	8007f38 <USB_EPStartXfer+0xbf8>
 8007e58:	1d3b      	adds	r3, r7, #4
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e60:	1d3b      	adds	r3, r7, #4
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e70:	4413      	add	r3, r2
 8007e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e76:	463b      	mov	r3, r7
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	011a      	lsls	r2, r3, #4
 8007e7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e82:	4413      	add	r3, r2
 8007e84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d116      	bne.n	8007ec2 <USB_EPStartXfer+0xb82>
 8007e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ea6:	801a      	strh	r2, [r3, #0]
 8007ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ebe:	801a      	strh	r2, [r3, #0]
 8007ec0:	e05f      	b.n	8007f82 <USB_EPStartXfer+0xc42>
 8007ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ec8:	d818      	bhi.n	8007efc <USB_EPStartXfer+0xbbc>
 8007eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ece:	085b      	lsrs	r3, r3, #1
 8007ed0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d004      	beq.n	8007eea <USB_EPStartXfer+0xbaa>
 8007ee0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007eea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	029b      	lsls	r3, r3, #10
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ef8:	801a      	strh	r2, [r3, #0]
 8007efa:	e042      	b.n	8007f82 <USB_EPStartXfer+0xc42>
 8007efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f00:	095b      	lsrs	r3, r3, #5
 8007f02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0a:	f003 031f 	and.w	r3, r3, #31
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d104      	bne.n	8007f1c <USB_EPStartXfer+0xbdc>
 8007f12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f16:	3b01      	subs	r3, #1
 8007f18:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	029b      	lsls	r3, r3, #10
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f34:	801a      	strh	r2, [r3, #0]
 8007f36:	e024      	b.n	8007f82 <USB_EPStartXfer+0xc42>
 8007f38:	463b      	mov	r3, r7
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	785b      	ldrb	r3, [r3, #1]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d11f      	bne.n	8007f82 <USB_EPStartXfer+0xc42>
 8007f42:	1d3b      	adds	r3, r7, #4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f4a:	1d3b      	adds	r3, r7, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f60:	463b      	mov	r3, r7
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	011a      	lsls	r2, r3, #4
 8007f68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f82:	463b      	mov	r3, r7
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	891b      	ldrh	r3, [r3, #8]
 8007f88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6959      	ldr	r1, [r3, #20]
 8007f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f9c:	1d38      	adds	r0, r7, #4
 8007f9e:	6800      	ldr	r0, [r0, #0]
 8007fa0:	f000 fdee 	bl	8008b80 <USB_WritePMA>
          ep->xfer_buff += len;
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695a      	ldr	r2, [r3, #20]
 8007faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fae:	441a      	add	r2, r3
 8007fb0:	463b      	mov	r3, r7
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007fb6:	463b      	mov	r3, r7
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6a1a      	ldr	r2, [r3, #32]
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d909      	bls.n	8007fda <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8007fc6:	463b      	mov	r3, r7
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6a1a      	ldr	r2, [r3, #32]
 8007fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd0:	1ad2      	subs	r2, r2, r3
 8007fd2:	463b      	mov	r3, r7
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	621a      	str	r2, [r3, #32]
 8007fd8:	e008      	b.n	8007fec <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007fda:	463b      	mov	r3, r7
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 80ab 	beq.w	800814c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ff6:	1d3b      	adds	r3, r7, #4
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ffe:	463b      	mov	r3, r7
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	785b      	ldrb	r3, [r3, #1]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d16f      	bne.n	80080e8 <USB_EPStartXfer+0xda8>
 8008008:	1d3b      	adds	r3, r7, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008010:	1d3b      	adds	r3, r7, #4
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008018:	b29b      	uxth	r3, r3
 800801a:	461a      	mov	r2, r3
 800801c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008020:	4413      	add	r3, r2
 8008022:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008026:	463b      	mov	r3, r7
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	011a      	lsls	r2, r3, #4
 800802e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008032:	4413      	add	r3, r2
 8008034:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800803c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008040:	2b00      	cmp	r3, #0
 8008042:	d116      	bne.n	8008072 <USB_EPStartXfer+0xd32>
 8008044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	b29b      	uxth	r3, r3
 800804c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008050:	b29a      	uxth	r2, r3
 8008052:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008056:	801a      	strh	r2, [r3, #0]
 8008058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008068:	b29a      	uxth	r2, r3
 800806a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800806e:	801a      	strh	r2, [r3, #0]
 8008070:	e05b      	b.n	800812a <USB_EPStartXfer+0xdea>
 8008072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008076:	2b3e      	cmp	r3, #62	; 0x3e
 8008078:	d818      	bhi.n	80080ac <USB_EPStartXfer+0xd6c>
 800807a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800807e:	085b      	lsrs	r3, r3, #1
 8008080:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d004      	beq.n	800809a <USB_EPStartXfer+0xd5a>
 8008090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008094:	3301      	adds	r3, #1
 8008096:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800809a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800809e:	b29b      	uxth	r3, r3
 80080a0:	029b      	lsls	r3, r3, #10
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080a8:	801a      	strh	r2, [r3, #0]
 80080aa:	e03e      	b.n	800812a <USB_EPStartXfer+0xdea>
 80080ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b0:	095b      	lsrs	r3, r3, #5
 80080b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d104      	bne.n	80080cc <USB_EPStartXfer+0xd8c>
 80080c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080c6:	3b01      	subs	r3, #1
 80080c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	029b      	lsls	r3, r3, #10
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080de:	b29a      	uxth	r2, r3
 80080e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080e4:	801a      	strh	r2, [r3, #0]
 80080e6:	e020      	b.n	800812a <USB_EPStartXfer+0xdea>
 80080e8:	463b      	mov	r3, r7
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d11b      	bne.n	800812a <USB_EPStartXfer+0xdea>
 80080f2:	1d3b      	adds	r3, r7, #4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008102:	4413      	add	r3, r2
 8008104:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008108:	463b      	mov	r3, r7
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	011a      	lsls	r2, r3, #4
 8008110:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008114:	4413      	add	r3, r2
 8008116:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800811a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800811e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008122:	b29a      	uxth	r2, r3
 8008124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008128:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800812a:	463b      	mov	r3, r7
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	895b      	ldrh	r3, [r3, #10]
 8008130:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008134:	463b      	mov	r3, r7
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6959      	ldr	r1, [r3, #20]
 800813a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800813e:	b29b      	uxth	r3, r3
 8008140:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008144:	1d38      	adds	r0, r7, #4
 8008146:	6800      	ldr	r0, [r0, #0]
 8008148:	f000 fd1a 	bl	8008b80 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800814c:	1d3b      	adds	r3, r7, #4
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	463b      	mov	r3, r7
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	f107 020a 	add.w	r2, r7, #10
 8008162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800816a:	8013      	strh	r3, [r2, #0]
 800816c:	f107 030a 	add.w	r3, r7, #10
 8008170:	f107 020a 	add.w	r2, r7, #10
 8008174:	8812      	ldrh	r2, [r2, #0]
 8008176:	f082 0210 	eor.w	r2, r2, #16
 800817a:	801a      	strh	r2, [r3, #0]
 800817c:	f107 030a 	add.w	r3, r7, #10
 8008180:	f107 020a 	add.w	r2, r7, #10
 8008184:	8812      	ldrh	r2, [r2, #0]
 8008186:	f082 0220 	eor.w	r2, r2, #32
 800818a:	801a      	strh	r2, [r3, #0]
 800818c:	1d3b      	adds	r3, r7, #4
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	463b      	mov	r3, r7
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	441a      	add	r2, r3
 800819a:	f107 030a 	add.w	r3, r7, #10
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	8013      	strh	r3, [r2, #0]
 80081b4:	e3b5      	b.n	8008922 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081b6:	463b      	mov	r3, r7
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	7b1b      	ldrb	r3, [r3, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f040 8090 	bne.w	80082e2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081c2:	463b      	mov	r3, r7
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	699a      	ldr	r2, [r3, #24]
 80081c8:	463b      	mov	r3, r7
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d90e      	bls.n	80081f0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80081d2:	463b      	mov	r3, r7
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80081dc:	463b      	mov	r3, r7
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e6:	1ad2      	subs	r2, r2, r3
 80081e8:	463b      	mov	r3, r7
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	619a      	str	r2, [r3, #24]
 80081ee:	e008      	b.n	8008202 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80081f0:	463b      	mov	r3, r7
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80081fa:	463b      	mov	r3, r7
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2200      	movs	r2, #0
 8008200:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008202:	1d3b      	adds	r3, r7, #4
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800820a:	1d3b      	adds	r3, r7, #4
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008212:	b29b      	uxth	r3, r3
 8008214:	461a      	mov	r2, r3
 8008216:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800821a:	4413      	add	r3, r2
 800821c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008220:	463b      	mov	r3, r7
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	011a      	lsls	r2, r3, #4
 8008228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800822c:	4413      	add	r3, r2
 800822e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d116      	bne.n	800826c <USB_EPStartXfer+0xf2c>
 800823e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	b29b      	uxth	r3, r3
 8008246:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800824a:	b29a      	uxth	r2, r3
 800824c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008250:	801a      	strh	r2, [r3, #0]
 8008252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	b29b      	uxth	r3, r3
 800825a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800825e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008262:	b29a      	uxth	r2, r3
 8008264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008268:	801a      	strh	r2, [r3, #0]
 800826a:	e32c      	b.n	80088c6 <USB_EPStartXfer+0x1586>
 800826c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008270:	2b3e      	cmp	r3, #62	; 0x3e
 8008272:	d818      	bhi.n	80082a6 <USB_EPStartXfer+0xf66>
 8008274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008278:	085b      	lsrs	r3, r3, #1
 800827a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800827e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d004      	beq.n	8008294 <USB_EPStartXfer+0xf54>
 800828a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800828e:	3301      	adds	r3, #1
 8008290:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008294:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008298:	b29b      	uxth	r3, r3
 800829a:	029b      	lsls	r3, r3, #10
 800829c:	b29a      	uxth	r2, r3
 800829e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082a2:	801a      	strh	r2, [r3, #0]
 80082a4:	e30f      	b.n	80088c6 <USB_EPStartXfer+0x1586>
 80082a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082aa:	095b      	lsrs	r3, r3, #5
 80082ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b4:	f003 031f 	and.w	r3, r3, #31
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d104      	bne.n	80082c6 <USB_EPStartXfer+0xf86>
 80082bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082c0:	3b01      	subs	r3, #1
 80082c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	029b      	lsls	r3, r3, #10
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d8:	b29a      	uxth	r2, r3
 80082da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	e2f1      	b.n	80088c6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082e2:	463b      	mov	r3, r7
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	78db      	ldrb	r3, [r3, #3]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	f040 818f 	bne.w	800860c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80082ee:	463b      	mov	r3, r7
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	785b      	ldrb	r3, [r3, #1]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d175      	bne.n	80083e4 <USB_EPStartXfer+0x10a4>
 80082f8:	1d3b      	adds	r3, r7, #4
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008300:	1d3b      	adds	r3, r7, #4
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008308:	b29b      	uxth	r3, r3
 800830a:	461a      	mov	r2, r3
 800830c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008310:	4413      	add	r3, r2
 8008312:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008316:	463b      	mov	r3, r7
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	011a      	lsls	r2, r3, #4
 800831e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008322:	4413      	add	r3, r2
 8008324:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800832c:	463b      	mov	r3, r7
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d116      	bne.n	8008364 <USB_EPStartXfer+0x1024>
 8008336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008342:	b29a      	uxth	r2, r3
 8008344:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008348:	801a      	strh	r2, [r3, #0]
 800834a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	b29b      	uxth	r3, r3
 8008352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800835a:	b29a      	uxth	r2, r3
 800835c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008360:	801a      	strh	r2, [r3, #0]
 8008362:	e065      	b.n	8008430 <USB_EPStartXfer+0x10f0>
 8008364:	463b      	mov	r3, r7
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	2b3e      	cmp	r3, #62	; 0x3e
 800836c:	d81a      	bhi.n	80083a4 <USB_EPStartXfer+0x1064>
 800836e:	463b      	mov	r3, r7
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	085b      	lsrs	r3, r3, #1
 8008376:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800837a:	463b      	mov	r3, r7
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d004      	beq.n	8008392 <USB_EPStartXfer+0x1052>
 8008388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838c:	3301      	adds	r3, #1
 800838e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008396:	b29b      	uxth	r3, r3
 8008398:	029b      	lsls	r3, r3, #10
 800839a:	b29a      	uxth	r2, r3
 800839c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	e045      	b.n	8008430 <USB_EPStartXfer+0x10f0>
 80083a4:	463b      	mov	r3, r7
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083b0:	463b      	mov	r3, r7
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d104      	bne.n	80083c8 <USB_EPStartXfer+0x1088>
 80083be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c2:	3b01      	subs	r3, #1
 80083c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	029b      	lsls	r3, r3, #10
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083da:	b29a      	uxth	r2, r3
 80083dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083e0:	801a      	strh	r2, [r3, #0]
 80083e2:	e025      	b.n	8008430 <USB_EPStartXfer+0x10f0>
 80083e4:	463b      	mov	r3, r7
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	785b      	ldrb	r3, [r3, #1]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d120      	bne.n	8008430 <USB_EPStartXfer+0x10f0>
 80083ee:	1d3b      	adds	r3, r7, #4
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80083f6:	1d3b      	adds	r3, r7, #4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083fe:	b29b      	uxth	r3, r3
 8008400:	461a      	mov	r2, r3
 8008402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008406:	4413      	add	r3, r2
 8008408:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800840c:	463b      	mov	r3, r7
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	011a      	lsls	r2, r3, #4
 8008414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008418:	4413      	add	r3, r2
 800841a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800841e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008422:	463b      	mov	r3, r7
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	b29a      	uxth	r2, r3
 800842a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800842e:	801a      	strh	r2, [r3, #0]
 8008430:	1d3b      	adds	r3, r7, #4
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008438:	463b      	mov	r3, r7
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d175      	bne.n	800852e <USB_EPStartXfer+0x11ee>
 8008442:	1d3b      	adds	r3, r7, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800844a:	1d3b      	adds	r3, r7, #4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008452:	b29b      	uxth	r3, r3
 8008454:	461a      	mov	r2, r3
 8008456:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800845a:	4413      	add	r3, r2
 800845c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008460:	463b      	mov	r3, r7
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	011a      	lsls	r2, r3, #4
 8008468:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800846c:	4413      	add	r3, r2
 800846e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008472:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008476:	463b      	mov	r3, r7
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d116      	bne.n	80084ae <USB_EPStartXfer+0x116e>
 8008480:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800848c:	b29a      	uxth	r2, r3
 800848e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008492:	801a      	strh	r2, [r3, #0]
 8008494:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084aa:	801a      	strh	r2, [r3, #0]
 80084ac:	e061      	b.n	8008572 <USB_EPStartXfer+0x1232>
 80084ae:	463b      	mov	r3, r7
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	2b3e      	cmp	r3, #62	; 0x3e
 80084b6:	d81a      	bhi.n	80084ee <USB_EPStartXfer+0x11ae>
 80084b8:	463b      	mov	r3, r7
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	085b      	lsrs	r3, r3, #1
 80084c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084c4:	463b      	mov	r3, r7
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <USB_EPStartXfer+0x119c>
 80084d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084d6:	3301      	adds	r3, #1
 80084d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	029b      	lsls	r3, r3, #10
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084ea:	801a      	strh	r2, [r3, #0]
 80084ec:	e041      	b.n	8008572 <USB_EPStartXfer+0x1232>
 80084ee:	463b      	mov	r3, r7
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	095b      	lsrs	r3, r3, #5
 80084f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084fa:	463b      	mov	r3, r7
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	2b00      	cmp	r3, #0
 8008506:	d104      	bne.n	8008512 <USB_EPStartXfer+0x11d2>
 8008508:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800850c:	3b01      	subs	r3, #1
 800850e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008512:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008516:	b29b      	uxth	r3, r3
 8008518:	029b      	lsls	r3, r3, #10
 800851a:	b29b      	uxth	r3, r3
 800851c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008524:	b29a      	uxth	r2, r3
 8008526:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800852a:	801a      	strh	r2, [r3, #0]
 800852c:	e021      	b.n	8008572 <USB_EPStartXfer+0x1232>
 800852e:	463b      	mov	r3, r7
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d11c      	bne.n	8008572 <USB_EPStartXfer+0x1232>
 8008538:	1d3b      	adds	r3, r7, #4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008540:	b29b      	uxth	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008548:	4413      	add	r3, r2
 800854a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800854e:	463b      	mov	r3, r7
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	011a      	lsls	r2, r3, #4
 8008556:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800855a:	4413      	add	r3, r2
 800855c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008560:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008564:	463b      	mov	r3, r7
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	b29a      	uxth	r2, r3
 800856c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008570:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008572:	463b      	mov	r3, r7
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 81a4 	beq.w	80088c6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800857e:	1d3b      	adds	r3, r7, #4
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	463b      	mov	r3, r7
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008592:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d005      	beq.n	80085aa <USB_EPStartXfer+0x126a>
 800859e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80085a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10d      	bne.n	80085c6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085aa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80085ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f040 8187 	bne.w	80088c6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f040 8180 	bne.w	80088c6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80085c6:	1d3b      	adds	r3, r7, #4
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	463b      	mov	r3, r7
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80085e4:	1d3b      	adds	r3, r7, #4
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	463b      	mov	r3, r7
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	441a      	add	r2, r3
 80085f2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80085f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008602:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008606:	b29b      	uxth	r3, r3
 8008608:	8013      	strh	r3, [r2, #0]
 800860a:	e15c      	b.n	80088c6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800860c:	463b      	mov	r3, r7
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	78db      	ldrb	r3, [r3, #3]
 8008612:	2b01      	cmp	r3, #1
 8008614:	f040 8155 	bne.w	80088c2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008618:	463b      	mov	r3, r7
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	463b      	mov	r3, r7
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	429a      	cmp	r2, r3
 8008626:	d90e      	bls.n	8008646 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008628:	463b      	mov	r3, r7
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008632:	463b      	mov	r3, r7
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800863c:	1ad2      	subs	r2, r2, r3
 800863e:	463b      	mov	r3, r7
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	619a      	str	r2, [r3, #24]
 8008644:	e008      	b.n	8008658 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8008646:	463b      	mov	r3, r7
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008650:	463b      	mov	r3, r7
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2200      	movs	r2, #0
 8008656:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008658:	463b      	mov	r3, r7
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	785b      	ldrb	r3, [r3, #1]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d16f      	bne.n	8008742 <USB_EPStartXfer+0x1402>
 8008662:	1d3b      	adds	r3, r7, #4
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800866a:	1d3b      	adds	r3, r7, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008672:	b29b      	uxth	r3, r3
 8008674:	461a      	mov	r2, r3
 8008676:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800867a:	4413      	add	r3, r2
 800867c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008680:	463b      	mov	r3, r7
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	011a      	lsls	r2, r3, #4
 8008688:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800868c:	4413      	add	r3, r2
 800868e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008692:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800869a:	2b00      	cmp	r3, #0
 800869c:	d116      	bne.n	80086cc <USB_EPStartXfer+0x138c>
 800869e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086b0:	801a      	strh	r2, [r3, #0]
 80086b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086c8:	801a      	strh	r2, [r3, #0]
 80086ca:	e05f      	b.n	800878c <USB_EPStartXfer+0x144c>
 80086cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d0:	2b3e      	cmp	r3, #62	; 0x3e
 80086d2:	d818      	bhi.n	8008706 <USB_EPStartXfer+0x13c6>
 80086d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d8:	085b      	lsrs	r3, r3, #1
 80086da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d004      	beq.n	80086f4 <USB_EPStartXfer+0x13b4>
 80086ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086ee:	3301      	adds	r3, #1
 80086f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	029b      	lsls	r3, r3, #10
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008702:	801a      	strh	r2, [r3, #0]
 8008704:	e042      	b.n	800878c <USB_EPStartXfer+0x144c>
 8008706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800870a:	095b      	lsrs	r3, r3, #5
 800870c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008714:	f003 031f 	and.w	r3, r3, #31
 8008718:	2b00      	cmp	r3, #0
 800871a:	d104      	bne.n	8008726 <USB_EPStartXfer+0x13e6>
 800871c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008720:	3b01      	subs	r3, #1
 8008722:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800872a:	b29b      	uxth	r3, r3
 800872c:	029b      	lsls	r3, r3, #10
 800872e:	b29b      	uxth	r3, r3
 8008730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008738:	b29a      	uxth	r2, r3
 800873a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800873e:	801a      	strh	r2, [r3, #0]
 8008740:	e024      	b.n	800878c <USB_EPStartXfer+0x144c>
 8008742:	463b      	mov	r3, r7
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d11f      	bne.n	800878c <USB_EPStartXfer+0x144c>
 800874c:	1d3b      	adds	r3, r7, #4
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008754:	1d3b      	adds	r3, r7, #4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800875c:	b29b      	uxth	r3, r3
 800875e:	461a      	mov	r2, r3
 8008760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008764:	4413      	add	r3, r2
 8008766:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800876a:	463b      	mov	r3, r7
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	011a      	lsls	r2, r3, #4
 8008772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008776:	4413      	add	r3, r2
 8008778:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800877c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008784:	b29a      	uxth	r2, r3
 8008786:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800878a:	801a      	strh	r2, [r3, #0]
 800878c:	1d3b      	adds	r3, r7, #4
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008794:	463b      	mov	r3, r7
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	785b      	ldrb	r3, [r3, #1]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d16f      	bne.n	800887e <USB_EPStartXfer+0x153e>
 800879e:	1d3b      	adds	r3, r7, #4
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087a6:	1d3b      	adds	r3, r7, #4
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087b6:	4413      	add	r3, r2
 80087b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087bc:	463b      	mov	r3, r7
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	011a      	lsls	r2, r3, #4
 80087c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087c8:	4413      	add	r3, r2
 80087ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d116      	bne.n	8008808 <USB_EPStartXfer+0x14c8>
 80087da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087ec:	801a      	strh	r2, [r3, #0]
 80087ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087fe:	b29a      	uxth	r2, r3
 8008800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008804:	801a      	strh	r2, [r3, #0]
 8008806:	e05e      	b.n	80088c6 <USB_EPStartXfer+0x1586>
 8008808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800880c:	2b3e      	cmp	r3, #62	; 0x3e
 800880e:	d818      	bhi.n	8008842 <USB_EPStartXfer+0x1502>
 8008810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008814:	085b      	lsrs	r3, r3, #1
 8008816:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800881a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d004      	beq.n	8008830 <USB_EPStartXfer+0x14f0>
 8008826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800882a:	3301      	adds	r3, #1
 800882c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008830:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008834:	b29b      	uxth	r3, r3
 8008836:	029b      	lsls	r3, r3, #10
 8008838:	b29a      	uxth	r2, r3
 800883a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800883e:	801a      	strh	r2, [r3, #0]
 8008840:	e041      	b.n	80088c6 <USB_EPStartXfer+0x1586>
 8008842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008846:	095b      	lsrs	r3, r3, #5
 8008848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800884c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008850:	f003 031f 	and.w	r3, r3, #31
 8008854:	2b00      	cmp	r3, #0
 8008856:	d104      	bne.n	8008862 <USB_EPStartXfer+0x1522>
 8008858:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800885c:	3b01      	subs	r3, #1
 800885e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008866:	b29b      	uxth	r3, r3
 8008868:	029b      	lsls	r3, r3, #10
 800886a:	b29b      	uxth	r3, r3
 800886c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008874:	b29a      	uxth	r2, r3
 8008876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800887a:	801a      	strh	r2, [r3, #0]
 800887c:	e023      	b.n	80088c6 <USB_EPStartXfer+0x1586>
 800887e:	463b      	mov	r3, r7
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	785b      	ldrb	r3, [r3, #1]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d11e      	bne.n	80088c6 <USB_EPStartXfer+0x1586>
 8008888:	1d3b      	adds	r3, r7, #4
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008890:	b29b      	uxth	r3, r3
 8008892:	461a      	mov	r2, r3
 8008894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008898:	4413      	add	r3, r2
 800889a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800889e:	463b      	mov	r3, r7
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	011a      	lsls	r2, r3, #4
 80088a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088aa:	4413      	add	r3, r2
 80088ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088be:	801a      	strh	r2, [r3, #0]
 80088c0:	e001      	b.n	80088c6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e02e      	b.n	8008924 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088c6:	1d3b      	adds	r3, r7, #4
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	463b      	mov	r3, r7
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80088e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80088e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088ec:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80088f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80088f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088f8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80088fc:	1d3b      	adds	r3, r7, #4
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	463b      	mov	r3, r7
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	441a      	add	r2, r3
 800890a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800890e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800891a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800891e:	b29b      	uxth	r3, r3
 8008920:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800892e:	b480      	push	{r7}
 8008930:	b085      	sub	sp, #20
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d020      	beq.n	8008982 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	b29b      	uxth	r3, r3
 800894e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008956:	81bb      	strh	r3, [r7, #12]
 8008958:	89bb      	ldrh	r3, [r7, #12]
 800895a:	f083 0310 	eor.w	r3, r3, #16
 800895e:	81bb      	strh	r3, [r7, #12]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	441a      	add	r2, r3
 800896a:	89bb      	ldrh	r3, [r7, #12]
 800896c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800897c:	b29b      	uxth	r3, r3
 800897e:	8013      	strh	r3, [r2, #0]
 8008980:	e01f      	b.n	80089c2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008998:	81fb      	strh	r3, [r7, #14]
 800899a:	89fb      	ldrh	r3, [r7, #14]
 800899c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089a0:	81fb      	strh	r3, [r7, #14]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	441a      	add	r2, r3
 80089ac:	89fb      	ldrh	r3, [r7, #14]
 80089ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089be:	b29b      	uxth	r3, r3
 80089c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr

080089ce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b087      	sub	sp, #28
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	7b1b      	ldrb	r3, [r3, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f040 809d 	bne.w	8008b1c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d04c      	beq.n	8008a84 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	823b      	strh	r3, [r7, #16]
 80089f8:	8a3b      	ldrh	r3, [r7, #16]
 80089fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01b      	beq.n	8008a3a <USB_EPClearStall+0x6c>
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a18:	81fb      	strh	r3, [r7, #14]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	441a      	add	r2, r3
 8008a24:	89fb      	ldrh	r3, [r7, #14]
 8008a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	78db      	ldrb	r3, [r3, #3]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d06c      	beq.n	8008b1c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a58:	81bb      	strh	r3, [r7, #12]
 8008a5a:	89bb      	ldrh	r3, [r7, #12]
 8008a5c:	f083 0320 	eor.w	r3, r3, #32
 8008a60:	81bb      	strh	r3, [r7, #12]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	441a      	add	r2, r3
 8008a6c:	89bb      	ldrh	r3, [r7, #12]
 8008a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	8013      	strh	r3, [r2, #0]
 8008a82:	e04b      	b.n	8008b1c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	82fb      	strh	r3, [r7, #22]
 8008a92:	8afb      	ldrh	r3, [r7, #22]
 8008a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01b      	beq.n	8008ad4 <USB_EPClearStall+0x106>
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab2:	82bb      	strh	r3, [r7, #20]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	441a      	add	r2, r3
 8008abe:	8abb      	ldrh	r3, [r7, #20]
 8008ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aea:	827b      	strh	r3, [r7, #18]
 8008aec:	8a7b      	ldrh	r3, [r7, #18]
 8008aee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008af2:	827b      	strh	r3, [r7, #18]
 8008af4:	8a7b      	ldrh	r3, [r7, #18]
 8008af6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008afa:	827b      	strh	r3, [r7, #18]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	441a      	add	r2, r3
 8008b06:	8a7b      	ldrh	r3, [r7, #18]
 8008b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	371c      	adds	r7, #28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bc80      	pop	{r7}
 8008b26:	4770      	bx	lr

08008b28 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d103      	bne.n	8008b42 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2280      	movs	r2, #128	; 0x80
 8008b3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr

08008b4e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc80      	pop	{r7}
 8008b60:	4770      	bx	lr

08008b62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b085      	sub	sp, #20
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b74:	68fb      	ldr	r3, [r7, #12]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr

08008b80 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b08d      	sub	sp, #52	; 0x34
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	460b      	mov	r3, r1
 8008b90:	80fb      	strh	r3, [r7, #6]
 8008b92:	4613      	mov	r3, r2
 8008b94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008b96:	88bb      	ldrh	r3, [r7, #4]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	085b      	lsrs	r3, r3, #1
 8008b9c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ba6:	88fb      	ldrh	r3, [r7, #6]
 8008ba8:	005a      	lsls	r2, r3, #1
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bb8:	e01e      	b.n	8008bf8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	021b      	lsls	r3, r3, #8
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	3302      	adds	r3, #2
 8008be4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	3302      	adds	r3, #2
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	3301      	adds	r3, #1
 8008bf0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1dd      	bne.n	8008bba <USB_WritePMA+0x3a>
  }
}
 8008bfe:	bf00      	nop
 8008c00:	bf00      	nop
 8008c02:	3734      	adds	r7, #52	; 0x34
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bc80      	pop	{r7}
 8008c08:	4770      	bx	lr

08008c0a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b08b      	sub	sp, #44	; 0x2c
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	4611      	mov	r1, r2
 8008c16:	461a      	mov	r2, r3
 8008c18:	460b      	mov	r3, r1
 8008c1a:	80fb      	strh	r3, [r7, #6]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c20:	88bb      	ldrh	r3, [r7, #4]
 8008c22:	085b      	lsrs	r3, r3, #1
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c30:	88fb      	ldrh	r3, [r7, #6]
 8008c32:	005a      	lsls	r2, r3, #1
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c3c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	627b      	str	r3, [r7, #36]	; 0x24
 8008c42:	e01b      	b.n	8008c7c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	881b      	ldrh	r3, [r3, #0]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	3302      	adds	r3, #2
 8008c50:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	3302      	adds	r3, #2
 8008c74:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1e0      	bne.n	8008c44 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008c82:	88bb      	ldrh	r3, [r7, #4]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	701a      	strb	r2, [r3, #0]
  }
}
 8008c9e:	bf00      	nop
 8008ca0:	372c      	adds	r7, #44	; 0x2c
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr

08008ca8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	7c1b      	ldrb	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d115      	bne.n	8008cec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	2181      	movs	r1, #129	; 0x81
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 fe74 	bl	800a9b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cd8:	2202      	movs	r2, #2
 8008cda:	2101      	movs	r1, #1
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 fe6a 	bl	800a9b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008cea:	e012      	b.n	8008d12 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cec:	2340      	movs	r3, #64	; 0x40
 8008cee:	2202      	movs	r2, #2
 8008cf0:	2181      	movs	r1, #129	; 0x81
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 fe5f 	bl	800a9b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cfe:	2340      	movs	r3, #64	; 0x40
 8008d00:	2202      	movs	r2, #2
 8008d02:	2101      	movs	r1, #1
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 fe56 	bl	800a9b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d12:	2308      	movs	r3, #8
 8008d14:	2203      	movs	r2, #3
 8008d16:	2182      	movs	r1, #130	; 0x82
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f001 fe4c 	bl	800a9b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008d24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d28:	f001 ff6c 	bl	800ac04 <USBD_static_malloc>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d102      	bne.n	8008d44 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	73fb      	strb	r3, [r7, #15]
 8008d42:	e026      	b.n	8008d92 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d4a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7c1b      	ldrb	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d109      	bne.n	8008d82 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d78:	2101      	movs	r1, #1
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 ff0c 	bl	800ab98 <USBD_LL_PrepareReceive>
 8008d80:	e007      	b.n	8008d92 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d88:	2340      	movs	r3, #64	; 0x40
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 ff03 	bl	800ab98 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008dac:	2181      	movs	r1, #129	; 0x81
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 fe27 	bl	800aa02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008dba:	2101      	movs	r1, #1
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 fe20 	bl	800aa02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008dca:	2182      	movs	r1, #130	; 0x82
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 fe18 	bl	800aa02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00e      	beq.n	8008e00 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008df2:	4618      	mov	r0, r3
 8008df4:	f001 ff12 	bl	800ac1c <USBD_static_free>
    pdev->pClassData = NULL;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008e1a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d039      	beq.n	8008ea8 <USBD_CDC_Setup+0x9e>
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	d17f      	bne.n	8008f38 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	88db      	ldrh	r3, [r3, #6]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d029      	beq.n	8008e94 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	b25b      	sxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	da11      	bge.n	8008e6e <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8008e56:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	88d2      	ldrh	r2, [r2, #6]
 8008e5c:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e5e:	6939      	ldr	r1, [r7, #16]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	88db      	ldrh	r3, [r3, #6]
 8008e64:	461a      	mov	r2, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f001 f993 	bl	800a192 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8008e6c:	e06b      	b.n	8008f46 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	785a      	ldrb	r2, [r3, #1]
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	88db      	ldrh	r3, [r3, #6]
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e84:	6939      	ldr	r1, [r7, #16]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	88db      	ldrh	r3, [r3, #6]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 f9ae 	bl	800a1ee <USBD_CtlPrepareRx>
    break;
 8008e92:	e058      	b.n	8008f46 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	7850      	ldrb	r0, [r2, #1]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	4798      	blx	r3
    break;
 8008ea6:	e04e      	b.n	8008f46 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	785b      	ldrb	r3, [r3, #1]
 8008eac:	2b0b      	cmp	r3, #11
 8008eae:	d02e      	beq.n	8008f0e <USBD_CDC_Setup+0x104>
 8008eb0:	2b0b      	cmp	r3, #11
 8008eb2:	dc38      	bgt.n	8008f26 <USBD_CDC_Setup+0x11c>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <USBD_CDC_Setup+0xb4>
 8008eb8:	2b0a      	cmp	r3, #10
 8008eba:	d014      	beq.n	8008ee6 <USBD_CDC_Setup+0xdc>
 8008ebc:	e033      	b.n	8008f26 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d107      	bne.n	8008ed8 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ec8:	f107 030c 	add.w	r3, r7, #12
 8008ecc:	2202      	movs	r2, #2
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 f95e 	bl	800a192 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008ed6:	e02e      	b.n	8008f36 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 f8ef 	bl	800a0be <USBD_CtlError>
			  ret = USBD_FAIL;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee4:	e027      	b.n	8008f36 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d107      	bne.n	8008f00 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008ef0:	f107 030f 	add.w	r3, r7, #15
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 f94a 	bl	800a192 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008efe:	e01a      	b.n	8008f36 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f001 f8db 	bl	800a0be <USBD_CtlError>
			  ret = USBD_FAIL;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f0c:	e013      	b.n	8008f36 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	d00d      	beq.n	8008f34 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f001 f8cf 	bl	800a0be <USBD_CtlError>
			  ret = USBD_FAIL;
 8008f20:	2302      	movs	r3, #2
 8008f22:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008f24:	e006      	b.n	8008f34 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f001 f8c8 	bl	800a0be <USBD_CtlError>
      ret = USBD_FAIL;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	75fb      	strb	r3, [r7, #23]
      break;
 8008f32:	e000      	b.n	8008f36 <USBD_CDC_Setup+0x12c>
      break;
 8008f34:	bf00      	nop
    }
    break;
 8008f36:	e006      	b.n	8008f46 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 f8bf 	bl	800a0be <USBD_CtlError>
    ret = USBD_FAIL;
 8008f40:	2302      	movs	r3, #2
 8008f42:	75fb      	strb	r3, [r7, #23]
    break;
 8008f44:	bf00      	nop
  }

  return ret;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f62:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008f6a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d03a      	beq.n	8008fec <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f76:	78fa      	ldrb	r2, [r7, #3]
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	440b      	add	r3, r1
 8008f84:	331c      	adds	r3, #28
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d029      	beq.n	8008fe0 <USBD_CDC_DataIn+0x90>
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	440b      	add	r3, r1
 8008f9a:	331c      	adds	r3, #28
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	78f9      	ldrb	r1, [r7, #3]
 8008fa0:	68b8      	ldr	r0, [r7, #8]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	00db      	lsls	r3, r3, #3
 8008faa:	4403      	add	r3, r0
 8008fac:	3338      	adds	r3, #56	; 0x38
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fb4:	fb03 f301 	mul.w	r3, r3, r1
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d110      	bne.n	8008fe0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4413      	add	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	440b      	add	r3, r1
 8008fcc:	331c      	adds	r3, #28
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008fd2:	78f9      	ldrb	r1, [r7, #3]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 fdba 	bl	800ab52 <USBD_LL_Transmit>
 8008fde:	e003      	b.n	8008fe8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e000      	b.n	8008fee <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008fec:	2302      	movs	r3, #2
  }
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009008:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f001 fde5 	bl	800abde <USBD_LL_GetRxDataSize>
 8009014:	4602      	mov	r2, r0
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00d      	beq.n	8009042 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800903a:	4611      	mov	r1, r2
 800903c:	4798      	blx	r3

    return USBD_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	e000      	b.n	8009044 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009042:	2302      	movs	r3, #2
  }
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800905a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009062:	2b00      	cmp	r3, #0
 8009064:	d015      	beq.n	8009092 <USBD_CDC_EP0_RxReady+0x46>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800906c:	2bff      	cmp	r3, #255	; 0xff
 800906e:	d010      	beq.n	8009092 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800907e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009086:	b292      	uxth	r2, r2
 8009088:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	22ff      	movs	r2, #255	; 0xff
 800908e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2243      	movs	r2, #67	; 0x43
 80090a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80090aa:	4b03      	ldr	r3, [pc, #12]	; (80090b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bc80      	pop	{r7}
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	2000035c 	.word	0x2000035c

080090bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2243      	movs	r2, #67	; 0x43
 80090c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80090ca:	4b03      	ldr	r3, [pc, #12]	; (80090d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bc80      	pop	{r7}
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	20000318 	.word	0x20000318

080090dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2243      	movs	r2, #67	; 0x43
 80090e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80090ea:	4b03      	ldr	r3, [pc, #12]	; (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bc80      	pop	{r7}
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	200003a0 	.word	0x200003a0

080090fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	220a      	movs	r2, #10
 8009108:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800910a:	4b03      	ldr	r3, [pc, #12]	; (8009118 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	bc80      	pop	{r7}
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	200002d4 	.word	0x200002d4

0800911c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009126:	2302      	movs	r3, #2
 8009128:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	bc80      	pop	{r7}
 8009146:	4770      	bx	lr

08009148 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	4613      	mov	r3, r2
 8009154:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800915c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009166:	88fa      	ldrh	r2, [r7, #6]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	371c      	adds	r7, #28
 8009174:	46bd      	mov	sp, r7
 8009176:	bc80      	pop	{r7}
 8009178:	4770      	bx	lr

0800917a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800917a:	b480      	push	{r7}
 800917c:	b085      	sub	sp, #20
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800918a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	bc80      	pop	{r7}
 800919e:	4770      	bx	lr

080091a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80091ae:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d01c      	beq.n	80091f4 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d115      	bne.n	80091f0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	2181      	movs	r1, #129	; 0x81
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f001 fcb3 	bl	800ab52 <USBD_LL_Transmit>

      return USBD_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	e002      	b.n	80091f6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e000      	b.n	80091f6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80091f4:	2302      	movs	r3, #2
  }
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800920c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009214:	2b00      	cmp	r3, #0
 8009216:	d017      	beq.n	8009248 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	7c1b      	ldrb	r3, [r3, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800922a:	2101      	movs	r1, #1
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 fcb3 	bl	800ab98 <USBD_LL_PrepareReceive>
 8009232:	e007      	b.n	8009244 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800923a:	2340      	movs	r3, #64	; 0x40
 800923c:	2101      	movs	r1, #1
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 fcaa 	bl	800ab98 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	e000      	b.n	800924a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009248:	2302      	movs	r3, #2
  }
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b084      	sub	sp, #16
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	4613      	mov	r3, r2
 800925e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009266:	2302      	movs	r3, #2
 8009268:	e01a      	b.n	80092a0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	79fa      	ldrb	r2, [r7, #7]
 8009296:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f001 fb17 	bl	800a8cc <USBD_LL_Init>

  return USBD_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d006      	beq.n	80092ca <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
 80092c8:	e001      	b.n	80092ce <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80092ca:	2302      	movs	r3, #2
 80092cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bc80      	pop	{r7}
 80092d8:	4770      	bx	lr

080092da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b082      	sub	sp, #8
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f001 fb4c 	bl	800a980 <USBD_LL_Start>

  return USBD_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	bc80      	pop	{r7}
 8009304:	4770      	bx	lr

08009306 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009312:	2302      	movs	r3, #2
 8009314:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00c      	beq.n	800933a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	78fa      	ldrb	r2, [r7, #3]
 800932a:	4611      	mov	r1, r2
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	4798      	blx	r3
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	4611      	mov	r1, r2
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3
  return USBD_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	4618      	mov	r0, r3
 800937e:	f000 fe62 	bl	800a046 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8009390:	461a      	mov	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800939e:	f003 031f 	and.w	r3, r3, #31
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d016      	beq.n	80093d4 <USBD_LL_SetupStage+0x6a>
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d81c      	bhi.n	80093e4 <USBD_LL_SetupStage+0x7a>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <USBD_LL_SetupStage+0x4a>
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d008      	beq.n	80093c4 <USBD_LL_SetupStage+0x5a>
 80093b2:	e017      	b.n	80093e4 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f9c5 	bl	800974c <USBD_StdDevReq>
    break;
 80093c2:	e01a      	b.n	80093fa <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80093ca:	4619      	mov	r1, r3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fa27 	bl	8009820 <USBD_StdItfReq>
    break;
 80093d2:	e012      	b.n	80093fa <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fa67 	bl	80098b0 <USBD_StdEPReq>
    break;
 80093e2:	e00a      	b.n	80093fa <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80093ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f001 fb24 	bl	800aa40 <USBD_LL_StallEP>
    break;
 80093f8:	bf00      	nop
  }

  return USBD_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	460b      	mov	r3, r1
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8009412:	7afb      	ldrb	r3, [r7, #11]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d14b      	bne.n	80094b0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800941e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009426:	2b03      	cmp	r3, #3
 8009428:	d134      	bne.n	8009494 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	68da      	ldr	r2, [r3, #12]
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	429a      	cmp	r2, r3
 8009434:	d919      	bls.n	800946a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800944c:	429a      	cmp	r2, r3
 800944e:	d203      	bcs.n	8009458 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8009454:	b29b      	uxth	r3, r3
 8009456:	e002      	b.n	800945e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800945c:	b29b      	uxth	r3, r3
 800945e:	461a      	mov	r2, r3
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fee1 	bl	800a22a <USBD_CtlContinueRx>
 8009468:	e038      	b.n	80094dc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800947c:	2b03      	cmp	r3, #3
 800947e:	d105      	bne.n	800948c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 fede 	bl	800a24e <USBD_CtlSendStatus>
 8009492:	e023      	b.n	80094dc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800949a:	2b05      	cmp	r3, #5
 800949c:	d11e      	bne.n	80094dc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80094a6:	2100      	movs	r1, #0
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f001 fac9 	bl	800aa40 <USBD_LL_StallEP>
 80094ae:	e015      	b.n	80094dc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00d      	beq.n	80094d8 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d108      	bne.n	80094d8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	7afa      	ldrb	r2, [r7, #11]
 80094d0:	4611      	mov	r1, r2
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	4798      	blx	r3
 80094d6:	e001      	b.n	80094dc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094d8:	2302      	movs	r3, #2
 80094da:	e000      	b.n	80094de <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b086      	sub	sp, #24
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	60f8      	str	r0, [r7, #12]
 80094ee:	460b      	mov	r3, r1
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80094f4:	7afb      	ldrb	r3, [r7, #11]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d17f      	bne.n	80095fa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3314      	adds	r3, #20
 80094fe:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009506:	2b02      	cmp	r3, #2
 8009508:	d15c      	bne.n	80095c4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	429a      	cmp	r2, r3
 8009514:	d915      	bls.n	8009542 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	68da      	ldr	r2, [r3, #12]
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	1ad2      	subs	r2, r2, r3
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	b29b      	uxth	r3, r3
 800952a:	461a      	mov	r2, r3
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 fe4b 	bl	800a1ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009534:	2300      	movs	r3, #0
 8009536:	2200      	movs	r2, #0
 8009538:	2100      	movs	r1, #0
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f001 fb2c 	bl	800ab98 <USBD_LL_PrepareReceive>
 8009540:	e04e      	b.n	80095e0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	6912      	ldr	r2, [r2, #16]
 800954a:	fbb3 f1f2 	udiv	r1, r3, r2
 800954e:	fb02 f201 	mul.w	r2, r2, r1
 8009552:	1a9b      	subs	r3, r3, r2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d11c      	bne.n	8009592 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009560:	429a      	cmp	r2, r3
 8009562:	d316      	bcc.n	8009592 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	689a      	ldr	r2, [r3, #8]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800956e:	429a      	cmp	r2, r3
 8009570:	d20f      	bcs.n	8009592 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009572:	2200      	movs	r2, #0
 8009574:	2100      	movs	r1, #0
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 fe27 	bl	800a1ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009584:	2300      	movs	r3, #0
 8009586:	2200      	movs	r2, #0
 8009588:	2100      	movs	r1, #0
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f001 fb04 	bl	800ab98 <USBD_LL_PrepareReceive>
 8009590:	e026      	b.n	80095e0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00a      	beq.n	80095b4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d105      	bne.n	80095b4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80095b4:	2180      	movs	r1, #128	; 0x80
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f001 fa42 	bl	800aa40 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fe59 	bl	800a274 <USBD_CtlReceiveStatus>
 80095c2:	e00d      	b.n	80095e0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80095ca:	2b04      	cmp	r3, #4
 80095cc:	d004      	beq.n	80095d8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d103      	bne.n	80095e0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80095d8:	2180      	movs	r1, #128	; 0x80
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f001 fa30 	bl	800aa40 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d11d      	bne.n	8009626 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7ff fe81 	bl	80092f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80095f8:	e015      	b.n	8009626 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00d      	beq.n	8009622 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800960c:	2b03      	cmp	r3, #3
 800960e:	d108      	bne.n	8009622 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	7afa      	ldrb	r2, [r7, #11]
 800961a:	4611      	mov	r1, r2
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	4798      	blx	r3
 8009620:	e001      	b.n	8009626 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009622:	2302      	movs	r3, #2
 8009624:	e000      	b.n	8009628 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009638:	2340      	movs	r3, #64	; 0x40
 800963a:	2200      	movs	r2, #0
 800963c:	2100      	movs	r1, #0
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f001 f9b9 	bl	800a9b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2240      	movs	r2, #64	; 0x40
 8009650:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009654:	2340      	movs	r3, #64	; 0x40
 8009656:	2200      	movs	r2, #0
 8009658:	2180      	movs	r1, #128	; 0x80
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 f9ab 	bl	800a9b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2240      	movs	r2, #64	; 0x40
 800966a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009690:	2b00      	cmp	r3, #0
 8009692:	d009      	beq.n	80096a8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	6852      	ldr	r2, [r2, #4]
 80096a0:	b2d2      	uxtb	r2, r2
 80096a2:	4611      	mov	r1, r2
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	4798      	blx	r3
  }

  return USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	78fa      	ldrb	r2, [r7, #3]
 80096c2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bc80      	pop	{r7}
 80096ce:	4770      	bx	lr

080096d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2204      	movs	r2, #4
 80096e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bc80      	pop	{r7}
 80096f6:	4770      	bx	lr

080096f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	bc80      	pop	{r7}
 8009716:	4770      	bx	lr

08009718 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009726:	2b03      	cmp	r3, #3
 8009728:	d10b      	bne.n	8009742 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d005      	beq.n	8009742 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009762:	2b40      	cmp	r3, #64	; 0x40
 8009764:	d005      	beq.n	8009772 <USBD_StdDevReq+0x26>
 8009766:	2b40      	cmp	r3, #64	; 0x40
 8009768:	d84f      	bhi.n	800980a <USBD_StdDevReq+0xbe>
 800976a:	2b00      	cmp	r3, #0
 800976c:	d009      	beq.n	8009782 <USBD_StdDevReq+0x36>
 800976e:	2b20      	cmp	r3, #32
 8009770:	d14b      	bne.n	800980a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	4798      	blx	r3
    break;
 8009780:	e048      	b.n	8009814 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	785b      	ldrb	r3, [r3, #1]
 8009786:	2b09      	cmp	r3, #9
 8009788:	d839      	bhi.n	80097fe <USBD_StdDevReq+0xb2>
 800978a:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <USBD_StdDevReq+0x44>)
 800978c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009790:	080097e1 	.word	0x080097e1
 8009794:	080097f5 	.word	0x080097f5
 8009798:	080097ff 	.word	0x080097ff
 800979c:	080097eb 	.word	0x080097eb
 80097a0:	080097ff 	.word	0x080097ff
 80097a4:	080097c3 	.word	0x080097c3
 80097a8:	080097b9 	.word	0x080097b9
 80097ac:	080097ff 	.word	0x080097ff
 80097b0:	080097d7 	.word	0x080097d7
 80097b4:	080097cd 	.word	0x080097cd
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f9da 	bl	8009b74 <USBD_GetDescriptor>
      break;
 80097c0:	e022      	b.n	8009808 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 facf 	bl	8009d68 <USBD_SetAddress>
      break;
 80097ca:	e01d      	b.n	8009808 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fb0e 	bl	8009df0 <USBD_SetConfig>
      break;
 80097d4:	e018      	b.n	8009808 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fb97 	bl	8009f0c <USBD_GetConfig>
      break;
 80097de:	e013      	b.n	8009808 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fbc7 	bl	8009f76 <USBD_GetStatus>
      break;
 80097e8:	e00e      	b.n	8009808 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fbf5 	bl	8009fdc <USBD_SetFeature>
      break;
 80097f2:	e009      	b.n	8009808 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fc04 	bl	800a004 <USBD_ClrFeature>
      break;
 80097fc:	e004      	b.n	8009808 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fc5c 	bl	800a0be <USBD_CtlError>
      break;
 8009806:	bf00      	nop
    }
    break;
 8009808:	e004      	b.n	8009814 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fc56 	bl	800a0be <USBD_CtlError>
    break;
 8009812:	bf00      	nop
  }

  return ret;
 8009814:	7bfb      	ldrb	r3, [r7, #15]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop

08009820 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009836:	2b40      	cmp	r3, #64	; 0x40
 8009838:	d005      	beq.n	8009846 <USBD_StdItfReq+0x26>
 800983a:	2b40      	cmp	r3, #64	; 0x40
 800983c:	d82e      	bhi.n	800989c <USBD_StdItfReq+0x7c>
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <USBD_StdItfReq+0x26>
 8009842:	2b20      	cmp	r3, #32
 8009844:	d12a      	bne.n	800989c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800984c:	3b01      	subs	r3, #1
 800984e:	2b02      	cmp	r3, #2
 8009850:	d81d      	bhi.n	800988e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	889b      	ldrh	r3, [r3, #4]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b01      	cmp	r3, #1
 800985a:	d813      	bhi.n	8009884 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	4798      	blx	r3
 800986a:	4603      	mov	r3, r0
 800986c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	88db      	ldrh	r3, [r3, #6]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d110      	bne.n	8009898 <USBD_StdItfReq+0x78>
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10d      	bne.n	8009898 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fce6 	bl	800a24e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009882:	e009      	b.n	8009898 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fc19 	bl	800a0be <USBD_CtlError>
      break;
 800988c:	e004      	b.n	8009898 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fc14 	bl	800a0be <USBD_CtlError>
      break;
 8009896:	e000      	b.n	800989a <USBD_StdItfReq+0x7a>
      break;
 8009898:	bf00      	nop
    }
    break;
 800989a:	e004      	b.n	80098a6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fc0d 	bl	800a0be <USBD_CtlError>
    break;
 80098a4:	bf00      	nop
  }

  return USBD_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	889b      	ldrh	r3, [r3, #4]
 80098c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098cc:	2b40      	cmp	r3, #64	; 0x40
 80098ce:	d007      	beq.n	80098e0 <USBD_StdEPReq+0x30>
 80098d0:	2b40      	cmp	r3, #64	; 0x40
 80098d2:	f200 8144 	bhi.w	8009b5e <USBD_StdEPReq+0x2ae>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00a      	beq.n	80098f0 <USBD_StdEPReq+0x40>
 80098da:	2b20      	cmp	r3, #32
 80098dc:	f040 813f 	bne.w	8009b5e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	4798      	blx	r3
    break;
 80098ee:	e13b      	b.n	8009b68 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098f8:	2b20      	cmp	r3, #32
 80098fa:	d10a      	bne.n	8009912 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	4798      	blx	r3
 800990a:	4603      	mov	r3, r0
 800990c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800990e:	7bfb      	ldrb	r3, [r7, #15]
 8009910:	e12b      	b.n	8009b6a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	785b      	ldrb	r3, [r3, #1]
 8009916:	2b03      	cmp	r3, #3
 8009918:	d007      	beq.n	800992a <USBD_StdEPReq+0x7a>
 800991a:	2b03      	cmp	r3, #3
 800991c:	f300 8119 	bgt.w	8009b52 <USBD_StdEPReq+0x2a2>
 8009920:	2b00      	cmp	r3, #0
 8009922:	d072      	beq.n	8009a0a <USBD_StdEPReq+0x15a>
 8009924:	2b01      	cmp	r3, #1
 8009926:	d03a      	beq.n	800999e <USBD_StdEPReq+0xee>
 8009928:	e113      	b.n	8009b52 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009930:	2b02      	cmp	r3, #2
 8009932:	d002      	beq.n	800993a <USBD_StdEPReq+0x8a>
 8009934:	2b03      	cmp	r3, #3
 8009936:	d015      	beq.n	8009964 <USBD_StdEPReq+0xb4>
 8009938:	e02b      	b.n	8009992 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00c      	beq.n	800995a <USBD_StdEPReq+0xaa>
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	2b80      	cmp	r3, #128	; 0x80
 8009944:	d009      	beq.n	800995a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009946:	7bbb      	ldrb	r3, [r7, #14]
 8009948:	4619      	mov	r1, r3
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f001 f878 	bl	800aa40 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009950:	2180      	movs	r1, #128	; 0x80
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f001 f874 	bl	800aa40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009958:	e020      	b.n	800999c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fbae 	bl	800a0be <USBD_CtlError>
        break;
 8009962:	e01b      	b.n	800999c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	885b      	ldrh	r3, [r3, #2]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10e      	bne.n	800998a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00b      	beq.n	800998a <USBD_StdEPReq+0xda>
 8009972:	7bbb      	ldrb	r3, [r7, #14]
 8009974:	2b80      	cmp	r3, #128	; 0x80
 8009976:	d008      	beq.n	800998a <USBD_StdEPReq+0xda>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	88db      	ldrh	r3, [r3, #6]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d104      	bne.n	800998a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f001 f85b 	bl	800aa40 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fc5f 	bl	800a24e <USBD_CtlSendStatus>

        break;
 8009990:	e004      	b.n	800999c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fb92 	bl	800a0be <USBD_CtlError>
        break;
 800999a:	bf00      	nop
      }
      break;
 800999c:	e0de      	b.n	8009b5c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d002      	beq.n	80099ae <USBD_StdEPReq+0xfe>
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	d015      	beq.n	80099d8 <USBD_StdEPReq+0x128>
 80099ac:	e026      	b.n	80099fc <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00c      	beq.n	80099ce <USBD_StdEPReq+0x11e>
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	2b80      	cmp	r3, #128	; 0x80
 80099b8:	d009      	beq.n	80099ce <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80099ba:	7bbb      	ldrb	r3, [r7, #14]
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f001 f83e 	bl	800aa40 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80099c4:	2180      	movs	r1, #128	; 0x80
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f001 f83a 	bl	800aa40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80099cc:	e01c      	b.n	8009a08 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fb74 	bl	800a0be <USBD_CtlError>
        break;
 80099d6:	e017      	b.n	8009a08 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	885b      	ldrh	r3, [r3, #2]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d112      	bne.n	8009a06 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d004      	beq.n	80099f4 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 f845 	bl	800aa7e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fc2a 	bl	800a24e <USBD_CtlSendStatus>
        }
        break;
 80099fa:	e004      	b.n	8009a06 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fb5d 	bl	800a0be <USBD_CtlError>
        break;
 8009a04:	e000      	b.n	8009a08 <USBD_StdEPReq+0x158>
        break;
 8009a06:	bf00      	nop
      }
      break;
 8009a08:	e0a8      	b.n	8009b5c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d002      	beq.n	8009a1a <USBD_StdEPReq+0x16a>
 8009a14:	2b03      	cmp	r3, #3
 8009a16:	d031      	beq.n	8009a7c <USBD_StdEPReq+0x1cc>
 8009a18:	e095      	b.n	8009b46 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d007      	beq.n	8009a30 <USBD_StdEPReq+0x180>
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	2b80      	cmp	r3, #128	; 0x80
 8009a24:	d004      	beq.n	8009a30 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fb48 	bl	800a0be <USBD_CtlError>
          break;
 8009a2e:	e08f      	b.n	8009b50 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	da0b      	bge.n	8009a50 <USBD_StdEPReq+0x1a0>
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a3e:	4613      	mov	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	3310      	adds	r3, #16
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	e00a      	b.n	8009a66 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009a50:	7bbb      	ldrb	r3, [r7, #14]
 8009a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009a56:	4613      	mov	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	4413      	add	r3, r2
 8009a66:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2202      	movs	r2, #2
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fb8c 	bl	800a192 <USBD_CtlSendData>
          break;
 8009a7a:	e069      	b.n	8009b50 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8009a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	da11      	bge.n	8009aa8 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	f003 020f 	and.w	r2, r3, #15
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	440b      	add	r3, r1
 8009a96:	3318      	adds	r3, #24
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d117      	bne.n	8009ace <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fb0c 	bl	800a0be <USBD_CtlError>
            break;
 8009aa6:	e053      	b.n	8009b50 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	f003 020f 	and.w	r2, r3, #15
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	440b      	add	r3, r1
 8009aba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d104      	bne.n	8009ace <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 faf9 	bl	800a0be <USBD_CtlError>
            break;
 8009acc:	e040      	b.n	8009b50 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009ace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	da0b      	bge.n	8009aee <USBD_StdEPReq+0x23e>
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	3310      	adds	r3, #16
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	4413      	add	r3, r2
 8009aea:	3304      	adds	r3, #4
 8009aec:	e00a      	b.n	8009b04 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
 8009af0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009af4:	4613      	mov	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	4413      	add	r3, r2
 8009b04:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <USBD_StdEPReq+0x262>
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b80      	cmp	r3, #128	; 0x80
 8009b10:	d103      	bne.n	8009b1a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	e00e      	b.n	8009b38 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 ffcc 	bl	800aabc <USBD_LL_IsStallEP>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d003      	beq.n	8009b32 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	e002      	b.n	8009b38 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2200      	movs	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fb27 	bl	800a192 <USBD_CtlSendData>
          break;
 8009b44:	e004      	b.n	8009b50 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fab8 	bl	800a0be <USBD_CtlError>
        break;
 8009b4e:	bf00      	nop
      }
      break;
 8009b50:	e004      	b.n	8009b5c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fab2 	bl	800a0be <USBD_CtlError>
      break;
 8009b5a:	bf00      	nop
    }
    break;
 8009b5c:	e004      	b.n	8009b68 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 faac 	bl	800a0be <USBD_CtlError>
    break;
 8009b66:	bf00      	nop
  }

  return ret;
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
	...

08009b74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	885b      	ldrh	r3, [r3, #2]
 8009b82:	0a1b      	lsrs	r3, r3, #8
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	3b01      	subs	r3, #1
 8009b88:	2b06      	cmp	r3, #6
 8009b8a:	f200 80c9 	bhi.w	8009d20 <USBD_GetDescriptor+0x1ac>
 8009b8e:	a201      	add	r2, pc, #4	; (adr r2, 8009b94 <USBD_GetDescriptor+0x20>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009bb1 	.word	0x08009bb1
 8009b98:	08009bc9 	.word	0x08009bc9
 8009b9c:	08009c09 	.word	0x08009c09
 8009ba0:	08009d21 	.word	0x08009d21
 8009ba4:	08009d21 	.word	0x08009d21
 8009ba8:	08009ccd 	.word	0x08009ccd
 8009bac:	08009cf3 	.word	0x08009cf3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	7c12      	ldrb	r2, [r2, #16]
 8009bbc:	f107 010a 	add.w	r1, r7, #10
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	4798      	blx	r3
 8009bc4:	60f8      	str	r0, [r7, #12]
    break;
 8009bc6:	e0b0      	b.n	8009d2a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	7c1b      	ldrb	r3, [r3, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10d      	bne.n	8009bec <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd8:	f107 020a 	add.w	r2, r7, #10
 8009bdc:	4610      	mov	r0, r2
 8009bde:	4798      	blx	r3
 8009be0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	2202      	movs	r2, #2
 8009be8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009bea:	e09e      	b.n	8009d2a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf4:	f107 020a 	add.w	r2, r7, #10
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
 8009bfc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	2202      	movs	r2, #2
 8009c04:	701a      	strb	r2, [r3, #0]
    break;
 8009c06:	e090      	b.n	8009d2a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	885b      	ldrh	r3, [r3, #2]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b05      	cmp	r3, #5
 8009c10:	d856      	bhi.n	8009cc0 <USBD_GetDescriptor+0x14c>
 8009c12:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <USBD_GetDescriptor+0xa4>)
 8009c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c18:	08009c31 	.word	0x08009c31
 8009c1c:	08009c49 	.word	0x08009c49
 8009c20:	08009c61 	.word	0x08009c61
 8009c24:	08009c79 	.word	0x08009c79
 8009c28:	08009c91 	.word	0x08009c91
 8009c2c:	08009ca9 	.word	0x08009ca9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	7c12      	ldrb	r2, [r2, #16]
 8009c3c:	f107 010a 	add.w	r1, r7, #10
 8009c40:	4610      	mov	r0, r2
 8009c42:	4798      	blx	r3
 8009c44:	60f8      	str	r0, [r7, #12]
      break;
 8009c46:	e040      	b.n	8009cca <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	7c12      	ldrb	r2, [r2, #16]
 8009c54:	f107 010a 	add.w	r1, r7, #10
 8009c58:	4610      	mov	r0, r2
 8009c5a:	4798      	blx	r3
 8009c5c:	60f8      	str	r0, [r7, #12]
      break;
 8009c5e:	e034      	b.n	8009cca <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	7c12      	ldrb	r2, [r2, #16]
 8009c6c:	f107 010a 	add.w	r1, r7, #10
 8009c70:	4610      	mov	r0, r2
 8009c72:	4798      	blx	r3
 8009c74:	60f8      	str	r0, [r7, #12]
      break;
 8009c76:	e028      	b.n	8009cca <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	7c12      	ldrb	r2, [r2, #16]
 8009c84:	f107 010a 	add.w	r1, r7, #10
 8009c88:	4610      	mov	r0, r2
 8009c8a:	4798      	blx	r3
 8009c8c:	60f8      	str	r0, [r7, #12]
      break;
 8009c8e:	e01c      	b.n	8009cca <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	7c12      	ldrb	r2, [r2, #16]
 8009c9c:	f107 010a 	add.w	r1, r7, #10
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	4798      	blx	r3
 8009ca4:	60f8      	str	r0, [r7, #12]
      break;
 8009ca6:	e010      	b.n	8009cca <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	7c12      	ldrb	r2, [r2, #16]
 8009cb4:	f107 010a 	add.w	r1, r7, #10
 8009cb8:	4610      	mov	r0, r2
 8009cba:	4798      	blx	r3
 8009cbc:	60f8      	str	r0, [r7, #12]
      break;
 8009cbe:	e004      	b.n	8009cca <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f9fb 	bl	800a0be <USBD_CtlError>
      return;
 8009cc8:	e04b      	b.n	8009d62 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8009cca:	e02e      	b.n	8009d2a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7c1b      	ldrb	r3, [r3, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d109      	bne.n	8009ce8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cdc:	f107 020a 	add.w	r2, r7, #10
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	4798      	blx	r3
 8009ce4:	60f8      	str	r0, [r7, #12]
      break;
 8009ce6:	e020      	b.n	8009d2a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f9e7 	bl	800a0be <USBD_CtlError>
      return;
 8009cf0:	e037      	b.n	8009d62 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	7c1b      	ldrb	r3, [r3, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10d      	bne.n	8009d16 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d02:	f107 020a 	add.w	r2, r7, #10
 8009d06:	4610      	mov	r0, r2
 8009d08:	4798      	blx	r3
 8009d0a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	2207      	movs	r2, #7
 8009d12:	701a      	strb	r2, [r3, #0]
      break;
 8009d14:	e009      	b.n	8009d2a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f9d0 	bl	800a0be <USBD_CtlError>
      return;
 8009d1e:	e020      	b.n	8009d62 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f9cb 	bl	800a0be <USBD_CtlError>
    return;
 8009d28:	e01b      	b.n	8009d62 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8009d2a:	897b      	ldrh	r3, [r7, #10]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d011      	beq.n	8009d54 <USBD_GetDescriptor+0x1e0>
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	88db      	ldrh	r3, [r3, #6]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00d      	beq.n	8009d54 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	88da      	ldrh	r2, [r3, #6]
 8009d3c:	897b      	ldrh	r3, [r7, #10]
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	bf28      	it	cs
 8009d42:	4613      	movcs	r3, r2
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009d48:	897b      	ldrh	r3, [r7, #10]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	68f9      	ldr	r1, [r7, #12]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fa1f 	bl	800a192 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	88db      	ldrh	r3, [r3, #6]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fa76 	bl	800a24e <USBD_CtlSendStatus>
  }
}
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	889b      	ldrh	r3, [r3, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d130      	bne.n	8009ddc <USBD_SetAddress+0x74>
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	88db      	ldrh	r3, [r3, #6]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d12c      	bne.n	8009ddc <USBD_SetAddress+0x74>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	885b      	ldrh	r3, [r3, #2]
 8009d86:	2b7f      	cmp	r3, #127	; 0x7f
 8009d88:	d828      	bhi.n	8009ddc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	885b      	ldrh	r3, [r3, #2]
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d104      	bne.n	8009daa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f98b 	bl	800a0be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da8:	e01d      	b.n	8009de6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	7bfa      	ldrb	r2, [r7, #15]
 8009dae:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 feac 	bl	800ab14 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fa46 	bl	800a24e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d004      	beq.n	8009dd2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dd0:	e009      	b.n	8009de6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dda:	e004      	b.n	8009de6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f96d 	bl	800a0be <USBD_CtlError>
  }
}
 8009de4:	bf00      	nop
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
	...

08009df0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	885b      	ldrh	r3, [r3, #2]
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	4b41      	ldr	r3, [pc, #260]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e04:	4b40      	ldr	r3, [pc, #256]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d904      	bls.n	8009e16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f955 	bl	800a0be <USBD_CtlError>
 8009e14:	e075      	b.n	8009f02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d002      	beq.n	8009e26 <USBD_SetConfig+0x36>
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	d023      	beq.n	8009e6c <USBD_SetConfig+0x7c>
 8009e24:	e062      	b.n	8009eec <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009e26:	4b38      	ldr	r3, [pc, #224]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d01a      	beq.n	8009e64 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8009e2e:	4b36      	ldr	r3, [pc, #216]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2203      	movs	r2, #3
 8009e3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e40:	4b31      	ldr	r3, [pc, #196]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7ff fa5d 	bl	8009306 <USBD_SetClassConfig>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d104      	bne.n	8009e5c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f932 	bl	800a0be <USBD_CtlError>
          return;
 8009e5a:	e052      	b.n	8009f02 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f9f6 	bl	800a24e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009e62:	e04e      	b.n	8009f02 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f9f2 	bl	800a24e <USBD_CtlSendStatus>
      break;
 8009e6a:	e04a      	b.n	8009f02 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e6c:	4b26      	ldr	r3, [pc, #152]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d112      	bne.n	8009e9a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009e7c:	4b22      	ldr	r3, [pc, #136]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	461a      	mov	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009e86:	4b20      	ldr	r3, [pc, #128]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7ff fa59 	bl	8009344 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f9db 	bl	800a24e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009e98:	e033      	b.n	8009f02 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009e9a:	4b1b      	ldr	r3, [pc, #108]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d01d      	beq.n	8009ee4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7ff fa47 	bl	8009344 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009eb6:	4b14      	ldr	r3, [pc, #80]	; (8009f08 <USBD_SetConfig+0x118>)
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ec0:	4b11      	ldr	r3, [pc, #68]	; (8009f08 <USBD_SetConfig+0x118>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff fa1d 	bl	8009306 <USBD_SetClassConfig>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d104      	bne.n	8009edc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f8f2 	bl	800a0be <USBD_CtlError>
          return;
 8009eda:	e012      	b.n	8009f02 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f9b6 	bl	800a24e <USBD_CtlSendStatus>
      break;
 8009ee2:	e00e      	b.n	8009f02 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f9b2 	bl	800a24e <USBD_CtlSendStatus>
      break;
 8009eea:	e00a      	b.n	8009f02 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f8e5 	bl	800a0be <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009ef4:	4b04      	ldr	r3, [pc, #16]	; (8009f08 <USBD_SetConfig+0x118>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff fa22 	bl	8009344 <USBD_ClrClassConfig>
      break;
 8009f00:	bf00      	nop
    }
  }
}
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	2000063c 	.word	0x2000063c

08009f0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	88db      	ldrh	r3, [r3, #6]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d004      	beq.n	8009f28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f8cc 	bl	800a0be <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009f26:	e022      	b.n	8009f6e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	dc02      	bgt.n	8009f38 <USBD_GetConfig+0x2c>
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dc03      	bgt.n	8009f3e <USBD_GetConfig+0x32>
 8009f36:	e015      	b.n	8009f64 <USBD_GetConfig+0x58>
 8009f38:	2b03      	cmp	r3, #3
 8009f3a:	d00b      	beq.n	8009f54 <USBD_GetConfig+0x48>
 8009f3c:	e012      	b.n	8009f64 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3308      	adds	r3, #8
 8009f48:	2201      	movs	r2, #1
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f920 	bl	800a192 <USBD_CtlSendData>
      break;
 8009f52:	e00c      	b.n	8009f6e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	3304      	adds	r3, #4
 8009f58:	2201      	movs	r2, #1
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f918 	bl	800a192 <USBD_CtlSendData>
      break;
 8009f62:	e004      	b.n	8009f6e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f8a9 	bl	800a0be <USBD_CtlError>
      break;
 8009f6c:	bf00      	nop
}
 8009f6e:	bf00      	nop
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f86:	3b01      	subs	r3, #1
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	d81e      	bhi.n	8009fca <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	88db      	ldrh	r3, [r3, #6]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d004      	beq.n	8009f9e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f891 	bl	800a0be <USBD_CtlError>
      break;
 8009f9c:	e01a      	b.n	8009fd4 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d005      	beq.n	8009fba <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	f043 0202 	orr.w	r2, r3, #2
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	330c      	adds	r3, #12
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f8e5 	bl	800a192 <USBD_CtlSendData>
    break;
 8009fc8:	e004      	b.n	8009fd4 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f876 	bl	800a0be <USBD_CtlError>
    break;
 8009fd2:	bf00      	nop
  }
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	885b      	ldrh	r3, [r3, #2]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d106      	bne.n	8009ffc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f929 	bl	800a24e <USBD_CtlSendStatus>
  }

}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a014:	3b01      	subs	r3, #1
 800a016:	2b02      	cmp	r3, #2
 800a018:	d80b      	bhi.n	800a032 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	885b      	ldrh	r3, [r3, #2]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d10c      	bne.n	800a03c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f90f 	bl	800a24e <USBD_CtlSendStatus>
    }
    break;
 800a030:	e004      	b.n	800a03c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f842 	bl	800a0be <USBD_CtlError>
    break;
 800a03a:	e000      	b.n	800a03e <USBD_ClrFeature+0x3a>
    break;
 800a03c:	bf00      	nop
  }
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a046:	b480      	push	{r7}
 800a048:	b083      	sub	sp, #12
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
 800a04e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781a      	ldrb	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	785a      	ldrb	r2, [r3, #1]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	3302      	adds	r3, #2
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	b29a      	uxth	r2, r3
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	3303      	adds	r3, #3
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	021b      	lsls	r3, r3, #8
 800a072:	b29b      	uxth	r3, r3
 800a074:	4413      	add	r3, r2
 800a076:	b29a      	uxth	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	3304      	adds	r3, #4
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	b29a      	uxth	r2, r3
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	3305      	adds	r3, #5
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	021b      	lsls	r3, r3, #8
 800a08e:	b29b      	uxth	r3, r3
 800a090:	4413      	add	r3, r2
 800a092:	b29a      	uxth	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	3306      	adds	r3, #6
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	3307      	adds	r3, #7
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	021b      	lsls	r3, r3, #8
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	4413      	add	r3, r2
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	80da      	strh	r2, [r3, #6]

}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bc80      	pop	{r7}
 800a0bc:	4770      	bx	lr

0800a0be <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800a0c8:	2180      	movs	r1, #128	; 0x80
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fcb8 	bl	800aa40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fcb4 	bl	800aa40 <USBD_LL_StallEP>
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d032      	beq.n	800a15c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 f834 	bl	800a164 <USBD_GetLen>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	3301      	adds	r3, #1
 800a100:	b29b      	uxth	r3, r3
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	b29a      	uxth	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a10a:	7dfb      	ldrb	r3, [r7, #23]
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	75fa      	strb	r2, [r7, #23]
 800a110:	461a      	mov	r2, r3
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	4413      	add	r3, r2
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	7812      	ldrb	r2, [r2, #0]
 800a11a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	75fa      	strb	r2, [r7, #23]
 800a122:	461a      	mov	r2, r3
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4413      	add	r3, r2
 800a128:	2203      	movs	r2, #3
 800a12a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a12c:	e012      	b.n	800a154 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	60fa      	str	r2, [r7, #12]
 800a134:	7dfa      	ldrb	r2, [r7, #23]
 800a136:	1c51      	adds	r1, r2, #1
 800a138:	75f9      	strb	r1, [r7, #23]
 800a13a:	4611      	mov	r1, r2
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	440a      	add	r2, r1
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	75fa      	strb	r2, [r7, #23]
 800a14a:	461a      	mov	r2, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	4413      	add	r3, r2
 800a150:	2200      	movs	r2, #0
 800a152:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e8      	bne.n	800a12e <USBD_GetString+0x4e>
    }
  }
}
 800a15c:	bf00      	nop
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800a170:	e005      	b.n	800a17e <USBD_GetLen+0x1a>
    {
        len++;
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	3301      	adds	r3, #1
 800a176:	73fb      	strb	r3, [r7, #15]
        buf++;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	3301      	adds	r3, #1
 800a17c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1f5      	bne.n	800a172 <USBD_GetLen+0xe>
    }

    return len;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr

0800a192 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	4613      	mov	r3, r2
 800a19e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800a1a8:	88fa      	ldrh	r2, [r7, #6]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a1ae:	88fa      	ldrh	r2, [r7, #6]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a1b4:	88fb      	ldrh	r3, [r7, #6]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 fcc9 	bl	800ab52 <USBD_LL_Transmit>

  return USBD_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	60f8      	str	r0, [r7, #12]
 800a1d2:	60b9      	str	r1, [r7, #8]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a1d8:	88fb      	ldrh	r3, [r7, #6]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	2100      	movs	r1, #0
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 fcb7 	bl	800ab52 <USBD_LL_Transmit>

  return USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2203      	movs	r2, #3
 800a200:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800a204:	88fa      	ldrh	r2, [r7, #6]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800a20c:	88fa      	ldrh	r2, [r7, #6]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800a214:	88fb      	ldrh	r3, [r7, #6]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	2100      	movs	r1, #0
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 fcbc 	bl	800ab98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	60f8      	str	r0, [r7, #12]
 800a232:	60b9      	str	r1, [r7, #8]
 800a234:	4613      	mov	r3, r2
 800a236:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a238:	88fb      	ldrh	r3, [r7, #6]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	2100      	movs	r1, #0
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 fcaa 	bl	800ab98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2204      	movs	r2, #4
 800a25a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a25e:	2300      	movs	r3, #0
 800a260:	2200      	movs	r2, #0
 800a262:	2100      	movs	r1, #0
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fc74 	bl	800ab52 <USBD_LL_Transmit>

  return USBD_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2205      	movs	r2, #5
 800a280:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a284:	2300      	movs	r3, #0
 800a286:	2200      	movs	r2, #0
 800a288:	2100      	movs	r1, #0
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fc84 	bl	800ab98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4912      	ldr	r1, [pc, #72]	; (800a2ec <MX_USB_DEVICE_Init+0x50>)
 800a2a4:	4812      	ldr	r0, [pc, #72]	; (800a2f0 <MX_USB_DEVICE_Init+0x54>)
 800a2a6:	f7fe ffd4 	bl	8009252 <USBD_Init>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2b0:	f7f8 f8ca 	bl	8002448 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a2b4:	490f      	ldr	r1, [pc, #60]	; (800a2f4 <MX_USB_DEVICE_Init+0x58>)
 800a2b6:	480e      	ldr	r0, [pc, #56]	; (800a2f0 <MX_USB_DEVICE_Init+0x54>)
 800a2b8:	f7fe fff6 	bl	80092a8 <USBD_RegisterClass>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2c2:	f7f8 f8c1 	bl	8002448 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a2c6:	490c      	ldr	r1, [pc, #48]	; (800a2f8 <MX_USB_DEVICE_Init+0x5c>)
 800a2c8:	4809      	ldr	r0, [pc, #36]	; (800a2f0 <MX_USB_DEVICE_Init+0x54>)
 800a2ca:	f7fe ff27 	bl	800911c <USBD_CDC_RegisterInterface>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2d4:	f7f8 f8b8 	bl	8002448 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2d8:	4805      	ldr	r0, [pc, #20]	; (800a2f0 <MX_USB_DEVICE_Init+0x54>)
 800a2da:	f7fe fffe 	bl	80092da <USBD_Start>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2e4:	f7f8 f8b0 	bl	8002448 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2e8:	bf00      	nop
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	200003f4 	.word	0x200003f4
 800a2f0:	200009b8 	.word	0x200009b8
 800a2f4:	200002e0 	.word	0x200002e0
 800a2f8:	200003e4 	.word	0x200003e4

0800a2fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a300:	2200      	movs	r2, #0
 800a302:	4905      	ldr	r1, [pc, #20]	; (800a318 <CDC_Init_FS+0x1c>)
 800a304:	4805      	ldr	r0, [pc, #20]	; (800a31c <CDC_Init_FS+0x20>)
 800a306:	f7fe ff1f 	bl	8009148 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a30a:	4905      	ldr	r1, [pc, #20]	; (800a320 <CDC_Init_FS+0x24>)
 800a30c:	4803      	ldr	r0, [pc, #12]	; (800a31c <CDC_Init_FS+0x20>)
 800a30e:	f7fe ff34 	bl	800917a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a312:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a314:	4618      	mov	r0, r3
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20000cd4 	.word	0x20000cd4
 800a31c:	200009b8 	.word	0x200009b8
 800a320:	20000c54 	.word	0x20000c54

0800a324 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a328:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bc80      	pop	{r7}
 800a330:	4770      	bx	lr
	...

0800a334 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	6039      	str	r1, [r7, #0]
 800a33e:	71fb      	strb	r3, [r7, #7]
 800a340:	4613      	mov	r3, r2
 800a342:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a344:	79fb      	ldrb	r3, [r7, #7]
 800a346:	2b23      	cmp	r3, #35	; 0x23
 800a348:	d866      	bhi.n	800a418 <CDC_Control_FS+0xe4>
 800a34a:	a201      	add	r2, pc, #4	; (adr r2, 800a350 <CDC_Control_FS+0x1c>)
 800a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a350:	0800a419 	.word	0x0800a419
 800a354:	0800a419 	.word	0x0800a419
 800a358:	0800a419 	.word	0x0800a419
 800a35c:	0800a419 	.word	0x0800a419
 800a360:	0800a419 	.word	0x0800a419
 800a364:	0800a419 	.word	0x0800a419
 800a368:	0800a419 	.word	0x0800a419
 800a36c:	0800a419 	.word	0x0800a419
 800a370:	0800a419 	.word	0x0800a419
 800a374:	0800a419 	.word	0x0800a419
 800a378:	0800a419 	.word	0x0800a419
 800a37c:	0800a419 	.word	0x0800a419
 800a380:	0800a419 	.word	0x0800a419
 800a384:	0800a419 	.word	0x0800a419
 800a388:	0800a419 	.word	0x0800a419
 800a38c:	0800a419 	.word	0x0800a419
 800a390:	0800a419 	.word	0x0800a419
 800a394:	0800a419 	.word	0x0800a419
 800a398:	0800a419 	.word	0x0800a419
 800a39c:	0800a419 	.word	0x0800a419
 800a3a0:	0800a419 	.word	0x0800a419
 800a3a4:	0800a419 	.word	0x0800a419
 800a3a8:	0800a419 	.word	0x0800a419
 800a3ac:	0800a419 	.word	0x0800a419
 800a3b0:	0800a419 	.word	0x0800a419
 800a3b4:	0800a419 	.word	0x0800a419
 800a3b8:	0800a419 	.word	0x0800a419
 800a3bc:	0800a419 	.word	0x0800a419
 800a3c0:	0800a419 	.word	0x0800a419
 800a3c4:	0800a419 	.word	0x0800a419
 800a3c8:	0800a419 	.word	0x0800a419
 800a3cc:	0800a419 	.word	0x0800a419
 800a3d0:	0800a419 	.word	0x0800a419
 800a3d4:	0800a3e1 	.word	0x0800a3e1
 800a3d8:	0800a419 	.word	0x0800a419
 800a3dc:	0800a419 	.word	0x0800a419
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	22c2      	movs	r2, #194	; 0xc2
 800a3ec:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	3302      	adds	r3, #2
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	3303      	adds	r3, #3
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	3304      	adds	r3, #4
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	3305      	adds	r3, #5
 800a40a:	2200      	movs	r2, #0
 800a40c:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	3306      	adds	r3, #6
 800a412:	2208      	movs	r2, #8
 800a414:	701a      	strb	r2, [r3, #0]
    break;
 800a416:	e000      	b.n	800a41a <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a418:	bf00      	nop
  }

  return (USBD_OK);
 800a41a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	bc80      	pop	{r7}
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop

0800a428 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800a432:	2300      	movs	r3, #0
 800a434:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800a436:	e018      	b.n	800a46a <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4413      	add	r3, r2
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b0a      	cmp	r3, #10
 800a442:	d005      	beq.n	800a450 <CDC_Receive_FS+0x28>
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4413      	add	r3, r2
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	2b0d      	cmp	r3, #13
 800a44e:	d102      	bne.n	800a456 <CDC_Receive_FS+0x2e>
 800a450:	4b12      	ldr	r3, [pc, #72]	; (800a49c <CDC_Receive_FS+0x74>)
 800a452:	2201      	movs	r2, #1
 800a454:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4413      	add	r3, r2
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	4618      	mov	r0, r3
 800a460:	f7f7 fbc8 	bl	8001bf4 <Write_to_circ_buffer>
	  i++;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3301      	adds	r3, #1
 800a468:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	429a      	cmp	r2, r3
 800a472:	d3e1      	bcc.n	800a438 <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f811 	bl	800a4a4 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a482:	6879      	ldr	r1, [r7, #4]
 800a484:	4806      	ldr	r0, [pc, #24]	; (800a4a0 <CDC_Receive_FS+0x78>)
 800a486:	f7fe fe78 	bl	800917a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a48a:	4805      	ldr	r0, [pc, #20]	; (800a4a0 <CDC_Receive_FS+0x78>)
 800a48c:	f7fe feb7 	bl	80091fe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a490:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	200008df 	.word	0x200008df
 800a4a0:	200009b8 	.word	0x200009b8

0800a4a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a4b4:	4b0d      	ldr	r3, [pc, #52]	; (800a4ec <CDC_Transmit_FS+0x48>)
 800a4b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e00b      	b.n	800a4e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a4ca:	887b      	ldrh	r3, [r7, #2]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	4806      	ldr	r0, [pc, #24]	; (800a4ec <CDC_Transmit_FS+0x48>)
 800a4d2:	f7fe fe39 	bl	8009148 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a4d6:	4805      	ldr	r0, [pc, #20]	; (800a4ec <CDC_Transmit_FS+0x48>)
 800a4d8:	f7fe fe62 	bl	80091a0 <USBD_CDC_TransmitPacket>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	200009b8 	.word	0x200009b8

0800a4f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	6039      	str	r1, [r7, #0]
 800a4fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2212      	movs	r2, #18
 800a500:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a502:	4b03      	ldr	r3, [pc, #12]	; (800a510 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a504:	4618      	mov	r0, r3
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc80      	pop	{r7}
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	20000410 	.word	0x20000410

0800a514 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	6039      	str	r1, [r7, #0]
 800a51e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	2204      	movs	r2, #4
 800a524:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a526:	4b03      	ldr	r3, [pc, #12]	; (800a534 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bc80      	pop	{r7}
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	20000424 	.word	0x20000424

0800a538 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4603      	mov	r3, r0
 800a540:	6039      	str	r1, [r7, #0]
 800a542:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d105      	bne.n	800a556 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	4907      	ldr	r1, [pc, #28]	; (800a56c <USBD_FS_ProductStrDescriptor+0x34>)
 800a54e:	4808      	ldr	r0, [pc, #32]	; (800a570 <USBD_FS_ProductStrDescriptor+0x38>)
 800a550:	f7ff fdc6 	bl	800a0e0 <USBD_GetString>
 800a554:	e004      	b.n	800a560 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	4904      	ldr	r1, [pc, #16]	; (800a56c <USBD_FS_ProductStrDescriptor+0x34>)
 800a55a:	4805      	ldr	r0, [pc, #20]	; (800a570 <USBD_FS_ProductStrDescriptor+0x38>)
 800a55c:	f7ff fdc0 	bl	800a0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a560:	4b02      	ldr	r3, [pc, #8]	; (800a56c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20000dd4 	.word	0x20000dd4
 800a570:	0800db3c 	.word	0x0800db3c

0800a574 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	6039      	str	r1, [r7, #0]
 800a57e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	4904      	ldr	r1, [pc, #16]	; (800a594 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a584:	4804      	ldr	r0, [pc, #16]	; (800a598 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a586:	f7ff fdab 	bl	800a0e0 <USBD_GetString>
  return USBD_StrDesc;
 800a58a:	4b02      	ldr	r3, [pc, #8]	; (800a594 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	20000dd4 	.word	0x20000dd4
 800a598:	0800db48 	.word	0x0800db48

0800a59c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	6039      	str	r1, [r7, #0]
 800a5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	221a      	movs	r2, #26
 800a5ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5ae:	f000 f843 	bl	800a638 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5b2:	4b02      	ldr	r3, [pc, #8]	; (800a5bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20000428 	.word	0x20000428

0800a5c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	6039      	str	r1, [r7, #0]
 800a5ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a5cc:	79fb      	ldrb	r3, [r7, #7]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d105      	bne.n	800a5de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	4907      	ldr	r1, [pc, #28]	; (800a5f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5d6:	4808      	ldr	r0, [pc, #32]	; (800a5f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5d8:	f7ff fd82 	bl	800a0e0 <USBD_GetString>
 800a5dc:	e004      	b.n	800a5e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	4904      	ldr	r1, [pc, #16]	; (800a5f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5e2:	4805      	ldr	r0, [pc, #20]	; (800a5f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5e4:	f7ff fd7c 	bl	800a0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5e8:	4b02      	ldr	r3, [pc, #8]	; (800a5f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	20000dd4 	.word	0x20000dd4
 800a5f8:	0800db58 	.word	0x0800db58

0800a5fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	4603      	mov	r3, r0
 800a604:	6039      	str	r1, [r7, #0]
 800a606:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a608:	79fb      	ldrb	r3, [r7, #7]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d105      	bne.n	800a61a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	4907      	ldr	r1, [pc, #28]	; (800a630 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a612:	4808      	ldr	r0, [pc, #32]	; (800a634 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a614:	f7ff fd64 	bl	800a0e0 <USBD_GetString>
 800a618:	e004      	b.n	800a624 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	4904      	ldr	r1, [pc, #16]	; (800a630 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a61e:	4805      	ldr	r0, [pc, #20]	; (800a634 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a620:	f7ff fd5e 	bl	800a0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a624:	4b02      	ldr	r3, [pc, #8]	; (800a630 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	20000dd4 	.word	0x20000dd4
 800a634:	0800db64 	.word	0x0800db64

0800a638 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a63e:	4b0f      	ldr	r3, [pc, #60]	; (800a67c <Get_SerialNum+0x44>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a644:	4b0e      	ldr	r3, [pc, #56]	; (800a680 <Get_SerialNum+0x48>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a64a:	4b0e      	ldr	r3, [pc, #56]	; (800a684 <Get_SerialNum+0x4c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4413      	add	r3, r2
 800a656:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d009      	beq.n	800a672 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a65e:	2208      	movs	r2, #8
 800a660:	4909      	ldr	r1, [pc, #36]	; (800a688 <Get_SerialNum+0x50>)
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 f814 	bl	800a690 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a668:	2204      	movs	r2, #4
 800a66a:	4908      	ldr	r1, [pc, #32]	; (800a68c <Get_SerialNum+0x54>)
 800a66c:	68b8      	ldr	r0, [r7, #8]
 800a66e:	f000 f80f 	bl	800a690 <IntToUnicode>
  }
}
 800a672:	bf00      	nop
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	1ff80050 	.word	0x1ff80050
 800a680:	1ff80054 	.word	0x1ff80054
 800a684:	1ff80058 	.word	0x1ff80058
 800a688:	2000042a 	.word	0x2000042a
 800a68c:	2000043a 	.word	0x2000043a

0800a690 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a690:	b480      	push	{r7}
 800a692:	b087      	sub	sp, #28
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	4613      	mov	r3, r2
 800a69c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	75fb      	strb	r3, [r7, #23]
 800a6a6:	e027      	b.n	800a6f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	0f1b      	lsrs	r3, r3, #28
 800a6ac:	2b09      	cmp	r3, #9
 800a6ae:	d80b      	bhi.n	800a6c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	0f1b      	lsrs	r3, r3, #28
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	7dfb      	ldrb	r3, [r7, #23]
 800a6b8:	005b      	lsls	r3, r3, #1
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	440b      	add	r3, r1
 800a6c0:	3230      	adds	r2, #48	; 0x30
 800a6c2:	b2d2      	uxtb	r2, r2
 800a6c4:	701a      	strb	r2, [r3, #0]
 800a6c6:	e00a      	b.n	800a6de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	0f1b      	lsrs	r3, r3, #28
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	005b      	lsls	r3, r3, #1
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	440b      	add	r3, r1
 800a6d8:	3237      	adds	r2, #55	; 0x37
 800a6da:	b2d2      	uxtb	r2, r2
 800a6dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	011b      	lsls	r3, r3, #4
 800a6e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a6e4:	7dfb      	ldrb	r3, [r7, #23]
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	75fb      	strb	r3, [r7, #23]
 800a6f8:	7dfa      	ldrb	r2, [r7, #23]
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d3d3      	bcc.n	800a6a8 <IntToUnicode+0x18>
  }
}
 800a700:	bf00      	nop
 800a702:	bf00      	nop
 800a704:	371c      	adds	r7, #28
 800a706:	46bd      	mov	sp, r7
 800a708:	bc80      	pop	{r7}
 800a70a:	4770      	bx	lr

0800a70c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	460b      	mov	r3, r1
 800a716:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800a718:	78fb      	ldrb	r3, [r7, #3]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d106      	bne.n	800a72c <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800a71e:	4b09      	ldr	r3, [pc, #36]	; (800a744 <HAL_PCDEx_SetConnectionState+0x38>)
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	4a08      	ldr	r2, [pc, #32]	; (800a744 <HAL_PCDEx_SetConnectionState+0x38>)
 800a724:	f043 0301 	orr.w	r3, r3, #1
 800a728:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800a72a:	e005      	b.n	800a738 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800a72c:	4b05      	ldr	r3, [pc, #20]	; (800a744 <HAL_PCDEx_SetConnectionState+0x38>)
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	4a04      	ldr	r2, [pc, #16]	; (800a744 <HAL_PCDEx_SetConnectionState+0x38>)
 800a732:	f023 0301 	bic.w	r3, r3, #1
 800a736:	6053      	str	r3, [r2, #4]
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bc80      	pop	{r7}
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	40010000 	.word	0x40010000

0800a748 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a0d      	ldr	r2, [pc, #52]	; (800a78c <HAL_PCD_MspInit+0x44>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d113      	bne.n	800a782 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a75a:	4b0d      	ldr	r3, [pc, #52]	; (800a790 <HAL_PCD_MspInit+0x48>)
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	4a0c      	ldr	r2, [pc, #48]	; (800a790 <HAL_PCD_MspInit+0x48>)
 800a760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a764:	6253      	str	r3, [r2, #36]	; 0x24
 800a766:	4b0a      	ldr	r3, [pc, #40]	; (800a790 <HAL_PCD_MspInit+0x48>)
 800a768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800a772:	2200      	movs	r2, #0
 800a774:	2101      	movs	r1, #1
 800a776:	2014      	movs	r0, #20
 800a778:	f7f8 fa41 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a77c:	2014      	movs	r0, #20
 800a77e:	f7f8 fa5a 	bl	8002c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a782:	bf00      	nop
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	40005c00 	.word	0x40005c00
 800a790:	40023800 	.word	0x40023800

0800a794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	f7fe fddd 	bl	800936a <USBD_LL_SetupStage>
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a7ca:	78fa      	ldrb	r2, [r7, #3]
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	440b      	add	r3, r1
 800a7d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	78fb      	ldrb	r3, [r7, #3]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	f7fe fe0f 	bl	8009404 <USBD_LL_DataOutStage>
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a800:	78fa      	ldrb	r2, [r7, #3]
 800a802:	6879      	ldr	r1, [r7, #4]
 800a804:	4613      	mov	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	440b      	add	r3, r1
 800a80e:	333c      	adds	r3, #60	; 0x3c
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	78fb      	ldrb	r3, [r7, #3]
 800a814:	4619      	mov	r1, r3
 800a816:	f7fe fe66 	bl	80094e6 <USBD_LL_DataInStage>
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a830:	4618      	mov	r0, r3
 800a832:	f7fe ff71 	bl	8009718 <USBD_LL_SOF>
}
 800a836:	bf00      	nop
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b084      	sub	sp, #16
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a846:	2301      	movs	r3, #1
 800a848:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d001      	beq.n	800a856 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a852:	f7f7 fdf9 	bl	8002448 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a85c:	7bfa      	ldrb	r2, [r7, #15]
 800a85e:	4611      	mov	r1, r2
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe ff26 	bl	80096b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fe fedf 	bl	8009630 <USBD_LL_Reset>
}
 800a872:	bf00      	nop
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fe ff20 	bl	80096d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d005      	beq.n	800a8a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a898:	4b04      	ldr	r3, [pc, #16]	; (800a8ac <HAL_PCD_SuspendCallback+0x30>)
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	4a03      	ldr	r2, [pc, #12]	; (800a8ac <HAL_PCD_SuspendCallback+0x30>)
 800a89e:	f043 0306 	orr.w	r3, r3, #6
 800a8a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a8a4:	bf00      	nop
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	e000ed00 	.word	0xe000ed00

0800a8b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fe ff1a 	bl	80096f8 <USBD_LL_Resume>
}
 800a8c4:	bf00      	nop
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a8d4:	4a28      	ldr	r2, [pc, #160]	; (800a978 <USBD_LL_Init+0xac>)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a26      	ldr	r2, [pc, #152]	; (800a978 <USBD_LL_Init+0xac>)
 800a8e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800a8e4:	4b24      	ldr	r3, [pc, #144]	; (800a978 <USBD_LL_Init+0xac>)
 800a8e6:	4a25      	ldr	r2, [pc, #148]	; (800a97c <USBD_LL_Init+0xb0>)
 800a8e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a8ea:	4b23      	ldr	r3, [pc, #140]	; (800a978 <USBD_LL_Init+0xac>)
 800a8ec:	2208      	movs	r2, #8
 800a8ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a8f0:	4b21      	ldr	r3, [pc, #132]	; (800a978 <USBD_LL_Init+0xac>)
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8f6:	4b20      	ldr	r3, [pc, #128]	; (800a978 <USBD_LL_Init+0xac>)
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a8fc:	4b1e      	ldr	r3, [pc, #120]	; (800a978 <USBD_LL_Init+0xac>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a902:	4b1d      	ldr	r3, [pc, #116]	; (800a978 <USBD_LL_Init+0xac>)
 800a904:	2200      	movs	r2, #0
 800a906:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a908:	481b      	ldr	r0, [pc, #108]	; (800a978 <USBD_LL_Init+0xac>)
 800a90a:	f7f8 ff15 	bl	8003738 <HAL_PCD_Init>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a914:	f7f7 fd98 	bl	8002448 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a91e:	2318      	movs	r3, #24
 800a920:	2200      	movs	r2, #0
 800a922:	2100      	movs	r1, #0
 800a924:	f7fa faf2 	bl	8004f0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a92e:	2358      	movs	r3, #88	; 0x58
 800a930:	2200      	movs	r2, #0
 800a932:	2180      	movs	r1, #128	; 0x80
 800a934:	f7fa faea 	bl	8004f0c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a93e:	23c0      	movs	r3, #192	; 0xc0
 800a940:	2200      	movs	r2, #0
 800a942:	2181      	movs	r1, #129	; 0x81
 800a944:	f7fa fae2 	bl	8004f0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a94e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a952:	2200      	movs	r2, #0
 800a954:	2101      	movs	r1, #1
 800a956:	f7fa fad9 	bl	8004f0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a960:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a964:	2200      	movs	r2, #0
 800a966:	2182      	movs	r1, #130	; 0x82
 800a968:	f7fa fad0 	bl	8004f0c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20000fd4 	.word	0x20000fd4
 800a97c:	40005c00 	.word	0x40005c00

0800a980 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a996:	4618      	mov	r0, r3
 800a998:	f7f8 ffac 	bl	80038f4 <HAL_PCD_Start>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 f944 	bl	800ac30 <USBD_Get_USB_Status>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b084      	sub	sp, #16
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	4608      	mov	r0, r1
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	70fb      	strb	r3, [r7, #3]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	70bb      	strb	r3, [r7, #2]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a9de:	78bb      	ldrb	r3, [r7, #2]
 800a9e0:	883a      	ldrh	r2, [r7, #0]
 800a9e2:	78f9      	ldrb	r1, [r7, #3]
 800a9e4:	f7f9 f8c8 	bl	8003b78 <HAL_PCD_EP_Open>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 f91e 	bl	800ac30 <USBD_Get_USB_Status>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800aa1c:	78fa      	ldrb	r2, [r7, #3]
 800aa1e:	4611      	mov	r1, r2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7f9 f90f 	bl	8003c44 <HAL_PCD_EP_Close>
 800aa26:	4603      	mov	r3, r0
 800aa28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 f8ff 	bl	800ac30 <USBD_Get_USB_Status>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800aa5a:	78fa      	ldrb	r2, [r7, #3]
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7f9 f9cf 	bl	8003e02 <HAL_PCD_EP_SetStall>
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f000 f8e0 	bl	800ac30 <USBD_Get_USB_Status>
 800aa70:	4603      	mov	r3, r0
 800aa72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	460b      	mov	r3, r1
 800aa88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7f9 fa02 	bl	8003ea6 <HAL_PCD_EP_ClrStall>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f8c1 	bl	800ac30 <USBD_Get_USB_Status>
 800aaae:	4603      	mov	r3, r0
 800aab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800aace:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	da0c      	bge.n	800aaf2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aad8:	78fb      	ldrb	r3, [r7, #3]
 800aada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aade:	68f9      	ldr	r1, [r7, #12]
 800aae0:	1c5a      	adds	r2, r3, #1
 800aae2:	4613      	mov	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	00db      	lsls	r3, r3, #3
 800aaea:	440b      	add	r3, r1
 800aaec:	3302      	adds	r3, #2
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	e00b      	b.n	800ab0a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aaf2:	78fb      	ldrb	r3, [r7, #3]
 800aaf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaf8:	68f9      	ldr	r1, [r7, #12]
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	440b      	add	r3, r1
 800ab04:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ab08:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bc80      	pop	{r7}
 800ab12:	4770      	bx	lr

0800ab14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ab2e:	78fa      	ldrb	r2, [r7, #3]
 800ab30:	4611      	mov	r1, r2
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7f8 fffb 	bl	8003b2e <HAL_PCD_SetAddress>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 f876 	bl	800ac30 <USBD_Get_USB_Status>
 800ab44:	4603      	mov	r3, r0
 800ab46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b086      	sub	sp, #24
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	460b      	mov	r3, r1
 800ab60:	72fb      	strb	r3, [r7, #11]
 800ab62:	4613      	mov	r3, r2
 800ab64:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ab74:	893b      	ldrh	r3, [r7, #8]
 800ab76:	7af9      	ldrb	r1, [r7, #11]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	f7f9 f8ff 	bl	8003d7c <HAL_PCD_EP_Transmit>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 f853 	bl	800ac30 <USBD_Get_USB_Status>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab8e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	607a      	str	r2, [r7, #4]
 800aba2:	461a      	mov	r2, r3
 800aba4:	460b      	mov	r3, r1
 800aba6:	72fb      	strb	r3, [r7, #11]
 800aba8:	4613      	mov	r3, r2
 800abaa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800abba:	893b      	ldrh	r3, [r7, #8]
 800abbc:	7af9      	ldrb	r1, [r7, #11]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	f7f9 f888 	bl	8003cd4 <HAL_PCD_EP_Receive>
 800abc4:	4603      	mov	r3, r0
 800abc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 f830 	bl	800ac30 <USBD_Get_USB_Status>
 800abd0:	4603      	mov	r3, r0
 800abd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abd4:	7dbb      	ldrb	r3, [r7, #22]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	460b      	mov	r3, r1
 800abe8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800abf0:	78fa      	ldrb	r2, [r7, #3]
 800abf2:	4611      	mov	r1, r2
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7f9 f8aa 	bl	8003d4e <HAL_PCD_EP_GetRxCount>
 800abfa:	4603      	mov	r3, r0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac0c:	4b02      	ldr	r3, [pc, #8]	; (800ac18 <USBD_static_malloc+0x14>)
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bc80      	pop	{r7}
 800ac16:	4770      	bx	lr
 800ac18:	20000640 	.word	0x20000640

0800ac1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]

}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bc80      	pop	{r7}
 800ac2c:	4770      	bx	lr
	...

0800ac30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac3e:	79fb      	ldrb	r3, [r7, #7]
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d817      	bhi.n	800ac74 <USBD_Get_USB_Status+0x44>
 800ac44:	a201      	add	r2, pc, #4	; (adr r2, 800ac4c <USBD_Get_USB_Status+0x1c>)
 800ac46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4a:	bf00      	nop
 800ac4c:	0800ac5d 	.word	0x0800ac5d
 800ac50:	0800ac63 	.word	0x0800ac63
 800ac54:	0800ac69 	.word	0x0800ac69
 800ac58:	0800ac6f 	.word	0x0800ac6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac60:	e00b      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac62:	2302      	movs	r3, #2
 800ac64:	73fb      	strb	r3, [r7, #15]
    break;
 800ac66:	e008      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac6c:	e005      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac6e:	2302      	movs	r3, #2
 800ac70:	73fb      	strb	r3, [r7, #15]
    break;
 800ac72:	e002      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac74:	2302      	movs	r3, #2
 800ac76:	73fb      	strb	r3, [r7, #15]
    break;
 800ac78:	bf00      	nop
  }
  return usb_status;
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bc80      	pop	{r7}
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop

0800ac88 <atof>:
 800ac88:	2100      	movs	r1, #0
 800ac8a:	f000 be61 	b.w	800b950 <strtod>
	...

0800ac90 <__errno>:
 800ac90:	4b01      	ldr	r3, [pc, #4]	; (800ac98 <__errno+0x8>)
 800ac92:	6818      	ldr	r0, [r3, #0]
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	20000444 	.word	0x20000444

0800ac9c <__libc_init_array>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	2600      	movs	r6, #0
 800aca0:	4d0c      	ldr	r5, [pc, #48]	; (800acd4 <__libc_init_array+0x38>)
 800aca2:	4c0d      	ldr	r4, [pc, #52]	; (800acd8 <__libc_init_array+0x3c>)
 800aca4:	1b64      	subs	r4, r4, r5
 800aca6:	10a4      	asrs	r4, r4, #2
 800aca8:	42a6      	cmp	r6, r4
 800acaa:	d109      	bne.n	800acc0 <__libc_init_array+0x24>
 800acac:	f002 fee8 	bl	800da80 <_init>
 800acb0:	2600      	movs	r6, #0
 800acb2:	4d0a      	ldr	r5, [pc, #40]	; (800acdc <__libc_init_array+0x40>)
 800acb4:	4c0a      	ldr	r4, [pc, #40]	; (800ace0 <__libc_init_array+0x44>)
 800acb6:	1b64      	subs	r4, r4, r5
 800acb8:	10a4      	asrs	r4, r4, #2
 800acba:	42a6      	cmp	r6, r4
 800acbc:	d105      	bne.n	800acca <__libc_init_array+0x2e>
 800acbe:	bd70      	pop	{r4, r5, r6, pc}
 800acc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc4:	4798      	blx	r3
 800acc6:	3601      	adds	r6, #1
 800acc8:	e7ee      	b.n	800aca8 <__libc_init_array+0xc>
 800acca:	f855 3b04 	ldr.w	r3, [r5], #4
 800acce:	4798      	blx	r3
 800acd0:	3601      	adds	r6, #1
 800acd2:	e7f2      	b.n	800acba <__libc_init_array+0x1e>
 800acd4:	0800e030 	.word	0x0800e030
 800acd8:	0800e030 	.word	0x0800e030
 800acdc:	0800e030 	.word	0x0800e030
 800ace0:	0800e034 	.word	0x0800e034

0800ace4 <memcpy>:
 800ace4:	440a      	add	r2, r1
 800ace6:	4291      	cmp	r1, r2
 800ace8:	f100 33ff 	add.w	r3, r0, #4294967295
 800acec:	d100      	bne.n	800acf0 <memcpy+0xc>
 800acee:	4770      	bx	lr
 800acf0:	b510      	push	{r4, lr}
 800acf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acf6:	4291      	cmp	r1, r2
 800acf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acfc:	d1f9      	bne.n	800acf2 <memcpy+0xe>
 800acfe:	bd10      	pop	{r4, pc}

0800ad00 <memset>:
 800ad00:	4603      	mov	r3, r0
 800ad02:	4402      	add	r2, r0
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d100      	bne.n	800ad0a <memset+0xa>
 800ad08:	4770      	bx	lr
 800ad0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad0e:	e7f9      	b.n	800ad04 <memset+0x4>

0800ad10 <strcpy>:
 800ad10:	4603      	mov	r3, r0
 800ad12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad16:	f803 2b01 	strb.w	r2, [r3], #1
 800ad1a:	2a00      	cmp	r2, #0
 800ad1c:	d1f9      	bne.n	800ad12 <strcpy+0x2>
 800ad1e:	4770      	bx	lr

0800ad20 <sulp>:
 800ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad24:	460f      	mov	r7, r1
 800ad26:	4690      	mov	r8, r2
 800ad28:	f001 fd9a 	bl	800c860 <__ulp>
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	460d      	mov	r5, r1
 800ad30:	f1b8 0f00 	cmp.w	r8, #0
 800ad34:	d011      	beq.n	800ad5a <sulp+0x3a>
 800ad36:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ad3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	dd0b      	ble.n	800ad5a <sulp+0x3a>
 800ad42:	2400      	movs	r4, #0
 800ad44:	051b      	lsls	r3, r3, #20
 800ad46:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ad4a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ad4e:	4622      	mov	r2, r4
 800ad50:	462b      	mov	r3, r5
 800ad52:	f7f5 fbe3 	bl	800051c <__aeabi_dmul>
 800ad56:	4604      	mov	r4, r0
 800ad58:	460d      	mov	r5, r1
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad62:	0000      	movs	r0, r0
 800ad64:	0000      	movs	r0, r0
	...

0800ad68 <_strtod_l>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	469b      	mov	fp, r3
 800ad6e:	2300      	movs	r3, #0
 800ad70:	b0a1      	sub	sp, #132	; 0x84
 800ad72:	931c      	str	r3, [sp, #112]	; 0x70
 800ad74:	4ba1      	ldr	r3, [pc, #644]	; (800affc <_strtod_l+0x294>)
 800ad76:	4682      	mov	sl, r0
 800ad78:	681f      	ldr	r7, [r3, #0]
 800ad7a:	460e      	mov	r6, r1
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad80:	f7f5 fa08 	bl	8000194 <strlen>
 800ad84:	f04f 0800 	mov.w	r8, #0
 800ad88:	4604      	mov	r4, r0
 800ad8a:	f04f 0900 	mov.w	r9, #0
 800ad8e:	961b      	str	r6, [sp, #108]	; 0x6c
 800ad90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	2a2b      	cmp	r2, #43	; 0x2b
 800ad96:	d04c      	beq.n	800ae32 <_strtod_l+0xca>
 800ad98:	d83a      	bhi.n	800ae10 <_strtod_l+0xa8>
 800ad9a:	2a0d      	cmp	r2, #13
 800ad9c:	d833      	bhi.n	800ae06 <_strtod_l+0x9e>
 800ad9e:	2a08      	cmp	r2, #8
 800ada0:	d833      	bhi.n	800ae0a <_strtod_l+0xa2>
 800ada2:	2a00      	cmp	r2, #0
 800ada4:	d03d      	beq.n	800ae22 <_strtod_l+0xba>
 800ada6:	2300      	movs	r3, #0
 800ada8:	930c      	str	r3, [sp, #48]	; 0x30
 800adaa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800adac:	782b      	ldrb	r3, [r5, #0]
 800adae:	2b30      	cmp	r3, #48	; 0x30
 800adb0:	f040 80af 	bne.w	800af12 <_strtod_l+0x1aa>
 800adb4:	786b      	ldrb	r3, [r5, #1]
 800adb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800adba:	2b58      	cmp	r3, #88	; 0x58
 800adbc:	d16c      	bne.n	800ae98 <_strtod_l+0x130>
 800adbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adc0:	4650      	mov	r0, sl
 800adc2:	9301      	str	r3, [sp, #4]
 800adc4:	ab1c      	add	r3, sp, #112	; 0x70
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	4a8d      	ldr	r2, [pc, #564]	; (800b000 <_strtod_l+0x298>)
 800adca:	f8cd b008 	str.w	fp, [sp, #8]
 800adce:	ab1d      	add	r3, sp, #116	; 0x74
 800add0:	a91b      	add	r1, sp, #108	; 0x6c
 800add2:	f000 febd 	bl	800bb50 <__gethex>
 800add6:	f010 0607 	ands.w	r6, r0, #7
 800adda:	4604      	mov	r4, r0
 800addc:	d005      	beq.n	800adea <_strtod_l+0x82>
 800adde:	2e06      	cmp	r6, #6
 800ade0:	d129      	bne.n	800ae36 <_strtod_l+0xce>
 800ade2:	2300      	movs	r3, #0
 800ade4:	3501      	adds	r5, #1
 800ade6:	951b      	str	r5, [sp, #108]	; 0x6c
 800ade8:	930c      	str	r3, [sp, #48]	; 0x30
 800adea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adec:	2b00      	cmp	r3, #0
 800adee:	f040 8596 	bne.w	800b91e <_strtod_l+0xbb6>
 800adf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adf4:	b1d3      	cbz	r3, 800ae2c <_strtod_l+0xc4>
 800adf6:	4642      	mov	r2, r8
 800adf8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800adfc:	4610      	mov	r0, r2
 800adfe:	4619      	mov	r1, r3
 800ae00:	b021      	add	sp, #132	; 0x84
 800ae02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae06:	2a20      	cmp	r2, #32
 800ae08:	d1cd      	bne.n	800ada6 <_strtod_l+0x3e>
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae0e:	e7bf      	b.n	800ad90 <_strtod_l+0x28>
 800ae10:	2a2d      	cmp	r2, #45	; 0x2d
 800ae12:	d1c8      	bne.n	800ada6 <_strtod_l+0x3e>
 800ae14:	2201      	movs	r2, #1
 800ae16:	920c      	str	r2, [sp, #48]	; 0x30
 800ae18:	1c5a      	adds	r2, r3, #1
 800ae1a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae1c:	785b      	ldrb	r3, [r3, #1]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1c3      	bne.n	800adaa <_strtod_l+0x42>
 800ae22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae24:	961b      	str	r6, [sp, #108]	; 0x6c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f040 8577 	bne.w	800b91a <_strtod_l+0xbb2>
 800ae2c:	4642      	mov	r2, r8
 800ae2e:	464b      	mov	r3, r9
 800ae30:	e7e4      	b.n	800adfc <_strtod_l+0x94>
 800ae32:	2200      	movs	r2, #0
 800ae34:	e7ef      	b.n	800ae16 <_strtod_l+0xae>
 800ae36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ae38:	b13a      	cbz	r2, 800ae4a <_strtod_l+0xe2>
 800ae3a:	2135      	movs	r1, #53	; 0x35
 800ae3c:	a81e      	add	r0, sp, #120	; 0x78
 800ae3e:	f001 fe13 	bl	800ca68 <__copybits>
 800ae42:	4650      	mov	r0, sl
 800ae44:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae46:	f001 f9db 	bl	800c200 <_Bfree>
 800ae4a:	3e01      	subs	r6, #1
 800ae4c:	2e05      	cmp	r6, #5
 800ae4e:	d807      	bhi.n	800ae60 <_strtod_l+0xf8>
 800ae50:	e8df f006 	tbb	[pc, r6]
 800ae54:	1d180b0e 	.word	0x1d180b0e
 800ae58:	030e      	.short	0x030e
 800ae5a:	f04f 0900 	mov.w	r9, #0
 800ae5e:	46c8      	mov	r8, r9
 800ae60:	0721      	lsls	r1, r4, #28
 800ae62:	d5c2      	bpl.n	800adea <_strtod_l+0x82>
 800ae64:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ae68:	e7bf      	b.n	800adea <_strtod_l+0x82>
 800ae6a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800ae6e:	e7f7      	b.n	800ae60 <_strtod_l+0xf8>
 800ae70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ae72:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800ae76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae7e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ae82:	e7ed      	b.n	800ae60 <_strtod_l+0xf8>
 800ae84:	f04f 0800 	mov.w	r8, #0
 800ae88:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b004 <_strtod_l+0x29c>
 800ae8c:	e7e8      	b.n	800ae60 <_strtod_l+0xf8>
 800ae8e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ae92:	f04f 38ff 	mov.w	r8, #4294967295
 800ae96:	e7e3      	b.n	800ae60 <_strtod_l+0xf8>
 800ae98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae9e:	785b      	ldrb	r3, [r3, #1]
 800aea0:	2b30      	cmp	r3, #48	; 0x30
 800aea2:	d0f9      	beq.n	800ae98 <_strtod_l+0x130>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d0a0      	beq.n	800adea <_strtod_l+0x82>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	9307      	str	r3, [sp, #28]
 800aeac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aeae:	220a      	movs	r2, #10
 800aeb0:	9308      	str	r3, [sp, #32]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	469b      	mov	fp, r3
 800aeb6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800aeba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800aebc:	7805      	ldrb	r5, [r0, #0]
 800aebe:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800aec2:	b2d9      	uxtb	r1, r3
 800aec4:	2909      	cmp	r1, #9
 800aec6:	d926      	bls.n	800af16 <_strtod_l+0x1ae>
 800aec8:	4622      	mov	r2, r4
 800aeca:	4639      	mov	r1, r7
 800aecc:	f002 f9c8 	bl	800d260 <strncmp>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d032      	beq.n	800af3a <_strtod_l+0x1d2>
 800aed4:	2000      	movs	r0, #0
 800aed6:	462b      	mov	r3, r5
 800aed8:	465c      	mov	r4, fp
 800aeda:	4602      	mov	r2, r0
 800aedc:	9004      	str	r0, [sp, #16]
 800aede:	2b65      	cmp	r3, #101	; 0x65
 800aee0:	d001      	beq.n	800aee6 <_strtod_l+0x17e>
 800aee2:	2b45      	cmp	r3, #69	; 0x45
 800aee4:	d113      	bne.n	800af0e <_strtod_l+0x1a6>
 800aee6:	b91c      	cbnz	r4, 800aef0 <_strtod_l+0x188>
 800aee8:	9b07      	ldr	r3, [sp, #28]
 800aeea:	4303      	orrs	r3, r0
 800aeec:	d099      	beq.n	800ae22 <_strtod_l+0xba>
 800aeee:	2400      	movs	r4, #0
 800aef0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800aef2:	1c73      	adds	r3, r6, #1
 800aef4:	931b      	str	r3, [sp, #108]	; 0x6c
 800aef6:	7873      	ldrb	r3, [r6, #1]
 800aef8:	2b2b      	cmp	r3, #43	; 0x2b
 800aefa:	d078      	beq.n	800afee <_strtod_l+0x286>
 800aefc:	2b2d      	cmp	r3, #45	; 0x2d
 800aefe:	d07b      	beq.n	800aff8 <_strtod_l+0x290>
 800af00:	2700      	movs	r7, #0
 800af02:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800af06:	2909      	cmp	r1, #9
 800af08:	f240 8082 	bls.w	800b010 <_strtod_l+0x2a8>
 800af0c:	961b      	str	r6, [sp, #108]	; 0x6c
 800af0e:	2500      	movs	r5, #0
 800af10:	e09e      	b.n	800b050 <_strtod_l+0x2e8>
 800af12:	2300      	movs	r3, #0
 800af14:	e7c9      	b.n	800aeaa <_strtod_l+0x142>
 800af16:	f1bb 0f08 	cmp.w	fp, #8
 800af1a:	bfd5      	itete	le
 800af1c:	9906      	ldrle	r1, [sp, #24]
 800af1e:	9905      	ldrgt	r1, [sp, #20]
 800af20:	fb02 3301 	mlale	r3, r2, r1, r3
 800af24:	fb02 3301 	mlagt	r3, r2, r1, r3
 800af28:	f100 0001 	add.w	r0, r0, #1
 800af2c:	bfd4      	ite	le
 800af2e:	9306      	strle	r3, [sp, #24]
 800af30:	9305      	strgt	r3, [sp, #20]
 800af32:	f10b 0b01 	add.w	fp, fp, #1
 800af36:	901b      	str	r0, [sp, #108]	; 0x6c
 800af38:	e7bf      	b.n	800aeba <_strtod_l+0x152>
 800af3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af3c:	191a      	adds	r2, r3, r4
 800af3e:	921b      	str	r2, [sp, #108]	; 0x6c
 800af40:	5d1b      	ldrb	r3, [r3, r4]
 800af42:	f1bb 0f00 	cmp.w	fp, #0
 800af46:	d036      	beq.n	800afb6 <_strtod_l+0x24e>
 800af48:	465c      	mov	r4, fp
 800af4a:	9004      	str	r0, [sp, #16]
 800af4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800af50:	2a09      	cmp	r2, #9
 800af52:	d912      	bls.n	800af7a <_strtod_l+0x212>
 800af54:	2201      	movs	r2, #1
 800af56:	e7c2      	b.n	800aede <_strtod_l+0x176>
 800af58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af5a:	3001      	adds	r0, #1
 800af5c:	1c5a      	adds	r2, r3, #1
 800af5e:	921b      	str	r2, [sp, #108]	; 0x6c
 800af60:	785b      	ldrb	r3, [r3, #1]
 800af62:	2b30      	cmp	r3, #48	; 0x30
 800af64:	d0f8      	beq.n	800af58 <_strtod_l+0x1f0>
 800af66:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800af6a:	2a08      	cmp	r2, #8
 800af6c:	f200 84dc 	bhi.w	800b928 <_strtod_l+0xbc0>
 800af70:	9004      	str	r0, [sp, #16]
 800af72:	2000      	movs	r0, #0
 800af74:	4604      	mov	r4, r0
 800af76:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800af78:	9208      	str	r2, [sp, #32]
 800af7a:	3b30      	subs	r3, #48	; 0x30
 800af7c:	f100 0201 	add.w	r2, r0, #1
 800af80:	d013      	beq.n	800afaa <_strtod_l+0x242>
 800af82:	9904      	ldr	r1, [sp, #16]
 800af84:	1905      	adds	r5, r0, r4
 800af86:	4411      	add	r1, r2
 800af88:	9104      	str	r1, [sp, #16]
 800af8a:	4622      	mov	r2, r4
 800af8c:	210a      	movs	r1, #10
 800af8e:	42aa      	cmp	r2, r5
 800af90:	d113      	bne.n	800afba <_strtod_l+0x252>
 800af92:	1822      	adds	r2, r4, r0
 800af94:	2a08      	cmp	r2, #8
 800af96:	f104 0401 	add.w	r4, r4, #1
 800af9a:	4404      	add	r4, r0
 800af9c:	dc1b      	bgt.n	800afd6 <_strtod_l+0x26e>
 800af9e:	220a      	movs	r2, #10
 800afa0:	9906      	ldr	r1, [sp, #24]
 800afa2:	fb02 3301 	mla	r3, r2, r1, r3
 800afa6:	9306      	str	r3, [sp, #24]
 800afa8:	2200      	movs	r2, #0
 800afaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afac:	4610      	mov	r0, r2
 800afae:	1c59      	adds	r1, r3, #1
 800afb0:	911b      	str	r1, [sp, #108]	; 0x6c
 800afb2:	785b      	ldrb	r3, [r3, #1]
 800afb4:	e7ca      	b.n	800af4c <_strtod_l+0x1e4>
 800afb6:	4658      	mov	r0, fp
 800afb8:	e7d3      	b.n	800af62 <_strtod_l+0x1fa>
 800afba:	2a08      	cmp	r2, #8
 800afbc:	dc04      	bgt.n	800afc8 <_strtod_l+0x260>
 800afbe:	9f06      	ldr	r7, [sp, #24]
 800afc0:	434f      	muls	r7, r1
 800afc2:	9706      	str	r7, [sp, #24]
 800afc4:	3201      	adds	r2, #1
 800afc6:	e7e2      	b.n	800af8e <_strtod_l+0x226>
 800afc8:	1c57      	adds	r7, r2, #1
 800afca:	2f10      	cmp	r7, #16
 800afcc:	bfde      	ittt	le
 800afce:	9f05      	ldrle	r7, [sp, #20]
 800afd0:	434f      	mulle	r7, r1
 800afd2:	9705      	strle	r7, [sp, #20]
 800afd4:	e7f6      	b.n	800afc4 <_strtod_l+0x25c>
 800afd6:	2c10      	cmp	r4, #16
 800afd8:	bfdf      	itttt	le
 800afda:	220a      	movle	r2, #10
 800afdc:	9905      	ldrle	r1, [sp, #20]
 800afde:	fb02 3301 	mlale	r3, r2, r1, r3
 800afe2:	9305      	strle	r3, [sp, #20]
 800afe4:	e7e0      	b.n	800afa8 <_strtod_l+0x240>
 800afe6:	2300      	movs	r3, #0
 800afe8:	2201      	movs	r2, #1
 800afea:	9304      	str	r3, [sp, #16]
 800afec:	e77c      	b.n	800aee8 <_strtod_l+0x180>
 800afee:	2700      	movs	r7, #0
 800aff0:	1cb3      	adds	r3, r6, #2
 800aff2:	931b      	str	r3, [sp, #108]	; 0x6c
 800aff4:	78b3      	ldrb	r3, [r6, #2]
 800aff6:	e784      	b.n	800af02 <_strtod_l+0x19a>
 800aff8:	2701      	movs	r7, #1
 800affa:	e7f9      	b.n	800aff0 <_strtod_l+0x288>
 800affc:	0800dd20 	.word	0x0800dd20
 800b000:	0800dba0 	.word	0x0800dba0
 800b004:	7ff00000 	.word	0x7ff00000
 800b008:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b00a:	1c59      	adds	r1, r3, #1
 800b00c:	911b      	str	r1, [sp, #108]	; 0x6c
 800b00e:	785b      	ldrb	r3, [r3, #1]
 800b010:	2b30      	cmp	r3, #48	; 0x30
 800b012:	d0f9      	beq.n	800b008 <_strtod_l+0x2a0>
 800b014:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b018:	2908      	cmp	r1, #8
 800b01a:	f63f af78 	bhi.w	800af0e <_strtod_l+0x1a6>
 800b01e:	f04f 0e0a 	mov.w	lr, #10
 800b022:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800b026:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b028:	9309      	str	r3, [sp, #36]	; 0x24
 800b02a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b02c:	1c59      	adds	r1, r3, #1
 800b02e:	911b      	str	r1, [sp, #108]	; 0x6c
 800b030:	785b      	ldrb	r3, [r3, #1]
 800b032:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800b036:	2d09      	cmp	r5, #9
 800b038:	d935      	bls.n	800b0a6 <_strtod_l+0x33e>
 800b03a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b03c:	1b49      	subs	r1, r1, r5
 800b03e:	2908      	cmp	r1, #8
 800b040:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800b044:	dc02      	bgt.n	800b04c <_strtod_l+0x2e4>
 800b046:	4565      	cmp	r5, ip
 800b048:	bfa8      	it	ge
 800b04a:	4665      	movge	r5, ip
 800b04c:	b107      	cbz	r7, 800b050 <_strtod_l+0x2e8>
 800b04e:	426d      	negs	r5, r5
 800b050:	2c00      	cmp	r4, #0
 800b052:	d14c      	bne.n	800b0ee <_strtod_l+0x386>
 800b054:	9907      	ldr	r1, [sp, #28]
 800b056:	4301      	orrs	r1, r0
 800b058:	f47f aec7 	bne.w	800adea <_strtod_l+0x82>
 800b05c:	2a00      	cmp	r2, #0
 800b05e:	f47f aee0 	bne.w	800ae22 <_strtod_l+0xba>
 800b062:	2b69      	cmp	r3, #105	; 0x69
 800b064:	d026      	beq.n	800b0b4 <_strtod_l+0x34c>
 800b066:	dc23      	bgt.n	800b0b0 <_strtod_l+0x348>
 800b068:	2b49      	cmp	r3, #73	; 0x49
 800b06a:	d023      	beq.n	800b0b4 <_strtod_l+0x34c>
 800b06c:	2b4e      	cmp	r3, #78	; 0x4e
 800b06e:	f47f aed8 	bne.w	800ae22 <_strtod_l+0xba>
 800b072:	499c      	ldr	r1, [pc, #624]	; (800b2e4 <_strtod_l+0x57c>)
 800b074:	a81b      	add	r0, sp, #108	; 0x6c
 800b076:	f000 ffb9 	bl	800bfec <__match>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	f43f aed1 	beq.w	800ae22 <_strtod_l+0xba>
 800b080:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b28      	cmp	r3, #40	; 0x28
 800b086:	d12c      	bne.n	800b0e2 <_strtod_l+0x37a>
 800b088:	4997      	ldr	r1, [pc, #604]	; (800b2e8 <_strtod_l+0x580>)
 800b08a:	aa1e      	add	r2, sp, #120	; 0x78
 800b08c:	a81b      	add	r0, sp, #108	; 0x6c
 800b08e:	f000 ffc1 	bl	800c014 <__hexnan>
 800b092:	2805      	cmp	r0, #5
 800b094:	d125      	bne.n	800b0e2 <_strtod_l+0x37a>
 800b096:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b098:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800b09c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b0a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b0a4:	e6a1      	b.n	800adea <_strtod_l+0x82>
 800b0a6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800b0aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800b0ae:	e7bc      	b.n	800b02a <_strtod_l+0x2c2>
 800b0b0:	2b6e      	cmp	r3, #110	; 0x6e
 800b0b2:	e7dc      	b.n	800b06e <_strtod_l+0x306>
 800b0b4:	498d      	ldr	r1, [pc, #564]	; (800b2ec <_strtod_l+0x584>)
 800b0b6:	a81b      	add	r0, sp, #108	; 0x6c
 800b0b8:	f000 ff98 	bl	800bfec <__match>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	f43f aeb0 	beq.w	800ae22 <_strtod_l+0xba>
 800b0c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0c4:	498a      	ldr	r1, [pc, #552]	; (800b2f0 <_strtod_l+0x588>)
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	a81b      	add	r0, sp, #108	; 0x6c
 800b0ca:	931b      	str	r3, [sp, #108]	; 0x6c
 800b0cc:	f000 ff8e 	bl	800bfec <__match>
 800b0d0:	b910      	cbnz	r0, 800b0d8 <_strtod_l+0x370>
 800b0d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	931b      	str	r3, [sp, #108]	; 0x6c
 800b0d8:	f04f 0800 	mov.w	r8, #0
 800b0dc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800b300 <_strtod_l+0x598>
 800b0e0:	e683      	b.n	800adea <_strtod_l+0x82>
 800b0e2:	4884      	ldr	r0, [pc, #528]	; (800b2f4 <_strtod_l+0x58c>)
 800b0e4:	f002 f8a6 	bl	800d234 <nan>
 800b0e8:	4680      	mov	r8, r0
 800b0ea:	4689      	mov	r9, r1
 800b0ec:	e67d      	b.n	800adea <_strtod_l+0x82>
 800b0ee:	9b04      	ldr	r3, [sp, #16]
 800b0f0:	f1bb 0f00 	cmp.w	fp, #0
 800b0f4:	bf08      	it	eq
 800b0f6:	46a3      	moveq	fp, r4
 800b0f8:	1aeb      	subs	r3, r5, r3
 800b0fa:	2c10      	cmp	r4, #16
 800b0fc:	9806      	ldr	r0, [sp, #24]
 800b0fe:	4626      	mov	r6, r4
 800b100:	9307      	str	r3, [sp, #28]
 800b102:	bfa8      	it	ge
 800b104:	2610      	movge	r6, #16
 800b106:	f7f5 f98f 	bl	8000428 <__aeabi_ui2d>
 800b10a:	2c09      	cmp	r4, #9
 800b10c:	4680      	mov	r8, r0
 800b10e:	4689      	mov	r9, r1
 800b110:	dd13      	ble.n	800b13a <_strtod_l+0x3d2>
 800b112:	4b79      	ldr	r3, [pc, #484]	; (800b2f8 <_strtod_l+0x590>)
 800b114:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b118:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b11c:	f7f5 f9fe 	bl	800051c <__aeabi_dmul>
 800b120:	4680      	mov	r8, r0
 800b122:	9805      	ldr	r0, [sp, #20]
 800b124:	4689      	mov	r9, r1
 800b126:	f7f5 f97f 	bl	8000428 <__aeabi_ui2d>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4640      	mov	r0, r8
 800b130:	4649      	mov	r1, r9
 800b132:	f7f5 f83d 	bl	80001b0 <__adddf3>
 800b136:	4680      	mov	r8, r0
 800b138:	4689      	mov	r9, r1
 800b13a:	2c0f      	cmp	r4, #15
 800b13c:	dc36      	bgt.n	800b1ac <_strtod_l+0x444>
 800b13e:	9b07      	ldr	r3, [sp, #28]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f43f ae52 	beq.w	800adea <_strtod_l+0x82>
 800b146:	dd22      	ble.n	800b18e <_strtod_l+0x426>
 800b148:	2b16      	cmp	r3, #22
 800b14a:	dc09      	bgt.n	800b160 <_strtod_l+0x3f8>
 800b14c:	4c6a      	ldr	r4, [pc, #424]	; (800b2f8 <_strtod_l+0x590>)
 800b14e:	4642      	mov	r2, r8
 800b150:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800b154:	464b      	mov	r3, r9
 800b156:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b15a:	f7f5 f9df 	bl	800051c <__aeabi_dmul>
 800b15e:	e7c3      	b.n	800b0e8 <_strtod_l+0x380>
 800b160:	9a07      	ldr	r2, [sp, #28]
 800b162:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b166:	4293      	cmp	r3, r2
 800b168:	db20      	blt.n	800b1ac <_strtod_l+0x444>
 800b16a:	4d63      	ldr	r5, [pc, #396]	; (800b2f8 <_strtod_l+0x590>)
 800b16c:	f1c4 040f 	rsb	r4, r4, #15
 800b170:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b174:	4642      	mov	r2, r8
 800b176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b17a:	464b      	mov	r3, r9
 800b17c:	f7f5 f9ce 	bl	800051c <__aeabi_dmul>
 800b180:	9b07      	ldr	r3, [sp, #28]
 800b182:	1b1c      	subs	r4, r3, r4
 800b184:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b188:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b18c:	e7e5      	b.n	800b15a <_strtod_l+0x3f2>
 800b18e:	9b07      	ldr	r3, [sp, #28]
 800b190:	3316      	adds	r3, #22
 800b192:	db0b      	blt.n	800b1ac <_strtod_l+0x444>
 800b194:	9b04      	ldr	r3, [sp, #16]
 800b196:	4a58      	ldr	r2, [pc, #352]	; (800b2f8 <_strtod_l+0x590>)
 800b198:	1b5d      	subs	r5, r3, r5
 800b19a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b19e:	4640      	mov	r0, r8
 800b1a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	f7f5 fae3 	bl	8000770 <__aeabi_ddiv>
 800b1aa:	e79d      	b.n	800b0e8 <_strtod_l+0x380>
 800b1ac:	9b07      	ldr	r3, [sp, #28]
 800b1ae:	1ba6      	subs	r6, r4, r6
 800b1b0:	441e      	add	r6, r3
 800b1b2:	2e00      	cmp	r6, #0
 800b1b4:	dd71      	ble.n	800b29a <_strtod_l+0x532>
 800b1b6:	f016 030f 	ands.w	r3, r6, #15
 800b1ba:	d00a      	beq.n	800b1d2 <_strtod_l+0x46a>
 800b1bc:	494e      	ldr	r1, [pc, #312]	; (800b2f8 <_strtod_l+0x590>)
 800b1be:	4642      	mov	r2, r8
 800b1c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1c8:	464b      	mov	r3, r9
 800b1ca:	f7f5 f9a7 	bl	800051c <__aeabi_dmul>
 800b1ce:	4680      	mov	r8, r0
 800b1d0:	4689      	mov	r9, r1
 800b1d2:	f036 060f 	bics.w	r6, r6, #15
 800b1d6:	d050      	beq.n	800b27a <_strtod_l+0x512>
 800b1d8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800b1dc:	dd27      	ble.n	800b22e <_strtod_l+0x4c6>
 800b1de:	f04f 0b00 	mov.w	fp, #0
 800b1e2:	f8cd b010 	str.w	fp, [sp, #16]
 800b1e6:	f8cd b020 	str.w	fp, [sp, #32]
 800b1ea:	f8cd b018 	str.w	fp, [sp, #24]
 800b1ee:	2322      	movs	r3, #34	; 0x22
 800b1f0:	f04f 0800 	mov.w	r8, #0
 800b1f4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b300 <_strtod_l+0x598>
 800b1f8:	f8ca 3000 	str.w	r3, [sl]
 800b1fc:	9b08      	ldr	r3, [sp, #32]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f43f adf3 	beq.w	800adea <_strtod_l+0x82>
 800b204:	4650      	mov	r0, sl
 800b206:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b208:	f000 fffa 	bl	800c200 <_Bfree>
 800b20c:	4650      	mov	r0, sl
 800b20e:	9906      	ldr	r1, [sp, #24]
 800b210:	f000 fff6 	bl	800c200 <_Bfree>
 800b214:	4650      	mov	r0, sl
 800b216:	9904      	ldr	r1, [sp, #16]
 800b218:	f000 fff2 	bl	800c200 <_Bfree>
 800b21c:	4650      	mov	r0, sl
 800b21e:	9908      	ldr	r1, [sp, #32]
 800b220:	f000 ffee 	bl	800c200 <_Bfree>
 800b224:	4659      	mov	r1, fp
 800b226:	4650      	mov	r0, sl
 800b228:	f000 ffea 	bl	800c200 <_Bfree>
 800b22c:	e5dd      	b.n	800adea <_strtod_l+0x82>
 800b22e:	2300      	movs	r3, #0
 800b230:	4640      	mov	r0, r8
 800b232:	4649      	mov	r1, r9
 800b234:	461f      	mov	r7, r3
 800b236:	1136      	asrs	r6, r6, #4
 800b238:	2e01      	cmp	r6, #1
 800b23a:	dc21      	bgt.n	800b280 <_strtod_l+0x518>
 800b23c:	b10b      	cbz	r3, 800b242 <_strtod_l+0x4da>
 800b23e:	4680      	mov	r8, r0
 800b240:	4689      	mov	r9, r1
 800b242:	4b2e      	ldr	r3, [pc, #184]	; (800b2fc <_strtod_l+0x594>)
 800b244:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b248:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b24c:	4642      	mov	r2, r8
 800b24e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b252:	464b      	mov	r3, r9
 800b254:	f7f5 f962 	bl	800051c <__aeabi_dmul>
 800b258:	4b29      	ldr	r3, [pc, #164]	; (800b300 <_strtod_l+0x598>)
 800b25a:	460a      	mov	r2, r1
 800b25c:	400b      	ands	r3, r1
 800b25e:	4929      	ldr	r1, [pc, #164]	; (800b304 <_strtod_l+0x59c>)
 800b260:	4680      	mov	r8, r0
 800b262:	428b      	cmp	r3, r1
 800b264:	d8bb      	bhi.n	800b1de <_strtod_l+0x476>
 800b266:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b26a:	428b      	cmp	r3, r1
 800b26c:	bf86      	itte	hi
 800b26e:	f04f 38ff 	movhi.w	r8, #4294967295
 800b272:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800b308 <_strtod_l+0x5a0>
 800b276:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b27a:	2300      	movs	r3, #0
 800b27c:	9305      	str	r3, [sp, #20]
 800b27e:	e07e      	b.n	800b37e <_strtod_l+0x616>
 800b280:	07f2      	lsls	r2, r6, #31
 800b282:	d507      	bpl.n	800b294 <_strtod_l+0x52c>
 800b284:	4b1d      	ldr	r3, [pc, #116]	; (800b2fc <_strtod_l+0x594>)
 800b286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f5 f945 	bl	800051c <__aeabi_dmul>
 800b292:	2301      	movs	r3, #1
 800b294:	3701      	adds	r7, #1
 800b296:	1076      	asrs	r6, r6, #1
 800b298:	e7ce      	b.n	800b238 <_strtod_l+0x4d0>
 800b29a:	d0ee      	beq.n	800b27a <_strtod_l+0x512>
 800b29c:	4276      	negs	r6, r6
 800b29e:	f016 020f 	ands.w	r2, r6, #15
 800b2a2:	d00a      	beq.n	800b2ba <_strtod_l+0x552>
 800b2a4:	4b14      	ldr	r3, [pc, #80]	; (800b2f8 <_strtod_l+0x590>)
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2ac:	4649      	mov	r1, r9
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f7f5 fa5d 	bl	8000770 <__aeabi_ddiv>
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	4689      	mov	r9, r1
 800b2ba:	1136      	asrs	r6, r6, #4
 800b2bc:	d0dd      	beq.n	800b27a <_strtod_l+0x512>
 800b2be:	2e1f      	cmp	r6, #31
 800b2c0:	dd24      	ble.n	800b30c <_strtod_l+0x5a4>
 800b2c2:	f04f 0b00 	mov.w	fp, #0
 800b2c6:	f8cd b010 	str.w	fp, [sp, #16]
 800b2ca:	f8cd b020 	str.w	fp, [sp, #32]
 800b2ce:	f8cd b018 	str.w	fp, [sp, #24]
 800b2d2:	2322      	movs	r3, #34	; 0x22
 800b2d4:	f04f 0800 	mov.w	r8, #0
 800b2d8:	f04f 0900 	mov.w	r9, #0
 800b2dc:	f8ca 3000 	str.w	r3, [sl]
 800b2e0:	e78c      	b.n	800b1fc <_strtod_l+0x494>
 800b2e2:	bf00      	nop
 800b2e4:	0800db9d 	.word	0x0800db9d
 800b2e8:	0800dbb4 	.word	0x0800dbb4
 800b2ec:	0800db94 	.word	0x0800db94
 800b2f0:	0800db97 	.word	0x0800db97
 800b2f4:	0800dca3 	.word	0x0800dca3
 800b2f8:	0800ddc0 	.word	0x0800ddc0
 800b2fc:	0800dd98 	.word	0x0800dd98
 800b300:	7ff00000 	.word	0x7ff00000
 800b304:	7ca00000 	.word	0x7ca00000
 800b308:	7fefffff 	.word	0x7fefffff
 800b30c:	f016 0310 	ands.w	r3, r6, #16
 800b310:	bf18      	it	ne
 800b312:	236a      	movne	r3, #106	; 0x6a
 800b314:	4640      	mov	r0, r8
 800b316:	9305      	str	r3, [sp, #20]
 800b318:	4649      	mov	r1, r9
 800b31a:	2300      	movs	r3, #0
 800b31c:	4fb2      	ldr	r7, [pc, #712]	; (800b5e8 <_strtod_l+0x880>)
 800b31e:	07f2      	lsls	r2, r6, #31
 800b320:	d504      	bpl.n	800b32c <_strtod_l+0x5c4>
 800b322:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b326:	f7f5 f8f9 	bl	800051c <__aeabi_dmul>
 800b32a:	2301      	movs	r3, #1
 800b32c:	1076      	asrs	r6, r6, #1
 800b32e:	f107 0708 	add.w	r7, r7, #8
 800b332:	d1f4      	bne.n	800b31e <_strtod_l+0x5b6>
 800b334:	b10b      	cbz	r3, 800b33a <_strtod_l+0x5d2>
 800b336:	4680      	mov	r8, r0
 800b338:	4689      	mov	r9, r1
 800b33a:	9b05      	ldr	r3, [sp, #20]
 800b33c:	b1bb      	cbz	r3, 800b36e <_strtod_l+0x606>
 800b33e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800b342:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b346:	2b00      	cmp	r3, #0
 800b348:	4649      	mov	r1, r9
 800b34a:	dd10      	ble.n	800b36e <_strtod_l+0x606>
 800b34c:	2b1f      	cmp	r3, #31
 800b34e:	f340 812b 	ble.w	800b5a8 <_strtod_l+0x840>
 800b352:	2b34      	cmp	r3, #52	; 0x34
 800b354:	bfd8      	it	le
 800b356:	f04f 32ff 	movle.w	r2, #4294967295
 800b35a:	f04f 0800 	mov.w	r8, #0
 800b35e:	bfcf      	iteee	gt
 800b360:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b364:	3b20      	suble	r3, #32
 800b366:	fa02 f303 	lslle.w	r3, r2, r3
 800b36a:	ea03 0901 	andle.w	r9, r3, r1
 800b36e:	2200      	movs	r2, #0
 800b370:	2300      	movs	r3, #0
 800b372:	4640      	mov	r0, r8
 800b374:	4649      	mov	r1, r9
 800b376:	f7f5 fb39 	bl	80009ec <__aeabi_dcmpeq>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d1a1      	bne.n	800b2c2 <_strtod_l+0x55a>
 800b37e:	9b06      	ldr	r3, [sp, #24]
 800b380:	465a      	mov	r2, fp
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	4650      	mov	r0, sl
 800b386:	4623      	mov	r3, r4
 800b388:	9908      	ldr	r1, [sp, #32]
 800b38a:	f000 ffa5 	bl	800c2d8 <__s2b>
 800b38e:	9008      	str	r0, [sp, #32]
 800b390:	2800      	cmp	r0, #0
 800b392:	f43f af24 	beq.w	800b1de <_strtod_l+0x476>
 800b396:	9b04      	ldr	r3, [sp, #16]
 800b398:	f04f 0b00 	mov.w	fp, #0
 800b39c:	1b5d      	subs	r5, r3, r5
 800b39e:	9b07      	ldr	r3, [sp, #28]
 800b3a0:	f8cd b010 	str.w	fp, [sp, #16]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	bfb4      	ite	lt
 800b3a8:	462b      	movlt	r3, r5
 800b3aa:	2300      	movge	r3, #0
 800b3ac:	930e      	str	r3, [sp, #56]	; 0x38
 800b3ae:	9b07      	ldr	r3, [sp, #28]
 800b3b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b3b4:	9316      	str	r3, [sp, #88]	; 0x58
 800b3b6:	9b08      	ldr	r3, [sp, #32]
 800b3b8:	4650      	mov	r0, sl
 800b3ba:	6859      	ldr	r1, [r3, #4]
 800b3bc:	f000 fee0 	bl	800c180 <_Balloc>
 800b3c0:	9006      	str	r0, [sp, #24]
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	f43f af13 	beq.w	800b1ee <_strtod_l+0x486>
 800b3c8:	9b08      	ldr	r3, [sp, #32]
 800b3ca:	300c      	adds	r0, #12
 800b3cc:	691a      	ldr	r2, [r3, #16]
 800b3ce:	f103 010c 	add.w	r1, r3, #12
 800b3d2:	3202      	adds	r2, #2
 800b3d4:	0092      	lsls	r2, r2, #2
 800b3d6:	f7ff fc85 	bl	800ace4 <memcpy>
 800b3da:	ab1e      	add	r3, sp, #120	; 0x78
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	ab1d      	add	r3, sp, #116	; 0x74
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	4642      	mov	r2, r8
 800b3e4:	464b      	mov	r3, r9
 800b3e6:	4650      	mov	r0, sl
 800b3e8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800b3ec:	f001 fab2 	bl	800c954 <__d2b>
 800b3f0:	901c      	str	r0, [sp, #112]	; 0x70
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	f43f aefb 	beq.w	800b1ee <_strtod_l+0x486>
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	4650      	mov	r0, sl
 800b3fc:	f001 f804 	bl	800c408 <__i2b>
 800b400:	4603      	mov	r3, r0
 800b402:	9004      	str	r0, [sp, #16]
 800b404:	2800      	cmp	r0, #0
 800b406:	f43f aef2 	beq.w	800b1ee <_strtod_l+0x486>
 800b40a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b40c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b40e:	2d00      	cmp	r5, #0
 800b410:	bfab      	itete	ge
 800b412:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b414:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b416:	18ee      	addge	r6, r5, r3
 800b418:	1b5c      	sublt	r4, r3, r5
 800b41a:	9b05      	ldr	r3, [sp, #20]
 800b41c:	bfa8      	it	ge
 800b41e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800b420:	eba5 0503 	sub.w	r5, r5, r3
 800b424:	4415      	add	r5, r2
 800b426:	4b71      	ldr	r3, [pc, #452]	; (800b5ec <_strtod_l+0x884>)
 800b428:	f105 35ff 	add.w	r5, r5, #4294967295
 800b42c:	bfb8      	it	lt
 800b42e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b430:	429d      	cmp	r5, r3
 800b432:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b436:	f280 80c9 	bge.w	800b5cc <_strtod_l+0x864>
 800b43a:	1b5b      	subs	r3, r3, r5
 800b43c:	2b1f      	cmp	r3, #31
 800b43e:	f04f 0701 	mov.w	r7, #1
 800b442:	eba2 0203 	sub.w	r2, r2, r3
 800b446:	f300 80b6 	bgt.w	800b5b6 <_strtod_l+0x84e>
 800b44a:	2500      	movs	r5, #0
 800b44c:	fa07 f303 	lsl.w	r3, r7, r3
 800b450:	930f      	str	r3, [sp, #60]	; 0x3c
 800b452:	18b7      	adds	r7, r6, r2
 800b454:	9b05      	ldr	r3, [sp, #20]
 800b456:	42be      	cmp	r6, r7
 800b458:	4414      	add	r4, r2
 800b45a:	441c      	add	r4, r3
 800b45c:	4633      	mov	r3, r6
 800b45e:	bfa8      	it	ge
 800b460:	463b      	movge	r3, r7
 800b462:	42a3      	cmp	r3, r4
 800b464:	bfa8      	it	ge
 800b466:	4623      	movge	r3, r4
 800b468:	2b00      	cmp	r3, #0
 800b46a:	bfc2      	ittt	gt
 800b46c:	1aff      	subgt	r7, r7, r3
 800b46e:	1ae4      	subgt	r4, r4, r3
 800b470:	1af6      	subgt	r6, r6, r3
 800b472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b474:	2b00      	cmp	r3, #0
 800b476:	dd17      	ble.n	800b4a8 <_strtod_l+0x740>
 800b478:	461a      	mov	r2, r3
 800b47a:	4650      	mov	r0, sl
 800b47c:	9904      	ldr	r1, [sp, #16]
 800b47e:	f001 f87d 	bl	800c57c <__pow5mult>
 800b482:	9004      	str	r0, [sp, #16]
 800b484:	2800      	cmp	r0, #0
 800b486:	f43f aeb2 	beq.w	800b1ee <_strtod_l+0x486>
 800b48a:	4601      	mov	r1, r0
 800b48c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b48e:	4650      	mov	r0, sl
 800b490:	f000 ffd0 	bl	800c434 <__multiply>
 800b494:	9009      	str	r0, [sp, #36]	; 0x24
 800b496:	2800      	cmp	r0, #0
 800b498:	f43f aea9 	beq.w	800b1ee <_strtod_l+0x486>
 800b49c:	4650      	mov	r0, sl
 800b49e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b4a0:	f000 feae 	bl	800c200 <_Bfree>
 800b4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a6:	931c      	str	r3, [sp, #112]	; 0x70
 800b4a8:	2f00      	cmp	r7, #0
 800b4aa:	f300 8093 	bgt.w	800b5d4 <_strtod_l+0x86c>
 800b4ae:	9b07      	ldr	r3, [sp, #28]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	dd08      	ble.n	800b4c6 <_strtod_l+0x75e>
 800b4b4:	4650      	mov	r0, sl
 800b4b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b4b8:	9906      	ldr	r1, [sp, #24]
 800b4ba:	f001 f85f 	bl	800c57c <__pow5mult>
 800b4be:	9006      	str	r0, [sp, #24]
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	f43f ae94 	beq.w	800b1ee <_strtod_l+0x486>
 800b4c6:	2c00      	cmp	r4, #0
 800b4c8:	dd08      	ble.n	800b4dc <_strtod_l+0x774>
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	4650      	mov	r0, sl
 800b4ce:	9906      	ldr	r1, [sp, #24]
 800b4d0:	f001 f8ae 	bl	800c630 <__lshift>
 800b4d4:	9006      	str	r0, [sp, #24]
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	f43f ae89 	beq.w	800b1ee <_strtod_l+0x486>
 800b4dc:	2e00      	cmp	r6, #0
 800b4de:	dd08      	ble.n	800b4f2 <_strtod_l+0x78a>
 800b4e0:	4632      	mov	r2, r6
 800b4e2:	4650      	mov	r0, sl
 800b4e4:	9904      	ldr	r1, [sp, #16]
 800b4e6:	f001 f8a3 	bl	800c630 <__lshift>
 800b4ea:	9004      	str	r0, [sp, #16]
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	f43f ae7e 	beq.w	800b1ee <_strtod_l+0x486>
 800b4f2:	4650      	mov	r0, sl
 800b4f4:	9a06      	ldr	r2, [sp, #24]
 800b4f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b4f8:	f001 f922 	bl	800c740 <__mdiff>
 800b4fc:	4683      	mov	fp, r0
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f ae75 	beq.w	800b1ee <_strtod_l+0x486>
 800b504:	2400      	movs	r4, #0
 800b506:	68c3      	ldr	r3, [r0, #12]
 800b508:	9904      	ldr	r1, [sp, #16]
 800b50a:	60c4      	str	r4, [r0, #12]
 800b50c:	930d      	str	r3, [sp, #52]	; 0x34
 800b50e:	f001 f8fb 	bl	800c708 <__mcmp>
 800b512:	42a0      	cmp	r0, r4
 800b514:	da70      	bge.n	800b5f8 <_strtod_l+0x890>
 800b516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b518:	ea53 0308 	orrs.w	r3, r3, r8
 800b51c:	f040 8096 	bne.w	800b64c <_strtod_l+0x8e4>
 800b520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b524:	2b00      	cmp	r3, #0
 800b526:	f040 8091 	bne.w	800b64c <_strtod_l+0x8e4>
 800b52a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b52e:	0d1b      	lsrs	r3, r3, #20
 800b530:	051b      	lsls	r3, r3, #20
 800b532:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b536:	f240 8089 	bls.w	800b64c <_strtod_l+0x8e4>
 800b53a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b53e:	b923      	cbnz	r3, 800b54a <_strtod_l+0x7e2>
 800b540:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b544:	2b01      	cmp	r3, #1
 800b546:	f340 8081 	ble.w	800b64c <_strtod_l+0x8e4>
 800b54a:	4659      	mov	r1, fp
 800b54c:	2201      	movs	r2, #1
 800b54e:	4650      	mov	r0, sl
 800b550:	f001 f86e 	bl	800c630 <__lshift>
 800b554:	9904      	ldr	r1, [sp, #16]
 800b556:	4683      	mov	fp, r0
 800b558:	f001 f8d6 	bl	800c708 <__mcmp>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	dd75      	ble.n	800b64c <_strtod_l+0x8e4>
 800b560:	9905      	ldr	r1, [sp, #20]
 800b562:	464b      	mov	r3, r9
 800b564:	4a22      	ldr	r2, [pc, #136]	; (800b5f0 <_strtod_l+0x888>)
 800b566:	2900      	cmp	r1, #0
 800b568:	f000 8091 	beq.w	800b68e <_strtod_l+0x926>
 800b56c:	ea02 0109 	and.w	r1, r2, r9
 800b570:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b574:	f300 808b 	bgt.w	800b68e <_strtod_l+0x926>
 800b578:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b57c:	f77f aea9 	ble.w	800b2d2 <_strtod_l+0x56a>
 800b580:	2300      	movs	r3, #0
 800b582:	4a1c      	ldr	r2, [pc, #112]	; (800b5f4 <_strtod_l+0x88c>)
 800b584:	4640      	mov	r0, r8
 800b586:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b58a:	4649      	mov	r1, r9
 800b58c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b590:	f7f4 ffc4 	bl	800051c <__aeabi_dmul>
 800b594:	460b      	mov	r3, r1
 800b596:	4303      	orrs	r3, r0
 800b598:	bf08      	it	eq
 800b59a:	2322      	moveq	r3, #34	; 0x22
 800b59c:	4680      	mov	r8, r0
 800b59e:	4689      	mov	r9, r1
 800b5a0:	bf08      	it	eq
 800b5a2:	f8ca 3000 	streq.w	r3, [sl]
 800b5a6:	e62d      	b.n	800b204 <_strtod_l+0x49c>
 800b5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b0:	ea03 0808 	and.w	r8, r3, r8
 800b5b4:	e6db      	b.n	800b36e <_strtod_l+0x606>
 800b5b6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b5ba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b5be:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b5c2:	35e2      	adds	r5, #226	; 0xe2
 800b5c4:	fa07 f505 	lsl.w	r5, r7, r5
 800b5c8:	970f      	str	r7, [sp, #60]	; 0x3c
 800b5ca:	e742      	b.n	800b452 <_strtod_l+0x6ea>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	2500      	movs	r5, #0
 800b5d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5d2:	e73e      	b.n	800b452 <_strtod_l+0x6ea>
 800b5d4:	463a      	mov	r2, r7
 800b5d6:	4650      	mov	r0, sl
 800b5d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b5da:	f001 f829 	bl	800c630 <__lshift>
 800b5de:	901c      	str	r0, [sp, #112]	; 0x70
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f47f af64 	bne.w	800b4ae <_strtod_l+0x746>
 800b5e6:	e602      	b.n	800b1ee <_strtod_l+0x486>
 800b5e8:	0800dbc8 	.word	0x0800dbc8
 800b5ec:	fffffc02 	.word	0xfffffc02
 800b5f0:	7ff00000 	.word	0x7ff00000
 800b5f4:	39500000 	.word	0x39500000
 800b5f8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b5fc:	d166      	bne.n	800b6cc <_strtod_l+0x964>
 800b5fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b604:	b35a      	cbz	r2, 800b65e <_strtod_l+0x8f6>
 800b606:	4a9c      	ldr	r2, [pc, #624]	; (800b878 <_strtod_l+0xb10>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d12c      	bne.n	800b666 <_strtod_l+0x8fe>
 800b60c:	9b05      	ldr	r3, [sp, #20]
 800b60e:	4640      	mov	r0, r8
 800b610:	b303      	cbz	r3, 800b654 <_strtod_l+0x8ec>
 800b612:	464b      	mov	r3, r9
 800b614:	4a99      	ldr	r2, [pc, #612]	; (800b87c <_strtod_l+0xb14>)
 800b616:	f04f 31ff 	mov.w	r1, #4294967295
 800b61a:	401a      	ands	r2, r3
 800b61c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b620:	d81b      	bhi.n	800b65a <_strtod_l+0x8f2>
 800b622:	0d12      	lsrs	r2, r2, #20
 800b624:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b628:	fa01 f303 	lsl.w	r3, r1, r3
 800b62c:	4298      	cmp	r0, r3
 800b62e:	d11a      	bne.n	800b666 <_strtod_l+0x8fe>
 800b630:	4b93      	ldr	r3, [pc, #588]	; (800b880 <_strtod_l+0xb18>)
 800b632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b634:	429a      	cmp	r2, r3
 800b636:	d102      	bne.n	800b63e <_strtod_l+0x8d6>
 800b638:	3001      	adds	r0, #1
 800b63a:	f43f add8 	beq.w	800b1ee <_strtod_l+0x486>
 800b63e:	f04f 0800 	mov.w	r8, #0
 800b642:	4b8e      	ldr	r3, [pc, #568]	; (800b87c <_strtod_l+0xb14>)
 800b644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b646:	401a      	ands	r2, r3
 800b648:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b64c:	9b05      	ldr	r3, [sp, #20]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d196      	bne.n	800b580 <_strtod_l+0x818>
 800b652:	e5d7      	b.n	800b204 <_strtod_l+0x49c>
 800b654:	f04f 33ff 	mov.w	r3, #4294967295
 800b658:	e7e8      	b.n	800b62c <_strtod_l+0x8c4>
 800b65a:	460b      	mov	r3, r1
 800b65c:	e7e6      	b.n	800b62c <_strtod_l+0x8c4>
 800b65e:	ea53 0308 	orrs.w	r3, r3, r8
 800b662:	f43f af7d 	beq.w	800b560 <_strtod_l+0x7f8>
 800b666:	b1e5      	cbz	r5, 800b6a2 <_strtod_l+0x93a>
 800b668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b66a:	421d      	tst	r5, r3
 800b66c:	d0ee      	beq.n	800b64c <_strtod_l+0x8e4>
 800b66e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b670:	4640      	mov	r0, r8
 800b672:	4649      	mov	r1, r9
 800b674:	9a05      	ldr	r2, [sp, #20]
 800b676:	b1c3      	cbz	r3, 800b6aa <_strtod_l+0x942>
 800b678:	f7ff fb52 	bl	800ad20 <sulp>
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b684:	f7f4 fd94 	bl	80001b0 <__adddf3>
 800b688:	4680      	mov	r8, r0
 800b68a:	4689      	mov	r9, r1
 800b68c:	e7de      	b.n	800b64c <_strtod_l+0x8e4>
 800b68e:	4013      	ands	r3, r2
 800b690:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b694:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b698:	f04f 38ff 	mov.w	r8, #4294967295
 800b69c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b6a0:	e7d4      	b.n	800b64c <_strtod_l+0x8e4>
 800b6a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6a4:	ea13 0f08 	tst.w	r3, r8
 800b6a8:	e7e0      	b.n	800b66c <_strtod_l+0x904>
 800b6aa:	f7ff fb39 	bl	800ad20 <sulp>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b6b6:	f7f4 fd79 	bl	80001ac <__aeabi_dsub>
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4680      	mov	r8, r0
 800b6c0:	4689      	mov	r9, r1
 800b6c2:	f7f5 f993 	bl	80009ec <__aeabi_dcmpeq>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d0c0      	beq.n	800b64c <_strtod_l+0x8e4>
 800b6ca:	e602      	b.n	800b2d2 <_strtod_l+0x56a>
 800b6cc:	4658      	mov	r0, fp
 800b6ce:	9904      	ldr	r1, [sp, #16]
 800b6d0:	f001 f99c 	bl	800ca0c <__ratio>
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6da:	4606      	mov	r6, r0
 800b6dc:	460f      	mov	r7, r1
 800b6de:	f7f5 f999 	bl	8000a14 <__aeabi_dcmple>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d075      	beq.n	800b7d2 <_strtod_l+0xa6a>
 800b6e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d047      	beq.n	800b77c <_strtod_l+0xa14>
 800b6ec:	2600      	movs	r6, #0
 800b6ee:	4f65      	ldr	r7, [pc, #404]	; (800b884 <_strtod_l+0xb1c>)
 800b6f0:	4d64      	ldr	r5, [pc, #400]	; (800b884 <_strtod_l+0xb1c>)
 800b6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6f8:	0d1b      	lsrs	r3, r3, #20
 800b6fa:	051b      	lsls	r3, r3, #20
 800b6fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b700:	4b61      	ldr	r3, [pc, #388]	; (800b888 <_strtod_l+0xb20>)
 800b702:	429a      	cmp	r2, r3
 800b704:	f040 80c8 	bne.w	800b898 <_strtod_l+0xb30>
 800b708:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b70c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b712:	4640      	mov	r0, r8
 800b714:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b718:	4649      	mov	r1, r9
 800b71a:	f001 f8a1 	bl	800c860 <__ulp>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	4630      	mov	r0, r6
 800b724:	4639      	mov	r1, r7
 800b726:	f7f4 fef9 	bl	800051c <__aeabi_dmul>
 800b72a:	4642      	mov	r2, r8
 800b72c:	464b      	mov	r3, r9
 800b72e:	f7f4 fd3f 	bl	80001b0 <__adddf3>
 800b732:	460b      	mov	r3, r1
 800b734:	4951      	ldr	r1, [pc, #324]	; (800b87c <_strtod_l+0xb14>)
 800b736:	4a55      	ldr	r2, [pc, #340]	; (800b88c <_strtod_l+0xb24>)
 800b738:	4019      	ands	r1, r3
 800b73a:	4291      	cmp	r1, r2
 800b73c:	4680      	mov	r8, r0
 800b73e:	d95e      	bls.n	800b7fe <_strtod_l+0xa96>
 800b740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b742:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b746:	4293      	cmp	r3, r2
 800b748:	d103      	bne.n	800b752 <_strtod_l+0x9ea>
 800b74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b74c:	3301      	adds	r3, #1
 800b74e:	f43f ad4e 	beq.w	800b1ee <_strtod_l+0x486>
 800b752:	f04f 38ff 	mov.w	r8, #4294967295
 800b756:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b880 <_strtod_l+0xb18>
 800b75a:	4650      	mov	r0, sl
 800b75c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b75e:	f000 fd4f 	bl	800c200 <_Bfree>
 800b762:	4650      	mov	r0, sl
 800b764:	9906      	ldr	r1, [sp, #24]
 800b766:	f000 fd4b 	bl	800c200 <_Bfree>
 800b76a:	4650      	mov	r0, sl
 800b76c:	9904      	ldr	r1, [sp, #16]
 800b76e:	f000 fd47 	bl	800c200 <_Bfree>
 800b772:	4659      	mov	r1, fp
 800b774:	4650      	mov	r0, sl
 800b776:	f000 fd43 	bl	800c200 <_Bfree>
 800b77a:	e61c      	b.n	800b3b6 <_strtod_l+0x64e>
 800b77c:	f1b8 0f00 	cmp.w	r8, #0
 800b780:	d119      	bne.n	800b7b6 <_strtod_l+0xa4e>
 800b782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b788:	b9e3      	cbnz	r3, 800b7c4 <_strtod_l+0xa5c>
 800b78a:	2200      	movs	r2, #0
 800b78c:	4630      	mov	r0, r6
 800b78e:	4639      	mov	r1, r7
 800b790:	4b3c      	ldr	r3, [pc, #240]	; (800b884 <_strtod_l+0xb1c>)
 800b792:	f7f5 f935 	bl	8000a00 <__aeabi_dcmplt>
 800b796:	b9c8      	cbnz	r0, 800b7cc <_strtod_l+0xa64>
 800b798:	2200      	movs	r2, #0
 800b79a:	4630      	mov	r0, r6
 800b79c:	4639      	mov	r1, r7
 800b79e:	4b3c      	ldr	r3, [pc, #240]	; (800b890 <_strtod_l+0xb28>)
 800b7a0:	f7f4 febc 	bl	800051c <__aeabi_dmul>
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	460d      	mov	r5, r1
 800b7a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b7ac:	9418      	str	r4, [sp, #96]	; 0x60
 800b7ae:	9319      	str	r3, [sp, #100]	; 0x64
 800b7b0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800b7b4:	e79d      	b.n	800b6f2 <_strtod_l+0x98a>
 800b7b6:	f1b8 0f01 	cmp.w	r8, #1
 800b7ba:	d103      	bne.n	800b7c4 <_strtod_l+0xa5c>
 800b7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f43f ad87 	beq.w	800b2d2 <_strtod_l+0x56a>
 800b7c4:	2600      	movs	r6, #0
 800b7c6:	2400      	movs	r4, #0
 800b7c8:	4f32      	ldr	r7, [pc, #200]	; (800b894 <_strtod_l+0xb2c>)
 800b7ca:	e791      	b.n	800b6f0 <_strtod_l+0x988>
 800b7cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b7ce:	4d30      	ldr	r5, [pc, #192]	; (800b890 <_strtod_l+0xb28>)
 800b7d0:	e7ea      	b.n	800b7a8 <_strtod_l+0xa40>
 800b7d2:	4b2f      	ldr	r3, [pc, #188]	; (800b890 <_strtod_l+0xb28>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	4639      	mov	r1, r7
 800b7da:	f7f4 fe9f 	bl	800051c <__aeabi_dmul>
 800b7de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	460d      	mov	r5, r1
 800b7e4:	b933      	cbnz	r3, 800b7f4 <_strtod_l+0xa8c>
 800b7e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7ea:	9010      	str	r0, [sp, #64]	; 0x40
 800b7ec:	9311      	str	r3, [sp, #68]	; 0x44
 800b7ee:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b7f2:	e77e      	b.n	800b6f2 <_strtod_l+0x98a>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b7fc:	e7f7      	b.n	800b7ee <_strtod_l+0xa86>
 800b7fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b802:	9b05      	ldr	r3, [sp, #20]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1a8      	bne.n	800b75a <_strtod_l+0x9f2>
 800b808:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b80c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b80e:	0d1b      	lsrs	r3, r3, #20
 800b810:	051b      	lsls	r3, r3, #20
 800b812:	429a      	cmp	r2, r3
 800b814:	d1a1      	bne.n	800b75a <_strtod_l+0x9f2>
 800b816:	4620      	mov	r0, r4
 800b818:	4629      	mov	r1, r5
 800b81a:	f7f5 fa17 	bl	8000c4c <__aeabi_d2lz>
 800b81e:	f7f4 fe4f 	bl	80004c0 <__aeabi_l2d>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	4620      	mov	r0, r4
 800b828:	4629      	mov	r1, r5
 800b82a:	f7f4 fcbf 	bl	80001ac <__aeabi_dsub>
 800b82e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b830:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b834:	ea43 0308 	orr.w	r3, r3, r8
 800b838:	4313      	orrs	r3, r2
 800b83a:	4604      	mov	r4, r0
 800b83c:	460d      	mov	r5, r1
 800b83e:	d066      	beq.n	800b90e <_strtod_l+0xba6>
 800b840:	a309      	add	r3, pc, #36	; (adr r3, 800b868 <_strtod_l+0xb00>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f7f5 f8db 	bl	8000a00 <__aeabi_dcmplt>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	f47f acda 	bne.w	800b204 <_strtod_l+0x49c>
 800b850:	a307      	add	r3, pc, #28	; (adr r3, 800b870 <_strtod_l+0xb08>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	4620      	mov	r0, r4
 800b858:	4629      	mov	r1, r5
 800b85a:	f7f5 f8ef 	bl	8000a3c <__aeabi_dcmpgt>
 800b85e:	2800      	cmp	r0, #0
 800b860:	f43f af7b 	beq.w	800b75a <_strtod_l+0x9f2>
 800b864:	e4ce      	b.n	800b204 <_strtod_l+0x49c>
 800b866:	bf00      	nop
 800b868:	94a03595 	.word	0x94a03595
 800b86c:	3fdfffff 	.word	0x3fdfffff
 800b870:	35afe535 	.word	0x35afe535
 800b874:	3fe00000 	.word	0x3fe00000
 800b878:	000fffff 	.word	0x000fffff
 800b87c:	7ff00000 	.word	0x7ff00000
 800b880:	7fefffff 	.word	0x7fefffff
 800b884:	3ff00000 	.word	0x3ff00000
 800b888:	7fe00000 	.word	0x7fe00000
 800b88c:	7c9fffff 	.word	0x7c9fffff
 800b890:	3fe00000 	.word	0x3fe00000
 800b894:	bff00000 	.word	0xbff00000
 800b898:	9b05      	ldr	r3, [sp, #20]
 800b89a:	b313      	cbz	r3, 800b8e2 <_strtod_l+0xb7a>
 800b89c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b89e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b8a2:	d81e      	bhi.n	800b8e2 <_strtod_l+0xb7a>
 800b8a4:	a326      	add	r3, pc, #152	; (adr r3, 800b940 <_strtod_l+0xbd8>)
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	f7f5 f8b1 	bl	8000a14 <__aeabi_dcmple>
 800b8b2:	b190      	cbz	r0, 800b8da <_strtod_l+0xb72>
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f7f5 f8ca 	bl	8000a50 <__aeabi_d2uiz>
 800b8bc:	2801      	cmp	r0, #1
 800b8be:	bf38      	it	cc
 800b8c0:	2001      	movcc	r0, #1
 800b8c2:	f7f4 fdb1 	bl	8000428 <__aeabi_ui2d>
 800b8c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	460d      	mov	r5, r1
 800b8cc:	b9d3      	cbnz	r3, 800b904 <_strtod_l+0xb9c>
 800b8ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8d2:	9012      	str	r0, [sp, #72]	; 0x48
 800b8d4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b8d6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b8da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b8dc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b8e0:	1a9f      	subs	r7, r3, r2
 800b8e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8e6:	f000 ffbb 	bl	800c860 <__ulp>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	4639      	mov	r1, r7
 800b8f2:	f7f4 fe13 	bl	800051c <__aeabi_dmul>
 800b8f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b8fa:	f7f4 fc59 	bl	80001b0 <__adddf3>
 800b8fe:	4680      	mov	r8, r0
 800b900:	4689      	mov	r9, r1
 800b902:	e77e      	b.n	800b802 <_strtod_l+0xa9a>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b90c:	e7e3      	b.n	800b8d6 <_strtod_l+0xb6e>
 800b90e:	a30e      	add	r3, pc, #56	; (adr r3, 800b948 <_strtod_l+0xbe0>)
 800b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b914:	f7f5 f874 	bl	8000a00 <__aeabi_dcmplt>
 800b918:	e7a1      	b.n	800b85e <_strtod_l+0xaf6>
 800b91a:	2300      	movs	r3, #0
 800b91c:	930c      	str	r3, [sp, #48]	; 0x30
 800b91e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b920:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	f7ff ba65 	b.w	800adf2 <_strtod_l+0x8a>
 800b928:	2b65      	cmp	r3, #101	; 0x65
 800b92a:	f43f ab5c 	beq.w	800afe6 <_strtod_l+0x27e>
 800b92e:	2b45      	cmp	r3, #69	; 0x45
 800b930:	f43f ab59 	beq.w	800afe6 <_strtod_l+0x27e>
 800b934:	2201      	movs	r2, #1
 800b936:	f7ff bb8d 	b.w	800b054 <_strtod_l+0x2ec>
 800b93a:	bf00      	nop
 800b93c:	f3af 8000 	nop.w
 800b940:	ffc00000 	.word	0xffc00000
 800b944:	41dfffff 	.word	0x41dfffff
 800b948:	94a03595 	.word	0x94a03595
 800b94c:	3fcfffff 	.word	0x3fcfffff

0800b950 <strtod>:
 800b950:	460a      	mov	r2, r1
 800b952:	4601      	mov	r1, r0
 800b954:	4802      	ldr	r0, [pc, #8]	; (800b960 <strtod+0x10>)
 800b956:	4b03      	ldr	r3, [pc, #12]	; (800b964 <strtod+0x14>)
 800b958:	6800      	ldr	r0, [r0, #0]
 800b95a:	f7ff ba05 	b.w	800ad68 <_strtod_l>
 800b95e:	bf00      	nop
 800b960:	20000444 	.word	0x20000444
 800b964:	200004ac 	.word	0x200004ac

0800b968 <strtok>:
 800b968:	4b16      	ldr	r3, [pc, #88]	; (800b9c4 <strtok+0x5c>)
 800b96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96e:	681f      	ldr	r7, [r3, #0]
 800b970:	4605      	mov	r5, r0
 800b972:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800b974:	460e      	mov	r6, r1
 800b976:	b9ec      	cbnz	r4, 800b9b4 <strtok+0x4c>
 800b978:	2050      	movs	r0, #80	; 0x50
 800b97a:	f000 fbe7 	bl	800c14c <malloc>
 800b97e:	4602      	mov	r2, r0
 800b980:	65b8      	str	r0, [r7, #88]	; 0x58
 800b982:	b920      	cbnz	r0, 800b98e <strtok+0x26>
 800b984:	2157      	movs	r1, #87	; 0x57
 800b986:	4b10      	ldr	r3, [pc, #64]	; (800b9c8 <strtok+0x60>)
 800b988:	4810      	ldr	r0, [pc, #64]	; (800b9cc <strtok+0x64>)
 800b98a:	f000 f849 	bl	800ba20 <__assert_func>
 800b98e:	e9c0 4400 	strd	r4, r4, [r0]
 800b992:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b996:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b99a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b99e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b9a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b9a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b9aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b9ae:	6184      	str	r4, [r0, #24]
 800b9b0:	7704      	strb	r4, [r0, #28]
 800b9b2:	6244      	str	r4, [r0, #36]	; 0x24
 800b9b4:	4631      	mov	r1, r6
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c0:	f000 b806 	b.w	800b9d0 <__strtok_r>
 800b9c4:	20000444 	.word	0x20000444
 800b9c8:	0800dbf0 	.word	0x0800dbf0
 800b9cc:	0800dc07 	.word	0x0800dc07

0800b9d0 <__strtok_r>:
 800b9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9d2:	b908      	cbnz	r0, 800b9d8 <__strtok_r+0x8>
 800b9d4:	6810      	ldr	r0, [r2, #0]
 800b9d6:	b188      	cbz	r0, 800b9fc <__strtok_r+0x2c>
 800b9d8:	4604      	mov	r4, r0
 800b9da:	460f      	mov	r7, r1
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b9e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b9e6:	b91e      	cbnz	r6, 800b9f0 <__strtok_r+0x20>
 800b9e8:	b965      	cbnz	r5, 800ba04 <__strtok_r+0x34>
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	6015      	str	r5, [r2, #0]
 800b9ee:	e005      	b.n	800b9fc <__strtok_r+0x2c>
 800b9f0:	42b5      	cmp	r5, r6
 800b9f2:	d1f6      	bne.n	800b9e2 <__strtok_r+0x12>
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1f0      	bne.n	800b9da <__strtok_r+0xa>
 800b9f8:	6014      	str	r4, [r2, #0]
 800b9fa:	7003      	strb	r3, [r0, #0]
 800b9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9fe:	461c      	mov	r4, r3
 800ba00:	e00c      	b.n	800ba1c <__strtok_r+0x4c>
 800ba02:	b915      	cbnz	r5, 800ba0a <__strtok_r+0x3a>
 800ba04:	460e      	mov	r6, r1
 800ba06:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba0a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ba0e:	42ab      	cmp	r3, r5
 800ba10:	d1f7      	bne.n	800ba02 <__strtok_r+0x32>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0f3      	beq.n	800b9fe <__strtok_r+0x2e>
 800ba16:	2300      	movs	r3, #0
 800ba18:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ba1c:	6014      	str	r4, [r2, #0]
 800ba1e:	e7ed      	b.n	800b9fc <__strtok_r+0x2c>

0800ba20 <__assert_func>:
 800ba20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba22:	4614      	mov	r4, r2
 800ba24:	461a      	mov	r2, r3
 800ba26:	4b09      	ldr	r3, [pc, #36]	; (800ba4c <__assert_func+0x2c>)
 800ba28:	4605      	mov	r5, r0
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68d8      	ldr	r0, [r3, #12]
 800ba2e:	b14c      	cbz	r4, 800ba44 <__assert_func+0x24>
 800ba30:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <__assert_func+0x30>)
 800ba32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba36:	9100      	str	r1, [sp, #0]
 800ba38:	462b      	mov	r3, r5
 800ba3a:	4906      	ldr	r1, [pc, #24]	; (800ba54 <__assert_func+0x34>)
 800ba3c:	f000 f80e 	bl	800ba5c <fiprintf>
 800ba40:	f001 fcee 	bl	800d420 <abort>
 800ba44:	4b04      	ldr	r3, [pc, #16]	; (800ba58 <__assert_func+0x38>)
 800ba46:	461c      	mov	r4, r3
 800ba48:	e7f3      	b.n	800ba32 <__assert_func+0x12>
 800ba4a:	bf00      	nop
 800ba4c:	20000444 	.word	0x20000444
 800ba50:	0800dc68 	.word	0x0800dc68
 800ba54:	0800dc75 	.word	0x0800dc75
 800ba58:	0800dca3 	.word	0x0800dca3

0800ba5c <fiprintf>:
 800ba5c:	b40e      	push	{r1, r2, r3}
 800ba5e:	b503      	push	{r0, r1, lr}
 800ba60:	4601      	mov	r1, r0
 800ba62:	ab03      	add	r3, sp, #12
 800ba64:	4805      	ldr	r0, [pc, #20]	; (800ba7c <fiprintf+0x20>)
 800ba66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6a:	6800      	ldr	r0, [r0, #0]
 800ba6c:	9301      	str	r3, [sp, #4]
 800ba6e:	f001 f91b 	bl	800cca8 <_vfiprintf_r>
 800ba72:	b002      	add	sp, #8
 800ba74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba78:	b003      	add	sp, #12
 800ba7a:	4770      	bx	lr
 800ba7c:	20000444 	.word	0x20000444

0800ba80 <rshift>:
 800ba80:	6903      	ldr	r3, [r0, #16]
 800ba82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba8a:	f100 0414 	add.w	r4, r0, #20
 800ba8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba92:	dd46      	ble.n	800bb22 <rshift+0xa2>
 800ba94:	f011 011f 	ands.w	r1, r1, #31
 800ba98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800baa0:	d10c      	bne.n	800babc <rshift+0x3c>
 800baa2:	4629      	mov	r1, r5
 800baa4:	f100 0710 	add.w	r7, r0, #16
 800baa8:	42b1      	cmp	r1, r6
 800baaa:	d335      	bcc.n	800bb18 <rshift+0x98>
 800baac:	1a9b      	subs	r3, r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	1eea      	subs	r2, r5, #3
 800bab2:	4296      	cmp	r6, r2
 800bab4:	bf38      	it	cc
 800bab6:	2300      	movcc	r3, #0
 800bab8:	4423      	add	r3, r4
 800baba:	e015      	b.n	800bae8 <rshift+0x68>
 800babc:	46a1      	mov	r9, r4
 800babe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bac2:	f1c1 0820 	rsb	r8, r1, #32
 800bac6:	40cf      	lsrs	r7, r1
 800bac8:	f105 0e04 	add.w	lr, r5, #4
 800bacc:	4576      	cmp	r6, lr
 800bace:	46f4      	mov	ip, lr
 800bad0:	d816      	bhi.n	800bb00 <rshift+0x80>
 800bad2:	1a9b      	subs	r3, r3, r2
 800bad4:	009a      	lsls	r2, r3, #2
 800bad6:	3a04      	subs	r2, #4
 800bad8:	3501      	adds	r5, #1
 800bada:	42ae      	cmp	r6, r5
 800badc:	bf38      	it	cc
 800bade:	2200      	movcc	r2, #0
 800bae0:	18a3      	adds	r3, r4, r2
 800bae2:	50a7      	str	r7, [r4, r2]
 800bae4:	b107      	cbz	r7, 800bae8 <rshift+0x68>
 800bae6:	3304      	adds	r3, #4
 800bae8:	42a3      	cmp	r3, r4
 800baea:	eba3 0204 	sub.w	r2, r3, r4
 800baee:	bf08      	it	eq
 800baf0:	2300      	moveq	r3, #0
 800baf2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800baf6:	6102      	str	r2, [r0, #16]
 800baf8:	bf08      	it	eq
 800bafa:	6143      	streq	r3, [r0, #20]
 800bafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb00:	f8dc c000 	ldr.w	ip, [ip]
 800bb04:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb08:	ea4c 0707 	orr.w	r7, ip, r7
 800bb0c:	f849 7b04 	str.w	r7, [r9], #4
 800bb10:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb14:	40cf      	lsrs	r7, r1
 800bb16:	e7d9      	b.n	800bacc <rshift+0x4c>
 800bb18:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb1c:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb20:	e7c2      	b.n	800baa8 <rshift+0x28>
 800bb22:	4623      	mov	r3, r4
 800bb24:	e7e0      	b.n	800bae8 <rshift+0x68>

0800bb26 <__hexdig_fun>:
 800bb26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bb2a:	2b09      	cmp	r3, #9
 800bb2c:	d802      	bhi.n	800bb34 <__hexdig_fun+0xe>
 800bb2e:	3820      	subs	r0, #32
 800bb30:	b2c0      	uxtb	r0, r0
 800bb32:	4770      	bx	lr
 800bb34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bb38:	2b05      	cmp	r3, #5
 800bb3a:	d801      	bhi.n	800bb40 <__hexdig_fun+0x1a>
 800bb3c:	3847      	subs	r0, #71	; 0x47
 800bb3e:	e7f7      	b.n	800bb30 <__hexdig_fun+0xa>
 800bb40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bb44:	2b05      	cmp	r3, #5
 800bb46:	d801      	bhi.n	800bb4c <__hexdig_fun+0x26>
 800bb48:	3827      	subs	r0, #39	; 0x27
 800bb4a:	e7f1      	b.n	800bb30 <__hexdig_fun+0xa>
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	4770      	bx	lr

0800bb50 <__gethex>:
 800bb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	b08b      	sub	sp, #44	; 0x2c
 800bb56:	9306      	str	r3, [sp, #24]
 800bb58:	4bb9      	ldr	r3, [pc, #740]	; (800be40 <__gethex+0x2f0>)
 800bb5a:	9002      	str	r0, [sp, #8]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	468b      	mov	fp, r1
 800bb60:	4618      	mov	r0, r3
 800bb62:	4690      	mov	r8, r2
 800bb64:	9303      	str	r3, [sp, #12]
 800bb66:	f7f4 fb15 	bl	8000194 <strlen>
 800bb6a:	4682      	mov	sl, r0
 800bb6c:	9b03      	ldr	r3, [sp, #12]
 800bb6e:	f8db 2000 	ldr.w	r2, [fp]
 800bb72:	4403      	add	r3, r0
 800bb74:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bb78:	9307      	str	r3, [sp, #28]
 800bb7a:	1c93      	adds	r3, r2, #2
 800bb7c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb80:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb84:	32fe      	adds	r2, #254	; 0xfe
 800bb86:	18d1      	adds	r1, r2, r3
 800bb88:	461f      	mov	r7, r3
 800bb8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bb8e:	9101      	str	r1, [sp, #4]
 800bb90:	2830      	cmp	r0, #48	; 0x30
 800bb92:	d0f8      	beq.n	800bb86 <__gethex+0x36>
 800bb94:	f7ff ffc7 	bl	800bb26 <__hexdig_fun>
 800bb98:	4604      	mov	r4, r0
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d13a      	bne.n	800bc14 <__gethex+0xc4>
 800bb9e:	4652      	mov	r2, sl
 800bba0:	4638      	mov	r0, r7
 800bba2:	9903      	ldr	r1, [sp, #12]
 800bba4:	f001 fb5c 	bl	800d260 <strncmp>
 800bba8:	4605      	mov	r5, r0
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d166      	bne.n	800bc7c <__gethex+0x12c>
 800bbae:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bbb2:	eb07 060a 	add.w	r6, r7, sl
 800bbb6:	f7ff ffb6 	bl	800bb26 <__hexdig_fun>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d060      	beq.n	800bc80 <__gethex+0x130>
 800bbbe:	4633      	mov	r3, r6
 800bbc0:	7818      	ldrb	r0, [r3, #0]
 800bbc2:	461f      	mov	r7, r3
 800bbc4:	2830      	cmp	r0, #48	; 0x30
 800bbc6:	f103 0301 	add.w	r3, r3, #1
 800bbca:	d0f9      	beq.n	800bbc0 <__gethex+0x70>
 800bbcc:	f7ff ffab 	bl	800bb26 <__hexdig_fun>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	fab0 f480 	clz	r4, r0
 800bbd6:	4635      	mov	r5, r6
 800bbd8:	0964      	lsrs	r4, r4, #5
 800bbda:	9301      	str	r3, [sp, #4]
 800bbdc:	463a      	mov	r2, r7
 800bbde:	4616      	mov	r6, r2
 800bbe0:	7830      	ldrb	r0, [r6, #0]
 800bbe2:	3201      	adds	r2, #1
 800bbe4:	f7ff ff9f 	bl	800bb26 <__hexdig_fun>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d1f8      	bne.n	800bbde <__gethex+0x8e>
 800bbec:	4652      	mov	r2, sl
 800bbee:	4630      	mov	r0, r6
 800bbf0:	9903      	ldr	r1, [sp, #12]
 800bbf2:	f001 fb35 	bl	800d260 <strncmp>
 800bbf6:	b980      	cbnz	r0, 800bc1a <__gethex+0xca>
 800bbf8:	b94d      	cbnz	r5, 800bc0e <__gethex+0xbe>
 800bbfa:	eb06 050a 	add.w	r5, r6, sl
 800bbfe:	462a      	mov	r2, r5
 800bc00:	4616      	mov	r6, r2
 800bc02:	7830      	ldrb	r0, [r6, #0]
 800bc04:	3201      	adds	r2, #1
 800bc06:	f7ff ff8e 	bl	800bb26 <__hexdig_fun>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d1f8      	bne.n	800bc00 <__gethex+0xb0>
 800bc0e:	1bad      	subs	r5, r5, r6
 800bc10:	00ad      	lsls	r5, r5, #2
 800bc12:	e004      	b.n	800bc1e <__gethex+0xce>
 800bc14:	2400      	movs	r4, #0
 800bc16:	4625      	mov	r5, r4
 800bc18:	e7e0      	b.n	800bbdc <__gethex+0x8c>
 800bc1a:	2d00      	cmp	r5, #0
 800bc1c:	d1f7      	bne.n	800bc0e <__gethex+0xbe>
 800bc1e:	7833      	ldrb	r3, [r6, #0]
 800bc20:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc24:	2b50      	cmp	r3, #80	; 0x50
 800bc26:	d139      	bne.n	800bc9c <__gethex+0x14c>
 800bc28:	7873      	ldrb	r3, [r6, #1]
 800bc2a:	2b2b      	cmp	r3, #43	; 0x2b
 800bc2c:	d02a      	beq.n	800bc84 <__gethex+0x134>
 800bc2e:	2b2d      	cmp	r3, #45	; 0x2d
 800bc30:	d02c      	beq.n	800bc8c <__gethex+0x13c>
 800bc32:	f04f 0900 	mov.w	r9, #0
 800bc36:	1c71      	adds	r1, r6, #1
 800bc38:	7808      	ldrb	r0, [r1, #0]
 800bc3a:	f7ff ff74 	bl	800bb26 <__hexdig_fun>
 800bc3e:	1e43      	subs	r3, r0, #1
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b18      	cmp	r3, #24
 800bc44:	d82a      	bhi.n	800bc9c <__gethex+0x14c>
 800bc46:	f1a0 0210 	sub.w	r2, r0, #16
 800bc4a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc4e:	f7ff ff6a 	bl	800bb26 <__hexdig_fun>
 800bc52:	1e43      	subs	r3, r0, #1
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b18      	cmp	r3, #24
 800bc58:	d91b      	bls.n	800bc92 <__gethex+0x142>
 800bc5a:	f1b9 0f00 	cmp.w	r9, #0
 800bc5e:	d000      	beq.n	800bc62 <__gethex+0x112>
 800bc60:	4252      	negs	r2, r2
 800bc62:	4415      	add	r5, r2
 800bc64:	f8cb 1000 	str.w	r1, [fp]
 800bc68:	b1d4      	cbz	r4, 800bca0 <__gethex+0x150>
 800bc6a:	9b01      	ldr	r3, [sp, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	bf14      	ite	ne
 800bc70:	2700      	movne	r7, #0
 800bc72:	2706      	moveq	r7, #6
 800bc74:	4638      	mov	r0, r7
 800bc76:	b00b      	add	sp, #44	; 0x2c
 800bc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7c:	463e      	mov	r6, r7
 800bc7e:	4625      	mov	r5, r4
 800bc80:	2401      	movs	r4, #1
 800bc82:	e7cc      	b.n	800bc1e <__gethex+0xce>
 800bc84:	f04f 0900 	mov.w	r9, #0
 800bc88:	1cb1      	adds	r1, r6, #2
 800bc8a:	e7d5      	b.n	800bc38 <__gethex+0xe8>
 800bc8c:	f04f 0901 	mov.w	r9, #1
 800bc90:	e7fa      	b.n	800bc88 <__gethex+0x138>
 800bc92:	230a      	movs	r3, #10
 800bc94:	fb03 0202 	mla	r2, r3, r2, r0
 800bc98:	3a10      	subs	r2, #16
 800bc9a:	e7d6      	b.n	800bc4a <__gethex+0xfa>
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	e7e1      	b.n	800bc64 <__gethex+0x114>
 800bca0:	4621      	mov	r1, r4
 800bca2:	1bf3      	subs	r3, r6, r7
 800bca4:	3b01      	subs	r3, #1
 800bca6:	2b07      	cmp	r3, #7
 800bca8:	dc0a      	bgt.n	800bcc0 <__gethex+0x170>
 800bcaa:	9802      	ldr	r0, [sp, #8]
 800bcac:	f000 fa68 	bl	800c180 <_Balloc>
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	b940      	cbnz	r0, 800bcc6 <__gethex+0x176>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	21de      	movs	r1, #222	; 0xde
 800bcb8:	4b62      	ldr	r3, [pc, #392]	; (800be44 <__gethex+0x2f4>)
 800bcba:	4863      	ldr	r0, [pc, #396]	; (800be48 <__gethex+0x2f8>)
 800bcbc:	f7ff feb0 	bl	800ba20 <__assert_func>
 800bcc0:	3101      	adds	r1, #1
 800bcc2:	105b      	asrs	r3, r3, #1
 800bcc4:	e7ef      	b.n	800bca6 <__gethex+0x156>
 800bcc6:	f04f 0b00 	mov.w	fp, #0
 800bcca:	f100 0914 	add.w	r9, r0, #20
 800bcce:	f1ca 0301 	rsb	r3, sl, #1
 800bcd2:	f8cd 9010 	str.w	r9, [sp, #16]
 800bcd6:	f8cd b004 	str.w	fp, [sp, #4]
 800bcda:	9308      	str	r3, [sp, #32]
 800bcdc:	42b7      	cmp	r7, r6
 800bcde:	d33f      	bcc.n	800bd60 <__gethex+0x210>
 800bce0:	9f04      	ldr	r7, [sp, #16]
 800bce2:	9b01      	ldr	r3, [sp, #4]
 800bce4:	f847 3b04 	str.w	r3, [r7], #4
 800bce8:	eba7 0709 	sub.w	r7, r7, r9
 800bcec:	10bf      	asrs	r7, r7, #2
 800bcee:	6127      	str	r7, [r4, #16]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f000 fb3b 	bl	800c36c <__hi0bits>
 800bcf6:	017f      	lsls	r7, r7, #5
 800bcf8:	f8d8 6000 	ldr.w	r6, [r8]
 800bcfc:	1a3f      	subs	r7, r7, r0
 800bcfe:	42b7      	cmp	r7, r6
 800bd00:	dd62      	ble.n	800bdc8 <__gethex+0x278>
 800bd02:	1bbf      	subs	r7, r7, r6
 800bd04:	4639      	mov	r1, r7
 800bd06:	4620      	mov	r0, r4
 800bd08:	f000 fed1 	bl	800caae <__any_on>
 800bd0c:	4682      	mov	sl, r0
 800bd0e:	b1a8      	cbz	r0, 800bd3c <__gethex+0x1ec>
 800bd10:	f04f 0a01 	mov.w	sl, #1
 800bd14:	1e7b      	subs	r3, r7, #1
 800bd16:	1159      	asrs	r1, r3, #5
 800bd18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bd1c:	f003 021f 	and.w	r2, r3, #31
 800bd20:	fa0a f202 	lsl.w	r2, sl, r2
 800bd24:	420a      	tst	r2, r1
 800bd26:	d009      	beq.n	800bd3c <__gethex+0x1ec>
 800bd28:	4553      	cmp	r3, sl
 800bd2a:	dd05      	ble.n	800bd38 <__gethex+0x1e8>
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	1eb9      	subs	r1, r7, #2
 800bd30:	f000 febd 	bl	800caae <__any_on>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d144      	bne.n	800bdc2 <__gethex+0x272>
 800bd38:	f04f 0a02 	mov.w	sl, #2
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f7ff fe9e 	bl	800ba80 <rshift>
 800bd44:	443d      	add	r5, r7
 800bd46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd4a:	42ab      	cmp	r3, r5
 800bd4c:	da4a      	bge.n	800bde4 <__gethex+0x294>
 800bd4e:	4621      	mov	r1, r4
 800bd50:	9802      	ldr	r0, [sp, #8]
 800bd52:	f000 fa55 	bl	800c200 <_Bfree>
 800bd56:	2300      	movs	r3, #0
 800bd58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd5a:	27a3      	movs	r7, #163	; 0xa3
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	e789      	b.n	800bc74 <__gethex+0x124>
 800bd60:	1e73      	subs	r3, r6, #1
 800bd62:	9a07      	ldr	r2, [sp, #28]
 800bd64:	9305      	str	r3, [sp, #20]
 800bd66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d019      	beq.n	800bda2 <__gethex+0x252>
 800bd6e:	f1bb 0f20 	cmp.w	fp, #32
 800bd72:	d107      	bne.n	800bd84 <__gethex+0x234>
 800bd74:	9b04      	ldr	r3, [sp, #16]
 800bd76:	9a01      	ldr	r2, [sp, #4]
 800bd78:	f843 2b04 	str.w	r2, [r3], #4
 800bd7c:	9304      	str	r3, [sp, #16]
 800bd7e:	2300      	movs	r3, #0
 800bd80:	469b      	mov	fp, r3
 800bd82:	9301      	str	r3, [sp, #4]
 800bd84:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bd88:	f7ff fecd 	bl	800bb26 <__hexdig_fun>
 800bd8c:	9b01      	ldr	r3, [sp, #4]
 800bd8e:	f000 000f 	and.w	r0, r0, #15
 800bd92:	fa00 f00b 	lsl.w	r0, r0, fp
 800bd96:	4303      	orrs	r3, r0
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	f10b 0b04 	add.w	fp, fp, #4
 800bd9e:	9b05      	ldr	r3, [sp, #20]
 800bda0:	e00d      	b.n	800bdbe <__gethex+0x26e>
 800bda2:	9b05      	ldr	r3, [sp, #20]
 800bda4:	9a08      	ldr	r2, [sp, #32]
 800bda6:	4413      	add	r3, r2
 800bda8:	42bb      	cmp	r3, r7
 800bdaa:	d3e0      	bcc.n	800bd6e <__gethex+0x21e>
 800bdac:	4618      	mov	r0, r3
 800bdae:	4652      	mov	r2, sl
 800bdb0:	9903      	ldr	r1, [sp, #12]
 800bdb2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb4:	f001 fa54 	bl	800d260 <strncmp>
 800bdb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d1d7      	bne.n	800bd6e <__gethex+0x21e>
 800bdbe:	461e      	mov	r6, r3
 800bdc0:	e78c      	b.n	800bcdc <__gethex+0x18c>
 800bdc2:	f04f 0a03 	mov.w	sl, #3
 800bdc6:	e7b9      	b.n	800bd3c <__gethex+0x1ec>
 800bdc8:	da09      	bge.n	800bdde <__gethex+0x28e>
 800bdca:	1bf7      	subs	r7, r6, r7
 800bdcc:	4621      	mov	r1, r4
 800bdce:	463a      	mov	r2, r7
 800bdd0:	9802      	ldr	r0, [sp, #8]
 800bdd2:	f000 fc2d 	bl	800c630 <__lshift>
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	1bed      	subs	r5, r5, r7
 800bdda:	f100 0914 	add.w	r9, r0, #20
 800bdde:	f04f 0a00 	mov.w	sl, #0
 800bde2:	e7b0      	b.n	800bd46 <__gethex+0x1f6>
 800bde4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bde8:	42a8      	cmp	r0, r5
 800bdea:	dd71      	ble.n	800bed0 <__gethex+0x380>
 800bdec:	1b45      	subs	r5, r0, r5
 800bdee:	42ae      	cmp	r6, r5
 800bdf0:	dc34      	bgt.n	800be5c <__gethex+0x30c>
 800bdf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d028      	beq.n	800be4c <__gethex+0x2fc>
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d02a      	beq.n	800be54 <__gethex+0x304>
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d115      	bne.n	800be2e <__gethex+0x2de>
 800be02:	42ae      	cmp	r6, r5
 800be04:	d113      	bne.n	800be2e <__gethex+0x2de>
 800be06:	2e01      	cmp	r6, #1
 800be08:	d10b      	bne.n	800be22 <__gethex+0x2d2>
 800be0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800be0e:	9a06      	ldr	r2, [sp, #24]
 800be10:	2762      	movs	r7, #98	; 0x62
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	2301      	movs	r3, #1
 800be16:	6123      	str	r3, [r4, #16]
 800be18:	f8c9 3000 	str.w	r3, [r9]
 800be1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be1e:	601c      	str	r4, [r3, #0]
 800be20:	e728      	b.n	800bc74 <__gethex+0x124>
 800be22:	4620      	mov	r0, r4
 800be24:	1e71      	subs	r1, r6, #1
 800be26:	f000 fe42 	bl	800caae <__any_on>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d1ed      	bne.n	800be0a <__gethex+0x2ba>
 800be2e:	4621      	mov	r1, r4
 800be30:	9802      	ldr	r0, [sp, #8]
 800be32:	f000 f9e5 	bl	800c200 <_Bfree>
 800be36:	2300      	movs	r3, #0
 800be38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be3a:	2750      	movs	r7, #80	; 0x50
 800be3c:	6013      	str	r3, [r2, #0]
 800be3e:	e719      	b.n	800bc74 <__gethex+0x124>
 800be40:	0800dd20 	.word	0x0800dd20
 800be44:	0800dca4 	.word	0x0800dca4
 800be48:	0800dcb5 	.word	0x0800dcb5
 800be4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1ed      	bne.n	800be2e <__gethex+0x2de>
 800be52:	e7da      	b.n	800be0a <__gethex+0x2ba>
 800be54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1d7      	bne.n	800be0a <__gethex+0x2ba>
 800be5a:	e7e8      	b.n	800be2e <__gethex+0x2de>
 800be5c:	1e6f      	subs	r7, r5, #1
 800be5e:	f1ba 0f00 	cmp.w	sl, #0
 800be62:	d132      	bne.n	800beca <__gethex+0x37a>
 800be64:	b127      	cbz	r7, 800be70 <__gethex+0x320>
 800be66:	4639      	mov	r1, r7
 800be68:	4620      	mov	r0, r4
 800be6a:	f000 fe20 	bl	800caae <__any_on>
 800be6e:	4682      	mov	sl, r0
 800be70:	2101      	movs	r1, #1
 800be72:	117b      	asrs	r3, r7, #5
 800be74:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800be78:	f007 071f 	and.w	r7, r7, #31
 800be7c:	fa01 f707 	lsl.w	r7, r1, r7
 800be80:	421f      	tst	r7, r3
 800be82:	f04f 0702 	mov.w	r7, #2
 800be86:	4629      	mov	r1, r5
 800be88:	4620      	mov	r0, r4
 800be8a:	bf18      	it	ne
 800be8c:	f04a 0a02 	orrne.w	sl, sl, #2
 800be90:	1b76      	subs	r6, r6, r5
 800be92:	f7ff fdf5 	bl	800ba80 <rshift>
 800be96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be9a:	f1ba 0f00 	cmp.w	sl, #0
 800be9e:	d048      	beq.n	800bf32 <__gethex+0x3e2>
 800bea0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d015      	beq.n	800bed4 <__gethex+0x384>
 800bea8:	2b03      	cmp	r3, #3
 800beaa:	d017      	beq.n	800bedc <__gethex+0x38c>
 800beac:	2b01      	cmp	r3, #1
 800beae:	d109      	bne.n	800bec4 <__gethex+0x374>
 800beb0:	f01a 0f02 	tst.w	sl, #2
 800beb4:	d006      	beq.n	800bec4 <__gethex+0x374>
 800beb6:	f8d9 0000 	ldr.w	r0, [r9]
 800beba:	ea4a 0a00 	orr.w	sl, sl, r0
 800bebe:	f01a 0f01 	tst.w	sl, #1
 800bec2:	d10e      	bne.n	800bee2 <__gethex+0x392>
 800bec4:	f047 0710 	orr.w	r7, r7, #16
 800bec8:	e033      	b.n	800bf32 <__gethex+0x3e2>
 800beca:	f04f 0a01 	mov.w	sl, #1
 800bece:	e7cf      	b.n	800be70 <__gethex+0x320>
 800bed0:	2701      	movs	r7, #1
 800bed2:	e7e2      	b.n	800be9a <__gethex+0x34a>
 800bed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bed6:	f1c3 0301 	rsb	r3, r3, #1
 800beda:	9315      	str	r3, [sp, #84]	; 0x54
 800bedc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d0f0      	beq.n	800bec4 <__gethex+0x374>
 800bee2:	f04f 0c00 	mov.w	ip, #0
 800bee6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800beea:	f104 0314 	add.w	r3, r4, #20
 800beee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bef2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bef6:	4618      	mov	r0, r3
 800bef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800befc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bf00:	d01c      	beq.n	800bf3c <__gethex+0x3ec>
 800bf02:	3201      	adds	r2, #1
 800bf04:	6002      	str	r2, [r0, #0]
 800bf06:	2f02      	cmp	r7, #2
 800bf08:	f104 0314 	add.w	r3, r4, #20
 800bf0c:	d13d      	bne.n	800bf8a <__gethex+0x43a>
 800bf0e:	f8d8 2000 	ldr.w	r2, [r8]
 800bf12:	3a01      	subs	r2, #1
 800bf14:	42b2      	cmp	r2, r6
 800bf16:	d10a      	bne.n	800bf2e <__gethex+0x3de>
 800bf18:	2201      	movs	r2, #1
 800bf1a:	1171      	asrs	r1, r6, #5
 800bf1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf20:	f006 061f 	and.w	r6, r6, #31
 800bf24:	fa02 f606 	lsl.w	r6, r2, r6
 800bf28:	421e      	tst	r6, r3
 800bf2a:	bf18      	it	ne
 800bf2c:	4617      	movne	r7, r2
 800bf2e:	f047 0720 	orr.w	r7, r7, #32
 800bf32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf34:	601c      	str	r4, [r3, #0]
 800bf36:	9b06      	ldr	r3, [sp, #24]
 800bf38:	601d      	str	r5, [r3, #0]
 800bf3a:	e69b      	b.n	800bc74 <__gethex+0x124>
 800bf3c:	4299      	cmp	r1, r3
 800bf3e:	f843 cc04 	str.w	ip, [r3, #-4]
 800bf42:	d8d8      	bhi.n	800bef6 <__gethex+0x3a6>
 800bf44:	68a3      	ldr	r3, [r4, #8]
 800bf46:	459b      	cmp	fp, r3
 800bf48:	db17      	blt.n	800bf7a <__gethex+0x42a>
 800bf4a:	6861      	ldr	r1, [r4, #4]
 800bf4c:	9802      	ldr	r0, [sp, #8]
 800bf4e:	3101      	adds	r1, #1
 800bf50:	f000 f916 	bl	800c180 <_Balloc>
 800bf54:	4681      	mov	r9, r0
 800bf56:	b918      	cbnz	r0, 800bf60 <__gethex+0x410>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	2184      	movs	r1, #132	; 0x84
 800bf5c:	4b19      	ldr	r3, [pc, #100]	; (800bfc4 <__gethex+0x474>)
 800bf5e:	e6ac      	b.n	800bcba <__gethex+0x16a>
 800bf60:	6922      	ldr	r2, [r4, #16]
 800bf62:	f104 010c 	add.w	r1, r4, #12
 800bf66:	3202      	adds	r2, #2
 800bf68:	0092      	lsls	r2, r2, #2
 800bf6a:	300c      	adds	r0, #12
 800bf6c:	f7fe feba 	bl	800ace4 <memcpy>
 800bf70:	4621      	mov	r1, r4
 800bf72:	9802      	ldr	r0, [sp, #8]
 800bf74:	f000 f944 	bl	800c200 <_Bfree>
 800bf78:	464c      	mov	r4, r9
 800bf7a:	6923      	ldr	r3, [r4, #16]
 800bf7c:	1c5a      	adds	r2, r3, #1
 800bf7e:	6122      	str	r2, [r4, #16]
 800bf80:	2201      	movs	r2, #1
 800bf82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf86:	615a      	str	r2, [r3, #20]
 800bf88:	e7bd      	b.n	800bf06 <__gethex+0x3b6>
 800bf8a:	6922      	ldr	r2, [r4, #16]
 800bf8c:	455a      	cmp	r2, fp
 800bf8e:	dd0b      	ble.n	800bfa8 <__gethex+0x458>
 800bf90:	2101      	movs	r1, #1
 800bf92:	4620      	mov	r0, r4
 800bf94:	f7ff fd74 	bl	800ba80 <rshift>
 800bf98:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf9c:	3501      	adds	r5, #1
 800bf9e:	42ab      	cmp	r3, r5
 800bfa0:	f6ff aed5 	blt.w	800bd4e <__gethex+0x1fe>
 800bfa4:	2701      	movs	r7, #1
 800bfa6:	e7c2      	b.n	800bf2e <__gethex+0x3de>
 800bfa8:	f016 061f 	ands.w	r6, r6, #31
 800bfac:	d0fa      	beq.n	800bfa4 <__gethex+0x454>
 800bfae:	449a      	add	sl, r3
 800bfb0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bfb4:	f000 f9da 	bl	800c36c <__hi0bits>
 800bfb8:	f1c6 0620 	rsb	r6, r6, #32
 800bfbc:	42b0      	cmp	r0, r6
 800bfbe:	dbe7      	blt.n	800bf90 <__gethex+0x440>
 800bfc0:	e7f0      	b.n	800bfa4 <__gethex+0x454>
 800bfc2:	bf00      	nop
 800bfc4:	0800dca4 	.word	0x0800dca4

0800bfc8 <L_shift>:
 800bfc8:	f1c2 0208 	rsb	r2, r2, #8
 800bfcc:	0092      	lsls	r2, r2, #2
 800bfce:	b570      	push	{r4, r5, r6, lr}
 800bfd0:	f1c2 0620 	rsb	r6, r2, #32
 800bfd4:	6843      	ldr	r3, [r0, #4]
 800bfd6:	6804      	ldr	r4, [r0, #0]
 800bfd8:	fa03 f506 	lsl.w	r5, r3, r6
 800bfdc:	432c      	orrs	r4, r5
 800bfde:	40d3      	lsrs	r3, r2
 800bfe0:	6004      	str	r4, [r0, #0]
 800bfe2:	f840 3f04 	str.w	r3, [r0, #4]!
 800bfe6:	4288      	cmp	r0, r1
 800bfe8:	d3f4      	bcc.n	800bfd4 <L_shift+0xc>
 800bfea:	bd70      	pop	{r4, r5, r6, pc}

0800bfec <__match>:
 800bfec:	b530      	push	{r4, r5, lr}
 800bfee:	6803      	ldr	r3, [r0, #0]
 800bff0:	3301      	adds	r3, #1
 800bff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bff6:	b914      	cbnz	r4, 800bffe <__match+0x12>
 800bff8:	6003      	str	r3, [r0, #0]
 800bffa:	2001      	movs	r0, #1
 800bffc:	bd30      	pop	{r4, r5, pc}
 800bffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c002:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c006:	2d19      	cmp	r5, #25
 800c008:	bf98      	it	ls
 800c00a:	3220      	addls	r2, #32
 800c00c:	42a2      	cmp	r2, r4
 800c00e:	d0f0      	beq.n	800bff2 <__match+0x6>
 800c010:	2000      	movs	r0, #0
 800c012:	e7f3      	b.n	800bffc <__match+0x10>

0800c014 <__hexnan>:
 800c014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c018:	2500      	movs	r5, #0
 800c01a:	680b      	ldr	r3, [r1, #0]
 800c01c:	4682      	mov	sl, r0
 800c01e:	115e      	asrs	r6, r3, #5
 800c020:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c024:	f013 031f 	ands.w	r3, r3, #31
 800c028:	bf18      	it	ne
 800c02a:	3604      	addne	r6, #4
 800c02c:	1f37      	subs	r7, r6, #4
 800c02e:	4690      	mov	r8, r2
 800c030:	46b9      	mov	r9, r7
 800c032:	463c      	mov	r4, r7
 800c034:	46ab      	mov	fp, r5
 800c036:	b087      	sub	sp, #28
 800c038:	6801      	ldr	r1, [r0, #0]
 800c03a:	9301      	str	r3, [sp, #4]
 800c03c:	f846 5c04 	str.w	r5, [r6, #-4]
 800c040:	9502      	str	r5, [sp, #8]
 800c042:	784a      	ldrb	r2, [r1, #1]
 800c044:	1c4b      	adds	r3, r1, #1
 800c046:	9303      	str	r3, [sp, #12]
 800c048:	b342      	cbz	r2, 800c09c <__hexnan+0x88>
 800c04a:	4610      	mov	r0, r2
 800c04c:	9105      	str	r1, [sp, #20]
 800c04e:	9204      	str	r2, [sp, #16]
 800c050:	f7ff fd69 	bl	800bb26 <__hexdig_fun>
 800c054:	2800      	cmp	r0, #0
 800c056:	d14f      	bne.n	800c0f8 <__hexnan+0xe4>
 800c058:	9a04      	ldr	r2, [sp, #16]
 800c05a:	9905      	ldr	r1, [sp, #20]
 800c05c:	2a20      	cmp	r2, #32
 800c05e:	d818      	bhi.n	800c092 <__hexnan+0x7e>
 800c060:	9b02      	ldr	r3, [sp, #8]
 800c062:	459b      	cmp	fp, r3
 800c064:	dd13      	ble.n	800c08e <__hexnan+0x7a>
 800c066:	454c      	cmp	r4, r9
 800c068:	d206      	bcs.n	800c078 <__hexnan+0x64>
 800c06a:	2d07      	cmp	r5, #7
 800c06c:	dc04      	bgt.n	800c078 <__hexnan+0x64>
 800c06e:	462a      	mov	r2, r5
 800c070:	4649      	mov	r1, r9
 800c072:	4620      	mov	r0, r4
 800c074:	f7ff ffa8 	bl	800bfc8 <L_shift>
 800c078:	4544      	cmp	r4, r8
 800c07a:	d950      	bls.n	800c11e <__hexnan+0x10a>
 800c07c:	2300      	movs	r3, #0
 800c07e:	f1a4 0904 	sub.w	r9, r4, #4
 800c082:	f844 3c04 	str.w	r3, [r4, #-4]
 800c086:	461d      	mov	r5, r3
 800c088:	464c      	mov	r4, r9
 800c08a:	f8cd b008 	str.w	fp, [sp, #8]
 800c08e:	9903      	ldr	r1, [sp, #12]
 800c090:	e7d7      	b.n	800c042 <__hexnan+0x2e>
 800c092:	2a29      	cmp	r2, #41	; 0x29
 800c094:	d156      	bne.n	800c144 <__hexnan+0x130>
 800c096:	3102      	adds	r1, #2
 800c098:	f8ca 1000 	str.w	r1, [sl]
 800c09c:	f1bb 0f00 	cmp.w	fp, #0
 800c0a0:	d050      	beq.n	800c144 <__hexnan+0x130>
 800c0a2:	454c      	cmp	r4, r9
 800c0a4:	d206      	bcs.n	800c0b4 <__hexnan+0xa0>
 800c0a6:	2d07      	cmp	r5, #7
 800c0a8:	dc04      	bgt.n	800c0b4 <__hexnan+0xa0>
 800c0aa:	462a      	mov	r2, r5
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f7ff ff8a 	bl	800bfc8 <L_shift>
 800c0b4:	4544      	cmp	r4, r8
 800c0b6:	d934      	bls.n	800c122 <__hexnan+0x10e>
 800c0b8:	4623      	mov	r3, r4
 800c0ba:	f1a8 0204 	sub.w	r2, r8, #4
 800c0be:	f853 1b04 	ldr.w	r1, [r3], #4
 800c0c2:	429f      	cmp	r7, r3
 800c0c4:	f842 1f04 	str.w	r1, [r2, #4]!
 800c0c8:	d2f9      	bcs.n	800c0be <__hexnan+0xaa>
 800c0ca:	1b3b      	subs	r3, r7, r4
 800c0cc:	f023 0303 	bic.w	r3, r3, #3
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	3401      	adds	r4, #1
 800c0d4:	3e03      	subs	r6, #3
 800c0d6:	42b4      	cmp	r4, r6
 800c0d8:	bf88      	it	hi
 800c0da:	2304      	movhi	r3, #4
 800c0dc:	2200      	movs	r2, #0
 800c0de:	4443      	add	r3, r8
 800c0e0:	f843 2b04 	str.w	r2, [r3], #4
 800c0e4:	429f      	cmp	r7, r3
 800c0e6:	d2fb      	bcs.n	800c0e0 <__hexnan+0xcc>
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	b91b      	cbnz	r3, 800c0f4 <__hexnan+0xe0>
 800c0ec:	4547      	cmp	r7, r8
 800c0ee:	d127      	bne.n	800c140 <__hexnan+0x12c>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	603b      	str	r3, [r7, #0]
 800c0f4:	2005      	movs	r0, #5
 800c0f6:	e026      	b.n	800c146 <__hexnan+0x132>
 800c0f8:	3501      	adds	r5, #1
 800c0fa:	2d08      	cmp	r5, #8
 800c0fc:	f10b 0b01 	add.w	fp, fp, #1
 800c100:	dd06      	ble.n	800c110 <__hexnan+0xfc>
 800c102:	4544      	cmp	r4, r8
 800c104:	d9c3      	bls.n	800c08e <__hexnan+0x7a>
 800c106:	2300      	movs	r3, #0
 800c108:	2501      	movs	r5, #1
 800c10a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c10e:	3c04      	subs	r4, #4
 800c110:	6822      	ldr	r2, [r4, #0]
 800c112:	f000 000f 	and.w	r0, r0, #15
 800c116:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c11a:	6022      	str	r2, [r4, #0]
 800c11c:	e7b7      	b.n	800c08e <__hexnan+0x7a>
 800c11e:	2508      	movs	r5, #8
 800c120:	e7b5      	b.n	800c08e <__hexnan+0x7a>
 800c122:	9b01      	ldr	r3, [sp, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d0df      	beq.n	800c0e8 <__hexnan+0xd4>
 800c128:	f04f 32ff 	mov.w	r2, #4294967295
 800c12c:	f1c3 0320 	rsb	r3, r3, #32
 800c130:	fa22 f303 	lsr.w	r3, r2, r3
 800c134:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c138:	401a      	ands	r2, r3
 800c13a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c13e:	e7d3      	b.n	800c0e8 <__hexnan+0xd4>
 800c140:	3f04      	subs	r7, #4
 800c142:	e7d1      	b.n	800c0e8 <__hexnan+0xd4>
 800c144:	2004      	movs	r0, #4
 800c146:	b007      	add	sp, #28
 800c148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c14c <malloc>:
 800c14c:	4b02      	ldr	r3, [pc, #8]	; (800c158 <malloc+0xc>)
 800c14e:	4601      	mov	r1, r0
 800c150:	6818      	ldr	r0, [r3, #0]
 800c152:	f000 bd27 	b.w	800cba4 <_malloc_r>
 800c156:	bf00      	nop
 800c158:	20000444 	.word	0x20000444

0800c15c <__ascii_mbtowc>:
 800c15c:	b082      	sub	sp, #8
 800c15e:	b901      	cbnz	r1, 800c162 <__ascii_mbtowc+0x6>
 800c160:	a901      	add	r1, sp, #4
 800c162:	b142      	cbz	r2, 800c176 <__ascii_mbtowc+0x1a>
 800c164:	b14b      	cbz	r3, 800c17a <__ascii_mbtowc+0x1e>
 800c166:	7813      	ldrb	r3, [r2, #0]
 800c168:	600b      	str	r3, [r1, #0]
 800c16a:	7812      	ldrb	r2, [r2, #0]
 800c16c:	1e10      	subs	r0, r2, #0
 800c16e:	bf18      	it	ne
 800c170:	2001      	movne	r0, #1
 800c172:	b002      	add	sp, #8
 800c174:	4770      	bx	lr
 800c176:	4610      	mov	r0, r2
 800c178:	e7fb      	b.n	800c172 <__ascii_mbtowc+0x16>
 800c17a:	f06f 0001 	mvn.w	r0, #1
 800c17e:	e7f8      	b.n	800c172 <__ascii_mbtowc+0x16>

0800c180 <_Balloc>:
 800c180:	b570      	push	{r4, r5, r6, lr}
 800c182:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c184:	4604      	mov	r4, r0
 800c186:	460d      	mov	r5, r1
 800c188:	b976      	cbnz	r6, 800c1a8 <_Balloc+0x28>
 800c18a:	2010      	movs	r0, #16
 800c18c:	f7ff ffde 	bl	800c14c <malloc>
 800c190:	4602      	mov	r2, r0
 800c192:	6260      	str	r0, [r4, #36]	; 0x24
 800c194:	b920      	cbnz	r0, 800c1a0 <_Balloc+0x20>
 800c196:	2166      	movs	r1, #102	; 0x66
 800c198:	4b17      	ldr	r3, [pc, #92]	; (800c1f8 <_Balloc+0x78>)
 800c19a:	4818      	ldr	r0, [pc, #96]	; (800c1fc <_Balloc+0x7c>)
 800c19c:	f7ff fc40 	bl	800ba20 <__assert_func>
 800c1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1a4:	6006      	str	r6, [r0, #0]
 800c1a6:	60c6      	str	r6, [r0, #12]
 800c1a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c1aa:	68f3      	ldr	r3, [r6, #12]
 800c1ac:	b183      	cbz	r3, 800c1d0 <_Balloc+0x50>
 800c1ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1b6:	b9b8      	cbnz	r0, 800c1e8 <_Balloc+0x68>
 800c1b8:	2101      	movs	r1, #1
 800c1ba:	fa01 f605 	lsl.w	r6, r1, r5
 800c1be:	1d72      	adds	r2, r6, #5
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	0092      	lsls	r2, r2, #2
 800c1c4:	f000 fc94 	bl	800caf0 <_calloc_r>
 800c1c8:	b160      	cbz	r0, 800c1e4 <_Balloc+0x64>
 800c1ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1ce:	e00e      	b.n	800c1ee <_Balloc+0x6e>
 800c1d0:	2221      	movs	r2, #33	; 0x21
 800c1d2:	2104      	movs	r1, #4
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f000 fc8b 	bl	800caf0 <_calloc_r>
 800c1da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1dc:	60f0      	str	r0, [r6, #12]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1e4      	bne.n	800c1ae <_Balloc+0x2e>
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	bd70      	pop	{r4, r5, r6, pc}
 800c1e8:	6802      	ldr	r2, [r0, #0]
 800c1ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1f4:	e7f7      	b.n	800c1e6 <_Balloc+0x66>
 800c1f6:	bf00      	nop
 800c1f8:	0800dbf0 	.word	0x0800dbf0
 800c1fc:	0800dd34 	.word	0x0800dd34

0800c200 <_Bfree>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c204:	4605      	mov	r5, r0
 800c206:	460c      	mov	r4, r1
 800c208:	b976      	cbnz	r6, 800c228 <_Bfree+0x28>
 800c20a:	2010      	movs	r0, #16
 800c20c:	f7ff ff9e 	bl	800c14c <malloc>
 800c210:	4602      	mov	r2, r0
 800c212:	6268      	str	r0, [r5, #36]	; 0x24
 800c214:	b920      	cbnz	r0, 800c220 <_Bfree+0x20>
 800c216:	218a      	movs	r1, #138	; 0x8a
 800c218:	4b08      	ldr	r3, [pc, #32]	; (800c23c <_Bfree+0x3c>)
 800c21a:	4809      	ldr	r0, [pc, #36]	; (800c240 <_Bfree+0x40>)
 800c21c:	f7ff fc00 	bl	800ba20 <__assert_func>
 800c220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c224:	6006      	str	r6, [r0, #0]
 800c226:	60c6      	str	r6, [r0, #12]
 800c228:	b13c      	cbz	r4, 800c23a <_Bfree+0x3a>
 800c22a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c22c:	6862      	ldr	r2, [r4, #4]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c234:	6021      	str	r1, [r4, #0]
 800c236:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	0800dbf0 	.word	0x0800dbf0
 800c240:	0800dd34 	.word	0x0800dd34

0800c244 <__multadd>:
 800c244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c248:	4698      	mov	r8, r3
 800c24a:	460c      	mov	r4, r1
 800c24c:	2300      	movs	r3, #0
 800c24e:	690e      	ldr	r6, [r1, #16]
 800c250:	4607      	mov	r7, r0
 800c252:	f101 0014 	add.w	r0, r1, #20
 800c256:	6805      	ldr	r5, [r0, #0]
 800c258:	3301      	adds	r3, #1
 800c25a:	b2a9      	uxth	r1, r5
 800c25c:	fb02 8101 	mla	r1, r2, r1, r8
 800c260:	0c2d      	lsrs	r5, r5, #16
 800c262:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c266:	fb02 c505 	mla	r5, r2, r5, ip
 800c26a:	b289      	uxth	r1, r1
 800c26c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c270:	429e      	cmp	r6, r3
 800c272:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c276:	f840 1b04 	str.w	r1, [r0], #4
 800c27a:	dcec      	bgt.n	800c256 <__multadd+0x12>
 800c27c:	f1b8 0f00 	cmp.w	r8, #0
 800c280:	d022      	beq.n	800c2c8 <__multadd+0x84>
 800c282:	68a3      	ldr	r3, [r4, #8]
 800c284:	42b3      	cmp	r3, r6
 800c286:	dc19      	bgt.n	800c2bc <__multadd+0x78>
 800c288:	6861      	ldr	r1, [r4, #4]
 800c28a:	4638      	mov	r0, r7
 800c28c:	3101      	adds	r1, #1
 800c28e:	f7ff ff77 	bl	800c180 <_Balloc>
 800c292:	4605      	mov	r5, r0
 800c294:	b928      	cbnz	r0, 800c2a2 <__multadd+0x5e>
 800c296:	4602      	mov	r2, r0
 800c298:	21b5      	movs	r1, #181	; 0xb5
 800c29a:	4b0d      	ldr	r3, [pc, #52]	; (800c2d0 <__multadd+0x8c>)
 800c29c:	480d      	ldr	r0, [pc, #52]	; (800c2d4 <__multadd+0x90>)
 800c29e:	f7ff fbbf 	bl	800ba20 <__assert_func>
 800c2a2:	6922      	ldr	r2, [r4, #16]
 800c2a4:	f104 010c 	add.w	r1, r4, #12
 800c2a8:	3202      	adds	r2, #2
 800c2aa:	0092      	lsls	r2, r2, #2
 800c2ac:	300c      	adds	r0, #12
 800c2ae:	f7fe fd19 	bl	800ace4 <memcpy>
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	4638      	mov	r0, r7
 800c2b6:	f7ff ffa3 	bl	800c200 <_Bfree>
 800c2ba:	462c      	mov	r4, r5
 800c2bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c2c0:	3601      	adds	r6, #1
 800c2c2:	f8c3 8014 	str.w	r8, [r3, #20]
 800c2c6:	6126      	str	r6, [r4, #16]
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ce:	bf00      	nop
 800c2d0:	0800dca4 	.word	0x0800dca4
 800c2d4:	0800dd34 	.word	0x0800dd34

0800c2d8 <__s2b>:
 800c2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2dc:	4615      	mov	r5, r2
 800c2de:	2209      	movs	r2, #9
 800c2e0:	461f      	mov	r7, r3
 800c2e2:	3308      	adds	r3, #8
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2ea:	4606      	mov	r6, r0
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	db09      	blt.n	800c308 <__s2b+0x30>
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f7ff ff43 	bl	800c180 <_Balloc>
 800c2fa:	b940      	cbnz	r0, 800c30e <__s2b+0x36>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	21ce      	movs	r1, #206	; 0xce
 800c300:	4b18      	ldr	r3, [pc, #96]	; (800c364 <__s2b+0x8c>)
 800c302:	4819      	ldr	r0, [pc, #100]	; (800c368 <__s2b+0x90>)
 800c304:	f7ff fb8c 	bl	800ba20 <__assert_func>
 800c308:	0052      	lsls	r2, r2, #1
 800c30a:	3101      	adds	r1, #1
 800c30c:	e7f0      	b.n	800c2f0 <__s2b+0x18>
 800c30e:	9b08      	ldr	r3, [sp, #32]
 800c310:	2d09      	cmp	r5, #9
 800c312:	6143      	str	r3, [r0, #20]
 800c314:	f04f 0301 	mov.w	r3, #1
 800c318:	6103      	str	r3, [r0, #16]
 800c31a:	dd16      	ble.n	800c34a <__s2b+0x72>
 800c31c:	f104 0909 	add.w	r9, r4, #9
 800c320:	46c8      	mov	r8, r9
 800c322:	442c      	add	r4, r5
 800c324:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c328:	4601      	mov	r1, r0
 800c32a:	220a      	movs	r2, #10
 800c32c:	4630      	mov	r0, r6
 800c32e:	3b30      	subs	r3, #48	; 0x30
 800c330:	f7ff ff88 	bl	800c244 <__multadd>
 800c334:	45a0      	cmp	r8, r4
 800c336:	d1f5      	bne.n	800c324 <__s2b+0x4c>
 800c338:	f1a5 0408 	sub.w	r4, r5, #8
 800c33c:	444c      	add	r4, r9
 800c33e:	1b2d      	subs	r5, r5, r4
 800c340:	1963      	adds	r3, r4, r5
 800c342:	42bb      	cmp	r3, r7
 800c344:	db04      	blt.n	800c350 <__s2b+0x78>
 800c346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c34a:	2509      	movs	r5, #9
 800c34c:	340a      	adds	r4, #10
 800c34e:	e7f6      	b.n	800c33e <__s2b+0x66>
 800c350:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c354:	4601      	mov	r1, r0
 800c356:	220a      	movs	r2, #10
 800c358:	4630      	mov	r0, r6
 800c35a:	3b30      	subs	r3, #48	; 0x30
 800c35c:	f7ff ff72 	bl	800c244 <__multadd>
 800c360:	e7ee      	b.n	800c340 <__s2b+0x68>
 800c362:	bf00      	nop
 800c364:	0800dca4 	.word	0x0800dca4
 800c368:	0800dd34 	.word	0x0800dd34

0800c36c <__hi0bits>:
 800c36c:	0c02      	lsrs	r2, r0, #16
 800c36e:	0412      	lsls	r2, r2, #16
 800c370:	4603      	mov	r3, r0
 800c372:	b9ca      	cbnz	r2, 800c3a8 <__hi0bits+0x3c>
 800c374:	0403      	lsls	r3, r0, #16
 800c376:	2010      	movs	r0, #16
 800c378:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c37c:	bf04      	itt	eq
 800c37e:	021b      	lsleq	r3, r3, #8
 800c380:	3008      	addeq	r0, #8
 800c382:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c386:	bf04      	itt	eq
 800c388:	011b      	lsleq	r3, r3, #4
 800c38a:	3004      	addeq	r0, #4
 800c38c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c390:	bf04      	itt	eq
 800c392:	009b      	lsleq	r3, r3, #2
 800c394:	3002      	addeq	r0, #2
 800c396:	2b00      	cmp	r3, #0
 800c398:	db05      	blt.n	800c3a6 <__hi0bits+0x3a>
 800c39a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c39e:	f100 0001 	add.w	r0, r0, #1
 800c3a2:	bf08      	it	eq
 800c3a4:	2020      	moveq	r0, #32
 800c3a6:	4770      	bx	lr
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	e7e5      	b.n	800c378 <__hi0bits+0xc>

0800c3ac <__lo0bits>:
 800c3ac:	6803      	ldr	r3, [r0, #0]
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	f013 0007 	ands.w	r0, r3, #7
 800c3b4:	d00b      	beq.n	800c3ce <__lo0bits+0x22>
 800c3b6:	07d9      	lsls	r1, r3, #31
 800c3b8:	d422      	bmi.n	800c400 <__lo0bits+0x54>
 800c3ba:	0798      	lsls	r0, r3, #30
 800c3bc:	bf49      	itett	mi
 800c3be:	085b      	lsrmi	r3, r3, #1
 800c3c0:	089b      	lsrpl	r3, r3, #2
 800c3c2:	2001      	movmi	r0, #1
 800c3c4:	6013      	strmi	r3, [r2, #0]
 800c3c6:	bf5c      	itt	pl
 800c3c8:	2002      	movpl	r0, #2
 800c3ca:	6013      	strpl	r3, [r2, #0]
 800c3cc:	4770      	bx	lr
 800c3ce:	b299      	uxth	r1, r3
 800c3d0:	b909      	cbnz	r1, 800c3d6 <__lo0bits+0x2a>
 800c3d2:	2010      	movs	r0, #16
 800c3d4:	0c1b      	lsrs	r3, r3, #16
 800c3d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c3da:	bf04      	itt	eq
 800c3dc:	0a1b      	lsreq	r3, r3, #8
 800c3de:	3008      	addeq	r0, #8
 800c3e0:	0719      	lsls	r1, r3, #28
 800c3e2:	bf04      	itt	eq
 800c3e4:	091b      	lsreq	r3, r3, #4
 800c3e6:	3004      	addeq	r0, #4
 800c3e8:	0799      	lsls	r1, r3, #30
 800c3ea:	bf04      	itt	eq
 800c3ec:	089b      	lsreq	r3, r3, #2
 800c3ee:	3002      	addeq	r0, #2
 800c3f0:	07d9      	lsls	r1, r3, #31
 800c3f2:	d403      	bmi.n	800c3fc <__lo0bits+0x50>
 800c3f4:	085b      	lsrs	r3, r3, #1
 800c3f6:	f100 0001 	add.w	r0, r0, #1
 800c3fa:	d003      	beq.n	800c404 <__lo0bits+0x58>
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	4770      	bx	lr
 800c400:	2000      	movs	r0, #0
 800c402:	4770      	bx	lr
 800c404:	2020      	movs	r0, #32
 800c406:	4770      	bx	lr

0800c408 <__i2b>:
 800c408:	b510      	push	{r4, lr}
 800c40a:	460c      	mov	r4, r1
 800c40c:	2101      	movs	r1, #1
 800c40e:	f7ff feb7 	bl	800c180 <_Balloc>
 800c412:	4602      	mov	r2, r0
 800c414:	b928      	cbnz	r0, 800c422 <__i2b+0x1a>
 800c416:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c41a:	4b04      	ldr	r3, [pc, #16]	; (800c42c <__i2b+0x24>)
 800c41c:	4804      	ldr	r0, [pc, #16]	; (800c430 <__i2b+0x28>)
 800c41e:	f7ff faff 	bl	800ba20 <__assert_func>
 800c422:	2301      	movs	r3, #1
 800c424:	6144      	str	r4, [r0, #20]
 800c426:	6103      	str	r3, [r0, #16]
 800c428:	bd10      	pop	{r4, pc}
 800c42a:	bf00      	nop
 800c42c:	0800dca4 	.word	0x0800dca4
 800c430:	0800dd34 	.word	0x0800dd34

0800c434 <__multiply>:
 800c434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c438:	4614      	mov	r4, r2
 800c43a:	690a      	ldr	r2, [r1, #16]
 800c43c:	6923      	ldr	r3, [r4, #16]
 800c43e:	460d      	mov	r5, r1
 800c440:	429a      	cmp	r2, r3
 800c442:	bfbe      	ittt	lt
 800c444:	460b      	movlt	r3, r1
 800c446:	4625      	movlt	r5, r4
 800c448:	461c      	movlt	r4, r3
 800c44a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c44e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c452:	68ab      	ldr	r3, [r5, #8]
 800c454:	6869      	ldr	r1, [r5, #4]
 800c456:	eb0a 0709 	add.w	r7, sl, r9
 800c45a:	42bb      	cmp	r3, r7
 800c45c:	b085      	sub	sp, #20
 800c45e:	bfb8      	it	lt
 800c460:	3101      	addlt	r1, #1
 800c462:	f7ff fe8d 	bl	800c180 <_Balloc>
 800c466:	b930      	cbnz	r0, 800c476 <__multiply+0x42>
 800c468:	4602      	mov	r2, r0
 800c46a:	f240 115d 	movw	r1, #349	; 0x15d
 800c46e:	4b41      	ldr	r3, [pc, #260]	; (800c574 <__multiply+0x140>)
 800c470:	4841      	ldr	r0, [pc, #260]	; (800c578 <__multiply+0x144>)
 800c472:	f7ff fad5 	bl	800ba20 <__assert_func>
 800c476:	f100 0614 	add.w	r6, r0, #20
 800c47a:	4633      	mov	r3, r6
 800c47c:	2200      	movs	r2, #0
 800c47e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c482:	4543      	cmp	r3, r8
 800c484:	d31e      	bcc.n	800c4c4 <__multiply+0x90>
 800c486:	f105 0c14 	add.w	ip, r5, #20
 800c48a:	f104 0314 	add.w	r3, r4, #20
 800c48e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c492:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c496:	9202      	str	r2, [sp, #8]
 800c498:	ebac 0205 	sub.w	r2, ip, r5
 800c49c:	3a15      	subs	r2, #21
 800c49e:	f022 0203 	bic.w	r2, r2, #3
 800c4a2:	3204      	adds	r2, #4
 800c4a4:	f105 0115 	add.w	r1, r5, #21
 800c4a8:	458c      	cmp	ip, r1
 800c4aa:	bf38      	it	cc
 800c4ac:	2204      	movcc	r2, #4
 800c4ae:	9201      	str	r2, [sp, #4]
 800c4b0:	9a02      	ldr	r2, [sp, #8]
 800c4b2:	9303      	str	r3, [sp, #12]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d808      	bhi.n	800c4ca <__multiply+0x96>
 800c4b8:	2f00      	cmp	r7, #0
 800c4ba:	dc55      	bgt.n	800c568 <__multiply+0x134>
 800c4bc:	6107      	str	r7, [r0, #16]
 800c4be:	b005      	add	sp, #20
 800c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c4:	f843 2b04 	str.w	r2, [r3], #4
 800c4c8:	e7db      	b.n	800c482 <__multiply+0x4e>
 800c4ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800c4ce:	f1ba 0f00 	cmp.w	sl, #0
 800c4d2:	d020      	beq.n	800c516 <__multiply+0xe2>
 800c4d4:	46b1      	mov	r9, r6
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f105 0e14 	add.w	lr, r5, #20
 800c4dc:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c4e0:	f8d9 b000 	ldr.w	fp, [r9]
 800c4e4:	b2a1      	uxth	r1, r4
 800c4e6:	fa1f fb8b 	uxth.w	fp, fp
 800c4ea:	fb0a b101 	mla	r1, sl, r1, fp
 800c4ee:	4411      	add	r1, r2
 800c4f0:	f8d9 2000 	ldr.w	r2, [r9]
 800c4f4:	0c24      	lsrs	r4, r4, #16
 800c4f6:	0c12      	lsrs	r2, r2, #16
 800c4f8:	fb0a 2404 	mla	r4, sl, r4, r2
 800c4fc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c500:	b289      	uxth	r1, r1
 800c502:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c506:	45f4      	cmp	ip, lr
 800c508:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c50c:	f849 1b04 	str.w	r1, [r9], #4
 800c510:	d8e4      	bhi.n	800c4dc <__multiply+0xa8>
 800c512:	9901      	ldr	r1, [sp, #4]
 800c514:	5072      	str	r2, [r6, r1]
 800c516:	9a03      	ldr	r2, [sp, #12]
 800c518:	3304      	adds	r3, #4
 800c51a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c51e:	f1b9 0f00 	cmp.w	r9, #0
 800c522:	d01f      	beq.n	800c564 <__multiply+0x130>
 800c524:	46b6      	mov	lr, r6
 800c526:	f04f 0a00 	mov.w	sl, #0
 800c52a:	6834      	ldr	r4, [r6, #0]
 800c52c:	f105 0114 	add.w	r1, r5, #20
 800c530:	880a      	ldrh	r2, [r1, #0]
 800c532:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c536:	b2a4      	uxth	r4, r4
 800c538:	fb09 b202 	mla	r2, r9, r2, fp
 800c53c:	4492      	add	sl, r2
 800c53e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c542:	f84e 4b04 	str.w	r4, [lr], #4
 800c546:	f851 4b04 	ldr.w	r4, [r1], #4
 800c54a:	f8be 2000 	ldrh.w	r2, [lr]
 800c54e:	0c24      	lsrs	r4, r4, #16
 800c550:	fb09 2404 	mla	r4, r9, r4, r2
 800c554:	458c      	cmp	ip, r1
 800c556:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c55a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c55e:	d8e7      	bhi.n	800c530 <__multiply+0xfc>
 800c560:	9a01      	ldr	r2, [sp, #4]
 800c562:	50b4      	str	r4, [r6, r2]
 800c564:	3604      	adds	r6, #4
 800c566:	e7a3      	b.n	800c4b0 <__multiply+0x7c>
 800c568:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1a5      	bne.n	800c4bc <__multiply+0x88>
 800c570:	3f01      	subs	r7, #1
 800c572:	e7a1      	b.n	800c4b8 <__multiply+0x84>
 800c574:	0800dca4 	.word	0x0800dca4
 800c578:	0800dd34 	.word	0x0800dd34

0800c57c <__pow5mult>:
 800c57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c580:	4615      	mov	r5, r2
 800c582:	f012 0203 	ands.w	r2, r2, #3
 800c586:	4606      	mov	r6, r0
 800c588:	460f      	mov	r7, r1
 800c58a:	d007      	beq.n	800c59c <__pow5mult+0x20>
 800c58c:	4c25      	ldr	r4, [pc, #148]	; (800c624 <__pow5mult+0xa8>)
 800c58e:	3a01      	subs	r2, #1
 800c590:	2300      	movs	r3, #0
 800c592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c596:	f7ff fe55 	bl	800c244 <__multadd>
 800c59a:	4607      	mov	r7, r0
 800c59c:	10ad      	asrs	r5, r5, #2
 800c59e:	d03d      	beq.n	800c61c <__pow5mult+0xa0>
 800c5a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c5a2:	b97c      	cbnz	r4, 800c5c4 <__pow5mult+0x48>
 800c5a4:	2010      	movs	r0, #16
 800c5a6:	f7ff fdd1 	bl	800c14c <malloc>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	6270      	str	r0, [r6, #36]	; 0x24
 800c5ae:	b928      	cbnz	r0, 800c5bc <__pow5mult+0x40>
 800c5b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c5b4:	4b1c      	ldr	r3, [pc, #112]	; (800c628 <__pow5mult+0xac>)
 800c5b6:	481d      	ldr	r0, [pc, #116]	; (800c62c <__pow5mult+0xb0>)
 800c5b8:	f7ff fa32 	bl	800ba20 <__assert_func>
 800c5bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5c0:	6004      	str	r4, [r0, #0]
 800c5c2:	60c4      	str	r4, [r0, #12]
 800c5c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c5c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5cc:	b94c      	cbnz	r4, 800c5e2 <__pow5mult+0x66>
 800c5ce:	f240 2171 	movw	r1, #625	; 0x271
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f7ff ff18 	bl	800c408 <__i2b>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	4604      	mov	r4, r0
 800c5dc:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5e0:	6003      	str	r3, [r0, #0]
 800c5e2:	f04f 0900 	mov.w	r9, #0
 800c5e6:	07eb      	lsls	r3, r5, #31
 800c5e8:	d50a      	bpl.n	800c600 <__pow5mult+0x84>
 800c5ea:	4639      	mov	r1, r7
 800c5ec:	4622      	mov	r2, r4
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f7ff ff20 	bl	800c434 <__multiply>
 800c5f4:	4680      	mov	r8, r0
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f7ff fe01 	bl	800c200 <_Bfree>
 800c5fe:	4647      	mov	r7, r8
 800c600:	106d      	asrs	r5, r5, #1
 800c602:	d00b      	beq.n	800c61c <__pow5mult+0xa0>
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	b938      	cbnz	r0, 800c618 <__pow5mult+0x9c>
 800c608:	4622      	mov	r2, r4
 800c60a:	4621      	mov	r1, r4
 800c60c:	4630      	mov	r0, r6
 800c60e:	f7ff ff11 	bl	800c434 <__multiply>
 800c612:	6020      	str	r0, [r4, #0]
 800c614:	f8c0 9000 	str.w	r9, [r0]
 800c618:	4604      	mov	r4, r0
 800c61a:	e7e4      	b.n	800c5e6 <__pow5mult+0x6a>
 800c61c:	4638      	mov	r0, r7
 800c61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c622:	bf00      	nop
 800c624:	0800de88 	.word	0x0800de88
 800c628:	0800dbf0 	.word	0x0800dbf0
 800c62c:	0800dd34 	.word	0x0800dd34

0800c630 <__lshift>:
 800c630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c634:	460c      	mov	r4, r1
 800c636:	4607      	mov	r7, r0
 800c638:	4691      	mov	r9, r2
 800c63a:	6923      	ldr	r3, [r4, #16]
 800c63c:	6849      	ldr	r1, [r1, #4]
 800c63e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c642:	68a3      	ldr	r3, [r4, #8]
 800c644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c648:	f108 0601 	add.w	r6, r8, #1
 800c64c:	42b3      	cmp	r3, r6
 800c64e:	db0b      	blt.n	800c668 <__lshift+0x38>
 800c650:	4638      	mov	r0, r7
 800c652:	f7ff fd95 	bl	800c180 <_Balloc>
 800c656:	4605      	mov	r5, r0
 800c658:	b948      	cbnz	r0, 800c66e <__lshift+0x3e>
 800c65a:	4602      	mov	r2, r0
 800c65c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c660:	4b27      	ldr	r3, [pc, #156]	; (800c700 <__lshift+0xd0>)
 800c662:	4828      	ldr	r0, [pc, #160]	; (800c704 <__lshift+0xd4>)
 800c664:	f7ff f9dc 	bl	800ba20 <__assert_func>
 800c668:	3101      	adds	r1, #1
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	e7ee      	b.n	800c64c <__lshift+0x1c>
 800c66e:	2300      	movs	r3, #0
 800c670:	f100 0114 	add.w	r1, r0, #20
 800c674:	f100 0210 	add.w	r2, r0, #16
 800c678:	4618      	mov	r0, r3
 800c67a:	4553      	cmp	r3, sl
 800c67c:	db33      	blt.n	800c6e6 <__lshift+0xb6>
 800c67e:	6920      	ldr	r0, [r4, #16]
 800c680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c684:	f104 0314 	add.w	r3, r4, #20
 800c688:	f019 091f 	ands.w	r9, r9, #31
 800c68c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c690:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c694:	d02b      	beq.n	800c6ee <__lshift+0xbe>
 800c696:	468a      	mov	sl, r1
 800c698:	2200      	movs	r2, #0
 800c69a:	f1c9 0e20 	rsb	lr, r9, #32
 800c69e:	6818      	ldr	r0, [r3, #0]
 800c6a0:	fa00 f009 	lsl.w	r0, r0, r9
 800c6a4:	4302      	orrs	r2, r0
 800c6a6:	f84a 2b04 	str.w	r2, [sl], #4
 800c6aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ae:	459c      	cmp	ip, r3
 800c6b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c6b4:	d8f3      	bhi.n	800c69e <__lshift+0x6e>
 800c6b6:	ebac 0304 	sub.w	r3, ip, r4
 800c6ba:	3b15      	subs	r3, #21
 800c6bc:	f023 0303 	bic.w	r3, r3, #3
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	f104 0015 	add.w	r0, r4, #21
 800c6c6:	4584      	cmp	ip, r0
 800c6c8:	bf38      	it	cc
 800c6ca:	2304      	movcc	r3, #4
 800c6cc:	50ca      	str	r2, [r1, r3]
 800c6ce:	b10a      	cbz	r2, 800c6d4 <__lshift+0xa4>
 800c6d0:	f108 0602 	add.w	r6, r8, #2
 800c6d4:	3e01      	subs	r6, #1
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	4621      	mov	r1, r4
 800c6da:	612e      	str	r6, [r5, #16]
 800c6dc:	f7ff fd90 	bl	800c200 <_Bfree>
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	e7c5      	b.n	800c67a <__lshift+0x4a>
 800c6ee:	3904      	subs	r1, #4
 800c6f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6f4:	459c      	cmp	ip, r3
 800c6f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6fa:	d8f9      	bhi.n	800c6f0 <__lshift+0xc0>
 800c6fc:	e7ea      	b.n	800c6d4 <__lshift+0xa4>
 800c6fe:	bf00      	nop
 800c700:	0800dca4 	.word	0x0800dca4
 800c704:	0800dd34 	.word	0x0800dd34

0800c708 <__mcmp>:
 800c708:	4603      	mov	r3, r0
 800c70a:	690a      	ldr	r2, [r1, #16]
 800c70c:	6900      	ldr	r0, [r0, #16]
 800c70e:	b530      	push	{r4, r5, lr}
 800c710:	1a80      	subs	r0, r0, r2
 800c712:	d10d      	bne.n	800c730 <__mcmp+0x28>
 800c714:	3314      	adds	r3, #20
 800c716:	3114      	adds	r1, #20
 800c718:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c71c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c720:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c724:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c728:	4295      	cmp	r5, r2
 800c72a:	d002      	beq.n	800c732 <__mcmp+0x2a>
 800c72c:	d304      	bcc.n	800c738 <__mcmp+0x30>
 800c72e:	2001      	movs	r0, #1
 800c730:	bd30      	pop	{r4, r5, pc}
 800c732:	42a3      	cmp	r3, r4
 800c734:	d3f4      	bcc.n	800c720 <__mcmp+0x18>
 800c736:	e7fb      	b.n	800c730 <__mcmp+0x28>
 800c738:	f04f 30ff 	mov.w	r0, #4294967295
 800c73c:	e7f8      	b.n	800c730 <__mcmp+0x28>
	...

0800c740 <__mdiff>:
 800c740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	460c      	mov	r4, r1
 800c746:	4606      	mov	r6, r0
 800c748:	4611      	mov	r1, r2
 800c74a:	4620      	mov	r0, r4
 800c74c:	4692      	mov	sl, r2
 800c74e:	f7ff ffdb 	bl	800c708 <__mcmp>
 800c752:	1e05      	subs	r5, r0, #0
 800c754:	d111      	bne.n	800c77a <__mdiff+0x3a>
 800c756:	4629      	mov	r1, r5
 800c758:	4630      	mov	r0, r6
 800c75a:	f7ff fd11 	bl	800c180 <_Balloc>
 800c75e:	4602      	mov	r2, r0
 800c760:	b928      	cbnz	r0, 800c76e <__mdiff+0x2e>
 800c762:	f240 2132 	movw	r1, #562	; 0x232
 800c766:	4b3c      	ldr	r3, [pc, #240]	; (800c858 <__mdiff+0x118>)
 800c768:	483c      	ldr	r0, [pc, #240]	; (800c85c <__mdiff+0x11c>)
 800c76a:	f7ff f959 	bl	800ba20 <__assert_func>
 800c76e:	2301      	movs	r3, #1
 800c770:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c774:	4610      	mov	r0, r2
 800c776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77a:	bfa4      	itt	ge
 800c77c:	4653      	movge	r3, sl
 800c77e:	46a2      	movge	sl, r4
 800c780:	4630      	mov	r0, r6
 800c782:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c786:	bfa6      	itte	ge
 800c788:	461c      	movge	r4, r3
 800c78a:	2500      	movge	r5, #0
 800c78c:	2501      	movlt	r5, #1
 800c78e:	f7ff fcf7 	bl	800c180 <_Balloc>
 800c792:	4602      	mov	r2, r0
 800c794:	b918      	cbnz	r0, 800c79e <__mdiff+0x5e>
 800c796:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c79a:	4b2f      	ldr	r3, [pc, #188]	; (800c858 <__mdiff+0x118>)
 800c79c:	e7e4      	b.n	800c768 <__mdiff+0x28>
 800c79e:	f100 0814 	add.w	r8, r0, #20
 800c7a2:	f8da 7010 	ldr.w	r7, [sl, #16]
 800c7a6:	60c5      	str	r5, [r0, #12]
 800c7a8:	f04f 0c00 	mov.w	ip, #0
 800c7ac:	f10a 0514 	add.w	r5, sl, #20
 800c7b0:	f10a 0010 	add.w	r0, sl, #16
 800c7b4:	46c2      	mov	sl, r8
 800c7b6:	6926      	ldr	r6, [r4, #16]
 800c7b8:	f104 0914 	add.w	r9, r4, #20
 800c7bc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800c7c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c7c4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800c7c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c7cc:	fa1f f18b 	uxth.w	r1, fp
 800c7d0:	4461      	add	r1, ip
 800c7d2:	fa1f fc83 	uxth.w	ip, r3
 800c7d6:	0c1b      	lsrs	r3, r3, #16
 800c7d8:	eba1 010c 	sub.w	r1, r1, ip
 800c7dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c7e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c7e4:	b289      	uxth	r1, r1
 800c7e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c7ea:	454e      	cmp	r6, r9
 800c7ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c7f0:	f84a 3b04 	str.w	r3, [sl], #4
 800c7f4:	d8e6      	bhi.n	800c7c4 <__mdiff+0x84>
 800c7f6:	1b33      	subs	r3, r6, r4
 800c7f8:	3b15      	subs	r3, #21
 800c7fa:	f023 0303 	bic.w	r3, r3, #3
 800c7fe:	3415      	adds	r4, #21
 800c800:	3304      	adds	r3, #4
 800c802:	42a6      	cmp	r6, r4
 800c804:	bf38      	it	cc
 800c806:	2304      	movcc	r3, #4
 800c808:	441d      	add	r5, r3
 800c80a:	4443      	add	r3, r8
 800c80c:	461e      	mov	r6, r3
 800c80e:	462c      	mov	r4, r5
 800c810:	4574      	cmp	r4, lr
 800c812:	d30e      	bcc.n	800c832 <__mdiff+0xf2>
 800c814:	f10e 0103 	add.w	r1, lr, #3
 800c818:	1b49      	subs	r1, r1, r5
 800c81a:	f021 0103 	bic.w	r1, r1, #3
 800c81e:	3d03      	subs	r5, #3
 800c820:	45ae      	cmp	lr, r5
 800c822:	bf38      	it	cc
 800c824:	2100      	movcc	r1, #0
 800c826:	4419      	add	r1, r3
 800c828:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c82c:	b18b      	cbz	r3, 800c852 <__mdiff+0x112>
 800c82e:	6117      	str	r7, [r2, #16]
 800c830:	e7a0      	b.n	800c774 <__mdiff+0x34>
 800c832:	f854 8b04 	ldr.w	r8, [r4], #4
 800c836:	fa1f f188 	uxth.w	r1, r8
 800c83a:	4461      	add	r1, ip
 800c83c:	1408      	asrs	r0, r1, #16
 800c83e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800c842:	b289      	uxth	r1, r1
 800c844:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c848:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c84c:	f846 1b04 	str.w	r1, [r6], #4
 800c850:	e7de      	b.n	800c810 <__mdiff+0xd0>
 800c852:	3f01      	subs	r7, #1
 800c854:	e7e8      	b.n	800c828 <__mdiff+0xe8>
 800c856:	bf00      	nop
 800c858:	0800dca4 	.word	0x0800dca4
 800c85c:	0800dd34 	.word	0x0800dd34

0800c860 <__ulp>:
 800c860:	4b11      	ldr	r3, [pc, #68]	; (800c8a8 <__ulp+0x48>)
 800c862:	400b      	ands	r3, r1
 800c864:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	dd02      	ble.n	800c872 <__ulp+0x12>
 800c86c:	2000      	movs	r0, #0
 800c86e:	4619      	mov	r1, r3
 800c870:	4770      	bx	lr
 800c872:	425b      	negs	r3, r3
 800c874:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c878:	f04f 0000 	mov.w	r0, #0
 800c87c:	f04f 0100 	mov.w	r1, #0
 800c880:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c884:	da04      	bge.n	800c890 <__ulp+0x30>
 800c886:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c88a:	fa43 f102 	asr.w	r1, r3, r2
 800c88e:	4770      	bx	lr
 800c890:	f1a2 0314 	sub.w	r3, r2, #20
 800c894:	2b1e      	cmp	r3, #30
 800c896:	bfd6      	itet	le
 800c898:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c89c:	2301      	movgt	r3, #1
 800c89e:	fa22 f303 	lsrle.w	r3, r2, r3
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	7ff00000 	.word	0x7ff00000

0800c8ac <__b2d>:
 800c8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8b0:	6907      	ldr	r7, [r0, #16]
 800c8b2:	f100 0914 	add.w	r9, r0, #20
 800c8b6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c8ba:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c8be:	f1a7 0804 	sub.w	r8, r7, #4
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7ff fd52 	bl	800c36c <__hi0bits>
 800c8c8:	f1c0 0320 	rsb	r3, r0, #32
 800c8cc:	280a      	cmp	r0, #10
 800c8ce:	600b      	str	r3, [r1, #0]
 800c8d0:	491f      	ldr	r1, [pc, #124]	; (800c950 <__b2d+0xa4>)
 800c8d2:	dc17      	bgt.n	800c904 <__b2d+0x58>
 800c8d4:	45c1      	cmp	r9, r8
 800c8d6:	bf28      	it	cs
 800c8d8:	2200      	movcs	r2, #0
 800c8da:	f1c0 0c0b 	rsb	ip, r0, #11
 800c8de:	fa26 f30c 	lsr.w	r3, r6, ip
 800c8e2:	bf38      	it	cc
 800c8e4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c8e8:	ea43 0501 	orr.w	r5, r3, r1
 800c8ec:	f100 0315 	add.w	r3, r0, #21
 800c8f0:	fa06 f303 	lsl.w	r3, r6, r3
 800c8f4:	fa22 f20c 	lsr.w	r2, r2, ip
 800c8f8:	ea43 0402 	orr.w	r4, r3, r2
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	4629      	mov	r1, r5
 800c900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c904:	45c1      	cmp	r9, r8
 800c906:	bf2e      	itee	cs
 800c908:	2200      	movcs	r2, #0
 800c90a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c90e:	f1a7 0808 	subcc.w	r8, r7, #8
 800c912:	f1b0 030b 	subs.w	r3, r0, #11
 800c916:	d016      	beq.n	800c946 <__b2d+0x9a>
 800c918:	f1c3 0720 	rsb	r7, r3, #32
 800c91c:	fa22 f107 	lsr.w	r1, r2, r7
 800c920:	45c8      	cmp	r8, r9
 800c922:	fa06 f603 	lsl.w	r6, r6, r3
 800c926:	ea46 0601 	orr.w	r6, r6, r1
 800c92a:	bf94      	ite	ls
 800c92c:	2100      	movls	r1, #0
 800c92e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c932:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c936:	fa02 f003 	lsl.w	r0, r2, r3
 800c93a:	40f9      	lsrs	r1, r7
 800c93c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c940:	ea40 0401 	orr.w	r4, r0, r1
 800c944:	e7da      	b.n	800c8fc <__b2d+0x50>
 800c946:	4614      	mov	r4, r2
 800c948:	ea46 0501 	orr.w	r5, r6, r1
 800c94c:	e7d6      	b.n	800c8fc <__b2d+0x50>
 800c94e:	bf00      	nop
 800c950:	3ff00000 	.word	0x3ff00000

0800c954 <__d2b>:
 800c954:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c958:	2101      	movs	r1, #1
 800c95a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c95e:	4690      	mov	r8, r2
 800c960:	461d      	mov	r5, r3
 800c962:	f7ff fc0d 	bl	800c180 <_Balloc>
 800c966:	4604      	mov	r4, r0
 800c968:	b930      	cbnz	r0, 800c978 <__d2b+0x24>
 800c96a:	4602      	mov	r2, r0
 800c96c:	f240 310a 	movw	r1, #778	; 0x30a
 800c970:	4b24      	ldr	r3, [pc, #144]	; (800ca04 <__d2b+0xb0>)
 800c972:	4825      	ldr	r0, [pc, #148]	; (800ca08 <__d2b+0xb4>)
 800c974:	f7ff f854 	bl	800ba20 <__assert_func>
 800c978:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c97c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c980:	bb2d      	cbnz	r5, 800c9ce <__d2b+0x7a>
 800c982:	9301      	str	r3, [sp, #4]
 800c984:	f1b8 0300 	subs.w	r3, r8, #0
 800c988:	d026      	beq.n	800c9d8 <__d2b+0x84>
 800c98a:	4668      	mov	r0, sp
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	f7ff fd0d 	bl	800c3ac <__lo0bits>
 800c992:	9900      	ldr	r1, [sp, #0]
 800c994:	b1f0      	cbz	r0, 800c9d4 <__d2b+0x80>
 800c996:	9a01      	ldr	r2, [sp, #4]
 800c998:	f1c0 0320 	rsb	r3, r0, #32
 800c99c:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a0:	430b      	orrs	r3, r1
 800c9a2:	40c2      	lsrs	r2, r0
 800c9a4:	6163      	str	r3, [r4, #20]
 800c9a6:	9201      	str	r2, [sp, #4]
 800c9a8:	9b01      	ldr	r3, [sp, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	bf14      	ite	ne
 800c9ae:	2102      	movne	r1, #2
 800c9b0:	2101      	moveq	r1, #1
 800c9b2:	61a3      	str	r3, [r4, #24]
 800c9b4:	6121      	str	r1, [r4, #16]
 800c9b6:	b1c5      	cbz	r5, 800c9ea <__d2b+0x96>
 800c9b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c9bc:	4405      	add	r5, r0
 800c9be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c9c2:	603d      	str	r5, [r7, #0]
 800c9c4:	6030      	str	r0, [r6, #0]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	b002      	add	sp, #8
 800c9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9d2:	e7d6      	b.n	800c982 <__d2b+0x2e>
 800c9d4:	6161      	str	r1, [r4, #20]
 800c9d6:	e7e7      	b.n	800c9a8 <__d2b+0x54>
 800c9d8:	a801      	add	r0, sp, #4
 800c9da:	f7ff fce7 	bl	800c3ac <__lo0bits>
 800c9de:	2101      	movs	r1, #1
 800c9e0:	9b01      	ldr	r3, [sp, #4]
 800c9e2:	6121      	str	r1, [r4, #16]
 800c9e4:	6163      	str	r3, [r4, #20]
 800c9e6:	3020      	adds	r0, #32
 800c9e8:	e7e5      	b.n	800c9b6 <__d2b+0x62>
 800c9ea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c9ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9f2:	6038      	str	r0, [r7, #0]
 800c9f4:	6918      	ldr	r0, [r3, #16]
 800c9f6:	f7ff fcb9 	bl	800c36c <__hi0bits>
 800c9fa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c9fe:	6031      	str	r1, [r6, #0]
 800ca00:	e7e1      	b.n	800c9c6 <__d2b+0x72>
 800ca02:	bf00      	nop
 800ca04:	0800dca4 	.word	0x0800dca4
 800ca08:	0800dd34 	.word	0x0800dd34

0800ca0c <__ratio>:
 800ca0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca10:	4688      	mov	r8, r1
 800ca12:	4669      	mov	r1, sp
 800ca14:	4681      	mov	r9, r0
 800ca16:	f7ff ff49 	bl	800c8ac <__b2d>
 800ca1a:	460f      	mov	r7, r1
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	460d      	mov	r5, r1
 800ca20:	4640      	mov	r0, r8
 800ca22:	a901      	add	r1, sp, #4
 800ca24:	f7ff ff42 	bl	800c8ac <__b2d>
 800ca28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca2c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ca30:	468b      	mov	fp, r1
 800ca32:	eba3 0c02 	sub.w	ip, r3, r2
 800ca36:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ca3a:	1a9b      	subs	r3, r3, r2
 800ca3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	bfd5      	itete	le
 800ca44:	460a      	movle	r2, r1
 800ca46:	462a      	movgt	r2, r5
 800ca48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ca4c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ca50:	bfd8      	it	le
 800ca52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ca56:	465b      	mov	r3, fp
 800ca58:	4602      	mov	r2, r0
 800ca5a:	4639      	mov	r1, r7
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f7f3 fe87 	bl	8000770 <__aeabi_ddiv>
 800ca62:	b003      	add	sp, #12
 800ca64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca68 <__copybits>:
 800ca68:	3901      	subs	r1, #1
 800ca6a:	b570      	push	{r4, r5, r6, lr}
 800ca6c:	1149      	asrs	r1, r1, #5
 800ca6e:	6914      	ldr	r4, [r2, #16]
 800ca70:	3101      	adds	r1, #1
 800ca72:	f102 0314 	add.w	r3, r2, #20
 800ca76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca7e:	1f05      	subs	r5, r0, #4
 800ca80:	42a3      	cmp	r3, r4
 800ca82:	d30c      	bcc.n	800ca9e <__copybits+0x36>
 800ca84:	1aa3      	subs	r3, r4, r2
 800ca86:	3b11      	subs	r3, #17
 800ca88:	f023 0303 	bic.w	r3, r3, #3
 800ca8c:	3211      	adds	r2, #17
 800ca8e:	42a2      	cmp	r2, r4
 800ca90:	bf88      	it	hi
 800ca92:	2300      	movhi	r3, #0
 800ca94:	4418      	add	r0, r3
 800ca96:	2300      	movs	r3, #0
 800ca98:	4288      	cmp	r0, r1
 800ca9a:	d305      	bcc.n	800caa8 <__copybits+0x40>
 800ca9c:	bd70      	pop	{r4, r5, r6, pc}
 800ca9e:	f853 6b04 	ldr.w	r6, [r3], #4
 800caa2:	f845 6f04 	str.w	r6, [r5, #4]!
 800caa6:	e7eb      	b.n	800ca80 <__copybits+0x18>
 800caa8:	f840 3b04 	str.w	r3, [r0], #4
 800caac:	e7f4      	b.n	800ca98 <__copybits+0x30>

0800caae <__any_on>:
 800caae:	f100 0214 	add.w	r2, r0, #20
 800cab2:	6900      	ldr	r0, [r0, #16]
 800cab4:	114b      	asrs	r3, r1, #5
 800cab6:	4298      	cmp	r0, r3
 800cab8:	b510      	push	{r4, lr}
 800caba:	db11      	blt.n	800cae0 <__any_on+0x32>
 800cabc:	dd0a      	ble.n	800cad4 <__any_on+0x26>
 800cabe:	f011 011f 	ands.w	r1, r1, #31
 800cac2:	d007      	beq.n	800cad4 <__any_on+0x26>
 800cac4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cac8:	fa24 f001 	lsr.w	r0, r4, r1
 800cacc:	fa00 f101 	lsl.w	r1, r0, r1
 800cad0:	428c      	cmp	r4, r1
 800cad2:	d10b      	bne.n	800caec <__any_on+0x3e>
 800cad4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cad8:	4293      	cmp	r3, r2
 800cada:	d803      	bhi.n	800cae4 <__any_on+0x36>
 800cadc:	2000      	movs	r0, #0
 800cade:	bd10      	pop	{r4, pc}
 800cae0:	4603      	mov	r3, r0
 800cae2:	e7f7      	b.n	800cad4 <__any_on+0x26>
 800cae4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cae8:	2900      	cmp	r1, #0
 800caea:	d0f5      	beq.n	800cad8 <__any_on+0x2a>
 800caec:	2001      	movs	r0, #1
 800caee:	e7f6      	b.n	800cade <__any_on+0x30>

0800caf0 <_calloc_r>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	fb02 f501 	mul.w	r5, r2, r1
 800caf6:	4629      	mov	r1, r5
 800caf8:	f000 f854 	bl	800cba4 <_malloc_r>
 800cafc:	4604      	mov	r4, r0
 800cafe:	b118      	cbz	r0, 800cb08 <_calloc_r+0x18>
 800cb00:	462a      	mov	r2, r5
 800cb02:	2100      	movs	r1, #0
 800cb04:	f7fe f8fc 	bl	800ad00 <memset>
 800cb08:	4620      	mov	r0, r4
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}

0800cb0c <_free_r>:
 800cb0c:	b538      	push	{r3, r4, r5, lr}
 800cb0e:	4605      	mov	r5, r0
 800cb10:	2900      	cmp	r1, #0
 800cb12:	d043      	beq.n	800cb9c <_free_r+0x90>
 800cb14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb18:	1f0c      	subs	r4, r1, #4
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	bfb8      	it	lt
 800cb1e:	18e4      	addlt	r4, r4, r3
 800cb20:	f000 feb2 	bl	800d888 <__malloc_lock>
 800cb24:	4a1e      	ldr	r2, [pc, #120]	; (800cba0 <_free_r+0x94>)
 800cb26:	6813      	ldr	r3, [r2, #0]
 800cb28:	4610      	mov	r0, r2
 800cb2a:	b933      	cbnz	r3, 800cb3a <_free_r+0x2e>
 800cb2c:	6063      	str	r3, [r4, #4]
 800cb2e:	6014      	str	r4, [r2, #0]
 800cb30:	4628      	mov	r0, r5
 800cb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb36:	f000 bead 	b.w	800d894 <__malloc_unlock>
 800cb3a:	42a3      	cmp	r3, r4
 800cb3c:	d90a      	bls.n	800cb54 <_free_r+0x48>
 800cb3e:	6821      	ldr	r1, [r4, #0]
 800cb40:	1862      	adds	r2, r4, r1
 800cb42:	4293      	cmp	r3, r2
 800cb44:	bf01      	itttt	eq
 800cb46:	681a      	ldreq	r2, [r3, #0]
 800cb48:	685b      	ldreq	r3, [r3, #4]
 800cb4a:	1852      	addeq	r2, r2, r1
 800cb4c:	6022      	streq	r2, [r4, #0]
 800cb4e:	6063      	str	r3, [r4, #4]
 800cb50:	6004      	str	r4, [r0, #0]
 800cb52:	e7ed      	b.n	800cb30 <_free_r+0x24>
 800cb54:	461a      	mov	r2, r3
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	b10b      	cbz	r3, 800cb5e <_free_r+0x52>
 800cb5a:	42a3      	cmp	r3, r4
 800cb5c:	d9fa      	bls.n	800cb54 <_free_r+0x48>
 800cb5e:	6811      	ldr	r1, [r2, #0]
 800cb60:	1850      	adds	r0, r2, r1
 800cb62:	42a0      	cmp	r0, r4
 800cb64:	d10b      	bne.n	800cb7e <_free_r+0x72>
 800cb66:	6820      	ldr	r0, [r4, #0]
 800cb68:	4401      	add	r1, r0
 800cb6a:	1850      	adds	r0, r2, r1
 800cb6c:	4283      	cmp	r3, r0
 800cb6e:	6011      	str	r1, [r2, #0]
 800cb70:	d1de      	bne.n	800cb30 <_free_r+0x24>
 800cb72:	6818      	ldr	r0, [r3, #0]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	4401      	add	r1, r0
 800cb78:	6011      	str	r1, [r2, #0]
 800cb7a:	6053      	str	r3, [r2, #4]
 800cb7c:	e7d8      	b.n	800cb30 <_free_r+0x24>
 800cb7e:	d902      	bls.n	800cb86 <_free_r+0x7a>
 800cb80:	230c      	movs	r3, #12
 800cb82:	602b      	str	r3, [r5, #0]
 800cb84:	e7d4      	b.n	800cb30 <_free_r+0x24>
 800cb86:	6820      	ldr	r0, [r4, #0]
 800cb88:	1821      	adds	r1, r4, r0
 800cb8a:	428b      	cmp	r3, r1
 800cb8c:	bf01      	itttt	eq
 800cb8e:	6819      	ldreq	r1, [r3, #0]
 800cb90:	685b      	ldreq	r3, [r3, #4]
 800cb92:	1809      	addeq	r1, r1, r0
 800cb94:	6021      	streq	r1, [r4, #0]
 800cb96:	6063      	str	r3, [r4, #4]
 800cb98:	6054      	str	r4, [r2, #4]
 800cb9a:	e7c9      	b.n	800cb30 <_free_r+0x24>
 800cb9c:	bd38      	pop	{r3, r4, r5, pc}
 800cb9e:	bf00      	nop
 800cba0:	20000860 	.word	0x20000860

0800cba4 <_malloc_r>:
 800cba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba6:	1ccd      	adds	r5, r1, #3
 800cba8:	f025 0503 	bic.w	r5, r5, #3
 800cbac:	3508      	adds	r5, #8
 800cbae:	2d0c      	cmp	r5, #12
 800cbb0:	bf38      	it	cc
 800cbb2:	250c      	movcc	r5, #12
 800cbb4:	2d00      	cmp	r5, #0
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	db01      	blt.n	800cbbe <_malloc_r+0x1a>
 800cbba:	42a9      	cmp	r1, r5
 800cbbc:	d903      	bls.n	800cbc6 <_malloc_r+0x22>
 800cbbe:	230c      	movs	r3, #12
 800cbc0:	6033      	str	r3, [r6, #0]
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbc6:	f000 fe5f 	bl	800d888 <__malloc_lock>
 800cbca:	4921      	ldr	r1, [pc, #132]	; (800cc50 <_malloc_r+0xac>)
 800cbcc:	680a      	ldr	r2, [r1, #0]
 800cbce:	4614      	mov	r4, r2
 800cbd0:	b99c      	cbnz	r4, 800cbfa <_malloc_r+0x56>
 800cbd2:	4f20      	ldr	r7, [pc, #128]	; (800cc54 <_malloc_r+0xb0>)
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	b923      	cbnz	r3, 800cbe2 <_malloc_r+0x3e>
 800cbd8:	4621      	mov	r1, r4
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f000 fb30 	bl	800d240 <_sbrk_r>
 800cbe0:	6038      	str	r0, [r7, #0]
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	f000 fb2b 	bl	800d240 <_sbrk_r>
 800cbea:	1c43      	adds	r3, r0, #1
 800cbec:	d123      	bne.n	800cc36 <_malloc_r+0x92>
 800cbee:	230c      	movs	r3, #12
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	6033      	str	r3, [r6, #0]
 800cbf4:	f000 fe4e 	bl	800d894 <__malloc_unlock>
 800cbf8:	e7e3      	b.n	800cbc2 <_malloc_r+0x1e>
 800cbfa:	6823      	ldr	r3, [r4, #0]
 800cbfc:	1b5b      	subs	r3, r3, r5
 800cbfe:	d417      	bmi.n	800cc30 <_malloc_r+0x8c>
 800cc00:	2b0b      	cmp	r3, #11
 800cc02:	d903      	bls.n	800cc0c <_malloc_r+0x68>
 800cc04:	6023      	str	r3, [r4, #0]
 800cc06:	441c      	add	r4, r3
 800cc08:	6025      	str	r5, [r4, #0]
 800cc0a:	e004      	b.n	800cc16 <_malloc_r+0x72>
 800cc0c:	6863      	ldr	r3, [r4, #4]
 800cc0e:	42a2      	cmp	r2, r4
 800cc10:	bf0c      	ite	eq
 800cc12:	600b      	streq	r3, [r1, #0]
 800cc14:	6053      	strne	r3, [r2, #4]
 800cc16:	4630      	mov	r0, r6
 800cc18:	f000 fe3c 	bl	800d894 <__malloc_unlock>
 800cc1c:	f104 000b 	add.w	r0, r4, #11
 800cc20:	1d23      	adds	r3, r4, #4
 800cc22:	f020 0007 	bic.w	r0, r0, #7
 800cc26:	1ac2      	subs	r2, r0, r3
 800cc28:	d0cc      	beq.n	800cbc4 <_malloc_r+0x20>
 800cc2a:	1a1b      	subs	r3, r3, r0
 800cc2c:	50a3      	str	r3, [r4, r2]
 800cc2e:	e7c9      	b.n	800cbc4 <_malloc_r+0x20>
 800cc30:	4622      	mov	r2, r4
 800cc32:	6864      	ldr	r4, [r4, #4]
 800cc34:	e7cc      	b.n	800cbd0 <_malloc_r+0x2c>
 800cc36:	1cc4      	adds	r4, r0, #3
 800cc38:	f024 0403 	bic.w	r4, r4, #3
 800cc3c:	42a0      	cmp	r0, r4
 800cc3e:	d0e3      	beq.n	800cc08 <_malloc_r+0x64>
 800cc40:	1a21      	subs	r1, r4, r0
 800cc42:	4630      	mov	r0, r6
 800cc44:	f000 fafc 	bl	800d240 <_sbrk_r>
 800cc48:	3001      	adds	r0, #1
 800cc4a:	d1dd      	bne.n	800cc08 <_malloc_r+0x64>
 800cc4c:	e7cf      	b.n	800cbee <_malloc_r+0x4a>
 800cc4e:	bf00      	nop
 800cc50:	20000860 	.word	0x20000860
 800cc54:	20000864 	.word	0x20000864

0800cc58 <__sfputc_r>:
 800cc58:	6893      	ldr	r3, [r2, #8]
 800cc5a:	b410      	push	{r4}
 800cc5c:	3b01      	subs	r3, #1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	6093      	str	r3, [r2, #8]
 800cc62:	da07      	bge.n	800cc74 <__sfputc_r+0x1c>
 800cc64:	6994      	ldr	r4, [r2, #24]
 800cc66:	42a3      	cmp	r3, r4
 800cc68:	db01      	blt.n	800cc6e <__sfputc_r+0x16>
 800cc6a:	290a      	cmp	r1, #10
 800cc6c:	d102      	bne.n	800cc74 <__sfputc_r+0x1c>
 800cc6e:	bc10      	pop	{r4}
 800cc70:	f000 bb08 	b.w	800d284 <__swbuf_r>
 800cc74:	6813      	ldr	r3, [r2, #0]
 800cc76:	1c58      	adds	r0, r3, #1
 800cc78:	6010      	str	r0, [r2, #0]
 800cc7a:	7019      	strb	r1, [r3, #0]
 800cc7c:	4608      	mov	r0, r1
 800cc7e:	bc10      	pop	{r4}
 800cc80:	4770      	bx	lr

0800cc82 <__sfputs_r>:
 800cc82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc84:	4606      	mov	r6, r0
 800cc86:	460f      	mov	r7, r1
 800cc88:	4614      	mov	r4, r2
 800cc8a:	18d5      	adds	r5, r2, r3
 800cc8c:	42ac      	cmp	r4, r5
 800cc8e:	d101      	bne.n	800cc94 <__sfputs_r+0x12>
 800cc90:	2000      	movs	r0, #0
 800cc92:	e007      	b.n	800cca4 <__sfputs_r+0x22>
 800cc94:	463a      	mov	r2, r7
 800cc96:	4630      	mov	r0, r6
 800cc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc9c:	f7ff ffdc 	bl	800cc58 <__sfputc_r>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d1f3      	bne.n	800cc8c <__sfputs_r+0xa>
 800cca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cca8 <_vfiprintf_r>:
 800cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccac:	460d      	mov	r5, r1
 800ccae:	4614      	mov	r4, r2
 800ccb0:	4698      	mov	r8, r3
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	b09d      	sub	sp, #116	; 0x74
 800ccb6:	b118      	cbz	r0, 800ccc0 <_vfiprintf_r+0x18>
 800ccb8:	6983      	ldr	r3, [r0, #24]
 800ccba:	b90b      	cbnz	r3, 800ccc0 <_vfiprintf_r+0x18>
 800ccbc:	f000 fcd2 	bl	800d664 <__sinit>
 800ccc0:	4b89      	ldr	r3, [pc, #548]	; (800cee8 <_vfiprintf_r+0x240>)
 800ccc2:	429d      	cmp	r5, r3
 800ccc4:	d11b      	bne.n	800ccfe <_vfiprintf_r+0x56>
 800ccc6:	6875      	ldr	r5, [r6, #4]
 800ccc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccca:	07d9      	lsls	r1, r3, #31
 800cccc:	d405      	bmi.n	800ccda <_vfiprintf_r+0x32>
 800ccce:	89ab      	ldrh	r3, [r5, #12]
 800ccd0:	059a      	lsls	r2, r3, #22
 800ccd2:	d402      	bmi.n	800ccda <_vfiprintf_r+0x32>
 800ccd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccd6:	f000 fd63 	bl	800d7a0 <__retarget_lock_acquire_recursive>
 800ccda:	89ab      	ldrh	r3, [r5, #12]
 800ccdc:	071b      	lsls	r3, r3, #28
 800ccde:	d501      	bpl.n	800cce4 <_vfiprintf_r+0x3c>
 800cce0:	692b      	ldr	r3, [r5, #16]
 800cce2:	b9eb      	cbnz	r3, 800cd20 <_vfiprintf_r+0x78>
 800cce4:	4629      	mov	r1, r5
 800cce6:	4630      	mov	r0, r6
 800cce8:	f000 fb2c 	bl	800d344 <__swsetup_r>
 800ccec:	b1c0      	cbz	r0, 800cd20 <_vfiprintf_r+0x78>
 800ccee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccf0:	07dc      	lsls	r4, r3, #31
 800ccf2:	d50e      	bpl.n	800cd12 <_vfiprintf_r+0x6a>
 800ccf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf8:	b01d      	add	sp, #116	; 0x74
 800ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfe:	4b7b      	ldr	r3, [pc, #492]	; (800ceec <_vfiprintf_r+0x244>)
 800cd00:	429d      	cmp	r5, r3
 800cd02:	d101      	bne.n	800cd08 <_vfiprintf_r+0x60>
 800cd04:	68b5      	ldr	r5, [r6, #8]
 800cd06:	e7df      	b.n	800ccc8 <_vfiprintf_r+0x20>
 800cd08:	4b79      	ldr	r3, [pc, #484]	; (800cef0 <_vfiprintf_r+0x248>)
 800cd0a:	429d      	cmp	r5, r3
 800cd0c:	bf08      	it	eq
 800cd0e:	68f5      	ldreq	r5, [r6, #12]
 800cd10:	e7da      	b.n	800ccc8 <_vfiprintf_r+0x20>
 800cd12:	89ab      	ldrh	r3, [r5, #12]
 800cd14:	0598      	lsls	r0, r3, #22
 800cd16:	d4ed      	bmi.n	800ccf4 <_vfiprintf_r+0x4c>
 800cd18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd1a:	f000 fd42 	bl	800d7a2 <__retarget_lock_release_recursive>
 800cd1e:	e7e9      	b.n	800ccf4 <_vfiprintf_r+0x4c>
 800cd20:	2300      	movs	r3, #0
 800cd22:	9309      	str	r3, [sp, #36]	; 0x24
 800cd24:	2320      	movs	r3, #32
 800cd26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd2a:	2330      	movs	r3, #48	; 0x30
 800cd2c:	f04f 0901 	mov.w	r9, #1
 800cd30:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd34:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cef4 <_vfiprintf_r+0x24c>
 800cd38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd3c:	4623      	mov	r3, r4
 800cd3e:	469a      	mov	sl, r3
 800cd40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd44:	b10a      	cbz	r2, 800cd4a <_vfiprintf_r+0xa2>
 800cd46:	2a25      	cmp	r2, #37	; 0x25
 800cd48:	d1f9      	bne.n	800cd3e <_vfiprintf_r+0x96>
 800cd4a:	ebba 0b04 	subs.w	fp, sl, r4
 800cd4e:	d00b      	beq.n	800cd68 <_vfiprintf_r+0xc0>
 800cd50:	465b      	mov	r3, fp
 800cd52:	4622      	mov	r2, r4
 800cd54:	4629      	mov	r1, r5
 800cd56:	4630      	mov	r0, r6
 800cd58:	f7ff ff93 	bl	800cc82 <__sfputs_r>
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	f000 80aa 	beq.w	800ceb6 <_vfiprintf_r+0x20e>
 800cd62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd64:	445a      	add	r2, fp
 800cd66:	9209      	str	r2, [sp, #36]	; 0x24
 800cd68:	f89a 3000 	ldrb.w	r3, [sl]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f000 80a2 	beq.w	800ceb6 <_vfiprintf_r+0x20e>
 800cd72:	2300      	movs	r3, #0
 800cd74:	f04f 32ff 	mov.w	r2, #4294967295
 800cd78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd7c:	f10a 0a01 	add.w	sl, sl, #1
 800cd80:	9304      	str	r3, [sp, #16]
 800cd82:	9307      	str	r3, [sp, #28]
 800cd84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd88:	931a      	str	r3, [sp, #104]	; 0x68
 800cd8a:	4654      	mov	r4, sl
 800cd8c:	2205      	movs	r2, #5
 800cd8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd92:	4858      	ldr	r0, [pc, #352]	; (800cef4 <_vfiprintf_r+0x24c>)
 800cd94:	f000 fd6a 	bl	800d86c <memchr>
 800cd98:	9a04      	ldr	r2, [sp, #16]
 800cd9a:	b9d8      	cbnz	r0, 800cdd4 <_vfiprintf_r+0x12c>
 800cd9c:	06d1      	lsls	r1, r2, #27
 800cd9e:	bf44      	itt	mi
 800cda0:	2320      	movmi	r3, #32
 800cda2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cda6:	0713      	lsls	r3, r2, #28
 800cda8:	bf44      	itt	mi
 800cdaa:	232b      	movmi	r3, #43	; 0x2b
 800cdac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdb0:	f89a 3000 	ldrb.w	r3, [sl]
 800cdb4:	2b2a      	cmp	r3, #42	; 0x2a
 800cdb6:	d015      	beq.n	800cde4 <_vfiprintf_r+0x13c>
 800cdb8:	4654      	mov	r4, sl
 800cdba:	2000      	movs	r0, #0
 800cdbc:	f04f 0c0a 	mov.w	ip, #10
 800cdc0:	9a07      	ldr	r2, [sp, #28]
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdc8:	3b30      	subs	r3, #48	; 0x30
 800cdca:	2b09      	cmp	r3, #9
 800cdcc:	d94e      	bls.n	800ce6c <_vfiprintf_r+0x1c4>
 800cdce:	b1b0      	cbz	r0, 800cdfe <_vfiprintf_r+0x156>
 800cdd0:	9207      	str	r2, [sp, #28]
 800cdd2:	e014      	b.n	800cdfe <_vfiprintf_r+0x156>
 800cdd4:	eba0 0308 	sub.w	r3, r0, r8
 800cdd8:	fa09 f303 	lsl.w	r3, r9, r3
 800cddc:	4313      	orrs	r3, r2
 800cdde:	46a2      	mov	sl, r4
 800cde0:	9304      	str	r3, [sp, #16]
 800cde2:	e7d2      	b.n	800cd8a <_vfiprintf_r+0xe2>
 800cde4:	9b03      	ldr	r3, [sp, #12]
 800cde6:	1d19      	adds	r1, r3, #4
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	9103      	str	r1, [sp, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	bfbb      	ittet	lt
 800cdf0:	425b      	neglt	r3, r3
 800cdf2:	f042 0202 	orrlt.w	r2, r2, #2
 800cdf6:	9307      	strge	r3, [sp, #28]
 800cdf8:	9307      	strlt	r3, [sp, #28]
 800cdfa:	bfb8      	it	lt
 800cdfc:	9204      	strlt	r2, [sp, #16]
 800cdfe:	7823      	ldrb	r3, [r4, #0]
 800ce00:	2b2e      	cmp	r3, #46	; 0x2e
 800ce02:	d10c      	bne.n	800ce1e <_vfiprintf_r+0x176>
 800ce04:	7863      	ldrb	r3, [r4, #1]
 800ce06:	2b2a      	cmp	r3, #42	; 0x2a
 800ce08:	d135      	bne.n	800ce76 <_vfiprintf_r+0x1ce>
 800ce0a:	9b03      	ldr	r3, [sp, #12]
 800ce0c:	3402      	adds	r4, #2
 800ce0e:	1d1a      	adds	r2, r3, #4
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	9203      	str	r2, [sp, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	bfb8      	it	lt
 800ce18:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce1c:	9305      	str	r3, [sp, #20]
 800ce1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cf04 <_vfiprintf_r+0x25c>
 800ce22:	2203      	movs	r2, #3
 800ce24:	4650      	mov	r0, sl
 800ce26:	7821      	ldrb	r1, [r4, #0]
 800ce28:	f000 fd20 	bl	800d86c <memchr>
 800ce2c:	b140      	cbz	r0, 800ce40 <_vfiprintf_r+0x198>
 800ce2e:	2340      	movs	r3, #64	; 0x40
 800ce30:	eba0 000a 	sub.w	r0, r0, sl
 800ce34:	fa03 f000 	lsl.w	r0, r3, r0
 800ce38:	9b04      	ldr	r3, [sp, #16]
 800ce3a:	3401      	adds	r4, #1
 800ce3c:	4303      	orrs	r3, r0
 800ce3e:	9304      	str	r3, [sp, #16]
 800ce40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce44:	2206      	movs	r2, #6
 800ce46:	482c      	ldr	r0, [pc, #176]	; (800cef8 <_vfiprintf_r+0x250>)
 800ce48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce4c:	f000 fd0e 	bl	800d86c <memchr>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d03f      	beq.n	800ced4 <_vfiprintf_r+0x22c>
 800ce54:	4b29      	ldr	r3, [pc, #164]	; (800cefc <_vfiprintf_r+0x254>)
 800ce56:	bb1b      	cbnz	r3, 800cea0 <_vfiprintf_r+0x1f8>
 800ce58:	9b03      	ldr	r3, [sp, #12]
 800ce5a:	3307      	adds	r3, #7
 800ce5c:	f023 0307 	bic.w	r3, r3, #7
 800ce60:	3308      	adds	r3, #8
 800ce62:	9303      	str	r3, [sp, #12]
 800ce64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce66:	443b      	add	r3, r7
 800ce68:	9309      	str	r3, [sp, #36]	; 0x24
 800ce6a:	e767      	b.n	800cd3c <_vfiprintf_r+0x94>
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	2001      	movs	r0, #1
 800ce70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce74:	e7a5      	b.n	800cdc2 <_vfiprintf_r+0x11a>
 800ce76:	2300      	movs	r3, #0
 800ce78:	f04f 0c0a 	mov.w	ip, #10
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	3401      	adds	r4, #1
 800ce80:	9305      	str	r3, [sp, #20]
 800ce82:	4620      	mov	r0, r4
 800ce84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce88:	3a30      	subs	r2, #48	; 0x30
 800ce8a:	2a09      	cmp	r2, #9
 800ce8c:	d903      	bls.n	800ce96 <_vfiprintf_r+0x1ee>
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0c5      	beq.n	800ce1e <_vfiprintf_r+0x176>
 800ce92:	9105      	str	r1, [sp, #20]
 800ce94:	e7c3      	b.n	800ce1e <_vfiprintf_r+0x176>
 800ce96:	4604      	mov	r4, r0
 800ce98:	2301      	movs	r3, #1
 800ce9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce9e:	e7f0      	b.n	800ce82 <_vfiprintf_r+0x1da>
 800cea0:	ab03      	add	r3, sp, #12
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	462a      	mov	r2, r5
 800cea6:	4630      	mov	r0, r6
 800cea8:	4b15      	ldr	r3, [pc, #84]	; (800cf00 <_vfiprintf_r+0x258>)
 800ceaa:	a904      	add	r1, sp, #16
 800ceac:	f3af 8000 	nop.w
 800ceb0:	4607      	mov	r7, r0
 800ceb2:	1c78      	adds	r0, r7, #1
 800ceb4:	d1d6      	bne.n	800ce64 <_vfiprintf_r+0x1bc>
 800ceb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ceb8:	07d9      	lsls	r1, r3, #31
 800ceba:	d405      	bmi.n	800cec8 <_vfiprintf_r+0x220>
 800cebc:	89ab      	ldrh	r3, [r5, #12]
 800cebe:	059a      	lsls	r2, r3, #22
 800cec0:	d402      	bmi.n	800cec8 <_vfiprintf_r+0x220>
 800cec2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cec4:	f000 fc6d 	bl	800d7a2 <__retarget_lock_release_recursive>
 800cec8:	89ab      	ldrh	r3, [r5, #12]
 800ceca:	065b      	lsls	r3, r3, #25
 800cecc:	f53f af12 	bmi.w	800ccf4 <_vfiprintf_r+0x4c>
 800ced0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ced2:	e711      	b.n	800ccf8 <_vfiprintf_r+0x50>
 800ced4:	ab03      	add	r3, sp, #12
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	462a      	mov	r2, r5
 800ceda:	4630      	mov	r0, r6
 800cedc:	4b08      	ldr	r3, [pc, #32]	; (800cf00 <_vfiprintf_r+0x258>)
 800cede:	a904      	add	r1, sp, #16
 800cee0:	f000 f882 	bl	800cfe8 <_printf_i>
 800cee4:	e7e4      	b.n	800ceb0 <_vfiprintf_r+0x208>
 800cee6:	bf00      	nop
 800cee8:	0800dfe8 	.word	0x0800dfe8
 800ceec:	0800e008 	.word	0x0800e008
 800cef0:	0800dfc8 	.word	0x0800dfc8
 800cef4:	0800de94 	.word	0x0800de94
 800cef8:	0800de9e 	.word	0x0800de9e
 800cefc:	00000000 	.word	0x00000000
 800cf00:	0800cc83 	.word	0x0800cc83
 800cf04:	0800de9a 	.word	0x0800de9a

0800cf08 <_printf_common>:
 800cf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf0c:	4616      	mov	r6, r2
 800cf0e:	4699      	mov	r9, r3
 800cf10:	688a      	ldr	r2, [r1, #8]
 800cf12:	690b      	ldr	r3, [r1, #16]
 800cf14:	4607      	mov	r7, r0
 800cf16:	4293      	cmp	r3, r2
 800cf18:	bfb8      	it	lt
 800cf1a:	4613      	movlt	r3, r2
 800cf1c:	6033      	str	r3, [r6, #0]
 800cf1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf22:	460c      	mov	r4, r1
 800cf24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf28:	b10a      	cbz	r2, 800cf2e <_printf_common+0x26>
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	6033      	str	r3, [r6, #0]
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	0699      	lsls	r1, r3, #26
 800cf32:	bf42      	ittt	mi
 800cf34:	6833      	ldrmi	r3, [r6, #0]
 800cf36:	3302      	addmi	r3, #2
 800cf38:	6033      	strmi	r3, [r6, #0]
 800cf3a:	6825      	ldr	r5, [r4, #0]
 800cf3c:	f015 0506 	ands.w	r5, r5, #6
 800cf40:	d106      	bne.n	800cf50 <_printf_common+0x48>
 800cf42:	f104 0a19 	add.w	sl, r4, #25
 800cf46:	68e3      	ldr	r3, [r4, #12]
 800cf48:	6832      	ldr	r2, [r6, #0]
 800cf4a:	1a9b      	subs	r3, r3, r2
 800cf4c:	42ab      	cmp	r3, r5
 800cf4e:	dc28      	bgt.n	800cfa2 <_printf_common+0x9a>
 800cf50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf54:	1e13      	subs	r3, r2, #0
 800cf56:	6822      	ldr	r2, [r4, #0]
 800cf58:	bf18      	it	ne
 800cf5a:	2301      	movne	r3, #1
 800cf5c:	0692      	lsls	r2, r2, #26
 800cf5e:	d42d      	bmi.n	800cfbc <_printf_common+0xb4>
 800cf60:	4649      	mov	r1, r9
 800cf62:	4638      	mov	r0, r7
 800cf64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf68:	47c0      	blx	r8
 800cf6a:	3001      	adds	r0, #1
 800cf6c:	d020      	beq.n	800cfb0 <_printf_common+0xa8>
 800cf6e:	6823      	ldr	r3, [r4, #0]
 800cf70:	68e5      	ldr	r5, [r4, #12]
 800cf72:	f003 0306 	and.w	r3, r3, #6
 800cf76:	2b04      	cmp	r3, #4
 800cf78:	bf18      	it	ne
 800cf7a:	2500      	movne	r5, #0
 800cf7c:	6832      	ldr	r2, [r6, #0]
 800cf7e:	f04f 0600 	mov.w	r6, #0
 800cf82:	68a3      	ldr	r3, [r4, #8]
 800cf84:	bf08      	it	eq
 800cf86:	1aad      	subeq	r5, r5, r2
 800cf88:	6922      	ldr	r2, [r4, #16]
 800cf8a:	bf08      	it	eq
 800cf8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf90:	4293      	cmp	r3, r2
 800cf92:	bfc4      	itt	gt
 800cf94:	1a9b      	subgt	r3, r3, r2
 800cf96:	18ed      	addgt	r5, r5, r3
 800cf98:	341a      	adds	r4, #26
 800cf9a:	42b5      	cmp	r5, r6
 800cf9c:	d11a      	bne.n	800cfd4 <_printf_common+0xcc>
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	e008      	b.n	800cfb4 <_printf_common+0xac>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	4652      	mov	r2, sl
 800cfa6:	4649      	mov	r1, r9
 800cfa8:	4638      	mov	r0, r7
 800cfaa:	47c0      	blx	r8
 800cfac:	3001      	adds	r0, #1
 800cfae:	d103      	bne.n	800cfb8 <_printf_common+0xb0>
 800cfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb8:	3501      	adds	r5, #1
 800cfba:	e7c4      	b.n	800cf46 <_printf_common+0x3e>
 800cfbc:	2030      	movs	r0, #48	; 0x30
 800cfbe:	18e1      	adds	r1, r4, r3
 800cfc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfc4:	1c5a      	adds	r2, r3, #1
 800cfc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfca:	4422      	add	r2, r4
 800cfcc:	3302      	adds	r3, #2
 800cfce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfd2:	e7c5      	b.n	800cf60 <_printf_common+0x58>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	4622      	mov	r2, r4
 800cfd8:	4649      	mov	r1, r9
 800cfda:	4638      	mov	r0, r7
 800cfdc:	47c0      	blx	r8
 800cfde:	3001      	adds	r0, #1
 800cfe0:	d0e6      	beq.n	800cfb0 <_printf_common+0xa8>
 800cfe2:	3601      	adds	r6, #1
 800cfe4:	e7d9      	b.n	800cf9a <_printf_common+0x92>
	...

0800cfe8 <_printf_i>:
 800cfe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfec:	460c      	mov	r4, r1
 800cfee:	7e27      	ldrb	r7, [r4, #24]
 800cff0:	4691      	mov	r9, r2
 800cff2:	2f78      	cmp	r7, #120	; 0x78
 800cff4:	4680      	mov	r8, r0
 800cff6:	469a      	mov	sl, r3
 800cff8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cffe:	d807      	bhi.n	800d010 <_printf_i+0x28>
 800d000:	2f62      	cmp	r7, #98	; 0x62
 800d002:	d80a      	bhi.n	800d01a <_printf_i+0x32>
 800d004:	2f00      	cmp	r7, #0
 800d006:	f000 80d9 	beq.w	800d1bc <_printf_i+0x1d4>
 800d00a:	2f58      	cmp	r7, #88	; 0x58
 800d00c:	f000 80a4 	beq.w	800d158 <_printf_i+0x170>
 800d010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d018:	e03a      	b.n	800d090 <_printf_i+0xa8>
 800d01a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d01e:	2b15      	cmp	r3, #21
 800d020:	d8f6      	bhi.n	800d010 <_printf_i+0x28>
 800d022:	a001      	add	r0, pc, #4	; (adr r0, 800d028 <_printf_i+0x40>)
 800d024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d028:	0800d081 	.word	0x0800d081
 800d02c:	0800d095 	.word	0x0800d095
 800d030:	0800d011 	.word	0x0800d011
 800d034:	0800d011 	.word	0x0800d011
 800d038:	0800d011 	.word	0x0800d011
 800d03c:	0800d011 	.word	0x0800d011
 800d040:	0800d095 	.word	0x0800d095
 800d044:	0800d011 	.word	0x0800d011
 800d048:	0800d011 	.word	0x0800d011
 800d04c:	0800d011 	.word	0x0800d011
 800d050:	0800d011 	.word	0x0800d011
 800d054:	0800d1a3 	.word	0x0800d1a3
 800d058:	0800d0c5 	.word	0x0800d0c5
 800d05c:	0800d185 	.word	0x0800d185
 800d060:	0800d011 	.word	0x0800d011
 800d064:	0800d011 	.word	0x0800d011
 800d068:	0800d1c5 	.word	0x0800d1c5
 800d06c:	0800d011 	.word	0x0800d011
 800d070:	0800d0c5 	.word	0x0800d0c5
 800d074:	0800d011 	.word	0x0800d011
 800d078:	0800d011 	.word	0x0800d011
 800d07c:	0800d18d 	.word	0x0800d18d
 800d080:	680b      	ldr	r3, [r1, #0]
 800d082:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d086:	1d1a      	adds	r2, r3, #4
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	600a      	str	r2, [r1, #0]
 800d08c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d090:	2301      	movs	r3, #1
 800d092:	e0a4      	b.n	800d1de <_printf_i+0x1f6>
 800d094:	6825      	ldr	r5, [r4, #0]
 800d096:	6808      	ldr	r0, [r1, #0]
 800d098:	062e      	lsls	r6, r5, #24
 800d09a:	f100 0304 	add.w	r3, r0, #4
 800d09e:	d50a      	bpl.n	800d0b6 <_printf_i+0xce>
 800d0a0:	6805      	ldr	r5, [r0, #0]
 800d0a2:	600b      	str	r3, [r1, #0]
 800d0a4:	2d00      	cmp	r5, #0
 800d0a6:	da03      	bge.n	800d0b0 <_printf_i+0xc8>
 800d0a8:	232d      	movs	r3, #45	; 0x2d
 800d0aa:	426d      	negs	r5, r5
 800d0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0b0:	230a      	movs	r3, #10
 800d0b2:	485e      	ldr	r0, [pc, #376]	; (800d22c <_printf_i+0x244>)
 800d0b4:	e019      	b.n	800d0ea <_printf_i+0x102>
 800d0b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d0ba:	6805      	ldr	r5, [r0, #0]
 800d0bc:	600b      	str	r3, [r1, #0]
 800d0be:	bf18      	it	ne
 800d0c0:	b22d      	sxthne	r5, r5
 800d0c2:	e7ef      	b.n	800d0a4 <_printf_i+0xbc>
 800d0c4:	680b      	ldr	r3, [r1, #0]
 800d0c6:	6825      	ldr	r5, [r4, #0]
 800d0c8:	1d18      	adds	r0, r3, #4
 800d0ca:	6008      	str	r0, [r1, #0]
 800d0cc:	0628      	lsls	r0, r5, #24
 800d0ce:	d501      	bpl.n	800d0d4 <_printf_i+0xec>
 800d0d0:	681d      	ldr	r5, [r3, #0]
 800d0d2:	e002      	b.n	800d0da <_printf_i+0xf2>
 800d0d4:	0669      	lsls	r1, r5, #25
 800d0d6:	d5fb      	bpl.n	800d0d0 <_printf_i+0xe8>
 800d0d8:	881d      	ldrh	r5, [r3, #0]
 800d0da:	2f6f      	cmp	r7, #111	; 0x6f
 800d0dc:	bf0c      	ite	eq
 800d0de:	2308      	moveq	r3, #8
 800d0e0:	230a      	movne	r3, #10
 800d0e2:	4852      	ldr	r0, [pc, #328]	; (800d22c <_printf_i+0x244>)
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0ea:	6866      	ldr	r6, [r4, #4]
 800d0ec:	2e00      	cmp	r6, #0
 800d0ee:	bfa8      	it	ge
 800d0f0:	6821      	ldrge	r1, [r4, #0]
 800d0f2:	60a6      	str	r6, [r4, #8]
 800d0f4:	bfa4      	itt	ge
 800d0f6:	f021 0104 	bicge.w	r1, r1, #4
 800d0fa:	6021      	strge	r1, [r4, #0]
 800d0fc:	b90d      	cbnz	r5, 800d102 <_printf_i+0x11a>
 800d0fe:	2e00      	cmp	r6, #0
 800d100:	d04d      	beq.n	800d19e <_printf_i+0x1b6>
 800d102:	4616      	mov	r6, r2
 800d104:	fbb5 f1f3 	udiv	r1, r5, r3
 800d108:	fb03 5711 	mls	r7, r3, r1, r5
 800d10c:	5dc7      	ldrb	r7, [r0, r7]
 800d10e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d112:	462f      	mov	r7, r5
 800d114:	42bb      	cmp	r3, r7
 800d116:	460d      	mov	r5, r1
 800d118:	d9f4      	bls.n	800d104 <_printf_i+0x11c>
 800d11a:	2b08      	cmp	r3, #8
 800d11c:	d10b      	bne.n	800d136 <_printf_i+0x14e>
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	07df      	lsls	r7, r3, #31
 800d122:	d508      	bpl.n	800d136 <_printf_i+0x14e>
 800d124:	6923      	ldr	r3, [r4, #16]
 800d126:	6861      	ldr	r1, [r4, #4]
 800d128:	4299      	cmp	r1, r3
 800d12a:	bfde      	ittt	le
 800d12c:	2330      	movle	r3, #48	; 0x30
 800d12e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d132:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d136:	1b92      	subs	r2, r2, r6
 800d138:	6122      	str	r2, [r4, #16]
 800d13a:	464b      	mov	r3, r9
 800d13c:	4621      	mov	r1, r4
 800d13e:	4640      	mov	r0, r8
 800d140:	f8cd a000 	str.w	sl, [sp]
 800d144:	aa03      	add	r2, sp, #12
 800d146:	f7ff fedf 	bl	800cf08 <_printf_common>
 800d14a:	3001      	adds	r0, #1
 800d14c:	d14c      	bne.n	800d1e8 <_printf_i+0x200>
 800d14e:	f04f 30ff 	mov.w	r0, #4294967295
 800d152:	b004      	add	sp, #16
 800d154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d158:	4834      	ldr	r0, [pc, #208]	; (800d22c <_printf_i+0x244>)
 800d15a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d15e:	680e      	ldr	r6, [r1, #0]
 800d160:	6823      	ldr	r3, [r4, #0]
 800d162:	f856 5b04 	ldr.w	r5, [r6], #4
 800d166:	061f      	lsls	r7, r3, #24
 800d168:	600e      	str	r6, [r1, #0]
 800d16a:	d514      	bpl.n	800d196 <_printf_i+0x1ae>
 800d16c:	07d9      	lsls	r1, r3, #31
 800d16e:	bf44      	itt	mi
 800d170:	f043 0320 	orrmi.w	r3, r3, #32
 800d174:	6023      	strmi	r3, [r4, #0]
 800d176:	b91d      	cbnz	r5, 800d180 <_printf_i+0x198>
 800d178:	6823      	ldr	r3, [r4, #0]
 800d17a:	f023 0320 	bic.w	r3, r3, #32
 800d17e:	6023      	str	r3, [r4, #0]
 800d180:	2310      	movs	r3, #16
 800d182:	e7af      	b.n	800d0e4 <_printf_i+0xfc>
 800d184:	6823      	ldr	r3, [r4, #0]
 800d186:	f043 0320 	orr.w	r3, r3, #32
 800d18a:	6023      	str	r3, [r4, #0]
 800d18c:	2378      	movs	r3, #120	; 0x78
 800d18e:	4828      	ldr	r0, [pc, #160]	; (800d230 <_printf_i+0x248>)
 800d190:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d194:	e7e3      	b.n	800d15e <_printf_i+0x176>
 800d196:	065e      	lsls	r6, r3, #25
 800d198:	bf48      	it	mi
 800d19a:	b2ad      	uxthmi	r5, r5
 800d19c:	e7e6      	b.n	800d16c <_printf_i+0x184>
 800d19e:	4616      	mov	r6, r2
 800d1a0:	e7bb      	b.n	800d11a <_printf_i+0x132>
 800d1a2:	680b      	ldr	r3, [r1, #0]
 800d1a4:	6826      	ldr	r6, [r4, #0]
 800d1a6:	1d1d      	adds	r5, r3, #4
 800d1a8:	6960      	ldr	r0, [r4, #20]
 800d1aa:	600d      	str	r5, [r1, #0]
 800d1ac:	0635      	lsls	r5, r6, #24
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	d501      	bpl.n	800d1b6 <_printf_i+0x1ce>
 800d1b2:	6018      	str	r0, [r3, #0]
 800d1b4:	e002      	b.n	800d1bc <_printf_i+0x1d4>
 800d1b6:	0671      	lsls	r1, r6, #25
 800d1b8:	d5fb      	bpl.n	800d1b2 <_printf_i+0x1ca>
 800d1ba:	8018      	strh	r0, [r3, #0]
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4616      	mov	r6, r2
 800d1c0:	6123      	str	r3, [r4, #16]
 800d1c2:	e7ba      	b.n	800d13a <_printf_i+0x152>
 800d1c4:	680b      	ldr	r3, [r1, #0]
 800d1c6:	1d1a      	adds	r2, r3, #4
 800d1c8:	600a      	str	r2, [r1, #0]
 800d1ca:	681e      	ldr	r6, [r3, #0]
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	6862      	ldr	r2, [r4, #4]
 800d1d2:	f000 fb4b 	bl	800d86c <memchr>
 800d1d6:	b108      	cbz	r0, 800d1dc <_printf_i+0x1f4>
 800d1d8:	1b80      	subs	r0, r0, r6
 800d1da:	6060      	str	r0, [r4, #4]
 800d1dc:	6863      	ldr	r3, [r4, #4]
 800d1de:	6123      	str	r3, [r4, #16]
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1e6:	e7a8      	b.n	800d13a <_printf_i+0x152>
 800d1e8:	4632      	mov	r2, r6
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	4640      	mov	r0, r8
 800d1ee:	6923      	ldr	r3, [r4, #16]
 800d1f0:	47d0      	blx	sl
 800d1f2:	3001      	adds	r0, #1
 800d1f4:	d0ab      	beq.n	800d14e <_printf_i+0x166>
 800d1f6:	6823      	ldr	r3, [r4, #0]
 800d1f8:	079b      	lsls	r3, r3, #30
 800d1fa:	d413      	bmi.n	800d224 <_printf_i+0x23c>
 800d1fc:	68e0      	ldr	r0, [r4, #12]
 800d1fe:	9b03      	ldr	r3, [sp, #12]
 800d200:	4298      	cmp	r0, r3
 800d202:	bfb8      	it	lt
 800d204:	4618      	movlt	r0, r3
 800d206:	e7a4      	b.n	800d152 <_printf_i+0x16a>
 800d208:	2301      	movs	r3, #1
 800d20a:	4632      	mov	r2, r6
 800d20c:	4649      	mov	r1, r9
 800d20e:	4640      	mov	r0, r8
 800d210:	47d0      	blx	sl
 800d212:	3001      	adds	r0, #1
 800d214:	d09b      	beq.n	800d14e <_printf_i+0x166>
 800d216:	3501      	adds	r5, #1
 800d218:	68e3      	ldr	r3, [r4, #12]
 800d21a:	9903      	ldr	r1, [sp, #12]
 800d21c:	1a5b      	subs	r3, r3, r1
 800d21e:	42ab      	cmp	r3, r5
 800d220:	dcf2      	bgt.n	800d208 <_printf_i+0x220>
 800d222:	e7eb      	b.n	800d1fc <_printf_i+0x214>
 800d224:	2500      	movs	r5, #0
 800d226:	f104 0619 	add.w	r6, r4, #25
 800d22a:	e7f5      	b.n	800d218 <_printf_i+0x230>
 800d22c:	0800dea5 	.word	0x0800dea5
 800d230:	0800deb6 	.word	0x0800deb6

0800d234 <nan>:
 800d234:	2000      	movs	r0, #0
 800d236:	4901      	ldr	r1, [pc, #4]	; (800d23c <nan+0x8>)
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	7ff80000 	.word	0x7ff80000

0800d240 <_sbrk_r>:
 800d240:	b538      	push	{r3, r4, r5, lr}
 800d242:	2300      	movs	r3, #0
 800d244:	4d05      	ldr	r5, [pc, #20]	; (800d25c <_sbrk_r+0x1c>)
 800d246:	4604      	mov	r4, r0
 800d248:	4608      	mov	r0, r1
 800d24a:	602b      	str	r3, [r5, #0]
 800d24c:	f7f5 fb0e 	bl	800286c <_sbrk>
 800d250:	1c43      	adds	r3, r0, #1
 800d252:	d102      	bne.n	800d25a <_sbrk_r+0x1a>
 800d254:	682b      	ldr	r3, [r5, #0]
 800d256:	b103      	cbz	r3, 800d25a <_sbrk_r+0x1a>
 800d258:	6023      	str	r3, [r4, #0]
 800d25a:	bd38      	pop	{r3, r4, r5, pc}
 800d25c:	200012cc 	.word	0x200012cc

0800d260 <strncmp>:
 800d260:	b510      	push	{r4, lr}
 800d262:	b16a      	cbz	r2, 800d280 <strncmp+0x20>
 800d264:	3901      	subs	r1, #1
 800d266:	1884      	adds	r4, r0, r2
 800d268:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d26c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d270:	4293      	cmp	r3, r2
 800d272:	d103      	bne.n	800d27c <strncmp+0x1c>
 800d274:	42a0      	cmp	r0, r4
 800d276:	d001      	beq.n	800d27c <strncmp+0x1c>
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d1f5      	bne.n	800d268 <strncmp+0x8>
 800d27c:	1a98      	subs	r0, r3, r2
 800d27e:	bd10      	pop	{r4, pc}
 800d280:	4610      	mov	r0, r2
 800d282:	e7fc      	b.n	800d27e <strncmp+0x1e>

0800d284 <__swbuf_r>:
 800d284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d286:	460e      	mov	r6, r1
 800d288:	4614      	mov	r4, r2
 800d28a:	4605      	mov	r5, r0
 800d28c:	b118      	cbz	r0, 800d296 <__swbuf_r+0x12>
 800d28e:	6983      	ldr	r3, [r0, #24]
 800d290:	b90b      	cbnz	r3, 800d296 <__swbuf_r+0x12>
 800d292:	f000 f9e7 	bl	800d664 <__sinit>
 800d296:	4b21      	ldr	r3, [pc, #132]	; (800d31c <__swbuf_r+0x98>)
 800d298:	429c      	cmp	r4, r3
 800d29a:	d12b      	bne.n	800d2f4 <__swbuf_r+0x70>
 800d29c:	686c      	ldr	r4, [r5, #4]
 800d29e:	69a3      	ldr	r3, [r4, #24]
 800d2a0:	60a3      	str	r3, [r4, #8]
 800d2a2:	89a3      	ldrh	r3, [r4, #12]
 800d2a4:	071a      	lsls	r2, r3, #28
 800d2a6:	d52f      	bpl.n	800d308 <__swbuf_r+0x84>
 800d2a8:	6923      	ldr	r3, [r4, #16]
 800d2aa:	b36b      	cbz	r3, 800d308 <__swbuf_r+0x84>
 800d2ac:	6923      	ldr	r3, [r4, #16]
 800d2ae:	6820      	ldr	r0, [r4, #0]
 800d2b0:	b2f6      	uxtb	r6, r6
 800d2b2:	1ac0      	subs	r0, r0, r3
 800d2b4:	6963      	ldr	r3, [r4, #20]
 800d2b6:	4637      	mov	r7, r6
 800d2b8:	4283      	cmp	r3, r0
 800d2ba:	dc04      	bgt.n	800d2c6 <__swbuf_r+0x42>
 800d2bc:	4621      	mov	r1, r4
 800d2be:	4628      	mov	r0, r5
 800d2c0:	f000 f93c 	bl	800d53c <_fflush_r>
 800d2c4:	bb30      	cbnz	r0, 800d314 <__swbuf_r+0x90>
 800d2c6:	68a3      	ldr	r3, [r4, #8]
 800d2c8:	3001      	adds	r0, #1
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	60a3      	str	r3, [r4, #8]
 800d2ce:	6823      	ldr	r3, [r4, #0]
 800d2d0:	1c5a      	adds	r2, r3, #1
 800d2d2:	6022      	str	r2, [r4, #0]
 800d2d4:	701e      	strb	r6, [r3, #0]
 800d2d6:	6963      	ldr	r3, [r4, #20]
 800d2d8:	4283      	cmp	r3, r0
 800d2da:	d004      	beq.n	800d2e6 <__swbuf_r+0x62>
 800d2dc:	89a3      	ldrh	r3, [r4, #12]
 800d2de:	07db      	lsls	r3, r3, #31
 800d2e0:	d506      	bpl.n	800d2f0 <__swbuf_r+0x6c>
 800d2e2:	2e0a      	cmp	r6, #10
 800d2e4:	d104      	bne.n	800d2f0 <__swbuf_r+0x6c>
 800d2e6:	4621      	mov	r1, r4
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	f000 f927 	bl	800d53c <_fflush_r>
 800d2ee:	b988      	cbnz	r0, 800d314 <__swbuf_r+0x90>
 800d2f0:	4638      	mov	r0, r7
 800d2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2f4:	4b0a      	ldr	r3, [pc, #40]	; (800d320 <__swbuf_r+0x9c>)
 800d2f6:	429c      	cmp	r4, r3
 800d2f8:	d101      	bne.n	800d2fe <__swbuf_r+0x7a>
 800d2fa:	68ac      	ldr	r4, [r5, #8]
 800d2fc:	e7cf      	b.n	800d29e <__swbuf_r+0x1a>
 800d2fe:	4b09      	ldr	r3, [pc, #36]	; (800d324 <__swbuf_r+0xa0>)
 800d300:	429c      	cmp	r4, r3
 800d302:	bf08      	it	eq
 800d304:	68ec      	ldreq	r4, [r5, #12]
 800d306:	e7ca      	b.n	800d29e <__swbuf_r+0x1a>
 800d308:	4621      	mov	r1, r4
 800d30a:	4628      	mov	r0, r5
 800d30c:	f000 f81a 	bl	800d344 <__swsetup_r>
 800d310:	2800      	cmp	r0, #0
 800d312:	d0cb      	beq.n	800d2ac <__swbuf_r+0x28>
 800d314:	f04f 37ff 	mov.w	r7, #4294967295
 800d318:	e7ea      	b.n	800d2f0 <__swbuf_r+0x6c>
 800d31a:	bf00      	nop
 800d31c:	0800dfe8 	.word	0x0800dfe8
 800d320:	0800e008 	.word	0x0800e008
 800d324:	0800dfc8 	.word	0x0800dfc8

0800d328 <__ascii_wctomb>:
 800d328:	4603      	mov	r3, r0
 800d32a:	4608      	mov	r0, r1
 800d32c:	b141      	cbz	r1, 800d340 <__ascii_wctomb+0x18>
 800d32e:	2aff      	cmp	r2, #255	; 0xff
 800d330:	d904      	bls.n	800d33c <__ascii_wctomb+0x14>
 800d332:	228a      	movs	r2, #138	; 0x8a
 800d334:	f04f 30ff 	mov.w	r0, #4294967295
 800d338:	601a      	str	r2, [r3, #0]
 800d33a:	4770      	bx	lr
 800d33c:	2001      	movs	r0, #1
 800d33e:	700a      	strb	r2, [r1, #0]
 800d340:	4770      	bx	lr
	...

0800d344 <__swsetup_r>:
 800d344:	4b32      	ldr	r3, [pc, #200]	; (800d410 <__swsetup_r+0xcc>)
 800d346:	b570      	push	{r4, r5, r6, lr}
 800d348:	681d      	ldr	r5, [r3, #0]
 800d34a:	4606      	mov	r6, r0
 800d34c:	460c      	mov	r4, r1
 800d34e:	b125      	cbz	r5, 800d35a <__swsetup_r+0x16>
 800d350:	69ab      	ldr	r3, [r5, #24]
 800d352:	b913      	cbnz	r3, 800d35a <__swsetup_r+0x16>
 800d354:	4628      	mov	r0, r5
 800d356:	f000 f985 	bl	800d664 <__sinit>
 800d35a:	4b2e      	ldr	r3, [pc, #184]	; (800d414 <__swsetup_r+0xd0>)
 800d35c:	429c      	cmp	r4, r3
 800d35e:	d10f      	bne.n	800d380 <__swsetup_r+0x3c>
 800d360:	686c      	ldr	r4, [r5, #4]
 800d362:	89a3      	ldrh	r3, [r4, #12]
 800d364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d368:	0719      	lsls	r1, r3, #28
 800d36a:	d42c      	bmi.n	800d3c6 <__swsetup_r+0x82>
 800d36c:	06dd      	lsls	r5, r3, #27
 800d36e:	d411      	bmi.n	800d394 <__swsetup_r+0x50>
 800d370:	2309      	movs	r3, #9
 800d372:	6033      	str	r3, [r6, #0]
 800d374:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d378:	f04f 30ff 	mov.w	r0, #4294967295
 800d37c:	81a3      	strh	r3, [r4, #12]
 800d37e:	e03e      	b.n	800d3fe <__swsetup_r+0xba>
 800d380:	4b25      	ldr	r3, [pc, #148]	; (800d418 <__swsetup_r+0xd4>)
 800d382:	429c      	cmp	r4, r3
 800d384:	d101      	bne.n	800d38a <__swsetup_r+0x46>
 800d386:	68ac      	ldr	r4, [r5, #8]
 800d388:	e7eb      	b.n	800d362 <__swsetup_r+0x1e>
 800d38a:	4b24      	ldr	r3, [pc, #144]	; (800d41c <__swsetup_r+0xd8>)
 800d38c:	429c      	cmp	r4, r3
 800d38e:	bf08      	it	eq
 800d390:	68ec      	ldreq	r4, [r5, #12]
 800d392:	e7e6      	b.n	800d362 <__swsetup_r+0x1e>
 800d394:	0758      	lsls	r0, r3, #29
 800d396:	d512      	bpl.n	800d3be <__swsetup_r+0x7a>
 800d398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d39a:	b141      	cbz	r1, 800d3ae <__swsetup_r+0x6a>
 800d39c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3a0:	4299      	cmp	r1, r3
 800d3a2:	d002      	beq.n	800d3aa <__swsetup_r+0x66>
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	f7ff fbb1 	bl	800cb0c <_free_r>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	6363      	str	r3, [r4, #52]	; 0x34
 800d3ae:	89a3      	ldrh	r3, [r4, #12]
 800d3b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d3b4:	81a3      	strh	r3, [r4, #12]
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	6063      	str	r3, [r4, #4]
 800d3ba:	6923      	ldr	r3, [r4, #16]
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	89a3      	ldrh	r3, [r4, #12]
 800d3c0:	f043 0308 	orr.w	r3, r3, #8
 800d3c4:	81a3      	strh	r3, [r4, #12]
 800d3c6:	6923      	ldr	r3, [r4, #16]
 800d3c8:	b94b      	cbnz	r3, 800d3de <__swsetup_r+0x9a>
 800d3ca:	89a3      	ldrh	r3, [r4, #12]
 800d3cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d3d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3d4:	d003      	beq.n	800d3de <__swsetup_r+0x9a>
 800d3d6:	4621      	mov	r1, r4
 800d3d8:	4630      	mov	r0, r6
 800d3da:	f000 fa07 	bl	800d7ec <__smakebuf_r>
 800d3de:	89a0      	ldrh	r0, [r4, #12]
 800d3e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3e4:	f010 0301 	ands.w	r3, r0, #1
 800d3e8:	d00a      	beq.n	800d400 <__swsetup_r+0xbc>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	60a3      	str	r3, [r4, #8]
 800d3ee:	6963      	ldr	r3, [r4, #20]
 800d3f0:	425b      	negs	r3, r3
 800d3f2:	61a3      	str	r3, [r4, #24]
 800d3f4:	6923      	ldr	r3, [r4, #16]
 800d3f6:	b943      	cbnz	r3, 800d40a <__swsetup_r+0xc6>
 800d3f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3fc:	d1ba      	bne.n	800d374 <__swsetup_r+0x30>
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}
 800d400:	0781      	lsls	r1, r0, #30
 800d402:	bf58      	it	pl
 800d404:	6963      	ldrpl	r3, [r4, #20]
 800d406:	60a3      	str	r3, [r4, #8]
 800d408:	e7f4      	b.n	800d3f4 <__swsetup_r+0xb0>
 800d40a:	2000      	movs	r0, #0
 800d40c:	e7f7      	b.n	800d3fe <__swsetup_r+0xba>
 800d40e:	bf00      	nop
 800d410:	20000444 	.word	0x20000444
 800d414:	0800dfe8 	.word	0x0800dfe8
 800d418:	0800e008 	.word	0x0800e008
 800d41c:	0800dfc8 	.word	0x0800dfc8

0800d420 <abort>:
 800d420:	2006      	movs	r0, #6
 800d422:	b508      	push	{r3, lr}
 800d424:	f000 fa64 	bl	800d8f0 <raise>
 800d428:	2001      	movs	r0, #1
 800d42a:	f7f5 f9ac 	bl	8002786 <_exit>
	...

0800d430 <__sflush_r>:
 800d430:	898a      	ldrh	r2, [r1, #12]
 800d432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d436:	4605      	mov	r5, r0
 800d438:	0710      	lsls	r0, r2, #28
 800d43a:	460c      	mov	r4, r1
 800d43c:	d458      	bmi.n	800d4f0 <__sflush_r+0xc0>
 800d43e:	684b      	ldr	r3, [r1, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	dc05      	bgt.n	800d450 <__sflush_r+0x20>
 800d444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d446:	2b00      	cmp	r3, #0
 800d448:	dc02      	bgt.n	800d450 <__sflush_r+0x20>
 800d44a:	2000      	movs	r0, #0
 800d44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d452:	2e00      	cmp	r6, #0
 800d454:	d0f9      	beq.n	800d44a <__sflush_r+0x1a>
 800d456:	2300      	movs	r3, #0
 800d458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d45c:	682f      	ldr	r7, [r5, #0]
 800d45e:	602b      	str	r3, [r5, #0]
 800d460:	d032      	beq.n	800d4c8 <__sflush_r+0x98>
 800d462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d464:	89a3      	ldrh	r3, [r4, #12]
 800d466:	075a      	lsls	r2, r3, #29
 800d468:	d505      	bpl.n	800d476 <__sflush_r+0x46>
 800d46a:	6863      	ldr	r3, [r4, #4]
 800d46c:	1ac0      	subs	r0, r0, r3
 800d46e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d470:	b10b      	cbz	r3, 800d476 <__sflush_r+0x46>
 800d472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d474:	1ac0      	subs	r0, r0, r3
 800d476:	2300      	movs	r3, #0
 800d478:	4602      	mov	r2, r0
 800d47a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d47c:	4628      	mov	r0, r5
 800d47e:	6a21      	ldr	r1, [r4, #32]
 800d480:	47b0      	blx	r6
 800d482:	1c43      	adds	r3, r0, #1
 800d484:	89a3      	ldrh	r3, [r4, #12]
 800d486:	d106      	bne.n	800d496 <__sflush_r+0x66>
 800d488:	6829      	ldr	r1, [r5, #0]
 800d48a:	291d      	cmp	r1, #29
 800d48c:	d82c      	bhi.n	800d4e8 <__sflush_r+0xb8>
 800d48e:	4a2a      	ldr	r2, [pc, #168]	; (800d538 <__sflush_r+0x108>)
 800d490:	40ca      	lsrs	r2, r1
 800d492:	07d6      	lsls	r6, r2, #31
 800d494:	d528      	bpl.n	800d4e8 <__sflush_r+0xb8>
 800d496:	2200      	movs	r2, #0
 800d498:	6062      	str	r2, [r4, #4]
 800d49a:	6922      	ldr	r2, [r4, #16]
 800d49c:	04d9      	lsls	r1, r3, #19
 800d49e:	6022      	str	r2, [r4, #0]
 800d4a0:	d504      	bpl.n	800d4ac <__sflush_r+0x7c>
 800d4a2:	1c42      	adds	r2, r0, #1
 800d4a4:	d101      	bne.n	800d4aa <__sflush_r+0x7a>
 800d4a6:	682b      	ldr	r3, [r5, #0]
 800d4a8:	b903      	cbnz	r3, 800d4ac <__sflush_r+0x7c>
 800d4aa:	6560      	str	r0, [r4, #84]	; 0x54
 800d4ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4ae:	602f      	str	r7, [r5, #0]
 800d4b0:	2900      	cmp	r1, #0
 800d4b2:	d0ca      	beq.n	800d44a <__sflush_r+0x1a>
 800d4b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4b8:	4299      	cmp	r1, r3
 800d4ba:	d002      	beq.n	800d4c2 <__sflush_r+0x92>
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f7ff fb25 	bl	800cb0c <_free_r>
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	6360      	str	r0, [r4, #52]	; 0x34
 800d4c6:	e7c1      	b.n	800d44c <__sflush_r+0x1c>
 800d4c8:	6a21      	ldr	r1, [r4, #32]
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	47b0      	blx	r6
 800d4d0:	1c41      	adds	r1, r0, #1
 800d4d2:	d1c7      	bne.n	800d464 <__sflush_r+0x34>
 800d4d4:	682b      	ldr	r3, [r5, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d0c4      	beq.n	800d464 <__sflush_r+0x34>
 800d4da:	2b1d      	cmp	r3, #29
 800d4dc:	d001      	beq.n	800d4e2 <__sflush_r+0xb2>
 800d4de:	2b16      	cmp	r3, #22
 800d4e0:	d101      	bne.n	800d4e6 <__sflush_r+0xb6>
 800d4e2:	602f      	str	r7, [r5, #0]
 800d4e4:	e7b1      	b.n	800d44a <__sflush_r+0x1a>
 800d4e6:	89a3      	ldrh	r3, [r4, #12]
 800d4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4ec:	81a3      	strh	r3, [r4, #12]
 800d4ee:	e7ad      	b.n	800d44c <__sflush_r+0x1c>
 800d4f0:	690f      	ldr	r7, [r1, #16]
 800d4f2:	2f00      	cmp	r7, #0
 800d4f4:	d0a9      	beq.n	800d44a <__sflush_r+0x1a>
 800d4f6:	0793      	lsls	r3, r2, #30
 800d4f8:	bf18      	it	ne
 800d4fa:	2300      	movne	r3, #0
 800d4fc:	680e      	ldr	r6, [r1, #0]
 800d4fe:	bf08      	it	eq
 800d500:	694b      	ldreq	r3, [r1, #20]
 800d502:	eba6 0807 	sub.w	r8, r6, r7
 800d506:	600f      	str	r7, [r1, #0]
 800d508:	608b      	str	r3, [r1, #8]
 800d50a:	f1b8 0f00 	cmp.w	r8, #0
 800d50e:	dd9c      	ble.n	800d44a <__sflush_r+0x1a>
 800d510:	4643      	mov	r3, r8
 800d512:	463a      	mov	r2, r7
 800d514:	4628      	mov	r0, r5
 800d516:	6a21      	ldr	r1, [r4, #32]
 800d518:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d51a:	47b0      	blx	r6
 800d51c:	2800      	cmp	r0, #0
 800d51e:	dc06      	bgt.n	800d52e <__sflush_r+0xfe>
 800d520:	89a3      	ldrh	r3, [r4, #12]
 800d522:	f04f 30ff 	mov.w	r0, #4294967295
 800d526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d52a:	81a3      	strh	r3, [r4, #12]
 800d52c:	e78e      	b.n	800d44c <__sflush_r+0x1c>
 800d52e:	4407      	add	r7, r0
 800d530:	eba8 0800 	sub.w	r8, r8, r0
 800d534:	e7e9      	b.n	800d50a <__sflush_r+0xda>
 800d536:	bf00      	nop
 800d538:	20400001 	.word	0x20400001

0800d53c <_fflush_r>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	690b      	ldr	r3, [r1, #16]
 800d540:	4605      	mov	r5, r0
 800d542:	460c      	mov	r4, r1
 800d544:	b913      	cbnz	r3, 800d54c <_fflush_r+0x10>
 800d546:	2500      	movs	r5, #0
 800d548:	4628      	mov	r0, r5
 800d54a:	bd38      	pop	{r3, r4, r5, pc}
 800d54c:	b118      	cbz	r0, 800d556 <_fflush_r+0x1a>
 800d54e:	6983      	ldr	r3, [r0, #24]
 800d550:	b90b      	cbnz	r3, 800d556 <_fflush_r+0x1a>
 800d552:	f000 f887 	bl	800d664 <__sinit>
 800d556:	4b14      	ldr	r3, [pc, #80]	; (800d5a8 <_fflush_r+0x6c>)
 800d558:	429c      	cmp	r4, r3
 800d55a:	d11b      	bne.n	800d594 <_fflush_r+0x58>
 800d55c:	686c      	ldr	r4, [r5, #4]
 800d55e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0ef      	beq.n	800d546 <_fflush_r+0xa>
 800d566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d568:	07d0      	lsls	r0, r2, #31
 800d56a:	d404      	bmi.n	800d576 <_fflush_r+0x3a>
 800d56c:	0599      	lsls	r1, r3, #22
 800d56e:	d402      	bmi.n	800d576 <_fflush_r+0x3a>
 800d570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d572:	f000 f915 	bl	800d7a0 <__retarget_lock_acquire_recursive>
 800d576:	4628      	mov	r0, r5
 800d578:	4621      	mov	r1, r4
 800d57a:	f7ff ff59 	bl	800d430 <__sflush_r>
 800d57e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d580:	4605      	mov	r5, r0
 800d582:	07da      	lsls	r2, r3, #31
 800d584:	d4e0      	bmi.n	800d548 <_fflush_r+0xc>
 800d586:	89a3      	ldrh	r3, [r4, #12]
 800d588:	059b      	lsls	r3, r3, #22
 800d58a:	d4dd      	bmi.n	800d548 <_fflush_r+0xc>
 800d58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d58e:	f000 f908 	bl	800d7a2 <__retarget_lock_release_recursive>
 800d592:	e7d9      	b.n	800d548 <_fflush_r+0xc>
 800d594:	4b05      	ldr	r3, [pc, #20]	; (800d5ac <_fflush_r+0x70>)
 800d596:	429c      	cmp	r4, r3
 800d598:	d101      	bne.n	800d59e <_fflush_r+0x62>
 800d59a:	68ac      	ldr	r4, [r5, #8]
 800d59c:	e7df      	b.n	800d55e <_fflush_r+0x22>
 800d59e:	4b04      	ldr	r3, [pc, #16]	; (800d5b0 <_fflush_r+0x74>)
 800d5a0:	429c      	cmp	r4, r3
 800d5a2:	bf08      	it	eq
 800d5a4:	68ec      	ldreq	r4, [r5, #12]
 800d5a6:	e7da      	b.n	800d55e <_fflush_r+0x22>
 800d5a8:	0800dfe8 	.word	0x0800dfe8
 800d5ac:	0800e008 	.word	0x0800e008
 800d5b0:	0800dfc8 	.word	0x0800dfc8

0800d5b4 <std>:
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	b510      	push	{r4, lr}
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	e9c0 3300 	strd	r3, r3, [r0]
 800d5be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5c2:	6083      	str	r3, [r0, #8]
 800d5c4:	8181      	strh	r1, [r0, #12]
 800d5c6:	6643      	str	r3, [r0, #100]	; 0x64
 800d5c8:	81c2      	strh	r2, [r0, #14]
 800d5ca:	6183      	str	r3, [r0, #24]
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	2208      	movs	r2, #8
 800d5d0:	305c      	adds	r0, #92	; 0x5c
 800d5d2:	f7fd fb95 	bl	800ad00 <memset>
 800d5d6:	4b05      	ldr	r3, [pc, #20]	; (800d5ec <std+0x38>)
 800d5d8:	6224      	str	r4, [r4, #32]
 800d5da:	6263      	str	r3, [r4, #36]	; 0x24
 800d5dc:	4b04      	ldr	r3, [pc, #16]	; (800d5f0 <std+0x3c>)
 800d5de:	62a3      	str	r3, [r4, #40]	; 0x28
 800d5e0:	4b04      	ldr	r3, [pc, #16]	; (800d5f4 <std+0x40>)
 800d5e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d5e4:	4b04      	ldr	r3, [pc, #16]	; (800d5f8 <std+0x44>)
 800d5e6:	6323      	str	r3, [r4, #48]	; 0x30
 800d5e8:	bd10      	pop	{r4, pc}
 800d5ea:	bf00      	nop
 800d5ec:	0800d929 	.word	0x0800d929
 800d5f0:	0800d94b 	.word	0x0800d94b
 800d5f4:	0800d983 	.word	0x0800d983
 800d5f8:	0800d9a7 	.word	0x0800d9a7

0800d5fc <_cleanup_r>:
 800d5fc:	4901      	ldr	r1, [pc, #4]	; (800d604 <_cleanup_r+0x8>)
 800d5fe:	f000 b8af 	b.w	800d760 <_fwalk_reent>
 800d602:	bf00      	nop
 800d604:	0800d53d 	.word	0x0800d53d

0800d608 <__sfmoreglue>:
 800d608:	b570      	push	{r4, r5, r6, lr}
 800d60a:	2568      	movs	r5, #104	; 0x68
 800d60c:	1e4a      	subs	r2, r1, #1
 800d60e:	4355      	muls	r5, r2
 800d610:	460e      	mov	r6, r1
 800d612:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d616:	f7ff fac5 	bl	800cba4 <_malloc_r>
 800d61a:	4604      	mov	r4, r0
 800d61c:	b140      	cbz	r0, 800d630 <__sfmoreglue+0x28>
 800d61e:	2100      	movs	r1, #0
 800d620:	e9c0 1600 	strd	r1, r6, [r0]
 800d624:	300c      	adds	r0, #12
 800d626:	60a0      	str	r0, [r4, #8]
 800d628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d62c:	f7fd fb68 	bl	800ad00 <memset>
 800d630:	4620      	mov	r0, r4
 800d632:	bd70      	pop	{r4, r5, r6, pc}

0800d634 <__sfp_lock_acquire>:
 800d634:	4801      	ldr	r0, [pc, #4]	; (800d63c <__sfp_lock_acquire+0x8>)
 800d636:	f000 b8b3 	b.w	800d7a0 <__retarget_lock_acquire_recursive>
 800d63a:	bf00      	nop
 800d63c:	200012c8 	.word	0x200012c8

0800d640 <__sfp_lock_release>:
 800d640:	4801      	ldr	r0, [pc, #4]	; (800d648 <__sfp_lock_release+0x8>)
 800d642:	f000 b8ae 	b.w	800d7a2 <__retarget_lock_release_recursive>
 800d646:	bf00      	nop
 800d648:	200012c8 	.word	0x200012c8

0800d64c <__sinit_lock_acquire>:
 800d64c:	4801      	ldr	r0, [pc, #4]	; (800d654 <__sinit_lock_acquire+0x8>)
 800d64e:	f000 b8a7 	b.w	800d7a0 <__retarget_lock_acquire_recursive>
 800d652:	bf00      	nop
 800d654:	200012c3 	.word	0x200012c3

0800d658 <__sinit_lock_release>:
 800d658:	4801      	ldr	r0, [pc, #4]	; (800d660 <__sinit_lock_release+0x8>)
 800d65a:	f000 b8a2 	b.w	800d7a2 <__retarget_lock_release_recursive>
 800d65e:	bf00      	nop
 800d660:	200012c3 	.word	0x200012c3

0800d664 <__sinit>:
 800d664:	b510      	push	{r4, lr}
 800d666:	4604      	mov	r4, r0
 800d668:	f7ff fff0 	bl	800d64c <__sinit_lock_acquire>
 800d66c:	69a3      	ldr	r3, [r4, #24]
 800d66e:	b11b      	cbz	r3, 800d678 <__sinit+0x14>
 800d670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d674:	f7ff bff0 	b.w	800d658 <__sinit_lock_release>
 800d678:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d67c:	6523      	str	r3, [r4, #80]	; 0x50
 800d67e:	4b13      	ldr	r3, [pc, #76]	; (800d6cc <__sinit+0x68>)
 800d680:	4a13      	ldr	r2, [pc, #76]	; (800d6d0 <__sinit+0x6c>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	62a2      	str	r2, [r4, #40]	; 0x28
 800d686:	42a3      	cmp	r3, r4
 800d688:	bf08      	it	eq
 800d68a:	2301      	moveq	r3, #1
 800d68c:	4620      	mov	r0, r4
 800d68e:	bf08      	it	eq
 800d690:	61a3      	streq	r3, [r4, #24]
 800d692:	f000 f81f 	bl	800d6d4 <__sfp>
 800d696:	6060      	str	r0, [r4, #4]
 800d698:	4620      	mov	r0, r4
 800d69a:	f000 f81b 	bl	800d6d4 <__sfp>
 800d69e:	60a0      	str	r0, [r4, #8]
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f000 f817 	bl	800d6d4 <__sfp>
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	2104      	movs	r1, #4
 800d6aa:	60e0      	str	r0, [r4, #12]
 800d6ac:	6860      	ldr	r0, [r4, #4]
 800d6ae:	f7ff ff81 	bl	800d5b4 <std>
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	2109      	movs	r1, #9
 800d6b6:	68a0      	ldr	r0, [r4, #8]
 800d6b8:	f7ff ff7c 	bl	800d5b4 <std>
 800d6bc:	2202      	movs	r2, #2
 800d6be:	2112      	movs	r1, #18
 800d6c0:	68e0      	ldr	r0, [r4, #12]
 800d6c2:	f7ff ff77 	bl	800d5b4 <std>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	61a3      	str	r3, [r4, #24]
 800d6ca:	e7d1      	b.n	800d670 <__sinit+0xc>
 800d6cc:	0800db90 	.word	0x0800db90
 800d6d0:	0800d5fd 	.word	0x0800d5fd

0800d6d4 <__sfp>:
 800d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d6:	4607      	mov	r7, r0
 800d6d8:	f7ff ffac 	bl	800d634 <__sfp_lock_acquire>
 800d6dc:	4b1e      	ldr	r3, [pc, #120]	; (800d758 <__sfp+0x84>)
 800d6de:	681e      	ldr	r6, [r3, #0]
 800d6e0:	69b3      	ldr	r3, [r6, #24]
 800d6e2:	b913      	cbnz	r3, 800d6ea <__sfp+0x16>
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	f7ff ffbd 	bl	800d664 <__sinit>
 800d6ea:	3648      	adds	r6, #72	; 0x48
 800d6ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d6f0:	3b01      	subs	r3, #1
 800d6f2:	d503      	bpl.n	800d6fc <__sfp+0x28>
 800d6f4:	6833      	ldr	r3, [r6, #0]
 800d6f6:	b30b      	cbz	r3, 800d73c <__sfp+0x68>
 800d6f8:	6836      	ldr	r6, [r6, #0]
 800d6fa:	e7f7      	b.n	800d6ec <__sfp+0x18>
 800d6fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d700:	b9d5      	cbnz	r5, 800d738 <__sfp+0x64>
 800d702:	4b16      	ldr	r3, [pc, #88]	; (800d75c <__sfp+0x88>)
 800d704:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d708:	60e3      	str	r3, [r4, #12]
 800d70a:	6665      	str	r5, [r4, #100]	; 0x64
 800d70c:	f000 f847 	bl	800d79e <__retarget_lock_init_recursive>
 800d710:	f7ff ff96 	bl	800d640 <__sfp_lock_release>
 800d714:	2208      	movs	r2, #8
 800d716:	4629      	mov	r1, r5
 800d718:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d71c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d720:	6025      	str	r5, [r4, #0]
 800d722:	61a5      	str	r5, [r4, #24]
 800d724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d728:	f7fd faea 	bl	800ad00 <memset>
 800d72c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d734:	4620      	mov	r0, r4
 800d736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d738:	3468      	adds	r4, #104	; 0x68
 800d73a:	e7d9      	b.n	800d6f0 <__sfp+0x1c>
 800d73c:	2104      	movs	r1, #4
 800d73e:	4638      	mov	r0, r7
 800d740:	f7ff ff62 	bl	800d608 <__sfmoreglue>
 800d744:	4604      	mov	r4, r0
 800d746:	6030      	str	r0, [r6, #0]
 800d748:	2800      	cmp	r0, #0
 800d74a:	d1d5      	bne.n	800d6f8 <__sfp+0x24>
 800d74c:	f7ff ff78 	bl	800d640 <__sfp_lock_release>
 800d750:	230c      	movs	r3, #12
 800d752:	603b      	str	r3, [r7, #0]
 800d754:	e7ee      	b.n	800d734 <__sfp+0x60>
 800d756:	bf00      	nop
 800d758:	0800db90 	.word	0x0800db90
 800d75c:	ffff0001 	.word	0xffff0001

0800d760 <_fwalk_reent>:
 800d760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d764:	4606      	mov	r6, r0
 800d766:	4688      	mov	r8, r1
 800d768:	2700      	movs	r7, #0
 800d76a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d76e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d772:	f1b9 0901 	subs.w	r9, r9, #1
 800d776:	d505      	bpl.n	800d784 <_fwalk_reent+0x24>
 800d778:	6824      	ldr	r4, [r4, #0]
 800d77a:	2c00      	cmp	r4, #0
 800d77c:	d1f7      	bne.n	800d76e <_fwalk_reent+0xe>
 800d77e:	4638      	mov	r0, r7
 800d780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d784:	89ab      	ldrh	r3, [r5, #12]
 800d786:	2b01      	cmp	r3, #1
 800d788:	d907      	bls.n	800d79a <_fwalk_reent+0x3a>
 800d78a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d78e:	3301      	adds	r3, #1
 800d790:	d003      	beq.n	800d79a <_fwalk_reent+0x3a>
 800d792:	4629      	mov	r1, r5
 800d794:	4630      	mov	r0, r6
 800d796:	47c0      	blx	r8
 800d798:	4307      	orrs	r7, r0
 800d79a:	3568      	adds	r5, #104	; 0x68
 800d79c:	e7e9      	b.n	800d772 <_fwalk_reent+0x12>

0800d79e <__retarget_lock_init_recursive>:
 800d79e:	4770      	bx	lr

0800d7a0 <__retarget_lock_acquire_recursive>:
 800d7a0:	4770      	bx	lr

0800d7a2 <__retarget_lock_release_recursive>:
 800d7a2:	4770      	bx	lr

0800d7a4 <__swhatbuf_r>:
 800d7a4:	b570      	push	{r4, r5, r6, lr}
 800d7a6:	460e      	mov	r6, r1
 800d7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7ac:	4614      	mov	r4, r2
 800d7ae:	2900      	cmp	r1, #0
 800d7b0:	461d      	mov	r5, r3
 800d7b2:	b096      	sub	sp, #88	; 0x58
 800d7b4:	da07      	bge.n	800d7c6 <__swhatbuf_r+0x22>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	602b      	str	r3, [r5, #0]
 800d7ba:	89b3      	ldrh	r3, [r6, #12]
 800d7bc:	061a      	lsls	r2, r3, #24
 800d7be:	d410      	bmi.n	800d7e2 <__swhatbuf_r+0x3e>
 800d7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7c4:	e00e      	b.n	800d7e4 <__swhatbuf_r+0x40>
 800d7c6:	466a      	mov	r2, sp
 800d7c8:	f000 f914 	bl	800d9f4 <_fstat_r>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	dbf2      	blt.n	800d7b6 <__swhatbuf_r+0x12>
 800d7d0:	9a01      	ldr	r2, [sp, #4]
 800d7d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d7d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d7da:	425a      	negs	r2, r3
 800d7dc:	415a      	adcs	r2, r3
 800d7de:	602a      	str	r2, [r5, #0]
 800d7e0:	e7ee      	b.n	800d7c0 <__swhatbuf_r+0x1c>
 800d7e2:	2340      	movs	r3, #64	; 0x40
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	6023      	str	r3, [r4, #0]
 800d7e8:	b016      	add	sp, #88	; 0x58
 800d7ea:	bd70      	pop	{r4, r5, r6, pc}

0800d7ec <__smakebuf_r>:
 800d7ec:	898b      	ldrh	r3, [r1, #12]
 800d7ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d7f0:	079d      	lsls	r5, r3, #30
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	460c      	mov	r4, r1
 800d7f6:	d507      	bpl.n	800d808 <__smakebuf_r+0x1c>
 800d7f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d7fc:	6023      	str	r3, [r4, #0]
 800d7fe:	6123      	str	r3, [r4, #16]
 800d800:	2301      	movs	r3, #1
 800d802:	6163      	str	r3, [r4, #20]
 800d804:	b002      	add	sp, #8
 800d806:	bd70      	pop	{r4, r5, r6, pc}
 800d808:	466a      	mov	r2, sp
 800d80a:	ab01      	add	r3, sp, #4
 800d80c:	f7ff ffca 	bl	800d7a4 <__swhatbuf_r>
 800d810:	9900      	ldr	r1, [sp, #0]
 800d812:	4605      	mov	r5, r0
 800d814:	4630      	mov	r0, r6
 800d816:	f7ff f9c5 	bl	800cba4 <_malloc_r>
 800d81a:	b948      	cbnz	r0, 800d830 <__smakebuf_r+0x44>
 800d81c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d820:	059a      	lsls	r2, r3, #22
 800d822:	d4ef      	bmi.n	800d804 <__smakebuf_r+0x18>
 800d824:	f023 0303 	bic.w	r3, r3, #3
 800d828:	f043 0302 	orr.w	r3, r3, #2
 800d82c:	81a3      	strh	r3, [r4, #12]
 800d82e:	e7e3      	b.n	800d7f8 <__smakebuf_r+0xc>
 800d830:	4b0d      	ldr	r3, [pc, #52]	; (800d868 <__smakebuf_r+0x7c>)
 800d832:	62b3      	str	r3, [r6, #40]	; 0x28
 800d834:	89a3      	ldrh	r3, [r4, #12]
 800d836:	6020      	str	r0, [r4, #0]
 800d838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d83c:	81a3      	strh	r3, [r4, #12]
 800d83e:	9b00      	ldr	r3, [sp, #0]
 800d840:	6120      	str	r0, [r4, #16]
 800d842:	6163      	str	r3, [r4, #20]
 800d844:	9b01      	ldr	r3, [sp, #4]
 800d846:	b15b      	cbz	r3, 800d860 <__smakebuf_r+0x74>
 800d848:	4630      	mov	r0, r6
 800d84a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d84e:	f000 f8e3 	bl	800da18 <_isatty_r>
 800d852:	b128      	cbz	r0, 800d860 <__smakebuf_r+0x74>
 800d854:	89a3      	ldrh	r3, [r4, #12]
 800d856:	f023 0303 	bic.w	r3, r3, #3
 800d85a:	f043 0301 	orr.w	r3, r3, #1
 800d85e:	81a3      	strh	r3, [r4, #12]
 800d860:	89a0      	ldrh	r0, [r4, #12]
 800d862:	4305      	orrs	r5, r0
 800d864:	81a5      	strh	r5, [r4, #12]
 800d866:	e7cd      	b.n	800d804 <__smakebuf_r+0x18>
 800d868:	0800d5fd 	.word	0x0800d5fd

0800d86c <memchr>:
 800d86c:	4603      	mov	r3, r0
 800d86e:	b510      	push	{r4, lr}
 800d870:	b2c9      	uxtb	r1, r1
 800d872:	4402      	add	r2, r0
 800d874:	4293      	cmp	r3, r2
 800d876:	4618      	mov	r0, r3
 800d878:	d101      	bne.n	800d87e <memchr+0x12>
 800d87a:	2000      	movs	r0, #0
 800d87c:	e003      	b.n	800d886 <memchr+0x1a>
 800d87e:	7804      	ldrb	r4, [r0, #0]
 800d880:	3301      	adds	r3, #1
 800d882:	428c      	cmp	r4, r1
 800d884:	d1f6      	bne.n	800d874 <memchr+0x8>
 800d886:	bd10      	pop	{r4, pc}

0800d888 <__malloc_lock>:
 800d888:	4801      	ldr	r0, [pc, #4]	; (800d890 <__malloc_lock+0x8>)
 800d88a:	f7ff bf89 	b.w	800d7a0 <__retarget_lock_acquire_recursive>
 800d88e:	bf00      	nop
 800d890:	200012c4 	.word	0x200012c4

0800d894 <__malloc_unlock>:
 800d894:	4801      	ldr	r0, [pc, #4]	; (800d89c <__malloc_unlock+0x8>)
 800d896:	f7ff bf84 	b.w	800d7a2 <__retarget_lock_release_recursive>
 800d89a:	bf00      	nop
 800d89c:	200012c4 	.word	0x200012c4

0800d8a0 <_raise_r>:
 800d8a0:	291f      	cmp	r1, #31
 800d8a2:	b538      	push	{r3, r4, r5, lr}
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	460d      	mov	r5, r1
 800d8a8:	d904      	bls.n	800d8b4 <_raise_r+0x14>
 800d8aa:	2316      	movs	r3, #22
 800d8ac:	6003      	str	r3, [r0, #0]
 800d8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d8b6:	b112      	cbz	r2, 800d8be <_raise_r+0x1e>
 800d8b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8bc:	b94b      	cbnz	r3, 800d8d2 <_raise_r+0x32>
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f000 f830 	bl	800d924 <_getpid_r>
 800d8c4:	462a      	mov	r2, r5
 800d8c6:	4601      	mov	r1, r0
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8ce:	f000 b817 	b.w	800d900 <_kill_r>
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d00a      	beq.n	800d8ec <_raise_r+0x4c>
 800d8d6:	1c59      	adds	r1, r3, #1
 800d8d8:	d103      	bne.n	800d8e2 <_raise_r+0x42>
 800d8da:	2316      	movs	r3, #22
 800d8dc:	6003      	str	r3, [r0, #0]
 800d8de:	2001      	movs	r0, #1
 800d8e0:	e7e7      	b.n	800d8b2 <_raise_r+0x12>
 800d8e2:	2400      	movs	r4, #0
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d8ea:	4798      	blx	r3
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	e7e0      	b.n	800d8b2 <_raise_r+0x12>

0800d8f0 <raise>:
 800d8f0:	4b02      	ldr	r3, [pc, #8]	; (800d8fc <raise+0xc>)
 800d8f2:	4601      	mov	r1, r0
 800d8f4:	6818      	ldr	r0, [r3, #0]
 800d8f6:	f7ff bfd3 	b.w	800d8a0 <_raise_r>
 800d8fa:	bf00      	nop
 800d8fc:	20000444 	.word	0x20000444

0800d900 <_kill_r>:
 800d900:	b538      	push	{r3, r4, r5, lr}
 800d902:	2300      	movs	r3, #0
 800d904:	4d06      	ldr	r5, [pc, #24]	; (800d920 <_kill_r+0x20>)
 800d906:	4604      	mov	r4, r0
 800d908:	4608      	mov	r0, r1
 800d90a:	4611      	mov	r1, r2
 800d90c:	602b      	str	r3, [r5, #0]
 800d90e:	f7f4 ff2a 	bl	8002766 <_kill>
 800d912:	1c43      	adds	r3, r0, #1
 800d914:	d102      	bne.n	800d91c <_kill_r+0x1c>
 800d916:	682b      	ldr	r3, [r5, #0]
 800d918:	b103      	cbz	r3, 800d91c <_kill_r+0x1c>
 800d91a:	6023      	str	r3, [r4, #0]
 800d91c:	bd38      	pop	{r3, r4, r5, pc}
 800d91e:	bf00      	nop
 800d920:	200012cc 	.word	0x200012cc

0800d924 <_getpid_r>:
 800d924:	f7f4 bf18 	b.w	8002758 <_getpid>

0800d928 <__sread>:
 800d928:	b510      	push	{r4, lr}
 800d92a:	460c      	mov	r4, r1
 800d92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d930:	f000 f894 	bl	800da5c <_read_r>
 800d934:	2800      	cmp	r0, #0
 800d936:	bfab      	itete	ge
 800d938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d93a:	89a3      	ldrhlt	r3, [r4, #12]
 800d93c:	181b      	addge	r3, r3, r0
 800d93e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d942:	bfac      	ite	ge
 800d944:	6563      	strge	r3, [r4, #84]	; 0x54
 800d946:	81a3      	strhlt	r3, [r4, #12]
 800d948:	bd10      	pop	{r4, pc}

0800d94a <__swrite>:
 800d94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d94e:	461f      	mov	r7, r3
 800d950:	898b      	ldrh	r3, [r1, #12]
 800d952:	4605      	mov	r5, r0
 800d954:	05db      	lsls	r3, r3, #23
 800d956:	460c      	mov	r4, r1
 800d958:	4616      	mov	r6, r2
 800d95a:	d505      	bpl.n	800d968 <__swrite+0x1e>
 800d95c:	2302      	movs	r3, #2
 800d95e:	2200      	movs	r2, #0
 800d960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d964:	f000 f868 	bl	800da38 <_lseek_r>
 800d968:	89a3      	ldrh	r3, [r4, #12]
 800d96a:	4632      	mov	r2, r6
 800d96c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d970:	81a3      	strh	r3, [r4, #12]
 800d972:	4628      	mov	r0, r5
 800d974:	463b      	mov	r3, r7
 800d976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d97a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d97e:	f000 b817 	b.w	800d9b0 <_write_r>

0800d982 <__sseek>:
 800d982:	b510      	push	{r4, lr}
 800d984:	460c      	mov	r4, r1
 800d986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d98a:	f000 f855 	bl	800da38 <_lseek_r>
 800d98e:	1c43      	adds	r3, r0, #1
 800d990:	89a3      	ldrh	r3, [r4, #12]
 800d992:	bf15      	itete	ne
 800d994:	6560      	strne	r0, [r4, #84]	; 0x54
 800d996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d99a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d99e:	81a3      	strheq	r3, [r4, #12]
 800d9a0:	bf18      	it	ne
 800d9a2:	81a3      	strhne	r3, [r4, #12]
 800d9a4:	bd10      	pop	{r4, pc}

0800d9a6 <__sclose>:
 800d9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9aa:	f000 b813 	b.w	800d9d4 <_close_r>
	...

0800d9b0 <_write_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	4608      	mov	r0, r1
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	4d05      	ldr	r5, [pc, #20]	; (800d9d0 <_write_r+0x20>)
 800d9bc:	602a      	str	r2, [r5, #0]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	f7f4 ff08 	bl	80027d4 <_write>
 800d9c4:	1c43      	adds	r3, r0, #1
 800d9c6:	d102      	bne.n	800d9ce <_write_r+0x1e>
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	b103      	cbz	r3, 800d9ce <_write_r+0x1e>
 800d9cc:	6023      	str	r3, [r4, #0]
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
 800d9d0:	200012cc 	.word	0x200012cc

0800d9d4 <_close_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	4d05      	ldr	r5, [pc, #20]	; (800d9f0 <_close_r+0x1c>)
 800d9da:	4604      	mov	r4, r0
 800d9dc:	4608      	mov	r0, r1
 800d9de:	602b      	str	r3, [r5, #0]
 800d9e0:	f7f4 ff14 	bl	800280c <_close>
 800d9e4:	1c43      	adds	r3, r0, #1
 800d9e6:	d102      	bne.n	800d9ee <_close_r+0x1a>
 800d9e8:	682b      	ldr	r3, [r5, #0]
 800d9ea:	b103      	cbz	r3, 800d9ee <_close_r+0x1a>
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	bd38      	pop	{r3, r4, r5, pc}
 800d9f0:	200012cc 	.word	0x200012cc

0800d9f4 <_fstat_r>:
 800d9f4:	b538      	push	{r3, r4, r5, lr}
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	4d06      	ldr	r5, [pc, #24]	; (800da14 <_fstat_r+0x20>)
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	4608      	mov	r0, r1
 800d9fe:	4611      	mov	r1, r2
 800da00:	602b      	str	r3, [r5, #0]
 800da02:	f7f4 ff0e 	bl	8002822 <_fstat>
 800da06:	1c43      	adds	r3, r0, #1
 800da08:	d102      	bne.n	800da10 <_fstat_r+0x1c>
 800da0a:	682b      	ldr	r3, [r5, #0]
 800da0c:	b103      	cbz	r3, 800da10 <_fstat_r+0x1c>
 800da0e:	6023      	str	r3, [r4, #0]
 800da10:	bd38      	pop	{r3, r4, r5, pc}
 800da12:	bf00      	nop
 800da14:	200012cc 	.word	0x200012cc

0800da18 <_isatty_r>:
 800da18:	b538      	push	{r3, r4, r5, lr}
 800da1a:	2300      	movs	r3, #0
 800da1c:	4d05      	ldr	r5, [pc, #20]	; (800da34 <_isatty_r+0x1c>)
 800da1e:	4604      	mov	r4, r0
 800da20:	4608      	mov	r0, r1
 800da22:	602b      	str	r3, [r5, #0]
 800da24:	f7f4 ff0c 	bl	8002840 <_isatty>
 800da28:	1c43      	adds	r3, r0, #1
 800da2a:	d102      	bne.n	800da32 <_isatty_r+0x1a>
 800da2c:	682b      	ldr	r3, [r5, #0]
 800da2e:	b103      	cbz	r3, 800da32 <_isatty_r+0x1a>
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	bd38      	pop	{r3, r4, r5, pc}
 800da34:	200012cc 	.word	0x200012cc

0800da38 <_lseek_r>:
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	4604      	mov	r4, r0
 800da3c:	4608      	mov	r0, r1
 800da3e:	4611      	mov	r1, r2
 800da40:	2200      	movs	r2, #0
 800da42:	4d05      	ldr	r5, [pc, #20]	; (800da58 <_lseek_r+0x20>)
 800da44:	602a      	str	r2, [r5, #0]
 800da46:	461a      	mov	r2, r3
 800da48:	f7f4 ff04 	bl	8002854 <_lseek>
 800da4c:	1c43      	adds	r3, r0, #1
 800da4e:	d102      	bne.n	800da56 <_lseek_r+0x1e>
 800da50:	682b      	ldr	r3, [r5, #0]
 800da52:	b103      	cbz	r3, 800da56 <_lseek_r+0x1e>
 800da54:	6023      	str	r3, [r4, #0]
 800da56:	bd38      	pop	{r3, r4, r5, pc}
 800da58:	200012cc 	.word	0x200012cc

0800da5c <_read_r>:
 800da5c:	b538      	push	{r3, r4, r5, lr}
 800da5e:	4604      	mov	r4, r0
 800da60:	4608      	mov	r0, r1
 800da62:	4611      	mov	r1, r2
 800da64:	2200      	movs	r2, #0
 800da66:	4d05      	ldr	r5, [pc, #20]	; (800da7c <_read_r+0x20>)
 800da68:	602a      	str	r2, [r5, #0]
 800da6a:	461a      	mov	r2, r3
 800da6c:	f7f4 fe95 	bl	800279a <_read>
 800da70:	1c43      	adds	r3, r0, #1
 800da72:	d102      	bne.n	800da7a <_read_r+0x1e>
 800da74:	682b      	ldr	r3, [r5, #0]
 800da76:	b103      	cbz	r3, 800da7a <_read_r+0x1e>
 800da78:	6023      	str	r3, [r4, #0]
 800da7a:	bd38      	pop	{r3, r4, r5, pc}
 800da7c:	200012cc 	.word	0x200012cc

0800da80 <_init>:
 800da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da82:	bf00      	nop
 800da84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da86:	bc08      	pop	{r3}
 800da88:	469e      	mov	lr, r3
 800da8a:	4770      	bx	lr

0800da8c <_fini>:
 800da8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8e:	bf00      	nop
 800da90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da92:	bc08      	pop	{r3}
 800da94:	469e      	mov	lr, r3
 800da96:	4770      	bx	lr
